
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800eab8  0800eab8  0001eab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eff4  0800eff4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eff4  0800eff4  0001eff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800effc  0800effc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800effc  0800effc  0001effc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f000  0800f000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002108  200001e0  0800f1e4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200022e8  0800f1e4  000222e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291ab  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab5  00000000  00000000  000493bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002068  00000000  00000000  0004de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb0  00000000  00000000  0004fed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d5e  00000000  00000000  00051d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023790  00000000  00000000  00057ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001335d5  00000000  00000000  0007b276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ae84b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a07c  00000000  00000000  001ae89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ea9c 	.word	0x0800ea9c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800ea9c 	.word	0x0800ea9c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 ffc8 	bl	8001e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f92b 	bl	8001144 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eee:	f000 f98b 	bl	8001208 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fb4d 	bl	8001590 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000ef6:	f000 fa2d 	bl	8001354 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000efa:	f000 fb1f 	bl	800153c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000efe:	f000 f9b3 	bl	8001268 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f02:	f000 fa73 	bl	80013ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f06:	f000 facb 	bl	80014a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	487a      	ldr	r0, [pc, #488]	; (80010f8 <main+0x218>)
 8000f0e:	f004 fd17 	bl	8005940 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f12:	2100      	movs	r1, #0
 8000f14:	4879      	ldr	r0, [pc, #484]	; (80010fc <main+0x21c>)
 8000f16:	f004 fd13 	bl	8005940 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f1a:	f006 ffa7 	bl	8007e6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Read_Temp */
  Read_TempHandle = osThreadNew(ReadTemp, NULL, &Read_Temp_attributes);
 8000f1e:	4a78      	ldr	r2, [pc, #480]	; (8001100 <main+0x220>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4878      	ldr	r0, [pc, #480]	; (8001104 <main+0x224>)
 8000f24:	f006 ffec 	bl	8007f00 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a77      	ldr	r2, [pc, #476]	; (8001108 <main+0x228>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* creation of Control_Motor */
  Control_MotorHandle = osThreadNew(ControlMotor, NULL, &Control_Motor_attributes);
 8000f2e:	4a77      	ldr	r2, [pc, #476]	; (800110c <main+0x22c>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4877      	ldr	r0, [pc, #476]	; (8001110 <main+0x230>)
 8000f34:	f006 ffe4 	bl	8007f00 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a76      	ldr	r2, [pc, #472]	; (8001114 <main+0x234>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* creation of Control_Temp */
  Control_TempHandle = osThreadNew(ControlTemp, NULL, &Control_Temp_attributes);
 8000f3e:	4a76      	ldr	r2, [pc, #472]	; (8001118 <main+0x238>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4876      	ldr	r0, [pc, #472]	; (800111c <main+0x23c>)
 8000f44:	f006 ffdc 	bl	8007f00 <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a75      	ldr	r2, [pc, #468]	; (8001120 <main+0x240>)
 8000f4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f4e:	f006 ffb1 	bl	8007eb4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f56:	4873      	ldr	r0, [pc, #460]	; (8001124 <main+0x244>)
 8000f58:	f002 fcac 	bl	80038b4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f000 ffc5 	bl	8001eec <HAL_Delay>
		 double val, resistance, A,B,C;
			  A = 0.000732;
 8000f62:	a355      	add	r3, pc, #340	; (adr r3, 80010b8 <main+0x1d8>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	e9c7 2308 	strd	r2, r3, [r7, #32]
			  B = 0.000214;
 8000f6c:	a354      	add	r3, pc, #336	; (adr r3, 80010c0 <main+0x1e0>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	e9c7 2306 	strd	r2, r3, [r7, #24]
			  C = 1.07E-07;
 8000f76:	a354      	add	r3, pc, #336	; (adr r3, 80010c8 <main+0x1e8>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			  HAL_ADC_Start(&hadc1);
 8000f80:	4869      	ldr	r0, [pc, #420]	; (8001128 <main+0x248>)
 8000f82:	f001 fb1f 	bl	80025c4 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f86:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8a:	4867      	ldr	r0, [pc, #412]	; (8001128 <main+0x248>)
 8000f8c:	f001 fbd4 	bl	8002738 <HAL_ADC_PollForConversion>
				raw = HAL_ADC_GetValue(&hadc1);
 8000f90:	4865      	ldr	r0, [pc, #404]	; (8001128 <main+0x248>)
 8000f92:	f001 fca9 	bl	80028e8 <HAL_ADC_GetValue>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b64      	ldr	r3, [pc, #400]	; (800112c <main+0x24c>)
 8000f9c:	801a      	strh	r2, [r3, #0]
				val= (3.3/4096)*raw;
 8000f9e:	4b63      	ldr	r3, [pc, #396]	; (800112c <main+0x24c>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fad6 	bl	8000554 <__aeabi_i2d>
 8000fa8:	a349      	add	r3, pc, #292	; (adr r3, 80010d0 <main+0x1f0>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	e9c7 2302 	strd	r2, r3, [r7, #8]
				resistance = val/((3.3-val)/100000);
 8000fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fbe:	a146      	add	r1, pc, #280	; (adr r1, 80010d8 <main+0x1f8>)
 8000fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fc4:	f7ff f978 	bl	80002b8 <__aeabi_dsub>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	a343      	add	r3, pc, #268	; (adr r3, 80010e0 <main+0x200>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fc51 	bl	800087c <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fe2:	f7ff fc4b 	bl	800087c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9c7 2300 	strd	r2, r3, [r7]
				temp = 1/(A+B*log(resistance)+C*pow(log(resistance),3))-272.15;
 8000fee:	ed97 0b00 	vldr	d0, [r7]
 8000ff2:	f009 fcb5 	bl	800a960 <log>
 8000ff6:	ec51 0b10 	vmov	r0, r1, d0
 8000ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ffe:	f7ff fb13 	bl	8000628 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800100e:	f7ff f955 	bl	80002bc <__adddf3>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4614      	mov	r4, r2
 8001018:	461d      	mov	r5, r3
 800101a:	ed97 0b00 	vldr	d0, [r7]
 800101e:	f009 fc9f 	bl	800a960 <log>
 8001022:	eeb0 7a40 	vmov.f32	s14, s0
 8001026:	eef0 7a60 	vmov.f32	s15, s1
 800102a:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80010e8 <main+0x208>
 800102e:	eeb0 0a47 	vmov.f32	s0, s14
 8001032:	eef0 0a67 	vmov.f32	s1, s15
 8001036:	f009 fcd1 	bl	800a9dc <pow>
 800103a:	ec51 0b10 	vmov	r0, r1, d0
 800103e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001042:	f7ff faf1 	bl	8000628 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4620      	mov	r0, r4
 800104c:	4629      	mov	r1, r5
 800104e:	f7ff f935 	bl	80002bc <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	f04f 0000 	mov.w	r0, #0
 800105a:	4935      	ldr	r1, [pc, #212]	; (8001130 <main+0x250>)
 800105c:	f7ff fc0e 	bl	800087c <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	a321      	add	r3, pc, #132	; (adr r3, 80010f0 <main+0x210>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff f923 	bl	80002b8 <__aeabi_dsub>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	492f      	ldr	r1, [pc, #188]	; (8001134 <main+0x254>)
 8001078:	e9c1 2300 	strd	r2, r3, [r1]
				sprintf(msg, "% hu, %f , %f\r\n", raw, temp, resistance);
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <main+0x24c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	461c      	mov	r4, r3
 8001082:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <main+0x254>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800108c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001090:	e9cd 2300 	strd	r2, r3, [sp]
 8001094:	4622      	mov	r2, r4
 8001096:	4928      	ldr	r1, [pc, #160]	; (8001138 <main+0x258>)
 8001098:	4828      	ldr	r0, [pc, #160]	; (800113c <main+0x25c>)
 800109a:	f00b fc31 	bl	800c900 <siprintf>
						HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800109e:	4827      	ldr	r0, [pc, #156]	; (800113c <main+0x25c>)
 80010a0:	f7ff f8ae 	bl	8000200 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	4923      	ldr	r1, [pc, #140]	; (800113c <main+0x25c>)
 80010ae:	4824      	ldr	r0, [pc, #144]	; (8001140 <main+0x260>)
 80010b0:	f005 fd98 	bl	8006be4 <HAL_UART_Transmit>
	{
 80010b4:	e74d      	b.n	8000f52 <main+0x72>
 80010b6:	bf00      	nop
 80010b8:	07c419a0 	.word	0x07c419a0
 80010bc:	3f47fc76 	.word	0x3f47fc76
 80010c0:	00b02928 	.word	0x00b02928
 80010c4:	3f2c0ca6 	.word	0x3f2c0ca6
 80010c8:	e820eec1 	.word	0xe820eec1
 80010cc:	3e7cb8fb 	.word	0x3e7cb8fb
 80010d0:	66666666 	.word	0x66666666
 80010d4:	3f4a6666 	.word	0x3f4a6666
 80010d8:	66666666 	.word	0x66666666
 80010dc:	400a6666 	.word	0x400a6666
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40f86a00 	.word	0x40f86a00
 80010e8:	00000000 	.word	0x00000000
 80010ec:	40080000 	.word	0x40080000
 80010f0:	66666666 	.word	0x66666666
 80010f4:	40710266 	.word	0x40710266
 80010f8:	20000340 	.word	0x20000340
 80010fc:	200002f4 	.word	0x200002f4
 8001100:	0800eb0c 	.word	0x0800eb0c
 8001104:	0800178d 	.word	0x0800178d
 8001108:	20000898 	.word	0x20000898
 800110c:	0800eb30 	.word	0x0800eb30
 8001110:	0800179d 	.word	0x0800179d
 8001114:	2000089c 	.word	0x2000089c
 8001118:	0800eb54 	.word	0x0800eb54
 800111c:	080017ad 	.word	0x080017ad
 8001120:	200008a0 	.word	0x200008a0
 8001124:	48000400 	.word	0x48000400
 8001128:	200001fc 	.word	0x200001fc
 800112c:	200008a4 	.word	0x200008a4
 8001130:	3ff00000 	.word	0x3ff00000
 8001134:	200008a8 	.word	0x200008a8
 8001138:	0800eae4 	.word	0x0800eae4
 800113c:	200008b0 	.word	0x200008b0
 8001140:	20000264 	.word	0x20000264

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b098      	sub	sp, #96	; 0x60
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2248      	movs	r2, #72	; 0x48
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00a fe53 	bl	800bdfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001166:	2000      	movs	r0, #0
 8001168:	f002 fd36 	bl	8003bd8 <HAL_PWREx_ControlVoltageScaling>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001172:	f000 fb35 	bl	80017e0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001176:	f002 fcff 	bl	8003b78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <SystemClock_Config+0xc0>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <SystemClock_Config+0xc0>)
 8001182:	f023 0318 	bic.w	r3, r3, #24
 8001186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800118a:	2314      	movs	r3, #20
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800118e:	2301      	movs	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001192:	2301      	movs	r3, #1
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a2:	2301      	movs	r3, #1
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80011aa:	233c      	movs	r3, #60	; 0x3c
 80011ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fdce 	bl	8003d60 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80011ca:	f000 fb09 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2303      	movs	r3, #3
 80011d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2105      	movs	r1, #5
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fa35 	bl	8004658 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011f4:	f000 faf4 	bl	80017e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011f8:	f004 f88a 	bl	8005310 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011fc:	bf00      	nop
 80011fe:	3760      	adds	r7, #96	; 0x60
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000

08001208 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0a6      	sub	sp, #152	; 0x98
 800120c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2298      	movs	r2, #152	; 0x98
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f00a fdf2 	bl	800bdfe <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800121a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800121e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800122c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800122e:	2301      	movs	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001236:	2318      	movs	r3, #24
 8001238:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001246:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800124a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fcf2 	bl	8004c38 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800125a:	f000 fac1 	bl	80017e0 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3798      	adds	r7, #152	; 0x98
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <MX_ADC1_Init+0xe0>)
 800128c:	4a2f      	ldr	r2, [pc, #188]	; (800134c <MX_ADC1_Init+0xe4>)
 800128e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_ADC1_Init+0xe0>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_ADC1_Init+0xe0>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_ADC1_Init+0xe0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012aa:	2204      	movs	r2, #4
 80012ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ea:	4817      	ldr	r0, [pc, #92]	; (8001348 <MX_ADC1_Init+0xe0>)
 80012ec:	f001 f818 	bl	8002320 <HAL_ADC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012f6:	f000 fa73 	bl	80017e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <MX_ADC1_Init+0xe0>)
 8001306:	f001 ffa5 	bl	8003254 <HAL_ADCEx_MultiModeConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001310:	f000 fa66 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_ADC1_Init+0xe8>)
 8001316:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001318:	2306      	movs	r3, #6
 800131a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001320:	237f      	movs	r3, #127	; 0x7f
 8001322:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001324:	2304      	movs	r3, #4
 8001326:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_ADC1_Init+0xe0>)
 8001332:	f001 fae7 	bl	8002904 <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800133c:	f000 fa50 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200001fc 	.word	0x200001fc
 800134c:	50040000 	.word	0x50040000
 8001350:	04300002 	.word	0x04300002

08001354 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 800135a:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <MX_LPUART1_UART_Init+0x94>)
 800135c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 800139e:	f005 fbd1 	bl	8006b44 <HAL_UART_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80013a8:	f000 fa1a 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 80013b0:	f006 f998 	bl	80076e4 <HAL_UARTEx_SetTxFifoThreshold>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ba:	f000 fa11 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013be:	2100      	movs	r1, #0
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 80013c2:	f006 f9cd 	bl	8007760 <HAL_UARTEx_SetRxFifoThreshold>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013cc:	f000 fa08 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_LPUART1_UART_Init+0x90>)
 80013d2:	f006 f94e 	bl	8007672 <HAL_UARTEx_DisableFifoMode>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013dc:	f000 fa00 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000264 	.word	0x20000264
 80013e8:	40008000 	.word	0x40008000

080013ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_TIM3_Init+0xac>)
 8001412:	4a22      	ldr	r2, [pc, #136]	; (800149c <MX_TIM3_Init+0xb0>)
 8001414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_TIM3_Init+0xac>)
 8001418:	2277      	movs	r2, #119	; 0x77
 800141a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_TIM3_Init+0xac>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MX_TIM3_Init+0xac>)
 8001424:	2263      	movs	r2, #99	; 0x63
 8001426:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_TIM3_Init+0xac>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_TIM3_Init+0xac>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001434:	4818      	ldr	r0, [pc, #96]	; (8001498 <MX_TIM3_Init+0xac>)
 8001436:	f004 fa2b 	bl	8005890 <HAL_TIM_PWM_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001440:	f000 f9ce 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <MX_TIM3_Init+0xac>)
 8001454:	f005 fad0 	bl	80069f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800145e:	f000 f9bf 	bl	80017e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001462:	2360      	movs	r3, #96	; 0x60
 8001464:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_TIM3_Init+0xac>)
 800147a:	f004 fc87 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001484:	f000 f9ac 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_TIM3_Init+0xac>)
 800148a:	f000 fab7 	bl	80019fc <HAL_TIM_MspPostInit>

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200002f4 	.word	0x200002f4
 800149c:	40000400 	.word	0x40000400

080014a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_TIM4_Init+0x94>)
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <MX_TIM4_Init+0x98>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 119;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_TIM4_Init+0x94>)
 80014c6:	2277      	movs	r2, #119	; 0x77
 80014c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_TIM4_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_TIM4_Init+0x94>)
 80014d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_TIM4_Init+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_TIM4_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <MX_TIM4_Init+0x94>)
 80014e6:	f004 f90b 	bl	8005700 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80014f0:	f000 f976 	bl	80017e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_TIM4_Init+0x94>)
 8001502:	f004 fd57 	bl	8005fb4 <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800150c:	f000 f968 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_TIM4_Init+0x94>)
 800151e:	f005 fa6b 	bl	80069f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001528:	f000 f95a 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000340 	.word	0x20000340
 8001538:	40000800 	.word	0x40000800

0800153c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001546:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800154a:	2206      	movs	r2, #6
 800154c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001550:	2202      	movs	r2, #2
 8001552:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001556:	2201      	movs	r2, #1
 8001558:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001568:	2201      	movs	r2, #1
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001574:	2201      	movs	r2, #1
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800157a:	f002 f9b5 	bl	80038e8 <HAL_PCD_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001584:	f000 f92c 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000038c 	.word	0x2000038c

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b72      	ldr	r3, [pc, #456]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a71      	ldr	r2, [pc, #452]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015be:	4b6c      	ldr	r3, [pc, #432]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a6b      	ldr	r2, [pc, #428]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b69      	ldr	r3, [pc, #420]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d6:	4b66      	ldr	r3, [pc, #408]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a65      	ldr	r2, [pc, #404]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	4b60      	ldr	r3, [pc, #384]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a5f      	ldr	r2, [pc, #380]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <MX_GPIO_Init+0x1e0>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a59      	ldr	r2, [pc, #356]	; (8001770 <MX_GPIO_Init+0x1e0>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b57      	ldr	r3, [pc, #348]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800161e:	4b54      	ldr	r3, [pc, #336]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a53      	ldr	r2, [pc, #332]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <MX_GPIO_Init+0x1e0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001636:	f002 fb83 	bl	8003d40 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <MX_GPIO_Init+0x1e0>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a46      	ldr	r2, [pc, #280]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <MX_GPIO_Init+0x1e0>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001670:	4840      	ldr	r0, [pc, #256]	; (8001774 <MX_GPIO_Init+0x1e4>)
 8001672:	f002 f907 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167c:	483e      	ldr	r0, [pc, #248]	; (8001778 <MX_GPIO_Init+0x1e8>)
 800167e:	f002 f901 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001688:	483c      	ldr	r0, [pc, #240]	; (800177c <MX_GPIO_Init+0x1ec>)
 800168a:	f002 f8fb 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	483b      	ldr	r0, [pc, #236]	; (8001780 <MX_GPIO_Init+0x1f0>)
 8001694:	f002 f8f6 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	4839      	ldr	r0, [pc, #228]	; (8001784 <MX_GPIO_Init+0x1f4>)
 800169e:	f002 f8f1 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4619      	mov	r1, r3
 80016b8:	4833      	ldr	r0, [pc, #204]	; (8001788 <MX_GPIO_Init+0x1f8>)
 80016ba:	f001 ff51 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <MX_GPIO_Init+0x1e4>)
 80016d8:	f001 ff42 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	4820      	ldr	r0, [pc, #128]	; (8001778 <MX_GPIO_Init+0x1e8>)
 80016f6:	f001 ff33 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80016fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	481a      	ldr	r0, [pc, #104]	; (800177c <MX_GPIO_Init+0x1ec>)
 8001714:	f001 ff24 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001718:	2320      	movs	r3, #32
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	4815      	ldr	r0, [pc, #84]	; (8001780 <MX_GPIO_Init+0x1f0>)
 800172c:	f001 ff18 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <MX_GPIO_Init+0x1f0>)
 8001748:	f001 ff0a 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_GPIO_Init+0x1f4>)
 8001764:	f001 fefc 	bl	8003560 <HAL_GPIO_Init>

}
 8001768:	bf00      	nop
 800176a:	3738      	adds	r7, #56	; 0x38
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	48001400 	.word	0x48001400
 8001778:	48001000 	.word	0x48001000
 800177c:	48000400 	.word	0x48000400
 8001780:	48001800 	.word	0x48001800
 8001784:	48000c00 	.word	0x48000c00
 8001788:	48000800 	.word	0x48000800

0800178c <ReadTemp>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadTemp */
void ReadTemp(void *argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
		val= (3.3/4096)*raw;
		resistance = val/((3.3-val)/100000);
		temp = 1/(A+B*log(resistance)+C*pow(log(resistance),3))-272.15;
		sprintf(msg, "% hu, %f , %f\r\n", raw, temp, resistance);
				HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);*/
    osDelay(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f006 fc45 	bl	8008024 <osDelay>
 800179a:	e7fb      	b.n	8001794 <ReadTemp+0x8>

0800179c <ControlMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlMotor */
void ControlMotor(void *argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	//tv = __HAL_TIM_GET_COUNTER(&htim4);
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim4) < 300);
	  }*/
    osDelay(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f006 fc3d 	bl	8008024 <osDelay>
 80017aa:	e7fb      	b.n	80017a4 <ControlMotor+0x8>

080017ac <ControlTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlTemp */
void ControlTemp(void *argument)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	else
	{
		TIM3->CCR1 = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
	}*/
    osDelay(1);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f006 fc35 	bl	8008024 <osDelay>
 80017ba:	e7fb      	b.n	80017b4 <ControlTemp+0x8>

080017bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ce:	f000 fb6d 	bl	8001eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40001000 	.word	0x40001000

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>
	...

080017ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_MspInit+0x4c>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_MspInit+0x4c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_MspInit+0x4c>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_MspInit+0x4c>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_MspInit+0x4c>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	210f      	movs	r1, #15
 8001826:	f06f 0001 	mvn.w	r0, #1
 800182a:	f001 fe6f 	bl	800350c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d123      	bne.n	80018a6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_ADC_MspInit+0x78>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001892:	230b      	movs	r3, #11
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_ADC_MspInit+0x7c>)
 80018a2:	f001 fe5d 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	50040000 	.word	0x50040000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000800 	.word	0x48000800

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0b0      	sub	sp, #192	; 0xc0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2298      	movs	r2, #152	; 0x98
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f00a fa8e 	bl	800bdfe <memset>
  if(huart->Instance==LPUART1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a22      	ldr	r2, [pc, #136]	; (8001970 <HAL_UART_MspInit+0xb4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d13d      	bne.n	8001968 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018ec:	2320      	movs	r3, #32
 80018ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 f99d 	bl	8004c38 <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001904:	f7ff ff6c 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_UART_MspInit+0xb8>)
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_UART_MspInit+0xb8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_UART_MspInit+0xb8>)
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_UART_MspInit+0xb8>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_UART_MspInit+0xb8>)
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UART_MspInit+0xb8>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001938:	f002 fa02 	bl	8003d40 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800193c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001956:	2308      	movs	r3, #8
 8001958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001960:	4619      	mov	r1, r3
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_UART_MspInit+0xbc>)
 8001964:	f001 fdfc 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001968:	bf00      	nop
 800196a:	37c0      	adds	r7, #192	; 0xc0
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40008000 	.word	0x40008000
 8001974:	40021000 	.word	0x40021000
 8001978:	48001800 	.word	0x48001800

0800197c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_TIM_PWM_MspInit+0x38>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10b      	bne.n	80019a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_TIM_Base_MspInit+0x38>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10b      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_TIM_Base_MspInit+0x3c>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_TIM_Base_MspInit+0x3c>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_TIM_Base_MspInit+0x3c>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40000800 	.word	0x40000800
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_TIM_MspPostInit+0x64>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d11b      	bne.n	8001a56 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_TIM_MspPostInit+0x68>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_TIM_MspPostInit+0x68>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_TIM_MspPostInit+0x68>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a36:	2310      	movs	r3, #16
 8001a38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_TIM_MspPostInit+0x6c>)
 8001a52:	f001 fd85 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40000400 	.word	0x40000400
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000400 	.word	0x48000400

08001a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8c:	d154      	bne.n	8001b38 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a2b      	ldr	r2, [pc, #172]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001aa6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ab8:	230a      	movs	r3, #10
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f001 fd4b 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f001 fd3d 	bl	8003560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d114      	bne.n	8001b34 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001b22:	f002 f8fd 	bl	8003d20 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <HAL_PCD_MspInit+0xd4>)
 8001b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b32:	e001      	b.n	8001b38 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001b34:	f002 f8f4 	bl	8003d20 <HAL_PWREx_EnableVddUSB>
}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_InitTick+0xe0>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <HAL_InitTick+0xe0>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_InitTick+0xe0>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6a:	f107 0210 	add.w	r2, r7, #16
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 ff6d 	bl	8004a54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b84:	f002 ff3a 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8001b88:	6378      	str	r0, [r7, #52]	; 0x34
 8001b8a:	e004      	b.n	8001b96 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b8c:	f002 ff36 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8001b90:	4603      	mov	r3, r0
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_InitTick+0xe4>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_InitTick+0xe8>)
 8001ba6:	4a22      	ldr	r2, [pc, #136]	; (8001c30 <HAL_InitTick+0xec>)
 8001ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_InitTick+0xe8>)
 8001bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bb0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_InitTick+0xe8>)
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_InitTick+0xe8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_InitTick+0xe8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_InitTick+0xe8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001bca:	4818      	ldr	r0, [pc, #96]	; (8001c2c <HAL_InitTick+0xe8>)
 8001bcc:	f003 fd98 	bl	8005700 <HAL_TIM_Base_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001bd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d11b      	bne.n	8001c16 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001bde:	4813      	ldr	r0, [pc, #76]	; (8001c2c <HAL_InitTick+0xe8>)
 8001be0:	f003 fde6 	bl	80057b0 <HAL_TIM_Base_Start_IT>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d111      	bne.n	8001c16 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf2:	2036      	movs	r0, #54	; 0x36
 8001bf4:	f001 fca6 	bl	8003544 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	d808      	bhi.n	8001c10 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	2036      	movs	r0, #54	; 0x36
 8001c04:	f001 fc82 	bl	800350c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_InitTick+0xf0>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e002      	b.n	8001c16 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3738      	adds	r7, #56	; 0x38
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	200008bc 	.word	0x200008bc
 8001c30:	40001000 	.word	0x40001000
 8001c34:	20000004 	.word	0x20000004

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM6_DAC_IRQHandler+0x10>)
 8001c6a:	f003 ff6f 	bl	8005b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200008bc 	.word	0x200008bc

08001c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
	return 1;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_kill>:

int _kill(int pid, int sig)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c92:	f009 ff83 	bl	800bb9c <__errno>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2216      	movs	r2, #22
 8001c9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_exit>:

void _exit (int status)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ffe7 	bl	8001c88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cba:	e7fe      	b.n	8001cba <_exit+0x12>

08001cbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e00a      	b.n	8001ce4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cce:	f3af 8000 	nop.w
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf0      	blt.n	8001cce <_read+0x12>
	}

return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e009      	b.n	8001d1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf1      	blt.n	8001d08 <_write+0x12>
	}
	return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_close>:

int _close(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d56:	605a      	str	r2, [r3, #4]
	return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_isatty>:

int _isatty(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <_sbrk+0x5c>)
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <_sbrk+0x60>)
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <_sbrk+0x64>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <_sbrk+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d207      	bcs.n	8001dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc8:	f009 fee8 	bl	800bb9c <__errno>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	220c      	movs	r2, #12
 8001dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e009      	b.n	8001dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <_sbrk+0x64>)
 8001de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20050000 	.word	0x20050000
 8001df8:	00000400 	.word	0x00000400
 8001dfc:	20000908 	.word	0x20000908
 8001e00:	200022e8 	.word	0x200022e8

08001e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff ffea 	bl	8001e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e32:	490d      	ldr	r1, [pc, #52]	; (8001e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <LoopForever+0xe>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e48:	4c0a      	ldr	r4, [pc, #40]	; (8001e74 <LoopForever+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e56:	f009 ff9d 	bl	800bd94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5a:	f7ff f841 	bl	8000ee0 <main>

08001e5e <LoopForever>:

LoopForever:
    b LoopForever
 8001e5e:	e7fe      	b.n	8001e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e6c:	0800f004 	.word	0x0800f004
  ldr r2, =_sbss
 8001e70:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e74:	200022e8 	.word	0x200022e8

08001e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC1_2_IRQHandler>

08001e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f001 fb36 	bl	80034f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f7ff fe5a 	bl	8001b44 <HAL_InitTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	71fb      	strb	r3, [r7, #7]
 8001e9a:	e001      	b.n	8001ea0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e9c:	f7ff fca6 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	2000090c 	.word	0x2000090c

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	2000090c 	.word	0x2000090c

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008

08001f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3360      	adds	r3, #96	; 0x60
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <LL_ADC_SetOffset+0x44>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	03fff000 	.word	0x03fff000

08001fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3360      	adds	r3, #96	; 0x60
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3360      	adds	r3, #96	; 0x60
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	615a      	str	r2, [r3, #20]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002092:	b480      	push	{r7}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3330      	adds	r3, #48	; 0x30
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	211f      	movs	r1, #31
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	f003 011f 	and.w	r1, r3, #31
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020de:	bf00      	nop
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b087      	sub	sp, #28
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3314      	adds	r3, #20
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	0e5b      	lsrs	r3, r3, #25
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	4413      	add	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0d1b      	lsrs	r3, r3, #20
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2107      	movs	r1, #7
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	401a      	ands	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0d1b      	lsrs	r3, r3, #20
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	431a      	orrs	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0318 	and.w	r3, r3, #24
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002164:	40d9      	lsrs	r1, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	400b      	ands	r3, r1
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	0007ffff 	.word	0x0007ffff

08002188 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 031f 	and.w	r3, r3, #31
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6093      	str	r3, [r2, #8]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f8:	d101      	bne.n	80021fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800221c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002220:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002248:	d101      	bne.n	800224e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800226c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <LL_ADC_IsEnabled+0x18>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <LL_ADC_IsEnabled+0x1a>
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022be:	f043 0204 	orr.w	r2, r3, #4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d101      	bne.n	80022ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b08      	cmp	r3, #8
 800230a:	d101      	bne.n	8002310 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e134      	b.n	80025a4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fa77 	bl	800183c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff3f 	bl	80021e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff25 	bl	80021c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff5a 	bl	8002234 <LL_ADC_IsInternalRegulatorEnabled>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff3e 	bl	800220c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002390:	4b86      	ldr	r3, [pc, #536]	; (80025ac <HAL_ADC_Init+0x28c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	4a86      	ldr	r2, [pc, #536]	; (80025b0 <HAL_ADC_Init+0x290>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	3301      	adds	r3, #1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023a4:	e002      	b.n	80023ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f9      	bne.n	80023a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff3c 	bl	8002234 <LL_ADC_IsInternalRegulatorEnabled>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff75 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 80023e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 80cd 	bne.w	8002592 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80c9 	bne.w	8002592 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002408:	f043 0202 	orr.w	r2, r3, #2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff35 	bl	8002284 <LL_ADC_IsEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d110      	bne.n	8002442 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002420:	4864      	ldr	r0, [pc, #400]	; (80025b4 <HAL_ADC_Init+0x294>)
 8002422:	f7ff ff2f 	bl	8002284 <LL_ADC_IsEnabled>
 8002426:	4604      	mov	r4, r0
 8002428:	4863      	ldr	r0, [pc, #396]	; (80025b8 <HAL_ADC_Init+0x298>)
 800242a:	f7ff ff2b 	bl	8002284 <LL_ADC_IsEnabled>
 800242e:	4603      	mov	r3, r0
 8002430:	4323      	orrs	r3, r4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4619      	mov	r1, r3
 800243c:	485f      	ldr	r0, [pc, #380]	; (80025bc <HAL_ADC_Init+0x29c>)
 800243e:	f7ff fd79 	bl	8001f34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7e5b      	ldrb	r3, [r3, #25]
 8002446:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800244c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002452:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002458:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d106      	bne.n	800247e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	3b01      	subs	r3, #1
 8002476:	045b      	lsls	r3, r3, #17
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_ADC_Init+0x2a0>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	69b9      	ldr	r1, [r7, #24]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff0d 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 80024b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff1a 	bl	80022f8 <LL_ADC_INJ_IsConversionOngoing>
 80024c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d140      	bne.n	800254e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d13d      	bne.n	800254e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7e1b      	ldrb	r3, [r3, #24]
 80024da:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024dc:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f4:	f023 0306 	bic.w	r3, r3, #6
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	430b      	orrs	r3, r1
 8002500:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002508:	2b01      	cmp	r3, #1
 800250a:	d118      	bne.n	800253e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002516:	f023 0304 	bic.w	r3, r3, #4
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002528:	4311      	orrs	r1, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800252e:	430a      	orrs	r2, r1
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	611a      	str	r2, [r3, #16]
 800253c:	e007      	b.n	800254e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10c      	bne.n	8002570 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f023 010f 	bic.w	r1, r3, #15
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
 800256e:	e007      	b.n	8002580 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 020f 	bic.w	r2, r2, #15
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f023 0303 	bic.w	r3, r3, #3
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	659a      	str	r2, [r3, #88]	; 0x58
 8002590:	e007      	b.n	80025a2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3724      	adds	r7, #36	; 0x24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}
 80025ac:	20000000 	.word	0x20000000
 80025b0:	053e2d63 	.word	0x053e2d63
 80025b4:	50040000 	.word	0x50040000
 80025b8:	50040100 	.word	0x50040100
 80025bc:	50040300 	.word	0x50040300
 80025c0:	fff0c007 	.word	0xfff0c007

080025c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025cc:	4857      	ldr	r0, [pc, #348]	; (800272c <HAL_ADC_Start+0x168>)
 80025ce:	f7ff fddb 	bl	8002188 <LL_ADC_GetMultimode>
 80025d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fe7a 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 809c 	bne.w	800271e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_Start+0x30>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e097      	b.n	8002724 <HAL_ADC_Start+0x160>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fd7d 	bl	80030fc <ADC_Enable>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 8083 	bne.w	8002714 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a42      	ldr	r2, [pc, #264]	; (8002730 <HAL_ADC_Start+0x16c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d002      	beq.n	8002632 <HAL_ADC_Start+0x6e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e000      	b.n	8002634 <HAL_ADC_Start+0x70>
 8002632:	4b40      	ldr	r3, [pc, #256]	; (8002734 <HAL_ADC_Start+0x170>)
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	4293      	cmp	r3, r2
 800263a:	d002      	beq.n	8002642 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265a:	d106      	bne.n	800266a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	f023 0206 	bic.w	r2, r3, #6
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	65da      	str	r2, [r3, #92]	; 0x5c
 8002668:	e002      	b.n	8002670 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	221c      	movs	r2, #28
 8002676:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <HAL_ADC_Start+0x16c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d002      	beq.n	8002690 <HAL_ADC_Start+0xcc>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e000      	b.n	8002692 <HAL_ADC_Start+0xce>
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_ADC_Start+0x170>)
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4293      	cmp	r3, r2
 8002698:	d008      	beq.n	80026ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d002      	beq.n	80026ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d114      	bne.n	80026d6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fdeb 	bl	80022aa <LL_ADC_REG_StartConversion>
 80026d4:	e025      	b.n	8002722 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <HAL_ADC_Start+0x16c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d002      	beq.n	80026f2 <HAL_ADC_Start+0x12e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	e000      	b.n	80026f4 <HAL_ADC_Start+0x130>
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_ADC_Start+0x170>)
 80026f4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00f      	beq.n	8002722 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800270a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	; 0x58
 8002712:	e006      	b.n	8002722 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800271c:	e001      	b.n	8002722 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	50040300 	.word	0x50040300
 8002730:	50040100 	.word	0x50040100
 8002734:	50040000 	.word	0x50040000

08002738 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002742:	4866      	ldr	r0, [pc, #408]	; (80028dc <HAL_ADC_PollForConversion+0x1a4>)
 8002744:	f7ff fd20 	bl	8002188 <LL_ADC_GetMultimode>
 8002748:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d102      	bne.n	8002758 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002752:	2308      	movs	r3, #8
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e02a      	b.n	80027ae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d002      	beq.n	800276a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b09      	cmp	r3, #9
 8002768:	d111      	bne.n	800278e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0a4      	b.n	80028d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002788:	2304      	movs	r3, #4
 800278a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800278c:	e00f      	b.n	80027ae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800278e:	4853      	ldr	r0, [pc, #332]	; (80028dc <HAL_ADC_PollForConversion+0x1a4>)
 8002790:	f7ff fd08 	bl	80021a4 <LL_ADC_GetMultiDMATransfer>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e093      	b.n	80028d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027aa:	2304      	movs	r3, #4
 80027ac:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027ae:	f7ff fb91 	bl	8001ed4 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027b4:	e021      	b.n	80027fa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d01d      	beq.n	80027fa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027be:	f7ff fb89 	bl	8001ed4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <HAL_ADC_PollForConversion+0x9c>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d112      	bne.n	80027fa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10b      	bne.n	80027fa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f043 0204 	orr.w	r2, r3, #4
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e06b      	b.n	80028d2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0d6      	beq.n	80027b6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fc27 	bl	800206c <LL_ADC_REG_IsTriggerSourceSWStart>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01c      	beq.n	800285e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7e5b      	ldrb	r3, [r3, #25]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d118      	bne.n	800285e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b08      	cmp	r3, #8
 8002838:	d111      	bne.n	800285e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_ADC_PollForConversion+0x1a8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d002      	beq.n	800286e <HAL_ADC_PollForConversion+0x136>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	e000      	b.n	8002870 <HAL_ADC_PollForConversion+0x138>
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_ADC_PollForConversion+0x1ac>)
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4293      	cmp	r3, r2
 8002876:	d008      	beq.n	800288a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d002      	beq.n	800288a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b09      	cmp	r3, #9
 8002888:	d104      	bne.n	8002894 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e00c      	b.n	80028ae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_ADC_PollForConversion+0x1a8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d002      	beq.n	80028a4 <HAL_ADC_PollForConversion+0x16c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_PollForConversion+0x16e>
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_ADC_PollForConversion+0x1ac>)
 80028a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d104      	bne.n	80028be <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2208      	movs	r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e008      	b.n	80028d0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	220c      	movs	r2, #12
 80028ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	50040300 	.word	0x50040300
 80028e0:	50040100 	.word	0x50040100
 80028e4:	50040000 	.word	0x50040000

080028e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b0b6      	sub	sp, #216	; 0xd8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x22>
 8002922:	2302      	movs	r3, #2
 8002924:	e3d5      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x7ce>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fccd 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 83ba 	bne.w	80030b4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d824      	bhi.n	8002992 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	3b02      	subs	r3, #2
 800294e:	2b03      	cmp	r3, #3
 8002950:	d81b      	bhi.n	800298a <HAL_ADC_ConfigChannel+0x86>
 8002952:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <HAL_ADC_ConfigChannel+0x54>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	08002969 	.word	0x08002969
 800295c:	08002971 	.word	0x08002971
 8002960:	08002979 	.word	0x08002979
 8002964:	08002981 	.word	0x08002981
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	220c      	movs	r2, #12
 800296c:	605a      	str	r2, [r3, #4]
          break;
 800296e:	e011      	b.n	8002994 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2212      	movs	r2, #18
 8002974:	605a      	str	r2, [r3, #4]
          break;
 8002976:	e00d      	b.n	8002994 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2218      	movs	r2, #24
 800297c:	605a      	str	r2, [r3, #4]
          break;
 800297e:	e009      	b.n	8002994 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002986:	605a      	str	r2, [r3, #4]
          break;
 8002988:	e004      	b.n	8002994 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2206      	movs	r2, #6
 800298e:	605a      	str	r2, [r3, #4]
          break;
 8002990:	e000      	b.n	8002994 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002992:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	f7ff fb76 	bl	8002092 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fc91 	bl	80022d2 <LL_ADC_REG_IsConversionOngoing>
 80029b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fc9d 	bl	80022f8 <LL_ADC_INJ_IsConversionOngoing>
 80029be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 81c1 	bne.w	8002d4e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 81bc 	bne.w	8002d4e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029de:	d10f      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7ff fb7d 	bl	80020ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fb24 	bl	8002046 <LL_ADC_SetSamplingTimeCommonConfig>
 80029fe:	e00e      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f7ff fb6c 	bl	80020ea <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fb14 	bl	8002046 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00a      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a50:	f7ff faa4 	bl	8001f9c <LL_ADC_SetOffset>
 8002a54:	e17b      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fac1 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x17e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fab6 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	0e9b      	lsrs	r3, r3, #26
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	e01e      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x1bc>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff faab 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e004      	b.n	8002abe <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x1d4>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	e018      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x206>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002af4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002afc:	2320      	movs	r3, #32
 8002afe:	e004      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d106      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fa7a 	bl	8002010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fa5e 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x244>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fa53 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	f003 021f 	and.w	r2, r3, #31
 8002b46:	e01e      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x282>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fa48 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e004      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x29a>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	e018      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x2cc>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e004      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d106      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fa17 	bl	8002010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2102      	movs	r1, #2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f9fb 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x30a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f9f0 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	e01e      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x348>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f9e5 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e004      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002c40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x360>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	e016      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x38e>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e004      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d106      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f9b6 	bl	8002010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2103      	movs	r1, #3
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff f99a 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x3cc>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f98f 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	e017      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x3fc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2103      	movs	r1, #3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f984 	bl	8001fe4 <LL_ADC_GetOffsetChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x414>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	e011      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x438>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e003      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d106      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2103      	movs	r1, #3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f961 	bl	8002010 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa96 	bl	8002284 <LL_ADC_IsEnabled>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8140 	bne.w	8002fe0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f7ff f9e7 	bl	8002140 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a8f      	ldr	r2, [pc, #572]	; (8002fb4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	f040 8131 	bne.w	8002fe0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x4a2>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	3301      	adds	r3, #1
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	bf94      	ite	ls
 8002d9e:	2301      	movls	r3, #1
 8002da0:	2300      	movhi	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e019      	b.n	8002dda <HAL_ADC_ConfigChannel+0x4d6>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	bf94      	ite	ls
 8002dd4:	2301      	movls	r3, #1
 8002dd6:	2300      	movhi	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d079      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d107      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x4f6>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0e9b      	lsrs	r3, r3, #26
 8002df0:	3301      	adds	r3, #1
 8002df2:	069b      	lsls	r3, r3, #26
 8002df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002df8:	e015      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x522>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e003      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	069b      	lsls	r3, r3, #26
 8002e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x542>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	e017      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x572>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e003      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	ea42 0103 	orr.w	r1, r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x598>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f003 021f 	and.w	r2, r3, #31
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	051b      	lsls	r3, r3, #20
 8002e9a:	e018      	b.n	8002ece <HAL_ADC_ConfigChannel+0x5ca>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e003      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	e081      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x5ea>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	069b      	lsls	r3, r3, #26
 8002ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eec:	e015      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x616>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002f06:	2320      	movs	r3, #32
 8002f08:	e003      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	069b      	lsls	r3, r3, #26
 8002f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x636>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	e017      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x666>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	61fb      	str	r3, [r7, #28]
  return result;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002f52:	2320      	movs	r3, #32
 8002f54:	e003      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	ea42 0103 	orr.w	r1, r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x692>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	0e9b      	lsrs	r3, r3, #26
 8002f80:	3301      	adds	r3, #1
 8002f82:	f003 021f 	and.w	r2, r3, #31
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b1e      	subs	r3, #30
 8002f8e:	051b      	lsls	r3, r3, #20
 8002f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f94:	e01e      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x6d0>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	613b      	str	r3, [r7, #16]
  return result;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	e006      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x6bc>
 8002fb2:	bf00      	nop
 8002fb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 021f 	and.w	r2, r3, #31
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b1e      	subs	r3, #30
 8002fce:	051b      	lsls	r3, r3, #20
 8002fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	6892      	ldr	r2, [r2, #8]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f7ff f885 	bl	80020ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d06c      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fec:	483c      	ldr	r0, [pc, #240]	; (80030e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fee:	f7fe ffc7 	bl	8001f80 <LL_ADC_GetCommonPathInternalCh>
 8002ff2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	; (80030e4 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d127      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d121      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a35      	ldr	r2, [pc, #212]	; (80030e8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d157      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800301a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800301e:	4619      	mov	r1, r3
 8003020:	482f      	ldr	r0, [pc, #188]	; (80030e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003022:	f7fe ff9a 	bl	8001f5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_ADC_ConfigChannel+0x7e8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <HAL_ADC_ConfigChannel+0x7ec>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003040:	e002      	b.n	8003048 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3b01      	subs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f9      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800304e:	e03a      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d113      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x77e>
 800305a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800305e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d12a      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003070:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003078:	4619      	mov	r1, r3
 800307a:	4819      	ldr	r0, [pc, #100]	; (80030e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800307c:	f7fe ff6d 	bl	8001f5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003080:	e021      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_ADC_ConfigChannel+0x7f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d11c      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800308c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d116      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <HAL_ADC_ConfigChannel+0x7e4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030aa:	4619      	mov	r1, r3
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <HAL_ADC_ConfigChannel+0x7dc>)
 80030ae:	f7fe ff54 	bl	8001f5a <LL_ADC_SetCommonPathInternalCh>
 80030b2:	e008      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80030ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	37d8      	adds	r7, #216	; 0xd8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	80080000 	.word	0x80080000
 80030e0:	50040300 	.word	0x50040300
 80030e4:	c7520000 	.word	0xc7520000
 80030e8:	50040000 	.word	0x50040000
 80030ec:	20000000 	.word	0x20000000
 80030f0:	053e2d63 	.word	0x053e2d63
 80030f4:	cb840000 	.word	0xcb840000
 80030f8:	80000001 	.word	0x80000001

080030fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff f8b9 	bl	8002284 <LL_ADC_IsEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d169      	bne.n	80031ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <ADC_Enable+0xfc>)
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e055      	b.n	80031ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f888 	bl	800225c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800314c:	482b      	ldr	r0, [pc, #172]	; (80031fc <ADC_Enable+0x100>)
 800314e:	f7fe ff17 	bl	8001f80 <LL_ADC_GetCommonPathInternalCh>
 8003152:	4603      	mov	r3, r0
 8003154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <ADC_Enable+0x104>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	4a28      	ldr	r2, [pc, #160]	; (8003204 <ADC_Enable+0x108>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003176:	e002      	b.n	800317e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3b01      	subs	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003184:	f7fe fea6 	bl	8001ed4 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800318a:	e028      	b.n	80031de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f877 	bl	8002284 <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff f85b 	bl	800225c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031a6:	f7fe fe95 	bl	8001ed4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d914      	bls.n	80031de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d00d      	beq.n	80031de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f043 0210 	orr.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e007      	b.n	80031ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d1cf      	bne.n	800318c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	8000003f 	.word	0x8000003f
 80031fc:	50040300 	.word	0x50040300
 8003200:	20000000 	.word	0x20000000
 8003204:	053e2d63 	.word	0x053e2d63

08003208 <LL_ADC_IsEnabled>:
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <LL_ADC_IsEnabled+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <LL_ADC_IsEnabled+0x1a>
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_ADC_REG_IsConversionOngoing>:
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d101      	bne.n	8003246 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b0a1      	sub	sp, #132	; 0x84
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800326e:	2302      	movs	r3, #2
 8003270:	e089      	b.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800327a:	2300      	movs	r3, #0
 800327c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800327e:	2300      	movs	r3, #0
 8003280:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a42      	ldr	r2, [pc, #264]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e001      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e068      	b.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ffb9 	bl	800322e <LL_ADC_REG_IsConversionOngoing>
 80032bc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ffb3 	bl	800322e <LL_ADC_REG_IsConversionOngoing>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d14a      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d147      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032d4:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80032d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d027      	beq.n	8003330 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032f2:	035b      	lsls	r3, r3, #13
 80032f4:	430b      	orrs	r3, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032fc:	4824      	ldr	r0, [pc, #144]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80032fe:	f7ff ff83 	bl	8003208 <LL_ADC_IsEnabled>
 8003302:	4604      	mov	r4, r0
 8003304:	4823      	ldr	r0, [pc, #140]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003306:	f7ff ff7f 	bl	8003208 <LL_ADC_IsEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	4323      	orrs	r3, r4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d132      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800331a:	f023 030f 	bic.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	6811      	ldr	r1, [r2, #0]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	6892      	ldr	r2, [r2, #8]
 8003326:	430a      	orrs	r2, r1
 8003328:	431a      	orrs	r2, r3
 800332a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800332e:	e023      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800333c:	4814      	ldr	r0, [pc, #80]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800333e:	f7ff ff63 	bl	8003208 <LL_ADC_IsEnabled>
 8003342:	4604      	mov	r4, r0
 8003344:	4813      	ldr	r0, [pc, #76]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003346:	f7ff ff5f 	bl	8003208 <LL_ADC_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	4323      	orrs	r3, r4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d112      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800335a:	f023 030f 	bic.w	r3, r3, #15
 800335e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003360:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003362:	e009      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003376:	e000      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003378:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003382:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003386:	4618      	mov	r0, r3
 8003388:	3784      	adds	r7, #132	; 0x84
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	bf00      	nop
 8003390:	50040000 	.word	0x50040000
 8003394:	50040100 	.word	0x50040100
 8003398:	50040300 	.word	0x50040300

0800339c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b8:	4013      	ands	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ce:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	60d3      	str	r3, [r2, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <__NVIC_GetPriorityGrouping+0x18>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0307 	and.w	r3, r3, #7
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	2b00      	cmp	r3, #0
 8003410:	db0b      	blt.n	800342a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <__NVIC_EnableIRQ+0x38>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2001      	movs	r0, #1
 8003422:	fa00 f202 	lsl.w	r2, r0, r2
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000e100 	.word	0xe000e100

0800343c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	2b00      	cmp	r3, #0
 800344e:	db0a      	blt.n	8003466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	490c      	ldr	r1, [pc, #48]	; (8003488 <__NVIC_SetPriority+0x4c>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	440b      	add	r3, r1
 8003460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003464:	e00a      	b.n	800347c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4908      	ldr	r1, [pc, #32]	; (800348c <__NVIC_SetPriority+0x50>)
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	3b04      	subs	r3, #4
 8003474:	0112      	lsls	r2, r2, #4
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	440b      	add	r3, r1
 800347a:	761a      	strb	r2, [r3, #24]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000e100 	.word	0xe000e100
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f1c3 0307 	rsb	r3, r3, #7
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	bf28      	it	cs
 80034ae:	2304      	movcs	r3, #4
 80034b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3304      	adds	r3, #4
 80034b6:	2b06      	cmp	r3, #6
 80034b8:	d902      	bls.n	80034c0 <NVIC_EncodePriority+0x30>
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3b03      	subs	r3, #3
 80034be:	e000      	b.n	80034c2 <NVIC_EncodePriority+0x32>
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	401a      	ands	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d8:	f04f 31ff 	mov.w	r1, #4294967295
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43d9      	mvns	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	4313      	orrs	r3, r2
         );
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff4c 	bl	800339c <__NVIC_SetPriorityGrouping>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800351e:	f7ff ff61 	bl	80033e4 <__NVIC_GetPriorityGrouping>
 8003522:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	6978      	ldr	r0, [r7, #20]
 800352a:	f7ff ffb1 	bl	8003490 <NVIC_EncodePriority>
 800352e:	4602      	mov	r2, r0
 8003530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff80 	bl	800343c <__NVIC_SetPriority>
}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff54 	bl	8003400 <__NVIC_EnableIRQ>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356e:	e166      	b.n	800383e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8158 	beq.w	8003838 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d005      	beq.n	80035a0 <HAL_GPIO_Init+0x40>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d130      	bne.n	8003602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035d6:	2201      	movs	r2, #1
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0201 	and.w	r2, r3, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b03      	cmp	r3, #3
 800360c:	d017      	beq.n	800363e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d123      	bne.n	8003692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	6939      	ldr	r1, [r7, #16]
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80b2 	beq.w	8003838 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_GPIO_Init+0x2fc>)
 80036d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d8:	4a60      	ldr	r2, [pc, #384]	; (800385c <HAL_GPIO_Init+0x2fc>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6613      	str	r3, [r2, #96]	; 0x60
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <HAL_GPIO_Init+0x2fc>)
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036ec:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_GPIO_Init+0x300>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003716:	d02b      	beq.n	8003770 <HAL_GPIO_Init+0x210>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a52      	ldr	r2, [pc, #328]	; (8003864 <HAL_GPIO_Init+0x304>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d025      	beq.n	800376c <HAL_GPIO_Init+0x20c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a51      	ldr	r2, [pc, #324]	; (8003868 <HAL_GPIO_Init+0x308>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d01f      	beq.n	8003768 <HAL_GPIO_Init+0x208>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a50      	ldr	r2, [pc, #320]	; (800386c <HAL_GPIO_Init+0x30c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d019      	beq.n	8003764 <HAL_GPIO_Init+0x204>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a4f      	ldr	r2, [pc, #316]	; (8003870 <HAL_GPIO_Init+0x310>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_GPIO_Init+0x200>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a4e      	ldr	r2, [pc, #312]	; (8003874 <HAL_GPIO_Init+0x314>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00d      	beq.n	800375c <HAL_GPIO_Init+0x1fc>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a4d      	ldr	r2, [pc, #308]	; (8003878 <HAL_GPIO_Init+0x318>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <HAL_GPIO_Init+0x1f8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a4c      	ldr	r2, [pc, #304]	; (800387c <HAL_GPIO_Init+0x31c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_GPIO_Init+0x1f4>
 8003750:	2307      	movs	r3, #7
 8003752:	e00e      	b.n	8003772 <HAL_GPIO_Init+0x212>
 8003754:	2308      	movs	r3, #8
 8003756:	e00c      	b.n	8003772 <HAL_GPIO_Init+0x212>
 8003758:	2306      	movs	r3, #6
 800375a:	e00a      	b.n	8003772 <HAL_GPIO_Init+0x212>
 800375c:	2305      	movs	r3, #5
 800375e:	e008      	b.n	8003772 <HAL_GPIO_Init+0x212>
 8003760:	2304      	movs	r3, #4
 8003762:	e006      	b.n	8003772 <HAL_GPIO_Init+0x212>
 8003764:	2303      	movs	r3, #3
 8003766:	e004      	b.n	8003772 <HAL_GPIO_Init+0x212>
 8003768:	2302      	movs	r3, #2
 800376a:	e002      	b.n	8003772 <HAL_GPIO_Init+0x212>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_GPIO_Init+0x212>
 8003770:	2300      	movs	r3, #0
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	f002 0203 	and.w	r2, r2, #3
 8003778:	0092      	lsls	r2, r2, #2
 800377a:	4093      	lsls	r3, r2
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003782:	4937      	ldr	r1, [pc, #220]	; (8003860 <HAL_GPIO_Init+0x300>)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003790:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <HAL_GPIO_Init+0x320>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037b4:	4a32      	ldr	r2, [pc, #200]	; (8003880 <HAL_GPIO_Init+0x320>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ba:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_GPIO_Init+0x320>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037de:	4a28      	ldr	r2, [pc, #160]	; (8003880 <HAL_GPIO_Init+0x320>)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037e4:	4b26      	ldr	r3, [pc, #152]	; (8003880 <HAL_GPIO_Init+0x320>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003808:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <HAL_GPIO_Init+0x320>)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_GPIO_Init+0x320>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <HAL_GPIO_Init+0x320>)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3301      	adds	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	f47f ae91 	bne.w	8003570 <HAL_GPIO_Init+0x10>
  }
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40021000 	.word	0x40021000
 8003860:	40010000 	.word	0x40010000
 8003864:	48000400 	.word	0x48000400
 8003868:	48000800 	.word	0x48000800
 800386c:	48000c00 	.word	0x48000c00
 8003870:	48001000 	.word	0x48001000
 8003874:	48001400 	.word	0x48001400
 8003878:	48001800 	.word	0x48001800
 800387c:	48001c00 	.word	0x48001c00
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43d9      	mvns	r1, r3
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	400b      	ands	r3, r1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	619a      	str	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	b08f      	sub	sp, #60	; 0x3c
 80038ec:	af0a      	add	r7, sp, #40	; 0x28
 80038ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e116      	b.n	8003b28 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fe f8a9 	bl	8001a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2203      	movs	r2, #3
 800391e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f003 ffc9 	bl	80078d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	687e      	ldr	r6, [r7, #4]
 8003946:	466d      	mov	r5, sp
 8003948:	f106 0410 	add.w	r4, r6, #16
 800394c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800394e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003958:	e885 0003 	stmia.w	r5, {r0, r1}
 800395c:	1d33      	adds	r3, r6, #4
 800395e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003960:	6838      	ldr	r0, [r7, #0]
 8003962:	f003 ff89 	bl	8007878 <USB_CoreInit>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0d7      	b.n	8003b28 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f003 ffb7 	bl	80078f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e04a      	b.n	8003a20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	333d      	adds	r3, #61	; 0x3d
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	333c      	adds	r3, #60	; 0x3c
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	b298      	uxth	r0, r3
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	3344      	adds	r3, #68	; 0x44
 80039c6:	4602      	mov	r2, r0
 80039c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3340      	adds	r3, #64	; 0x40
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3348      	adds	r3, #72	; 0x48
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334c      	adds	r3, #76	; 0x4c
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3354      	adds	r3, #84	; 0x54
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3af      	bcc.n	800398a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	e044      	b.n	8003aba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3b5      	bcc.n	8003a30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	603b      	str	r3, [r7, #0]
 8003aca:	687e      	ldr	r6, [r7, #4]
 8003acc:	466d      	mov	r5, sp
 8003ace:	f106 0410 	add.w	r4, r6, #16
 8003ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ae2:	1d33      	adds	r3, r6, #4
 8003ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae6:	6838      	ldr	r0, [r7, #0]
 8003ae8:	f003 ff50 	bl	800798c <USB_DevInit>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e014      	b.n	8003b28 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f80a 	bl	8003b30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f004 f8fc 	bl	8007d1e <USB_DevDisconnect>

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b62:	f043 0303 	orr.w	r3, r3, #3
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a04      	ldr	r2, [pc, #16]	; (8003b94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6013      	str	r3, [r2, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40007000 	.word	0x40007000

08003b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba8:	d102      	bne.n	8003bb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bae:	e00b      	b.n	8003bc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d102      	bne.n	8003bc6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bc4:	e000      	b.n	8003bc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003bc6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40007000 	.word	0x40007000

08003bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d141      	bne.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003be6:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf2:	d131      	bne.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf4:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfa:	4a46      	ldr	r2, [pc, #280]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c04:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c0c:	4a41      	ldr	r2, [pc, #260]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c14:	4b40      	ldr	r3, [pc, #256]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2232      	movs	r2, #50	; 0x32
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	4a3f      	ldr	r2, [pc, #252]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	0c9b      	lsrs	r3, r3, #18
 8003c26:	3301      	adds	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2a:	e002      	b.n	8003c32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c32:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d102      	bne.n	8003c46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f2      	bne.n	8003c2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c46:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c52:	d158      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e057      	b.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c58:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c68:	e04d      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c70:	d141      	bne.n	8003cf6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c72:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7e:	d131      	bne.n	8003ce4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c86:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c98:	4a1e      	ldr	r2, [pc, #120]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2232      	movs	r2, #50	; 0x32
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	0c9b      	lsrs	r3, r3, #18
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cb6:	e002      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cca:	d102      	bne.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f2      	bne.n	8003cb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d112      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e011      	b.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cf4:	e007      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d04:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40007000 	.word	0x40007000
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	431bde83 	.word	0x431bde83

08003d20 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d2e:	6053      	str	r3, [r2, #4]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40007000 	.word	0x40007000

08003d40 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4e:	6053      	str	r3, [r2, #4]
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40007000 	.word	0x40007000

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f000 bc68 	b.w	8004644 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d74:	4b97      	ldr	r3, [pc, #604]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7e:	4b95      	ldr	r3, [pc, #596]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80e6 	beq.w	8003f62 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_RCC_OscConfig+0x4c>
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	f040 808d 	bne.w	8003ebe <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	f040 8089 	bne.w	8003ebe <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dac:	4b89      	ldr	r3, [pc, #548]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d006      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x66>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f000 bc3f 	b.w	8004644 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dca:	4b82      	ldr	r3, [pc, #520]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <HAL_RCC_OscConfig+0x80>
 8003dd6:	4b7f      	ldr	r3, [pc, #508]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dde:	e005      	b.n	8003dec <HAL_RCC_OscConfig+0x8c>
 8003de0:	4b7c      	ldr	r3, [pc, #496]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d224      	bcs.n	8003e3a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fe5f 	bl	8004ab8 <RCC_SetFlashLatencyFromMSIRange>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f000 bc1f 	b.w	8004644 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e06:	4b73      	ldr	r3, [pc, #460]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a72      	ldr	r2, [pc, #456]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	f043 0308 	orr.w	r3, r3, #8
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b70      	ldr	r3, [pc, #448]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	496d      	ldr	r1, [pc, #436]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e24:	4b6b      	ldr	r3, [pc, #428]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	4968      	ldr	r1, [pc, #416]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
 8003e38:	e025      	b.n	8003e86 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e3a:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a65      	ldr	r2, [pc, #404]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e40:	f043 0308 	orr.w	r3, r3, #8
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	4960      	ldr	r1, [pc, #384]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e58:	4b5e      	ldr	r3, [pc, #376]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	495b      	ldr	r1, [pc, #364]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fe1e 	bl	8004ab8 <RCC_SetFlashLatencyFromMSIRange>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e3de      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e86:	f000 fd21 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4b51      	ldr	r3, [pc, #324]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	4950      	ldr	r1, [pc, #320]	; (8003fd8 <HAL_RCC_OscConfig+0x278>)
 8003e98:	5ccb      	ldrb	r3, [r1, r3]
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a4e      	ldr	r2, [pc, #312]	; (8003fdc <HAL_RCC_OscConfig+0x27c>)
 8003ea4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	; (8003fe0 <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fe4a 	bl	8001b44 <HAL_InitTick>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d052      	beq.n	8003f60 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	e3c2      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d032      	beq.n	8003f2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ec6:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ed2:	f7fd ffff 	bl	8001ed4 <HAL_GetTick>
 8003ed6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eda:	f7fd fffb 	bl	8001ed4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e3ab      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a35      	ldr	r2, [pc, #212]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003efe:	f043 0308 	orr.w	r3, r3, #8
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b33      	ldr	r3, [pc, #204]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	4930      	ldr	r1, [pc, #192]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f16:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	492b      	ldr	r1, [pc, #172]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
 8003f2a:	e01a      	b.n	8003f62 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f2c:	4b29      	ldr	r3, [pc, #164]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a28      	ldr	r2, [pc, #160]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f38:	f7fd ffcc 	bl	8001ed4 <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f40:	f7fd ffc8 	bl	8001ed4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e378      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x1e0>
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d073      	beq.n	8004056 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_OscConfig+0x220>
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d10e      	bne.n	8003f98 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d10b      	bne.n	8003f98 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d063      	beq.n	8004054 <HAL_RCC_OscConfig+0x2f4>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d15f      	bne.n	8004054 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e355      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x250>
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e025      	b.n	8003ffc <HAL_RCC_OscConfig+0x29c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb8:	d114      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x284>
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a02      	ldr	r2, [pc, #8]	; (8003fd4 <HAL_RCC_OscConfig+0x274>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e013      	b.n	8003ffc <HAL_RCC_OscConfig+0x29c>
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	0800eb78 	.word	0x0800eb78
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	20000004 	.word	0x20000004
 8003fe4:	4b8f      	ldr	r3, [pc, #572]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a8e      	ldr	r2, [pc, #568]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b8c      	ldr	r3, [pc, #560]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a8b      	ldr	r2, [pc, #556]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd ff66 	bl	8001ed4 <HAL_GetTick>
 8004008:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fd ff62 	bl	8001ed4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e312      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401e:	4b81      	ldr	r3, [pc, #516]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x2ac>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd ff52 	bl	8001ed4 <HAL_GetTick>
 8004030:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fd ff4e 	bl	8001ed4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e2fe      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004046:	4b77      	ldr	r3, [pc, #476]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x2d4>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d060      	beq.n	8004124 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d005      	beq.n	8004074 <HAL_RCC_OscConfig+0x314>
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d119      	bne.n	80040a2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d116      	bne.n	80040a2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004074:	4b6b      	ldr	r3, [pc, #428]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_OscConfig+0x32c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e2db      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408c:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	4962      	ldr	r1, [pc, #392]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a0:	e040      	b.n	8004124 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d023      	beq.n	80040f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040aa:	4b5e      	ldr	r3, [pc, #376]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a5d      	ldr	r2, [pc, #372]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fd ff0d 	bl	8001ed4 <HAL_GetTick>
 80040ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040be:	f7fd ff09 	bl	8001ed4 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e2b9      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040d0:	4b54      	ldr	r3, [pc, #336]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040dc:	4b51      	ldr	r3, [pc, #324]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	494e      	ldr	r1, [pc, #312]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
 80040f0:	e018      	b.n	8004124 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f2:	4b4c      	ldr	r3, [pc, #304]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a4b      	ldr	r2, [pc, #300]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7fd fee9 	bl	8001ed4 <HAL_GetTick>
 8004102:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004106:	f7fd fee5 	bl	8001ed4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e295      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004118:	4b42      	ldr	r3, [pc, #264]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8082 	beq.w	8004236 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d05f      	beq.n	80041fa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800413a:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	429a      	cmp	r2, r3
 800414e:	d037      	beq.n	80041c0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e26d      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01b      	beq.n	80041aa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004182:	f7fd fea7 	bl	8001ed4 <HAL_GetTick>
 8004186:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418a:	f7fd fea3 	bl	8001ed4 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b11      	cmp	r3, #17
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e253      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800419c:	4b21      	ldr	r3, [pc, #132]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ef      	bne.n	800418a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	f023 0210 	bic.w	r2, r3, #16
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	491a      	ldr	r1, [pc, #104]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd fe80 	bl	8001ed4 <HAL_GetTick>
 80041d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fd fe7c 	bl	8001ed4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b11      	cmp	r3, #17
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e22c      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ef      	beq.n	80041d8 <HAL_RCC_OscConfig+0x478>
 80041f8:	e01d      	b.n	8004236 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fd fe63 	bl	8001ed4 <HAL_GetTick>
 800420e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004212:	f7fd fe5f 	bl	8001ed4 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b11      	cmp	r3, #17
 800421e:	d903      	bls.n	8004228 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e20f      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
 8004224:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004228:	4b83      	ldr	r3, [pc, #524]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ed      	bne.n	8004212 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80bd 	beq.w	80043be <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800424a:	4b7b      	ldr	r3, [pc, #492]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10e      	bne.n	8004274 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b78      	ldr	r3, [pc, #480]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a77      	ldr	r2, [pc, #476]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
 8004262:	4b75      	ldr	r3, [pc, #468]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004274:	4b71      	ldr	r3, [pc, #452]	; (800443c <HAL_RCC_OscConfig+0x6dc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d118      	bne.n	80042b2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004280:	4b6e      	ldr	r3, [pc, #440]	; (800443c <HAL_RCC_OscConfig+0x6dc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6d      	ldr	r2, [pc, #436]	; (800443c <HAL_RCC_OscConfig+0x6dc>)
 8004286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428c:	f7fd fe22 	bl	8001ed4 <HAL_GetTick>
 8004290:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004294:	f7fd fe1e 	bl	8001ed4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1ce      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a6:	4b65      	ldr	r3, [pc, #404]	; (800443c <HAL_RCC_OscConfig+0x6dc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02c      	beq.n	8004318 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80042be:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	4959      	ldr	r1, [pc, #356]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d010      	beq.n	8004306 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042e4:	4b54      	ldr	r3, [pc, #336]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a53      	ldr	r2, [pc, #332]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042f4:	4b50      	ldr	r3, [pc, #320]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	4a4f      	ldr	r2, [pc, #316]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004304:	e018      	b.n	8004338 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004306:	4b4c      	ldr	r3, [pc, #304]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	4a4a      	ldr	r2, [pc, #296]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004316:	e00f      	b.n	8004338 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004318:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	4a46      	ldr	r2, [pc, #280]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004328:	4b43      	ldr	r3, [pc, #268]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a42      	ldr	r2, [pc, #264]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d016      	beq.n	800436e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd fdc8 	bl	8001ed4 <HAL_GetTick>
 8004344:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fdc4 	bl	8001ed4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e172      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ed      	beq.n	8004348 <HAL_RCC_OscConfig+0x5e8>
 800436c:	e01d      	b.n	80043aa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fd fdb1 	bl	8001ed4 <HAL_GetTick>
 8004372:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fd fdad 	bl	8001ed4 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	; 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e15b      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800438c:	4b2a      	ldr	r3, [pc, #168]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ed      	bne.n	8004376 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800439a:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	4a25      	ldr	r2, [pc, #148]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80043a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d105      	bne.n	80043be <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	4a20      	ldr	r2, [pc, #128]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80043b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d041      	beq.n	800444e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01c      	beq.n	800440c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043d2:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80043d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d8:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e2:	f7fd fd77 	bl	8001ed4 <HAL_GetTick>
 80043e6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ea:	f7fd fd73 	bl	8001ed4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e123      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 80043fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ef      	beq.n	80043ea <HAL_RCC_OscConfig+0x68a>
 800440a:	e020      	b.n	800444e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 800440e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_RCC_OscConfig+0x6d8>)
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fd fd5a 	bl	8001ed4 <HAL_GetTick>
 8004420:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004422:	e00d      	b.n	8004440 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004424:	f7fd fd56 	bl	8001ed4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d906      	bls.n	8004440 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e106      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004440:	4b82      	ldr	r3, [pc, #520]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1ea      	bne.n	8004424 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80f5 	beq.w	8004642 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	2b02      	cmp	r3, #2
 800445e:	f040 80cb 	bne.w	80045f8 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004462:	4b7a      	ldr	r3, [pc, #488]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0203 	and.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	429a      	cmp	r2, r3
 8004474:	d12c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	3b01      	subs	r3, #1
 8004482:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d123      	bne.n	80044d0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d11b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d113      	bne.n	80044d0 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	3b01      	subs	r3, #1
 80044b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	3b01      	subs	r3, #1
 80044ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d06d      	beq.n	80045ac <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d068      	beq.n	80045a8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044d6:	4b5d      	ldr	r3, [pc, #372]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d105      	bne.n	80044ee <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044e2:	4b5a      	ldr	r3, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0a8      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044f2:	4b56      	ldr	r3, [pc, #344]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a55      	ldr	r2, [pc, #340]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80044f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044fe:	f7fd fce9 	bl	8001ed4 <HAL_GetTick>
 8004502:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fd fce5 	bl	8001ed4 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e095      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004524:	4b49      	ldr	r3, [pc, #292]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4b49      	ldr	r3, [pc, #292]	; (8004650 <HAL_RCC_OscConfig+0x8f0>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004534:	3a01      	subs	r2, #1
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800453e:	0212      	lsls	r2, r2, #8
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004546:	0852      	lsrs	r2, r2, #1
 8004548:	3a01      	subs	r2, #1
 800454a:	0552      	lsls	r2, r2, #21
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004552:	0852      	lsrs	r2, r2, #1
 8004554:	3a01      	subs	r2, #1
 8004556:	0652      	lsls	r2, r2, #25
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800455e:	06d2      	lsls	r2, r2, #27
 8004560:	430a      	orrs	r2, r1
 8004562:	493a      	ldr	r1, [pc, #232]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004564:	4313      	orrs	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004568:	4b38      	ldr	r3, [pc, #224]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a37      	ldr	r2, [pc, #220]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 800456e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004574:	4b35      	ldr	r3, [pc, #212]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a34      	ldr	r2, [pc, #208]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 800457a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004580:	f7fd fca8 	bl	8001ed4 <HAL_GetTick>
 8004584:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fd fca4 	bl	8001ed4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e054      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459a:	4b2c      	ldr	r3, [pc, #176]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045a6:	e04c      	b.n	8004642 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e04b      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d144      	bne.n	8004642 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a23      	ldr	r2, [pc, #140]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80045be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a20      	ldr	r2, [pc, #128]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80045ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045d0:	f7fd fc80 	bl	8001ed4 <HAL_GetTick>
 80045d4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd fc7c 	bl	8001ed4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e02c      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	4b18      	ldr	r3, [pc, #96]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x878>
 80045f6:	e024      	b.n	8004642 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d01f      	beq.n	800463e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fd fc63 	bl	8001ed4 <HAL_GetTick>
 800460e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004612:	f7fd fc5f 	bl	8001ed4 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e00f      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	4905      	ldr	r1, [pc, #20]	; (800464c <HAL_RCC_OscConfig+0x8ec>)
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <HAL_RCC_OscConfig+0x8f4>)
 8004638:	4013      	ands	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
 800463c:	e001      	b.n	8004642 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021000 	.word	0x40021000
 8004650:	019d800c 	.word	0x019d800c
 8004654:	feeefffc 	.word	0xfeeefffc

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e11d      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004670:	4b90      	ldr	r3, [pc, #576]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d910      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b8d      	ldr	r3, [pc, #564]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 020f 	bic.w	r2, r3, #15
 8004686:	498b      	ldr	r1, [pc, #556]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b89      	ldr	r3, [pc, #548]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e105      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b81      	ldr	r3, [pc, #516]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d908      	bls.n	80046ce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b7e      	ldr	r3, [pc, #504]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	497b      	ldr	r1, [pc, #492]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d079      	beq.n	80047ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d11e      	bne.n	8004720 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	4b75      	ldr	r3, [pc, #468]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0dc      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046f2:	f000 fa3b 	bl	8004b6c <RCC_GetSysClockFreqFromPLLSource>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4a70      	ldr	r2, [pc, #448]	; (80048bc <HAL_RCC_ClockConfig+0x264>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d946      	bls.n	800478c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046fe:	4b6e      	ldr	r3, [pc, #440]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d140      	bne.n	800478c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800470a:	4b6b      	ldr	r3, [pc, #428]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004712:	4a69      	ldr	r2, [pc, #420]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004718:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e035      	b.n	800478c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d107      	bne.n	8004738 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004728:	4b63      	ldr	r3, [pc, #396]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d115      	bne.n	8004760 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b9      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004740:	4b5d      	ldr	r3, [pc, #372]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0ad      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004750:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0a5      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004760:	f000 f8b4 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8004764:	4603      	mov	r3, r0
 8004766:	4a55      	ldr	r2, [pc, #340]	; (80048bc <HAL_RCC_ClockConfig+0x264>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d90f      	bls.n	800478c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800476c:	4b52      	ldr	r3, [pc, #328]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004778:	4b4f      	ldr	r3, [pc, #316]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004780:	4a4d      	ldr	r2, [pc, #308]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004786:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800478c:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f023 0203 	bic.w	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4947      	ldr	r1, [pc, #284]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479e:	f7fd fb99 	bl	8001ed4 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a6:	f7fd fb95 	bl	8001ed4 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e077      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047bc:	4b3e      	ldr	r3, [pc, #248]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 020c 	and.w	r2, r3, #12
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d1eb      	bne.n	80047a6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d105      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047d4:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a37      	ldr	r2, [pc, #220]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d208      	bcs.n	800480e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047fc:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	492b      	ldr	r1, [pc, #172]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d210      	bcs.n	800483e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 020f 	bic.w	r2, r3, #15
 8004824:	4923      	ldr	r1, [pc, #140]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <HAL_RCC_ClockConfig+0x25c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d001      	beq.n	800483e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e036      	b.n	80048ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	4918      	ldr	r1, [pc, #96]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4910      	ldr	r1, [pc, #64]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004878:	4313      	orrs	r3, r2
 800487a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800487c:	f000 f826 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <HAL_RCC_ClockConfig+0x260>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	490c      	ldr	r1, [pc, #48]	; (80048c0 <HAL_RCC_ClockConfig+0x268>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x26c>)
 800489a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_ClockConfig+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd f94f 	bl	8001b44 <HAL_InitTick>
 80048a6:	4603      	mov	r3, r0
 80048a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40022000 	.word	0x40022000
 80048b8:	40021000 	.word	0x40021000
 80048bc:	04c4b400 	.word	0x04c4b400
 80048c0:	0800eb78 	.word	0x0800eb78
 80048c4:	20000000 	.word	0x20000000
 80048c8:	20000004 	.word	0x20000004

080048cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e4:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x34>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d121      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d11e      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800490c:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e005      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004928:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d102      	bne.n	800494a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e004      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d101      	bne.n	8004954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d134      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0xa6>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d003      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0xac>
 8004970:	e005      	b.n	800497e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004972:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <HAL_RCC_GetSysClockFreq+0x110>)
 8004974:	617b      	str	r3, [r7, #20]
      break;
 8004976:	e005      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800497a:	617b      	str	r3, [r7, #20]
      break;
 800497c:	e002      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	617b      	str	r3, [r7, #20]
      break;
 8004982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	3301      	adds	r3, #1
 8004990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	fb03 f202 	mul.w	r2, r3, r2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	0e5b      	lsrs	r3, r3, #25
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	3301      	adds	r3, #1
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049c4:	69bb      	ldr	r3, [r7, #24]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	0800eb90 	.word	0x0800eb90
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	007a1200 	.word	0x007a1200

080049e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000000 	.word	0x20000000

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a00:	f7ff fff0 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4904      	ldr	r1, [pc, #16]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	0800eb88 	.word	0x0800eb88

08004a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a2c:	f7ff ffda 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0adb      	lsrs	r3, r3, #11
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4904      	ldr	r1, [pc, #16]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	0800eb88 	.word	0x0800eb88

08004a54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	220f      	movs	r2, #15
 8004a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0203 	and.w	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	08db      	lsrs	r3, r3, #3
 8004a8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_RCC_GetClockConfig+0x60>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 020f 	and.w	r2, r3, #15
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	601a      	str	r2, [r3, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40022000 	.word	0x40022000

08004ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ac4:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ad0:	f7ff f862 	bl	8003b98 <HAL_PWREx_GetVoltageRange>
 8004ad4:	6178      	str	r0, [r7, #20]
 8004ad6:	e014      	b.n	8004b02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004af0:	f7ff f852 	bl	8003b98 <HAL_PWREx_GetVoltageRange>
 8004af4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004af6:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b08:	d10b      	bne.n	8004b22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d913      	bls.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2ba0      	cmp	r3, #160	; 0xa0
 8004b14:	d902      	bls.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b16:	2302      	movs	r3, #2
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	e00d      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e00a      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b7f      	cmp	r3, #127	; 0x7f
 8004b26:	d902      	bls.n	8004b2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b28:	2302      	movs	r3, #2
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	e004      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d101      	bne.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b34:	2301      	movs	r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 020f 	bic.w	r2, r3, #15
 8004b40:	4909      	ldr	r1, [pc, #36]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d001      	beq.n	8004b5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40022000 	.word	0x40022000

08004b6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b72:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d00b      	beq.n	8004b9a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d825      	bhi.n	8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d008      	beq.n	8004ba0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d11f      	bne.n	8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b96:	613b      	str	r3, [r7, #16]
    break;
 8004b98:	e01f      	b.n	8004bda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b9a:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b9c:	613b      	str	r3, [r7, #16]
    break;
 8004b9e:	e01c      	b.n	8004bda <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ba0:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d107      	bne.n	8004bbc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bac:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e005      	b.n	8004bc8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004bc8:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd0:	613b      	str	r3, [r7, #16]
    break;
 8004bd2:	e002      	b.n	8004bda <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
    break;
 8004bd8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	3301      	adds	r3, #1
 8004be6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	fb03 f202 	mul.w	r2, r3, r2
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0e5b      	lsrs	r3, r3, #25
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c1a:	683b      	ldr	r3, [r7, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	00f42400 	.word	0x00f42400
 8004c30:	007a1200 	.word	0x007a1200
 8004c34:	0800eb90 	.word	0x0800eb90

08004c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c40:	2300      	movs	r3, #0
 8004c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c44:	2300      	movs	r3, #0
 8004c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d040      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d02a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d825      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d026      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c64:	2b60      	cmp	r3, #96	; 0x60
 8004c66:	d821      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d006      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d81d      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d010      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c78:	e018      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c7a:	4b89      	ldr	r3, [pc, #548]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	4a88      	ldr	r2, [pc, #544]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c86:	e015      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fb4e 	bl	8005330 <RCCEx_PLLSAI1_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c98:	e00c      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3320      	adds	r3, #32
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fc39 	bl	8005518 <RCCEx_PLLSAI2_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	74fb      	strb	r3, [r7, #19]
      break;
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cba:	4b79      	ldr	r3, [pc, #484]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cc0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc8:	4975      	ldr	r1, [pc, #468]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004cd0:	e001      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	7cfb      	ldrb	r3, [r7, #19]
 8004cd4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d047      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cea:	d030      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf0:	d82a      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf6:	d02a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfc:	d824      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d02:	d008      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d08:	d81e      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d010      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d14:	e018      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d16:	4b62      	ldr	r3, [pc, #392]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a61      	ldr	r2, [pc, #388]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d22:	e015      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fb00 	bl	8005330 <RCCEx_PLLSAI1_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d34:	e00c      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3320      	adds	r3, #32
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fbeb 	bl	8005518 <RCCEx_PLLSAI2_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d46:	e003      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	74fb      	strb	r3, [r7, #19]
      break;
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d56:	4b52      	ldr	r3, [pc, #328]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	494e      	ldr	r1, [pc, #312]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d6c:	e001      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 809f 	beq.w	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d80:	2300      	movs	r3, #0
 8004d82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d84:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9a:	4b41      	ldr	r3, [pc, #260]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	4a40      	ldr	r2, [pc, #256]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6593      	str	r3, [r2, #88]	; 0x58
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db2:	2301      	movs	r3, #1
 8004db4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db6:	4b3b      	ldr	r3, [pc, #236]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3a      	ldr	r2, [pc, #232]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dc2:	f7fd f887 	bl	8001ed4 <HAL_GetTick>
 8004dc6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dc8:	e009      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fd f883 	bl	8001ed4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d902      	bls.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	74fb      	strb	r3, [r7, #19]
        break;
 8004ddc:	e005      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dde:	4b31      	ldr	r3, [pc, #196]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ef      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004dea:	7cfb      	ldrb	r3, [r7, #19]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d15b      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004df0:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01f      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d019      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e1a:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e3a:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d016      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd f842 	bl	8001ed4 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e52:	e00b      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7fd f83e 	bl	8001ed4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d902      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	74fb      	strb	r3, [r7, #19]
            break;
 8004e6a:	e006      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0ec      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e90:	4903      	ldr	r1, [pc, #12]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e98:	e008      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	74bb      	strb	r3, [r7, #18]
 8004e9e:	e005      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eac:	7c7b      	ldrb	r3, [r7, #17]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d105      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb2:	4ba0      	ldr	r3, [pc, #640]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	4a9f      	ldr	r2, [pc, #636]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eca:	4b9a      	ldr	r3, [pc, #616]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f023 0203 	bic.w	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	4996      	ldr	r1, [pc, #600]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eec:	4b91      	ldr	r3, [pc, #580]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f023 020c 	bic.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	498e      	ldr	r1, [pc, #568]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f0e:	4b89      	ldr	r3, [pc, #548]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	4985      	ldr	r1, [pc, #532]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f30:	4b80      	ldr	r3, [pc, #512]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3e:	497d      	ldr	r1, [pc, #500]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f52:	4b78      	ldr	r3, [pc, #480]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	4974      	ldr	r1, [pc, #464]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f74:	4b6f      	ldr	r3, [pc, #444]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f82:	496c      	ldr	r1, [pc, #432]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f96:	4b67      	ldr	r3, [pc, #412]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa4:	4963      	ldr	r1, [pc, #396]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fb8:	4b5e      	ldr	r3, [pc, #376]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc6:	495b      	ldr	r1, [pc, #364]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fda:	4b56      	ldr	r3, [pc, #344]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	4952      	ldr	r1, [pc, #328]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ffc:	4b4d      	ldr	r3, [pc, #308]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	494a      	ldr	r1, [pc, #296]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800501e:	4b45      	ldr	r3, [pc, #276]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	4941      	ldr	r1, [pc, #260]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005040:	4b3c      	ldr	r3, [pc, #240]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005046:	f023 0203 	bic.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504e:	4939      	ldr	r1, [pc, #228]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d028      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	4930      	ldr	r1, [pc, #192]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005080:	d106      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005082:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4a2b      	ldr	r2, [pc, #172]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800508c:	60d3      	str	r3, [r2, #12]
 800508e:	e011      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005094:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005098:	d10c      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	2101      	movs	r1, #1
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f945 	bl	8005330 <RCCEx_PLLSAI1_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d04d      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c8:	d108      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80050ca:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050d0:	4a18      	ldr	r2, [pc, #96]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80050da:	e012      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80050ec:	4b11      	ldr	r3, [pc, #68]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050fa:	490e      	ldr	r1, [pc, #56]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800510a:	d106      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a08      	ldr	r2, [pc, #32]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005116:	60d3      	str	r3, [r2, #12]
 8005118:	e020      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800511e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005122:	d109      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a02      	ldr	r2, [pc, #8]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512e:	60d3      	str	r3, [r2, #12]
 8005130:	e014      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005140:	d10c      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f8f1 	bl	8005330 <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d028      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005168:	4b68      	ldr	r3, [pc, #416]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005176:	4965      	ldr	r1, [pc, #404]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005186:	d106      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005188:	4b60      	ldr	r3, [pc, #384]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4a5f      	ldr	r2, [pc, #380]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800518e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005192:	60d3      	str	r3, [r2, #12]
 8005194:	e011      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800519e:	d10c      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	2101      	movs	r1, #1
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f8c2 	bl	8005330 <RCCEx_PLLSAI1_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01e      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051c6:	4b51      	ldr	r3, [pc, #324]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d6:	494d      	ldr	r1, [pc, #308]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e8:	d10c      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3304      	adds	r3, #4
 80051ee:	2102      	movs	r1, #2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 f89d 	bl	8005330 <RCCEx_PLLSAI1_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005210:	4b3e      	ldr	r3, [pc, #248]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005216:	f023 0204 	bic.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005220:	493a      	ldr	r1, [pc, #232]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00b      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005234:	4b35      	ldr	r3, [pc, #212]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800523a:	f023 0218 	bic.w	r2, r3, #24
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	4931      	ldr	r1, [pc, #196]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d035      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005258:	4b2c      	ldr	r3, [pc, #176]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800525e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005264:	f7fc fe36 	bl	8001ed4 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800526a:	e009      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800526c:	f7fc fe32 	bl	8001ed4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d902      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	74fb      	strb	r3, [r7, #19]
        break;
 800527e:	e005      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ef      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d113      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005292:	4b1e      	ldr	r3, [pc, #120]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a2:	491a      	ldr	r1, [pc, #104]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3320      	adds	r3, #32
 80052ae:	2102      	movs	r1, #2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f931 	bl	8005518 <RCCEx_PLLSAI2_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80052ba:	7cfb      	ldrb	r3, [r7, #19]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80052c0:	7cfb      	ldrb	r3, [r7, #19]
 80052c2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	490a      	ldr	r1, [pc, #40]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f2:	d105      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a04      	ldr	r2, [pc, #16]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005300:	7cbb      	ldrb	r3, [r7, #18]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000

08005310 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005314:	4b05      	ldr	r3, [pc, #20]	; (800532c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a04      	ldr	r2, [pc, #16]	; (800532c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800531a:	f043 0304 	orr.w	r3, r3, #4
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000

08005330 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800533e:	4b72      	ldr	r3, [pc, #456]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800534a:	4b6f      	ldr	r3, [pc, #444]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0203 	and.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d103      	bne.n	8005362 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
       ||
 800535e:	2b00      	cmp	r3, #0
 8005360:	d142      	bne.n	80053e8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	e03f      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d018      	beq.n	80053a2 <RCCEx_PLLSAI1_Config+0x72>
 8005370:	2b03      	cmp	r3, #3
 8005372:	d825      	bhi.n	80053c0 <RCCEx_PLLSAI1_Config+0x90>
 8005374:	2b01      	cmp	r3, #1
 8005376:	d002      	beq.n	800537e <RCCEx_PLLSAI1_Config+0x4e>
 8005378:	2b02      	cmp	r3, #2
 800537a:	d009      	beq.n	8005390 <RCCEx_PLLSAI1_Config+0x60>
 800537c:	e020      	b.n	80053c0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800537e:	4b62      	ldr	r3, [pc, #392]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11d      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538e:	e01a      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005390:	4b5d      	ldr	r3, [pc, #372]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005398:	2b00      	cmp	r3, #0
 800539a:	d116      	bne.n	80053ca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a0:	e013      	b.n	80053ca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053a2:	4b59      	ldr	r3, [pc, #356]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10f      	bne.n	80053ce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ae:	4b56      	ldr	r3, [pc, #344]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053be:	e006      	b.n	80053ce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
      break;
 80053c4:	e004      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053c6:	bf00      	nop
 80053c8:	e002      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80053ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d108      	bne.n	80053e8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80053d6:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4949      	ldr	r1, [pc, #292]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 8086 	bne.w	80054fc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053f0:	4b45      	ldr	r3, [pc, #276]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a44      	ldr	r2, [pc, #272]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fc fd6a 	bl	8001ed4 <HAL_GetTick>
 8005400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005402:	e009      	b.n	8005418 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005404:	f7fc fd66 	bl	8001ed4 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d902      	bls.n	8005418 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	73fb      	strb	r3, [r7, #15]
        break;
 8005416:	e005      	b.n	8005424 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005418:	4b3b      	ldr	r3, [pc, #236]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ef      	bne.n	8005404 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d168      	bne.n	80054fc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d113      	bne.n	8005458 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	4b35      	ldr	r3, [pc, #212]	; (800550c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005436:	4013      	ands	r3, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6892      	ldr	r2, [r2, #8]
 800543c:	0211      	lsls	r1, r2, #8
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68d2      	ldr	r2, [r2, #12]
 8005442:	06d2      	lsls	r2, r2, #27
 8005444:	4311      	orrs	r1, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	3a01      	subs	r2, #1
 800544c:	0112      	lsls	r2, r2, #4
 800544e:	430a      	orrs	r2, r1
 8005450:	492d      	ldr	r1, [pc, #180]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]
 8005456:	e02d      	b.n	80054b4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d115      	bne.n	800548a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545e:	4b2a      	ldr	r3, [pc, #168]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005464:	4013      	ands	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	0211      	lsls	r1, r2, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6912      	ldr	r2, [r2, #16]
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0552      	lsls	r2, r2, #21
 8005476:	4311      	orrs	r1, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6852      	ldr	r2, [r2, #4]
 800547c:	3a01      	subs	r2, #1
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	430a      	orrs	r2, r1
 8005482:	4921      	ldr	r1, [pc, #132]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005484:	4313      	orrs	r3, r2
 8005486:	610b      	str	r3, [r1, #16]
 8005488:	e014      	b.n	80054b4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	4013      	ands	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6892      	ldr	r2, [r2, #8]
 8005496:	0211      	lsls	r1, r2, #8
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6952      	ldr	r2, [r2, #20]
 800549c:	0852      	lsrs	r2, r2, #1
 800549e:	3a01      	subs	r2, #1
 80054a0:	0652      	lsls	r2, r2, #25
 80054a2:	4311      	orrs	r1, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6852      	ldr	r2, [r2, #4]
 80054a8:	3a01      	subs	r2, #1
 80054aa:	0112      	lsls	r2, r2, #4
 80054ac:	430a      	orrs	r2, r1
 80054ae:	4916      	ldr	r1, [pc, #88]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054b4:	4b14      	ldr	r3, [pc, #80]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a13      	ldr	r2, [pc, #76]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fc fd08 	bl	8001ed4 <HAL_GetTick>
 80054c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054c6:	e009      	b.n	80054dc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c8:	f7fc fd04 	bl	8001ed4 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d902      	bls.n	80054dc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	73fb      	strb	r3, [r7, #15]
          break;
 80054da:	e005      	b.n	80054e8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ef      	beq.n	80054c8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	4904      	ldr	r1, [pc, #16]	; (8005508 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000
 800550c:	07ff800f 	.word	0x07ff800f
 8005510:	ff9f800f 	.word	0xff9f800f
 8005514:	f9ff800f 	.word	0xf9ff800f

08005518 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005526:	4b72      	ldr	r3, [pc, #456]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00e      	beq.n	8005550 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005532:	4b6f      	ldr	r3, [pc, #444]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0203 	and.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d103      	bne.n	800554a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
       ||
 8005546:	2b00      	cmp	r3, #0
 8005548:	d142      	bne.n	80055d0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	e03f      	b.n	80055d0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d018      	beq.n	800558a <RCCEx_PLLSAI2_Config+0x72>
 8005558:	2b03      	cmp	r3, #3
 800555a:	d825      	bhi.n	80055a8 <RCCEx_PLLSAI2_Config+0x90>
 800555c:	2b01      	cmp	r3, #1
 800555e:	d002      	beq.n	8005566 <RCCEx_PLLSAI2_Config+0x4e>
 8005560:	2b02      	cmp	r3, #2
 8005562:	d009      	beq.n	8005578 <RCCEx_PLLSAI2_Config+0x60>
 8005564:	e020      	b.n	80055a8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005566:	4b62      	ldr	r3, [pc, #392]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11d      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005576:	e01a      	b.n	80055ae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005578:	4b5d      	ldr	r3, [pc, #372]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005588:	e013      	b.n	80055b2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800558a:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005596:	4b56      	ldr	r3, [pc, #344]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055a6:	e006      	b.n	80055b6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
      break;
 80055ac:	e004      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80055b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80055be:	4b4c      	ldr	r3, [pc, #304]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f023 0203 	bic.w	r2, r3, #3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4949      	ldr	r1, [pc, #292]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 8086 	bne.w	80056e4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055d8:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a44      	ldr	r2, [pc, #272]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fc fc76 	bl	8001ed4 <HAL_GetTick>
 80055e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ea:	e009      	b.n	8005600 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055ec:	f7fc fc72 	bl	8001ed4 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d902      	bls.n	8005600 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	73fb      	strb	r3, [r7, #15]
        break;
 80055fe:	e005      	b.n	800560c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005600:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ef      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d168      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d113      	bne.n	8005640 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005618:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	4b35      	ldr	r3, [pc, #212]	; (80056f4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6892      	ldr	r2, [r2, #8]
 8005624:	0211      	lsls	r1, r2, #8
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	06d2      	lsls	r2, r2, #27
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6852      	ldr	r2, [r2, #4]
 8005632:	3a01      	subs	r2, #1
 8005634:	0112      	lsls	r2, r2, #4
 8005636:	430a      	orrs	r2, r1
 8005638:	492d      	ldr	r1, [pc, #180]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800563a:	4313      	orrs	r3, r2
 800563c:	614b      	str	r3, [r1, #20]
 800563e:	e02d      	b.n	800569c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d115      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005646:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800564c:	4013      	ands	r3, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6892      	ldr	r2, [r2, #8]
 8005652:	0211      	lsls	r1, r2, #8
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6912      	ldr	r2, [r2, #16]
 8005658:	0852      	lsrs	r2, r2, #1
 800565a:	3a01      	subs	r2, #1
 800565c:	0552      	lsls	r2, r2, #21
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6852      	ldr	r2, [r2, #4]
 8005664:	3a01      	subs	r2, #1
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	430a      	orrs	r2, r1
 800566a:	4921      	ldr	r1, [pc, #132]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800566c:	4313      	orrs	r3, r2
 800566e:	614b      	str	r3, [r1, #20]
 8005670:	e014      	b.n	800569c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005672:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	4b21      	ldr	r3, [pc, #132]	; (80056fc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005678:	4013      	ands	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6892      	ldr	r2, [r2, #8]
 800567e:	0211      	lsls	r1, r2, #8
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6952      	ldr	r2, [r2, #20]
 8005684:	0852      	lsrs	r2, r2, #1
 8005686:	3a01      	subs	r2, #1
 8005688:	0652      	lsls	r2, r2, #25
 800568a:	4311      	orrs	r1, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6852      	ldr	r2, [r2, #4]
 8005690:	3a01      	subs	r2, #1
 8005692:	0112      	lsls	r2, r2, #4
 8005694:	430a      	orrs	r2, r1
 8005696:	4916      	ldr	r1, [pc, #88]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005698:	4313      	orrs	r3, r2
 800569a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fc fc14 	bl	8001ed4 <HAL_GetTick>
 80056ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056ae:	e009      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056b0:	f7fc fc10 	bl	8001ed4 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d902      	bls.n	80056c4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	73fb      	strb	r3, [r7, #15]
          break;
 80056c2:	e005      	b.n	80056d0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ef      	beq.n	80056b0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	4904      	ldr	r1, [pc, #16]	; (80056f0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000
 80056f4:	07ff800f 	.word	0x07ff800f
 80056f8:	ff9f800f 	.word	0xff9f800f
 80056fc:	f9ff800f 	.word	0xf9ff800f

08005700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e049      	b.n	80057a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc f948 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f000 fd2a 	bl	8006198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d001      	beq.n	80057c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e04f      	b.n	8005868 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a23      	ldr	r2, [pc, #140]	; (8005874 <HAL_TIM_Base_Start_IT+0xc4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01d      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0x76>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d018      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0x76>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_TIM_Base_Start_IT+0xc8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0x76>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_TIM_Base_Start_IT+0xcc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0x76>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <HAL_TIM_Base_Start_IT+0xd0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0x76>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <HAL_TIM_Base_Start_IT+0xd4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0x76>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_TIM_Base_Start_IT+0xd8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d115      	bne.n	8005852 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <HAL_TIM_Base_Start_IT+0xdc>)
 800582e:	4013      	ands	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b06      	cmp	r3, #6
 8005836:	d015      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0xb4>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583e:	d011      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005850:	e008      	b.n	8005864 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e000      	b.n	8005866 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005864:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40013400 	.word	0x40013400
 8005888:	40014000 	.word	0x40014000
 800588c:	00010007 	.word	0x00010007

08005890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e049      	b.n	8005936 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc f860 	bl	800197c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fc62 	bl	8006198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_TIM_PWM_Start+0x24>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	bf14      	ite	ne
 800595c:	2301      	movne	r3, #1
 800595e:	2300      	moveq	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e03c      	b.n	80059de <HAL_TIM_PWM_Start+0x9e>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b04      	cmp	r3, #4
 8005968:	d109      	bne.n	800597e <HAL_TIM_PWM_Start+0x3e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	bf14      	ite	ne
 8005976:	2301      	movne	r3, #1
 8005978:	2300      	moveq	r3, #0
 800597a:	b2db      	uxtb	r3, r3
 800597c:	e02f      	b.n	80059de <HAL_TIM_PWM_Start+0x9e>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d109      	bne.n	8005998 <HAL_TIM_PWM_Start+0x58>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e022      	b.n	80059de <HAL_TIM_PWM_Start+0x9e>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d109      	bne.n	80059b2 <HAL_TIM_PWM_Start+0x72>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e015      	b.n	80059de <HAL_TIM_PWM_Start+0x9e>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d109      	bne.n	80059cc <HAL_TIM_PWM_Start+0x8c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e008      	b.n	80059de <HAL_TIM_PWM_Start+0x9e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e09c      	b.n	8005b20 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Start+0xb6>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f4:	e023      	b.n	8005a3e <HAL_TIM_PWM_Start+0xfe>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Start+0xc6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a04:	e01b      	b.n	8005a3e <HAL_TIM_PWM_Start+0xfe>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xd6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a14:	e013      	b.n	8005a3e <HAL_TIM_PWM_Start+0xfe>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b0c      	cmp	r3, #12
 8005a1a:	d104      	bne.n	8005a26 <HAL_TIM_PWM_Start+0xe6>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a24:	e00b      	b.n	8005a3e <HAL_TIM_PWM_Start+0xfe>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_PWM_Start+0xf6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a34:	e003      	b.n	8005a3e <HAL_TIM_PWM_Start+0xfe>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2201      	movs	r2, #1
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 ffb0 	bl	80069ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a35      	ldr	r2, [pc, #212]	; (8005b28 <HAL_TIM_PWM_Start+0x1e8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x13e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a34      	ldr	r2, [pc, #208]	; (8005b2c <HAL_TIM_PWM_Start+0x1ec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x13e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a32      	ldr	r2, [pc, #200]	; (8005b30 <HAL_TIM_PWM_Start+0x1f0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x13e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a31      	ldr	r2, [pc, #196]	; (8005b34 <HAL_TIM_PWM_Start+0x1f4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x13e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <HAL_TIM_PWM_Start+0x1f8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_PWM_Start+0x142>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_PWM_Start+0x144>
 8005a82:	2300      	movs	r3, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d007      	beq.n	8005a98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <HAL_TIM_PWM_Start+0x1e8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01d      	beq.n	8005ade <HAL_TIM_PWM_Start+0x19e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d018      	beq.n	8005ade <HAL_TIM_PWM_Start+0x19e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <HAL_TIM_PWM_Start+0x1fc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_TIM_PWM_Start+0x19e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a21      	ldr	r2, [pc, #132]	; (8005b40 <HAL_TIM_PWM_Start+0x200>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <HAL_TIM_PWM_Start+0x19e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <HAL_TIM_PWM_Start+0x204>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_TIM_PWM_Start+0x19e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_TIM_PWM_Start+0x1ec>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_TIM_PWM_Start+0x19e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <HAL_TIM_PWM_Start+0x1f0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d115      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <HAL_TIM_PWM_Start+0x208>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b06      	cmp	r3, #6
 8005aee:	d015      	beq.n	8005b1c <HAL_TIM_PWM_Start+0x1dc>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af6:	d011      	beq.n	8005b1c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b08:	e008      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e000      	b.n	8005b1e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40013400 	.word	0x40013400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	00010007 	.word	0x00010007

08005b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d122      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0202 	mvn.w	r2, #2
 8005b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fae3 	bl	800615a <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fad5 	bl	8006146 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fae6 	bl	800616e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d122      	bne.n	8005bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d11b      	bne.n	8005bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0204 	mvn.w	r2, #4
 8005bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fab9 	bl	800615a <HAL_TIM_IC_CaptureCallback>
 8005be8:	e005      	b.n	8005bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 faab 	bl	8006146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fabc 	bl	800616e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d122      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d11b      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0208 	mvn.w	r2, #8
 8005c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2204      	movs	r2, #4
 8005c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa8f 	bl	800615a <HAL_TIM_IC_CaptureCallback>
 8005c3c:	e005      	b.n	8005c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa81 	bl	8006146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa92 	bl	800616e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b10      	cmp	r3, #16
 8005c5c:	d122      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0210 	mvn.w	r2, #16
 8005c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2208      	movs	r2, #8
 8005c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa65 	bl	800615a <HAL_TIM_IC_CaptureCallback>
 8005c90:	e005      	b.n	8005c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa57 	bl	8006146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa68 	bl	800616e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d10e      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d107      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0201 	mvn.w	r2, #1
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fb fd76 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b80      	cmp	r3, #128	; 0x80
 8005cdc:	d10e      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce8:	2b80      	cmp	r3, #128	; 0x80
 8005cea:	d107      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 ff10 	bl	8006b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0a:	d10e      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	2b80      	cmp	r3, #128	; 0x80
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 ff03 	bl	8006b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d10e      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa16 	bl	8006182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d10e      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d107      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f06f 0220 	mvn.w	r2, #32
 8005d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fec3 	bl	8006b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0ff      	b.n	8005faa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b14      	cmp	r3, #20
 8005db6:	f200 80f0 	bhi.w	8005f9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005f9b 	.word	0x08005f9b
 8005dc8:	08005f9b 	.word	0x08005f9b
 8005dcc:	08005f9b 	.word	0x08005f9b
 8005dd0:	08005e55 	.word	0x08005e55
 8005dd4:	08005f9b 	.word	0x08005f9b
 8005dd8:	08005f9b 	.word	0x08005f9b
 8005ddc:	08005f9b 	.word	0x08005f9b
 8005de0:	08005e97 	.word	0x08005e97
 8005de4:	08005f9b 	.word	0x08005f9b
 8005de8:	08005f9b 	.word	0x08005f9b
 8005dec:	08005f9b 	.word	0x08005f9b
 8005df0:	08005ed7 	.word	0x08005ed7
 8005df4:	08005f9b 	.word	0x08005f9b
 8005df8:	08005f9b 	.word	0x08005f9b
 8005dfc:	08005f9b 	.word	0x08005f9b
 8005e00:	08005f19 	.word	0x08005f19
 8005e04:	08005f9b 	.word	0x08005f9b
 8005e08:	08005f9b 	.word	0x08005f9b
 8005e0c:	08005f9b 	.word	0x08005f9b
 8005e10:	08005f59 	.word	0x08005f59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fa56 	bl	80062cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0208 	orr.w	r2, r2, #8
 8005e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0204 	bic.w	r2, r2, #4
 8005e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	619a      	str	r2, [r3, #24]
      break;
 8005e52:	e0a5      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fac6 	bl	80063ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6999      	ldr	r1, [r3, #24]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	021a      	lsls	r2, r3, #8
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	619a      	str	r2, [r3, #24]
      break;
 8005e94:	e084      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fb2f 	bl	8006500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0208 	orr.w	r2, r2, #8
 8005eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0204 	bic.w	r2, r2, #4
 8005ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	61da      	str	r2, [r3, #28]
      break;
 8005ed4:	e064      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fb97 	bl	8006610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69d9      	ldr	r1, [r3, #28]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	021a      	lsls	r2, r3, #8
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	61da      	str	r2, [r3, #28]
      break;
 8005f16:	e043      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fbe0 	bl	80066e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0208 	orr.w	r2, r2, #8
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0204 	bic.w	r2, r2, #4
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f56:	e023      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fc24 	bl	80067ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f98:	e002      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e0b6      	b.n	800613e <HAL_TIM_ConfigClockSource+0x18a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600c:	d03e      	beq.n	800608c <HAL_TIM_ConfigClockSource+0xd8>
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006012:	f200 8087 	bhi.w	8006124 <HAL_TIM_ConfigClockSource+0x170>
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601a:	f000 8086 	beq.w	800612a <HAL_TIM_ConfigClockSource+0x176>
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006022:	d87f      	bhi.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
 8006024:	2b70      	cmp	r3, #112	; 0x70
 8006026:	d01a      	beq.n	800605e <HAL_TIM_ConfigClockSource+0xaa>
 8006028:	2b70      	cmp	r3, #112	; 0x70
 800602a:	d87b      	bhi.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
 800602c:	2b60      	cmp	r3, #96	; 0x60
 800602e:	d050      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x11e>
 8006030:	2b60      	cmp	r3, #96	; 0x60
 8006032:	d877      	bhi.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
 8006034:	2b50      	cmp	r3, #80	; 0x50
 8006036:	d03c      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0xfe>
 8006038:	2b50      	cmp	r3, #80	; 0x50
 800603a:	d873      	bhi.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	d058      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x13e>
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d86f      	bhi.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
 8006044:	2b30      	cmp	r3, #48	; 0x30
 8006046:	d064      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0x15e>
 8006048:	2b30      	cmp	r3, #48	; 0x30
 800604a:	d86b      	bhi.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
 800604c:	2b20      	cmp	r3, #32
 800604e:	d060      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0x15e>
 8006050:	2b20      	cmp	r3, #32
 8006052:	d867      	bhi.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d05c      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0x15e>
 8006058:	2b10      	cmp	r3, #16
 800605a:	d05a      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0x15e>
 800605c:	e062      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6899      	ldr	r1, [r3, #8]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f000 fc7d 	bl	800696c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	609a      	str	r2, [r3, #8]
      break;
 800608a:	e04f      	b.n	800612c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f000 fc66 	bl	800696c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ae:	609a      	str	r2, [r3, #8]
      break;
 80060b0:	e03c      	b.n	800612c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6859      	ldr	r1, [r3, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	461a      	mov	r2, r3
 80060c0:	f000 fbda 	bl	8006878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2150      	movs	r1, #80	; 0x50
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fc33 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 80060d0:	e02c      	b.n	800612c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6859      	ldr	r1, [r3, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	461a      	mov	r2, r3
 80060e0:	f000 fbf9 	bl	80068d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2160      	movs	r1, #96	; 0x60
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fc23 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 80060f0:	e01c      	b.n	800612c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6859      	ldr	r1, [r3, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	461a      	mov	r2, r3
 8006100:	f000 fbba 	bl	8006878 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2140      	movs	r1, #64	; 0x40
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fc13 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 8006110:	e00c      	b.n	800612c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4619      	mov	r1, r3
 800611c:	4610      	mov	r0, r2
 800611e:	f000 fc0a 	bl	8006936 <TIM_ITRx_SetConfig>
      break;
 8006122:	e003      	b.n	800612c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
      break;
 8006128:	e000      	b.n	800612c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800612a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a40      	ldr	r2, [pc, #256]	; (80062ac <TIM_Base_SetConfig+0x114>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d013      	beq.n	80061d8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b6:	d00f      	beq.n	80061d8 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a3d      	ldr	r2, [pc, #244]	; (80062b0 <TIM_Base_SetConfig+0x118>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a3c      	ldr	r2, [pc, #240]	; (80062b4 <TIM_Base_SetConfig+0x11c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3b      	ldr	r2, [pc, #236]	; (80062b8 <TIM_Base_SetConfig+0x120>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3a      	ldr	r2, [pc, #232]	; (80062bc <TIM_Base_SetConfig+0x124>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d108      	bne.n	80061ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2f      	ldr	r2, [pc, #188]	; (80062ac <TIM_Base_SetConfig+0x114>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01f      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f8:	d01b      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2c      	ldr	r2, [pc, #176]	; (80062b0 <TIM_Base_SetConfig+0x118>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d017      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2b      	ldr	r2, [pc, #172]	; (80062b4 <TIM_Base_SetConfig+0x11c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <TIM_Base_SetConfig+0x120>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00f      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a29      	ldr	r2, [pc, #164]	; (80062bc <TIM_Base_SetConfig+0x124>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00b      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a28      	ldr	r2, [pc, #160]	; (80062c0 <TIM_Base_SetConfig+0x128>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a27      	ldr	r2, [pc, #156]	; (80062c4 <TIM_Base_SetConfig+0x12c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_Base_SetConfig+0x9a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <TIM_Base_SetConfig+0x130>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d108      	bne.n	8006244 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a10      	ldr	r2, [pc, #64]	; (80062ac <TIM_Base_SetConfig+0x114>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00f      	beq.n	8006290 <TIM_Base_SetConfig+0xf8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a12      	ldr	r2, [pc, #72]	; (80062bc <TIM_Base_SetConfig+0x124>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00b      	beq.n	8006290 <TIM_Base_SetConfig+0xf8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a11      	ldr	r2, [pc, #68]	; (80062c0 <TIM_Base_SetConfig+0x128>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d007      	beq.n	8006290 <TIM_Base_SetConfig+0xf8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <TIM_Base_SetConfig+0x12c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0xf8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a0f      	ldr	r2, [pc, #60]	; (80062c8 <TIM_Base_SetConfig+0x130>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d103      	bne.n	8006298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	615a      	str	r2, [r3, #20]
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40013400 	.word	0x40013400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40014800 	.word	0x40014800

080062cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0201 	bic.w	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f023 0302 	bic.w	r3, r3, #2
 8006318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a2c      	ldr	r2, [pc, #176]	; (80063d8 <TIM_OC1_SetConfig+0x10c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00f      	beq.n	800634c <TIM_OC1_SetConfig+0x80>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2b      	ldr	r2, [pc, #172]	; (80063dc <TIM_OC1_SetConfig+0x110>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00b      	beq.n	800634c <TIM_OC1_SetConfig+0x80>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2a      	ldr	r2, [pc, #168]	; (80063e0 <TIM_OC1_SetConfig+0x114>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_OC1_SetConfig+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a29      	ldr	r2, [pc, #164]	; (80063e4 <TIM_OC1_SetConfig+0x118>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC1_SetConfig+0x80>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a28      	ldr	r2, [pc, #160]	; (80063e8 <TIM_OC1_SetConfig+0x11c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10c      	bne.n	8006366 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0308 	bic.w	r3, r3, #8
 8006352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f023 0304 	bic.w	r3, r3, #4
 8006364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1b      	ldr	r2, [pc, #108]	; (80063d8 <TIM_OC1_SetConfig+0x10c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00f      	beq.n	800638e <TIM_OC1_SetConfig+0xc2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1a      	ldr	r2, [pc, #104]	; (80063dc <TIM_OC1_SetConfig+0x110>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00b      	beq.n	800638e <TIM_OC1_SetConfig+0xc2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <TIM_OC1_SetConfig+0x114>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_OC1_SetConfig+0xc2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <TIM_OC1_SetConfig+0x118>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_OC1_SetConfig+0xc2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <TIM_OC1_SetConfig+0x11c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d111      	bne.n	80063b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800639c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	621a      	str	r2, [r3, #32]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40012c00 	.word	0x40012c00
 80063dc:	40013400 	.word	0x40013400
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800

080063ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f023 0210 	bic.w	r2, r3, #16
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0320 	bic.w	r3, r3, #32
 800643a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a28      	ldr	r2, [pc, #160]	; (80064ec <TIM_OC2_SetConfig+0x100>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC2_SetConfig+0x6c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a27      	ldr	r2, [pc, #156]	; (80064f0 <TIM_OC2_SetConfig+0x104>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d10d      	bne.n	8006474 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a1d      	ldr	r2, [pc, #116]	; (80064ec <TIM_OC2_SetConfig+0x100>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00f      	beq.n	800649c <TIM_OC2_SetConfig+0xb0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <TIM_OC2_SetConfig+0x104>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00b      	beq.n	800649c <TIM_OC2_SetConfig+0xb0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a1b      	ldr	r2, [pc, #108]	; (80064f4 <TIM_OC2_SetConfig+0x108>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d007      	beq.n	800649c <TIM_OC2_SetConfig+0xb0>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1a      	ldr	r2, [pc, #104]	; (80064f8 <TIM_OC2_SetConfig+0x10c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d003      	beq.n	800649c <TIM_OC2_SetConfig+0xb0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a19      	ldr	r2, [pc, #100]	; (80064fc <TIM_OC2_SetConfig+0x110>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d113      	bne.n	80064c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800

08006500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800654c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a27      	ldr	r2, [pc, #156]	; (80065fc <TIM_OC3_SetConfig+0xfc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_OC3_SetConfig+0x6a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a26      	ldr	r2, [pc, #152]	; (8006600 <TIM_OC3_SetConfig+0x100>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d10d      	bne.n	8006586 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <TIM_OC3_SetConfig+0xfc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00f      	beq.n	80065ae <TIM_OC3_SetConfig+0xae>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <TIM_OC3_SetConfig+0x100>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00b      	beq.n	80065ae <TIM_OC3_SetConfig+0xae>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <TIM_OC3_SetConfig+0x104>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d007      	beq.n	80065ae <TIM_OC3_SetConfig+0xae>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a19      	ldr	r2, [pc, #100]	; (8006608 <TIM_OC3_SetConfig+0x108>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC3_SetConfig+0xae>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a18      	ldr	r2, [pc, #96]	; (800660c <TIM_OC3_SetConfig+0x10c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d113      	bne.n	80065d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	621a      	str	r2, [r3, #32]
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40012c00 	.word	0x40012c00
 8006600:	40013400 	.word	0x40013400
 8006604:	40014000 	.word	0x40014000
 8006608:	40014400 	.word	0x40014400
 800660c:	40014800 	.word	0x40014800

08006610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800665e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	031b      	lsls	r3, r3, #12
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <TIM_OC4_SetConfig+0xc0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00f      	beq.n	8006694 <TIM_OC4_SetConfig+0x84>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <TIM_OC4_SetConfig+0xc4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00b      	beq.n	8006694 <TIM_OC4_SetConfig+0x84>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <TIM_OC4_SetConfig+0xc8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_OC4_SetConfig+0x84>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a15      	ldr	r2, [pc, #84]	; (80066dc <TIM_OC4_SetConfig+0xcc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC4_SetConfig+0x84>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a14      	ldr	r2, [pc, #80]	; (80066e0 <TIM_OC4_SetConfig+0xd0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d109      	bne.n	80066a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800669a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	019b      	lsls	r3, r3, #6
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	621a      	str	r2, [r3, #32]
}
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800

080066e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006728:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a17      	ldr	r2, [pc, #92]	; (8006798 <TIM_OC5_SetConfig+0xb4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00f      	beq.n	800675e <TIM_OC5_SetConfig+0x7a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a16      	ldr	r2, [pc, #88]	; (800679c <TIM_OC5_SetConfig+0xb8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00b      	beq.n	800675e <TIM_OC5_SetConfig+0x7a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <TIM_OC5_SetConfig+0xbc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d007      	beq.n	800675e <TIM_OC5_SetConfig+0x7a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a14      	ldr	r2, [pc, #80]	; (80067a4 <TIM_OC5_SetConfig+0xc0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC5_SetConfig+0x7a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <TIM_OC5_SetConfig+0xc4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d109      	bne.n	8006772 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40013400 	.word	0x40013400
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40014400 	.word	0x40014400
 80067a8:	40014800 	.word	0x40014800

080067ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	051b      	lsls	r3, r3, #20
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a18      	ldr	r2, [pc, #96]	; (8006864 <TIM_OC6_SetConfig+0xb8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00f      	beq.n	8006828 <TIM_OC6_SetConfig+0x7c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <TIM_OC6_SetConfig+0xbc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00b      	beq.n	8006828 <TIM_OC6_SetConfig+0x7c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a16      	ldr	r2, [pc, #88]	; (800686c <TIM_OC6_SetConfig+0xc0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC6_SetConfig+0x7c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a15      	ldr	r2, [pc, #84]	; (8006870 <TIM_OC6_SetConfig+0xc4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC6_SetConfig+0x7c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a14      	ldr	r2, [pc, #80]	; (8006874 <TIM_OC6_SetConfig+0xc8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d109      	bne.n	800683c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40013400 	.word	0x40013400
 800686c:	40014000 	.word	0x40014000
 8006870:	40014400 	.word	0x40014400
 8006874:	40014800 	.word	0x40014800

08006878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0201 	bic.w	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f023 030a 	bic.w	r3, r3, #10
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b087      	sub	sp, #28
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0210 	bic.w	r2, r3, #16
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	031b      	lsls	r3, r3, #12
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	f043 0307 	orr.w	r3, r3, #7
 8006958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	021a      	lsls	r2, r3, #8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	431a      	orrs	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4313      	orrs	r3, r2
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	609a      	str	r2, [r3, #8]
}
 80069a0:	bf00      	nop
 80069a2:	371c      	adds	r7, #28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2201      	movs	r2, #1
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a1a      	ldr	r2, [r3, #32]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	43db      	mvns	r3, r3
 80069ce:	401a      	ands	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a1a      	ldr	r2, [r3, #32]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	fa01 f303 	lsl.w	r3, r1, r3
 80069e4:	431a      	orrs	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	621a      	str	r2, [r3, #32]
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
	...

080069f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e068      	b.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2e      	ldr	r2, [pc, #184]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d108      	bne.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1a      	ldr	r2, [pc, #104]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40013400 	.word	0x40013400
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40014000 	.word	0x40014000

08006b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e042      	b.n	8006bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7fa fea7 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2224      	movs	r2, #36	; 0x24
 8006b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8c2 	bl	8006d10 <UART_SetConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e022      	b.n	8006bdc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fbb2 	bl	8007308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fc39 	bl	800744c <UART_CheckIdleState>
 8006bda:	4603      	mov	r3, r0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	f040 8083 	bne.w	8006d06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_UART_Transmit+0x28>
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e07b      	b.n	8006d08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Transmit+0x3a>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e074      	b.n	8006d08 <HAL_UART_Transmit+0x124>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2221      	movs	r2, #33	; 0x21
 8006c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c36:	f7fb f94d 	bl	8001ed4 <HAL_GetTick>
 8006c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	88fa      	ldrh	r2, [r7, #6]
 8006c40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	88fa      	ldrh	r2, [r7, #6]
 8006c48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c54:	d108      	bne.n	8006c68 <HAL_UART_Transmit+0x84>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d104      	bne.n	8006c68 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e003      	b.n	8006c70 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006c78:	e02c      	b.n	8006cd4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2200      	movs	r2, #0
 8006c82:	2180      	movs	r1, #128	; 0x80
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fc2c 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e039      	b.n	8006d08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	3302      	adds	r3, #2
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	e007      	b.n	8006cc2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1cc      	bne.n	8006c7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2140      	movs	r1, #64	; 0x40
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fbf9 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e006      	b.n	8006d08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	e000      	b.n	8006d08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006d06:	2302      	movs	r3, #2
  }
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d14:	b08c      	sub	sp, #48	; 0x30
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4baa      	ldr	r3, [pc, #680]	; (8006fe8 <UART_SetConfig+0x2d8>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a9f      	ldr	r2, [pc, #636]	; (8006fec <UART_SetConfig+0x2dc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d90:	430b      	orrs	r3, r1
 8006d92:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	f023 010f 	bic.w	r1, r3, #15
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a90      	ldr	r2, [pc, #576]	; (8006ff0 <UART_SetConfig+0x2e0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d125      	bne.n	8006e00 <UART_SetConfig+0xf0>
 8006db4:	4b8f      	ldr	r3, [pc, #572]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d81a      	bhi.n	8006df8 <UART_SetConfig+0xe8>
 8006dc2:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0xb8>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006df1 	.word	0x08006df1
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dde:	e116      	b.n	800700e <UART_SetConfig+0x2fe>
 8006de0:	2302      	movs	r3, #2
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de6:	e112      	b.n	800700e <UART_SetConfig+0x2fe>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dee:	e10e      	b.n	800700e <UART_SetConfig+0x2fe>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e10a      	b.n	800700e <UART_SetConfig+0x2fe>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfe:	e106      	b.n	800700e <UART_SetConfig+0x2fe>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a7c      	ldr	r2, [pc, #496]	; (8006ff8 <UART_SetConfig+0x2e8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d138      	bne.n	8006e7c <UART_SetConfig+0x16c>
 8006e0a:	4b7a      	ldr	r3, [pc, #488]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e10:	f003 030c 	and.w	r3, r3, #12
 8006e14:	2b0c      	cmp	r3, #12
 8006e16:	d82d      	bhi.n	8006e74 <UART_SetConfig+0x164>
 8006e18:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <UART_SetConfig+0x110>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e55 	.word	0x08006e55
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	08006e75 	.word	0x08006e75
 8006e2c:	08006e75 	.word	0x08006e75
 8006e30:	08006e65 	.word	0x08006e65
 8006e34:	08006e75 	.word	0x08006e75
 8006e38:	08006e75 	.word	0x08006e75
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e75 	.word	0x08006e75
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e6d 	.word	0x08006e6d
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e0d8      	b.n	800700e <UART_SetConfig+0x2fe>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e0d4      	b.n	800700e <UART_SetConfig+0x2fe>
 8006e64:	2304      	movs	r3, #4
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e0d0      	b.n	800700e <UART_SetConfig+0x2fe>
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e0cc      	b.n	800700e <UART_SetConfig+0x2fe>
 8006e74:	2310      	movs	r3, #16
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	e0c8      	b.n	800700e <UART_SetConfig+0x2fe>
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a5e      	ldr	r2, [pc, #376]	; (8006ffc <UART_SetConfig+0x2ec>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d125      	bne.n	8006ed2 <UART_SetConfig+0x1c2>
 8006e86:	4b5b      	ldr	r3, [pc, #364]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e90:	2b30      	cmp	r3, #48	; 0x30
 8006e92:	d016      	beq.n	8006ec2 <UART_SetConfig+0x1b2>
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d818      	bhi.n	8006eca <UART_SetConfig+0x1ba>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d00a      	beq.n	8006eb2 <UART_SetConfig+0x1a2>
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d814      	bhi.n	8006eca <UART_SetConfig+0x1ba>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <UART_SetConfig+0x19a>
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	d008      	beq.n	8006eba <UART_SetConfig+0x1aa>
 8006ea8:	e00f      	b.n	8006eca <UART_SetConfig+0x1ba>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb0:	e0ad      	b.n	800700e <UART_SetConfig+0x2fe>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb8:	e0a9      	b.n	800700e <UART_SetConfig+0x2fe>
 8006eba:	2304      	movs	r3, #4
 8006ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec0:	e0a5      	b.n	800700e <UART_SetConfig+0x2fe>
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec8:	e0a1      	b.n	800700e <UART_SetConfig+0x2fe>
 8006eca:	2310      	movs	r3, #16
 8006ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed0:	e09d      	b.n	800700e <UART_SetConfig+0x2fe>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4a      	ldr	r2, [pc, #296]	; (8007000 <UART_SetConfig+0x2f0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d125      	bne.n	8006f28 <UART_SetConfig+0x218>
 8006edc:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee8:	d016      	beq.n	8006f18 <UART_SetConfig+0x208>
 8006eea:	2bc0      	cmp	r3, #192	; 0xc0
 8006eec:	d818      	bhi.n	8006f20 <UART_SetConfig+0x210>
 8006eee:	2b80      	cmp	r3, #128	; 0x80
 8006ef0:	d00a      	beq.n	8006f08 <UART_SetConfig+0x1f8>
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d814      	bhi.n	8006f20 <UART_SetConfig+0x210>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <UART_SetConfig+0x1f0>
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d008      	beq.n	8006f10 <UART_SetConfig+0x200>
 8006efe:	e00f      	b.n	8006f20 <UART_SetConfig+0x210>
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f06:	e082      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	e07e      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f16:	e07a      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1e:	e076      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f26:	e072      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a35      	ldr	r2, [pc, #212]	; (8007004 <UART_SetConfig+0x2f4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d12a      	bne.n	8006f88 <UART_SetConfig+0x278>
 8006f32:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f40:	d01a      	beq.n	8006f78 <UART_SetConfig+0x268>
 8006f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f46:	d81b      	bhi.n	8006f80 <UART_SetConfig+0x270>
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4c:	d00c      	beq.n	8006f68 <UART_SetConfig+0x258>
 8006f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f52:	d815      	bhi.n	8006f80 <UART_SetConfig+0x270>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <UART_SetConfig+0x250>
 8006f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5c:	d008      	beq.n	8006f70 <UART_SetConfig+0x260>
 8006f5e:	e00f      	b.n	8006f80 <UART_SetConfig+0x270>
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f66:	e052      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	e04e      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f76:	e04a      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f78:	2308      	movs	r3, #8
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	e046      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f86:	e042      	b.n	800700e <UART_SetConfig+0x2fe>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a17      	ldr	r2, [pc, #92]	; (8006fec <UART_SetConfig+0x2dc>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d13a      	bne.n	8007008 <UART_SetConfig+0x2f8>
 8006f92:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fa0:	d01a      	beq.n	8006fd8 <UART_SetConfig+0x2c8>
 8006fa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fa6:	d81b      	bhi.n	8006fe0 <UART_SetConfig+0x2d0>
 8006fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fac:	d00c      	beq.n	8006fc8 <UART_SetConfig+0x2b8>
 8006fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb2:	d815      	bhi.n	8006fe0 <UART_SetConfig+0x2d0>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <UART_SetConfig+0x2b0>
 8006fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbc:	d008      	beq.n	8006fd0 <UART_SetConfig+0x2c0>
 8006fbe:	e00f      	b.n	8006fe0 <UART_SetConfig+0x2d0>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc6:	e022      	b.n	800700e <UART_SetConfig+0x2fe>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fce:	e01e      	b.n	800700e <UART_SetConfig+0x2fe>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd6:	e01a      	b.n	800700e <UART_SetConfig+0x2fe>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fde:	e016      	b.n	800700e <UART_SetConfig+0x2fe>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fe6:	e012      	b.n	800700e <UART_SetConfig+0x2fe>
 8006fe8:	cfff69f3 	.word	0xcfff69f3
 8006fec:	40008000 	.word	0x40008000
 8006ff0:	40013800 	.word	0x40013800
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	40004400 	.word	0x40004400
 8006ffc:	40004800 	.word	0x40004800
 8007000:	40004c00 	.word	0x40004c00
 8007004:	40005000 	.word	0x40005000
 8007008:	2310      	movs	r3, #16
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4aae      	ldr	r2, [pc, #696]	; (80072cc <UART_SetConfig+0x5bc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	f040 8097 	bne.w	8007148 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800701a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800701e:	2b08      	cmp	r3, #8
 8007020:	d823      	bhi.n	800706a <UART_SetConfig+0x35a>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x318>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	0800704d 	.word	0x0800704d
 800702c:	0800706b 	.word	0x0800706b
 8007030:	08007055 	.word	0x08007055
 8007034:	0800706b 	.word	0x0800706b
 8007038:	0800705b 	.word	0x0800705b
 800703c:	0800706b 	.word	0x0800706b
 8007040:	0800706b 	.word	0x0800706b
 8007044:	0800706b 	.word	0x0800706b
 8007048:	08007063 	.word	0x08007063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fd fcd6 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8007050:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007052:	e010      	b.n	8007076 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007054:	4b9e      	ldr	r3, [pc, #632]	; (80072d0 <UART_SetConfig+0x5c0>)
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007058:	e00d      	b.n	8007076 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705a:	f7fd fc37 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 800705e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007060:	e009      	b.n	8007076 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007068:	e005      	b.n	8007076 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8130 	beq.w	80072de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	4a94      	ldr	r2, [pc, #592]	; (80072d4 <UART_SetConfig+0x5c4>)
 8007084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007088:	461a      	mov	r2, r3
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007090:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	4413      	add	r3, r2
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d305      	bcc.n	80070ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d903      	bls.n	80070b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070b4:	e113      	b.n	80072de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	2200      	movs	r2, #0
 80070ba:	60bb      	str	r3, [r7, #8]
 80070bc:	60fa      	str	r2, [r7, #12]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	4a84      	ldr	r2, [pc, #528]	; (80072d4 <UART_SetConfig+0x5c4>)
 80070c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2200      	movs	r2, #0
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070d8:	f7f9 fd7e 	bl	8000bd8 <__aeabi_uldivmod>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4610      	mov	r0, r2
 80070e2:	4619      	mov	r1, r3
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	020b      	lsls	r3, r1, #8
 80070ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070f2:	0202      	lsls	r2, r0, #8
 80070f4:	6979      	ldr	r1, [r7, #20]
 80070f6:	6849      	ldr	r1, [r1, #4]
 80070f8:	0849      	lsrs	r1, r1, #1
 80070fa:	2000      	movs	r0, #0
 80070fc:	460c      	mov	r4, r1
 80070fe:	4605      	mov	r5, r0
 8007100:	eb12 0804 	adds.w	r8, r2, r4
 8007104:	eb43 0905 	adc.w	r9, r3, r5
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	469a      	mov	sl, r3
 8007110:	4693      	mov	fp, r2
 8007112:	4652      	mov	r2, sl
 8007114:	465b      	mov	r3, fp
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 fd5d 	bl	8000bd8 <__aeabi_uldivmod>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4613      	mov	r3, r2
 8007124:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800712c:	d308      	bcc.n	8007140 <UART_SetConfig+0x430>
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007134:	d204      	bcs.n	8007140 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6a3a      	ldr	r2, [r7, #32]
 800713c:	60da      	str	r2, [r3, #12]
 800713e:	e0ce      	b.n	80072de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007146:	e0ca      	b.n	80072de <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007150:	d166      	bne.n	8007220 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007152:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007156:	2b08      	cmp	r3, #8
 8007158:	d827      	bhi.n	80071aa <UART_SetConfig+0x49a>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x450>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007185 	.word	0x08007185
 8007164:	0800718d 	.word	0x0800718d
 8007168:	08007195 	.word	0x08007195
 800716c:	080071ab 	.word	0x080071ab
 8007170:	0800719b 	.word	0x0800719b
 8007174:	080071ab 	.word	0x080071ab
 8007178:	080071ab 	.word	0x080071ab
 800717c:	080071ab 	.word	0x080071ab
 8007180:	080071a3 	.word	0x080071a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007184:	f7fd fc3a 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8007188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800718a:	e014      	b.n	80071b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800718c:	f7fd fc4c 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 8007190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007192:	e010      	b.n	80071b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007194:	4b4e      	ldr	r3, [pc, #312]	; (80072d0 <UART_SetConfig+0x5c0>)
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007198:	e00d      	b.n	80071b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719a:	f7fd fb97 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 800719e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071a0:	e009      	b.n	80071b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071a8:	e005      	b.n	80071b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8090 	beq.w	80072de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	4a44      	ldr	r2, [pc, #272]	; (80072d4 <UART_SetConfig+0x5c4>)
 80071c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d0:	005a      	lsls	r2, r3, #1
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	441a      	add	r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2b0f      	cmp	r3, #15
 80071e8:	d916      	bls.n	8007218 <UART_SetConfig+0x508>
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f0:	d212      	bcs.n	8007218 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f023 030f 	bic.w	r3, r3, #15
 80071fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	b29a      	uxth	r2, r3
 8007208:	8bfb      	ldrh	r3, [r7, #30]
 800720a:	4313      	orrs	r3, r2
 800720c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	8bfa      	ldrh	r2, [r7, #30]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	e062      	b.n	80072de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800721e:	e05e      	b.n	80072de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007224:	2b08      	cmp	r3, #8
 8007226:	d828      	bhi.n	800727a <UART_SetConfig+0x56a>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x520>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007255 	.word	0x08007255
 8007234:	0800725d 	.word	0x0800725d
 8007238:	08007265 	.word	0x08007265
 800723c:	0800727b 	.word	0x0800727b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800727b 	.word	0x0800727b
 8007248:	0800727b 	.word	0x0800727b
 800724c:	0800727b 	.word	0x0800727b
 8007250:	08007273 	.word	0x08007273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fd fbd2 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8007258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800725a:	e014      	b.n	8007286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800725c:	f7fd fbe4 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 8007260:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007262:	e010      	b.n	8007286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007264:	4b1a      	ldr	r3, [pc, #104]	; (80072d0 <UART_SetConfig+0x5c0>)
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007268:	e00d      	b.n	8007286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800726a:	f7fd fb2f 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 800726e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007270:	e009      	b.n	8007286 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007278:	e005      	b.n	8007286 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007284:	bf00      	nop
    }

    if (pclk != 0U)
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d028      	beq.n	80072de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <UART_SetConfig+0x5c4>)
 8007292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007296:	461a      	mov	r2, r3
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	fbb3 f2f2 	udiv	r2, r3, r2
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	441a      	add	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	2b0f      	cmp	r3, #15
 80072b4:	d910      	bls.n	80072d8 <UART_SetConfig+0x5c8>
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072bc:	d20c      	bcs.n	80072d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60da      	str	r2, [r3, #12]
 80072c8:	e009      	b.n	80072de <UART_SetConfig+0x5ce>
 80072ca:	bf00      	nop
 80072cc:	40008000 	.word	0x40008000
 80072d0:	00f42400 	.word	0x00f42400
 80072d4:	0800ebc0 	.word	0x0800ebc0
      }
      else
      {
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2200      	movs	r2, #0
 80072f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80072fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3730      	adds	r7, #48	; 0x30
 8007302:	46bd      	mov	sp, r7
 8007304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01a      	beq.n	800741e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007406:	d10a      	bne.n	800741e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af02      	add	r7, sp, #8
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800745c:	f7fa fd3a 	bl	8001ed4 <HAL_GetTick>
 8007460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b08      	cmp	r3, #8
 800746e:	d10e      	bne.n	800748e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f82f 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e025      	b.n	80074da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b04      	cmp	r3, #4
 800749a:	d10e      	bne.n	80074ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800749c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f819 	bl	80074e2 <UART_WaitOnFlagUntilTimeout>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e00f      	b.n	80074da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b09c      	sub	sp, #112	; 0x70
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f2:	e0a9      	b.n	8007648 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	f000 80a5 	beq.w	8007648 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fe:	f7fa fce9 	bl	8001ed4 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800750a:	429a      	cmp	r2, r3
 800750c:	d302      	bcc.n	8007514 <UART_WaitOnFlagUntilTimeout+0x32>
 800750e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007510:	2b00      	cmp	r3, #0
 8007512:	d140      	bne.n	8007596 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007528:	667b      	str	r3, [r7, #100]	; 0x64
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007534:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007538:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e6      	bne.n	8007514 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	663b      	str	r3, [r7, #96]	; 0x60
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3308      	adds	r3, #8
 8007564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007566:	64ba      	str	r2, [r7, #72]	; 0x48
 8007568:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800756c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e069      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d051      	beq.n	8007648 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b2:	d149      	bne.n	8007648 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
 80075de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	66bb      	str	r3, [r7, #104]	; 0x68
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3308      	adds	r3, #8
 800760e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007610:	623a      	str	r2, [r7, #32]
 8007612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	69f9      	ldr	r1, [r7, #28]
 8007616:	6a3a      	ldr	r2, [r7, #32]
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	61bb      	str	r3, [r7, #24]
   return(result);
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e5      	bne.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e010      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	69da      	ldr	r2, [r3, #28]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4013      	ands	r3, r2
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	429a      	cmp	r2, r3
 8007656:	bf0c      	ite	eq
 8007658:	2301      	moveq	r3, #1
 800765a:	2300      	movne	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	429a      	cmp	r2, r3
 8007664:	f43f af46 	beq.w	80074f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3770      	adds	r7, #112	; 0x70
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_UARTEx_DisableFifoMode+0x16>
 8007684:	2302      	movs	r3, #2
 8007686:	e027      	b.n	80076d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2224      	movs	r2, #36	; 0x24
 8007694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0201 	bic.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e02d      	b.n	8007758 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2224      	movs	r2, #36	; 0x24
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0201 	bic.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f84f 	bl	80077dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007774:	2302      	movs	r3, #2
 8007776:	e02d      	b.n	80077d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2224      	movs	r2, #36	; 0x24
 8007784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0201 	bic.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f811 	bl	80077dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d108      	bne.n	80077fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077fc:	e031      	b.n	8007862 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077fe:	2308      	movs	r3, #8
 8007800:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007802:	2308      	movs	r3, #8
 8007804:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	0e5b      	lsrs	r3, r3, #25
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	0f5b      	lsrs	r3, r3, #29
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	7b3a      	ldrb	r2, [r7, #12]
 800782a:	4911      	ldr	r1, [pc, #68]	; (8007870 <UARTEx_SetNbDataToProcess+0x94>)
 800782c:	5c8a      	ldrb	r2, [r1, r2]
 800782e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007832:	7b3a      	ldrb	r2, [r7, #12]
 8007834:	490f      	ldr	r1, [pc, #60]	; (8007874 <UARTEx_SetNbDataToProcess+0x98>)
 8007836:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007838:	fb93 f3f2 	sdiv	r3, r3, r2
 800783c:	b29a      	uxth	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	7b7a      	ldrb	r2, [r7, #13]
 8007848:	4909      	ldr	r1, [pc, #36]	; (8007870 <UARTEx_SetNbDataToProcess+0x94>)
 800784a:	5c8a      	ldrb	r2, [r1, r2]
 800784c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007850:	7b7a      	ldrb	r2, [r7, #13]
 8007852:	4908      	ldr	r1, [pc, #32]	; (8007874 <UARTEx_SetNbDataToProcess+0x98>)
 8007854:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007856:	fb93 f3f2 	sdiv	r3, r3, r2
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	0800ebd8 	.word	0x0800ebd8
 8007874:	0800ebe0 	.word	0x0800ebe0

08007878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007878:	b084      	sub	sp, #16
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	f107 001c 	add.w	r0, r7, #28
 8007886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa70 	bl	8007d7c <USB_CoreReset>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80078a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38
 80078b2:	e005      	b.n	80078c0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078cc:	b004      	add	sp, #16
 80078ce:	4770      	bx	lr

080078d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f023 0201 	bic.w	r2, r3, #1
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d115      	bne.n	8007940 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007920:	2001      	movs	r0, #1
 8007922:	f7fa fae3 	bl	8001eec <HAL_Delay>
      ms++;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa17 	bl	8007d60 <USB_GetMode>
 8007932:	4603      	mov	r3, r0
 8007934:	2b01      	cmp	r3, #1
 8007936:	d01e      	beq.n	8007976 <USB_SetCurrentMode+0x84>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b31      	cmp	r3, #49	; 0x31
 800793c:	d9f0      	bls.n	8007920 <USB_SetCurrentMode+0x2e>
 800793e:	e01a      	b.n	8007976 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d115      	bne.n	8007972 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007952:	2001      	movs	r0, #1
 8007954:	f7fa faca 	bl	8001eec <HAL_Delay>
      ms++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9fe 	bl	8007d60 <USB_GetMode>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <USB_SetCurrentMode+0x84>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b31      	cmp	r3, #49	; 0x31
 800796e:	d9f0      	bls.n	8007952 <USB_SetCurrentMode+0x60>
 8007970:	e001      	b.n	8007976 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e005      	b.n	8007982 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b32      	cmp	r3, #50	; 0x32
 800797a:	d101      	bne.n	8007980 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800798c:	b084      	sub	sp, #16
 800798e:	b580      	push	{r7, lr}
 8007990:	b086      	sub	sp, #24
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800799a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079a6:	2300      	movs	r3, #0
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e009      	b.n	80079c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	3340      	adds	r3, #64	; 0x40
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	2200      	movs	r2, #0
 80079b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	3301      	adds	r3, #1
 80079be:	613b      	str	r3, [r7, #16]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b0e      	cmp	r3, #14
 80079c4:	d9f2      	bls.n	80079ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d11c      	bne.n	8007a06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079da:	f043 0302 	orr.w	r3, r3, #2
 80079de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	e005      	b.n	8007a12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a24:	4619      	mov	r1, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	680b      	ldr	r3, [r1, #0]
 8007a30:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a32:	2103      	movs	r1, #3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f959 	bl	8007cec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a3a:	2110      	movs	r1, #16
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8f1 	bl	8007c24 <USB_FlushTxFifo>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f91d 	bl	8007c8c <USB_FlushRxFifo>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	461a      	mov	r2, r3
 8007a64:	2300      	movs	r3, #0
 8007a66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2300      	movs	r3, #0
 8007a72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e043      	b.n	8007b0e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a9c:	d118      	bne.n	8007ad0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	e013      	b.n	8007ae2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e008      	b.n	8007ae2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	461a      	mov	r2, r3
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	461a      	mov	r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	461a      	mov	r2, r3
 8007b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d3b7      	bcc.n	8007a86 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b16:	2300      	movs	r3, #0
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	e043      	b.n	8007ba4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b32:	d118      	bne.n	8007b66 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b46:	461a      	mov	r2, r3
 8007b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	e013      	b.n	8007b78 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e008      	b.n	8007b78 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b72:	461a      	mov	r2, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	461a      	mov	r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b96:	461a      	mov	r2, r3
 8007b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d3b7      	bcc.n	8007b1c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007bcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	f043 0210 	orr.w	r2, r3, #16
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <USB_DevInit+0x294>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f043 0208 	orr.w	r2, r3, #8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d107      	bne.n	8007c0e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c06:	f043 0304 	orr.w	r3, r3, #4
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c1a:	b004      	add	sp, #16
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	803c3800 	.word	0x803c3800

08007c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4a13      	ldr	r2, [pc, #76]	; (8007c88 <USB_FlushTxFifo+0x64>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d901      	bls.n	8007c44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e01b      	b.n	8007c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	daf2      	bge.n	8007c32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	019b      	lsls	r3, r3, #6
 8007c54:	f043 0220 	orr.w	r2, r3, #32
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <USB_FlushTxFifo+0x64>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e006      	b.n	8007c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d0f0      	beq.n	8007c5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	00030d40 	.word	0x00030d40

08007c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a11      	ldr	r2, [pc, #68]	; (8007ce8 <USB_FlushRxFifo+0x5c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d901      	bls.n	8007caa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e018      	b.n	8007cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	daf2      	bge.n	8007c98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2210      	movs	r2, #16
 8007cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <USB_FlushRxFifo+0x5c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d901      	bls.n	8007cce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e006      	b.n	8007cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	2b10      	cmp	r3, #16
 8007cd8:	d0f0      	beq.n	8007cbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	00030d40 	.word	0x00030d40

08007cec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d38:	f023 0303 	bic.w	r3, r3, #3
 8007d3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4c:	f043 0302 	orr.w	r3, r3, #2
 8007d50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <USB_CoreReset+0x64>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d901      	bls.n	8007d9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e01b      	b.n	8007dd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	daf2      	bge.n	8007d88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f043 0201 	orr.w	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <USB_CoreReset+0x64>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d901      	bls.n	8007dc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e006      	b.n	8007dd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d0f0      	beq.n	8007db2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	00030d40 	.word	0x00030d40

08007de4 <__NVIC_SetPriority>:
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	db0a      	blt.n	8007e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	490c      	ldr	r1, [pc, #48]	; (8007e30 <__NVIC_SetPriority+0x4c>)
 8007dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e02:	0112      	lsls	r2, r2, #4
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	440b      	add	r3, r1
 8007e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e0c:	e00a      	b.n	8007e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	4908      	ldr	r1, [pc, #32]	; (8007e34 <__NVIC_SetPriority+0x50>)
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	3b04      	subs	r3, #4
 8007e1c:	0112      	lsls	r2, r2, #4
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	440b      	add	r3, r1
 8007e22:	761a      	strb	r2, [r3, #24]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	e000e100 	.word	0xe000e100
 8007e34:	e000ed00 	.word	0xe000ed00

08007e38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <SysTick_Handler+0x1c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e40:	f001 fd28 	bl	8009894 <xTaskGetSchedulerState>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d001      	beq.n	8007e4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e4a:	f002 fb0d 	bl	800a468 <xPortSysTickHandler>
  }
}
 8007e4e:	bf00      	nop
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	e000e010 	.word	0xe000e010

08007e58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f06f 0004 	mvn.w	r0, #4
 8007e62:	f7ff ffbf 	bl	8007de4 <__NVIC_SetPriority>
#endif
}
 8007e66:	bf00      	nop
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e72:	f3ef 8305 	mrs	r3, IPSR
 8007e76:	603b      	str	r3, [r7, #0]
  return(result);
 8007e78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e7e:	f06f 0305 	mvn.w	r3, #5
 8007e82:	607b      	str	r3, [r7, #4]
 8007e84:	e00c      	b.n	8007ea0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e86:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <osKernelInitialize+0x44>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e8e:	4b08      	ldr	r3, [pc, #32]	; (8007eb0 <osKernelInitialize+0x44>)
 8007e90:	2201      	movs	r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	607b      	str	r3, [r7, #4]
 8007e98:	e002      	b.n	8007ea0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ea0:	687b      	ldr	r3, [r7, #4]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000910 	.word	0x20000910

08007eb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eba:	f3ef 8305 	mrs	r3, IPSR
 8007ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8007ec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ec6:	f06f 0305 	mvn.w	r3, #5
 8007eca:	607b      	str	r3, [r7, #4]
 8007ecc:	e010      	b.n	8007ef0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ece:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <osKernelStart+0x48>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d109      	bne.n	8007eea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ed6:	f7ff ffbf 	bl	8007e58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007eda:	4b08      	ldr	r3, [pc, #32]	; (8007efc <osKernelStart+0x48>)
 8007edc:	2202      	movs	r2, #2
 8007ede:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ee0:	f001 f87c 	bl	8008fdc <vTaskStartScheduler>
      stat = osOK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	607b      	str	r3, [r7, #4]
 8007ee8:	e002      	b.n	8007ef0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
 8007eee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ef0:	687b      	ldr	r3, [r7, #4]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000910 	.word	0x20000910

08007f00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08e      	sub	sp, #56	; 0x38
 8007f04:	af04      	add	r7, sp, #16
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f10:	f3ef 8305 	mrs	r3, IPSR
 8007f14:	617b      	str	r3, [r7, #20]
  return(result);
 8007f16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d17e      	bne.n	800801a <osThreadNew+0x11a>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d07b      	beq.n	800801a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f22:	2380      	movs	r3, #128	; 0x80
 8007f24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f26:	2318      	movs	r3, #24
 8007f28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d045      	beq.n	8007fc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <osThreadNew+0x48>
        name = attr->name;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d008      	beq.n	8007f6e <osThreadNew+0x6e>
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b38      	cmp	r3, #56	; 0x38
 8007f60:	d805      	bhi.n	8007f6e <osThreadNew+0x6e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <osThreadNew+0x72>
        return (NULL);
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e054      	b.n	800801c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	089b      	lsrs	r3, r3, #2
 8007f80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <osThreadNew+0xa8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2bbb      	cmp	r3, #187	; 0xbb
 8007f90:	d90a      	bls.n	8007fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <osThreadNew+0xa8>
        mem = 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	e010      	b.n	8007fca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10c      	bne.n	8007fca <osThreadNew+0xca>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d108      	bne.n	8007fca <osThreadNew+0xca>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <osThreadNew+0xca>
          mem = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61bb      	str	r3, [r7, #24]
 8007fc4:	e001      	b.n	8007fca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d110      	bne.n	8007ff2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007fd8:	9202      	str	r2, [sp, #8]
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fe0c 	bl	8008c04 <xTaskCreateStatic>
 8007fec:	4603      	mov	r3, r0
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	e013      	b.n	800801a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d110      	bne.n	800801a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	f107 0310 	add.w	r3, r7, #16
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fe57 	bl	8008cbe <xTaskCreate>
 8008010:	4603      	mov	r3, r0
 8008012:	2b01      	cmp	r3, #1
 8008014:	d001      	beq.n	800801a <osThreadNew+0x11a>
            hTask = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800801a:	693b      	ldr	r3, [r7, #16]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3728      	adds	r7, #40	; 0x28
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800802c:	f3ef 8305 	mrs	r3, IPSR
 8008030:	60bb      	str	r3, [r7, #8]
  return(result);
 8008032:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <osDelay+0x1c>
    stat = osErrorISR;
 8008038:	f06f 0305 	mvn.w	r3, #5
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	e007      	b.n	8008050 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d002      	beq.n	8008050 <osDelay+0x2c>
      vTaskDelay(ticks);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 ff92 	bl	8008f74 <vTaskDelay>
    }
  }

  return (stat);
 8008050:	68fb      	ldr	r3, [r7, #12]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a07      	ldr	r2, [pc, #28]	; (8008088 <vApplicationGetIdleTaskMemory+0x2c>)
 800806c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	4a06      	ldr	r2, [pc, #24]	; (800808c <vApplicationGetIdleTaskMemory+0x30>)
 8008072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2280      	movs	r2, #128	; 0x80
 8008078:	601a      	str	r2, [r3, #0]
}
 800807a:	bf00      	nop
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	20000914 	.word	0x20000914
 800808c:	200009d0 	.word	0x200009d0

08008090 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a07      	ldr	r2, [pc, #28]	; (80080bc <vApplicationGetTimerTaskMemory+0x2c>)
 80080a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4a06      	ldr	r2, [pc, #24]	; (80080c0 <vApplicationGetTimerTaskMemory+0x30>)
 80080a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20000bd0 	.word	0x20000bd0
 80080c0:	20000c8c 	.word	0x20000c8c

080080c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f103 0208 	add.w	r2, r3, #8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f04f 32ff 	mov.w	r2, #4294967295
 80080dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f103 0208 	add.w	r2, r3, #8
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f103 0208 	add.w	r2, r3, #8
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
}
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817c:	d103      	bne.n	8008186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e00c      	b.n	80081a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3308      	adds	r3, #8
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e002      	b.n	8008194 <vListInsert+0x2e>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	429a      	cmp	r2, r3
 800819e:	d2f6      	bcs.n	800818e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	601a      	str	r2, [r3, #0]
}
 80081cc:	bf00      	nop
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6892      	ldr	r2, [r2, #8]
 80081ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6852      	ldr	r2, [r2, #4]
 80081f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d103      	bne.n	800820c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	1e5a      	subs	r2, r3, #1
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008256:	f002 f875 	bl	800a344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008266:	fb01 f303 	mul.w	r3, r1, r3
 800826a:	441a      	add	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008286:	3b01      	subs	r3, #1
 8008288:	68f9      	ldr	r1, [r7, #12]
 800828a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	441a      	add	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	22ff      	movs	r2, #255	; 0xff
 800829a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d114      	bne.n	80082d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01a      	beq.n	80082ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3310      	adds	r3, #16
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 f929 	bl	8009510 <xTaskRemoveFromEventList>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d012      	beq.n	80082ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <xQueueGenericReset+0xcc>)
 80082c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	e009      	b.n	80082ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3310      	adds	r3, #16
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff fef2 	bl	80080c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3324      	adds	r3, #36	; 0x24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff feed 	bl	80080c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082ea:	f002 f85b 	bl	800a3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082ee:	2301      	movs	r3, #1
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08e      	sub	sp, #56	; 0x38
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <xQueueGenericCreateStatic+0x52>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <xQueueGenericCreateStatic+0x56>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueGenericCreateStatic+0x58>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	623b      	str	r3, [r7, #32]
}
 800836a:	bf00      	nop
 800836c:	e7fe      	b.n	800836c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <xQueueGenericCreateStatic+0x7e>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <xQueueGenericCreateStatic+0x82>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueGenericCreateStatic+0x84>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61fb      	str	r3, [r7, #28]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800839a:	2350      	movs	r3, #80	; 0x50
 800839c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b50      	cmp	r3, #80	; 0x50
 80083a2:	d00a      	beq.n	80083ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61bb      	str	r3, [r7, #24]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00d      	beq.n	80083e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	4613      	mov	r3, r2
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 f805 	bl	80083ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3730      	adds	r7, #48	; 0x30
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d103      	bne.n	8008408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e002      	b.n	800840e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800841a:	2101      	movs	r1, #1
 800841c:	69b8      	ldr	r0, [r7, #24]
 800841e:	f7ff ff05 	bl	800822c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	78fa      	ldrb	r2, [r7, #3]
 8008426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	; 0x38
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008442:	2300      	movs	r3, #0
 8008444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <xQueueGenericSend+0x32>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d103      	bne.n	8008474 <xQueueGenericSend+0x40>
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <xQueueGenericSend+0x44>
 8008474:	2301      	movs	r3, #1
 8008476:	e000      	b.n	800847a <xQueueGenericSend+0x46>
 8008478:	2300      	movs	r3, #0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <xQueueGenericSend+0x60>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008490:	bf00      	nop
 8008492:	e7fe      	b.n	8008492 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d103      	bne.n	80084a2 <xQueueGenericSend+0x6e>
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d101      	bne.n	80084a6 <xQueueGenericSend+0x72>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <xQueueGenericSend+0x74>
 80084a6:	2300      	movs	r3, #0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	623b      	str	r3, [r7, #32]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084c2:	f001 f9e7 	bl	8009894 <xTaskGetSchedulerState>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <xQueueGenericSend+0x9e>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <xQueueGenericSend+0xa2>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueGenericSend+0xa4>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61fb      	str	r3, [r7, #28]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084f2:	f001 ff27 	bl	800a344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	429a      	cmp	r2, r3
 8008500:	d302      	bcc.n	8008508 <xQueueGenericSend+0xd4>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d129      	bne.n	800855c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800850e:	f000 fa0b 	bl	8008928 <prvCopyDataToQueue>
 8008512:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	d010      	beq.n	800853e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	3324      	adds	r3, #36	; 0x24
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fff5 	bl	8009510 <xTaskRemoveFromEventList>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d013      	beq.n	8008554 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800852c:	4b3f      	ldr	r3, [pc, #252]	; (800862c <xQueueGenericSend+0x1f8>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	e00a      	b.n	8008554 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008544:	4b39      	ldr	r3, [pc, #228]	; (800862c <xQueueGenericSend+0x1f8>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008554:	f001 ff26 	bl	800a3a4 <vPortExitCritical>
				return pdPASS;
 8008558:	2301      	movs	r3, #1
 800855a:	e063      	b.n	8008624 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d103      	bne.n	800856a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008562:	f001 ff1f 	bl	800a3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008566:	2300      	movs	r3, #0
 8008568:	e05c      	b.n	8008624 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800856a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856c:	2b00      	cmp	r3, #0
 800856e:	d106      	bne.n	800857e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008570:	f107 0314 	add.w	r3, r7, #20
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f82f 	bl	80095d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800857a:	2301      	movs	r3, #1
 800857c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800857e:	f001 ff11 	bl	800a3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008582:	f000 fd9b 	bl	80090bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008586:	f001 fedd 	bl	800a344 <vPortEnterCritical>
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008590:	b25b      	sxtb	r3, r3
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008596:	d103      	bne.n	80085a0 <xQueueGenericSend+0x16c>
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ac:	d103      	bne.n	80085b6 <xQueueGenericSend+0x182>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085b6:	f001 fef5 	bl	800a3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ba:	1d3a      	adds	r2, r7, #4
 80085bc:	f107 0314 	add.w	r3, r7, #20
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 f81e 	bl	8009604 <xTaskCheckForTimeOut>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d124      	bne.n	8008618 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085d0:	f000 faa2 	bl	8008b18 <prvIsQueueFull>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d018      	beq.n	800860c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	3310      	adds	r3, #16
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 ff44 	bl	8009470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ea:	f000 fa2d 	bl	8008a48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085ee:	f000 fd73 	bl	80090d8 <xTaskResumeAll>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f47f af7c 	bne.w	80084f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <xQueueGenericSend+0x1f8>)
 80085fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	e772      	b.n	80084f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800860c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800860e:	f000 fa1b 	bl	8008a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008612:	f000 fd61 	bl	80090d8 <xTaskResumeAll>
 8008616:	e76c      	b.n	80084f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800861a:	f000 fa15 	bl	8008a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800861e:	f000 fd5b 	bl	80090d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008622:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008624:	4618      	mov	r0, r3
 8008626:	3738      	adds	r7, #56	; 0x38
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	e000ed04 	.word	0xe000ed04

08008630 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b090      	sub	sp, #64	; 0x40
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800865a:	bf00      	nop
 800865c:	e7fe      	b.n	800865c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d103      	bne.n	800866c <xQueueGenericSendFromISR+0x3c>
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <xQueueGenericSendFromISR+0x40>
 800866c:	2301      	movs	r3, #1
 800866e:	e000      	b.n	8008672 <xQueueGenericSendFromISR+0x42>
 8008670:	2300      	movs	r3, #0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008688:	bf00      	nop
 800868a:	e7fe      	b.n	800868a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d103      	bne.n	800869a <xQueueGenericSendFromISR+0x6a>
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <xQueueGenericSendFromISR+0x6e>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGenericSendFromISR+0x70>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	623b      	str	r3, [r7, #32]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086ba:	f001 ff25 	bl	800a508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086be:	f3ef 8211 	mrs	r2, BASEPRI
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	61fa      	str	r2, [r7, #28]
 80086d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d302      	bcc.n	80086ec <xQueueGenericSendFromISR+0xbc>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d12f      	bne.n	800874c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008702:	f000 f911 	bl	8008928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008706:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d112      	bne.n	8008736 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d016      	beq.n	8008746 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	3324      	adds	r3, #36	; 0x24
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fef7 	bl	8009510 <xTaskRemoveFromEventList>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00e      	beq.n	8008746 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e007      	b.n	8008746 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800873a:	3301      	adds	r3, #1
 800873c:	b2db      	uxtb	r3, r3
 800873e:	b25a      	sxtb	r2, r3
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008746:	2301      	movs	r3, #1
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800874a:	e001      	b.n	8008750 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800874c:	2300      	movs	r3, #0
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008752:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800875a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800875c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800875e:	4618      	mov	r0, r3
 8008760:	3740      	adds	r7, #64	; 0x40
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08c      	sub	sp, #48	; 0x30
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008774:	2300      	movs	r3, #0
 8008776:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <xQueueReceive+0x30>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	623b      	str	r3, [r7, #32]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d103      	bne.n	80087a6 <xQueueReceive+0x3e>
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <xQueueReceive+0x42>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <xQueueReceive+0x44>
 80087aa:	2300      	movs	r3, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10a      	bne.n	80087c6 <xQueueReceive+0x5e>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	61fb      	str	r3, [r7, #28]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087c6:	f001 f865 	bl	8009894 <xTaskGetSchedulerState>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <xQueueReceive+0x6e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <xQueueReceive+0x72>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <xQueueReceive+0x74>
 80087da:	2300      	movs	r3, #0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <xQueueReceive+0x8e>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	61bb      	str	r3, [r7, #24]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087f6:	f001 fda5 	bl	800a344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	2b00      	cmp	r3, #0
 8008804:	d01f      	beq.n	8008846 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800880a:	f000 f8f7 	bl	80089fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	1e5a      	subs	r2, r3, #1
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00f      	beq.n	800883e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	3310      	adds	r3, #16
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fe74 	bl	8009510 <xTaskRemoveFromEventList>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800882e:	4b3d      	ldr	r3, [pc, #244]	; (8008924 <xQueueReceive+0x1bc>)
 8008830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800883e:	f001 fdb1 	bl	800a3a4 <vPortExitCritical>
				return pdPASS;
 8008842:	2301      	movs	r3, #1
 8008844:	e069      	b.n	800891a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d103      	bne.n	8008854 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800884c:	f001 fdaa 	bl	800a3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008850:	2300      	movs	r3, #0
 8008852:	e062      	b.n	800891a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800885a:	f107 0310 	add.w	r3, r7, #16
 800885e:	4618      	mov	r0, r3
 8008860:	f000 feba 	bl	80095d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008864:	2301      	movs	r3, #1
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008868:	f001 fd9c 	bl	800a3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800886c:	f000 fc26 	bl	80090bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008870:	f001 fd68 	bl	800a344 <vPortEnterCritical>
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800887a:	b25b      	sxtb	r3, r3
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d103      	bne.n	800888a <xQueueReceive+0x122>
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008890:	b25b      	sxtb	r3, r3
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d103      	bne.n	80088a0 <xQueueReceive+0x138>
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a0:	f001 fd80 	bl	800a3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088a4:	1d3a      	adds	r2, r7, #4
 80088a6:	f107 0310 	add.w	r3, r7, #16
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fea9 	bl	8009604 <xTaskCheckForTimeOut>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d123      	bne.n	8008900 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ba:	f000 f917 	bl	8008aec <prvIsQueueEmpty>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d017      	beq.n	80088f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	3324      	adds	r3, #36	; 0x24
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 fdcf 	bl	8009470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d4:	f000 f8b8 	bl	8008a48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088d8:	f000 fbfe 	bl	80090d8 <xTaskResumeAll>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d189      	bne.n	80087f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80088e2:	4b10      	ldr	r3, [pc, #64]	; (8008924 <xQueueReceive+0x1bc>)
 80088e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	e780      	b.n	80087f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f6:	f000 f8a7 	bl	8008a48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088fa:	f000 fbed 	bl	80090d8 <xTaskResumeAll>
 80088fe:	e77a      	b.n	80087f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008902:	f000 f8a1 	bl	8008a48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008906:	f000 fbe7 	bl	80090d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800890a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800890c:	f000 f8ee 	bl	8008aec <prvIsQueueEmpty>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	f43f af6f 	beq.w	80087f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800891a:	4618      	mov	r0, r3
 800891c:	3730      	adds	r7, #48	; 0x30
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	e000ed04 	.word	0xe000ed04

08008928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008934:	2300      	movs	r3, #0
 8008936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10d      	bne.n	8008962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d14d      	bne.n	80089ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 ffbc 	bl	80098d0 <xTaskPriorityDisinherit>
 8008958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	609a      	str	r2, [r3, #8]
 8008960:	e043      	b.n	80089ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d119      	bne.n	800899c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6858      	ldr	r0, [r3, #4]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	461a      	mov	r2, r3
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	f003 fa35 	bl	800bde2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008980:	441a      	add	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	429a      	cmp	r2, r3
 8008990:	d32b      	bcc.n	80089ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	605a      	str	r2, [r3, #4]
 800899a:	e026      	b.n	80089ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	68d8      	ldr	r0, [r3, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	461a      	mov	r2, r3
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	f003 fa1b 	bl	800bde2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	425b      	negs	r3, r3
 80089b6:	441a      	add	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d207      	bcs.n	80089d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d0:	425b      	negs	r3, r3
 80089d2:	441a      	add	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d105      	bne.n	80089ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089f2:	697b      	ldr	r3, [r7, #20]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d018      	beq.n	8008a40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	441a      	add	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d303      	bcc.n	8008a30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68d9      	ldr	r1, [r3, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6838      	ldr	r0, [r7, #0]
 8008a3c:	f003 f9d1 	bl	800bde2 <memcpy>
	}
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a50:	f001 fc78 	bl	800a344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a5c:	e011      	b.n	8008a82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d012      	beq.n	8008a8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3324      	adds	r3, #36	; 0x24
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fd50 	bl	8009510 <xTaskRemoveFromEventList>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a76:	f000 fe27 	bl	80096c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dce9      	bgt.n	8008a5e <prvUnlockQueue+0x16>
 8008a8a:	e000      	b.n	8008a8e <prvUnlockQueue+0x46>
					break;
 8008a8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	22ff      	movs	r2, #255	; 0xff
 8008a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a96:	f001 fc85 	bl	800a3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a9a:	f001 fc53 	bl	800a344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008aa6:	e011      	b.n	8008acc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d012      	beq.n	8008ad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3310      	adds	r3, #16
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fd2b 	bl	8009510 <xTaskRemoveFromEventList>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ac0:	f000 fe02 	bl	80096c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dce9      	bgt.n	8008aa8 <prvUnlockQueue+0x60>
 8008ad4:	e000      	b.n	8008ad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	22ff      	movs	r2, #255	; 0xff
 8008adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ae0:	f001 fc60 	bl	800a3a4 <vPortExitCritical>
}
 8008ae4:	bf00      	nop
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008af4:	f001 fc26 	bl	800a344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e001      	b.n	8008b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b0a:	f001 fc4b 	bl	800a3a4 <vPortExitCritical>

	return xReturn;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b20:	f001 fc10 	bl	800a344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d102      	bne.n	8008b36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b30:	2301      	movs	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e001      	b.n	8008b3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b3a:	f001 fc33 	bl	800a3a4 <vPortExitCritical>

	return xReturn;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	e014      	b.n	8008b82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b58:	4a0f      	ldr	r2, [pc, #60]	; (8008b98 <vQueueAddToRegistry+0x50>)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10b      	bne.n	8008b7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b64:	490c      	ldr	r1, [pc, #48]	; (8008b98 <vQueueAddToRegistry+0x50>)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b6e:	4a0a      	ldr	r2, [pc, #40]	; (8008b98 <vQueueAddToRegistry+0x50>)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	00db      	lsls	r3, r3, #3
 8008b74:	4413      	add	r3, r2
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b7a:	e006      	b.n	8008b8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b07      	cmp	r3, #7
 8008b86:	d9e7      	bls.n	8008b58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	2000108c 	.word	0x2000108c

08008b9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008bac:	f001 fbca 	bl	800a344 <vPortEnterCritical>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bb6:	b25b      	sxtb	r3, r3
 8008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbc:	d103      	bne.n	8008bc6 <vQueueWaitForMessageRestricted+0x2a>
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d103      	bne.n	8008bdc <vQueueWaitForMessageRestricted+0x40>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bdc:	f001 fbe2 	bl	800a3a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	3324      	adds	r3, #36	; 0x24
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fc61 	bl	80094b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bf6:	6978      	ldr	r0, [r7, #20]
 8008bf8:	f7ff ff26 	bl	8008a48 <prvUnlockQueue>
	}
 8008bfc:	bf00      	nop
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08e      	sub	sp, #56	; 0x38
 8008c08:	af04      	add	r7, sp, #16
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xTaskCreateStatic+0x46>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61fb      	str	r3, [r7, #28]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c4a:	23bc      	movs	r3, #188	; 0xbc
 8008c4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2bbc      	cmp	r3, #188	; 0xbc
 8008c52:	d00a      	beq.n	8008c6a <xTaskCreateStatic+0x66>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	61bb      	str	r3, [r7, #24]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d01e      	beq.n	8008cb0 <xTaskCreateStatic+0xac>
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01b      	beq.n	8008cb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9303      	str	r3, [sp, #12]
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	9302      	str	r3, [sp, #8]
 8008c92:	f107 0314 	add.w	r3, r7, #20
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f850 	bl	8008d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008caa:	f000 f8f3 	bl	8008e94 <prvAddNewTaskToReadyList>
 8008cae:	e001      	b.n	8008cb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cb4:	697b      	ldr	r3, [r7, #20]
	}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3728      	adds	r7, #40	; 0x28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b08c      	sub	sp, #48	; 0x30
 8008cc2:	af04      	add	r7, sp, #16
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	603b      	str	r3, [r7, #0]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fc58 	bl	800a588 <pvPortMalloc>
 8008cd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00e      	beq.n	8008cfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ce0:	20bc      	movs	r0, #188	; 0xbc
 8008ce2:	f001 fc51 	bl	800a588 <pvPortMalloc>
 8008ce6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8008cf4:	e005      	b.n	8008d02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cf6:	6978      	ldr	r0, [r7, #20]
 8008cf8:	f001 fd12 	bl	800a720 <vPortFree>
 8008cfc:	e001      	b.n	8008d02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d017      	beq.n	8008d38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d10:	88fa      	ldrh	r2, [r7, #6]
 8008d12:	2300      	movs	r3, #0
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f000 f80e 	bl	8008d48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d2c:	69f8      	ldr	r0, [r7, #28]
 8008d2e:	f000 f8b1 	bl	8008e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d32:	2301      	movs	r3, #1
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	e002      	b.n	8008d3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d38:	f04f 33ff 	mov.w	r3, #4294967295
 8008d3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	461a      	mov	r2, r3
 8008d60:	21a5      	movs	r1, #165	; 0xa5
 8008d62:	f003 f84c 	bl	800bdfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d70:	3b01      	subs	r3, #1
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	617b      	str	r3, [r7, #20]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01f      	beq.n	8008de6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da6:	2300      	movs	r3, #0
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	e012      	b.n	8008dd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	7819      	ldrb	r1, [r3, #0]
 8008db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	3334      	adds	r3, #52	; 0x34
 8008dbc:	460a      	mov	r2, r1
 8008dbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	2b0f      	cmp	r3, #15
 8008dd6:	d9e9      	bls.n	8008dac <prvInitialiseNewTask+0x64>
 8008dd8:	e000      	b.n	8008ddc <prvInitialiseNewTask+0x94>
			{
				break;
 8008dda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008de4:	e003      	b.n	8008dee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	2b37      	cmp	r3, #55	; 0x37
 8008df2:	d901      	bls.n	8008df8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008df4:	2337      	movs	r3, #55	; 0x37
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2200      	movs	r2, #0
 8008e08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff f978 	bl	8008104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	3318      	adds	r3, #24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff f973 	bl	8008104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	3354      	adds	r3, #84	; 0x54
 8008e48:	2260      	movs	r2, #96	; 0x60
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f002 ffd6 	bl	800bdfe <memset>
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <prvInitialiseNewTask+0x140>)
 8008e56:	659a      	str	r2, [r3, #88]	; 0x58
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	4a0c      	ldr	r2, [pc, #48]	; (8008e8c <prvInitialiseNewTask+0x144>)
 8008e5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	4a0b      	ldr	r2, [pc, #44]	; (8008e90 <prvInitialiseNewTask+0x148>)
 8008e62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	69b8      	ldr	r0, [r7, #24]
 8008e6a:	f001 f941 	bl	800a0f0 <pxPortInitialiseStack>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e80:	bf00      	nop
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	0800ec38 	.word	0x0800ec38
 8008e8c:	0800ec58 	.word	0x0800ec58
 8008e90:	0800ec18 	.word	0x0800ec18

08008e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e9c:	f001 fa52 	bl	800a344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ea0:	4b2d      	ldr	r3, [pc, #180]	; (8008f58 <prvAddNewTaskToReadyList+0xc4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a2c      	ldr	r2, [pc, #176]	; (8008f58 <prvAddNewTaskToReadyList+0xc4>)
 8008ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008eaa:	4b2c      	ldr	r3, [pc, #176]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d109      	bne.n	8008ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008eb8:	4b27      	ldr	r3, [pc, #156]	; (8008f58 <prvAddNewTaskToReadyList+0xc4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d110      	bne.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ec0:	f000 fc26 	bl	8009710 <prvInitialiseTaskLists>
 8008ec4:	e00d      	b.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ec6:	4b26      	ldr	r3, [pc, #152]	; (8008f60 <prvAddNewTaskToReadyList+0xcc>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ece:	4b23      	ldr	r3, [pc, #140]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d802      	bhi.n	8008ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008edc:	4a1f      	ldr	r2, [pc, #124]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ee2:	4b20      	ldr	r3, [pc, #128]	; (8008f64 <prvAddNewTaskToReadyList+0xd0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	4a1e      	ldr	r2, [pc, #120]	; (8008f64 <prvAddNewTaskToReadyList+0xd0>)
 8008eea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008eec:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <prvAddNewTaskToReadyList+0xd0>)
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <prvAddNewTaskToReadyList+0xd4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d903      	bls.n	8008f08 <prvAddNewTaskToReadyList+0x74>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4a18      	ldr	r2, [pc, #96]	; (8008f68 <prvAddNewTaskToReadyList+0xd4>)
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <prvAddNewTaskToReadyList+0xd8>)
 8008f16:	441a      	add	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7ff f8fd 	bl	800811e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f24:	f001 fa3e 	bl	800a3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f28:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <prvAddNewTaskToReadyList+0xcc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00e      	beq.n	8008f4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <prvAddNewTaskToReadyList+0xc8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d207      	bcs.n	8008f4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <prvAddNewTaskToReadyList+0xdc>)
 8008f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	200015a0 	.word	0x200015a0
 8008f5c:	200010cc 	.word	0x200010cc
 8008f60:	200015ac 	.word	0x200015ac
 8008f64:	200015bc 	.word	0x200015bc
 8008f68:	200015a8 	.word	0x200015a8
 8008f6c:	200010d0 	.word	0x200010d0
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d017      	beq.n	8008fb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f86:	4b13      	ldr	r3, [pc, #76]	; (8008fd4 <vTaskDelay+0x60>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <vTaskDelay+0x30>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	60bb      	str	r3, [r7, #8]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008fa4:	f000 f88a 	bl	80090bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fa8:	2100      	movs	r1, #0
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fcfe 	bl	80099ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fb0:	f000 f892 	bl	80090d8 <xTaskResumeAll>
 8008fb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d107      	bne.n	8008fcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <vTaskDelay+0x64>)
 8008fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	200015c8 	.word	0x200015c8
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08a      	sub	sp, #40	; 0x28
 8008fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fea:	463a      	mov	r2, r7
 8008fec:	1d39      	adds	r1, r7, #4
 8008fee:	f107 0308 	add.w	r3, r7, #8
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7ff f832 	bl	800805c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	9202      	str	r2, [sp, #8]
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	2300      	movs	r3, #0
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	2300      	movs	r3, #0
 8009008:	460a      	mov	r2, r1
 800900a:	4924      	ldr	r1, [pc, #144]	; (800909c <vTaskStartScheduler+0xc0>)
 800900c:	4824      	ldr	r0, [pc, #144]	; (80090a0 <vTaskStartScheduler+0xc4>)
 800900e:	f7ff fdf9 	bl	8008c04 <xTaskCreateStatic>
 8009012:	4603      	mov	r3, r0
 8009014:	4a23      	ldr	r2, [pc, #140]	; (80090a4 <vTaskStartScheduler+0xc8>)
 8009016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009018:	4b22      	ldr	r3, [pc, #136]	; (80090a4 <vTaskStartScheduler+0xc8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009020:	2301      	movs	r3, #1
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	e001      	b.n	800902a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d102      	bne.n	8009036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009030:	f000 fd10 	bl	8009a54 <xTimerCreateTimerTask>
 8009034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d11b      	bne.n	8009074 <vTaskStartScheduler+0x98>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	613b      	str	r3, [r7, #16]
}
 800904e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009050:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <vTaskStartScheduler+0xcc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3354      	adds	r3, #84	; 0x54
 8009056:	4a15      	ldr	r2, [pc, #84]	; (80090ac <vTaskStartScheduler+0xd0>)
 8009058:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800905a:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <vTaskStartScheduler+0xd4>)
 800905c:	f04f 32ff 	mov.w	r2, #4294967295
 8009060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <vTaskStartScheduler+0xd8>)
 8009064:	2201      	movs	r2, #1
 8009066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009068:	4b13      	ldr	r3, [pc, #76]	; (80090b8 <vTaskStartScheduler+0xdc>)
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800906e:	f001 f8c7 	bl	800a200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009072:	e00e      	b.n	8009092 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907a:	d10a      	bne.n	8009092 <vTaskStartScheduler+0xb6>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	60fb      	str	r3, [r7, #12]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <vTaskStartScheduler+0xb4>
}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	0800eaf4 	.word	0x0800eaf4
 80090a0:	080096e1 	.word	0x080096e1
 80090a4:	200015c4 	.word	0x200015c4
 80090a8:	200010cc 	.word	0x200010cc
 80090ac:	20000010 	.word	0x20000010
 80090b0:	200015c0 	.word	0x200015c0
 80090b4:	200015ac 	.word	0x200015ac
 80090b8:	200015a4 	.word	0x200015a4

080090bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <vTaskSuspendAll+0x18>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3301      	adds	r3, #1
 80090c6:	4a03      	ldr	r2, [pc, #12]	; (80090d4 <vTaskSuspendAll+0x18>)
 80090c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090ca:	bf00      	nop
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	200015c8 	.word	0x200015c8

080090d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090e6:	4b42      	ldr	r3, [pc, #264]	; (80091f0 <xTaskResumeAll+0x118>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <xTaskResumeAll+0x2c>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	603b      	str	r3, [r7, #0]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009104:	f001 f91e 	bl	800a344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009108:	4b39      	ldr	r3, [pc, #228]	; (80091f0 <xTaskResumeAll+0x118>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3b01      	subs	r3, #1
 800910e:	4a38      	ldr	r2, [pc, #224]	; (80091f0 <xTaskResumeAll+0x118>)
 8009110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009112:	4b37      	ldr	r3, [pc, #220]	; (80091f0 <xTaskResumeAll+0x118>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d162      	bne.n	80091e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800911a:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <xTaskResumeAll+0x11c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d05e      	beq.n	80091e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009122:	e02f      	b.n	8009184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009124:	4b34      	ldr	r3, [pc, #208]	; (80091f8 <xTaskResumeAll+0x120>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3318      	adds	r3, #24
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff f851 	bl	80081d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3304      	adds	r3, #4
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff f84c 	bl	80081d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4b2d      	ldr	r3, [pc, #180]	; (80091fc <xTaskResumeAll+0x124>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d903      	bls.n	8009154 <xTaskResumeAll+0x7c>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	4a2a      	ldr	r2, [pc, #168]	; (80091fc <xTaskResumeAll+0x124>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009158:	4613      	mov	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4a27      	ldr	r2, [pc, #156]	; (8009200 <xTaskResumeAll+0x128>)
 8009162:	441a      	add	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3304      	adds	r3, #4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe ffd7 	bl	800811e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	4b23      	ldr	r3, [pc, #140]	; (8009204 <xTaskResumeAll+0x12c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917a:	429a      	cmp	r2, r3
 800917c:	d302      	bcc.n	8009184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800917e:	4b22      	ldr	r3, [pc, #136]	; (8009208 <xTaskResumeAll+0x130>)
 8009180:	2201      	movs	r2, #1
 8009182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009184:	4b1c      	ldr	r3, [pc, #112]	; (80091f8 <xTaskResumeAll+0x120>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1cb      	bne.n	8009124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009192:	f000 fb5f 	bl	8009854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009196:	4b1d      	ldr	r3, [pc, #116]	; (800920c <xTaskResumeAll+0x134>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d010      	beq.n	80091c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091a2:	f000 f847 	bl	8009234 <xTaskIncrementTick>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80091ac:	4b16      	ldr	r3, [pc, #88]	; (8009208 <xTaskResumeAll+0x130>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f1      	bne.n	80091a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <xTaskResumeAll+0x134>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091c4:	4b10      	ldr	r3, [pc, #64]	; (8009208 <xTaskResumeAll+0x130>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d009      	beq.n	80091e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091d0:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <xTaskResumeAll+0x138>)
 80091d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091e0:	f001 f8e0 	bl	800a3a4 <vPortExitCritical>

	return xAlreadyYielded;
 80091e4:	68bb      	ldr	r3, [r7, #8]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	200015c8 	.word	0x200015c8
 80091f4:	200015a0 	.word	0x200015a0
 80091f8:	20001560 	.word	0x20001560
 80091fc:	200015a8 	.word	0x200015a8
 8009200:	200010d0 	.word	0x200010d0
 8009204:	200010cc 	.word	0x200010cc
 8009208:	200015b4 	.word	0x200015b4
 800920c:	200015b0 	.word	0x200015b0
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <xTaskGetTickCount+0x1c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009220:	687b      	ldr	r3, [r7, #4]
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	200015a4 	.word	0x200015a4

08009234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800923e:	4b4f      	ldr	r3, [pc, #316]	; (800937c <xTaskIncrementTick+0x148>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f040 808f 	bne.w	8009366 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009248:	4b4d      	ldr	r3, [pc, #308]	; (8009380 <xTaskIncrementTick+0x14c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3301      	adds	r3, #1
 800924e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009250:	4a4b      	ldr	r2, [pc, #300]	; (8009380 <xTaskIncrementTick+0x14c>)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d120      	bne.n	800929e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800925c:	4b49      	ldr	r3, [pc, #292]	; (8009384 <xTaskIncrementTick+0x150>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <xTaskIncrementTick+0x48>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	603b      	str	r3, [r7, #0]
}
 8009278:	bf00      	nop
 800927a:	e7fe      	b.n	800927a <xTaskIncrementTick+0x46>
 800927c:	4b41      	ldr	r3, [pc, #260]	; (8009384 <xTaskIncrementTick+0x150>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	4b41      	ldr	r3, [pc, #260]	; (8009388 <xTaskIncrementTick+0x154>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a3f      	ldr	r2, [pc, #252]	; (8009384 <xTaskIncrementTick+0x150>)
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	4a3f      	ldr	r2, [pc, #252]	; (8009388 <xTaskIncrementTick+0x154>)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	4b3e      	ldr	r3, [pc, #248]	; (800938c <xTaskIncrementTick+0x158>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4a3d      	ldr	r2, [pc, #244]	; (800938c <xTaskIncrementTick+0x158>)
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	f000 fadb 	bl	8009854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800929e:	4b3c      	ldr	r3, [pc, #240]	; (8009390 <xTaskIncrementTick+0x15c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d349      	bcc.n	800933c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a8:	4b36      	ldr	r3, [pc, #216]	; (8009384 <xTaskIncrementTick+0x150>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b2:	4b37      	ldr	r3, [pc, #220]	; (8009390 <xTaskIncrementTick+0x15c>)
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295
 80092b8:	601a      	str	r2, [r3, #0]
					break;
 80092ba:	e03f      	b.n	800933c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092bc:	4b31      	ldr	r3, [pc, #196]	; (8009384 <xTaskIncrementTick+0x150>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d203      	bcs.n	80092dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092d4:	4a2e      	ldr	r2, [pc, #184]	; (8009390 <xTaskIncrementTick+0x15c>)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092da:	e02f      	b.n	800933c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	3304      	adds	r3, #4
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe ff79 	bl	80081d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	3318      	adds	r3, #24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe ff70 	bl	80081d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	4b25      	ldr	r3, [pc, #148]	; (8009394 <xTaskIncrementTick+0x160>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d903      	bls.n	800930c <xTaskIncrementTick+0xd8>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	4a22      	ldr	r2, [pc, #136]	; (8009394 <xTaskIncrementTick+0x160>)
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4a1f      	ldr	r2, [pc, #124]	; (8009398 <xTaskIncrementTick+0x164>)
 800931a:	441a      	add	r2, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	3304      	adds	r3, #4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7fe fefb 	bl	800811e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <xTaskIncrementTick+0x168>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009332:	429a      	cmp	r2, r3
 8009334:	d3b8      	bcc.n	80092a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009336:	2301      	movs	r3, #1
 8009338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800933a:	e7b5      	b.n	80092a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800933c:	4b17      	ldr	r3, [pc, #92]	; (800939c <xTaskIncrementTick+0x168>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009342:	4915      	ldr	r1, [pc, #84]	; (8009398 <xTaskIncrementTick+0x164>)
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d901      	bls.n	8009358 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009354:	2301      	movs	r3, #1
 8009356:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009358:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <xTaskIncrementTick+0x16c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d007      	beq.n	8009370 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e004      	b.n	8009370 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009366:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <xTaskIncrementTick+0x170>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3301      	adds	r3, #1
 800936c:	4a0d      	ldr	r2, [pc, #52]	; (80093a4 <xTaskIncrementTick+0x170>)
 800936e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009370:	697b      	ldr	r3, [r7, #20]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	200015c8 	.word	0x200015c8
 8009380:	200015a4 	.word	0x200015a4
 8009384:	20001558 	.word	0x20001558
 8009388:	2000155c 	.word	0x2000155c
 800938c:	200015b8 	.word	0x200015b8
 8009390:	200015c0 	.word	0x200015c0
 8009394:	200015a8 	.word	0x200015a8
 8009398:	200010d0 	.word	0x200010d0
 800939c:	200010cc 	.word	0x200010cc
 80093a0:	200015b4 	.word	0x200015b4
 80093a4:	200015b0 	.word	0x200015b0

080093a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093ae:	4b2a      	ldr	r3, [pc, #168]	; (8009458 <vTaskSwitchContext+0xb0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093b6:	4b29      	ldr	r3, [pc, #164]	; (800945c <vTaskSwitchContext+0xb4>)
 80093b8:	2201      	movs	r2, #1
 80093ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093bc:	e046      	b.n	800944c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80093be:	4b27      	ldr	r3, [pc, #156]	; (800945c <vTaskSwitchContext+0xb4>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c4:	4b26      	ldr	r3, [pc, #152]	; (8009460 <vTaskSwitchContext+0xb8>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e010      	b.n	80093ee <vTaskSwitchContext+0x46>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	607b      	str	r3, [r7, #4]
}
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <vTaskSwitchContext+0x3e>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
 80093ee:	491d      	ldr	r1, [pc, #116]	; (8009464 <vTaskSwitchContext+0xbc>)
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0e4      	beq.n	80093cc <vTaskSwitchContext+0x24>
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4a15      	ldr	r2, [pc, #84]	; (8009464 <vTaskSwitchContext+0xbc>)
 800940e:	4413      	add	r3, r2
 8009410:	60bb      	str	r3, [r7, #8]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	605a      	str	r2, [r3, #4]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	3308      	adds	r3, #8
 8009424:	429a      	cmp	r2, r3
 8009426:	d104      	bne.n	8009432 <vTaskSwitchContext+0x8a>
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	4a0b      	ldr	r2, [pc, #44]	; (8009468 <vTaskSwitchContext+0xc0>)
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	4a08      	ldr	r2, [pc, #32]	; (8009460 <vTaskSwitchContext+0xb8>)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <vTaskSwitchContext+0xc0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3354      	adds	r3, #84	; 0x54
 8009448:	4a08      	ldr	r2, [pc, #32]	; (800946c <vTaskSwitchContext+0xc4>)
 800944a:	6013      	str	r3, [r2, #0]
}
 800944c:	bf00      	nop
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	200015c8 	.word	0x200015c8
 800945c:	200015b4 	.word	0x200015b4
 8009460:	200015a8 	.word	0x200015a8
 8009464:	200010d0 	.word	0x200010d0
 8009468:	200010cc 	.word	0x200010cc
 800946c:	20000010 	.word	0x20000010

08009470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	60fb      	str	r3, [r7, #12]
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009496:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <vTaskPlaceOnEventList+0x44>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3318      	adds	r3, #24
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7fe fe61 	bl	8008166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094a4:	2101      	movs	r1, #1
 80094a6:	6838      	ldr	r0, [r7, #0]
 80094a8:	f000 fa80 	bl	80099ac <prvAddCurrentTaskToDelayedList>
}
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	200010cc 	.word	0x200010cc

080094b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	617b      	str	r3, [r7, #20]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <vTaskPlaceOnEventListRestricted+0x54>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3318      	adds	r3, #24
 80094e6:	4619      	mov	r1, r3
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7fe fe18 	bl	800811e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80094f4:	f04f 33ff 	mov.w	r3, #4294967295
 80094f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	68b8      	ldr	r0, [r7, #8]
 80094fe:	f000 fa55 	bl	80099ac <prvAddCurrentTaskToDelayedList>
	}
 8009502:	bf00      	nop
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	200010cc 	.word	0x200010cc

08009510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	60fb      	str	r3, [r7, #12]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	3318      	adds	r3, #24
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fe49 	bl	80081d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009546:	4b1e      	ldr	r3, [pc, #120]	; (80095c0 <xTaskRemoveFromEventList+0xb0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d11d      	bne.n	800958a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3304      	adds	r3, #4
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fe40 	bl	80081d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955c:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <xTaskRemoveFromEventList+0xb4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d903      	bls.n	800956c <xTaskRemoveFromEventList+0x5c>
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	4a16      	ldr	r2, [pc, #88]	; (80095c4 <xTaskRemoveFromEventList+0xb4>)
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4a13      	ldr	r2, [pc, #76]	; (80095c8 <xTaskRemoveFromEventList+0xb8>)
 800957a:	441a      	add	r2, r3
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f7fe fdcb 	bl	800811e <vListInsertEnd>
 8009588:	e005      	b.n	8009596 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	3318      	adds	r3, #24
 800958e:	4619      	mov	r1, r3
 8009590:	480e      	ldr	r0, [pc, #56]	; (80095cc <xTaskRemoveFromEventList+0xbc>)
 8009592:	f7fe fdc4 	bl	800811e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959a:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <xTaskRemoveFromEventList+0xc0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d905      	bls.n	80095b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095a4:	2301      	movs	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <xTaskRemoveFromEventList+0xc4>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	e001      	b.n	80095b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095b4:	697b      	ldr	r3, [r7, #20]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200015c8 	.word	0x200015c8
 80095c4:	200015a8 	.word	0x200015a8
 80095c8:	200010d0 	.word	0x200010d0
 80095cc:	20001560 	.word	0x20001560
 80095d0:	200010cc 	.word	0x200010cc
 80095d4:	200015b4 	.word	0x200015b4

080095d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095e0:	4b06      	ldr	r3, [pc, #24]	; (80095fc <vTaskInternalSetTimeOutState+0x24>)
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <vTaskInternalSetTimeOutState+0x28>)
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	605a      	str	r2, [r3, #4]
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	200015b8 	.word	0x200015b8
 8009600:	200015a4 	.word	0x200015a4

08009604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	613b      	str	r3, [r7, #16]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	60fb      	str	r3, [r7, #12]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009646:	f000 fe7d 	bl	800a344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800964a:	4b1d      	ldr	r3, [pc, #116]	; (80096c0 <xTaskCheckForTimeOut+0xbc>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d102      	bne.n	800966a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	e023      	b.n	80096b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <xTaskCheckForTimeOut+0xc0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d007      	beq.n	8009686 <xTaskCheckForTimeOut+0x82>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	e015      	b.n	80096b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	429a      	cmp	r2, r3
 800968e:	d20b      	bcs.n	80096a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	1ad2      	subs	r2, r2, r3
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff ff9b 	bl	80095d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	e004      	b.n	80096b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096ae:	2301      	movs	r3, #1
 80096b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f000 fe77 	bl	800a3a4 <vPortExitCritical>

	return xReturn;
 80096b6:	69fb      	ldr	r3, [r7, #28]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3720      	adds	r7, #32
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	200015a4 	.word	0x200015a4
 80096c4:	200015b8 	.word	0x200015b8

080096c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096cc:	4b03      	ldr	r3, [pc, #12]	; (80096dc <vTaskMissedYield+0x14>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	200015b4 	.word	0x200015b4

080096e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80096e8:	f000 f852 	bl	8009790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <prvIdleTask+0x28>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d9f9      	bls.n	80096e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <prvIdleTask+0x2c>)
 80096f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009704:	e7f0      	b.n	80096e8 <prvIdleTask+0x8>
 8009706:	bf00      	nop
 8009708:	200010d0 	.word	0x200010d0
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009716:	2300      	movs	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
 800971a:	e00c      	b.n	8009736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4a12      	ldr	r2, [pc, #72]	; (8009770 <prvInitialiseTaskLists+0x60>)
 8009728:	4413      	add	r3, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe fcca 	bl	80080c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3301      	adds	r3, #1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b37      	cmp	r3, #55	; 0x37
 800973a:	d9ef      	bls.n	800971c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800973c:	480d      	ldr	r0, [pc, #52]	; (8009774 <prvInitialiseTaskLists+0x64>)
 800973e:	f7fe fcc1 	bl	80080c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009742:	480d      	ldr	r0, [pc, #52]	; (8009778 <prvInitialiseTaskLists+0x68>)
 8009744:	f7fe fcbe 	bl	80080c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009748:	480c      	ldr	r0, [pc, #48]	; (800977c <prvInitialiseTaskLists+0x6c>)
 800974a:	f7fe fcbb 	bl	80080c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800974e:	480c      	ldr	r0, [pc, #48]	; (8009780 <prvInitialiseTaskLists+0x70>)
 8009750:	f7fe fcb8 	bl	80080c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009754:	480b      	ldr	r0, [pc, #44]	; (8009784 <prvInitialiseTaskLists+0x74>)
 8009756:	f7fe fcb5 	bl	80080c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800975a:	4b0b      	ldr	r3, [pc, #44]	; (8009788 <prvInitialiseTaskLists+0x78>)
 800975c:	4a05      	ldr	r2, [pc, #20]	; (8009774 <prvInitialiseTaskLists+0x64>)
 800975e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <prvInitialiseTaskLists+0x7c>)
 8009762:	4a05      	ldr	r2, [pc, #20]	; (8009778 <prvInitialiseTaskLists+0x68>)
 8009764:	601a      	str	r2, [r3, #0]
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	200010d0 	.word	0x200010d0
 8009774:	20001530 	.word	0x20001530
 8009778:	20001544 	.word	0x20001544
 800977c:	20001560 	.word	0x20001560
 8009780:	20001574 	.word	0x20001574
 8009784:	2000158c 	.word	0x2000158c
 8009788:	20001558 	.word	0x20001558
 800978c:	2000155c 	.word	0x2000155c

08009790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009796:	e019      	b.n	80097cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009798:	f000 fdd4 	bl	800a344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800979c:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <prvCheckTasksWaitingTermination+0x50>)
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	3304      	adds	r3, #4
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fd15 	bl	80081d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097ae:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <prvCheckTasksWaitingTermination+0x54>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	4a0b      	ldr	r2, [pc, #44]	; (80097e4 <prvCheckTasksWaitingTermination+0x54>)
 80097b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097b8:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <prvCheckTasksWaitingTermination+0x58>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3b01      	subs	r3, #1
 80097be:	4a0a      	ldr	r2, [pc, #40]	; (80097e8 <prvCheckTasksWaitingTermination+0x58>)
 80097c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097c2:	f000 fdef 	bl	800a3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f810 	bl	80097ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097cc:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <prvCheckTasksWaitingTermination+0x58>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e1      	bne.n	8009798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20001574 	.word	0x20001574
 80097e4:	200015a0 	.word	0x200015a0
 80097e8:	20001588 	.word	0x20001588

080097ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3354      	adds	r3, #84	; 0x54
 80097f8:	4618      	mov	r0, r3
 80097fa:	f003 f815 	bl	800c828 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009804:	2b00      	cmp	r3, #0
 8009806:	d108      	bne.n	800981a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	4618      	mov	r0, r3
 800980e:	f000 ff87 	bl	800a720 <vPortFree>
				vPortFree( pxTCB );
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 ff84 	bl	800a720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009818:	e018      	b.n	800984c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009820:	2b01      	cmp	r3, #1
 8009822:	d103      	bne.n	800982c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 ff7b 	bl	800a720 <vPortFree>
	}
 800982a:	e00f      	b.n	800984c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009832:	2b02      	cmp	r3, #2
 8009834:	d00a      	beq.n	800984c <prvDeleteTCB+0x60>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60fb      	str	r3, [r7, #12]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <prvDeleteTCB+0x5e>
	}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <prvResetNextTaskUnblockTime+0x38>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d104      	bne.n	800986e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <prvResetNextTaskUnblockTime+0x3c>)
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800986c:	e008      	b.n	8009880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986e:	4b07      	ldr	r3, [pc, #28]	; (800988c <prvResetNextTaskUnblockTime+0x38>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	4a04      	ldr	r2, [pc, #16]	; (8009890 <prvResetNextTaskUnblockTime+0x3c>)
 800987e:	6013      	str	r3, [r2, #0]
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20001558 	.word	0x20001558
 8009890:	200015c0 	.word	0x200015c0

08009894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800989a:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <xTaskGetSchedulerState+0x34>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098a2:	2301      	movs	r3, #1
 80098a4:	607b      	str	r3, [r7, #4]
 80098a6:	e008      	b.n	80098ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a8:	4b08      	ldr	r3, [pc, #32]	; (80098cc <xTaskGetSchedulerState+0x38>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098b0:	2302      	movs	r3, #2
 80098b2:	607b      	str	r3, [r7, #4]
 80098b4:	e001      	b.n	80098ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098b6:	2300      	movs	r3, #0
 80098b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098ba:	687b      	ldr	r3, [r7, #4]
	}
 80098bc:	4618      	mov	r0, r3
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	200015ac 	.word	0x200015ac
 80098cc:	200015c8 	.word	0x200015c8

080098d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098dc:	2300      	movs	r3, #0
 80098de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d056      	beq.n	8009994 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098e6:	4b2e      	ldr	r3, [pc, #184]	; (80099a0 <xTaskPriorityDisinherit+0xd0>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d00a      	beq.n	8009906 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	60bb      	str	r3, [r7, #8]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009928:	1e5a      	subs	r2, r3, #1
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009936:	429a      	cmp	r2, r3
 8009938:	d02c      	beq.n	8009994 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993e:	2b00      	cmp	r3, #0
 8009940:	d128      	bne.n	8009994 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	3304      	adds	r3, #4
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fc46 	bl	80081d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009964:	4b0f      	ldr	r3, [pc, #60]	; (80099a4 <xTaskPriorityDisinherit+0xd4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d903      	bls.n	8009974 <xTaskPriorityDisinherit+0xa4>
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	4a0c      	ldr	r2, [pc, #48]	; (80099a4 <xTaskPriorityDisinherit+0xd4>)
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009978:	4613      	mov	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4a09      	ldr	r2, [pc, #36]	; (80099a8 <xTaskPriorityDisinherit+0xd8>)
 8009982:	441a      	add	r2, r3
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7fe fbc7 	bl	800811e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009990:	2301      	movs	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009994:	697b      	ldr	r3, [r7, #20]
	}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	200010cc 	.word	0x200010cc
 80099a4:	200015a8 	.word	0x200015a8
 80099a8:	200010d0 	.word	0x200010d0

080099ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099b6:	4b21      	ldr	r3, [pc, #132]	; (8009a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099bc:	4b20      	ldr	r3, [pc, #128]	; (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fc08 	bl	80081d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ce:	d10a      	bne.n	80099e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099d6:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	4819      	ldr	r0, [pc, #100]	; (8009a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80099e0:	f7fe fb9d 	bl	800811e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099e4:	e026      	b.n	8009a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4413      	add	r3, r2
 80099ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099ee:	4b14      	ldr	r3, [pc, #80]	; (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d209      	bcs.n	8009a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099fe:	4b12      	ldr	r3, [pc, #72]	; (8009a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b0f      	ldr	r3, [pc, #60]	; (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fe fbab 	bl	8008166 <vListInsert>
}
 8009a10:	e010      	b.n	8009a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a12:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	4b0a      	ldr	r3, [pc, #40]	; (8009a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7fe fba1 	bl	8008166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d202      	bcs.n	8009a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a2e:	4a08      	ldr	r2, [pc, #32]	; (8009a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	6013      	str	r3, [r2, #0]
}
 8009a34:	bf00      	nop
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	200015a4 	.word	0x200015a4
 8009a40:	200010cc 	.word	0x200010cc
 8009a44:	2000158c 	.word	0x2000158c
 8009a48:	2000155c 	.word	0x2000155c
 8009a4c:	20001558 	.word	0x20001558
 8009a50:	200015c0 	.word	0x200015c0

08009a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08a      	sub	sp, #40	; 0x28
 8009a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a5e:	f000 fb07 	bl	800a070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a62:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <xTimerCreateTimerTask+0x80>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d021      	beq.n	8009aae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a72:	1d3a      	adds	r2, r7, #4
 8009a74:	f107 0108 	add.w	r1, r7, #8
 8009a78:	f107 030c 	add.w	r3, r7, #12
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fb07 	bl	8008090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	9202      	str	r2, [sp, #8]
 8009a8a:	9301      	str	r3, [sp, #4]
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	460a      	mov	r2, r1
 8009a94:	4910      	ldr	r1, [pc, #64]	; (8009ad8 <xTimerCreateTimerTask+0x84>)
 8009a96:	4811      	ldr	r0, [pc, #68]	; (8009adc <xTimerCreateTimerTask+0x88>)
 8009a98:	f7ff f8b4 	bl	8008c04 <xTaskCreateStatic>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4a10      	ldr	r2, [pc, #64]	; (8009ae0 <xTimerCreateTimerTask+0x8c>)
 8009aa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <xTimerCreateTimerTask+0x8c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	613b      	str	r3, [r7, #16]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009aca:	697b      	ldr	r3, [r7, #20]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200015fc 	.word	0x200015fc
 8009ad8:	0800eafc 	.word	0x0800eafc
 8009adc:	08009c19 	.word	0x08009c19
 8009ae0:	20001600 	.word	0x20001600

08009ae4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	; 0x28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	623b      	str	r3, [r7, #32]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b12:	4b1a      	ldr	r3, [pc, #104]	; (8009b7c <xTimerGenericCommand+0x98>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d02a      	beq.n	8009b70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2b05      	cmp	r3, #5
 8009b2a:	dc18      	bgt.n	8009b5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b2c:	f7ff feb2 	bl	8009894 <xTaskGetSchedulerState>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d109      	bne.n	8009b4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b36:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <xTimerGenericCommand+0x98>)
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f107 0110 	add.w	r1, r7, #16
 8009b3e:	2300      	movs	r3, #0
 8009b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b42:	f7fe fc77 	bl	8008434 <xQueueGenericSend>
 8009b46:	6278      	str	r0, [r7, #36]	; 0x24
 8009b48:	e012      	b.n	8009b70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b4a:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <xTimerGenericCommand+0x98>)
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f107 0110 	add.w	r1, r7, #16
 8009b52:	2300      	movs	r3, #0
 8009b54:	2200      	movs	r2, #0
 8009b56:	f7fe fc6d 	bl	8008434 <xQueueGenericSend>
 8009b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8009b5c:	e008      	b.n	8009b70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <xTimerGenericCommand+0x98>)
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	f107 0110 	add.w	r1, r7, #16
 8009b66:	2300      	movs	r3, #0
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	f7fe fd61 	bl	8008630 <xQueueGenericSendFromISR>
 8009b6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3728      	adds	r7, #40	; 0x28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	200015fc 	.word	0x200015fc

08009b80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b8a:	4b22      	ldr	r3, [pc, #136]	; (8009c14 <prvProcessExpiredTimer+0x94>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	3304      	adds	r3, #4
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fb1d 	bl	80081d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d022      	beq.n	8009bf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	699a      	ldr	r2, [r3, #24]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	18d1      	adds	r1, r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	6978      	ldr	r0, [r7, #20]
 8009bba:	f000 f8d1 	bl	8009d60 <prvInsertTimerInActiveList>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01f      	beq.n	8009c04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	2100      	movs	r1, #0
 8009bce:	6978      	ldr	r0, [r7, #20]
 8009bd0:	f7ff ff88 	bl	8009ae4 <xTimerGenericCommand>
 8009bd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d113      	bne.n	8009c04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60fb      	str	r3, [r7, #12]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bf8:	f023 0301 	bic.w	r3, r3, #1
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	6978      	ldr	r0, [r7, #20]
 8009c0a:	4798      	blx	r3
}
 8009c0c:	bf00      	nop
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200015f4 	.word	0x200015f4

08009c18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c20:	f107 0308 	add.w	r3, r7, #8
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f857 	bl	8009cd8 <prvGetNextExpireTime>
 8009c2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f803 	bl	8009c3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c36:	f000 f8d5 	bl	8009de4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c3a:	e7f1      	b.n	8009c20 <prvTimerTask+0x8>

08009c3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c46:	f7ff fa39 	bl	80090bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c4a:	f107 0308 	add.w	r3, r7, #8
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 f866 	bl	8009d20 <prvSampleTimeNow>
 8009c54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d130      	bne.n	8009cbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <prvProcessTimerOrBlockTask+0x3c>
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d806      	bhi.n	8009c78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c6a:	f7ff fa35 	bl	80090d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff ff85 	bl	8009b80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c76:	e024      	b.n	8009cc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d008      	beq.n	8009c90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <prvProcessTimerOrBlockTask+0x90>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <prvProcessTimerOrBlockTask+0x50>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e000      	b.n	8009c8e <prvProcessTimerOrBlockTask+0x52>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c90:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <prvProcessTimerOrBlockTask+0x94>)
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f7fe ff7d 	bl	8008b9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ca2:	f7ff fa19 	bl	80090d8 <xTaskResumeAll>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cac:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <prvProcessTimerOrBlockTask+0x98>)
 8009cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	f3bf 8f6f 	isb	sy
}
 8009cbc:	e001      	b.n	8009cc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009cbe:	f7ff fa0b 	bl	80090d8 <xTaskResumeAll>
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200015f8 	.word	0x200015f8
 8009cd0:	200015fc 	.word	0x200015fc
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <prvGetNextExpireTime+0x44>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <prvGetNextExpireTime+0x16>
 8009cea:	2201      	movs	r2, #1
 8009cec:	e000      	b.n	8009cf0 <prvGetNextExpireTime+0x18>
 8009cee:	2200      	movs	r2, #0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d105      	bne.n	8009d08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <prvGetNextExpireTime+0x44>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60fb      	str	r3, [r7, #12]
 8009d06:	e001      	b.n	8009d0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	200015f4 	.word	0x200015f4

08009d20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d28:	f7ff fa74 	bl	8009214 <xTaskGetTickCount>
 8009d2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d2e:	4b0b      	ldr	r3, [pc, #44]	; (8009d5c <prvSampleTimeNow+0x3c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d205      	bcs.n	8009d44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d38:	f000 f936 	bl	8009fa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	e002      	b.n	8009d4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d4a:	4a04      	ldr	r2, [pc, #16]	; (8009d5c <prvSampleTimeNow+0x3c>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d50:	68fb      	ldr	r3, [r7, #12]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20001604 	.word	0x20001604

08009d60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d812      	bhi.n	8009dac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	1ad2      	subs	r2, r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d302      	bcc.n	8009d9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d94:	2301      	movs	r3, #1
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e01b      	b.n	8009dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d9a:	4b10      	ldr	r3, [pc, #64]	; (8009ddc <prvInsertTimerInActiveList+0x7c>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3304      	adds	r3, #4
 8009da2:	4619      	mov	r1, r3
 8009da4:	4610      	mov	r0, r2
 8009da6:	f7fe f9de 	bl	8008166 <vListInsert>
 8009daa:	e012      	b.n	8009dd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d206      	bcs.n	8009dc2 <prvInsertTimerInActiveList+0x62>
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d302      	bcc.n	8009dc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e007      	b.n	8009dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dc2:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <prvInsertTimerInActiveList+0x80>)
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4610      	mov	r0, r2
 8009dce:	f7fe f9ca 	bl	8008166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dd2:	697b      	ldr	r3, [r7, #20]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	200015f8 	.word	0x200015f8
 8009de0:	200015f4 	.word	0x200015f4

08009de4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08e      	sub	sp, #56	; 0x38
 8009de8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dea:	e0ca      	b.n	8009f82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	da18      	bge.n	8009e24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	3304      	adds	r3, #4
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	61fb      	str	r3, [r7, #28]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e1a:	6850      	ldr	r0, [r2, #4]
 8009e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e1e:	6892      	ldr	r2, [r2, #8]
 8009e20:	4611      	mov	r1, r2
 8009e22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f2c0 80aa 	blt.w	8009f80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d004      	beq.n	8009e42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe f9cb 	bl	80081d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e42:	463b      	mov	r3, r7
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff ff6b 	bl	8009d20 <prvSampleTimeNow>
 8009e4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b09      	cmp	r3, #9
 8009e50:	f200 8097 	bhi.w	8009f82 <prvProcessReceivedCommands+0x19e>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <prvProcessReceivedCommands+0x78>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e85 	.word	0x08009e85
 8009e60:	08009e85 	.word	0x08009e85
 8009e64:	08009e85 	.word	0x08009e85
 8009e68:	08009ef9 	.word	0x08009ef9
 8009e6c:	08009f0d 	.word	0x08009f0d
 8009e70:	08009f57 	.word	0x08009f57
 8009e74:	08009e85 	.word	0x08009e85
 8009e78:	08009e85 	.word	0x08009e85
 8009e7c:	08009ef9 	.word	0x08009ef9
 8009e80:	08009f0d 	.word	0x08009f0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e8a:	f043 0301 	orr.w	r3, r3, #1
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	18d1      	adds	r1, r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea4:	f7ff ff5c 	bl	8009d60 <prvInsertTimerInActiveList>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d069      	beq.n	8009f82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d05e      	beq.n	8009f82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	441a      	add	r2, r3
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ed6:	f7ff fe05 	bl	8009ae4 <xTimerGenericCommand>
 8009eda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d14f      	bne.n	8009f82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	61bb      	str	r3, [r7, #24]
}
 8009ef4:	bf00      	nop
 8009ef6:	e7fe      	b.n	8009ef6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009efe:	f023 0301 	bic.w	r3, r3, #1
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f0a:	e03a      	b.n	8009f82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f12:	f043 0301 	orr.w	r3, r3, #1
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	617b      	str	r3, [r7, #20]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	18d1      	adds	r1, r2, r3
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f50:	f7ff ff06 	bl	8009d60 <prvInsertTimerInActiveList>
					break;
 8009f54:	e015      	b.n	8009f82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5c:	f003 0302 	and.w	r3, r3, #2
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d103      	bne.n	8009f6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f66:	f000 fbdb 	bl	800a720 <vPortFree>
 8009f6a:	e00a      	b.n	8009f82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f72:	f023 0301 	bic.w	r3, r3, #1
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f7e:	e000      	b.n	8009f82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f82:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <prvProcessReceivedCommands+0x1c0>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	1d39      	adds	r1, r7, #4
 8009f88:	2200      	movs	r2, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fbec 	bl	8008768 <xQueueReceive>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f47f af2a 	bne.w	8009dec <prvProcessReceivedCommands+0x8>
	}
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	3730      	adds	r7, #48	; 0x30
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	200015fc 	.word	0x200015fc

08009fa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fae:	e048      	b.n	800a042 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fb0:	4b2d      	ldr	r3, [pc, #180]	; (800a068 <prvSwitchTimerLists+0xc0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fba:	4b2b      	ldr	r3, [pc, #172]	; (800a068 <prvSwitchTimerLists+0xc0>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe f905 	bl	80081d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d02e      	beq.n	800a042 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	4413      	add	r3, r2
 8009fec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d90e      	bls.n	800a014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a002:	4b19      	ldr	r3, [pc, #100]	; (800a068 <prvSwitchTimerLists+0xc0>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3304      	adds	r3, #4
 800a00a:	4619      	mov	r1, r3
 800a00c:	4610      	mov	r0, r2
 800a00e:	f7fe f8aa 	bl	8008166 <vListInsert>
 800a012:	e016      	b.n	800a042 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a014:	2300      	movs	r3, #0
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	2300      	movs	r3, #0
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	2100      	movs	r1, #0
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7ff fd60 	bl	8009ae4 <xTimerGenericCommand>
 800a024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	603b      	str	r3, [r7, #0]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a042:	4b09      	ldr	r3, [pc, #36]	; (800a068 <prvSwitchTimerLists+0xc0>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1b1      	bne.n	8009fb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a04c:	4b06      	ldr	r3, [pc, #24]	; (800a068 <prvSwitchTimerLists+0xc0>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a052:	4b06      	ldr	r3, [pc, #24]	; (800a06c <prvSwitchTimerLists+0xc4>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a04      	ldr	r2, [pc, #16]	; (800a068 <prvSwitchTimerLists+0xc0>)
 800a058:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a05a:	4a04      	ldr	r2, [pc, #16]	; (800a06c <prvSwitchTimerLists+0xc4>)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	6013      	str	r3, [r2, #0]
}
 800a060:	bf00      	nop
 800a062:	3718      	adds	r7, #24
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	200015f4 	.word	0x200015f4
 800a06c:	200015f8 	.word	0x200015f8

0800a070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a076:	f000 f965 	bl	800a344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a07a:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <prvCheckForValidListAndQueue+0x60>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d120      	bne.n	800a0c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a082:	4814      	ldr	r0, [pc, #80]	; (800a0d4 <prvCheckForValidListAndQueue+0x64>)
 800a084:	f7fe f81e 	bl	80080c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a088:	4813      	ldr	r0, [pc, #76]	; (800a0d8 <prvCheckForValidListAndQueue+0x68>)
 800a08a:	f7fe f81b 	bl	80080c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a08e:	4b13      	ldr	r3, [pc, #76]	; (800a0dc <prvCheckForValidListAndQueue+0x6c>)
 800a090:	4a10      	ldr	r2, [pc, #64]	; (800a0d4 <prvCheckForValidListAndQueue+0x64>)
 800a092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a094:	4b12      	ldr	r3, [pc, #72]	; (800a0e0 <prvCheckForValidListAndQueue+0x70>)
 800a096:	4a10      	ldr	r2, [pc, #64]	; (800a0d8 <prvCheckForValidListAndQueue+0x68>)
 800a098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a09a:	2300      	movs	r3, #0
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	4b11      	ldr	r3, [pc, #68]	; (800a0e4 <prvCheckForValidListAndQueue+0x74>)
 800a0a0:	4a11      	ldr	r2, [pc, #68]	; (800a0e8 <prvCheckForValidListAndQueue+0x78>)
 800a0a2:	2110      	movs	r1, #16
 800a0a4:	200a      	movs	r0, #10
 800a0a6:	f7fe f929 	bl	80082fc <xQueueGenericCreateStatic>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4a08      	ldr	r2, [pc, #32]	; (800a0d0 <prvCheckForValidListAndQueue+0x60>)
 800a0ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <prvCheckForValidListAndQueue+0x60>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0b8:	4b05      	ldr	r3, [pc, #20]	; (800a0d0 <prvCheckForValidListAndQueue+0x60>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	490b      	ldr	r1, [pc, #44]	; (800a0ec <prvCheckForValidListAndQueue+0x7c>)
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fd42 	bl	8008b48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0c4:	f000 f96e 	bl	800a3a4 <vPortExitCritical>
}
 800a0c8:	bf00      	nop
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200015fc 	.word	0x200015fc
 800a0d4:	200015cc 	.word	0x200015cc
 800a0d8:	200015e0 	.word	0x200015e0
 800a0dc:	200015f4 	.word	0x200015f4
 800a0e0:	200015f8 	.word	0x200015f8
 800a0e4:	200016a8 	.word	0x200016a8
 800a0e8:	20001608 	.word	0x20001608
 800a0ec:	0800eb04 	.word	0x0800eb04

0800a0f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	3b04      	subs	r3, #4
 800a100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3b04      	subs	r3, #4
 800a10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f023 0201 	bic.w	r2, r3, #1
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3b04      	subs	r3, #4
 800a11e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a120:	4a0c      	ldr	r2, [pc, #48]	; (800a154 <pxPortInitialiseStack+0x64>)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3b14      	subs	r3, #20
 800a12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3b04      	subs	r3, #4
 800a136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f06f 0202 	mvn.w	r2, #2
 800a13e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3b20      	subs	r3, #32
 800a144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a146:	68fb      	ldr	r3, [r7, #12]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	0800a159 	.word	0x0800a159

0800a158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a162:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <prvTaskExitError+0x54>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16a:	d00a      	beq.n	800a182 <prvTaskExitError+0x2a>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	60fb      	str	r3, [r7, #12]
}
 800a17e:	bf00      	nop
 800a180:	e7fe      	b.n	800a180 <prvTaskExitError+0x28>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	60bb      	str	r3, [r7, #8]
}
 800a194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a196:	bf00      	nop
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0fc      	beq.n	800a198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a19e:	bf00      	nop
 800a1a0:	bf00      	nop
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	2000000c 	.word	0x2000000c

0800a1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1b0:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <pxCurrentTCBConst2>)
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	6808      	ldr	r0, [r1, #0]
 800a1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ba:	f380 8809 	msr	PSP, r0
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f04f 0000 	mov.w	r0, #0
 800a1c6:	f380 8811 	msr	BASEPRI, r0
 800a1ca:	4770      	bx	lr
 800a1cc:	f3af 8000 	nop.w

0800a1d0 <pxCurrentTCBConst2>:
 800a1d0:	200010cc 	.word	0x200010cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop

0800a1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1d8:	4808      	ldr	r0, [pc, #32]	; (800a1fc <prvPortStartFirstTask+0x24>)
 800a1da:	6800      	ldr	r0, [r0, #0]
 800a1dc:	6800      	ldr	r0, [r0, #0]
 800a1de:	f380 8808 	msr	MSP, r0
 800a1e2:	f04f 0000 	mov.w	r0, #0
 800a1e6:	f380 8814 	msr	CONTROL, r0
 800a1ea:	b662      	cpsie	i
 800a1ec:	b661      	cpsie	f
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	df00      	svc	0
 800a1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1fa:	bf00      	nop
 800a1fc:	e000ed08 	.word	0xe000ed08

0800a200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a206:	4b46      	ldr	r3, [pc, #280]	; (800a320 <xPortStartScheduler+0x120>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a46      	ldr	r2, [pc, #280]	; (800a324 <xPortStartScheduler+0x124>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d10a      	bne.n	800a226 <xPortStartScheduler+0x26>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	613b      	str	r3, [r7, #16]
}
 800a222:	bf00      	nop
 800a224:	e7fe      	b.n	800a224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a226:	4b3e      	ldr	r3, [pc, #248]	; (800a320 <xPortStartScheduler+0x120>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a3f      	ldr	r2, [pc, #252]	; (800a328 <xPortStartScheduler+0x128>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d10a      	bne.n	800a246 <xPortStartScheduler+0x46>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	60fb      	str	r3, [r7, #12]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a246:	4b39      	ldr	r3, [pc, #228]	; (800a32c <xPortStartScheduler+0x12c>)
 800a248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	22ff      	movs	r2, #255	; 0xff
 800a256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	4b31      	ldr	r3, [pc, #196]	; (800a330 <xPortStartScheduler+0x130>)
 800a26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a26e:	4b31      	ldr	r3, [pc, #196]	; (800a334 <xPortStartScheduler+0x134>)
 800a270:	2207      	movs	r2, #7
 800a272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a274:	e009      	b.n	800a28a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a276:	4b2f      	ldr	r3, [pc, #188]	; (800a334 <xPortStartScheduler+0x134>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3b01      	subs	r3, #1
 800a27c:	4a2d      	ldr	r2, [pc, #180]	; (800a334 <xPortStartScheduler+0x134>)
 800a27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	b2db      	uxtb	r3, r3
 800a288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a292:	2b80      	cmp	r3, #128	; 0x80
 800a294:	d0ef      	beq.n	800a276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a296:	4b27      	ldr	r3, [pc, #156]	; (800a334 <xPortStartScheduler+0x134>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f1c3 0307 	rsb	r3, r3, #7
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d00a      	beq.n	800a2b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	60bb      	str	r3, [r7, #8]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2b8:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <xPortStartScheduler+0x134>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	021b      	lsls	r3, r3, #8
 800a2be:	4a1d      	ldr	r2, [pc, #116]	; (800a334 <xPortStartScheduler+0x134>)
 800a2c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2c2:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <xPortStartScheduler+0x134>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2ca:	4a1a      	ldr	r2, [pc, #104]	; (800a334 <xPortStartScheduler+0x134>)
 800a2cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2d6:	4b18      	ldr	r3, [pc, #96]	; (800a338 <xPortStartScheduler+0x138>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a17      	ldr	r2, [pc, #92]	; (800a338 <xPortStartScheduler+0x138>)
 800a2dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2e2:	4b15      	ldr	r3, [pc, #84]	; (800a338 <xPortStartScheduler+0x138>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a14      	ldr	r2, [pc, #80]	; (800a338 <xPortStartScheduler+0x138>)
 800a2e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2ee:	f000 f8dd 	bl	800a4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2f2:	4b12      	ldr	r3, [pc, #72]	; (800a33c <xPortStartScheduler+0x13c>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2f8:	f000 f8fc 	bl	800a4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2fc:	4b10      	ldr	r3, [pc, #64]	; (800a340 <xPortStartScheduler+0x140>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a0f      	ldr	r2, [pc, #60]	; (800a340 <xPortStartScheduler+0x140>)
 800a302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a308:	f7ff ff66 	bl	800a1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a30c:	f7ff f84c 	bl	80093a8 <vTaskSwitchContext>
	prvTaskExitError();
 800a310:	f7ff ff22 	bl	800a158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	e000ed00 	.word	0xe000ed00
 800a324:	410fc271 	.word	0x410fc271
 800a328:	410fc270 	.word	0x410fc270
 800a32c:	e000e400 	.word	0xe000e400
 800a330:	200016f8 	.word	0x200016f8
 800a334:	200016fc 	.word	0x200016fc
 800a338:	e000ed20 	.word	0xe000ed20
 800a33c:	2000000c 	.word	0x2000000c
 800a340:	e000ef34 	.word	0xe000ef34

0800a344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	607b      	str	r3, [r7, #4]
}
 800a35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a35e:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <vPortEnterCritical+0x58>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	4a0d      	ldr	r2, [pc, #52]	; (800a39c <vPortEnterCritical+0x58>)
 800a366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <vPortEnterCritical+0x58>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d10f      	bne.n	800a390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a370:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <vPortEnterCritical+0x5c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <vPortEnterCritical+0x4c>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	603b      	str	r3, [r7, #0]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <vPortEnterCritical+0x4a>
	}
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	2000000c 	.word	0x2000000c
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3aa:	4b12      	ldr	r3, [pc, #72]	; (800a3f4 <vPortExitCritical+0x50>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10a      	bne.n	800a3c8 <vPortExitCritical+0x24>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	607b      	str	r3, [r7, #4]
}
 800a3c4:	bf00      	nop
 800a3c6:	e7fe      	b.n	800a3c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <vPortExitCritical+0x50>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <vPortExitCritical+0x50>)
 800a3d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3d2:	4b08      	ldr	r3, [pc, #32]	; (800a3f4 <vPortExitCritical+0x50>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d105      	bne.n	800a3e6 <vPortExitCritical+0x42>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	f383 8811 	msr	BASEPRI, r3
}
 800a3e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	2000000c 	.word	0x2000000c
	...

0800a400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a400:	f3ef 8009 	mrs	r0, PSP
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	4b15      	ldr	r3, [pc, #84]	; (800a460 <pxCurrentTCBConst>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	f01e 0f10 	tst.w	lr, #16
 800a410:	bf08      	it	eq
 800a412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41a:	6010      	str	r0, [r2, #0]
 800a41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a424:	f380 8811 	msr	BASEPRI, r0
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f7fe ffba 	bl	80093a8 <vTaskSwitchContext>
 800a434:	f04f 0000 	mov.w	r0, #0
 800a438:	f380 8811 	msr	BASEPRI, r0
 800a43c:	bc09      	pop	{r0, r3}
 800a43e:	6819      	ldr	r1, [r3, #0]
 800a440:	6808      	ldr	r0, [r1, #0]
 800a442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a446:	f01e 0f10 	tst.w	lr, #16
 800a44a:	bf08      	it	eq
 800a44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a450:	f380 8809 	msr	PSP, r0
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	f3af 8000 	nop.w

0800a460 <pxCurrentTCBConst>:
 800a460:	200010cc 	.word	0x200010cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop

0800a468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	607b      	str	r3, [r7, #4]
}
 800a480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a482:	f7fe fed7 	bl	8009234 <xTaskIncrementTick>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d003      	beq.n	800a494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a48c:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <xPortSysTickHandler+0x40>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	2300      	movs	r3, #0
 800a496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f383 8811 	msr	BASEPRI, r3
}
 800a49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <vPortSetupTimerInterrupt+0x34>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4b6:	4b0b      	ldr	r3, [pc, #44]	; (800a4e4 <vPortSetupTimerInterrupt+0x38>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <vPortSetupTimerInterrupt+0x3c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a0a      	ldr	r2, [pc, #40]	; (800a4ec <vPortSetupTimerInterrupt+0x40>)
 800a4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c6:	099b      	lsrs	r3, r3, #6
 800a4c8:	4a09      	ldr	r2, [pc, #36]	; (800a4f0 <vPortSetupTimerInterrupt+0x44>)
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ce:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <vPortSetupTimerInterrupt+0x34>)
 800a4d0:	2207      	movs	r2, #7
 800a4d2:	601a      	str	r2, [r3, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	e000e010 	.word	0xe000e010
 800a4e4:	e000e018 	.word	0xe000e018
 800a4e8:	20000000 	.word	0x20000000
 800a4ec:	10624dd3 	.word	0x10624dd3
 800a4f0:	e000e014 	.word	0xe000e014

0800a4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a504 <vPortEnableVFP+0x10>
 800a4f8:	6801      	ldr	r1, [r0, #0]
 800a4fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4fe:	6001      	str	r1, [r0, #0]
 800a500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a502:	bf00      	nop
 800a504:	e000ed88 	.word	0xe000ed88

0800a508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a50e:	f3ef 8305 	mrs	r3, IPSR
 800a512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b0f      	cmp	r3, #15
 800a518:	d914      	bls.n	800a544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a51a:	4a17      	ldr	r2, [pc, #92]	; (800a578 <vPortValidateInterruptPriority+0x70>)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4413      	add	r3, r2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a524:	4b15      	ldr	r3, [pc, #84]	; (800a57c <vPortValidateInterruptPriority+0x74>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	7afa      	ldrb	r2, [r7, #11]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d20a      	bcs.n	800a544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	607b      	str	r3, [r7, #4]
}
 800a540:	bf00      	nop
 800a542:	e7fe      	b.n	800a542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a544:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <vPortValidateInterruptPriority+0x78>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a54c:	4b0d      	ldr	r3, [pc, #52]	; (800a584 <vPortValidateInterruptPriority+0x7c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	429a      	cmp	r2, r3
 800a552:	d90a      	bls.n	800a56a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	603b      	str	r3, [r7, #0]
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <vPortValidateInterruptPriority+0x60>
	}
 800a56a:	bf00      	nop
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	e000e3f0 	.word	0xe000e3f0
 800a57c:	200016f8 	.word	0x200016f8
 800a580:	e000ed0c 	.word	0xe000ed0c
 800a584:	200016fc 	.word	0x200016fc

0800a588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08a      	sub	sp, #40	; 0x28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a590:	2300      	movs	r3, #0
 800a592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a594:	f7fe fd92 	bl	80090bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a598:	4b5b      	ldr	r3, [pc, #364]	; (800a708 <pvPortMalloc+0x180>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d101      	bne.n	800a5a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5a0:	f000 f920 	bl	800a7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5a4:	4b59      	ldr	r3, [pc, #356]	; (800a70c <pvPortMalloc+0x184>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f040 8093 	bne.w	800a6d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d01d      	beq.n	800a5f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5b8:	2208      	movs	r2, #8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d014      	beq.n	800a5f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f023 0307 	bic.w	r3, r3, #7
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00a      	beq.n	800a5f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	617b      	str	r3, [r7, #20]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d06e      	beq.n	800a6d8 <pvPortMalloc+0x150>
 800a5fa:	4b45      	ldr	r3, [pc, #276]	; (800a710 <pvPortMalloc+0x188>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	429a      	cmp	r2, r3
 800a602:	d869      	bhi.n	800a6d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a604:	4b43      	ldr	r3, [pc, #268]	; (800a714 <pvPortMalloc+0x18c>)
 800a606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a608:	4b42      	ldr	r3, [pc, #264]	; (800a714 <pvPortMalloc+0x18c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a60e:	e004      	b.n	800a61a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d903      	bls.n	800a62c <pvPortMalloc+0xa4>
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1f1      	bne.n	800a610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a62c:	4b36      	ldr	r3, [pc, #216]	; (800a708 <pvPortMalloc+0x180>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a632:	429a      	cmp	r2, r3
 800a634:	d050      	beq.n	800a6d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2208      	movs	r2, #8
 800a63c:	4413      	add	r3, r2
 800a63e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	2308      	movs	r3, #8
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	429a      	cmp	r2, r3
 800a656:	d91f      	bls.n	800a698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4413      	add	r3, r2
 800a65e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	f003 0307 	and.w	r3, r3, #7
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <pvPortMalloc+0xf8>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	613b      	str	r3, [r7, #16]
}
 800a67c:	bf00      	nop
 800a67e:	e7fe      	b.n	800a67e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	1ad2      	subs	r2, r2, r3
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a692:	69b8      	ldr	r0, [r7, #24]
 800a694:	f000 f908 	bl	800a8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a698:	4b1d      	ldr	r3, [pc, #116]	; (800a710 <pvPortMalloc+0x188>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	4a1b      	ldr	r2, [pc, #108]	; (800a710 <pvPortMalloc+0x188>)
 800a6a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6a6:	4b1a      	ldr	r3, [pc, #104]	; (800a710 <pvPortMalloc+0x188>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <pvPortMalloc+0x190>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d203      	bcs.n	800a6ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6b2:	4b17      	ldr	r3, [pc, #92]	; (800a710 <pvPortMalloc+0x188>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a18      	ldr	r2, [pc, #96]	; (800a718 <pvPortMalloc+0x190>)
 800a6b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <pvPortMalloc+0x184>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6ce:	4b13      	ldr	r3, [pc, #76]	; (800a71c <pvPortMalloc+0x194>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	4a11      	ldr	r2, [pc, #68]	; (800a71c <pvPortMalloc+0x194>)
 800a6d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6d8:	f7fe fcfe 	bl	80090d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00a      	beq.n	800a6fc <pvPortMalloc+0x174>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	60fb      	str	r3, [r7, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <pvPortMalloc+0x172>
	return pvReturn;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3728      	adds	r7, #40	; 0x28
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200022c0 	.word	0x200022c0
 800a70c:	200022d4 	.word	0x200022d4
 800a710:	200022c4 	.word	0x200022c4
 800a714:	200022b8 	.word	0x200022b8
 800a718:	200022c8 	.word	0x200022c8
 800a71c:	200022cc 	.word	0x200022cc

0800a720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d04d      	beq.n	800a7ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a732:	2308      	movs	r3, #8
 800a734:	425b      	negs	r3, r3
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	4413      	add	r3, r2
 800a73a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <vPortFree+0xb8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4013      	ands	r3, r2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10a      	bne.n	800a764 <vPortFree+0x44>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	60fb      	str	r3, [r7, #12]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00a      	beq.n	800a782 <vPortFree+0x62>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60bb      	str	r3, [r7, #8]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <vPortFree+0xb8>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4013      	ands	r3, r2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d01e      	beq.n	800a7ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d11a      	bne.n	800a7ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	4b0e      	ldr	r3, [pc, #56]	; (800a7d8 <vPortFree+0xb8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	43db      	mvns	r3, r3
 800a7a2:	401a      	ands	r2, r3
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7a8:	f7fe fc88 	bl	80090bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <vPortFree+0xbc>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	4a09      	ldr	r2, [pc, #36]	; (800a7dc <vPortFree+0xbc>)
 800a7b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ba:	6938      	ldr	r0, [r7, #16]
 800a7bc:	f000 f874 	bl	800a8a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <vPortFree+0xc0>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	4a06      	ldr	r2, [pc, #24]	; (800a7e0 <vPortFree+0xc0>)
 800a7c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ca:	f7fe fc85 	bl	80090d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7ce:	bf00      	nop
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200022d4 	.word	0x200022d4
 800a7dc:	200022c4 	.word	0x200022c4
 800a7e0:	200022d0 	.word	0x200022d0

0800a7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7f0:	4b27      	ldr	r3, [pc, #156]	; (800a890 <prvHeapInit+0xac>)
 800a7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f003 0307 	and.w	r3, r3, #7
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00c      	beq.n	800a818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3307      	adds	r3, #7
 800a802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	4a1f      	ldr	r2, [pc, #124]	; (800a890 <prvHeapInit+0xac>)
 800a814:	4413      	add	r3, r2
 800a816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a81c:	4a1d      	ldr	r2, [pc, #116]	; (800a894 <prvHeapInit+0xb0>)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a822:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <prvHeapInit+0xb0>)
 800a824:	2200      	movs	r2, #0
 800a826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	4413      	add	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a830:	2208      	movs	r2, #8
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0307 	bic.w	r3, r3, #7
 800a83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4a15      	ldr	r2, [pc, #84]	; (800a898 <prvHeapInit+0xb4>)
 800a844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a846:	4b14      	ldr	r3, [pc, #80]	; (800a898 <prvHeapInit+0xb4>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2200      	movs	r2, #0
 800a84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a84e:	4b12      	ldr	r3, [pc, #72]	; (800a898 <prvHeapInit+0xb4>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	1ad2      	subs	r2, r2, r3
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a864:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <prvHeapInit+0xb4>)
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	4a0a      	ldr	r2, [pc, #40]	; (800a89c <prvHeapInit+0xb8>)
 800a872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	4a09      	ldr	r2, [pc, #36]	; (800a8a0 <prvHeapInit+0xbc>)
 800a87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a87c:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <prvHeapInit+0xc0>)
 800a87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a882:	601a      	str	r2, [r3, #0]
}
 800a884:	bf00      	nop
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20001700 	.word	0x20001700
 800a894:	200022b8 	.word	0x200022b8
 800a898:	200022c0 	.word	0x200022c0
 800a89c:	200022c8 	.word	0x200022c8
 800a8a0:	200022c4 	.word	0x200022c4
 800a8a4:	200022d4 	.word	0x200022d4

0800a8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8b0:	4b28      	ldr	r3, [pc, #160]	; (800a954 <prvInsertBlockIntoFreeList+0xac>)
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	e002      	b.n	800a8bc <prvInsertBlockIntoFreeList+0x14>
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d8f7      	bhi.n	800a8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d108      	bne.n	800a8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	441a      	add	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	441a      	add	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d118      	bne.n	800a930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	4b15      	ldr	r3, [pc, #84]	; (800a958 <prvInsertBlockIntoFreeList+0xb0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d00d      	beq.n	800a926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	441a      	add	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	e008      	b.n	800a938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a926:	4b0c      	ldr	r3, [pc, #48]	; (800a958 <prvInsertBlockIntoFreeList+0xb0>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	e003      	b.n	800a938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d002      	beq.n	800a946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	200022b8 	.word	0x200022b8
 800a958:	200022c0 	.word	0x200022c0
 800a95c:	00000000 	.word	0x00000000

0800a960 <log>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	ed2d 8b02 	vpush	{d8}
 800a966:	ec55 4b10 	vmov	r4, r5, d0
 800a96a:	f000 f8a9 	bl	800aac0 <__ieee754_log>
 800a96e:	4622      	mov	r2, r4
 800a970:	462b      	mov	r3, r5
 800a972:	4620      	mov	r0, r4
 800a974:	4629      	mov	r1, r5
 800a976:	eeb0 8a40 	vmov.f32	s16, s0
 800a97a:	eef0 8a60 	vmov.f32	s17, s1
 800a97e:	f7f6 f8ed 	bl	8000b5c <__aeabi_dcmpun>
 800a982:	b998      	cbnz	r0, 800a9ac <log+0x4c>
 800a984:	2200      	movs	r2, #0
 800a986:	2300      	movs	r3, #0
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7f6 f8dc 	bl	8000b48 <__aeabi_dcmpgt>
 800a990:	b960      	cbnz	r0, 800a9ac <log+0x4c>
 800a992:	2200      	movs	r2, #0
 800a994:	2300      	movs	r3, #0
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f6 f8ad 	bl	8000af8 <__aeabi_dcmpeq>
 800a99e:	b160      	cbz	r0, 800a9ba <log+0x5a>
 800a9a0:	f001 f8fc 	bl	800bb9c <__errno>
 800a9a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800a9d0 <log+0x70>
 800a9a8:	2322      	movs	r3, #34	; 0x22
 800a9aa:	6003      	str	r3, [r0, #0]
 800a9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b0:	eef0 0a68 	vmov.f32	s1, s17
 800a9b4:	ecbd 8b02 	vpop	{d8}
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	f001 f8ef 	bl	800bb9c <__errno>
 800a9be:	ecbd 8b02 	vpop	{d8}
 800a9c2:	2321      	movs	r3, #33	; 0x21
 800a9c4:	6003      	str	r3, [r0, #0]
 800a9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ca:	4803      	ldr	r0, [pc, #12]	; (800a9d8 <log+0x78>)
 800a9cc:	f001 b858 	b.w	800ba80 <nan>
 800a9d0:	00000000 	.word	0x00000000
 800a9d4:	fff00000 	.word	0xfff00000
 800a9d8:	0800eee8 	.word	0x0800eee8

0800a9dc <pow>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	ed2d 8b02 	vpush	{d8}
 800a9e2:	eeb0 8a40 	vmov.f32	s16, s0
 800a9e6:	eef0 8a60 	vmov.f32	s17, s1
 800a9ea:	ec55 4b11 	vmov	r4, r5, d1
 800a9ee:	f000 fa23 	bl	800ae38 <__ieee754_pow>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	ec57 6b10 	vmov	r6, r7, d0
 800a9fe:	f7f6 f8ad 	bl	8000b5c <__aeabi_dcmpun>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d13b      	bne.n	800aa7e <pow+0xa2>
 800aa06:	ec51 0b18 	vmov	r0, r1, d8
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f7f6 f873 	bl	8000af8 <__aeabi_dcmpeq>
 800aa12:	b1b8      	cbz	r0, 800aa44 <pow+0x68>
 800aa14:	2200      	movs	r2, #0
 800aa16:	2300      	movs	r3, #0
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f6 f86c 	bl	8000af8 <__aeabi_dcmpeq>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d146      	bne.n	800aab2 <pow+0xd6>
 800aa24:	ec45 4b10 	vmov	d0, r4, r5
 800aa28:	f001 f81f 	bl	800ba6a <finite>
 800aa2c:	b338      	cbz	r0, 800aa7e <pow+0xa2>
 800aa2e:	2200      	movs	r2, #0
 800aa30:	2300      	movs	r3, #0
 800aa32:	4620      	mov	r0, r4
 800aa34:	4629      	mov	r1, r5
 800aa36:	f7f6 f869 	bl	8000b0c <__aeabi_dcmplt>
 800aa3a:	b300      	cbz	r0, 800aa7e <pow+0xa2>
 800aa3c:	f001 f8ae 	bl	800bb9c <__errno>
 800aa40:	2322      	movs	r3, #34	; 0x22
 800aa42:	e01b      	b.n	800aa7c <pow+0xa0>
 800aa44:	ec47 6b10 	vmov	d0, r6, r7
 800aa48:	f001 f80f 	bl	800ba6a <finite>
 800aa4c:	b9e0      	cbnz	r0, 800aa88 <pow+0xac>
 800aa4e:	eeb0 0a48 	vmov.f32	s0, s16
 800aa52:	eef0 0a68 	vmov.f32	s1, s17
 800aa56:	f001 f808 	bl	800ba6a <finite>
 800aa5a:	b1a8      	cbz	r0, 800aa88 <pow+0xac>
 800aa5c:	ec45 4b10 	vmov	d0, r4, r5
 800aa60:	f001 f803 	bl	800ba6a <finite>
 800aa64:	b180      	cbz	r0, 800aa88 <pow+0xac>
 800aa66:	4632      	mov	r2, r6
 800aa68:	463b      	mov	r3, r7
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f6 f875 	bl	8000b5c <__aeabi_dcmpun>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0e2      	beq.n	800aa3c <pow+0x60>
 800aa76:	f001 f891 	bl	800bb9c <__errno>
 800aa7a:	2321      	movs	r3, #33	; 0x21
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	ecbd 8b02 	vpop	{d8}
 800aa82:	ec47 6b10 	vmov	d0, r6, r7
 800aa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f6 f832 	bl	8000af8 <__aeabi_dcmpeq>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d0f2      	beq.n	800aa7e <pow+0xa2>
 800aa98:	eeb0 0a48 	vmov.f32	s0, s16
 800aa9c:	eef0 0a68 	vmov.f32	s1, s17
 800aaa0:	f000 ffe3 	bl	800ba6a <finite>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d0ea      	beq.n	800aa7e <pow+0xa2>
 800aaa8:	ec45 4b10 	vmov	d0, r4, r5
 800aaac:	f000 ffdd 	bl	800ba6a <finite>
 800aab0:	e7c3      	b.n	800aa3a <pow+0x5e>
 800aab2:	4f01      	ldr	r7, [pc, #4]	; (800aab8 <pow+0xdc>)
 800aab4:	2600      	movs	r6, #0
 800aab6:	e7e2      	b.n	800aa7e <pow+0xa2>
 800aab8:	3ff00000 	.word	0x3ff00000
 800aabc:	00000000 	.word	0x00000000

0800aac0 <__ieee754_log>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	ec51 0b10 	vmov	r0, r1, d0
 800aac8:	ed2d 8b04 	vpush	{d8-d9}
 800aacc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800aad0:	b083      	sub	sp, #12
 800aad2:	460d      	mov	r5, r1
 800aad4:	da29      	bge.n	800ab2a <__ieee754_log+0x6a>
 800aad6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aada:	4303      	orrs	r3, r0
 800aadc:	ee10 2a10 	vmov	r2, s0
 800aae0:	d10c      	bne.n	800aafc <__ieee754_log+0x3c>
 800aae2:	49cf      	ldr	r1, [pc, #828]	; (800ae20 <__ieee754_log+0x360>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	2000      	movs	r0, #0
 800aaea:	f7f5 fec7 	bl	800087c <__aeabi_ddiv>
 800aaee:	ec41 0b10 	vmov	d0, r0, r1
 800aaf2:	b003      	add	sp, #12
 800aaf4:	ecbd 8b04 	vpop	{d8-d9}
 800aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafc:	2900      	cmp	r1, #0
 800aafe:	da05      	bge.n	800ab0c <__ieee754_log+0x4c>
 800ab00:	460b      	mov	r3, r1
 800ab02:	f7f5 fbd9 	bl	80002b8 <__aeabi_dsub>
 800ab06:	2200      	movs	r2, #0
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e7ee      	b.n	800aaea <__ieee754_log+0x2a>
 800ab0c:	4bc5      	ldr	r3, [pc, #788]	; (800ae24 <__ieee754_log+0x364>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f7f5 fd8a 	bl	8000628 <__aeabi_dmul>
 800ab14:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ab18:	460d      	mov	r5, r1
 800ab1a:	4ac3      	ldr	r2, [pc, #780]	; (800ae28 <__ieee754_log+0x368>)
 800ab1c:	4295      	cmp	r5, r2
 800ab1e:	dd06      	ble.n	800ab2e <__ieee754_log+0x6e>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	f7f5 fbca 	bl	80002bc <__adddf3>
 800ab28:	e7e1      	b.n	800aaee <__ieee754_log+0x2e>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e7f5      	b.n	800ab1a <__ieee754_log+0x5a>
 800ab2e:	152c      	asrs	r4, r5, #20
 800ab30:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ab34:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ab38:	441c      	add	r4, r3
 800ab3a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ab3e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ab42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab46:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ab4a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ab4e:	ea42 0105 	orr.w	r1, r2, r5
 800ab52:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ab56:	2200      	movs	r2, #0
 800ab58:	4bb4      	ldr	r3, [pc, #720]	; (800ae2c <__ieee754_log+0x36c>)
 800ab5a:	f7f5 fbad 	bl	80002b8 <__aeabi_dsub>
 800ab5e:	1cab      	adds	r3, r5, #2
 800ab60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	4682      	mov	sl, r0
 800ab68:	468b      	mov	fp, r1
 800ab6a:	f04f 0200 	mov.w	r2, #0
 800ab6e:	dc53      	bgt.n	800ac18 <__ieee754_log+0x158>
 800ab70:	2300      	movs	r3, #0
 800ab72:	f7f5 ffc1 	bl	8000af8 <__aeabi_dcmpeq>
 800ab76:	b1d0      	cbz	r0, 800abae <__ieee754_log+0xee>
 800ab78:	2c00      	cmp	r4, #0
 800ab7a:	f000 8122 	beq.w	800adc2 <__ieee754_log+0x302>
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f7f5 fce8 	bl	8000554 <__aeabi_i2d>
 800ab84:	a390      	add	r3, pc, #576	; (adr r3, 800adc8 <__ieee754_log+0x308>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	460f      	mov	r7, r1
 800ab8e:	f7f5 fd4b 	bl	8000628 <__aeabi_dmul>
 800ab92:	a38f      	add	r3, pc, #572	; (adr r3, 800add0 <__ieee754_log+0x310>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	4604      	mov	r4, r0
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	4639      	mov	r1, r7
 800aba0:	f7f5 fd42 	bl	8000628 <__aeabi_dmul>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4620      	mov	r0, r4
 800abaa:	4629      	mov	r1, r5
 800abac:	e7ba      	b.n	800ab24 <__ieee754_log+0x64>
 800abae:	a38a      	add	r3, pc, #552	; (adr r3, 800add8 <__ieee754_log+0x318>)
 800abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb4:	4650      	mov	r0, sl
 800abb6:	4659      	mov	r1, fp
 800abb8:	f7f5 fd36 	bl	8000628 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	2000      	movs	r0, #0
 800abc2:	499b      	ldr	r1, [pc, #620]	; (800ae30 <__ieee754_log+0x370>)
 800abc4:	f7f5 fb78 	bl	80002b8 <__aeabi_dsub>
 800abc8:	4652      	mov	r2, sl
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	465b      	mov	r3, fp
 800abd0:	4650      	mov	r0, sl
 800abd2:	4659      	mov	r1, fp
 800abd4:	f7f5 fd28 	bl	8000628 <__aeabi_dmul>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4630      	mov	r0, r6
 800abde:	4639      	mov	r1, r7
 800abe0:	f7f5 fd22 	bl	8000628 <__aeabi_dmul>
 800abe4:	4606      	mov	r6, r0
 800abe6:	460f      	mov	r7, r1
 800abe8:	b914      	cbnz	r4, 800abf0 <__ieee754_log+0x130>
 800abea:	4632      	mov	r2, r6
 800abec:	463b      	mov	r3, r7
 800abee:	e0a2      	b.n	800ad36 <__ieee754_log+0x276>
 800abf0:	4620      	mov	r0, r4
 800abf2:	f7f5 fcaf 	bl	8000554 <__aeabi_i2d>
 800abf6:	a374      	add	r3, pc, #464	; (adr r3, 800adc8 <__ieee754_log+0x308>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	4680      	mov	r8, r0
 800abfe:	4689      	mov	r9, r1
 800ac00:	f7f5 fd12 	bl	8000628 <__aeabi_dmul>
 800ac04:	a372      	add	r3, pc, #456	; (adr r3, 800add0 <__ieee754_log+0x310>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4649      	mov	r1, r9
 800ac12:	f7f5 fd09 	bl	8000628 <__aeabi_dmul>
 800ac16:	e0a7      	b.n	800ad68 <__ieee754_log+0x2a8>
 800ac18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac1c:	f7f5 fb4e 	bl	80002bc <__adddf3>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4650      	mov	r0, sl
 800ac26:	4659      	mov	r1, fp
 800ac28:	f7f5 fe28 	bl	800087c <__aeabi_ddiv>
 800ac2c:	ec41 0b18 	vmov	d8, r0, r1
 800ac30:	4620      	mov	r0, r4
 800ac32:	f7f5 fc8f 	bl	8000554 <__aeabi_i2d>
 800ac36:	ec53 2b18 	vmov	r2, r3, d8
 800ac3a:	ec41 0b19 	vmov	d9, r0, r1
 800ac3e:	ec51 0b18 	vmov	r0, r1, d8
 800ac42:	f7f5 fcf1 	bl	8000628 <__aeabi_dmul>
 800ac46:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ac4a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4680      	mov	r8, r0
 800ac56:	4689      	mov	r9, r1
 800ac58:	f7f5 fce6 	bl	8000628 <__aeabi_dmul>
 800ac5c:	a360      	add	r3, pc, #384	; (adr r3, 800ade0 <__ieee754_log+0x320>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	4606      	mov	r6, r0
 800ac64:	460f      	mov	r7, r1
 800ac66:	f7f5 fcdf 	bl	8000628 <__aeabi_dmul>
 800ac6a:	a35f      	add	r3, pc, #380	; (adr r3, 800ade8 <__ieee754_log+0x328>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fb24 	bl	80002bc <__adddf3>
 800ac74:	4632      	mov	r2, r6
 800ac76:	463b      	mov	r3, r7
 800ac78:	f7f5 fcd6 	bl	8000628 <__aeabi_dmul>
 800ac7c:	a35c      	add	r3, pc, #368	; (adr r3, 800adf0 <__ieee754_log+0x330>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f7f5 fb1b 	bl	80002bc <__adddf3>
 800ac86:	4632      	mov	r2, r6
 800ac88:	463b      	mov	r3, r7
 800ac8a:	f7f5 fccd 	bl	8000628 <__aeabi_dmul>
 800ac8e:	a35a      	add	r3, pc, #360	; (adr r3, 800adf8 <__ieee754_log+0x338>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f7f5 fb12 	bl	80002bc <__adddf3>
 800ac98:	4642      	mov	r2, r8
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	f7f5 fcc4 	bl	8000628 <__aeabi_dmul>
 800aca0:	a357      	add	r3, pc, #348	; (adr r3, 800ae00 <__ieee754_log+0x340>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	4680      	mov	r8, r0
 800aca8:	4689      	mov	r9, r1
 800acaa:	4630      	mov	r0, r6
 800acac:	4639      	mov	r1, r7
 800acae:	f7f5 fcbb 	bl	8000628 <__aeabi_dmul>
 800acb2:	a355      	add	r3, pc, #340	; (adr r3, 800ae08 <__ieee754_log+0x348>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 fb00 	bl	80002bc <__adddf3>
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	f7f5 fcb2 	bl	8000628 <__aeabi_dmul>
 800acc4:	a352      	add	r3, pc, #328	; (adr r3, 800ae10 <__ieee754_log+0x350>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	f7f5 faf7 	bl	80002bc <__adddf3>
 800acce:	4632      	mov	r2, r6
 800acd0:	463b      	mov	r3, r7
 800acd2:	f7f5 fca9 	bl	8000628 <__aeabi_dmul>
 800acd6:	460b      	mov	r3, r1
 800acd8:	4602      	mov	r2, r0
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	f7f5 faed 	bl	80002bc <__adddf3>
 800ace2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	3551      	adds	r5, #81	; 0x51
 800acea:	431d      	orrs	r5, r3
 800acec:	2d00      	cmp	r5, #0
 800acee:	4680      	mov	r8, r0
 800acf0:	4689      	mov	r9, r1
 800acf2:	dd48      	ble.n	800ad86 <__ieee754_log+0x2c6>
 800acf4:	4b4e      	ldr	r3, [pc, #312]	; (800ae30 <__ieee754_log+0x370>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	4650      	mov	r0, sl
 800acfa:	4659      	mov	r1, fp
 800acfc:	f7f5 fc94 	bl	8000628 <__aeabi_dmul>
 800ad00:	4652      	mov	r2, sl
 800ad02:	465b      	mov	r3, fp
 800ad04:	f7f5 fc90 	bl	8000628 <__aeabi_dmul>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	460f      	mov	r7, r1
 800ad10:	4640      	mov	r0, r8
 800ad12:	4649      	mov	r1, r9
 800ad14:	f7f5 fad2 	bl	80002bc <__adddf3>
 800ad18:	ec53 2b18 	vmov	r2, r3, d8
 800ad1c:	f7f5 fc84 	bl	8000628 <__aeabi_dmul>
 800ad20:	4680      	mov	r8, r0
 800ad22:	4689      	mov	r9, r1
 800ad24:	b964      	cbnz	r4, 800ad40 <__ieee754_log+0x280>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	f7f5 fac3 	bl	80002b8 <__aeabi_dsub>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4650      	mov	r0, sl
 800ad38:	4659      	mov	r1, fp
 800ad3a:	f7f5 fabd 	bl	80002b8 <__aeabi_dsub>
 800ad3e:	e6d6      	b.n	800aaee <__ieee754_log+0x2e>
 800ad40:	a321      	add	r3, pc, #132	; (adr r3, 800adc8 <__ieee754_log+0x308>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	ec51 0b19 	vmov	r0, r1, d9
 800ad4a:	f7f5 fc6d 	bl	8000628 <__aeabi_dmul>
 800ad4e:	a320      	add	r3, pc, #128	; (adr r3, 800add0 <__ieee754_log+0x310>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	4604      	mov	r4, r0
 800ad56:	460d      	mov	r5, r1
 800ad58:	ec51 0b19 	vmov	r0, r1, d9
 800ad5c:	f7f5 fc64 	bl	8000628 <__aeabi_dmul>
 800ad60:	4642      	mov	r2, r8
 800ad62:	464b      	mov	r3, r9
 800ad64:	f7f5 faaa 	bl	80002bc <__adddf3>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4639      	mov	r1, r7
 800ad70:	f7f5 faa2 	bl	80002b8 <__aeabi_dsub>
 800ad74:	4652      	mov	r2, sl
 800ad76:	465b      	mov	r3, fp
 800ad78:	f7f5 fa9e 	bl	80002b8 <__aeabi_dsub>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4620      	mov	r0, r4
 800ad82:	4629      	mov	r1, r5
 800ad84:	e7d9      	b.n	800ad3a <__ieee754_log+0x27a>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	f7f5 fa93 	bl	80002b8 <__aeabi_dsub>
 800ad92:	ec53 2b18 	vmov	r2, r3, d8
 800ad96:	f7f5 fc47 	bl	8000628 <__aeabi_dmul>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	2c00      	cmp	r4, #0
 800ada0:	f43f af23 	beq.w	800abea <__ieee754_log+0x12a>
 800ada4:	a308      	add	r3, pc, #32	; (adr r3, 800adc8 <__ieee754_log+0x308>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	ec51 0b19 	vmov	r0, r1, d9
 800adae:	f7f5 fc3b 	bl	8000628 <__aeabi_dmul>
 800adb2:	a307      	add	r3, pc, #28	; (adr r3, 800add0 <__ieee754_log+0x310>)
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	4604      	mov	r4, r0
 800adba:	460d      	mov	r5, r1
 800adbc:	ec51 0b19 	vmov	r0, r1, d9
 800adc0:	e727      	b.n	800ac12 <__ieee754_log+0x152>
 800adc2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ae18 <__ieee754_log+0x358>
 800adc6:	e694      	b.n	800aaf2 <__ieee754_log+0x32>
 800adc8:	fee00000 	.word	0xfee00000
 800adcc:	3fe62e42 	.word	0x3fe62e42
 800add0:	35793c76 	.word	0x35793c76
 800add4:	3dea39ef 	.word	0x3dea39ef
 800add8:	55555555 	.word	0x55555555
 800addc:	3fd55555 	.word	0x3fd55555
 800ade0:	df3e5244 	.word	0xdf3e5244
 800ade4:	3fc2f112 	.word	0x3fc2f112
 800ade8:	96cb03de 	.word	0x96cb03de
 800adec:	3fc74664 	.word	0x3fc74664
 800adf0:	94229359 	.word	0x94229359
 800adf4:	3fd24924 	.word	0x3fd24924
 800adf8:	55555593 	.word	0x55555593
 800adfc:	3fe55555 	.word	0x3fe55555
 800ae00:	d078c69f 	.word	0xd078c69f
 800ae04:	3fc39a09 	.word	0x3fc39a09
 800ae08:	1d8e78af 	.word	0x1d8e78af
 800ae0c:	3fcc71c5 	.word	0x3fcc71c5
 800ae10:	9997fa04 	.word	0x9997fa04
 800ae14:	3fd99999 	.word	0x3fd99999
	...
 800ae20:	c3500000 	.word	0xc3500000
 800ae24:	43500000 	.word	0x43500000
 800ae28:	7fefffff 	.word	0x7fefffff
 800ae2c:	3ff00000 	.word	0x3ff00000
 800ae30:	3fe00000 	.word	0x3fe00000
 800ae34:	00000000 	.word	0x00000000

0800ae38 <__ieee754_pow>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	ed2d 8b06 	vpush	{d8-d10}
 800ae40:	b089      	sub	sp, #36	; 0x24
 800ae42:	ed8d 1b00 	vstr	d1, [sp]
 800ae46:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ae4a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ae4e:	ea58 0102 	orrs.w	r1, r8, r2
 800ae52:	ec57 6b10 	vmov	r6, r7, d0
 800ae56:	d115      	bne.n	800ae84 <__ieee754_pow+0x4c>
 800ae58:	19b3      	adds	r3, r6, r6
 800ae5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ae5e:	4152      	adcs	r2, r2
 800ae60:	4299      	cmp	r1, r3
 800ae62:	4b89      	ldr	r3, [pc, #548]	; (800b088 <__ieee754_pow+0x250>)
 800ae64:	4193      	sbcs	r3, r2
 800ae66:	f080 84d2 	bcs.w	800b80e <__ieee754_pow+0x9d6>
 800ae6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4639      	mov	r1, r7
 800ae72:	f7f5 fa23 	bl	80002bc <__adddf3>
 800ae76:	ec41 0b10 	vmov	d0, r0, r1
 800ae7a:	b009      	add	sp, #36	; 0x24
 800ae7c:	ecbd 8b06 	vpop	{d8-d10}
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	4b81      	ldr	r3, [pc, #516]	; (800b08c <__ieee754_pow+0x254>)
 800ae86:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	ee10 aa10 	vmov	sl, s0
 800ae90:	463d      	mov	r5, r7
 800ae92:	dc06      	bgt.n	800aea2 <__ieee754_pow+0x6a>
 800ae94:	d101      	bne.n	800ae9a <__ieee754_pow+0x62>
 800ae96:	2e00      	cmp	r6, #0
 800ae98:	d1e7      	bne.n	800ae6a <__ieee754_pow+0x32>
 800ae9a:	4598      	cmp	r8, r3
 800ae9c:	dc01      	bgt.n	800aea2 <__ieee754_pow+0x6a>
 800ae9e:	d10f      	bne.n	800aec0 <__ieee754_pow+0x88>
 800aea0:	b172      	cbz	r2, 800aec0 <__ieee754_pow+0x88>
 800aea2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aea6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aeaa:	ea55 050a 	orrs.w	r5, r5, sl
 800aeae:	d1dc      	bne.n	800ae6a <__ieee754_pow+0x32>
 800aeb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aeb4:	18db      	adds	r3, r3, r3
 800aeb6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800aeba:	4152      	adcs	r2, r2
 800aebc:	429d      	cmp	r5, r3
 800aebe:	e7d0      	b.n	800ae62 <__ieee754_pow+0x2a>
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	da3b      	bge.n	800af3c <__ieee754_pow+0x104>
 800aec4:	4b72      	ldr	r3, [pc, #456]	; (800b090 <__ieee754_pow+0x258>)
 800aec6:	4598      	cmp	r8, r3
 800aec8:	dc51      	bgt.n	800af6e <__ieee754_pow+0x136>
 800aeca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800aece:	4598      	cmp	r8, r3
 800aed0:	f340 84ac 	ble.w	800b82c <__ieee754_pow+0x9f4>
 800aed4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aed8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aedc:	2b14      	cmp	r3, #20
 800aede:	dd0f      	ble.n	800af00 <__ieee754_pow+0xc8>
 800aee0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aee4:	fa22 f103 	lsr.w	r1, r2, r3
 800aee8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeec:	4293      	cmp	r3, r2
 800aeee:	f040 849d 	bne.w	800b82c <__ieee754_pow+0x9f4>
 800aef2:	f001 0101 	and.w	r1, r1, #1
 800aef6:	f1c1 0302 	rsb	r3, r1, #2
 800aefa:	9304      	str	r3, [sp, #16]
 800aefc:	b182      	cbz	r2, 800af20 <__ieee754_pow+0xe8>
 800aefe:	e05f      	b.n	800afc0 <__ieee754_pow+0x188>
 800af00:	2a00      	cmp	r2, #0
 800af02:	d15b      	bne.n	800afbc <__ieee754_pow+0x184>
 800af04:	f1c3 0314 	rsb	r3, r3, #20
 800af08:	fa48 f103 	asr.w	r1, r8, r3
 800af0c:	fa01 f303 	lsl.w	r3, r1, r3
 800af10:	4543      	cmp	r3, r8
 800af12:	f040 8488 	bne.w	800b826 <__ieee754_pow+0x9ee>
 800af16:	f001 0101 	and.w	r1, r1, #1
 800af1a:	f1c1 0302 	rsb	r3, r1, #2
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	4b5c      	ldr	r3, [pc, #368]	; (800b094 <__ieee754_pow+0x25c>)
 800af22:	4598      	cmp	r8, r3
 800af24:	d132      	bne.n	800af8c <__ieee754_pow+0x154>
 800af26:	f1b9 0f00 	cmp.w	r9, #0
 800af2a:	f280 8478 	bge.w	800b81e <__ieee754_pow+0x9e6>
 800af2e:	4959      	ldr	r1, [pc, #356]	; (800b094 <__ieee754_pow+0x25c>)
 800af30:	4632      	mov	r2, r6
 800af32:	463b      	mov	r3, r7
 800af34:	2000      	movs	r0, #0
 800af36:	f7f5 fca1 	bl	800087c <__aeabi_ddiv>
 800af3a:	e79c      	b.n	800ae76 <__ieee754_pow+0x3e>
 800af3c:	2300      	movs	r3, #0
 800af3e:	9304      	str	r3, [sp, #16]
 800af40:	2a00      	cmp	r2, #0
 800af42:	d13d      	bne.n	800afc0 <__ieee754_pow+0x188>
 800af44:	4b51      	ldr	r3, [pc, #324]	; (800b08c <__ieee754_pow+0x254>)
 800af46:	4598      	cmp	r8, r3
 800af48:	d1ea      	bne.n	800af20 <__ieee754_pow+0xe8>
 800af4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800af4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af52:	ea53 030a 	orrs.w	r3, r3, sl
 800af56:	f000 845a 	beq.w	800b80e <__ieee754_pow+0x9d6>
 800af5a:	4b4f      	ldr	r3, [pc, #316]	; (800b098 <__ieee754_pow+0x260>)
 800af5c:	429c      	cmp	r4, r3
 800af5e:	dd08      	ble.n	800af72 <__ieee754_pow+0x13a>
 800af60:	f1b9 0f00 	cmp.w	r9, #0
 800af64:	f2c0 8457 	blt.w	800b816 <__ieee754_pow+0x9de>
 800af68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af6c:	e783      	b.n	800ae76 <__ieee754_pow+0x3e>
 800af6e:	2302      	movs	r3, #2
 800af70:	e7e5      	b.n	800af3e <__ieee754_pow+0x106>
 800af72:	f1b9 0f00 	cmp.w	r9, #0
 800af76:	f04f 0000 	mov.w	r0, #0
 800af7a:	f04f 0100 	mov.w	r1, #0
 800af7e:	f6bf af7a 	bge.w	800ae76 <__ieee754_pow+0x3e>
 800af82:	e9dd 0300 	ldrd	r0, r3, [sp]
 800af86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800af8a:	e774      	b.n	800ae76 <__ieee754_pow+0x3e>
 800af8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800af90:	d106      	bne.n	800afa0 <__ieee754_pow+0x168>
 800af92:	4632      	mov	r2, r6
 800af94:	463b      	mov	r3, r7
 800af96:	4630      	mov	r0, r6
 800af98:	4639      	mov	r1, r7
 800af9a:	f7f5 fb45 	bl	8000628 <__aeabi_dmul>
 800af9e:	e76a      	b.n	800ae76 <__ieee754_pow+0x3e>
 800afa0:	4b3e      	ldr	r3, [pc, #248]	; (800b09c <__ieee754_pow+0x264>)
 800afa2:	4599      	cmp	r9, r3
 800afa4:	d10c      	bne.n	800afc0 <__ieee754_pow+0x188>
 800afa6:	2d00      	cmp	r5, #0
 800afa8:	db0a      	blt.n	800afc0 <__ieee754_pow+0x188>
 800afaa:	ec47 6b10 	vmov	d0, r6, r7
 800afae:	b009      	add	sp, #36	; 0x24
 800afb0:	ecbd 8b06 	vpop	{d8-d10}
 800afb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	f000 bc6c 	b.w	800b894 <__ieee754_sqrt>
 800afbc:	2300      	movs	r3, #0
 800afbe:	9304      	str	r3, [sp, #16]
 800afc0:	ec47 6b10 	vmov	d0, r6, r7
 800afc4:	f000 fd48 	bl	800ba58 <fabs>
 800afc8:	ec51 0b10 	vmov	r0, r1, d0
 800afcc:	f1ba 0f00 	cmp.w	sl, #0
 800afd0:	d129      	bne.n	800b026 <__ieee754_pow+0x1ee>
 800afd2:	b124      	cbz	r4, 800afde <__ieee754_pow+0x1a6>
 800afd4:	4b2f      	ldr	r3, [pc, #188]	; (800b094 <__ieee754_pow+0x25c>)
 800afd6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800afda:	429a      	cmp	r2, r3
 800afdc:	d123      	bne.n	800b026 <__ieee754_pow+0x1ee>
 800afde:	f1b9 0f00 	cmp.w	r9, #0
 800afe2:	da05      	bge.n	800aff0 <__ieee754_pow+0x1b8>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	2000      	movs	r0, #0
 800afea:	492a      	ldr	r1, [pc, #168]	; (800b094 <__ieee754_pow+0x25c>)
 800afec:	f7f5 fc46 	bl	800087c <__aeabi_ddiv>
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	f6bf af40 	bge.w	800ae76 <__ieee754_pow+0x3e>
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800affc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b000:	4323      	orrs	r3, r4
 800b002:	d108      	bne.n	800b016 <__ieee754_pow+0x1de>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4610      	mov	r0, r2
 800b00a:	4619      	mov	r1, r3
 800b00c:	f7f5 f954 	bl	80002b8 <__aeabi_dsub>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	e78f      	b.n	800af36 <__ieee754_pow+0xfe>
 800b016:	9b04      	ldr	r3, [sp, #16]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	f47f af2c 	bne.w	800ae76 <__ieee754_pow+0x3e>
 800b01e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b022:	4619      	mov	r1, r3
 800b024:	e727      	b.n	800ae76 <__ieee754_pow+0x3e>
 800b026:	0feb      	lsrs	r3, r5, #31
 800b028:	3b01      	subs	r3, #1
 800b02a:	9306      	str	r3, [sp, #24]
 800b02c:	9a06      	ldr	r2, [sp, #24]
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	4313      	orrs	r3, r2
 800b032:	d102      	bne.n	800b03a <__ieee754_pow+0x202>
 800b034:	4632      	mov	r2, r6
 800b036:	463b      	mov	r3, r7
 800b038:	e7e6      	b.n	800b008 <__ieee754_pow+0x1d0>
 800b03a:	4b19      	ldr	r3, [pc, #100]	; (800b0a0 <__ieee754_pow+0x268>)
 800b03c:	4598      	cmp	r8, r3
 800b03e:	f340 80fb 	ble.w	800b238 <__ieee754_pow+0x400>
 800b042:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b046:	4598      	cmp	r8, r3
 800b048:	4b13      	ldr	r3, [pc, #76]	; (800b098 <__ieee754_pow+0x260>)
 800b04a:	dd0c      	ble.n	800b066 <__ieee754_pow+0x22e>
 800b04c:	429c      	cmp	r4, r3
 800b04e:	dc0f      	bgt.n	800b070 <__ieee754_pow+0x238>
 800b050:	f1b9 0f00 	cmp.w	r9, #0
 800b054:	da0f      	bge.n	800b076 <__ieee754_pow+0x23e>
 800b056:	2000      	movs	r0, #0
 800b058:	b009      	add	sp, #36	; 0x24
 800b05a:	ecbd 8b06 	vpop	{d8-d10}
 800b05e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b062:	f000 bcf0 	b.w	800ba46 <__math_oflow>
 800b066:	429c      	cmp	r4, r3
 800b068:	dbf2      	blt.n	800b050 <__ieee754_pow+0x218>
 800b06a:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <__ieee754_pow+0x25c>)
 800b06c:	429c      	cmp	r4, r3
 800b06e:	dd19      	ble.n	800b0a4 <__ieee754_pow+0x26c>
 800b070:	f1b9 0f00 	cmp.w	r9, #0
 800b074:	dcef      	bgt.n	800b056 <__ieee754_pow+0x21e>
 800b076:	2000      	movs	r0, #0
 800b078:	b009      	add	sp, #36	; 0x24
 800b07a:	ecbd 8b06 	vpop	{d8-d10}
 800b07e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b082:	f000 bcd7 	b.w	800ba34 <__math_uflow>
 800b086:	bf00      	nop
 800b088:	fff00000 	.word	0xfff00000
 800b08c:	7ff00000 	.word	0x7ff00000
 800b090:	433fffff 	.word	0x433fffff
 800b094:	3ff00000 	.word	0x3ff00000
 800b098:	3fefffff 	.word	0x3fefffff
 800b09c:	3fe00000 	.word	0x3fe00000
 800b0a0:	41e00000 	.word	0x41e00000
 800b0a4:	4b60      	ldr	r3, [pc, #384]	; (800b228 <__ieee754_pow+0x3f0>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f7f5 f906 	bl	80002b8 <__aeabi_dsub>
 800b0ac:	a354      	add	r3, pc, #336	; (adr r3, 800b200 <__ieee754_pow+0x3c8>)
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	460d      	mov	r5, r1
 800b0b6:	f7f5 fab7 	bl	8000628 <__aeabi_dmul>
 800b0ba:	a353      	add	r3, pc, #332	; (adr r3, 800b208 <__ieee754_pow+0x3d0>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	f7f5 faae 	bl	8000628 <__aeabi_dmul>
 800b0cc:	4b57      	ldr	r3, [pc, #348]	; (800b22c <__ieee754_pow+0x3f4>)
 800b0ce:	4682      	mov	sl, r0
 800b0d0:	468b      	mov	fp, r1
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	f7f5 faa6 	bl	8000628 <__aeabi_dmul>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	a14b      	add	r1, pc, #300	; (adr r1, 800b210 <__ieee754_pow+0x3d8>)
 800b0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0e6:	f7f5 f8e7 	bl	80002b8 <__aeabi_dsub>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	f7f5 fa9b 	bl	8000628 <__aeabi_dmul>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	494d      	ldr	r1, [pc, #308]	; (800b230 <__ieee754_pow+0x3f8>)
 800b0fa:	f7f5 f8dd 	bl	80002b8 <__aeabi_dsub>
 800b0fe:	4622      	mov	r2, r4
 800b100:	4680      	mov	r8, r0
 800b102:	4689      	mov	r9, r1
 800b104:	462b      	mov	r3, r5
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 fa8d 	bl	8000628 <__aeabi_dmul>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	4640      	mov	r0, r8
 800b114:	4649      	mov	r1, r9
 800b116:	f7f5 fa87 	bl	8000628 <__aeabi_dmul>
 800b11a:	a33f      	add	r3, pc, #252	; (adr r3, 800b218 <__ieee754_pow+0x3e0>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	f7f5 fa82 	bl	8000628 <__aeabi_dmul>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	f7f5 f8c4 	bl	80002b8 <__aeabi_dsub>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4680      	mov	r8, r0
 800b136:	4689      	mov	r9, r1
 800b138:	4630      	mov	r0, r6
 800b13a:	4639      	mov	r1, r7
 800b13c:	f7f5 f8be 	bl	80002bc <__adddf3>
 800b140:	2000      	movs	r0, #0
 800b142:	4632      	mov	r2, r6
 800b144:	463b      	mov	r3, r7
 800b146:	4604      	mov	r4, r0
 800b148:	460d      	mov	r5, r1
 800b14a:	f7f5 f8b5 	bl	80002b8 <__aeabi_dsub>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4640      	mov	r0, r8
 800b154:	4649      	mov	r1, r9
 800b156:	f7f5 f8af 	bl	80002b8 <__aeabi_dsub>
 800b15a:	9b04      	ldr	r3, [sp, #16]
 800b15c:	9a06      	ldr	r2, [sp, #24]
 800b15e:	3b01      	subs	r3, #1
 800b160:	4313      	orrs	r3, r2
 800b162:	4682      	mov	sl, r0
 800b164:	468b      	mov	fp, r1
 800b166:	f040 81e7 	bne.w	800b538 <__ieee754_pow+0x700>
 800b16a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b220 <__ieee754_pow+0x3e8>
 800b16e:	eeb0 8a47 	vmov.f32	s16, s14
 800b172:	eef0 8a67 	vmov.f32	s17, s15
 800b176:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b17a:	2600      	movs	r6, #0
 800b17c:	4632      	mov	r2, r6
 800b17e:	463b      	mov	r3, r7
 800b180:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b184:	f7f5 f898 	bl	80002b8 <__aeabi_dsub>
 800b188:	4622      	mov	r2, r4
 800b18a:	462b      	mov	r3, r5
 800b18c:	f7f5 fa4c 	bl	8000628 <__aeabi_dmul>
 800b190:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b194:	4680      	mov	r8, r0
 800b196:	4689      	mov	r9, r1
 800b198:	4650      	mov	r0, sl
 800b19a:	4659      	mov	r1, fp
 800b19c:	f7f5 fa44 	bl	8000628 <__aeabi_dmul>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	f7f5 f888 	bl	80002bc <__adddf3>
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	463b      	mov	r3, r7
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	4689      	mov	r9, r1
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	f7f5 fa36 	bl	8000628 <__aeabi_dmul>
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4604      	mov	r4, r0
 800b1c0:	460d      	mov	r5, r1
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	f7f5 f878 	bl	80002bc <__adddf3>
 800b1cc:	4b19      	ldr	r3, [pc, #100]	; (800b234 <__ieee754_pow+0x3fc>)
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	ec45 4b19 	vmov	d9, r4, r5
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	460f      	mov	r7, r1
 800b1d8:	468b      	mov	fp, r1
 800b1da:	f340 82f1 	ble.w	800b7c0 <__ieee754_pow+0x988>
 800b1de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b1e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b1e6:	4303      	orrs	r3, r0
 800b1e8:	f000 81e4 	beq.w	800b5b4 <__ieee754_pow+0x77c>
 800b1ec:	ec51 0b18 	vmov	r0, r1, d8
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f7f5 fc8a 	bl	8000b0c <__aeabi_dcmplt>
 800b1f8:	3800      	subs	r0, #0
 800b1fa:	bf18      	it	ne
 800b1fc:	2001      	movne	r0, #1
 800b1fe:	e72b      	b.n	800b058 <__ieee754_pow+0x220>
 800b200:	60000000 	.word	0x60000000
 800b204:	3ff71547 	.word	0x3ff71547
 800b208:	f85ddf44 	.word	0xf85ddf44
 800b20c:	3e54ae0b 	.word	0x3e54ae0b
 800b210:	55555555 	.word	0x55555555
 800b214:	3fd55555 	.word	0x3fd55555
 800b218:	652b82fe 	.word	0x652b82fe
 800b21c:	3ff71547 	.word	0x3ff71547
 800b220:	00000000 	.word	0x00000000
 800b224:	bff00000 	.word	0xbff00000
 800b228:	3ff00000 	.word	0x3ff00000
 800b22c:	3fd00000 	.word	0x3fd00000
 800b230:	3fe00000 	.word	0x3fe00000
 800b234:	408fffff 	.word	0x408fffff
 800b238:	4bd5      	ldr	r3, [pc, #852]	; (800b590 <__ieee754_pow+0x758>)
 800b23a:	402b      	ands	r3, r5
 800b23c:	2200      	movs	r2, #0
 800b23e:	b92b      	cbnz	r3, 800b24c <__ieee754_pow+0x414>
 800b240:	4bd4      	ldr	r3, [pc, #848]	; (800b594 <__ieee754_pow+0x75c>)
 800b242:	f7f5 f9f1 	bl	8000628 <__aeabi_dmul>
 800b246:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b24a:	460c      	mov	r4, r1
 800b24c:	1523      	asrs	r3, r4, #20
 800b24e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b252:	4413      	add	r3, r2
 800b254:	9305      	str	r3, [sp, #20]
 800b256:	4bd0      	ldr	r3, [pc, #832]	; (800b598 <__ieee754_pow+0x760>)
 800b258:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b25c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b260:	429c      	cmp	r4, r3
 800b262:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b266:	dd08      	ble.n	800b27a <__ieee754_pow+0x442>
 800b268:	4bcc      	ldr	r3, [pc, #816]	; (800b59c <__ieee754_pow+0x764>)
 800b26a:	429c      	cmp	r4, r3
 800b26c:	f340 8162 	ble.w	800b534 <__ieee754_pow+0x6fc>
 800b270:	9b05      	ldr	r3, [sp, #20]
 800b272:	3301      	adds	r3, #1
 800b274:	9305      	str	r3, [sp, #20]
 800b276:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b27a:	2400      	movs	r4, #0
 800b27c:	00e3      	lsls	r3, r4, #3
 800b27e:	9307      	str	r3, [sp, #28]
 800b280:	4bc7      	ldr	r3, [pc, #796]	; (800b5a0 <__ieee754_pow+0x768>)
 800b282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b286:	ed93 7b00 	vldr	d7, [r3]
 800b28a:	4629      	mov	r1, r5
 800b28c:	ec53 2b17 	vmov	r2, r3, d7
 800b290:	eeb0 9a47 	vmov.f32	s18, s14
 800b294:	eef0 9a67 	vmov.f32	s19, s15
 800b298:	4682      	mov	sl, r0
 800b29a:	f7f5 f80d 	bl	80002b8 <__aeabi_dsub>
 800b29e:	4652      	mov	r2, sl
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	462b      	mov	r3, r5
 800b2a6:	ec51 0b19 	vmov	r0, r1, d9
 800b2aa:	f7f5 f807 	bl	80002bc <__adddf3>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	49bb      	ldr	r1, [pc, #748]	; (800b5a4 <__ieee754_pow+0x76c>)
 800b2b6:	f7f5 fae1 	bl	800087c <__aeabi_ddiv>
 800b2ba:	ec41 0b1a 	vmov	d10, r0, r1
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 f9af 	bl	8000628 <__aeabi_dmul>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2d6:	46ab      	mov	fp, r5
 800b2d8:	106d      	asrs	r5, r5, #1
 800b2da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b2de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b2e2:	ec41 0b18 	vmov	d8, r0, r1
 800b2e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	4614      	mov	r4, r2
 800b2f2:	461d      	mov	r5, r3
 800b2f4:	f7f5 f998 	bl	8000628 <__aeabi_dmul>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f4 ffda 	bl	80002b8 <__aeabi_dsub>
 800b304:	ec53 2b19 	vmov	r2, r3, d9
 800b308:	4606      	mov	r6, r0
 800b30a:	460f      	mov	r7, r1
 800b30c:	4620      	mov	r0, r4
 800b30e:	4629      	mov	r1, r5
 800b310:	f7f4 ffd2 	bl	80002b8 <__aeabi_dsub>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4650      	mov	r0, sl
 800b31a:	4659      	mov	r1, fp
 800b31c:	f7f4 ffcc 	bl	80002b8 <__aeabi_dsub>
 800b320:	4642      	mov	r2, r8
 800b322:	464b      	mov	r3, r9
 800b324:	f7f5 f980 	bl	8000628 <__aeabi_dmul>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f4 ffc2 	bl	80002b8 <__aeabi_dsub>
 800b334:	ec53 2b1a 	vmov	r2, r3, d10
 800b338:	f7f5 f976 	bl	8000628 <__aeabi_dmul>
 800b33c:	ec53 2b18 	vmov	r2, r3, d8
 800b340:	ec41 0b19 	vmov	d9, r0, r1
 800b344:	ec51 0b18 	vmov	r0, r1, d8
 800b348:	f7f5 f96e 	bl	8000628 <__aeabi_dmul>
 800b34c:	a37c      	add	r3, pc, #496	; (adr r3, 800b540 <__ieee754_pow+0x708>)
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	4604      	mov	r4, r0
 800b354:	460d      	mov	r5, r1
 800b356:	f7f5 f967 	bl	8000628 <__aeabi_dmul>
 800b35a:	a37b      	add	r3, pc, #492	; (adr r3, 800b548 <__ieee754_pow+0x710>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f4 ffac 	bl	80002bc <__adddf3>
 800b364:	4622      	mov	r2, r4
 800b366:	462b      	mov	r3, r5
 800b368:	f7f5 f95e 	bl	8000628 <__aeabi_dmul>
 800b36c:	a378      	add	r3, pc, #480	; (adr r3, 800b550 <__ieee754_pow+0x718>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f7f4 ffa3 	bl	80002bc <__adddf3>
 800b376:	4622      	mov	r2, r4
 800b378:	462b      	mov	r3, r5
 800b37a:	f7f5 f955 	bl	8000628 <__aeabi_dmul>
 800b37e:	a376      	add	r3, pc, #472	; (adr r3, 800b558 <__ieee754_pow+0x720>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f7f4 ff9a 	bl	80002bc <__adddf3>
 800b388:	4622      	mov	r2, r4
 800b38a:	462b      	mov	r3, r5
 800b38c:	f7f5 f94c 	bl	8000628 <__aeabi_dmul>
 800b390:	a373      	add	r3, pc, #460	; (adr r3, 800b560 <__ieee754_pow+0x728>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff91 	bl	80002bc <__adddf3>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	f7f5 f943 	bl	8000628 <__aeabi_dmul>
 800b3a2:	a371      	add	r3, pc, #452	; (adr r3, 800b568 <__ieee754_pow+0x730>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff88 	bl	80002bc <__adddf3>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	460f      	mov	r7, r1
 800b3b2:	462b      	mov	r3, r5
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	f7f5 f936 	bl	8000628 <__aeabi_dmul>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f5 f930 	bl	8000628 <__aeabi_dmul>
 800b3c8:	4642      	mov	r2, r8
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	460d      	mov	r5, r1
 800b3ce:	464b      	mov	r3, r9
 800b3d0:	ec51 0b18 	vmov	r0, r1, d8
 800b3d4:	f7f4 ff72 	bl	80002bc <__adddf3>
 800b3d8:	ec53 2b19 	vmov	r2, r3, d9
 800b3dc:	f7f5 f924 	bl	8000628 <__aeabi_dmul>
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f7f4 ff6a 	bl	80002bc <__adddf3>
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	4682      	mov	sl, r0
 800b3ec:	468b      	mov	fp, r1
 800b3ee:	464b      	mov	r3, r9
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	f7f5 f918 	bl	8000628 <__aeabi_dmul>
 800b3f8:	4b6b      	ldr	r3, [pc, #428]	; (800b5a8 <__ieee754_pow+0x770>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	460f      	mov	r7, r1
 800b400:	f7f4 ff5c 	bl	80002bc <__adddf3>
 800b404:	4652      	mov	r2, sl
 800b406:	465b      	mov	r3, fp
 800b408:	f7f4 ff58 	bl	80002bc <__adddf3>
 800b40c:	2000      	movs	r0, #0
 800b40e:	4604      	mov	r4, r0
 800b410:	460d      	mov	r5, r1
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	4640      	mov	r0, r8
 800b418:	4649      	mov	r1, r9
 800b41a:	f7f5 f905 	bl	8000628 <__aeabi_dmul>
 800b41e:	4b62      	ldr	r3, [pc, #392]	; (800b5a8 <__ieee754_pow+0x770>)
 800b420:	4680      	mov	r8, r0
 800b422:	4689      	mov	r9, r1
 800b424:	2200      	movs	r2, #0
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f4 ff45 	bl	80002b8 <__aeabi_dsub>
 800b42e:	4632      	mov	r2, r6
 800b430:	463b      	mov	r3, r7
 800b432:	f7f4 ff41 	bl	80002b8 <__aeabi_dsub>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4650      	mov	r0, sl
 800b43c:	4659      	mov	r1, fp
 800b43e:	f7f4 ff3b 	bl	80002b8 <__aeabi_dsub>
 800b442:	ec53 2b18 	vmov	r2, r3, d8
 800b446:	f7f5 f8ef 	bl	8000628 <__aeabi_dmul>
 800b44a:	4622      	mov	r2, r4
 800b44c:	4606      	mov	r6, r0
 800b44e:	460f      	mov	r7, r1
 800b450:	462b      	mov	r3, r5
 800b452:	ec51 0b19 	vmov	r0, r1, d9
 800b456:	f7f5 f8e7 	bl	8000628 <__aeabi_dmul>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4630      	mov	r0, r6
 800b460:	4639      	mov	r1, r7
 800b462:	f7f4 ff2b 	bl	80002bc <__adddf3>
 800b466:	4606      	mov	r6, r0
 800b468:	460f      	mov	r7, r1
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f4 ff23 	bl	80002bc <__adddf3>
 800b476:	a33e      	add	r3, pc, #248	; (adr r3, 800b570 <__ieee754_pow+0x738>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	2000      	movs	r0, #0
 800b47e:	4604      	mov	r4, r0
 800b480:	460d      	mov	r5, r1
 800b482:	f7f5 f8d1 	bl	8000628 <__aeabi_dmul>
 800b486:	4642      	mov	r2, r8
 800b488:	ec41 0b18 	vmov	d8, r0, r1
 800b48c:	464b      	mov	r3, r9
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f4 ff11 	bl	80002b8 <__aeabi_dsub>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	4630      	mov	r0, r6
 800b49c:	4639      	mov	r1, r7
 800b49e:	f7f4 ff0b 	bl	80002b8 <__aeabi_dsub>
 800b4a2:	a335      	add	r3, pc, #212	; (adr r3, 800b578 <__ieee754_pow+0x740>)
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f7f5 f8be 	bl	8000628 <__aeabi_dmul>
 800b4ac:	a334      	add	r3, pc, #208	; (adr r3, 800b580 <__ieee754_pow+0x748>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	f7f5 f8b5 	bl	8000628 <__aeabi_dmul>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	f7f4 fef9 	bl	80002bc <__adddf3>
 800b4ca:	9a07      	ldr	r2, [sp, #28]
 800b4cc:	4b37      	ldr	r3, [pc, #220]	; (800b5ac <__ieee754_pow+0x774>)
 800b4ce:	4413      	add	r3, r2
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f4 fef2 	bl	80002bc <__adddf3>
 800b4d8:	4682      	mov	sl, r0
 800b4da:	9805      	ldr	r0, [sp, #20]
 800b4dc:	468b      	mov	fp, r1
 800b4de:	f7f5 f839 	bl	8000554 <__aeabi_i2d>
 800b4e2:	9a07      	ldr	r2, [sp, #28]
 800b4e4:	4b32      	ldr	r3, [pc, #200]	; (800b5b0 <__ieee754_pow+0x778>)
 800b4e6:	4413      	add	r3, r2
 800b4e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	460f      	mov	r7, r1
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	ec51 0b18 	vmov	r0, r1, d8
 800b4f8:	f7f4 fee0 	bl	80002bc <__adddf3>
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	464b      	mov	r3, r9
 800b500:	f7f4 fedc 	bl	80002bc <__adddf3>
 800b504:	4632      	mov	r2, r6
 800b506:	463b      	mov	r3, r7
 800b508:	f7f4 fed8 	bl	80002bc <__adddf3>
 800b50c:	2000      	movs	r0, #0
 800b50e:	4632      	mov	r2, r6
 800b510:	463b      	mov	r3, r7
 800b512:	4604      	mov	r4, r0
 800b514:	460d      	mov	r5, r1
 800b516:	f7f4 fecf 	bl	80002b8 <__aeabi_dsub>
 800b51a:	4642      	mov	r2, r8
 800b51c:	464b      	mov	r3, r9
 800b51e:	f7f4 fecb 	bl	80002b8 <__aeabi_dsub>
 800b522:	ec53 2b18 	vmov	r2, r3, d8
 800b526:	f7f4 fec7 	bl	80002b8 <__aeabi_dsub>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4650      	mov	r0, sl
 800b530:	4659      	mov	r1, fp
 800b532:	e610      	b.n	800b156 <__ieee754_pow+0x31e>
 800b534:	2401      	movs	r4, #1
 800b536:	e6a1      	b.n	800b27c <__ieee754_pow+0x444>
 800b538:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b588 <__ieee754_pow+0x750>
 800b53c:	e617      	b.n	800b16e <__ieee754_pow+0x336>
 800b53e:	bf00      	nop
 800b540:	4a454eef 	.word	0x4a454eef
 800b544:	3fca7e28 	.word	0x3fca7e28
 800b548:	93c9db65 	.word	0x93c9db65
 800b54c:	3fcd864a 	.word	0x3fcd864a
 800b550:	a91d4101 	.word	0xa91d4101
 800b554:	3fd17460 	.word	0x3fd17460
 800b558:	518f264d 	.word	0x518f264d
 800b55c:	3fd55555 	.word	0x3fd55555
 800b560:	db6fabff 	.word	0xdb6fabff
 800b564:	3fdb6db6 	.word	0x3fdb6db6
 800b568:	33333303 	.word	0x33333303
 800b56c:	3fe33333 	.word	0x3fe33333
 800b570:	e0000000 	.word	0xe0000000
 800b574:	3feec709 	.word	0x3feec709
 800b578:	dc3a03fd 	.word	0xdc3a03fd
 800b57c:	3feec709 	.word	0x3feec709
 800b580:	145b01f5 	.word	0x145b01f5
 800b584:	be3e2fe0 	.word	0xbe3e2fe0
 800b588:	00000000 	.word	0x00000000
 800b58c:	3ff00000 	.word	0x3ff00000
 800b590:	7ff00000 	.word	0x7ff00000
 800b594:	43400000 	.word	0x43400000
 800b598:	0003988e 	.word	0x0003988e
 800b59c:	000bb679 	.word	0x000bb679
 800b5a0:	0800ebe8 	.word	0x0800ebe8
 800b5a4:	3ff00000 	.word	0x3ff00000
 800b5a8:	40080000 	.word	0x40080000
 800b5ac:	0800ec08 	.word	0x0800ec08
 800b5b0:	0800ebf8 	.word	0x0800ebf8
 800b5b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b88c <__ieee754_pow+0xa54>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4649      	mov	r1, r9
 800b5be:	f7f4 fe7d 	bl	80002bc <__adddf3>
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	ec41 0b1a 	vmov	d10, r0, r1
 800b5c8:	462b      	mov	r3, r5
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f4 fe73 	bl	80002b8 <__aeabi_dsub>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	ec51 0b1a 	vmov	r0, r1, d10
 800b5da:	f7f5 fab5 	bl	8000b48 <__aeabi_dcmpgt>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	f47f ae04 	bne.w	800b1ec <__ieee754_pow+0x3b4>
 800b5e4:	4aa4      	ldr	r2, [pc, #656]	; (800b878 <__ieee754_pow+0xa40>)
 800b5e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	f340 8108 	ble.w	800b800 <__ieee754_pow+0x9c8>
 800b5f0:	151b      	asrs	r3, r3, #20
 800b5f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b5f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b5fa:	fa4a f303 	asr.w	r3, sl, r3
 800b5fe:	445b      	add	r3, fp
 800b600:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b604:	4e9d      	ldr	r6, [pc, #628]	; (800b87c <__ieee754_pow+0xa44>)
 800b606:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b60a:	4116      	asrs	r6, r2
 800b60c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b610:	2000      	movs	r0, #0
 800b612:	ea23 0106 	bic.w	r1, r3, r6
 800b616:	f1c2 0214 	rsb	r2, r2, #20
 800b61a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b61e:	fa4a fa02 	asr.w	sl, sl, r2
 800b622:	f1bb 0f00 	cmp.w	fp, #0
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4620      	mov	r0, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	bfb8      	it	lt
 800b630:	f1ca 0a00 	rsblt	sl, sl, #0
 800b634:	f7f4 fe40 	bl	80002b8 <__aeabi_dsub>
 800b638:	ec41 0b19 	vmov	d9, r0, r1
 800b63c:	4642      	mov	r2, r8
 800b63e:	464b      	mov	r3, r9
 800b640:	ec51 0b19 	vmov	r0, r1, d9
 800b644:	f7f4 fe3a 	bl	80002bc <__adddf3>
 800b648:	a37b      	add	r3, pc, #492	; (adr r3, 800b838 <__ieee754_pow+0xa00>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	2000      	movs	r0, #0
 800b650:	4604      	mov	r4, r0
 800b652:	460d      	mov	r5, r1
 800b654:	f7f4 ffe8 	bl	8000628 <__aeabi_dmul>
 800b658:	ec53 2b19 	vmov	r2, r3, d9
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	4620      	mov	r0, r4
 800b662:	4629      	mov	r1, r5
 800b664:	f7f4 fe28 	bl	80002b8 <__aeabi_dsub>
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4640      	mov	r0, r8
 800b66e:	4649      	mov	r1, r9
 800b670:	f7f4 fe22 	bl	80002b8 <__aeabi_dsub>
 800b674:	a372      	add	r3, pc, #456	; (adr r3, 800b840 <__ieee754_pow+0xa08>)
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	f7f4 ffd5 	bl	8000628 <__aeabi_dmul>
 800b67e:	a372      	add	r3, pc, #456	; (adr r3, 800b848 <__ieee754_pow+0xa10>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	4620      	mov	r0, r4
 800b68a:	4629      	mov	r1, r5
 800b68c:	f7f4 ffcc 	bl	8000628 <__aeabi_dmul>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4640      	mov	r0, r8
 800b696:	4649      	mov	r1, r9
 800b698:	f7f4 fe10 	bl	80002bc <__adddf3>
 800b69c:	4604      	mov	r4, r0
 800b69e:	460d      	mov	r5, r1
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	f7f4 fe08 	bl	80002bc <__adddf3>
 800b6ac:	4632      	mov	r2, r6
 800b6ae:	463b      	mov	r3, r7
 800b6b0:	4680      	mov	r8, r0
 800b6b2:	4689      	mov	r9, r1
 800b6b4:	f7f4 fe00 	bl	80002b8 <__aeabi_dsub>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f4 fdfa 	bl	80002b8 <__aeabi_dsub>
 800b6c4:	4642      	mov	r2, r8
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	464b      	mov	r3, r9
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	f7f4 ffaa 	bl	8000628 <__aeabi_dmul>
 800b6d4:	a35e      	add	r3, pc, #376	; (adr r3, 800b850 <__ieee754_pow+0xa18>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	4604      	mov	r4, r0
 800b6dc:	460d      	mov	r5, r1
 800b6de:	f7f4 ffa3 	bl	8000628 <__aeabi_dmul>
 800b6e2:	a35d      	add	r3, pc, #372	; (adr r3, 800b858 <__ieee754_pow+0xa20>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 fde6 	bl	80002b8 <__aeabi_dsub>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	f7f4 ff9a 	bl	8000628 <__aeabi_dmul>
 800b6f4:	a35a      	add	r3, pc, #360	; (adr r3, 800b860 <__ieee754_pow+0xa28>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f4 fddf 	bl	80002bc <__adddf3>
 800b6fe:	4622      	mov	r2, r4
 800b700:	462b      	mov	r3, r5
 800b702:	f7f4 ff91 	bl	8000628 <__aeabi_dmul>
 800b706:	a358      	add	r3, pc, #352	; (adr r3, 800b868 <__ieee754_pow+0xa30>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f7f4 fdd4 	bl	80002b8 <__aeabi_dsub>
 800b710:	4622      	mov	r2, r4
 800b712:	462b      	mov	r3, r5
 800b714:	f7f4 ff88 	bl	8000628 <__aeabi_dmul>
 800b718:	a355      	add	r3, pc, #340	; (adr r3, 800b870 <__ieee754_pow+0xa38>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fdcd 	bl	80002bc <__adddf3>
 800b722:	4622      	mov	r2, r4
 800b724:	462b      	mov	r3, r5
 800b726:	f7f4 ff7f 	bl	8000628 <__aeabi_dmul>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	4640      	mov	r0, r8
 800b730:	4649      	mov	r1, r9
 800b732:	f7f4 fdc1 	bl	80002b8 <__aeabi_dsub>
 800b736:	4604      	mov	r4, r0
 800b738:	460d      	mov	r5, r1
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	4640      	mov	r0, r8
 800b740:	4649      	mov	r1, r9
 800b742:	f7f4 ff71 	bl	8000628 <__aeabi_dmul>
 800b746:	2200      	movs	r2, #0
 800b748:	ec41 0b19 	vmov	d9, r0, r1
 800b74c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b750:	4620      	mov	r0, r4
 800b752:	4629      	mov	r1, r5
 800b754:	f7f4 fdb0 	bl	80002b8 <__aeabi_dsub>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	ec51 0b19 	vmov	r0, r1, d9
 800b760:	f7f5 f88c 	bl	800087c <__aeabi_ddiv>
 800b764:	4632      	mov	r2, r6
 800b766:	4604      	mov	r4, r0
 800b768:	460d      	mov	r5, r1
 800b76a:	463b      	mov	r3, r7
 800b76c:	4640      	mov	r0, r8
 800b76e:	4649      	mov	r1, r9
 800b770:	f7f4 ff5a 	bl	8000628 <__aeabi_dmul>
 800b774:	4632      	mov	r2, r6
 800b776:	463b      	mov	r3, r7
 800b778:	f7f4 fda0 	bl	80002bc <__adddf3>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4620      	mov	r0, r4
 800b782:	4629      	mov	r1, r5
 800b784:	f7f4 fd98 	bl	80002b8 <__aeabi_dsub>
 800b788:	4642      	mov	r2, r8
 800b78a:	464b      	mov	r3, r9
 800b78c:	f7f4 fd94 	bl	80002b8 <__aeabi_dsub>
 800b790:	460b      	mov	r3, r1
 800b792:	4602      	mov	r2, r0
 800b794:	493a      	ldr	r1, [pc, #232]	; (800b880 <__ieee754_pow+0xa48>)
 800b796:	2000      	movs	r0, #0
 800b798:	f7f4 fd8e 	bl	80002b8 <__aeabi_dsub>
 800b79c:	ec41 0b10 	vmov	d0, r0, r1
 800b7a0:	ee10 3a90 	vmov	r3, s1
 800b7a4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b7a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ac:	da2b      	bge.n	800b806 <__ieee754_pow+0x9ce>
 800b7ae:	4650      	mov	r0, sl
 800b7b0:	f000 f96e 	bl	800ba90 <scalbn>
 800b7b4:	ec51 0b10 	vmov	r0, r1, d0
 800b7b8:	ec53 2b18 	vmov	r2, r3, d8
 800b7bc:	f7ff bbed 	b.w	800af9a <__ieee754_pow+0x162>
 800b7c0:	4b30      	ldr	r3, [pc, #192]	; (800b884 <__ieee754_pow+0xa4c>)
 800b7c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b7c6:	429e      	cmp	r6, r3
 800b7c8:	f77f af0c 	ble.w	800b5e4 <__ieee754_pow+0x7ac>
 800b7cc:	4b2e      	ldr	r3, [pc, #184]	; (800b888 <__ieee754_pow+0xa50>)
 800b7ce:	440b      	add	r3, r1
 800b7d0:	4303      	orrs	r3, r0
 800b7d2:	d009      	beq.n	800b7e8 <__ieee754_pow+0x9b0>
 800b7d4:	ec51 0b18 	vmov	r0, r1, d8
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f7f5 f996 	bl	8000b0c <__aeabi_dcmplt>
 800b7e0:	3800      	subs	r0, #0
 800b7e2:	bf18      	it	ne
 800b7e4:	2001      	movne	r0, #1
 800b7e6:	e447      	b.n	800b078 <__ieee754_pow+0x240>
 800b7e8:	4622      	mov	r2, r4
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	f7f4 fd64 	bl	80002b8 <__aeabi_dsub>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	f7f5 f99e 	bl	8000b34 <__aeabi_dcmpge>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	f43f aef3 	beq.w	800b5e4 <__ieee754_pow+0x7ac>
 800b7fe:	e7e9      	b.n	800b7d4 <__ieee754_pow+0x99c>
 800b800:	f04f 0a00 	mov.w	sl, #0
 800b804:	e71a      	b.n	800b63c <__ieee754_pow+0x804>
 800b806:	ec51 0b10 	vmov	r0, r1, d0
 800b80a:	4619      	mov	r1, r3
 800b80c:	e7d4      	b.n	800b7b8 <__ieee754_pow+0x980>
 800b80e:	491c      	ldr	r1, [pc, #112]	; (800b880 <__ieee754_pow+0xa48>)
 800b810:	2000      	movs	r0, #0
 800b812:	f7ff bb30 	b.w	800ae76 <__ieee754_pow+0x3e>
 800b816:	2000      	movs	r0, #0
 800b818:	2100      	movs	r1, #0
 800b81a:	f7ff bb2c 	b.w	800ae76 <__ieee754_pow+0x3e>
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7ff bb28 	b.w	800ae76 <__ieee754_pow+0x3e>
 800b826:	9204      	str	r2, [sp, #16]
 800b828:	f7ff bb7a 	b.w	800af20 <__ieee754_pow+0xe8>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f7ff bb64 	b.w	800aefa <__ieee754_pow+0xc2>
 800b832:	bf00      	nop
 800b834:	f3af 8000 	nop.w
 800b838:	00000000 	.word	0x00000000
 800b83c:	3fe62e43 	.word	0x3fe62e43
 800b840:	fefa39ef 	.word	0xfefa39ef
 800b844:	3fe62e42 	.word	0x3fe62e42
 800b848:	0ca86c39 	.word	0x0ca86c39
 800b84c:	be205c61 	.word	0xbe205c61
 800b850:	72bea4d0 	.word	0x72bea4d0
 800b854:	3e663769 	.word	0x3e663769
 800b858:	c5d26bf1 	.word	0xc5d26bf1
 800b85c:	3ebbbd41 	.word	0x3ebbbd41
 800b860:	af25de2c 	.word	0xaf25de2c
 800b864:	3f11566a 	.word	0x3f11566a
 800b868:	16bebd93 	.word	0x16bebd93
 800b86c:	3f66c16c 	.word	0x3f66c16c
 800b870:	5555553e 	.word	0x5555553e
 800b874:	3fc55555 	.word	0x3fc55555
 800b878:	3fe00000 	.word	0x3fe00000
 800b87c:	000fffff 	.word	0x000fffff
 800b880:	3ff00000 	.word	0x3ff00000
 800b884:	4090cbff 	.word	0x4090cbff
 800b888:	3f6f3400 	.word	0x3f6f3400
 800b88c:	652b82fe 	.word	0x652b82fe
 800b890:	3c971547 	.word	0x3c971547

0800b894 <__ieee754_sqrt>:
 800b894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b898:	ec55 4b10 	vmov	r4, r5, d0
 800b89c:	4e55      	ldr	r6, [pc, #340]	; (800b9f4 <__ieee754_sqrt+0x160>)
 800b89e:	43ae      	bics	r6, r5
 800b8a0:	ee10 0a10 	vmov	r0, s0
 800b8a4:	ee10 3a10 	vmov	r3, s0
 800b8a8:	462a      	mov	r2, r5
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	d110      	bne.n	800b8d0 <__ieee754_sqrt+0x3c>
 800b8ae:	ee10 2a10 	vmov	r2, s0
 800b8b2:	462b      	mov	r3, r5
 800b8b4:	f7f4 feb8 	bl	8000628 <__aeabi_dmul>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4620      	mov	r0, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f7f4 fcfc 	bl	80002bc <__adddf3>
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	ec45 4b10 	vmov	d0, r4, r5
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	2d00      	cmp	r5, #0
 800b8d2:	dc10      	bgt.n	800b8f6 <__ieee754_sqrt+0x62>
 800b8d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b8d8:	4330      	orrs	r0, r6
 800b8da:	d0f5      	beq.n	800b8c8 <__ieee754_sqrt+0x34>
 800b8dc:	b15d      	cbz	r5, 800b8f6 <__ieee754_sqrt+0x62>
 800b8de:	ee10 2a10 	vmov	r2, s0
 800b8e2:	462b      	mov	r3, r5
 800b8e4:	ee10 0a10 	vmov	r0, s0
 800b8e8:	f7f4 fce6 	bl	80002b8 <__aeabi_dsub>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	f7f4 ffc4 	bl	800087c <__aeabi_ddiv>
 800b8f4:	e7e6      	b.n	800b8c4 <__ieee754_sqrt+0x30>
 800b8f6:	1512      	asrs	r2, r2, #20
 800b8f8:	d074      	beq.n	800b9e4 <__ieee754_sqrt+0x150>
 800b8fa:	07d4      	lsls	r4, r2, #31
 800b8fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b900:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b908:	bf5e      	ittt	pl
 800b90a:	0fda      	lsrpl	r2, r3, #31
 800b90c:	005b      	lslpl	r3, r3, #1
 800b90e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b912:	2400      	movs	r4, #0
 800b914:	0fda      	lsrs	r2, r3, #31
 800b916:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b91a:	107f      	asrs	r7, r7, #1
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	2516      	movs	r5, #22
 800b920:	4620      	mov	r0, r4
 800b922:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b926:	1886      	adds	r6, r0, r2
 800b928:	428e      	cmp	r6, r1
 800b92a:	bfde      	ittt	le
 800b92c:	1b89      	suble	r1, r1, r6
 800b92e:	18b0      	addle	r0, r6, r2
 800b930:	18a4      	addle	r4, r4, r2
 800b932:	0049      	lsls	r1, r1, #1
 800b934:	3d01      	subs	r5, #1
 800b936:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b93a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b93e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b942:	d1f0      	bne.n	800b926 <__ieee754_sqrt+0x92>
 800b944:	462a      	mov	r2, r5
 800b946:	f04f 0e20 	mov.w	lr, #32
 800b94a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b94e:	4281      	cmp	r1, r0
 800b950:	eb06 0c05 	add.w	ip, r6, r5
 800b954:	dc02      	bgt.n	800b95c <__ieee754_sqrt+0xc8>
 800b956:	d113      	bne.n	800b980 <__ieee754_sqrt+0xec>
 800b958:	459c      	cmp	ip, r3
 800b95a:	d811      	bhi.n	800b980 <__ieee754_sqrt+0xec>
 800b95c:	f1bc 0f00 	cmp.w	ip, #0
 800b960:	eb0c 0506 	add.w	r5, ip, r6
 800b964:	da43      	bge.n	800b9ee <__ieee754_sqrt+0x15a>
 800b966:	2d00      	cmp	r5, #0
 800b968:	db41      	blt.n	800b9ee <__ieee754_sqrt+0x15a>
 800b96a:	f100 0801 	add.w	r8, r0, #1
 800b96e:	1a09      	subs	r1, r1, r0
 800b970:	459c      	cmp	ip, r3
 800b972:	bf88      	it	hi
 800b974:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b978:	eba3 030c 	sub.w	r3, r3, ip
 800b97c:	4432      	add	r2, r6
 800b97e:	4640      	mov	r0, r8
 800b980:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b984:	f1be 0e01 	subs.w	lr, lr, #1
 800b988:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b98c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b990:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b994:	d1db      	bne.n	800b94e <__ieee754_sqrt+0xba>
 800b996:	430b      	orrs	r3, r1
 800b998:	d006      	beq.n	800b9a8 <__ieee754_sqrt+0x114>
 800b99a:	1c50      	adds	r0, r2, #1
 800b99c:	bf13      	iteet	ne
 800b99e:	3201      	addne	r2, #1
 800b9a0:	3401      	addeq	r4, #1
 800b9a2:	4672      	moveq	r2, lr
 800b9a4:	f022 0201 	bicne.w	r2, r2, #1
 800b9a8:	1063      	asrs	r3, r4, #1
 800b9aa:	0852      	lsrs	r2, r2, #1
 800b9ac:	07e1      	lsls	r1, r4, #31
 800b9ae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b9b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b9b6:	bf48      	it	mi
 800b9b8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b9bc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b9c0:	4614      	mov	r4, r2
 800b9c2:	e781      	b.n	800b8c8 <__ieee754_sqrt+0x34>
 800b9c4:	0ad9      	lsrs	r1, r3, #11
 800b9c6:	3815      	subs	r0, #21
 800b9c8:	055b      	lsls	r3, r3, #21
 800b9ca:	2900      	cmp	r1, #0
 800b9cc:	d0fa      	beq.n	800b9c4 <__ieee754_sqrt+0x130>
 800b9ce:	02cd      	lsls	r5, r1, #11
 800b9d0:	d50a      	bpl.n	800b9e8 <__ieee754_sqrt+0x154>
 800b9d2:	f1c2 0420 	rsb	r4, r2, #32
 800b9d6:	fa23 f404 	lsr.w	r4, r3, r4
 800b9da:	1e55      	subs	r5, r2, #1
 800b9dc:	4093      	lsls	r3, r2
 800b9de:	4321      	orrs	r1, r4
 800b9e0:	1b42      	subs	r2, r0, r5
 800b9e2:	e78a      	b.n	800b8fa <__ieee754_sqrt+0x66>
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	e7f0      	b.n	800b9ca <__ieee754_sqrt+0x136>
 800b9e8:	0049      	lsls	r1, r1, #1
 800b9ea:	3201      	adds	r2, #1
 800b9ec:	e7ef      	b.n	800b9ce <__ieee754_sqrt+0x13a>
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	e7bd      	b.n	800b96e <__ieee754_sqrt+0xda>
 800b9f2:	bf00      	nop
 800b9f4:	7ff00000 	.word	0x7ff00000

0800b9f8 <with_errno>:
 800b9f8:	b570      	push	{r4, r5, r6, lr}
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	4616      	mov	r6, r2
 800ba00:	f000 f8cc 	bl	800bb9c <__errno>
 800ba04:	4629      	mov	r1, r5
 800ba06:	6006      	str	r6, [r0, #0]
 800ba08:	4620      	mov	r0, r4
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}

0800ba0c <xflow>:
 800ba0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba0e:	4614      	mov	r4, r2
 800ba10:	461d      	mov	r5, r3
 800ba12:	b108      	cbz	r0, 800ba18 <xflow+0xc>
 800ba14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba18:	e9cd 2300 	strd	r2, r3, [sp]
 800ba1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba20:	4620      	mov	r0, r4
 800ba22:	4629      	mov	r1, r5
 800ba24:	f7f4 fe00 	bl	8000628 <__aeabi_dmul>
 800ba28:	2222      	movs	r2, #34	; 0x22
 800ba2a:	b003      	add	sp, #12
 800ba2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba30:	f7ff bfe2 	b.w	800b9f8 <with_errno>

0800ba34 <__math_uflow>:
 800ba34:	b508      	push	{r3, lr}
 800ba36:	2200      	movs	r2, #0
 800ba38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba3c:	f7ff ffe6 	bl	800ba0c <xflow>
 800ba40:	ec41 0b10 	vmov	d0, r0, r1
 800ba44:	bd08      	pop	{r3, pc}

0800ba46 <__math_oflow>:
 800ba46:	b508      	push	{r3, lr}
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba4e:	f7ff ffdd 	bl	800ba0c <xflow>
 800ba52:	ec41 0b10 	vmov	d0, r0, r1
 800ba56:	bd08      	pop	{r3, pc}

0800ba58 <fabs>:
 800ba58:	ec51 0b10 	vmov	r0, r1, d0
 800ba5c:	ee10 2a10 	vmov	r2, s0
 800ba60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba64:	ec43 2b10 	vmov	d0, r2, r3
 800ba68:	4770      	bx	lr

0800ba6a <finite>:
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	ed8d 0b00 	vstr	d0, [sp]
 800ba70:	9801      	ldr	r0, [sp, #4]
 800ba72:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba7a:	0fc0      	lsrs	r0, r0, #31
 800ba7c:	b002      	add	sp, #8
 800ba7e:	4770      	bx	lr

0800ba80 <nan>:
 800ba80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba88 <nan+0x8>
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	00000000 	.word	0x00000000
 800ba8c:	7ff80000 	.word	0x7ff80000

0800ba90 <scalbn>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	ec55 4b10 	vmov	r4, r5, d0
 800ba96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	b99a      	cbnz	r2, 800bac8 <scalbn+0x38>
 800baa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800baa4:	4323      	orrs	r3, r4
 800baa6:	d036      	beq.n	800bb16 <scalbn+0x86>
 800baa8:	4b39      	ldr	r3, [pc, #228]	; (800bb90 <scalbn+0x100>)
 800baaa:	4629      	mov	r1, r5
 800baac:	ee10 0a10 	vmov	r0, s0
 800bab0:	2200      	movs	r2, #0
 800bab2:	f7f4 fdb9 	bl	8000628 <__aeabi_dmul>
 800bab6:	4b37      	ldr	r3, [pc, #220]	; (800bb94 <scalbn+0x104>)
 800bab8:	429e      	cmp	r6, r3
 800baba:	4604      	mov	r4, r0
 800babc:	460d      	mov	r5, r1
 800babe:	da10      	bge.n	800bae2 <scalbn+0x52>
 800bac0:	a32b      	add	r3, pc, #172	; (adr r3, 800bb70 <scalbn+0xe0>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	e03a      	b.n	800bb3e <scalbn+0xae>
 800bac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bacc:	428a      	cmp	r2, r1
 800bace:	d10c      	bne.n	800baea <scalbn+0x5a>
 800bad0:	ee10 2a10 	vmov	r2, s0
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f4 fbf0 	bl	80002bc <__adddf3>
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	e019      	b.n	800bb16 <scalbn+0x86>
 800bae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bae6:	460b      	mov	r3, r1
 800bae8:	3a36      	subs	r2, #54	; 0x36
 800baea:	4432      	add	r2, r6
 800baec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800baf0:	428a      	cmp	r2, r1
 800baf2:	dd08      	ble.n	800bb06 <scalbn+0x76>
 800baf4:	2d00      	cmp	r5, #0
 800baf6:	a120      	add	r1, pc, #128	; (adr r1, 800bb78 <scalbn+0xe8>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	da1c      	bge.n	800bb38 <scalbn+0xa8>
 800bafe:	a120      	add	r1, pc, #128	; (adr r1, 800bb80 <scalbn+0xf0>)
 800bb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb04:	e018      	b.n	800bb38 <scalbn+0xa8>
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	dd08      	ble.n	800bb1c <scalbn+0x8c>
 800bb0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb16:	ec45 4b10 	vmov	d0, r4, r5
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}
 800bb1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb20:	da19      	bge.n	800bb56 <scalbn+0xc6>
 800bb22:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb26:	429e      	cmp	r6, r3
 800bb28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb2c:	dd0a      	ble.n	800bb44 <scalbn+0xb4>
 800bb2e:	a112      	add	r1, pc, #72	; (adr r1, 800bb78 <scalbn+0xe8>)
 800bb30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e2      	bne.n	800bafe <scalbn+0x6e>
 800bb38:	a30f      	add	r3, pc, #60	; (adr r3, 800bb78 <scalbn+0xe8>)
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f7f4 fd73 	bl	8000628 <__aeabi_dmul>
 800bb42:	e7cb      	b.n	800badc <scalbn+0x4c>
 800bb44:	a10a      	add	r1, pc, #40	; (adr r1, 800bb70 <scalbn+0xe0>)
 800bb46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0b8      	beq.n	800bac0 <scalbn+0x30>
 800bb4e:	a10e      	add	r1, pc, #56	; (adr r1, 800bb88 <scalbn+0xf8>)
 800bb50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb54:	e7b4      	b.n	800bac0 <scalbn+0x30>
 800bb56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb5a:	3236      	adds	r2, #54	; 0x36
 800bb5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb64:	4620      	mov	r0, r4
 800bb66:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <scalbn+0x108>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	e7e8      	b.n	800bb3e <scalbn+0xae>
 800bb6c:	f3af 8000 	nop.w
 800bb70:	c2f8f359 	.word	0xc2f8f359
 800bb74:	01a56e1f 	.word	0x01a56e1f
 800bb78:	8800759c 	.word	0x8800759c
 800bb7c:	7e37e43c 	.word	0x7e37e43c
 800bb80:	8800759c 	.word	0x8800759c
 800bb84:	fe37e43c 	.word	0xfe37e43c
 800bb88:	c2f8f359 	.word	0xc2f8f359
 800bb8c:	81a56e1f 	.word	0x81a56e1f
 800bb90:	43500000 	.word	0x43500000
 800bb94:	ffff3cb0 	.word	0xffff3cb0
 800bb98:	3c900000 	.word	0x3c900000

0800bb9c <__errno>:
 800bb9c:	4b01      	ldr	r3, [pc, #4]	; (800bba4 <__errno+0x8>)
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	20000010 	.word	0x20000010

0800bba8 <std>:
 800bba8:	2300      	movs	r3, #0
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	4604      	mov	r4, r0
 800bbae:	e9c0 3300 	strd	r3, r3, [r0]
 800bbb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbb6:	6083      	str	r3, [r0, #8]
 800bbb8:	8181      	strh	r1, [r0, #12]
 800bbba:	6643      	str	r3, [r0, #100]	; 0x64
 800bbbc:	81c2      	strh	r2, [r0, #14]
 800bbbe:	6183      	str	r3, [r0, #24]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	2208      	movs	r2, #8
 800bbc4:	305c      	adds	r0, #92	; 0x5c
 800bbc6:	f000 f91a 	bl	800bdfe <memset>
 800bbca:	4b05      	ldr	r3, [pc, #20]	; (800bbe0 <std+0x38>)
 800bbcc:	6263      	str	r3, [r4, #36]	; 0x24
 800bbce:	4b05      	ldr	r3, [pc, #20]	; (800bbe4 <std+0x3c>)
 800bbd0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbd2:	4b05      	ldr	r3, [pc, #20]	; (800bbe8 <std+0x40>)
 800bbd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbd6:	4b05      	ldr	r3, [pc, #20]	; (800bbec <std+0x44>)
 800bbd8:	6224      	str	r4, [r4, #32]
 800bbda:	6323      	str	r3, [r4, #48]	; 0x30
 800bbdc:	bd10      	pop	{r4, pc}
 800bbde:	bf00      	nop
 800bbe0:	0800c941 	.word	0x0800c941
 800bbe4:	0800c963 	.word	0x0800c963
 800bbe8:	0800c99b 	.word	0x0800c99b
 800bbec:	0800c9bf 	.word	0x0800c9bf

0800bbf0 <_cleanup_r>:
 800bbf0:	4901      	ldr	r1, [pc, #4]	; (800bbf8 <_cleanup_r+0x8>)
 800bbf2:	f000 b8af 	b.w	800bd54 <_fwalk_reent>
 800bbf6:	bf00      	nop
 800bbf8:	0800d811 	.word	0x0800d811

0800bbfc <__sfmoreglue>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	2268      	movs	r2, #104	; 0x68
 800bc00:	1e4d      	subs	r5, r1, #1
 800bc02:	4355      	muls	r5, r2
 800bc04:	460e      	mov	r6, r1
 800bc06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc0a:	f000 f921 	bl	800be50 <_malloc_r>
 800bc0e:	4604      	mov	r4, r0
 800bc10:	b140      	cbz	r0, 800bc24 <__sfmoreglue+0x28>
 800bc12:	2100      	movs	r1, #0
 800bc14:	e9c0 1600 	strd	r1, r6, [r0]
 800bc18:	300c      	adds	r0, #12
 800bc1a:	60a0      	str	r0, [r4, #8]
 800bc1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc20:	f000 f8ed 	bl	800bdfe <memset>
 800bc24:	4620      	mov	r0, r4
 800bc26:	bd70      	pop	{r4, r5, r6, pc}

0800bc28 <__sfp_lock_acquire>:
 800bc28:	4801      	ldr	r0, [pc, #4]	; (800bc30 <__sfp_lock_acquire+0x8>)
 800bc2a:	f000 b8d8 	b.w	800bdde <__retarget_lock_acquire_recursive>
 800bc2e:	bf00      	nop
 800bc30:	200022d9 	.word	0x200022d9

0800bc34 <__sfp_lock_release>:
 800bc34:	4801      	ldr	r0, [pc, #4]	; (800bc3c <__sfp_lock_release+0x8>)
 800bc36:	f000 b8d3 	b.w	800bde0 <__retarget_lock_release_recursive>
 800bc3a:	bf00      	nop
 800bc3c:	200022d9 	.word	0x200022d9

0800bc40 <__sinit_lock_acquire>:
 800bc40:	4801      	ldr	r0, [pc, #4]	; (800bc48 <__sinit_lock_acquire+0x8>)
 800bc42:	f000 b8cc 	b.w	800bdde <__retarget_lock_acquire_recursive>
 800bc46:	bf00      	nop
 800bc48:	200022da 	.word	0x200022da

0800bc4c <__sinit_lock_release>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	; (800bc54 <__sinit_lock_release+0x8>)
 800bc4e:	f000 b8c7 	b.w	800bde0 <__retarget_lock_release_recursive>
 800bc52:	bf00      	nop
 800bc54:	200022da 	.word	0x200022da

0800bc58 <__sinit>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	f7ff fff0 	bl	800bc40 <__sinit_lock_acquire>
 800bc60:	69a3      	ldr	r3, [r4, #24]
 800bc62:	b11b      	cbz	r3, 800bc6c <__sinit+0x14>
 800bc64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc68:	f7ff bff0 	b.w	800bc4c <__sinit_lock_release>
 800bc6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc70:	6523      	str	r3, [r4, #80]	; 0x50
 800bc72:	4b13      	ldr	r3, [pc, #76]	; (800bcc0 <__sinit+0x68>)
 800bc74:	4a13      	ldr	r2, [pc, #76]	; (800bcc4 <__sinit+0x6c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc7a:	42a3      	cmp	r3, r4
 800bc7c:	bf04      	itt	eq
 800bc7e:	2301      	moveq	r3, #1
 800bc80:	61a3      	streq	r3, [r4, #24]
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 f820 	bl	800bcc8 <__sfp>
 800bc88:	6060      	str	r0, [r4, #4]
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f81c 	bl	800bcc8 <__sfp>
 800bc90:	60a0      	str	r0, [r4, #8]
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 f818 	bl	800bcc8 <__sfp>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	60e0      	str	r0, [r4, #12]
 800bc9c:	2104      	movs	r1, #4
 800bc9e:	6860      	ldr	r0, [r4, #4]
 800bca0:	f7ff ff82 	bl	800bba8 <std>
 800bca4:	68a0      	ldr	r0, [r4, #8]
 800bca6:	2201      	movs	r2, #1
 800bca8:	2109      	movs	r1, #9
 800bcaa:	f7ff ff7d 	bl	800bba8 <std>
 800bcae:	68e0      	ldr	r0, [r4, #12]
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	2112      	movs	r1, #18
 800bcb4:	f7ff ff78 	bl	800bba8 <std>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	61a3      	str	r3, [r4, #24]
 800bcbc:	e7d2      	b.n	800bc64 <__sinit+0xc>
 800bcbe:	bf00      	nop
 800bcc0:	0800ec78 	.word	0x0800ec78
 800bcc4:	0800bbf1 	.word	0x0800bbf1

0800bcc8 <__sfp>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	4607      	mov	r7, r0
 800bccc:	f7ff ffac 	bl	800bc28 <__sfp_lock_acquire>
 800bcd0:	4b1e      	ldr	r3, [pc, #120]	; (800bd4c <__sfp+0x84>)
 800bcd2:	681e      	ldr	r6, [r3, #0]
 800bcd4:	69b3      	ldr	r3, [r6, #24]
 800bcd6:	b913      	cbnz	r3, 800bcde <__sfp+0x16>
 800bcd8:	4630      	mov	r0, r6
 800bcda:	f7ff ffbd 	bl	800bc58 <__sinit>
 800bcde:	3648      	adds	r6, #72	; 0x48
 800bce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bce4:	3b01      	subs	r3, #1
 800bce6:	d503      	bpl.n	800bcf0 <__sfp+0x28>
 800bce8:	6833      	ldr	r3, [r6, #0]
 800bcea:	b30b      	cbz	r3, 800bd30 <__sfp+0x68>
 800bcec:	6836      	ldr	r6, [r6, #0]
 800bcee:	e7f7      	b.n	800bce0 <__sfp+0x18>
 800bcf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcf4:	b9d5      	cbnz	r5, 800bd2c <__sfp+0x64>
 800bcf6:	4b16      	ldr	r3, [pc, #88]	; (800bd50 <__sfp+0x88>)
 800bcf8:	60e3      	str	r3, [r4, #12]
 800bcfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcfe:	6665      	str	r5, [r4, #100]	; 0x64
 800bd00:	f000 f86c 	bl	800bddc <__retarget_lock_init_recursive>
 800bd04:	f7ff ff96 	bl	800bc34 <__sfp_lock_release>
 800bd08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd10:	6025      	str	r5, [r4, #0]
 800bd12:	61a5      	str	r5, [r4, #24]
 800bd14:	2208      	movs	r2, #8
 800bd16:	4629      	mov	r1, r5
 800bd18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd1c:	f000 f86f 	bl	800bdfe <memset>
 800bd20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd28:	4620      	mov	r0, r4
 800bd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd2c:	3468      	adds	r4, #104	; 0x68
 800bd2e:	e7d9      	b.n	800bce4 <__sfp+0x1c>
 800bd30:	2104      	movs	r1, #4
 800bd32:	4638      	mov	r0, r7
 800bd34:	f7ff ff62 	bl	800bbfc <__sfmoreglue>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	6030      	str	r0, [r6, #0]
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d1d5      	bne.n	800bcec <__sfp+0x24>
 800bd40:	f7ff ff78 	bl	800bc34 <__sfp_lock_release>
 800bd44:	230c      	movs	r3, #12
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	e7ee      	b.n	800bd28 <__sfp+0x60>
 800bd4a:	bf00      	nop
 800bd4c:	0800ec78 	.word	0x0800ec78
 800bd50:	ffff0001 	.word	0xffff0001

0800bd54 <_fwalk_reent>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	4606      	mov	r6, r0
 800bd5a:	4688      	mov	r8, r1
 800bd5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd60:	2700      	movs	r7, #0
 800bd62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd66:	f1b9 0901 	subs.w	r9, r9, #1
 800bd6a:	d505      	bpl.n	800bd78 <_fwalk_reent+0x24>
 800bd6c:	6824      	ldr	r4, [r4, #0]
 800bd6e:	2c00      	cmp	r4, #0
 800bd70:	d1f7      	bne.n	800bd62 <_fwalk_reent+0xe>
 800bd72:	4638      	mov	r0, r7
 800bd74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd78:	89ab      	ldrh	r3, [r5, #12]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d907      	bls.n	800bd8e <_fwalk_reent+0x3a>
 800bd7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd82:	3301      	adds	r3, #1
 800bd84:	d003      	beq.n	800bd8e <_fwalk_reent+0x3a>
 800bd86:	4629      	mov	r1, r5
 800bd88:	4630      	mov	r0, r6
 800bd8a:	47c0      	blx	r8
 800bd8c:	4307      	orrs	r7, r0
 800bd8e:	3568      	adds	r5, #104	; 0x68
 800bd90:	e7e9      	b.n	800bd66 <_fwalk_reent+0x12>
	...

0800bd94 <__libc_init_array>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	4d0d      	ldr	r5, [pc, #52]	; (800bdcc <__libc_init_array+0x38>)
 800bd98:	4c0d      	ldr	r4, [pc, #52]	; (800bdd0 <__libc_init_array+0x3c>)
 800bd9a:	1b64      	subs	r4, r4, r5
 800bd9c:	10a4      	asrs	r4, r4, #2
 800bd9e:	2600      	movs	r6, #0
 800bda0:	42a6      	cmp	r6, r4
 800bda2:	d109      	bne.n	800bdb8 <__libc_init_array+0x24>
 800bda4:	4d0b      	ldr	r5, [pc, #44]	; (800bdd4 <__libc_init_array+0x40>)
 800bda6:	4c0c      	ldr	r4, [pc, #48]	; (800bdd8 <__libc_init_array+0x44>)
 800bda8:	f002 fe78 	bl	800ea9c <_init>
 800bdac:	1b64      	subs	r4, r4, r5
 800bdae:	10a4      	asrs	r4, r4, #2
 800bdb0:	2600      	movs	r6, #0
 800bdb2:	42a6      	cmp	r6, r4
 800bdb4:	d105      	bne.n	800bdc2 <__libc_init_array+0x2e>
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdbc:	4798      	blx	r3
 800bdbe:	3601      	adds	r6, #1
 800bdc0:	e7ee      	b.n	800bda0 <__libc_init_array+0xc>
 800bdc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdc6:	4798      	blx	r3
 800bdc8:	3601      	adds	r6, #1
 800bdca:	e7f2      	b.n	800bdb2 <__libc_init_array+0x1e>
 800bdcc:	0800effc 	.word	0x0800effc
 800bdd0:	0800effc 	.word	0x0800effc
 800bdd4:	0800effc 	.word	0x0800effc
 800bdd8:	0800f000 	.word	0x0800f000

0800bddc <__retarget_lock_init_recursive>:
 800bddc:	4770      	bx	lr

0800bdde <__retarget_lock_acquire_recursive>:
 800bdde:	4770      	bx	lr

0800bde0 <__retarget_lock_release_recursive>:
 800bde0:	4770      	bx	lr

0800bde2 <memcpy>:
 800bde2:	440a      	add	r2, r1
 800bde4:	4291      	cmp	r1, r2
 800bde6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdea:	d100      	bne.n	800bdee <memcpy+0xc>
 800bdec:	4770      	bx	lr
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdf8:	4291      	cmp	r1, r2
 800bdfa:	d1f9      	bne.n	800bdf0 <memcpy+0xe>
 800bdfc:	bd10      	pop	{r4, pc}

0800bdfe <memset>:
 800bdfe:	4402      	add	r2, r0
 800be00:	4603      	mov	r3, r0
 800be02:	4293      	cmp	r3, r2
 800be04:	d100      	bne.n	800be08 <memset+0xa>
 800be06:	4770      	bx	lr
 800be08:	f803 1b01 	strb.w	r1, [r3], #1
 800be0c:	e7f9      	b.n	800be02 <memset+0x4>
	...

0800be10 <sbrk_aligned>:
 800be10:	b570      	push	{r4, r5, r6, lr}
 800be12:	4e0e      	ldr	r6, [pc, #56]	; (800be4c <sbrk_aligned+0x3c>)
 800be14:	460c      	mov	r4, r1
 800be16:	6831      	ldr	r1, [r6, #0]
 800be18:	4605      	mov	r5, r0
 800be1a:	b911      	cbnz	r1, 800be22 <sbrk_aligned+0x12>
 800be1c:	f000 fd60 	bl	800c8e0 <_sbrk_r>
 800be20:	6030      	str	r0, [r6, #0]
 800be22:	4621      	mov	r1, r4
 800be24:	4628      	mov	r0, r5
 800be26:	f000 fd5b 	bl	800c8e0 <_sbrk_r>
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	d00a      	beq.n	800be44 <sbrk_aligned+0x34>
 800be2e:	1cc4      	adds	r4, r0, #3
 800be30:	f024 0403 	bic.w	r4, r4, #3
 800be34:	42a0      	cmp	r0, r4
 800be36:	d007      	beq.n	800be48 <sbrk_aligned+0x38>
 800be38:	1a21      	subs	r1, r4, r0
 800be3a:	4628      	mov	r0, r5
 800be3c:	f000 fd50 	bl	800c8e0 <_sbrk_r>
 800be40:	3001      	adds	r0, #1
 800be42:	d101      	bne.n	800be48 <sbrk_aligned+0x38>
 800be44:	f04f 34ff 	mov.w	r4, #4294967295
 800be48:	4620      	mov	r0, r4
 800be4a:	bd70      	pop	{r4, r5, r6, pc}
 800be4c:	200022e0 	.word	0x200022e0

0800be50 <_malloc_r>:
 800be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be54:	1ccd      	adds	r5, r1, #3
 800be56:	f025 0503 	bic.w	r5, r5, #3
 800be5a:	3508      	adds	r5, #8
 800be5c:	2d0c      	cmp	r5, #12
 800be5e:	bf38      	it	cc
 800be60:	250c      	movcc	r5, #12
 800be62:	2d00      	cmp	r5, #0
 800be64:	4607      	mov	r7, r0
 800be66:	db01      	blt.n	800be6c <_malloc_r+0x1c>
 800be68:	42a9      	cmp	r1, r5
 800be6a:	d905      	bls.n	800be78 <_malloc_r+0x28>
 800be6c:	230c      	movs	r3, #12
 800be6e:	603b      	str	r3, [r7, #0]
 800be70:	2600      	movs	r6, #0
 800be72:	4630      	mov	r0, r6
 800be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be78:	4e2e      	ldr	r6, [pc, #184]	; (800bf34 <_malloc_r+0xe4>)
 800be7a:	f001 fd23 	bl	800d8c4 <__malloc_lock>
 800be7e:	6833      	ldr	r3, [r6, #0]
 800be80:	461c      	mov	r4, r3
 800be82:	bb34      	cbnz	r4, 800bed2 <_malloc_r+0x82>
 800be84:	4629      	mov	r1, r5
 800be86:	4638      	mov	r0, r7
 800be88:	f7ff ffc2 	bl	800be10 <sbrk_aligned>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	4604      	mov	r4, r0
 800be90:	d14d      	bne.n	800bf2e <_malloc_r+0xde>
 800be92:	6834      	ldr	r4, [r6, #0]
 800be94:	4626      	mov	r6, r4
 800be96:	2e00      	cmp	r6, #0
 800be98:	d140      	bne.n	800bf1c <_malloc_r+0xcc>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	4631      	mov	r1, r6
 800be9e:	4638      	mov	r0, r7
 800bea0:	eb04 0803 	add.w	r8, r4, r3
 800bea4:	f000 fd1c 	bl	800c8e0 <_sbrk_r>
 800bea8:	4580      	cmp	r8, r0
 800beaa:	d13a      	bne.n	800bf22 <_malloc_r+0xd2>
 800beac:	6821      	ldr	r1, [r4, #0]
 800beae:	3503      	adds	r5, #3
 800beb0:	1a6d      	subs	r5, r5, r1
 800beb2:	f025 0503 	bic.w	r5, r5, #3
 800beb6:	3508      	adds	r5, #8
 800beb8:	2d0c      	cmp	r5, #12
 800beba:	bf38      	it	cc
 800bebc:	250c      	movcc	r5, #12
 800bebe:	4629      	mov	r1, r5
 800bec0:	4638      	mov	r0, r7
 800bec2:	f7ff ffa5 	bl	800be10 <sbrk_aligned>
 800bec6:	3001      	adds	r0, #1
 800bec8:	d02b      	beq.n	800bf22 <_malloc_r+0xd2>
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	442b      	add	r3, r5
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	e00e      	b.n	800bef0 <_malloc_r+0xa0>
 800bed2:	6822      	ldr	r2, [r4, #0]
 800bed4:	1b52      	subs	r2, r2, r5
 800bed6:	d41e      	bmi.n	800bf16 <_malloc_r+0xc6>
 800bed8:	2a0b      	cmp	r2, #11
 800beda:	d916      	bls.n	800bf0a <_malloc_r+0xba>
 800bedc:	1961      	adds	r1, r4, r5
 800bede:	42a3      	cmp	r3, r4
 800bee0:	6025      	str	r5, [r4, #0]
 800bee2:	bf18      	it	ne
 800bee4:	6059      	strne	r1, [r3, #4]
 800bee6:	6863      	ldr	r3, [r4, #4]
 800bee8:	bf08      	it	eq
 800beea:	6031      	streq	r1, [r6, #0]
 800beec:	5162      	str	r2, [r4, r5]
 800beee:	604b      	str	r3, [r1, #4]
 800bef0:	4638      	mov	r0, r7
 800bef2:	f104 060b 	add.w	r6, r4, #11
 800bef6:	f001 fceb 	bl	800d8d0 <__malloc_unlock>
 800befa:	f026 0607 	bic.w	r6, r6, #7
 800befe:	1d23      	adds	r3, r4, #4
 800bf00:	1af2      	subs	r2, r6, r3
 800bf02:	d0b6      	beq.n	800be72 <_malloc_r+0x22>
 800bf04:	1b9b      	subs	r3, r3, r6
 800bf06:	50a3      	str	r3, [r4, r2]
 800bf08:	e7b3      	b.n	800be72 <_malloc_r+0x22>
 800bf0a:	6862      	ldr	r2, [r4, #4]
 800bf0c:	42a3      	cmp	r3, r4
 800bf0e:	bf0c      	ite	eq
 800bf10:	6032      	streq	r2, [r6, #0]
 800bf12:	605a      	strne	r2, [r3, #4]
 800bf14:	e7ec      	b.n	800bef0 <_malloc_r+0xa0>
 800bf16:	4623      	mov	r3, r4
 800bf18:	6864      	ldr	r4, [r4, #4]
 800bf1a:	e7b2      	b.n	800be82 <_malloc_r+0x32>
 800bf1c:	4634      	mov	r4, r6
 800bf1e:	6876      	ldr	r6, [r6, #4]
 800bf20:	e7b9      	b.n	800be96 <_malloc_r+0x46>
 800bf22:	230c      	movs	r3, #12
 800bf24:	603b      	str	r3, [r7, #0]
 800bf26:	4638      	mov	r0, r7
 800bf28:	f001 fcd2 	bl	800d8d0 <__malloc_unlock>
 800bf2c:	e7a1      	b.n	800be72 <_malloc_r+0x22>
 800bf2e:	6025      	str	r5, [r4, #0]
 800bf30:	e7de      	b.n	800bef0 <_malloc_r+0xa0>
 800bf32:	bf00      	nop
 800bf34:	200022dc 	.word	0x200022dc

0800bf38 <__cvt>:
 800bf38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	ec55 4b10 	vmov	r4, r5, d0
 800bf40:	2d00      	cmp	r5, #0
 800bf42:	460e      	mov	r6, r1
 800bf44:	4619      	mov	r1, r3
 800bf46:	462b      	mov	r3, r5
 800bf48:	bfbb      	ittet	lt
 800bf4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf4e:	461d      	movlt	r5, r3
 800bf50:	2300      	movge	r3, #0
 800bf52:	232d      	movlt	r3, #45	; 0x2d
 800bf54:	700b      	strb	r3, [r1, #0]
 800bf56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf5c:	4691      	mov	r9, r2
 800bf5e:	f023 0820 	bic.w	r8, r3, #32
 800bf62:	bfbc      	itt	lt
 800bf64:	4622      	movlt	r2, r4
 800bf66:	4614      	movlt	r4, r2
 800bf68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf6c:	d005      	beq.n	800bf7a <__cvt+0x42>
 800bf6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf72:	d100      	bne.n	800bf76 <__cvt+0x3e>
 800bf74:	3601      	adds	r6, #1
 800bf76:	2102      	movs	r1, #2
 800bf78:	e000      	b.n	800bf7c <__cvt+0x44>
 800bf7a:	2103      	movs	r1, #3
 800bf7c:	ab03      	add	r3, sp, #12
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	ab02      	add	r3, sp, #8
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	ec45 4b10 	vmov	d0, r4, r5
 800bf88:	4653      	mov	r3, sl
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	f000 fdcc 	bl	800cb28 <_dtoa_r>
 800bf90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf94:	4607      	mov	r7, r0
 800bf96:	d102      	bne.n	800bf9e <__cvt+0x66>
 800bf98:	f019 0f01 	tst.w	r9, #1
 800bf9c:	d022      	beq.n	800bfe4 <__cvt+0xac>
 800bf9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bfa2:	eb07 0906 	add.w	r9, r7, r6
 800bfa6:	d110      	bne.n	800bfca <__cvt+0x92>
 800bfa8:	783b      	ldrb	r3, [r7, #0]
 800bfaa:	2b30      	cmp	r3, #48	; 0x30
 800bfac:	d10a      	bne.n	800bfc4 <__cvt+0x8c>
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	f7f4 fd9f 	bl	8000af8 <__aeabi_dcmpeq>
 800bfba:	b918      	cbnz	r0, 800bfc4 <__cvt+0x8c>
 800bfbc:	f1c6 0601 	rsb	r6, r6, #1
 800bfc0:	f8ca 6000 	str.w	r6, [sl]
 800bfc4:	f8da 3000 	ldr.w	r3, [sl]
 800bfc8:	4499      	add	r9, r3
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 fd91 	bl	8000af8 <__aeabi_dcmpeq>
 800bfd6:	b108      	cbz	r0, 800bfdc <__cvt+0xa4>
 800bfd8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfdc:	2230      	movs	r2, #48	; 0x30
 800bfde:	9b03      	ldr	r3, [sp, #12]
 800bfe0:	454b      	cmp	r3, r9
 800bfe2:	d307      	bcc.n	800bff4 <__cvt+0xbc>
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfe8:	1bdb      	subs	r3, r3, r7
 800bfea:	4638      	mov	r0, r7
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	b004      	add	sp, #16
 800bff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bff4:	1c59      	adds	r1, r3, #1
 800bff6:	9103      	str	r1, [sp, #12]
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	e7f0      	b.n	800bfde <__cvt+0xa6>

0800bffc <__exponent>:
 800bffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bffe:	4603      	mov	r3, r0
 800c000:	2900      	cmp	r1, #0
 800c002:	bfb8      	it	lt
 800c004:	4249      	neglt	r1, r1
 800c006:	f803 2b02 	strb.w	r2, [r3], #2
 800c00a:	bfb4      	ite	lt
 800c00c:	222d      	movlt	r2, #45	; 0x2d
 800c00e:	222b      	movge	r2, #43	; 0x2b
 800c010:	2909      	cmp	r1, #9
 800c012:	7042      	strb	r2, [r0, #1]
 800c014:	dd2a      	ble.n	800c06c <__exponent+0x70>
 800c016:	f10d 0407 	add.w	r4, sp, #7
 800c01a:	46a4      	mov	ip, r4
 800c01c:	270a      	movs	r7, #10
 800c01e:	46a6      	mov	lr, r4
 800c020:	460a      	mov	r2, r1
 800c022:	fb91 f6f7 	sdiv	r6, r1, r7
 800c026:	fb07 1516 	mls	r5, r7, r6, r1
 800c02a:	3530      	adds	r5, #48	; 0x30
 800c02c:	2a63      	cmp	r2, #99	; 0x63
 800c02e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c032:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c036:	4631      	mov	r1, r6
 800c038:	dcf1      	bgt.n	800c01e <__exponent+0x22>
 800c03a:	3130      	adds	r1, #48	; 0x30
 800c03c:	f1ae 0502 	sub.w	r5, lr, #2
 800c040:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c044:	1c44      	adds	r4, r0, #1
 800c046:	4629      	mov	r1, r5
 800c048:	4561      	cmp	r1, ip
 800c04a:	d30a      	bcc.n	800c062 <__exponent+0x66>
 800c04c:	f10d 0209 	add.w	r2, sp, #9
 800c050:	eba2 020e 	sub.w	r2, r2, lr
 800c054:	4565      	cmp	r5, ip
 800c056:	bf88      	it	hi
 800c058:	2200      	movhi	r2, #0
 800c05a:	4413      	add	r3, r2
 800c05c:	1a18      	subs	r0, r3, r0
 800c05e:	b003      	add	sp, #12
 800c060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c066:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c06a:	e7ed      	b.n	800c048 <__exponent+0x4c>
 800c06c:	2330      	movs	r3, #48	; 0x30
 800c06e:	3130      	adds	r1, #48	; 0x30
 800c070:	7083      	strb	r3, [r0, #2]
 800c072:	70c1      	strb	r1, [r0, #3]
 800c074:	1d03      	adds	r3, r0, #4
 800c076:	e7f1      	b.n	800c05c <__exponent+0x60>

0800c078 <_printf_float>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	ed2d 8b02 	vpush	{d8}
 800c080:	b08d      	sub	sp, #52	; 0x34
 800c082:	460c      	mov	r4, r1
 800c084:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c088:	4616      	mov	r6, r2
 800c08a:	461f      	mov	r7, r3
 800c08c:	4605      	mov	r5, r0
 800c08e:	f001 fbfb 	bl	800d888 <_localeconv_r>
 800c092:	f8d0 a000 	ldr.w	sl, [r0]
 800c096:	4650      	mov	r0, sl
 800c098:	f7f4 f8b2 	bl	8000200 <strlen>
 800c09c:	2300      	movs	r3, #0
 800c09e:	930a      	str	r3, [sp, #40]	; 0x28
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	9305      	str	r3, [sp, #20]
 800c0a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c0ac:	3307      	adds	r3, #7
 800c0ae:	f023 0307 	bic.w	r3, r3, #7
 800c0b2:	f103 0208 	add.w	r2, r3, #8
 800c0b6:	f8c8 2000 	str.w	r2, [r8]
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c0c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c0c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0ca:	9307      	str	r3, [sp, #28]
 800c0cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0d0:	ee08 0a10 	vmov	s16, r0
 800c0d4:	4b9f      	ldr	r3, [pc, #636]	; (800c354 <_printf_float+0x2dc>)
 800c0d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0da:	f04f 32ff 	mov.w	r2, #4294967295
 800c0de:	f7f4 fd3d 	bl	8000b5c <__aeabi_dcmpun>
 800c0e2:	bb88      	cbnz	r0, 800c148 <_printf_float+0xd0>
 800c0e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0e8:	4b9a      	ldr	r3, [pc, #616]	; (800c354 <_printf_float+0x2dc>)
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	f7f4 fd17 	bl	8000b20 <__aeabi_dcmple>
 800c0f2:	bb48      	cbnz	r0, 800c148 <_printf_float+0xd0>
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	4640      	mov	r0, r8
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	f7f4 fd06 	bl	8000b0c <__aeabi_dcmplt>
 800c100:	b110      	cbz	r0, 800c108 <_printf_float+0x90>
 800c102:	232d      	movs	r3, #45	; 0x2d
 800c104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c108:	4b93      	ldr	r3, [pc, #588]	; (800c358 <_printf_float+0x2e0>)
 800c10a:	4894      	ldr	r0, [pc, #592]	; (800c35c <_printf_float+0x2e4>)
 800c10c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c110:	bf94      	ite	ls
 800c112:	4698      	movls	r8, r3
 800c114:	4680      	movhi	r8, r0
 800c116:	2303      	movs	r3, #3
 800c118:	6123      	str	r3, [r4, #16]
 800c11a:	9b05      	ldr	r3, [sp, #20]
 800c11c:	f023 0204 	bic.w	r2, r3, #4
 800c120:	6022      	str	r2, [r4, #0]
 800c122:	f04f 0900 	mov.w	r9, #0
 800c126:	9700      	str	r7, [sp, #0]
 800c128:	4633      	mov	r3, r6
 800c12a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c12c:	4621      	mov	r1, r4
 800c12e:	4628      	mov	r0, r5
 800c130:	f000 f9d8 	bl	800c4e4 <_printf_common>
 800c134:	3001      	adds	r0, #1
 800c136:	f040 8090 	bne.w	800c25a <_printf_float+0x1e2>
 800c13a:	f04f 30ff 	mov.w	r0, #4294967295
 800c13e:	b00d      	add	sp, #52	; 0x34
 800c140:	ecbd 8b02 	vpop	{d8}
 800c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c148:	4642      	mov	r2, r8
 800c14a:	464b      	mov	r3, r9
 800c14c:	4640      	mov	r0, r8
 800c14e:	4649      	mov	r1, r9
 800c150:	f7f4 fd04 	bl	8000b5c <__aeabi_dcmpun>
 800c154:	b140      	cbz	r0, 800c168 <_printf_float+0xf0>
 800c156:	464b      	mov	r3, r9
 800c158:	2b00      	cmp	r3, #0
 800c15a:	bfbc      	itt	lt
 800c15c:	232d      	movlt	r3, #45	; 0x2d
 800c15e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c162:	487f      	ldr	r0, [pc, #508]	; (800c360 <_printf_float+0x2e8>)
 800c164:	4b7f      	ldr	r3, [pc, #508]	; (800c364 <_printf_float+0x2ec>)
 800c166:	e7d1      	b.n	800c10c <_printf_float+0x94>
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c16e:	9206      	str	r2, [sp, #24]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	d13f      	bne.n	800c1f4 <_printf_float+0x17c>
 800c174:	2306      	movs	r3, #6
 800c176:	6063      	str	r3, [r4, #4]
 800c178:	9b05      	ldr	r3, [sp, #20]
 800c17a:	6861      	ldr	r1, [r4, #4]
 800c17c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c180:	2300      	movs	r3, #0
 800c182:	9303      	str	r3, [sp, #12]
 800c184:	ab0a      	add	r3, sp, #40	; 0x28
 800c186:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c18a:	ab09      	add	r3, sp, #36	; 0x24
 800c18c:	ec49 8b10 	vmov	d0, r8, r9
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	6022      	str	r2, [r4, #0]
 800c194:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c198:	4628      	mov	r0, r5
 800c19a:	f7ff fecd 	bl	800bf38 <__cvt>
 800c19e:	9b06      	ldr	r3, [sp, #24]
 800c1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1a2:	2b47      	cmp	r3, #71	; 0x47
 800c1a4:	4680      	mov	r8, r0
 800c1a6:	d108      	bne.n	800c1ba <_printf_float+0x142>
 800c1a8:	1cc8      	adds	r0, r1, #3
 800c1aa:	db02      	blt.n	800c1b2 <_printf_float+0x13a>
 800c1ac:	6863      	ldr	r3, [r4, #4]
 800c1ae:	4299      	cmp	r1, r3
 800c1b0:	dd41      	ble.n	800c236 <_printf_float+0x1be>
 800c1b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c1b6:	fa5f fb8b 	uxtb.w	fp, fp
 800c1ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1be:	d820      	bhi.n	800c202 <_printf_float+0x18a>
 800c1c0:	3901      	subs	r1, #1
 800c1c2:	465a      	mov	r2, fp
 800c1c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c1c8:	9109      	str	r1, [sp, #36]	; 0x24
 800c1ca:	f7ff ff17 	bl	800bffc <__exponent>
 800c1ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1d0:	1813      	adds	r3, r2, r0
 800c1d2:	2a01      	cmp	r2, #1
 800c1d4:	4681      	mov	r9, r0
 800c1d6:	6123      	str	r3, [r4, #16]
 800c1d8:	dc02      	bgt.n	800c1e0 <_printf_float+0x168>
 800c1da:	6822      	ldr	r2, [r4, #0]
 800c1dc:	07d2      	lsls	r2, r2, #31
 800c1de:	d501      	bpl.n	800c1e4 <_printf_float+0x16c>
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	6123      	str	r3, [r4, #16]
 800c1e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d09c      	beq.n	800c126 <_printf_float+0xae>
 800c1ec:	232d      	movs	r3, #45	; 0x2d
 800c1ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1f2:	e798      	b.n	800c126 <_printf_float+0xae>
 800c1f4:	9a06      	ldr	r2, [sp, #24]
 800c1f6:	2a47      	cmp	r2, #71	; 0x47
 800c1f8:	d1be      	bne.n	800c178 <_printf_float+0x100>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1bc      	bne.n	800c178 <_printf_float+0x100>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e7b9      	b.n	800c176 <_printf_float+0xfe>
 800c202:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c206:	d118      	bne.n	800c23a <_printf_float+0x1c2>
 800c208:	2900      	cmp	r1, #0
 800c20a:	6863      	ldr	r3, [r4, #4]
 800c20c:	dd0b      	ble.n	800c226 <_printf_float+0x1ae>
 800c20e:	6121      	str	r1, [r4, #16]
 800c210:	b913      	cbnz	r3, 800c218 <_printf_float+0x1a0>
 800c212:	6822      	ldr	r2, [r4, #0]
 800c214:	07d0      	lsls	r0, r2, #31
 800c216:	d502      	bpl.n	800c21e <_printf_float+0x1a6>
 800c218:	3301      	adds	r3, #1
 800c21a:	440b      	add	r3, r1
 800c21c:	6123      	str	r3, [r4, #16]
 800c21e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c220:	f04f 0900 	mov.w	r9, #0
 800c224:	e7de      	b.n	800c1e4 <_printf_float+0x16c>
 800c226:	b913      	cbnz	r3, 800c22e <_printf_float+0x1b6>
 800c228:	6822      	ldr	r2, [r4, #0]
 800c22a:	07d2      	lsls	r2, r2, #31
 800c22c:	d501      	bpl.n	800c232 <_printf_float+0x1ba>
 800c22e:	3302      	adds	r3, #2
 800c230:	e7f4      	b.n	800c21c <_printf_float+0x1a4>
 800c232:	2301      	movs	r3, #1
 800c234:	e7f2      	b.n	800c21c <_printf_float+0x1a4>
 800c236:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c23c:	4299      	cmp	r1, r3
 800c23e:	db05      	blt.n	800c24c <_printf_float+0x1d4>
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	6121      	str	r1, [r4, #16]
 800c244:	07d8      	lsls	r0, r3, #31
 800c246:	d5ea      	bpl.n	800c21e <_printf_float+0x1a6>
 800c248:	1c4b      	adds	r3, r1, #1
 800c24a:	e7e7      	b.n	800c21c <_printf_float+0x1a4>
 800c24c:	2900      	cmp	r1, #0
 800c24e:	bfd4      	ite	le
 800c250:	f1c1 0202 	rsble	r2, r1, #2
 800c254:	2201      	movgt	r2, #1
 800c256:	4413      	add	r3, r2
 800c258:	e7e0      	b.n	800c21c <_printf_float+0x1a4>
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	055a      	lsls	r2, r3, #21
 800c25e:	d407      	bmi.n	800c270 <_printf_float+0x1f8>
 800c260:	6923      	ldr	r3, [r4, #16]
 800c262:	4642      	mov	r2, r8
 800c264:	4631      	mov	r1, r6
 800c266:	4628      	mov	r0, r5
 800c268:	47b8      	blx	r7
 800c26a:	3001      	adds	r0, #1
 800c26c:	d12c      	bne.n	800c2c8 <_printf_float+0x250>
 800c26e:	e764      	b.n	800c13a <_printf_float+0xc2>
 800c270:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c274:	f240 80e0 	bls.w	800c438 <_printf_float+0x3c0>
 800c278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c27c:	2200      	movs	r2, #0
 800c27e:	2300      	movs	r3, #0
 800c280:	f7f4 fc3a 	bl	8000af8 <__aeabi_dcmpeq>
 800c284:	2800      	cmp	r0, #0
 800c286:	d034      	beq.n	800c2f2 <_printf_float+0x27a>
 800c288:	4a37      	ldr	r2, [pc, #220]	; (800c368 <_printf_float+0x2f0>)
 800c28a:	2301      	movs	r3, #1
 800c28c:	4631      	mov	r1, r6
 800c28e:	4628      	mov	r0, r5
 800c290:	47b8      	blx	r7
 800c292:	3001      	adds	r0, #1
 800c294:	f43f af51 	beq.w	800c13a <_printf_float+0xc2>
 800c298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c29c:	429a      	cmp	r2, r3
 800c29e:	db02      	blt.n	800c2a6 <_printf_float+0x22e>
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	07d8      	lsls	r0, r3, #31
 800c2a4:	d510      	bpl.n	800c2c8 <_printf_float+0x250>
 800c2a6:	ee18 3a10 	vmov	r3, s16
 800c2aa:	4652      	mov	r2, sl
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	47b8      	blx	r7
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	f43f af41 	beq.w	800c13a <_printf_float+0xc2>
 800c2b8:	f04f 0800 	mov.w	r8, #0
 800c2bc:	f104 091a 	add.w	r9, r4, #26
 800c2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	4543      	cmp	r3, r8
 800c2c6:	dc09      	bgt.n	800c2dc <_printf_float+0x264>
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	079b      	lsls	r3, r3, #30
 800c2cc:	f100 8105 	bmi.w	800c4da <_printf_float+0x462>
 800c2d0:	68e0      	ldr	r0, [r4, #12]
 800c2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2d4:	4298      	cmp	r0, r3
 800c2d6:	bfb8      	it	lt
 800c2d8:	4618      	movlt	r0, r3
 800c2da:	e730      	b.n	800c13e <_printf_float+0xc6>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	464a      	mov	r2, r9
 800c2e0:	4631      	mov	r1, r6
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	47b8      	blx	r7
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	f43f af27 	beq.w	800c13a <_printf_float+0xc2>
 800c2ec:	f108 0801 	add.w	r8, r8, #1
 800c2f0:	e7e6      	b.n	800c2c0 <_printf_float+0x248>
 800c2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	dc39      	bgt.n	800c36c <_printf_float+0x2f4>
 800c2f8:	4a1b      	ldr	r2, [pc, #108]	; (800c368 <_printf_float+0x2f0>)
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	4628      	mov	r0, r5
 800c300:	47b8      	blx	r7
 800c302:	3001      	adds	r0, #1
 800c304:	f43f af19 	beq.w	800c13a <_printf_float+0xc2>
 800c308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c30c:	4313      	orrs	r3, r2
 800c30e:	d102      	bne.n	800c316 <_printf_float+0x29e>
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	07d9      	lsls	r1, r3, #31
 800c314:	d5d8      	bpl.n	800c2c8 <_printf_float+0x250>
 800c316:	ee18 3a10 	vmov	r3, s16
 800c31a:	4652      	mov	r2, sl
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	f43f af09 	beq.w	800c13a <_printf_float+0xc2>
 800c328:	f04f 0900 	mov.w	r9, #0
 800c32c:	f104 0a1a 	add.w	sl, r4, #26
 800c330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c332:	425b      	negs	r3, r3
 800c334:	454b      	cmp	r3, r9
 800c336:	dc01      	bgt.n	800c33c <_printf_float+0x2c4>
 800c338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c33a:	e792      	b.n	800c262 <_printf_float+0x1ea>
 800c33c:	2301      	movs	r3, #1
 800c33e:	4652      	mov	r2, sl
 800c340:	4631      	mov	r1, r6
 800c342:	4628      	mov	r0, r5
 800c344:	47b8      	blx	r7
 800c346:	3001      	adds	r0, #1
 800c348:	f43f aef7 	beq.w	800c13a <_printf_float+0xc2>
 800c34c:	f109 0901 	add.w	r9, r9, #1
 800c350:	e7ee      	b.n	800c330 <_printf_float+0x2b8>
 800c352:	bf00      	nop
 800c354:	7fefffff 	.word	0x7fefffff
 800c358:	0800ec7c 	.word	0x0800ec7c
 800c35c:	0800ec80 	.word	0x0800ec80
 800c360:	0800ec88 	.word	0x0800ec88
 800c364:	0800ec84 	.word	0x0800ec84
 800c368:	0800ec8c 	.word	0x0800ec8c
 800c36c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c36e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c370:	429a      	cmp	r2, r3
 800c372:	bfa8      	it	ge
 800c374:	461a      	movge	r2, r3
 800c376:	2a00      	cmp	r2, #0
 800c378:	4691      	mov	r9, r2
 800c37a:	dc37      	bgt.n	800c3ec <_printf_float+0x374>
 800c37c:	f04f 0b00 	mov.w	fp, #0
 800c380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c384:	f104 021a 	add.w	r2, r4, #26
 800c388:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c38a:	9305      	str	r3, [sp, #20]
 800c38c:	eba3 0309 	sub.w	r3, r3, r9
 800c390:	455b      	cmp	r3, fp
 800c392:	dc33      	bgt.n	800c3fc <_printf_float+0x384>
 800c394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c398:	429a      	cmp	r2, r3
 800c39a:	db3b      	blt.n	800c414 <_printf_float+0x39c>
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	07da      	lsls	r2, r3, #31
 800c3a0:	d438      	bmi.n	800c414 <_printf_float+0x39c>
 800c3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a4:	9a05      	ldr	r2, [sp, #20]
 800c3a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3a8:	1a9a      	subs	r2, r3, r2
 800c3aa:	eba3 0901 	sub.w	r9, r3, r1
 800c3ae:	4591      	cmp	r9, r2
 800c3b0:	bfa8      	it	ge
 800c3b2:	4691      	movge	r9, r2
 800c3b4:	f1b9 0f00 	cmp.w	r9, #0
 800c3b8:	dc35      	bgt.n	800c426 <_printf_float+0x3ae>
 800c3ba:	f04f 0800 	mov.w	r8, #0
 800c3be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3c2:	f104 0a1a 	add.w	sl, r4, #26
 800c3c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3ca:	1a9b      	subs	r3, r3, r2
 800c3cc:	eba3 0309 	sub.w	r3, r3, r9
 800c3d0:	4543      	cmp	r3, r8
 800c3d2:	f77f af79 	ble.w	800c2c8 <_printf_float+0x250>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	4652      	mov	r2, sl
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f43f aeaa 	beq.w	800c13a <_printf_float+0xc2>
 800c3e6:	f108 0801 	add.w	r8, r8, #1
 800c3ea:	e7ec      	b.n	800c3c6 <_printf_float+0x34e>
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	47b8      	blx	r7
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	d1c0      	bne.n	800c37c <_printf_float+0x304>
 800c3fa:	e69e      	b.n	800c13a <_printf_float+0xc2>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	9205      	str	r2, [sp, #20]
 800c404:	47b8      	blx	r7
 800c406:	3001      	adds	r0, #1
 800c408:	f43f ae97 	beq.w	800c13a <_printf_float+0xc2>
 800c40c:	9a05      	ldr	r2, [sp, #20]
 800c40e:	f10b 0b01 	add.w	fp, fp, #1
 800c412:	e7b9      	b.n	800c388 <_printf_float+0x310>
 800c414:	ee18 3a10 	vmov	r3, s16
 800c418:	4652      	mov	r2, sl
 800c41a:	4631      	mov	r1, r6
 800c41c:	4628      	mov	r0, r5
 800c41e:	47b8      	blx	r7
 800c420:	3001      	adds	r0, #1
 800c422:	d1be      	bne.n	800c3a2 <_printf_float+0x32a>
 800c424:	e689      	b.n	800c13a <_printf_float+0xc2>
 800c426:	9a05      	ldr	r2, [sp, #20]
 800c428:	464b      	mov	r3, r9
 800c42a:	4442      	add	r2, r8
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	47b8      	blx	r7
 800c432:	3001      	adds	r0, #1
 800c434:	d1c1      	bne.n	800c3ba <_printf_float+0x342>
 800c436:	e680      	b.n	800c13a <_printf_float+0xc2>
 800c438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c43a:	2a01      	cmp	r2, #1
 800c43c:	dc01      	bgt.n	800c442 <_printf_float+0x3ca>
 800c43e:	07db      	lsls	r3, r3, #31
 800c440:	d538      	bpl.n	800c4b4 <_printf_float+0x43c>
 800c442:	2301      	movs	r3, #1
 800c444:	4642      	mov	r2, r8
 800c446:	4631      	mov	r1, r6
 800c448:	4628      	mov	r0, r5
 800c44a:	47b8      	blx	r7
 800c44c:	3001      	adds	r0, #1
 800c44e:	f43f ae74 	beq.w	800c13a <_printf_float+0xc2>
 800c452:	ee18 3a10 	vmov	r3, s16
 800c456:	4652      	mov	r2, sl
 800c458:	4631      	mov	r1, r6
 800c45a:	4628      	mov	r0, r5
 800c45c:	47b8      	blx	r7
 800c45e:	3001      	adds	r0, #1
 800c460:	f43f ae6b 	beq.w	800c13a <_printf_float+0xc2>
 800c464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c468:	2200      	movs	r2, #0
 800c46a:	2300      	movs	r3, #0
 800c46c:	f7f4 fb44 	bl	8000af8 <__aeabi_dcmpeq>
 800c470:	b9d8      	cbnz	r0, 800c4aa <_printf_float+0x432>
 800c472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c474:	f108 0201 	add.w	r2, r8, #1
 800c478:	3b01      	subs	r3, #1
 800c47a:	4631      	mov	r1, r6
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b8      	blx	r7
 800c480:	3001      	adds	r0, #1
 800c482:	d10e      	bne.n	800c4a2 <_printf_float+0x42a>
 800c484:	e659      	b.n	800c13a <_printf_float+0xc2>
 800c486:	2301      	movs	r3, #1
 800c488:	4652      	mov	r2, sl
 800c48a:	4631      	mov	r1, r6
 800c48c:	4628      	mov	r0, r5
 800c48e:	47b8      	blx	r7
 800c490:	3001      	adds	r0, #1
 800c492:	f43f ae52 	beq.w	800c13a <_printf_float+0xc2>
 800c496:	f108 0801 	add.w	r8, r8, #1
 800c49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c49c:	3b01      	subs	r3, #1
 800c49e:	4543      	cmp	r3, r8
 800c4a0:	dcf1      	bgt.n	800c486 <_printf_float+0x40e>
 800c4a2:	464b      	mov	r3, r9
 800c4a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c4a8:	e6dc      	b.n	800c264 <_printf_float+0x1ec>
 800c4aa:	f04f 0800 	mov.w	r8, #0
 800c4ae:	f104 0a1a 	add.w	sl, r4, #26
 800c4b2:	e7f2      	b.n	800c49a <_printf_float+0x422>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	4642      	mov	r2, r8
 800c4b8:	e7df      	b.n	800c47a <_printf_float+0x402>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	464a      	mov	r2, r9
 800c4be:	4631      	mov	r1, r6
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	47b8      	blx	r7
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	f43f ae38 	beq.w	800c13a <_printf_float+0xc2>
 800c4ca:	f108 0801 	add.w	r8, r8, #1
 800c4ce:	68e3      	ldr	r3, [r4, #12]
 800c4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4d2:	1a5b      	subs	r3, r3, r1
 800c4d4:	4543      	cmp	r3, r8
 800c4d6:	dcf0      	bgt.n	800c4ba <_printf_float+0x442>
 800c4d8:	e6fa      	b.n	800c2d0 <_printf_float+0x258>
 800c4da:	f04f 0800 	mov.w	r8, #0
 800c4de:	f104 0919 	add.w	r9, r4, #25
 800c4e2:	e7f4      	b.n	800c4ce <_printf_float+0x456>

0800c4e4 <_printf_common>:
 800c4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e8:	4616      	mov	r6, r2
 800c4ea:	4699      	mov	r9, r3
 800c4ec:	688a      	ldr	r2, [r1, #8]
 800c4ee:	690b      	ldr	r3, [r1, #16]
 800c4f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	bfb8      	it	lt
 800c4f8:	4613      	movlt	r3, r2
 800c4fa:	6033      	str	r3, [r6, #0]
 800c4fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c500:	4607      	mov	r7, r0
 800c502:	460c      	mov	r4, r1
 800c504:	b10a      	cbz	r2, 800c50a <_printf_common+0x26>
 800c506:	3301      	adds	r3, #1
 800c508:	6033      	str	r3, [r6, #0]
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	0699      	lsls	r1, r3, #26
 800c50e:	bf42      	ittt	mi
 800c510:	6833      	ldrmi	r3, [r6, #0]
 800c512:	3302      	addmi	r3, #2
 800c514:	6033      	strmi	r3, [r6, #0]
 800c516:	6825      	ldr	r5, [r4, #0]
 800c518:	f015 0506 	ands.w	r5, r5, #6
 800c51c:	d106      	bne.n	800c52c <_printf_common+0x48>
 800c51e:	f104 0a19 	add.w	sl, r4, #25
 800c522:	68e3      	ldr	r3, [r4, #12]
 800c524:	6832      	ldr	r2, [r6, #0]
 800c526:	1a9b      	subs	r3, r3, r2
 800c528:	42ab      	cmp	r3, r5
 800c52a:	dc26      	bgt.n	800c57a <_printf_common+0x96>
 800c52c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c530:	1e13      	subs	r3, r2, #0
 800c532:	6822      	ldr	r2, [r4, #0]
 800c534:	bf18      	it	ne
 800c536:	2301      	movne	r3, #1
 800c538:	0692      	lsls	r2, r2, #26
 800c53a:	d42b      	bmi.n	800c594 <_printf_common+0xb0>
 800c53c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c540:	4649      	mov	r1, r9
 800c542:	4638      	mov	r0, r7
 800c544:	47c0      	blx	r8
 800c546:	3001      	adds	r0, #1
 800c548:	d01e      	beq.n	800c588 <_printf_common+0xa4>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	68e5      	ldr	r5, [r4, #12]
 800c54e:	6832      	ldr	r2, [r6, #0]
 800c550:	f003 0306 	and.w	r3, r3, #6
 800c554:	2b04      	cmp	r3, #4
 800c556:	bf08      	it	eq
 800c558:	1aad      	subeq	r5, r5, r2
 800c55a:	68a3      	ldr	r3, [r4, #8]
 800c55c:	6922      	ldr	r2, [r4, #16]
 800c55e:	bf0c      	ite	eq
 800c560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c564:	2500      	movne	r5, #0
 800c566:	4293      	cmp	r3, r2
 800c568:	bfc4      	itt	gt
 800c56a:	1a9b      	subgt	r3, r3, r2
 800c56c:	18ed      	addgt	r5, r5, r3
 800c56e:	2600      	movs	r6, #0
 800c570:	341a      	adds	r4, #26
 800c572:	42b5      	cmp	r5, r6
 800c574:	d11a      	bne.n	800c5ac <_printf_common+0xc8>
 800c576:	2000      	movs	r0, #0
 800c578:	e008      	b.n	800c58c <_printf_common+0xa8>
 800c57a:	2301      	movs	r3, #1
 800c57c:	4652      	mov	r2, sl
 800c57e:	4649      	mov	r1, r9
 800c580:	4638      	mov	r0, r7
 800c582:	47c0      	blx	r8
 800c584:	3001      	adds	r0, #1
 800c586:	d103      	bne.n	800c590 <_printf_common+0xac>
 800c588:	f04f 30ff 	mov.w	r0, #4294967295
 800c58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c590:	3501      	adds	r5, #1
 800c592:	e7c6      	b.n	800c522 <_printf_common+0x3e>
 800c594:	18e1      	adds	r1, r4, r3
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	2030      	movs	r0, #48	; 0x30
 800c59a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c59e:	4422      	add	r2, r4
 800c5a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5a8:	3302      	adds	r3, #2
 800c5aa:	e7c7      	b.n	800c53c <_printf_common+0x58>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	4622      	mov	r2, r4
 800c5b0:	4649      	mov	r1, r9
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	47c0      	blx	r8
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	d0e6      	beq.n	800c588 <_printf_common+0xa4>
 800c5ba:	3601      	adds	r6, #1
 800c5bc:	e7d9      	b.n	800c572 <_printf_common+0x8e>
	...

0800c5c0 <_printf_i>:
 800c5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c4:	7e0f      	ldrb	r7, [r1, #24]
 800c5c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5c8:	2f78      	cmp	r7, #120	; 0x78
 800c5ca:	4691      	mov	r9, r2
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	469a      	mov	sl, r3
 800c5d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5d6:	d807      	bhi.n	800c5e8 <_printf_i+0x28>
 800c5d8:	2f62      	cmp	r7, #98	; 0x62
 800c5da:	d80a      	bhi.n	800c5f2 <_printf_i+0x32>
 800c5dc:	2f00      	cmp	r7, #0
 800c5de:	f000 80d8 	beq.w	800c792 <_printf_i+0x1d2>
 800c5e2:	2f58      	cmp	r7, #88	; 0x58
 800c5e4:	f000 80a3 	beq.w	800c72e <_printf_i+0x16e>
 800c5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5f0:	e03a      	b.n	800c668 <_printf_i+0xa8>
 800c5f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5f6:	2b15      	cmp	r3, #21
 800c5f8:	d8f6      	bhi.n	800c5e8 <_printf_i+0x28>
 800c5fa:	a101      	add	r1, pc, #4	; (adr r1, 800c600 <_printf_i+0x40>)
 800c5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c600:	0800c659 	.word	0x0800c659
 800c604:	0800c66d 	.word	0x0800c66d
 800c608:	0800c5e9 	.word	0x0800c5e9
 800c60c:	0800c5e9 	.word	0x0800c5e9
 800c610:	0800c5e9 	.word	0x0800c5e9
 800c614:	0800c5e9 	.word	0x0800c5e9
 800c618:	0800c66d 	.word	0x0800c66d
 800c61c:	0800c5e9 	.word	0x0800c5e9
 800c620:	0800c5e9 	.word	0x0800c5e9
 800c624:	0800c5e9 	.word	0x0800c5e9
 800c628:	0800c5e9 	.word	0x0800c5e9
 800c62c:	0800c779 	.word	0x0800c779
 800c630:	0800c69d 	.word	0x0800c69d
 800c634:	0800c75b 	.word	0x0800c75b
 800c638:	0800c5e9 	.word	0x0800c5e9
 800c63c:	0800c5e9 	.word	0x0800c5e9
 800c640:	0800c79b 	.word	0x0800c79b
 800c644:	0800c5e9 	.word	0x0800c5e9
 800c648:	0800c69d 	.word	0x0800c69d
 800c64c:	0800c5e9 	.word	0x0800c5e9
 800c650:	0800c5e9 	.word	0x0800c5e9
 800c654:	0800c763 	.word	0x0800c763
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	1d1a      	adds	r2, r3, #4
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	602a      	str	r2, [r5, #0]
 800c660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c668:	2301      	movs	r3, #1
 800c66a:	e0a3      	b.n	800c7b4 <_printf_i+0x1f4>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	6829      	ldr	r1, [r5, #0]
 800c670:	0606      	lsls	r6, r0, #24
 800c672:	f101 0304 	add.w	r3, r1, #4
 800c676:	d50a      	bpl.n	800c68e <_printf_i+0xce>
 800c678:	680e      	ldr	r6, [r1, #0]
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	2e00      	cmp	r6, #0
 800c67e:	da03      	bge.n	800c688 <_printf_i+0xc8>
 800c680:	232d      	movs	r3, #45	; 0x2d
 800c682:	4276      	negs	r6, r6
 800c684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c688:	485e      	ldr	r0, [pc, #376]	; (800c804 <_printf_i+0x244>)
 800c68a:	230a      	movs	r3, #10
 800c68c:	e019      	b.n	800c6c2 <_printf_i+0x102>
 800c68e:	680e      	ldr	r6, [r1, #0]
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c696:	bf18      	it	ne
 800c698:	b236      	sxthne	r6, r6
 800c69a:	e7ef      	b.n	800c67c <_printf_i+0xbc>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	6820      	ldr	r0, [r4, #0]
 800c6a0:	1d19      	adds	r1, r3, #4
 800c6a2:	6029      	str	r1, [r5, #0]
 800c6a4:	0601      	lsls	r1, r0, #24
 800c6a6:	d501      	bpl.n	800c6ac <_printf_i+0xec>
 800c6a8:	681e      	ldr	r6, [r3, #0]
 800c6aa:	e002      	b.n	800c6b2 <_printf_i+0xf2>
 800c6ac:	0646      	lsls	r6, r0, #25
 800c6ae:	d5fb      	bpl.n	800c6a8 <_printf_i+0xe8>
 800c6b0:	881e      	ldrh	r6, [r3, #0]
 800c6b2:	4854      	ldr	r0, [pc, #336]	; (800c804 <_printf_i+0x244>)
 800c6b4:	2f6f      	cmp	r7, #111	; 0x6f
 800c6b6:	bf0c      	ite	eq
 800c6b8:	2308      	moveq	r3, #8
 800c6ba:	230a      	movne	r3, #10
 800c6bc:	2100      	movs	r1, #0
 800c6be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6c2:	6865      	ldr	r5, [r4, #4]
 800c6c4:	60a5      	str	r5, [r4, #8]
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	bfa2      	ittt	ge
 800c6ca:	6821      	ldrge	r1, [r4, #0]
 800c6cc:	f021 0104 	bicge.w	r1, r1, #4
 800c6d0:	6021      	strge	r1, [r4, #0]
 800c6d2:	b90e      	cbnz	r6, 800c6d8 <_printf_i+0x118>
 800c6d4:	2d00      	cmp	r5, #0
 800c6d6:	d04d      	beq.n	800c774 <_printf_i+0x1b4>
 800c6d8:	4615      	mov	r5, r2
 800c6da:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6de:	fb03 6711 	mls	r7, r3, r1, r6
 800c6e2:	5dc7      	ldrb	r7, [r0, r7]
 800c6e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6e8:	4637      	mov	r7, r6
 800c6ea:	42bb      	cmp	r3, r7
 800c6ec:	460e      	mov	r6, r1
 800c6ee:	d9f4      	bls.n	800c6da <_printf_i+0x11a>
 800c6f0:	2b08      	cmp	r3, #8
 800c6f2:	d10b      	bne.n	800c70c <_printf_i+0x14c>
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	07de      	lsls	r6, r3, #31
 800c6f8:	d508      	bpl.n	800c70c <_printf_i+0x14c>
 800c6fa:	6923      	ldr	r3, [r4, #16]
 800c6fc:	6861      	ldr	r1, [r4, #4]
 800c6fe:	4299      	cmp	r1, r3
 800c700:	bfde      	ittt	le
 800c702:	2330      	movle	r3, #48	; 0x30
 800c704:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c70c:	1b52      	subs	r2, r2, r5
 800c70e:	6122      	str	r2, [r4, #16]
 800c710:	f8cd a000 	str.w	sl, [sp]
 800c714:	464b      	mov	r3, r9
 800c716:	aa03      	add	r2, sp, #12
 800c718:	4621      	mov	r1, r4
 800c71a:	4640      	mov	r0, r8
 800c71c:	f7ff fee2 	bl	800c4e4 <_printf_common>
 800c720:	3001      	adds	r0, #1
 800c722:	d14c      	bne.n	800c7be <_printf_i+0x1fe>
 800c724:	f04f 30ff 	mov.w	r0, #4294967295
 800c728:	b004      	add	sp, #16
 800c72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72e:	4835      	ldr	r0, [pc, #212]	; (800c804 <_printf_i+0x244>)
 800c730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c734:	6829      	ldr	r1, [r5, #0]
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	f851 6b04 	ldr.w	r6, [r1], #4
 800c73c:	6029      	str	r1, [r5, #0]
 800c73e:	061d      	lsls	r5, r3, #24
 800c740:	d514      	bpl.n	800c76c <_printf_i+0x1ac>
 800c742:	07df      	lsls	r7, r3, #31
 800c744:	bf44      	itt	mi
 800c746:	f043 0320 	orrmi.w	r3, r3, #32
 800c74a:	6023      	strmi	r3, [r4, #0]
 800c74c:	b91e      	cbnz	r6, 800c756 <_printf_i+0x196>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	f023 0320 	bic.w	r3, r3, #32
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	2310      	movs	r3, #16
 800c758:	e7b0      	b.n	800c6bc <_printf_i+0xfc>
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	f043 0320 	orr.w	r3, r3, #32
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	2378      	movs	r3, #120	; 0x78
 800c764:	4828      	ldr	r0, [pc, #160]	; (800c808 <_printf_i+0x248>)
 800c766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c76a:	e7e3      	b.n	800c734 <_printf_i+0x174>
 800c76c:	0659      	lsls	r1, r3, #25
 800c76e:	bf48      	it	mi
 800c770:	b2b6      	uxthmi	r6, r6
 800c772:	e7e6      	b.n	800c742 <_printf_i+0x182>
 800c774:	4615      	mov	r5, r2
 800c776:	e7bb      	b.n	800c6f0 <_printf_i+0x130>
 800c778:	682b      	ldr	r3, [r5, #0]
 800c77a:	6826      	ldr	r6, [r4, #0]
 800c77c:	6961      	ldr	r1, [r4, #20]
 800c77e:	1d18      	adds	r0, r3, #4
 800c780:	6028      	str	r0, [r5, #0]
 800c782:	0635      	lsls	r5, r6, #24
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	d501      	bpl.n	800c78c <_printf_i+0x1cc>
 800c788:	6019      	str	r1, [r3, #0]
 800c78a:	e002      	b.n	800c792 <_printf_i+0x1d2>
 800c78c:	0670      	lsls	r0, r6, #25
 800c78e:	d5fb      	bpl.n	800c788 <_printf_i+0x1c8>
 800c790:	8019      	strh	r1, [r3, #0]
 800c792:	2300      	movs	r3, #0
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	4615      	mov	r5, r2
 800c798:	e7ba      	b.n	800c710 <_printf_i+0x150>
 800c79a:	682b      	ldr	r3, [r5, #0]
 800c79c:	1d1a      	adds	r2, r3, #4
 800c79e:	602a      	str	r2, [r5, #0]
 800c7a0:	681d      	ldr	r5, [r3, #0]
 800c7a2:	6862      	ldr	r2, [r4, #4]
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f7f3 fd32 	bl	8000210 <memchr>
 800c7ac:	b108      	cbz	r0, 800c7b2 <_printf_i+0x1f2>
 800c7ae:	1b40      	subs	r0, r0, r5
 800c7b0:	6060      	str	r0, [r4, #4]
 800c7b2:	6863      	ldr	r3, [r4, #4]
 800c7b4:	6123      	str	r3, [r4, #16]
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7bc:	e7a8      	b.n	800c710 <_printf_i+0x150>
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	462a      	mov	r2, r5
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	47d0      	blx	sl
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	d0ab      	beq.n	800c724 <_printf_i+0x164>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	079b      	lsls	r3, r3, #30
 800c7d0:	d413      	bmi.n	800c7fa <_printf_i+0x23a>
 800c7d2:	68e0      	ldr	r0, [r4, #12]
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	4298      	cmp	r0, r3
 800c7d8:	bfb8      	it	lt
 800c7da:	4618      	movlt	r0, r3
 800c7dc:	e7a4      	b.n	800c728 <_printf_i+0x168>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	4632      	mov	r2, r6
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	47d0      	blx	sl
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d09b      	beq.n	800c724 <_printf_i+0x164>
 800c7ec:	3501      	adds	r5, #1
 800c7ee:	68e3      	ldr	r3, [r4, #12]
 800c7f0:	9903      	ldr	r1, [sp, #12]
 800c7f2:	1a5b      	subs	r3, r3, r1
 800c7f4:	42ab      	cmp	r3, r5
 800c7f6:	dcf2      	bgt.n	800c7de <_printf_i+0x21e>
 800c7f8:	e7eb      	b.n	800c7d2 <_printf_i+0x212>
 800c7fa:	2500      	movs	r5, #0
 800c7fc:	f104 0619 	add.w	r6, r4, #25
 800c800:	e7f5      	b.n	800c7ee <_printf_i+0x22e>
 800c802:	bf00      	nop
 800c804:	0800ec8e 	.word	0x0800ec8e
 800c808:	0800ec9f 	.word	0x0800ec9f

0800c80c <cleanup_glue>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	460c      	mov	r4, r1
 800c810:	6809      	ldr	r1, [r1, #0]
 800c812:	4605      	mov	r5, r0
 800c814:	b109      	cbz	r1, 800c81a <cleanup_glue+0xe>
 800c816:	f7ff fff9 	bl	800c80c <cleanup_glue>
 800c81a:	4621      	mov	r1, r4
 800c81c:	4628      	mov	r0, r5
 800c81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c822:	f001 bbf5 	b.w	800e010 <_free_r>
	...

0800c828 <_reclaim_reent>:
 800c828:	4b2c      	ldr	r3, [pc, #176]	; (800c8dc <_reclaim_reent+0xb4>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4283      	cmp	r3, r0
 800c82e:	b570      	push	{r4, r5, r6, lr}
 800c830:	4604      	mov	r4, r0
 800c832:	d051      	beq.n	800c8d8 <_reclaim_reent+0xb0>
 800c834:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c836:	b143      	cbz	r3, 800c84a <_reclaim_reent+0x22>
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d14a      	bne.n	800c8d4 <_reclaim_reent+0xac>
 800c83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c840:	6819      	ldr	r1, [r3, #0]
 800c842:	b111      	cbz	r1, 800c84a <_reclaim_reent+0x22>
 800c844:	4620      	mov	r0, r4
 800c846:	f001 fbe3 	bl	800e010 <_free_r>
 800c84a:	6961      	ldr	r1, [r4, #20]
 800c84c:	b111      	cbz	r1, 800c854 <_reclaim_reent+0x2c>
 800c84e:	4620      	mov	r0, r4
 800c850:	f001 fbde 	bl	800e010 <_free_r>
 800c854:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c856:	b111      	cbz	r1, 800c85e <_reclaim_reent+0x36>
 800c858:	4620      	mov	r0, r4
 800c85a:	f001 fbd9 	bl	800e010 <_free_r>
 800c85e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c860:	b111      	cbz	r1, 800c868 <_reclaim_reent+0x40>
 800c862:	4620      	mov	r0, r4
 800c864:	f001 fbd4 	bl	800e010 <_free_r>
 800c868:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c86a:	b111      	cbz	r1, 800c872 <_reclaim_reent+0x4a>
 800c86c:	4620      	mov	r0, r4
 800c86e:	f001 fbcf 	bl	800e010 <_free_r>
 800c872:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c874:	b111      	cbz	r1, 800c87c <_reclaim_reent+0x54>
 800c876:	4620      	mov	r0, r4
 800c878:	f001 fbca 	bl	800e010 <_free_r>
 800c87c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c87e:	b111      	cbz	r1, 800c886 <_reclaim_reent+0x5e>
 800c880:	4620      	mov	r0, r4
 800c882:	f001 fbc5 	bl	800e010 <_free_r>
 800c886:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c888:	b111      	cbz	r1, 800c890 <_reclaim_reent+0x68>
 800c88a:	4620      	mov	r0, r4
 800c88c:	f001 fbc0 	bl	800e010 <_free_r>
 800c890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c892:	b111      	cbz	r1, 800c89a <_reclaim_reent+0x72>
 800c894:	4620      	mov	r0, r4
 800c896:	f001 fbbb 	bl	800e010 <_free_r>
 800c89a:	69a3      	ldr	r3, [r4, #24]
 800c89c:	b1e3      	cbz	r3, 800c8d8 <_reclaim_reent+0xb0>
 800c89e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4798      	blx	r3
 800c8a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c8a6:	b1b9      	cbz	r1, 800c8d8 <_reclaim_reent+0xb0>
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8ae:	f7ff bfad 	b.w	800c80c <cleanup_glue>
 800c8b2:	5949      	ldr	r1, [r1, r5]
 800c8b4:	b941      	cbnz	r1, 800c8c8 <_reclaim_reent+0xa0>
 800c8b6:	3504      	adds	r5, #4
 800c8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ba:	2d80      	cmp	r5, #128	; 0x80
 800c8bc:	68d9      	ldr	r1, [r3, #12]
 800c8be:	d1f8      	bne.n	800c8b2 <_reclaim_reent+0x8a>
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f001 fba5 	bl	800e010 <_free_r>
 800c8c6:	e7ba      	b.n	800c83e <_reclaim_reent+0x16>
 800c8c8:	680e      	ldr	r6, [r1, #0]
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f001 fba0 	bl	800e010 <_free_r>
 800c8d0:	4631      	mov	r1, r6
 800c8d2:	e7ef      	b.n	800c8b4 <_reclaim_reent+0x8c>
 800c8d4:	2500      	movs	r5, #0
 800c8d6:	e7ef      	b.n	800c8b8 <_reclaim_reent+0x90>
 800c8d8:	bd70      	pop	{r4, r5, r6, pc}
 800c8da:	bf00      	nop
 800c8dc:	20000010 	.word	0x20000010

0800c8e0 <_sbrk_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d06      	ldr	r5, [pc, #24]	; (800c8fc <_sbrk_r+0x1c>)
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	f7f5 fa54 	bl	8001d98 <_sbrk>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_sbrk_r+0x1a>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_sbrk_r+0x1a>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	200022e4 	.word	0x200022e4

0800c900 <siprintf>:
 800c900:	b40e      	push	{r1, r2, r3}
 800c902:	b500      	push	{lr}
 800c904:	b09c      	sub	sp, #112	; 0x70
 800c906:	ab1d      	add	r3, sp, #116	; 0x74
 800c908:	9002      	str	r0, [sp, #8]
 800c90a:	9006      	str	r0, [sp, #24]
 800c90c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c910:	4809      	ldr	r0, [pc, #36]	; (800c938 <siprintf+0x38>)
 800c912:	9107      	str	r1, [sp, #28]
 800c914:	9104      	str	r1, [sp, #16]
 800c916:	4909      	ldr	r1, [pc, #36]	; (800c93c <siprintf+0x3c>)
 800c918:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91c:	9105      	str	r1, [sp, #20]
 800c91e:	6800      	ldr	r0, [r0, #0]
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	a902      	add	r1, sp, #8
 800c924:	f001 fc1c 	bl	800e160 <_svfiprintf_r>
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
 800c92e:	b01c      	add	sp, #112	; 0x70
 800c930:	f85d eb04 	ldr.w	lr, [sp], #4
 800c934:	b003      	add	sp, #12
 800c936:	4770      	bx	lr
 800c938:	20000010 	.word	0x20000010
 800c93c:	ffff0208 	.word	0xffff0208

0800c940 <__sread>:
 800c940:	b510      	push	{r4, lr}
 800c942:	460c      	mov	r4, r1
 800c944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c948:	f001 fd0a 	bl	800e360 <_read_r>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	bfab      	itete	ge
 800c950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c952:	89a3      	ldrhlt	r3, [r4, #12]
 800c954:	181b      	addge	r3, r3, r0
 800c956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c95a:	bfac      	ite	ge
 800c95c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c95e:	81a3      	strhlt	r3, [r4, #12]
 800c960:	bd10      	pop	{r4, pc}

0800c962 <__swrite>:
 800c962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c966:	461f      	mov	r7, r3
 800c968:	898b      	ldrh	r3, [r1, #12]
 800c96a:	05db      	lsls	r3, r3, #23
 800c96c:	4605      	mov	r5, r0
 800c96e:	460c      	mov	r4, r1
 800c970:	4616      	mov	r6, r2
 800c972:	d505      	bpl.n	800c980 <__swrite+0x1e>
 800c974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c978:	2302      	movs	r3, #2
 800c97a:	2200      	movs	r2, #0
 800c97c:	f000 ff88 	bl	800d890 <_lseek_r>
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c98a:	81a3      	strh	r3, [r4, #12]
 800c98c:	4632      	mov	r2, r6
 800c98e:	463b      	mov	r3, r7
 800c990:	4628      	mov	r0, r5
 800c992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c996:	f000 b817 	b.w	800c9c8 <_write_r>

0800c99a <__sseek>:
 800c99a:	b510      	push	{r4, lr}
 800c99c:	460c      	mov	r4, r1
 800c99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a2:	f000 ff75 	bl	800d890 <_lseek_r>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	89a3      	ldrh	r3, [r4, #12]
 800c9aa:	bf15      	itete	ne
 800c9ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9b6:	81a3      	strheq	r3, [r4, #12]
 800c9b8:	bf18      	it	ne
 800c9ba:	81a3      	strhne	r3, [r4, #12]
 800c9bc:	bd10      	pop	{r4, pc}

0800c9be <__sclose>:
 800c9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9c2:	f000 b813 	b.w	800c9ec <_close_r>
	...

0800c9c8 <_write_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d07      	ldr	r5, [pc, #28]	; (800c9e8 <_write_r+0x20>)
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	602a      	str	r2, [r5, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f7f5 f98d 	bl	8001cf6 <_write>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d102      	bne.n	800c9e6 <_write_r+0x1e>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	b103      	cbz	r3, 800c9e6 <_write_r+0x1e>
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}
 800c9e8:	200022e4 	.word	0x200022e4

0800c9ec <_close_r>:
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	4d06      	ldr	r5, [pc, #24]	; (800ca08 <_close_r+0x1c>)
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	4608      	mov	r0, r1
 800c9f6:	602b      	str	r3, [r5, #0]
 800c9f8:	f7f5 f999 	bl	8001d2e <_close>
 800c9fc:	1c43      	adds	r3, r0, #1
 800c9fe:	d102      	bne.n	800ca06 <_close_r+0x1a>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	b103      	cbz	r3, 800ca06 <_close_r+0x1a>
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	bd38      	pop	{r3, r4, r5, pc}
 800ca08:	200022e4 	.word	0x200022e4

0800ca0c <quorem>:
 800ca0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	6903      	ldr	r3, [r0, #16]
 800ca12:	690c      	ldr	r4, [r1, #16]
 800ca14:	42a3      	cmp	r3, r4
 800ca16:	4607      	mov	r7, r0
 800ca18:	f2c0 8081 	blt.w	800cb1e <quorem+0x112>
 800ca1c:	3c01      	subs	r4, #1
 800ca1e:	f101 0814 	add.w	r8, r1, #20
 800ca22:	f100 0514 	add.w	r5, r0, #20
 800ca26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca2a:	9301      	str	r3, [sp, #4]
 800ca2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca34:	3301      	adds	r3, #1
 800ca36:	429a      	cmp	r2, r3
 800ca38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca40:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca44:	d331      	bcc.n	800caaa <quorem+0x9e>
 800ca46:	f04f 0e00 	mov.w	lr, #0
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	46ac      	mov	ip, r5
 800ca4e:	46f2      	mov	sl, lr
 800ca50:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca54:	b293      	uxth	r3, r2
 800ca56:	fb06 e303 	mla	r3, r6, r3, lr
 800ca5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	ebaa 0303 	sub.w	r3, sl, r3
 800ca64:	f8dc a000 	ldr.w	sl, [ip]
 800ca68:	0c12      	lsrs	r2, r2, #16
 800ca6a:	fa13 f38a 	uxtah	r3, r3, sl
 800ca6e:	fb06 e202 	mla	r2, r6, r2, lr
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	9b00      	ldr	r3, [sp, #0]
 800ca76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca7a:	b292      	uxth	r2, r2
 800ca7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ca80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca84:	f8bd 3000 	ldrh.w	r3, [sp]
 800ca88:	4581      	cmp	r9, r0
 800ca8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca8e:	f84c 3b04 	str.w	r3, [ip], #4
 800ca92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca96:	d2db      	bcs.n	800ca50 <quorem+0x44>
 800ca98:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca9c:	b92b      	cbnz	r3, 800caaa <quorem+0x9e>
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	3b04      	subs	r3, #4
 800caa2:	429d      	cmp	r5, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	d32e      	bcc.n	800cb06 <quorem+0xfa>
 800caa8:	613c      	str	r4, [r7, #16]
 800caaa:	4638      	mov	r0, r7
 800caac:	f001 f998 	bl	800dde0 <__mcmp>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	db24      	blt.n	800cafe <quorem+0xf2>
 800cab4:	3601      	adds	r6, #1
 800cab6:	4628      	mov	r0, r5
 800cab8:	f04f 0c00 	mov.w	ip, #0
 800cabc:	f858 2b04 	ldr.w	r2, [r8], #4
 800cac0:	f8d0 e000 	ldr.w	lr, [r0]
 800cac4:	b293      	uxth	r3, r2
 800cac6:	ebac 0303 	sub.w	r3, ip, r3
 800caca:	0c12      	lsrs	r2, r2, #16
 800cacc:	fa13 f38e 	uxtah	r3, r3, lr
 800cad0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cad8:	b29b      	uxth	r3, r3
 800cada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cade:	45c1      	cmp	r9, r8
 800cae0:	f840 3b04 	str.w	r3, [r0], #4
 800cae4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cae8:	d2e8      	bcs.n	800cabc <quorem+0xb0>
 800caea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caf2:	b922      	cbnz	r2, 800cafe <quorem+0xf2>
 800caf4:	3b04      	subs	r3, #4
 800caf6:	429d      	cmp	r5, r3
 800caf8:	461a      	mov	r2, r3
 800cafa:	d30a      	bcc.n	800cb12 <quorem+0x106>
 800cafc:	613c      	str	r4, [r7, #16]
 800cafe:	4630      	mov	r0, r6
 800cb00:	b003      	add	sp, #12
 800cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb06:	6812      	ldr	r2, [r2, #0]
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	2a00      	cmp	r2, #0
 800cb0c:	d1cc      	bne.n	800caa8 <quorem+0x9c>
 800cb0e:	3c01      	subs	r4, #1
 800cb10:	e7c7      	b.n	800caa2 <quorem+0x96>
 800cb12:	6812      	ldr	r2, [r2, #0]
 800cb14:	3b04      	subs	r3, #4
 800cb16:	2a00      	cmp	r2, #0
 800cb18:	d1f0      	bne.n	800cafc <quorem+0xf0>
 800cb1a:	3c01      	subs	r4, #1
 800cb1c:	e7eb      	b.n	800caf6 <quorem+0xea>
 800cb1e:	2000      	movs	r0, #0
 800cb20:	e7ee      	b.n	800cb00 <quorem+0xf4>
 800cb22:	0000      	movs	r0, r0
 800cb24:	0000      	movs	r0, r0
	...

0800cb28 <_dtoa_r>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	ed2d 8b04 	vpush	{d8-d9}
 800cb30:	ec57 6b10 	vmov	r6, r7, d0
 800cb34:	b093      	sub	sp, #76	; 0x4c
 800cb36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb3c:	9106      	str	r1, [sp, #24]
 800cb3e:	ee10 aa10 	vmov	sl, s0
 800cb42:	4604      	mov	r4, r0
 800cb44:	9209      	str	r2, [sp, #36]	; 0x24
 800cb46:	930c      	str	r3, [sp, #48]	; 0x30
 800cb48:	46bb      	mov	fp, r7
 800cb4a:	b975      	cbnz	r5, 800cb6a <_dtoa_r+0x42>
 800cb4c:	2010      	movs	r0, #16
 800cb4e:	f000 feb1 	bl	800d8b4 <malloc>
 800cb52:	4602      	mov	r2, r0
 800cb54:	6260      	str	r0, [r4, #36]	; 0x24
 800cb56:	b920      	cbnz	r0, 800cb62 <_dtoa_r+0x3a>
 800cb58:	4ba7      	ldr	r3, [pc, #668]	; (800cdf8 <_dtoa_r+0x2d0>)
 800cb5a:	21ea      	movs	r1, #234	; 0xea
 800cb5c:	48a7      	ldr	r0, [pc, #668]	; (800cdfc <_dtoa_r+0x2d4>)
 800cb5e:	f001 fc11 	bl	800e384 <__assert_func>
 800cb62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb66:	6005      	str	r5, [r0, #0]
 800cb68:	60c5      	str	r5, [r0, #12]
 800cb6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb6c:	6819      	ldr	r1, [r3, #0]
 800cb6e:	b151      	cbz	r1, 800cb86 <_dtoa_r+0x5e>
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	604a      	str	r2, [r1, #4]
 800cb74:	2301      	movs	r3, #1
 800cb76:	4093      	lsls	r3, r2
 800cb78:	608b      	str	r3, [r1, #8]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 feee 	bl	800d95c <_Bfree>
 800cb80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb82:	2200      	movs	r2, #0
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	1e3b      	subs	r3, r7, #0
 800cb88:	bfaa      	itet	ge
 800cb8a:	2300      	movge	r3, #0
 800cb8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cb90:	f8c8 3000 	strge.w	r3, [r8]
 800cb94:	4b9a      	ldr	r3, [pc, #616]	; (800ce00 <_dtoa_r+0x2d8>)
 800cb96:	bfbc      	itt	lt
 800cb98:	2201      	movlt	r2, #1
 800cb9a:	f8c8 2000 	strlt.w	r2, [r8]
 800cb9e:	ea33 030b 	bics.w	r3, r3, fp
 800cba2:	d11b      	bne.n	800cbdc <_dtoa_r+0xb4>
 800cba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cba6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbb0:	4333      	orrs	r3, r6
 800cbb2:	f000 8592 	beq.w	800d6da <_dtoa_r+0xbb2>
 800cbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbb8:	b963      	cbnz	r3, 800cbd4 <_dtoa_r+0xac>
 800cbba:	4b92      	ldr	r3, [pc, #584]	; (800ce04 <_dtoa_r+0x2dc>)
 800cbbc:	e022      	b.n	800cc04 <_dtoa_r+0xdc>
 800cbbe:	4b92      	ldr	r3, [pc, #584]	; (800ce08 <_dtoa_r+0x2e0>)
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	3308      	adds	r3, #8
 800cbc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	9801      	ldr	r0, [sp, #4]
 800cbca:	b013      	add	sp, #76	; 0x4c
 800cbcc:	ecbd 8b04 	vpop	{d8-d9}
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd4:	4b8b      	ldr	r3, [pc, #556]	; (800ce04 <_dtoa_r+0x2dc>)
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	3303      	adds	r3, #3
 800cbda:	e7f3      	b.n	800cbc4 <_dtoa_r+0x9c>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2300      	movs	r3, #0
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	4659      	mov	r1, fp
 800cbe4:	f7f3 ff88 	bl	8000af8 <__aeabi_dcmpeq>
 800cbe8:	ec4b ab19 	vmov	d9, sl, fp
 800cbec:	4680      	mov	r8, r0
 800cbee:	b158      	cbz	r0, 800cc08 <_dtoa_r+0xe0>
 800cbf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f000 856b 	beq.w	800d6d4 <_dtoa_r+0xbac>
 800cbfe:	4883      	ldr	r0, [pc, #524]	; (800ce0c <_dtoa_r+0x2e4>)
 800cc00:	6018      	str	r0, [r3, #0]
 800cc02:	1e43      	subs	r3, r0, #1
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	e7df      	b.n	800cbc8 <_dtoa_r+0xa0>
 800cc08:	ec4b ab10 	vmov	d0, sl, fp
 800cc0c:	aa10      	add	r2, sp, #64	; 0x40
 800cc0e:	a911      	add	r1, sp, #68	; 0x44
 800cc10:	4620      	mov	r0, r4
 800cc12:	f001 f98b 	bl	800df2c <__d2b>
 800cc16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cc1a:	ee08 0a10 	vmov	s16, r0
 800cc1e:	2d00      	cmp	r5, #0
 800cc20:	f000 8084 	beq.w	800cd2c <_dtoa_r+0x204>
 800cc24:	ee19 3a90 	vmov	r3, s19
 800cc28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc30:	4656      	mov	r6, sl
 800cc32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cc3e:	4b74      	ldr	r3, [pc, #464]	; (800ce10 <_dtoa_r+0x2e8>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	4630      	mov	r0, r6
 800cc44:	4639      	mov	r1, r7
 800cc46:	f7f3 fb37 	bl	80002b8 <__aeabi_dsub>
 800cc4a:	a365      	add	r3, pc, #404	; (adr r3, 800cde0 <_dtoa_r+0x2b8>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fcea 	bl	8000628 <__aeabi_dmul>
 800cc54:	a364      	add	r3, pc, #400	; (adr r3, 800cde8 <_dtoa_r+0x2c0>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fb2f 	bl	80002bc <__adddf3>
 800cc5e:	4606      	mov	r6, r0
 800cc60:	4628      	mov	r0, r5
 800cc62:	460f      	mov	r7, r1
 800cc64:	f7f3 fc76 	bl	8000554 <__aeabi_i2d>
 800cc68:	a361      	add	r3, pc, #388	; (adr r3, 800cdf0 <_dtoa_r+0x2c8>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	f7f3 fcdb 	bl	8000628 <__aeabi_dmul>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	f7f3 fb1f 	bl	80002bc <__adddf3>
 800cc7e:	4606      	mov	r6, r0
 800cc80:	460f      	mov	r7, r1
 800cc82:	f7f3 ff81 	bl	8000b88 <__aeabi_d2iz>
 800cc86:	2200      	movs	r2, #0
 800cc88:	9000      	str	r0, [sp, #0]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	4639      	mov	r1, r7
 800cc90:	f7f3 ff3c 	bl	8000b0c <__aeabi_dcmplt>
 800cc94:	b150      	cbz	r0, 800ccac <_dtoa_r+0x184>
 800cc96:	9800      	ldr	r0, [sp, #0]
 800cc98:	f7f3 fc5c 	bl	8000554 <__aeabi_i2d>
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	463b      	mov	r3, r7
 800cca0:	f7f3 ff2a 	bl	8000af8 <__aeabi_dcmpeq>
 800cca4:	b910      	cbnz	r0, 800ccac <_dtoa_r+0x184>
 800cca6:	9b00      	ldr	r3, [sp, #0]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	9b00      	ldr	r3, [sp, #0]
 800ccae:	2b16      	cmp	r3, #22
 800ccb0:	d85a      	bhi.n	800cd68 <_dtoa_r+0x240>
 800ccb2:	9a00      	ldr	r2, [sp, #0]
 800ccb4:	4b57      	ldr	r3, [pc, #348]	; (800ce14 <_dtoa_r+0x2ec>)
 800ccb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	ec51 0b19 	vmov	r0, r1, d9
 800ccc2:	f7f3 ff23 	bl	8000b0c <__aeabi_dcmplt>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d050      	beq.n	800cd6c <_dtoa_r+0x244>
 800ccca:	9b00      	ldr	r3, [sp, #0]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccd6:	1b5d      	subs	r5, r3, r5
 800ccd8:	1e6b      	subs	r3, r5, #1
 800ccda:	9305      	str	r3, [sp, #20]
 800ccdc:	bf45      	ittet	mi
 800ccde:	f1c5 0301 	rsbmi	r3, r5, #1
 800cce2:	9304      	strmi	r3, [sp, #16]
 800cce4:	2300      	movpl	r3, #0
 800cce6:	2300      	movmi	r3, #0
 800cce8:	bf4c      	ite	mi
 800ccea:	9305      	strmi	r3, [sp, #20]
 800ccec:	9304      	strpl	r3, [sp, #16]
 800ccee:	9b00      	ldr	r3, [sp, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	db3d      	blt.n	800cd70 <_dtoa_r+0x248>
 800ccf4:	9b05      	ldr	r3, [sp, #20]
 800ccf6:	9a00      	ldr	r2, [sp, #0]
 800ccf8:	920a      	str	r2, [sp, #40]	; 0x28
 800ccfa:	4413      	add	r3, r2
 800ccfc:	9305      	str	r3, [sp, #20]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	9307      	str	r3, [sp, #28]
 800cd02:	9b06      	ldr	r3, [sp, #24]
 800cd04:	2b09      	cmp	r3, #9
 800cd06:	f200 8089 	bhi.w	800ce1c <_dtoa_r+0x2f4>
 800cd0a:	2b05      	cmp	r3, #5
 800cd0c:	bfc4      	itt	gt
 800cd0e:	3b04      	subgt	r3, #4
 800cd10:	9306      	strgt	r3, [sp, #24]
 800cd12:	9b06      	ldr	r3, [sp, #24]
 800cd14:	f1a3 0302 	sub.w	r3, r3, #2
 800cd18:	bfcc      	ite	gt
 800cd1a:	2500      	movgt	r5, #0
 800cd1c:	2501      	movle	r5, #1
 800cd1e:	2b03      	cmp	r3, #3
 800cd20:	f200 8087 	bhi.w	800ce32 <_dtoa_r+0x30a>
 800cd24:	e8df f003 	tbb	[pc, r3]
 800cd28:	59383a2d 	.word	0x59383a2d
 800cd2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cd30:	441d      	add	r5, r3
 800cd32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd36:	2b20      	cmp	r3, #32
 800cd38:	bfc1      	itttt	gt
 800cd3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd42:	fa0b f303 	lslgt.w	r3, fp, r3
 800cd46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd4a:	bfda      	itte	le
 800cd4c:	f1c3 0320 	rsble	r3, r3, #32
 800cd50:	fa06 f003 	lslle.w	r0, r6, r3
 800cd54:	4318      	orrgt	r0, r3
 800cd56:	f7f3 fbed 	bl	8000534 <__aeabi_ui2d>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cd62:	3d01      	subs	r5, #1
 800cd64:	930e      	str	r3, [sp, #56]	; 0x38
 800cd66:	e76a      	b.n	800cc3e <_dtoa_r+0x116>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e7b2      	b.n	800ccd2 <_dtoa_r+0x1aa>
 800cd6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd6e:	e7b1      	b.n	800ccd4 <_dtoa_r+0x1ac>
 800cd70:	9b04      	ldr	r3, [sp, #16]
 800cd72:	9a00      	ldr	r2, [sp, #0]
 800cd74:	1a9b      	subs	r3, r3, r2
 800cd76:	9304      	str	r3, [sp, #16]
 800cd78:	4253      	negs	r3, r2
 800cd7a:	9307      	str	r3, [sp, #28]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd80:	e7bf      	b.n	800cd02 <_dtoa_r+0x1da>
 800cd82:	2300      	movs	r3, #0
 800cd84:	9308      	str	r3, [sp, #32]
 800cd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	dc55      	bgt.n	800ce38 <_dtoa_r+0x310>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd92:	461a      	mov	r2, r3
 800cd94:	9209      	str	r2, [sp, #36]	; 0x24
 800cd96:	e00c      	b.n	800cdb2 <_dtoa_r+0x28a>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e7f3      	b.n	800cd84 <_dtoa_r+0x25c>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda0:	9308      	str	r3, [sp, #32]
 800cda2:	9b00      	ldr	r3, [sp, #0]
 800cda4:	4413      	add	r3, r2
 800cda6:	9302      	str	r3, [sp, #8]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	9303      	str	r3, [sp, #12]
 800cdae:	bfb8      	it	lt
 800cdb0:	2301      	movlt	r3, #1
 800cdb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	6042      	str	r2, [r0, #4]
 800cdb8:	2204      	movs	r2, #4
 800cdba:	f102 0614 	add.w	r6, r2, #20
 800cdbe:	429e      	cmp	r6, r3
 800cdc0:	6841      	ldr	r1, [r0, #4]
 800cdc2:	d93d      	bls.n	800ce40 <_dtoa_r+0x318>
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 fd89 	bl	800d8dc <_Balloc>
 800cdca:	9001      	str	r0, [sp, #4]
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d13b      	bne.n	800ce48 <_dtoa_r+0x320>
 800cdd0:	4b11      	ldr	r3, [pc, #68]	; (800ce18 <_dtoa_r+0x2f0>)
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cdd8:	e6c0      	b.n	800cb5c <_dtoa_r+0x34>
 800cdda:	2301      	movs	r3, #1
 800cddc:	e7df      	b.n	800cd9e <_dtoa_r+0x276>
 800cdde:	bf00      	nop
 800cde0:	636f4361 	.word	0x636f4361
 800cde4:	3fd287a7 	.word	0x3fd287a7
 800cde8:	8b60c8b3 	.word	0x8b60c8b3
 800cdec:	3fc68a28 	.word	0x3fc68a28
 800cdf0:	509f79fb 	.word	0x509f79fb
 800cdf4:	3fd34413 	.word	0x3fd34413
 800cdf8:	0800ecbd 	.word	0x0800ecbd
 800cdfc:	0800ecd4 	.word	0x0800ecd4
 800ce00:	7ff00000 	.word	0x7ff00000
 800ce04:	0800ecb9 	.word	0x0800ecb9
 800ce08:	0800ecb0 	.word	0x0800ecb0
 800ce0c:	0800ec8d 	.word	0x0800ec8d
 800ce10:	3ff80000 	.word	0x3ff80000
 800ce14:	0800edc8 	.word	0x0800edc8
 800ce18:	0800ed2f 	.word	0x0800ed2f
 800ce1c:	2501      	movs	r5, #1
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9306      	str	r3, [sp, #24]
 800ce22:	9508      	str	r5, [sp, #32]
 800ce24:	f04f 33ff 	mov.w	r3, #4294967295
 800ce28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2312      	movs	r3, #18
 800ce30:	e7b0      	b.n	800cd94 <_dtoa_r+0x26c>
 800ce32:	2301      	movs	r3, #1
 800ce34:	9308      	str	r3, [sp, #32]
 800ce36:	e7f5      	b.n	800ce24 <_dtoa_r+0x2fc>
 800ce38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce3e:	e7b8      	b.n	800cdb2 <_dtoa_r+0x28a>
 800ce40:	3101      	adds	r1, #1
 800ce42:	6041      	str	r1, [r0, #4]
 800ce44:	0052      	lsls	r2, r2, #1
 800ce46:	e7b8      	b.n	800cdba <_dtoa_r+0x292>
 800ce48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce4a:	9a01      	ldr	r2, [sp, #4]
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	2b0e      	cmp	r3, #14
 800ce52:	f200 809d 	bhi.w	800cf90 <_dtoa_r+0x468>
 800ce56:	2d00      	cmp	r5, #0
 800ce58:	f000 809a 	beq.w	800cf90 <_dtoa_r+0x468>
 800ce5c:	9b00      	ldr	r3, [sp, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	dd32      	ble.n	800cec8 <_dtoa_r+0x3a0>
 800ce62:	4ab7      	ldr	r2, [pc, #732]	; (800d140 <_dtoa_r+0x618>)
 800ce64:	f003 030f 	and.w	r3, r3, #15
 800ce68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce70:	9b00      	ldr	r3, [sp, #0]
 800ce72:	05d8      	lsls	r0, r3, #23
 800ce74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ce78:	d516      	bpl.n	800cea8 <_dtoa_r+0x380>
 800ce7a:	4bb2      	ldr	r3, [pc, #712]	; (800d144 <_dtoa_r+0x61c>)
 800ce7c:	ec51 0b19 	vmov	r0, r1, d9
 800ce80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce84:	f7f3 fcfa 	bl	800087c <__aeabi_ddiv>
 800ce88:	f007 070f 	and.w	r7, r7, #15
 800ce8c:	4682      	mov	sl, r0
 800ce8e:	468b      	mov	fp, r1
 800ce90:	2503      	movs	r5, #3
 800ce92:	4eac      	ldr	r6, [pc, #688]	; (800d144 <_dtoa_r+0x61c>)
 800ce94:	b957      	cbnz	r7, 800ceac <_dtoa_r+0x384>
 800ce96:	4642      	mov	r2, r8
 800ce98:	464b      	mov	r3, r9
 800ce9a:	4650      	mov	r0, sl
 800ce9c:	4659      	mov	r1, fp
 800ce9e:	f7f3 fced 	bl	800087c <__aeabi_ddiv>
 800cea2:	4682      	mov	sl, r0
 800cea4:	468b      	mov	fp, r1
 800cea6:	e028      	b.n	800cefa <_dtoa_r+0x3d2>
 800cea8:	2502      	movs	r5, #2
 800ceaa:	e7f2      	b.n	800ce92 <_dtoa_r+0x36a>
 800ceac:	07f9      	lsls	r1, r7, #31
 800ceae:	d508      	bpl.n	800cec2 <_dtoa_r+0x39a>
 800ceb0:	4640      	mov	r0, r8
 800ceb2:	4649      	mov	r1, r9
 800ceb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ceb8:	f7f3 fbb6 	bl	8000628 <__aeabi_dmul>
 800cebc:	3501      	adds	r5, #1
 800cebe:	4680      	mov	r8, r0
 800cec0:	4689      	mov	r9, r1
 800cec2:	107f      	asrs	r7, r7, #1
 800cec4:	3608      	adds	r6, #8
 800cec6:	e7e5      	b.n	800ce94 <_dtoa_r+0x36c>
 800cec8:	f000 809b 	beq.w	800d002 <_dtoa_r+0x4da>
 800cecc:	9b00      	ldr	r3, [sp, #0]
 800cece:	4f9d      	ldr	r7, [pc, #628]	; (800d144 <_dtoa_r+0x61c>)
 800ced0:	425e      	negs	r6, r3
 800ced2:	4b9b      	ldr	r3, [pc, #620]	; (800d140 <_dtoa_r+0x618>)
 800ced4:	f006 020f 	and.w	r2, r6, #15
 800ced8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee0:	ec51 0b19 	vmov	r0, r1, d9
 800cee4:	f7f3 fba0 	bl	8000628 <__aeabi_dmul>
 800cee8:	1136      	asrs	r6, r6, #4
 800ceea:	4682      	mov	sl, r0
 800ceec:	468b      	mov	fp, r1
 800ceee:	2300      	movs	r3, #0
 800cef0:	2502      	movs	r5, #2
 800cef2:	2e00      	cmp	r6, #0
 800cef4:	d17a      	bne.n	800cfec <_dtoa_r+0x4c4>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1d3      	bne.n	800cea2 <_dtoa_r+0x37a>
 800cefa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 8082 	beq.w	800d006 <_dtoa_r+0x4de>
 800cf02:	4b91      	ldr	r3, [pc, #580]	; (800d148 <_dtoa_r+0x620>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	4650      	mov	r0, sl
 800cf08:	4659      	mov	r1, fp
 800cf0a:	f7f3 fdff 	bl	8000b0c <__aeabi_dcmplt>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d079      	beq.n	800d006 <_dtoa_r+0x4de>
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d076      	beq.n	800d006 <_dtoa_r+0x4de>
 800cf18:	9b02      	ldr	r3, [sp, #8]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	dd36      	ble.n	800cf8c <_dtoa_r+0x464>
 800cf1e:	9b00      	ldr	r3, [sp, #0]
 800cf20:	4650      	mov	r0, sl
 800cf22:	4659      	mov	r1, fp
 800cf24:	1e5f      	subs	r7, r3, #1
 800cf26:	2200      	movs	r2, #0
 800cf28:	4b88      	ldr	r3, [pc, #544]	; (800d14c <_dtoa_r+0x624>)
 800cf2a:	f7f3 fb7d 	bl	8000628 <__aeabi_dmul>
 800cf2e:	9e02      	ldr	r6, [sp, #8]
 800cf30:	4682      	mov	sl, r0
 800cf32:	468b      	mov	fp, r1
 800cf34:	3501      	adds	r5, #1
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7f3 fb0c 	bl	8000554 <__aeabi_i2d>
 800cf3c:	4652      	mov	r2, sl
 800cf3e:	465b      	mov	r3, fp
 800cf40:	f7f3 fb72 	bl	8000628 <__aeabi_dmul>
 800cf44:	4b82      	ldr	r3, [pc, #520]	; (800d150 <_dtoa_r+0x628>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	f7f3 f9b8 	bl	80002bc <__adddf3>
 800cf4c:	46d0      	mov	r8, sl
 800cf4e:	46d9      	mov	r9, fp
 800cf50:	4682      	mov	sl, r0
 800cf52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	d158      	bne.n	800d00c <_dtoa_r+0x4e4>
 800cf5a:	4b7e      	ldr	r3, [pc, #504]	; (800d154 <_dtoa_r+0x62c>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	4640      	mov	r0, r8
 800cf60:	4649      	mov	r1, r9
 800cf62:	f7f3 f9a9 	bl	80002b8 <__aeabi_dsub>
 800cf66:	4652      	mov	r2, sl
 800cf68:	465b      	mov	r3, fp
 800cf6a:	4680      	mov	r8, r0
 800cf6c:	4689      	mov	r9, r1
 800cf6e:	f7f3 fdeb 	bl	8000b48 <__aeabi_dcmpgt>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	f040 8295 	bne.w	800d4a2 <_dtoa_r+0x97a>
 800cf78:	4652      	mov	r2, sl
 800cf7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cf7e:	4640      	mov	r0, r8
 800cf80:	4649      	mov	r1, r9
 800cf82:	f7f3 fdc3 	bl	8000b0c <__aeabi_dcmplt>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	f040 8289 	bne.w	800d49e <_dtoa_r+0x976>
 800cf8c:	ec5b ab19 	vmov	sl, fp, d9
 800cf90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f2c0 8148 	blt.w	800d228 <_dtoa_r+0x700>
 800cf98:	9a00      	ldr	r2, [sp, #0]
 800cf9a:	2a0e      	cmp	r2, #14
 800cf9c:	f300 8144 	bgt.w	800d228 <_dtoa_r+0x700>
 800cfa0:	4b67      	ldr	r3, [pc, #412]	; (800d140 <_dtoa_r+0x618>)
 800cfa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f280 80d5 	bge.w	800d15c <_dtoa_r+0x634>
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f300 80d1 	bgt.w	800d15c <_dtoa_r+0x634>
 800cfba:	f040 826f 	bne.w	800d49c <_dtoa_r+0x974>
 800cfbe:	4b65      	ldr	r3, [pc, #404]	; (800d154 <_dtoa_r+0x62c>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	4640      	mov	r0, r8
 800cfc4:	4649      	mov	r1, r9
 800cfc6:	f7f3 fb2f 	bl	8000628 <__aeabi_dmul>
 800cfca:	4652      	mov	r2, sl
 800cfcc:	465b      	mov	r3, fp
 800cfce:	f7f3 fdb1 	bl	8000b34 <__aeabi_dcmpge>
 800cfd2:	9e03      	ldr	r6, [sp, #12]
 800cfd4:	4637      	mov	r7, r6
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	f040 8245 	bne.w	800d466 <_dtoa_r+0x93e>
 800cfdc:	9d01      	ldr	r5, [sp, #4]
 800cfde:	2331      	movs	r3, #49	; 0x31
 800cfe0:	f805 3b01 	strb.w	r3, [r5], #1
 800cfe4:	9b00      	ldr	r3, [sp, #0]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	e240      	b.n	800d46e <_dtoa_r+0x946>
 800cfec:	07f2      	lsls	r2, r6, #31
 800cfee:	d505      	bpl.n	800cffc <_dtoa_r+0x4d4>
 800cff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cff4:	f7f3 fb18 	bl	8000628 <__aeabi_dmul>
 800cff8:	3501      	adds	r5, #1
 800cffa:	2301      	movs	r3, #1
 800cffc:	1076      	asrs	r6, r6, #1
 800cffe:	3708      	adds	r7, #8
 800d000:	e777      	b.n	800cef2 <_dtoa_r+0x3ca>
 800d002:	2502      	movs	r5, #2
 800d004:	e779      	b.n	800cefa <_dtoa_r+0x3d2>
 800d006:	9f00      	ldr	r7, [sp, #0]
 800d008:	9e03      	ldr	r6, [sp, #12]
 800d00a:	e794      	b.n	800cf36 <_dtoa_r+0x40e>
 800d00c:	9901      	ldr	r1, [sp, #4]
 800d00e:	4b4c      	ldr	r3, [pc, #304]	; (800d140 <_dtoa_r+0x618>)
 800d010:	4431      	add	r1, r6
 800d012:	910d      	str	r1, [sp, #52]	; 0x34
 800d014:	9908      	ldr	r1, [sp, #32]
 800d016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d01a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d01e:	2900      	cmp	r1, #0
 800d020:	d043      	beq.n	800d0aa <_dtoa_r+0x582>
 800d022:	494d      	ldr	r1, [pc, #308]	; (800d158 <_dtoa_r+0x630>)
 800d024:	2000      	movs	r0, #0
 800d026:	f7f3 fc29 	bl	800087c <__aeabi_ddiv>
 800d02a:	4652      	mov	r2, sl
 800d02c:	465b      	mov	r3, fp
 800d02e:	f7f3 f943 	bl	80002b8 <__aeabi_dsub>
 800d032:	9d01      	ldr	r5, [sp, #4]
 800d034:	4682      	mov	sl, r0
 800d036:	468b      	mov	fp, r1
 800d038:	4649      	mov	r1, r9
 800d03a:	4640      	mov	r0, r8
 800d03c:	f7f3 fda4 	bl	8000b88 <__aeabi_d2iz>
 800d040:	4606      	mov	r6, r0
 800d042:	f7f3 fa87 	bl	8000554 <__aeabi_i2d>
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	f7f3 f933 	bl	80002b8 <__aeabi_dsub>
 800d052:	3630      	adds	r6, #48	; 0x30
 800d054:	f805 6b01 	strb.w	r6, [r5], #1
 800d058:	4652      	mov	r2, sl
 800d05a:	465b      	mov	r3, fp
 800d05c:	4680      	mov	r8, r0
 800d05e:	4689      	mov	r9, r1
 800d060:	f7f3 fd54 	bl	8000b0c <__aeabi_dcmplt>
 800d064:	2800      	cmp	r0, #0
 800d066:	d163      	bne.n	800d130 <_dtoa_r+0x608>
 800d068:	4642      	mov	r2, r8
 800d06a:	464b      	mov	r3, r9
 800d06c:	4936      	ldr	r1, [pc, #216]	; (800d148 <_dtoa_r+0x620>)
 800d06e:	2000      	movs	r0, #0
 800d070:	f7f3 f922 	bl	80002b8 <__aeabi_dsub>
 800d074:	4652      	mov	r2, sl
 800d076:	465b      	mov	r3, fp
 800d078:	f7f3 fd48 	bl	8000b0c <__aeabi_dcmplt>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f040 80b5 	bne.w	800d1ec <_dtoa_r+0x6c4>
 800d082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d084:	429d      	cmp	r5, r3
 800d086:	d081      	beq.n	800cf8c <_dtoa_r+0x464>
 800d088:	4b30      	ldr	r3, [pc, #192]	; (800d14c <_dtoa_r+0x624>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	4650      	mov	r0, sl
 800d08e:	4659      	mov	r1, fp
 800d090:	f7f3 faca 	bl	8000628 <__aeabi_dmul>
 800d094:	4b2d      	ldr	r3, [pc, #180]	; (800d14c <_dtoa_r+0x624>)
 800d096:	4682      	mov	sl, r0
 800d098:	468b      	mov	fp, r1
 800d09a:	4640      	mov	r0, r8
 800d09c:	4649      	mov	r1, r9
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f7f3 fac2 	bl	8000628 <__aeabi_dmul>
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	4689      	mov	r9, r1
 800d0a8:	e7c6      	b.n	800d038 <_dtoa_r+0x510>
 800d0aa:	4650      	mov	r0, sl
 800d0ac:	4659      	mov	r1, fp
 800d0ae:	f7f3 fabb 	bl	8000628 <__aeabi_dmul>
 800d0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0b4:	9d01      	ldr	r5, [sp, #4]
 800d0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0b8:	4682      	mov	sl, r0
 800d0ba:	468b      	mov	fp, r1
 800d0bc:	4649      	mov	r1, r9
 800d0be:	4640      	mov	r0, r8
 800d0c0:	f7f3 fd62 	bl	8000b88 <__aeabi_d2iz>
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	f7f3 fa45 	bl	8000554 <__aeabi_i2d>
 800d0ca:	3630      	adds	r6, #48	; 0x30
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4640      	mov	r0, r8
 800d0d2:	4649      	mov	r1, r9
 800d0d4:	f7f3 f8f0 	bl	80002b8 <__aeabi_dsub>
 800d0d8:	f805 6b01 	strb.w	r6, [r5], #1
 800d0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0de:	429d      	cmp	r5, r3
 800d0e0:	4680      	mov	r8, r0
 800d0e2:	4689      	mov	r9, r1
 800d0e4:	f04f 0200 	mov.w	r2, #0
 800d0e8:	d124      	bne.n	800d134 <_dtoa_r+0x60c>
 800d0ea:	4b1b      	ldr	r3, [pc, #108]	; (800d158 <_dtoa_r+0x630>)
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	4659      	mov	r1, fp
 800d0f0:	f7f3 f8e4 	bl	80002bc <__adddf3>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	f7f3 fd24 	bl	8000b48 <__aeabi_dcmpgt>
 800d100:	2800      	cmp	r0, #0
 800d102:	d173      	bne.n	800d1ec <_dtoa_r+0x6c4>
 800d104:	4652      	mov	r2, sl
 800d106:	465b      	mov	r3, fp
 800d108:	4913      	ldr	r1, [pc, #76]	; (800d158 <_dtoa_r+0x630>)
 800d10a:	2000      	movs	r0, #0
 800d10c:	f7f3 f8d4 	bl	80002b8 <__aeabi_dsub>
 800d110:	4602      	mov	r2, r0
 800d112:	460b      	mov	r3, r1
 800d114:	4640      	mov	r0, r8
 800d116:	4649      	mov	r1, r9
 800d118:	f7f3 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f43f af35 	beq.w	800cf8c <_dtoa_r+0x464>
 800d122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d124:	1e6b      	subs	r3, r5, #1
 800d126:	930f      	str	r3, [sp, #60]	; 0x3c
 800d128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d12c:	2b30      	cmp	r3, #48	; 0x30
 800d12e:	d0f8      	beq.n	800d122 <_dtoa_r+0x5fa>
 800d130:	9700      	str	r7, [sp, #0]
 800d132:	e049      	b.n	800d1c8 <_dtoa_r+0x6a0>
 800d134:	4b05      	ldr	r3, [pc, #20]	; (800d14c <_dtoa_r+0x624>)
 800d136:	f7f3 fa77 	bl	8000628 <__aeabi_dmul>
 800d13a:	4680      	mov	r8, r0
 800d13c:	4689      	mov	r9, r1
 800d13e:	e7bd      	b.n	800d0bc <_dtoa_r+0x594>
 800d140:	0800edc8 	.word	0x0800edc8
 800d144:	0800eda0 	.word	0x0800eda0
 800d148:	3ff00000 	.word	0x3ff00000
 800d14c:	40240000 	.word	0x40240000
 800d150:	401c0000 	.word	0x401c0000
 800d154:	40140000 	.word	0x40140000
 800d158:	3fe00000 	.word	0x3fe00000
 800d15c:	9d01      	ldr	r5, [sp, #4]
 800d15e:	4656      	mov	r6, sl
 800d160:	465f      	mov	r7, fp
 800d162:	4642      	mov	r2, r8
 800d164:	464b      	mov	r3, r9
 800d166:	4630      	mov	r0, r6
 800d168:	4639      	mov	r1, r7
 800d16a:	f7f3 fb87 	bl	800087c <__aeabi_ddiv>
 800d16e:	f7f3 fd0b 	bl	8000b88 <__aeabi_d2iz>
 800d172:	4682      	mov	sl, r0
 800d174:	f7f3 f9ee 	bl	8000554 <__aeabi_i2d>
 800d178:	4642      	mov	r2, r8
 800d17a:	464b      	mov	r3, r9
 800d17c:	f7f3 fa54 	bl	8000628 <__aeabi_dmul>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d18c:	f7f3 f894 	bl	80002b8 <__aeabi_dsub>
 800d190:	f805 6b01 	strb.w	r6, [r5], #1
 800d194:	9e01      	ldr	r6, [sp, #4]
 800d196:	9f03      	ldr	r7, [sp, #12]
 800d198:	1bae      	subs	r6, r5, r6
 800d19a:	42b7      	cmp	r7, r6
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	d135      	bne.n	800d20e <_dtoa_r+0x6e6>
 800d1a2:	f7f3 f88b 	bl	80002bc <__adddf3>
 800d1a6:	4642      	mov	r2, r8
 800d1a8:	464b      	mov	r3, r9
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	460f      	mov	r7, r1
 800d1ae:	f7f3 fccb 	bl	8000b48 <__aeabi_dcmpgt>
 800d1b2:	b9d0      	cbnz	r0, 800d1ea <_dtoa_r+0x6c2>
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	464b      	mov	r3, r9
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 fc9c 	bl	8000af8 <__aeabi_dcmpeq>
 800d1c0:	b110      	cbz	r0, 800d1c8 <_dtoa_r+0x6a0>
 800d1c2:	f01a 0f01 	tst.w	sl, #1
 800d1c6:	d110      	bne.n	800d1ea <_dtoa_r+0x6c2>
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	ee18 1a10 	vmov	r1, s16
 800d1ce:	f000 fbc5 	bl	800d95c <_Bfree>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9800      	ldr	r0, [sp, #0]
 800d1d6:	702b      	strb	r3, [r5, #0]
 800d1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1da:	3001      	adds	r0, #1
 800d1dc:	6018      	str	r0, [r3, #0]
 800d1de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f43f acf1 	beq.w	800cbc8 <_dtoa_r+0xa0>
 800d1e6:	601d      	str	r5, [r3, #0]
 800d1e8:	e4ee      	b.n	800cbc8 <_dtoa_r+0xa0>
 800d1ea:	9f00      	ldr	r7, [sp, #0]
 800d1ec:	462b      	mov	r3, r5
 800d1ee:	461d      	mov	r5, r3
 800d1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1f4:	2a39      	cmp	r2, #57	; 0x39
 800d1f6:	d106      	bne.n	800d206 <_dtoa_r+0x6de>
 800d1f8:	9a01      	ldr	r2, [sp, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d1f7      	bne.n	800d1ee <_dtoa_r+0x6c6>
 800d1fe:	9901      	ldr	r1, [sp, #4]
 800d200:	2230      	movs	r2, #48	; 0x30
 800d202:	3701      	adds	r7, #1
 800d204:	700a      	strb	r2, [r1, #0]
 800d206:	781a      	ldrb	r2, [r3, #0]
 800d208:	3201      	adds	r2, #1
 800d20a:	701a      	strb	r2, [r3, #0]
 800d20c:	e790      	b.n	800d130 <_dtoa_r+0x608>
 800d20e:	4ba6      	ldr	r3, [pc, #664]	; (800d4a8 <_dtoa_r+0x980>)
 800d210:	2200      	movs	r2, #0
 800d212:	f7f3 fa09 	bl	8000628 <__aeabi_dmul>
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	4606      	mov	r6, r0
 800d21c:	460f      	mov	r7, r1
 800d21e:	f7f3 fc6b 	bl	8000af8 <__aeabi_dcmpeq>
 800d222:	2800      	cmp	r0, #0
 800d224:	d09d      	beq.n	800d162 <_dtoa_r+0x63a>
 800d226:	e7cf      	b.n	800d1c8 <_dtoa_r+0x6a0>
 800d228:	9a08      	ldr	r2, [sp, #32]
 800d22a:	2a00      	cmp	r2, #0
 800d22c:	f000 80d7 	beq.w	800d3de <_dtoa_r+0x8b6>
 800d230:	9a06      	ldr	r2, [sp, #24]
 800d232:	2a01      	cmp	r2, #1
 800d234:	f300 80ba 	bgt.w	800d3ac <_dtoa_r+0x884>
 800d238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d23a:	2a00      	cmp	r2, #0
 800d23c:	f000 80b2 	beq.w	800d3a4 <_dtoa_r+0x87c>
 800d240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d244:	9e07      	ldr	r6, [sp, #28]
 800d246:	9d04      	ldr	r5, [sp, #16]
 800d248:	9a04      	ldr	r2, [sp, #16]
 800d24a:	441a      	add	r2, r3
 800d24c:	9204      	str	r2, [sp, #16]
 800d24e:	9a05      	ldr	r2, [sp, #20]
 800d250:	2101      	movs	r1, #1
 800d252:	441a      	add	r2, r3
 800d254:	4620      	mov	r0, r4
 800d256:	9205      	str	r2, [sp, #20]
 800d258:	f000 fc38 	bl	800dacc <__i2b>
 800d25c:	4607      	mov	r7, r0
 800d25e:	2d00      	cmp	r5, #0
 800d260:	dd0c      	ble.n	800d27c <_dtoa_r+0x754>
 800d262:	9b05      	ldr	r3, [sp, #20]
 800d264:	2b00      	cmp	r3, #0
 800d266:	dd09      	ble.n	800d27c <_dtoa_r+0x754>
 800d268:	42ab      	cmp	r3, r5
 800d26a:	9a04      	ldr	r2, [sp, #16]
 800d26c:	bfa8      	it	ge
 800d26e:	462b      	movge	r3, r5
 800d270:	1ad2      	subs	r2, r2, r3
 800d272:	9204      	str	r2, [sp, #16]
 800d274:	9a05      	ldr	r2, [sp, #20]
 800d276:	1aed      	subs	r5, r5, r3
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	9305      	str	r3, [sp, #20]
 800d27c:	9b07      	ldr	r3, [sp, #28]
 800d27e:	b31b      	cbz	r3, 800d2c8 <_dtoa_r+0x7a0>
 800d280:	9b08      	ldr	r3, [sp, #32]
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 80af 	beq.w	800d3e6 <_dtoa_r+0x8be>
 800d288:	2e00      	cmp	r6, #0
 800d28a:	dd13      	ble.n	800d2b4 <_dtoa_r+0x78c>
 800d28c:	4639      	mov	r1, r7
 800d28e:	4632      	mov	r2, r6
 800d290:	4620      	mov	r0, r4
 800d292:	f000 fcdb 	bl	800dc4c <__pow5mult>
 800d296:	ee18 2a10 	vmov	r2, s16
 800d29a:	4601      	mov	r1, r0
 800d29c:	4607      	mov	r7, r0
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f000 fc2a 	bl	800daf8 <__multiply>
 800d2a4:	ee18 1a10 	vmov	r1, s16
 800d2a8:	4680      	mov	r8, r0
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 fb56 	bl	800d95c <_Bfree>
 800d2b0:	ee08 8a10 	vmov	s16, r8
 800d2b4:	9b07      	ldr	r3, [sp, #28]
 800d2b6:	1b9a      	subs	r2, r3, r6
 800d2b8:	d006      	beq.n	800d2c8 <_dtoa_r+0x7a0>
 800d2ba:	ee18 1a10 	vmov	r1, s16
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fcc4 	bl	800dc4c <__pow5mult>
 800d2c4:	ee08 0a10 	vmov	s16, r0
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f000 fbfe 	bl	800dacc <__i2b>
 800d2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	f340 8088 	ble.w	800d3ea <_dtoa_r+0x8c2>
 800d2da:	461a      	mov	r2, r3
 800d2dc:	4601      	mov	r1, r0
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f000 fcb4 	bl	800dc4c <__pow5mult>
 800d2e4:	9b06      	ldr	r3, [sp, #24]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	4606      	mov	r6, r0
 800d2ea:	f340 8081 	ble.w	800d3f0 <_dtoa_r+0x8c8>
 800d2ee:	f04f 0800 	mov.w	r8, #0
 800d2f2:	6933      	ldr	r3, [r6, #16]
 800d2f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d2f8:	6918      	ldr	r0, [r3, #16]
 800d2fa:	f000 fb97 	bl	800da2c <__hi0bits>
 800d2fe:	f1c0 0020 	rsb	r0, r0, #32
 800d302:	9b05      	ldr	r3, [sp, #20]
 800d304:	4418      	add	r0, r3
 800d306:	f010 001f 	ands.w	r0, r0, #31
 800d30a:	f000 8092 	beq.w	800d432 <_dtoa_r+0x90a>
 800d30e:	f1c0 0320 	rsb	r3, r0, #32
 800d312:	2b04      	cmp	r3, #4
 800d314:	f340 808a 	ble.w	800d42c <_dtoa_r+0x904>
 800d318:	f1c0 001c 	rsb	r0, r0, #28
 800d31c:	9b04      	ldr	r3, [sp, #16]
 800d31e:	4403      	add	r3, r0
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	9b05      	ldr	r3, [sp, #20]
 800d324:	4403      	add	r3, r0
 800d326:	4405      	add	r5, r0
 800d328:	9305      	str	r3, [sp, #20]
 800d32a:	9b04      	ldr	r3, [sp, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dd07      	ble.n	800d340 <_dtoa_r+0x818>
 800d330:	ee18 1a10 	vmov	r1, s16
 800d334:	461a      	mov	r2, r3
 800d336:	4620      	mov	r0, r4
 800d338:	f000 fce2 	bl	800dd00 <__lshift>
 800d33c:	ee08 0a10 	vmov	s16, r0
 800d340:	9b05      	ldr	r3, [sp, #20]
 800d342:	2b00      	cmp	r3, #0
 800d344:	dd05      	ble.n	800d352 <_dtoa_r+0x82a>
 800d346:	4631      	mov	r1, r6
 800d348:	461a      	mov	r2, r3
 800d34a:	4620      	mov	r0, r4
 800d34c:	f000 fcd8 	bl	800dd00 <__lshift>
 800d350:	4606      	mov	r6, r0
 800d352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d06e      	beq.n	800d436 <_dtoa_r+0x90e>
 800d358:	ee18 0a10 	vmov	r0, s16
 800d35c:	4631      	mov	r1, r6
 800d35e:	f000 fd3f 	bl	800dde0 <__mcmp>
 800d362:	2800      	cmp	r0, #0
 800d364:	da67      	bge.n	800d436 <_dtoa_r+0x90e>
 800d366:	9b00      	ldr	r3, [sp, #0]
 800d368:	3b01      	subs	r3, #1
 800d36a:	ee18 1a10 	vmov	r1, s16
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	220a      	movs	r2, #10
 800d372:	2300      	movs	r3, #0
 800d374:	4620      	mov	r0, r4
 800d376:	f000 fb13 	bl	800d9a0 <__multadd>
 800d37a:	9b08      	ldr	r3, [sp, #32]
 800d37c:	ee08 0a10 	vmov	s16, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 81b1 	beq.w	800d6e8 <_dtoa_r+0xbc0>
 800d386:	2300      	movs	r3, #0
 800d388:	4639      	mov	r1, r7
 800d38a:	220a      	movs	r2, #10
 800d38c:	4620      	mov	r0, r4
 800d38e:	f000 fb07 	bl	800d9a0 <__multadd>
 800d392:	9b02      	ldr	r3, [sp, #8]
 800d394:	2b00      	cmp	r3, #0
 800d396:	4607      	mov	r7, r0
 800d398:	f300 808e 	bgt.w	800d4b8 <_dtoa_r+0x990>
 800d39c:	9b06      	ldr	r3, [sp, #24]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	dc51      	bgt.n	800d446 <_dtoa_r+0x91e>
 800d3a2:	e089      	b.n	800d4b8 <_dtoa_r+0x990>
 800d3a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d3aa:	e74b      	b.n	800d244 <_dtoa_r+0x71c>
 800d3ac:	9b03      	ldr	r3, [sp, #12]
 800d3ae:	1e5e      	subs	r6, r3, #1
 800d3b0:	9b07      	ldr	r3, [sp, #28]
 800d3b2:	42b3      	cmp	r3, r6
 800d3b4:	bfbf      	itttt	lt
 800d3b6:	9b07      	ldrlt	r3, [sp, #28]
 800d3b8:	9607      	strlt	r6, [sp, #28]
 800d3ba:	1af2      	sublt	r2, r6, r3
 800d3bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d3be:	bfb6      	itet	lt
 800d3c0:	189b      	addlt	r3, r3, r2
 800d3c2:	1b9e      	subge	r6, r3, r6
 800d3c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d3c6:	9b03      	ldr	r3, [sp, #12]
 800d3c8:	bfb8      	it	lt
 800d3ca:	2600      	movlt	r6, #0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bfb7      	itett	lt
 800d3d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d3d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d3d8:	1a9d      	sublt	r5, r3, r2
 800d3da:	2300      	movlt	r3, #0
 800d3dc:	e734      	b.n	800d248 <_dtoa_r+0x720>
 800d3de:	9e07      	ldr	r6, [sp, #28]
 800d3e0:	9d04      	ldr	r5, [sp, #16]
 800d3e2:	9f08      	ldr	r7, [sp, #32]
 800d3e4:	e73b      	b.n	800d25e <_dtoa_r+0x736>
 800d3e6:	9a07      	ldr	r2, [sp, #28]
 800d3e8:	e767      	b.n	800d2ba <_dtoa_r+0x792>
 800d3ea:	9b06      	ldr	r3, [sp, #24]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	dc18      	bgt.n	800d422 <_dtoa_r+0x8fa>
 800d3f0:	f1ba 0f00 	cmp.w	sl, #0
 800d3f4:	d115      	bne.n	800d422 <_dtoa_r+0x8fa>
 800d3f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3fa:	b993      	cbnz	r3, 800d422 <_dtoa_r+0x8fa>
 800d3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d400:	0d1b      	lsrs	r3, r3, #20
 800d402:	051b      	lsls	r3, r3, #20
 800d404:	b183      	cbz	r3, 800d428 <_dtoa_r+0x900>
 800d406:	9b04      	ldr	r3, [sp, #16]
 800d408:	3301      	adds	r3, #1
 800d40a:	9304      	str	r3, [sp, #16]
 800d40c:	9b05      	ldr	r3, [sp, #20]
 800d40e:	3301      	adds	r3, #1
 800d410:	9305      	str	r3, [sp, #20]
 800d412:	f04f 0801 	mov.w	r8, #1
 800d416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f47f af6a 	bne.w	800d2f2 <_dtoa_r+0x7ca>
 800d41e:	2001      	movs	r0, #1
 800d420:	e76f      	b.n	800d302 <_dtoa_r+0x7da>
 800d422:	f04f 0800 	mov.w	r8, #0
 800d426:	e7f6      	b.n	800d416 <_dtoa_r+0x8ee>
 800d428:	4698      	mov	r8, r3
 800d42a:	e7f4      	b.n	800d416 <_dtoa_r+0x8ee>
 800d42c:	f43f af7d 	beq.w	800d32a <_dtoa_r+0x802>
 800d430:	4618      	mov	r0, r3
 800d432:	301c      	adds	r0, #28
 800d434:	e772      	b.n	800d31c <_dtoa_r+0x7f4>
 800d436:	9b03      	ldr	r3, [sp, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	dc37      	bgt.n	800d4ac <_dtoa_r+0x984>
 800d43c:	9b06      	ldr	r3, [sp, #24]
 800d43e:	2b02      	cmp	r3, #2
 800d440:	dd34      	ble.n	800d4ac <_dtoa_r+0x984>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	9302      	str	r3, [sp, #8]
 800d446:	9b02      	ldr	r3, [sp, #8]
 800d448:	b96b      	cbnz	r3, 800d466 <_dtoa_r+0x93e>
 800d44a:	4631      	mov	r1, r6
 800d44c:	2205      	movs	r2, #5
 800d44e:	4620      	mov	r0, r4
 800d450:	f000 faa6 	bl	800d9a0 <__multadd>
 800d454:	4601      	mov	r1, r0
 800d456:	4606      	mov	r6, r0
 800d458:	ee18 0a10 	vmov	r0, s16
 800d45c:	f000 fcc0 	bl	800dde0 <__mcmp>
 800d460:	2800      	cmp	r0, #0
 800d462:	f73f adbb 	bgt.w	800cfdc <_dtoa_r+0x4b4>
 800d466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d468:	9d01      	ldr	r5, [sp, #4]
 800d46a:	43db      	mvns	r3, r3
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	f04f 0800 	mov.w	r8, #0
 800d472:	4631      	mov	r1, r6
 800d474:	4620      	mov	r0, r4
 800d476:	f000 fa71 	bl	800d95c <_Bfree>
 800d47a:	2f00      	cmp	r7, #0
 800d47c:	f43f aea4 	beq.w	800d1c8 <_dtoa_r+0x6a0>
 800d480:	f1b8 0f00 	cmp.w	r8, #0
 800d484:	d005      	beq.n	800d492 <_dtoa_r+0x96a>
 800d486:	45b8      	cmp	r8, r7
 800d488:	d003      	beq.n	800d492 <_dtoa_r+0x96a>
 800d48a:	4641      	mov	r1, r8
 800d48c:	4620      	mov	r0, r4
 800d48e:	f000 fa65 	bl	800d95c <_Bfree>
 800d492:	4639      	mov	r1, r7
 800d494:	4620      	mov	r0, r4
 800d496:	f000 fa61 	bl	800d95c <_Bfree>
 800d49a:	e695      	b.n	800d1c8 <_dtoa_r+0x6a0>
 800d49c:	2600      	movs	r6, #0
 800d49e:	4637      	mov	r7, r6
 800d4a0:	e7e1      	b.n	800d466 <_dtoa_r+0x93e>
 800d4a2:	9700      	str	r7, [sp, #0]
 800d4a4:	4637      	mov	r7, r6
 800d4a6:	e599      	b.n	800cfdc <_dtoa_r+0x4b4>
 800d4a8:	40240000 	.word	0x40240000
 800d4ac:	9b08      	ldr	r3, [sp, #32]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 80ca 	beq.w	800d648 <_dtoa_r+0xb20>
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	9302      	str	r3, [sp, #8]
 800d4b8:	2d00      	cmp	r5, #0
 800d4ba:	dd05      	ble.n	800d4c8 <_dtoa_r+0x9a0>
 800d4bc:	4639      	mov	r1, r7
 800d4be:	462a      	mov	r2, r5
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f000 fc1d 	bl	800dd00 <__lshift>
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	f1b8 0f00 	cmp.w	r8, #0
 800d4cc:	d05b      	beq.n	800d586 <_dtoa_r+0xa5e>
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f000 fa03 	bl	800d8dc <_Balloc>
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	b928      	cbnz	r0, 800d4e6 <_dtoa_r+0x9be>
 800d4da:	4b87      	ldr	r3, [pc, #540]	; (800d6f8 <_dtoa_r+0xbd0>)
 800d4dc:	4602      	mov	r2, r0
 800d4de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d4e2:	f7ff bb3b 	b.w	800cb5c <_dtoa_r+0x34>
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	3202      	adds	r2, #2
 800d4ea:	0092      	lsls	r2, r2, #2
 800d4ec:	f107 010c 	add.w	r1, r7, #12
 800d4f0:	300c      	adds	r0, #12
 800d4f2:	f7fe fc76 	bl	800bde2 <memcpy>
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fc00 	bl	800dd00 <__lshift>
 800d500:	9b01      	ldr	r3, [sp, #4]
 800d502:	f103 0901 	add.w	r9, r3, #1
 800d506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d50a:	4413      	add	r3, r2
 800d50c:	9305      	str	r3, [sp, #20]
 800d50e:	f00a 0301 	and.w	r3, sl, #1
 800d512:	46b8      	mov	r8, r7
 800d514:	9304      	str	r3, [sp, #16]
 800d516:	4607      	mov	r7, r0
 800d518:	4631      	mov	r1, r6
 800d51a:	ee18 0a10 	vmov	r0, s16
 800d51e:	f7ff fa75 	bl	800ca0c <quorem>
 800d522:	4641      	mov	r1, r8
 800d524:	9002      	str	r0, [sp, #8]
 800d526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d52a:	ee18 0a10 	vmov	r0, s16
 800d52e:	f000 fc57 	bl	800dde0 <__mcmp>
 800d532:	463a      	mov	r2, r7
 800d534:	9003      	str	r0, [sp, #12]
 800d536:	4631      	mov	r1, r6
 800d538:	4620      	mov	r0, r4
 800d53a:	f000 fc6d 	bl	800de18 <__mdiff>
 800d53e:	68c2      	ldr	r2, [r0, #12]
 800d540:	f109 3bff 	add.w	fp, r9, #4294967295
 800d544:	4605      	mov	r5, r0
 800d546:	bb02      	cbnz	r2, 800d58a <_dtoa_r+0xa62>
 800d548:	4601      	mov	r1, r0
 800d54a:	ee18 0a10 	vmov	r0, s16
 800d54e:	f000 fc47 	bl	800dde0 <__mcmp>
 800d552:	4602      	mov	r2, r0
 800d554:	4629      	mov	r1, r5
 800d556:	4620      	mov	r0, r4
 800d558:	9207      	str	r2, [sp, #28]
 800d55a:	f000 f9ff 	bl	800d95c <_Bfree>
 800d55e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d562:	ea43 0102 	orr.w	r1, r3, r2
 800d566:	9b04      	ldr	r3, [sp, #16]
 800d568:	430b      	orrs	r3, r1
 800d56a:	464d      	mov	r5, r9
 800d56c:	d10f      	bne.n	800d58e <_dtoa_r+0xa66>
 800d56e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d572:	d02a      	beq.n	800d5ca <_dtoa_r+0xaa2>
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	2b00      	cmp	r3, #0
 800d578:	dd02      	ble.n	800d580 <_dtoa_r+0xa58>
 800d57a:	9b02      	ldr	r3, [sp, #8]
 800d57c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d580:	f88b a000 	strb.w	sl, [fp]
 800d584:	e775      	b.n	800d472 <_dtoa_r+0x94a>
 800d586:	4638      	mov	r0, r7
 800d588:	e7ba      	b.n	800d500 <_dtoa_r+0x9d8>
 800d58a:	2201      	movs	r2, #1
 800d58c:	e7e2      	b.n	800d554 <_dtoa_r+0xa2c>
 800d58e:	9b03      	ldr	r3, [sp, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	db04      	blt.n	800d59e <_dtoa_r+0xa76>
 800d594:	9906      	ldr	r1, [sp, #24]
 800d596:	430b      	orrs	r3, r1
 800d598:	9904      	ldr	r1, [sp, #16]
 800d59a:	430b      	orrs	r3, r1
 800d59c:	d122      	bne.n	800d5e4 <_dtoa_r+0xabc>
 800d59e:	2a00      	cmp	r2, #0
 800d5a0:	ddee      	ble.n	800d580 <_dtoa_r+0xa58>
 800d5a2:	ee18 1a10 	vmov	r1, s16
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f000 fba9 	bl	800dd00 <__lshift>
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	ee08 0a10 	vmov	s16, r0
 800d5b4:	f000 fc14 	bl	800dde0 <__mcmp>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	dc03      	bgt.n	800d5c4 <_dtoa_r+0xa9c>
 800d5bc:	d1e0      	bne.n	800d580 <_dtoa_r+0xa58>
 800d5be:	f01a 0f01 	tst.w	sl, #1
 800d5c2:	d0dd      	beq.n	800d580 <_dtoa_r+0xa58>
 800d5c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5c8:	d1d7      	bne.n	800d57a <_dtoa_r+0xa52>
 800d5ca:	2339      	movs	r3, #57	; 0x39
 800d5cc:	f88b 3000 	strb.w	r3, [fp]
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	461d      	mov	r5, r3
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d5da:	2a39      	cmp	r2, #57	; 0x39
 800d5dc:	d071      	beq.n	800d6c2 <_dtoa_r+0xb9a>
 800d5de:	3201      	adds	r2, #1
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	e746      	b.n	800d472 <_dtoa_r+0x94a>
 800d5e4:	2a00      	cmp	r2, #0
 800d5e6:	dd07      	ble.n	800d5f8 <_dtoa_r+0xad0>
 800d5e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5ec:	d0ed      	beq.n	800d5ca <_dtoa_r+0xaa2>
 800d5ee:	f10a 0301 	add.w	r3, sl, #1
 800d5f2:	f88b 3000 	strb.w	r3, [fp]
 800d5f6:	e73c      	b.n	800d472 <_dtoa_r+0x94a>
 800d5f8:	9b05      	ldr	r3, [sp, #20]
 800d5fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d5fe:	4599      	cmp	r9, r3
 800d600:	d047      	beq.n	800d692 <_dtoa_r+0xb6a>
 800d602:	ee18 1a10 	vmov	r1, s16
 800d606:	2300      	movs	r3, #0
 800d608:	220a      	movs	r2, #10
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 f9c8 	bl	800d9a0 <__multadd>
 800d610:	45b8      	cmp	r8, r7
 800d612:	ee08 0a10 	vmov	s16, r0
 800d616:	f04f 0300 	mov.w	r3, #0
 800d61a:	f04f 020a 	mov.w	r2, #10
 800d61e:	4641      	mov	r1, r8
 800d620:	4620      	mov	r0, r4
 800d622:	d106      	bne.n	800d632 <_dtoa_r+0xb0a>
 800d624:	f000 f9bc 	bl	800d9a0 <__multadd>
 800d628:	4680      	mov	r8, r0
 800d62a:	4607      	mov	r7, r0
 800d62c:	f109 0901 	add.w	r9, r9, #1
 800d630:	e772      	b.n	800d518 <_dtoa_r+0x9f0>
 800d632:	f000 f9b5 	bl	800d9a0 <__multadd>
 800d636:	4639      	mov	r1, r7
 800d638:	4680      	mov	r8, r0
 800d63a:	2300      	movs	r3, #0
 800d63c:	220a      	movs	r2, #10
 800d63e:	4620      	mov	r0, r4
 800d640:	f000 f9ae 	bl	800d9a0 <__multadd>
 800d644:	4607      	mov	r7, r0
 800d646:	e7f1      	b.n	800d62c <_dtoa_r+0xb04>
 800d648:	9b03      	ldr	r3, [sp, #12]
 800d64a:	9302      	str	r3, [sp, #8]
 800d64c:	9d01      	ldr	r5, [sp, #4]
 800d64e:	ee18 0a10 	vmov	r0, s16
 800d652:	4631      	mov	r1, r6
 800d654:	f7ff f9da 	bl	800ca0c <quorem>
 800d658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d65c:	9b01      	ldr	r3, [sp, #4]
 800d65e:	f805 ab01 	strb.w	sl, [r5], #1
 800d662:	1aea      	subs	r2, r5, r3
 800d664:	9b02      	ldr	r3, [sp, #8]
 800d666:	4293      	cmp	r3, r2
 800d668:	dd09      	ble.n	800d67e <_dtoa_r+0xb56>
 800d66a:	ee18 1a10 	vmov	r1, s16
 800d66e:	2300      	movs	r3, #0
 800d670:	220a      	movs	r2, #10
 800d672:	4620      	mov	r0, r4
 800d674:	f000 f994 	bl	800d9a0 <__multadd>
 800d678:	ee08 0a10 	vmov	s16, r0
 800d67c:	e7e7      	b.n	800d64e <_dtoa_r+0xb26>
 800d67e:	9b02      	ldr	r3, [sp, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	bfc8      	it	gt
 800d684:	461d      	movgt	r5, r3
 800d686:	9b01      	ldr	r3, [sp, #4]
 800d688:	bfd8      	it	le
 800d68a:	2501      	movle	r5, #1
 800d68c:	441d      	add	r5, r3
 800d68e:	f04f 0800 	mov.w	r8, #0
 800d692:	ee18 1a10 	vmov	r1, s16
 800d696:	2201      	movs	r2, #1
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 fb31 	bl	800dd00 <__lshift>
 800d69e:	4631      	mov	r1, r6
 800d6a0:	ee08 0a10 	vmov	s16, r0
 800d6a4:	f000 fb9c 	bl	800dde0 <__mcmp>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	dc91      	bgt.n	800d5d0 <_dtoa_r+0xaa8>
 800d6ac:	d102      	bne.n	800d6b4 <_dtoa_r+0xb8c>
 800d6ae:	f01a 0f01 	tst.w	sl, #1
 800d6b2:	d18d      	bne.n	800d5d0 <_dtoa_r+0xaa8>
 800d6b4:	462b      	mov	r3, r5
 800d6b6:	461d      	mov	r5, r3
 800d6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6bc:	2a30      	cmp	r2, #48	; 0x30
 800d6be:	d0fa      	beq.n	800d6b6 <_dtoa_r+0xb8e>
 800d6c0:	e6d7      	b.n	800d472 <_dtoa_r+0x94a>
 800d6c2:	9a01      	ldr	r2, [sp, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d184      	bne.n	800d5d2 <_dtoa_r+0xaaa>
 800d6c8:	9b00      	ldr	r3, [sp, #0]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	2331      	movs	r3, #49	; 0x31
 800d6d0:	7013      	strb	r3, [r2, #0]
 800d6d2:	e6ce      	b.n	800d472 <_dtoa_r+0x94a>
 800d6d4:	4b09      	ldr	r3, [pc, #36]	; (800d6fc <_dtoa_r+0xbd4>)
 800d6d6:	f7ff ba95 	b.w	800cc04 <_dtoa_r+0xdc>
 800d6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f47f aa6e 	bne.w	800cbbe <_dtoa_r+0x96>
 800d6e2:	4b07      	ldr	r3, [pc, #28]	; (800d700 <_dtoa_r+0xbd8>)
 800d6e4:	f7ff ba8e 	b.w	800cc04 <_dtoa_r+0xdc>
 800d6e8:	9b02      	ldr	r3, [sp, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dcae      	bgt.n	800d64c <_dtoa_r+0xb24>
 800d6ee:	9b06      	ldr	r3, [sp, #24]
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	f73f aea8 	bgt.w	800d446 <_dtoa_r+0x91e>
 800d6f6:	e7a9      	b.n	800d64c <_dtoa_r+0xb24>
 800d6f8:	0800ed2f 	.word	0x0800ed2f
 800d6fc:	0800ec8c 	.word	0x0800ec8c
 800d700:	0800ecb0 	.word	0x0800ecb0

0800d704 <__sflush_r>:
 800d704:	898a      	ldrh	r2, [r1, #12]
 800d706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d70a:	4605      	mov	r5, r0
 800d70c:	0710      	lsls	r0, r2, #28
 800d70e:	460c      	mov	r4, r1
 800d710:	d458      	bmi.n	800d7c4 <__sflush_r+0xc0>
 800d712:	684b      	ldr	r3, [r1, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	dc05      	bgt.n	800d724 <__sflush_r+0x20>
 800d718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	dc02      	bgt.n	800d724 <__sflush_r+0x20>
 800d71e:	2000      	movs	r0, #0
 800d720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d726:	2e00      	cmp	r6, #0
 800d728:	d0f9      	beq.n	800d71e <__sflush_r+0x1a>
 800d72a:	2300      	movs	r3, #0
 800d72c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d730:	682f      	ldr	r7, [r5, #0]
 800d732:	602b      	str	r3, [r5, #0]
 800d734:	d032      	beq.n	800d79c <__sflush_r+0x98>
 800d736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d738:	89a3      	ldrh	r3, [r4, #12]
 800d73a:	075a      	lsls	r2, r3, #29
 800d73c:	d505      	bpl.n	800d74a <__sflush_r+0x46>
 800d73e:	6863      	ldr	r3, [r4, #4]
 800d740:	1ac0      	subs	r0, r0, r3
 800d742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d744:	b10b      	cbz	r3, 800d74a <__sflush_r+0x46>
 800d746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d748:	1ac0      	subs	r0, r0, r3
 800d74a:	2300      	movs	r3, #0
 800d74c:	4602      	mov	r2, r0
 800d74e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d750:	6a21      	ldr	r1, [r4, #32]
 800d752:	4628      	mov	r0, r5
 800d754:	47b0      	blx	r6
 800d756:	1c43      	adds	r3, r0, #1
 800d758:	89a3      	ldrh	r3, [r4, #12]
 800d75a:	d106      	bne.n	800d76a <__sflush_r+0x66>
 800d75c:	6829      	ldr	r1, [r5, #0]
 800d75e:	291d      	cmp	r1, #29
 800d760:	d82c      	bhi.n	800d7bc <__sflush_r+0xb8>
 800d762:	4a2a      	ldr	r2, [pc, #168]	; (800d80c <__sflush_r+0x108>)
 800d764:	40ca      	lsrs	r2, r1
 800d766:	07d6      	lsls	r6, r2, #31
 800d768:	d528      	bpl.n	800d7bc <__sflush_r+0xb8>
 800d76a:	2200      	movs	r2, #0
 800d76c:	6062      	str	r2, [r4, #4]
 800d76e:	04d9      	lsls	r1, r3, #19
 800d770:	6922      	ldr	r2, [r4, #16]
 800d772:	6022      	str	r2, [r4, #0]
 800d774:	d504      	bpl.n	800d780 <__sflush_r+0x7c>
 800d776:	1c42      	adds	r2, r0, #1
 800d778:	d101      	bne.n	800d77e <__sflush_r+0x7a>
 800d77a:	682b      	ldr	r3, [r5, #0]
 800d77c:	b903      	cbnz	r3, 800d780 <__sflush_r+0x7c>
 800d77e:	6560      	str	r0, [r4, #84]	; 0x54
 800d780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d782:	602f      	str	r7, [r5, #0]
 800d784:	2900      	cmp	r1, #0
 800d786:	d0ca      	beq.n	800d71e <__sflush_r+0x1a>
 800d788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d78c:	4299      	cmp	r1, r3
 800d78e:	d002      	beq.n	800d796 <__sflush_r+0x92>
 800d790:	4628      	mov	r0, r5
 800d792:	f000 fc3d 	bl	800e010 <_free_r>
 800d796:	2000      	movs	r0, #0
 800d798:	6360      	str	r0, [r4, #52]	; 0x34
 800d79a:	e7c1      	b.n	800d720 <__sflush_r+0x1c>
 800d79c:	6a21      	ldr	r1, [r4, #32]
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	47b0      	blx	r6
 800d7a4:	1c41      	adds	r1, r0, #1
 800d7a6:	d1c7      	bne.n	800d738 <__sflush_r+0x34>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d0c4      	beq.n	800d738 <__sflush_r+0x34>
 800d7ae:	2b1d      	cmp	r3, #29
 800d7b0:	d001      	beq.n	800d7b6 <__sflush_r+0xb2>
 800d7b2:	2b16      	cmp	r3, #22
 800d7b4:	d101      	bne.n	800d7ba <__sflush_r+0xb6>
 800d7b6:	602f      	str	r7, [r5, #0]
 800d7b8:	e7b1      	b.n	800d71e <__sflush_r+0x1a>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c0:	81a3      	strh	r3, [r4, #12]
 800d7c2:	e7ad      	b.n	800d720 <__sflush_r+0x1c>
 800d7c4:	690f      	ldr	r7, [r1, #16]
 800d7c6:	2f00      	cmp	r7, #0
 800d7c8:	d0a9      	beq.n	800d71e <__sflush_r+0x1a>
 800d7ca:	0793      	lsls	r3, r2, #30
 800d7cc:	680e      	ldr	r6, [r1, #0]
 800d7ce:	bf08      	it	eq
 800d7d0:	694b      	ldreq	r3, [r1, #20]
 800d7d2:	600f      	str	r7, [r1, #0]
 800d7d4:	bf18      	it	ne
 800d7d6:	2300      	movne	r3, #0
 800d7d8:	eba6 0807 	sub.w	r8, r6, r7
 800d7dc:	608b      	str	r3, [r1, #8]
 800d7de:	f1b8 0f00 	cmp.w	r8, #0
 800d7e2:	dd9c      	ble.n	800d71e <__sflush_r+0x1a>
 800d7e4:	6a21      	ldr	r1, [r4, #32]
 800d7e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7e8:	4643      	mov	r3, r8
 800d7ea:	463a      	mov	r2, r7
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	47b0      	blx	r6
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	dc06      	bgt.n	800d802 <__sflush_r+0xfe>
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7fa:	81a3      	strh	r3, [r4, #12]
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	e78e      	b.n	800d720 <__sflush_r+0x1c>
 800d802:	4407      	add	r7, r0
 800d804:	eba8 0800 	sub.w	r8, r8, r0
 800d808:	e7e9      	b.n	800d7de <__sflush_r+0xda>
 800d80a:	bf00      	nop
 800d80c:	20400001 	.word	0x20400001

0800d810 <_fflush_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	690b      	ldr	r3, [r1, #16]
 800d814:	4605      	mov	r5, r0
 800d816:	460c      	mov	r4, r1
 800d818:	b913      	cbnz	r3, 800d820 <_fflush_r+0x10>
 800d81a:	2500      	movs	r5, #0
 800d81c:	4628      	mov	r0, r5
 800d81e:	bd38      	pop	{r3, r4, r5, pc}
 800d820:	b118      	cbz	r0, 800d82a <_fflush_r+0x1a>
 800d822:	6983      	ldr	r3, [r0, #24]
 800d824:	b90b      	cbnz	r3, 800d82a <_fflush_r+0x1a>
 800d826:	f7fe fa17 	bl	800bc58 <__sinit>
 800d82a:	4b14      	ldr	r3, [pc, #80]	; (800d87c <_fflush_r+0x6c>)
 800d82c:	429c      	cmp	r4, r3
 800d82e:	d11b      	bne.n	800d868 <_fflush_r+0x58>
 800d830:	686c      	ldr	r4, [r5, #4]
 800d832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d0ef      	beq.n	800d81a <_fflush_r+0xa>
 800d83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d83c:	07d0      	lsls	r0, r2, #31
 800d83e:	d404      	bmi.n	800d84a <_fflush_r+0x3a>
 800d840:	0599      	lsls	r1, r3, #22
 800d842:	d402      	bmi.n	800d84a <_fflush_r+0x3a>
 800d844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d846:	f7fe faca 	bl	800bdde <__retarget_lock_acquire_recursive>
 800d84a:	4628      	mov	r0, r5
 800d84c:	4621      	mov	r1, r4
 800d84e:	f7ff ff59 	bl	800d704 <__sflush_r>
 800d852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d854:	07da      	lsls	r2, r3, #31
 800d856:	4605      	mov	r5, r0
 800d858:	d4e0      	bmi.n	800d81c <_fflush_r+0xc>
 800d85a:	89a3      	ldrh	r3, [r4, #12]
 800d85c:	059b      	lsls	r3, r3, #22
 800d85e:	d4dd      	bmi.n	800d81c <_fflush_r+0xc>
 800d860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d862:	f7fe fabd 	bl	800bde0 <__retarget_lock_release_recursive>
 800d866:	e7d9      	b.n	800d81c <_fflush_r+0xc>
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <_fflush_r+0x70>)
 800d86a:	429c      	cmp	r4, r3
 800d86c:	d101      	bne.n	800d872 <_fflush_r+0x62>
 800d86e:	68ac      	ldr	r4, [r5, #8]
 800d870:	e7df      	b.n	800d832 <_fflush_r+0x22>
 800d872:	4b04      	ldr	r3, [pc, #16]	; (800d884 <_fflush_r+0x74>)
 800d874:	429c      	cmp	r4, r3
 800d876:	bf08      	it	eq
 800d878:	68ec      	ldreq	r4, [r5, #12]
 800d87a:	e7da      	b.n	800d832 <_fflush_r+0x22>
 800d87c:	0800ec38 	.word	0x0800ec38
 800d880:	0800ec58 	.word	0x0800ec58
 800d884:	0800ec18 	.word	0x0800ec18

0800d888 <_localeconv_r>:
 800d888:	4800      	ldr	r0, [pc, #0]	; (800d88c <_localeconv_r+0x4>)
 800d88a:	4770      	bx	lr
 800d88c:	20000164 	.word	0x20000164

0800d890 <_lseek_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4d07      	ldr	r5, [pc, #28]	; (800d8b0 <_lseek_r+0x20>)
 800d894:	4604      	mov	r4, r0
 800d896:	4608      	mov	r0, r1
 800d898:	4611      	mov	r1, r2
 800d89a:	2200      	movs	r2, #0
 800d89c:	602a      	str	r2, [r5, #0]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f7f4 fa6c 	bl	8001d7c <_lseek>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d102      	bne.n	800d8ae <_lseek_r+0x1e>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	b103      	cbz	r3, 800d8ae <_lseek_r+0x1e>
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	bd38      	pop	{r3, r4, r5, pc}
 800d8b0:	200022e4 	.word	0x200022e4

0800d8b4 <malloc>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	; (800d8c0 <malloc+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7fe bac9 	b.w	800be50 <_malloc_r>
 800d8be:	bf00      	nop
 800d8c0:	20000010 	.word	0x20000010

0800d8c4 <__malloc_lock>:
 800d8c4:	4801      	ldr	r0, [pc, #4]	; (800d8cc <__malloc_lock+0x8>)
 800d8c6:	f7fe ba8a 	b.w	800bdde <__retarget_lock_acquire_recursive>
 800d8ca:	bf00      	nop
 800d8cc:	200022d8 	.word	0x200022d8

0800d8d0 <__malloc_unlock>:
 800d8d0:	4801      	ldr	r0, [pc, #4]	; (800d8d8 <__malloc_unlock+0x8>)
 800d8d2:	f7fe ba85 	b.w	800bde0 <__retarget_lock_release_recursive>
 800d8d6:	bf00      	nop
 800d8d8:	200022d8 	.word	0x200022d8

0800d8dc <_Balloc>:
 800d8dc:	b570      	push	{r4, r5, r6, lr}
 800d8de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	460d      	mov	r5, r1
 800d8e4:	b976      	cbnz	r6, 800d904 <_Balloc+0x28>
 800d8e6:	2010      	movs	r0, #16
 800d8e8:	f7ff ffe4 	bl	800d8b4 <malloc>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	6260      	str	r0, [r4, #36]	; 0x24
 800d8f0:	b920      	cbnz	r0, 800d8fc <_Balloc+0x20>
 800d8f2:	4b18      	ldr	r3, [pc, #96]	; (800d954 <_Balloc+0x78>)
 800d8f4:	4818      	ldr	r0, [pc, #96]	; (800d958 <_Balloc+0x7c>)
 800d8f6:	2166      	movs	r1, #102	; 0x66
 800d8f8:	f000 fd44 	bl	800e384 <__assert_func>
 800d8fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d900:	6006      	str	r6, [r0, #0]
 800d902:	60c6      	str	r6, [r0, #12]
 800d904:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d906:	68f3      	ldr	r3, [r6, #12]
 800d908:	b183      	cbz	r3, 800d92c <_Balloc+0x50>
 800d90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d912:	b9b8      	cbnz	r0, 800d944 <_Balloc+0x68>
 800d914:	2101      	movs	r1, #1
 800d916:	fa01 f605 	lsl.w	r6, r1, r5
 800d91a:	1d72      	adds	r2, r6, #5
 800d91c:	0092      	lsls	r2, r2, #2
 800d91e:	4620      	mov	r0, r4
 800d920:	f000 fb60 	bl	800dfe4 <_calloc_r>
 800d924:	b160      	cbz	r0, 800d940 <_Balloc+0x64>
 800d926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d92a:	e00e      	b.n	800d94a <_Balloc+0x6e>
 800d92c:	2221      	movs	r2, #33	; 0x21
 800d92e:	2104      	movs	r1, #4
 800d930:	4620      	mov	r0, r4
 800d932:	f000 fb57 	bl	800dfe4 <_calloc_r>
 800d936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d938:	60f0      	str	r0, [r6, #12]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1e4      	bne.n	800d90a <_Balloc+0x2e>
 800d940:	2000      	movs	r0, #0
 800d942:	bd70      	pop	{r4, r5, r6, pc}
 800d944:	6802      	ldr	r2, [r0, #0]
 800d946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d94a:	2300      	movs	r3, #0
 800d94c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d950:	e7f7      	b.n	800d942 <_Balloc+0x66>
 800d952:	bf00      	nop
 800d954:	0800ecbd 	.word	0x0800ecbd
 800d958:	0800ed40 	.word	0x0800ed40

0800d95c <_Bfree>:
 800d95c:	b570      	push	{r4, r5, r6, lr}
 800d95e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d960:	4605      	mov	r5, r0
 800d962:	460c      	mov	r4, r1
 800d964:	b976      	cbnz	r6, 800d984 <_Bfree+0x28>
 800d966:	2010      	movs	r0, #16
 800d968:	f7ff ffa4 	bl	800d8b4 <malloc>
 800d96c:	4602      	mov	r2, r0
 800d96e:	6268      	str	r0, [r5, #36]	; 0x24
 800d970:	b920      	cbnz	r0, 800d97c <_Bfree+0x20>
 800d972:	4b09      	ldr	r3, [pc, #36]	; (800d998 <_Bfree+0x3c>)
 800d974:	4809      	ldr	r0, [pc, #36]	; (800d99c <_Bfree+0x40>)
 800d976:	218a      	movs	r1, #138	; 0x8a
 800d978:	f000 fd04 	bl	800e384 <__assert_func>
 800d97c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d980:	6006      	str	r6, [r0, #0]
 800d982:	60c6      	str	r6, [r0, #12]
 800d984:	b13c      	cbz	r4, 800d996 <_Bfree+0x3a>
 800d986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d988:	6862      	ldr	r2, [r4, #4]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d990:	6021      	str	r1, [r4, #0]
 800d992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d996:	bd70      	pop	{r4, r5, r6, pc}
 800d998:	0800ecbd 	.word	0x0800ecbd
 800d99c:	0800ed40 	.word	0x0800ed40

0800d9a0 <__multadd>:
 800d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	690d      	ldr	r5, [r1, #16]
 800d9a6:	4607      	mov	r7, r0
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	461e      	mov	r6, r3
 800d9ac:	f101 0c14 	add.w	ip, r1, #20
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	f8dc 3000 	ldr.w	r3, [ip]
 800d9b6:	b299      	uxth	r1, r3
 800d9b8:	fb02 6101 	mla	r1, r2, r1, r6
 800d9bc:	0c1e      	lsrs	r6, r3, #16
 800d9be:	0c0b      	lsrs	r3, r1, #16
 800d9c0:	fb02 3306 	mla	r3, r2, r6, r3
 800d9c4:	b289      	uxth	r1, r1
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9cc:	4285      	cmp	r5, r0
 800d9ce:	f84c 1b04 	str.w	r1, [ip], #4
 800d9d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9d6:	dcec      	bgt.n	800d9b2 <__multadd+0x12>
 800d9d8:	b30e      	cbz	r6, 800da1e <__multadd+0x7e>
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	42ab      	cmp	r3, r5
 800d9de:	dc19      	bgt.n	800da14 <__multadd+0x74>
 800d9e0:	6861      	ldr	r1, [r4, #4]
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	3101      	adds	r1, #1
 800d9e6:	f7ff ff79 	bl	800d8dc <_Balloc>
 800d9ea:	4680      	mov	r8, r0
 800d9ec:	b928      	cbnz	r0, 800d9fa <__multadd+0x5a>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	4b0c      	ldr	r3, [pc, #48]	; (800da24 <__multadd+0x84>)
 800d9f2:	480d      	ldr	r0, [pc, #52]	; (800da28 <__multadd+0x88>)
 800d9f4:	21b5      	movs	r1, #181	; 0xb5
 800d9f6:	f000 fcc5 	bl	800e384 <__assert_func>
 800d9fa:	6922      	ldr	r2, [r4, #16]
 800d9fc:	3202      	adds	r2, #2
 800d9fe:	f104 010c 	add.w	r1, r4, #12
 800da02:	0092      	lsls	r2, r2, #2
 800da04:	300c      	adds	r0, #12
 800da06:	f7fe f9ec 	bl	800bde2 <memcpy>
 800da0a:	4621      	mov	r1, r4
 800da0c:	4638      	mov	r0, r7
 800da0e:	f7ff ffa5 	bl	800d95c <_Bfree>
 800da12:	4644      	mov	r4, r8
 800da14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da18:	3501      	adds	r5, #1
 800da1a:	615e      	str	r6, [r3, #20]
 800da1c:	6125      	str	r5, [r4, #16]
 800da1e:	4620      	mov	r0, r4
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da24:	0800ed2f 	.word	0x0800ed2f
 800da28:	0800ed40 	.word	0x0800ed40

0800da2c <__hi0bits>:
 800da2c:	0c03      	lsrs	r3, r0, #16
 800da2e:	041b      	lsls	r3, r3, #16
 800da30:	b9d3      	cbnz	r3, 800da68 <__hi0bits+0x3c>
 800da32:	0400      	lsls	r0, r0, #16
 800da34:	2310      	movs	r3, #16
 800da36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da3a:	bf04      	itt	eq
 800da3c:	0200      	lsleq	r0, r0, #8
 800da3e:	3308      	addeq	r3, #8
 800da40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da44:	bf04      	itt	eq
 800da46:	0100      	lsleq	r0, r0, #4
 800da48:	3304      	addeq	r3, #4
 800da4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da4e:	bf04      	itt	eq
 800da50:	0080      	lsleq	r0, r0, #2
 800da52:	3302      	addeq	r3, #2
 800da54:	2800      	cmp	r0, #0
 800da56:	db05      	blt.n	800da64 <__hi0bits+0x38>
 800da58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da5c:	f103 0301 	add.w	r3, r3, #1
 800da60:	bf08      	it	eq
 800da62:	2320      	moveq	r3, #32
 800da64:	4618      	mov	r0, r3
 800da66:	4770      	bx	lr
 800da68:	2300      	movs	r3, #0
 800da6a:	e7e4      	b.n	800da36 <__hi0bits+0xa>

0800da6c <__lo0bits>:
 800da6c:	6803      	ldr	r3, [r0, #0]
 800da6e:	f013 0207 	ands.w	r2, r3, #7
 800da72:	4601      	mov	r1, r0
 800da74:	d00b      	beq.n	800da8e <__lo0bits+0x22>
 800da76:	07da      	lsls	r2, r3, #31
 800da78:	d423      	bmi.n	800dac2 <__lo0bits+0x56>
 800da7a:	0798      	lsls	r0, r3, #30
 800da7c:	bf49      	itett	mi
 800da7e:	085b      	lsrmi	r3, r3, #1
 800da80:	089b      	lsrpl	r3, r3, #2
 800da82:	2001      	movmi	r0, #1
 800da84:	600b      	strmi	r3, [r1, #0]
 800da86:	bf5c      	itt	pl
 800da88:	600b      	strpl	r3, [r1, #0]
 800da8a:	2002      	movpl	r0, #2
 800da8c:	4770      	bx	lr
 800da8e:	b298      	uxth	r0, r3
 800da90:	b9a8      	cbnz	r0, 800dabe <__lo0bits+0x52>
 800da92:	0c1b      	lsrs	r3, r3, #16
 800da94:	2010      	movs	r0, #16
 800da96:	b2da      	uxtb	r2, r3
 800da98:	b90a      	cbnz	r2, 800da9e <__lo0bits+0x32>
 800da9a:	3008      	adds	r0, #8
 800da9c:	0a1b      	lsrs	r3, r3, #8
 800da9e:	071a      	lsls	r2, r3, #28
 800daa0:	bf04      	itt	eq
 800daa2:	091b      	lsreq	r3, r3, #4
 800daa4:	3004      	addeq	r0, #4
 800daa6:	079a      	lsls	r2, r3, #30
 800daa8:	bf04      	itt	eq
 800daaa:	089b      	lsreq	r3, r3, #2
 800daac:	3002      	addeq	r0, #2
 800daae:	07da      	lsls	r2, r3, #31
 800dab0:	d403      	bmi.n	800daba <__lo0bits+0x4e>
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	f100 0001 	add.w	r0, r0, #1
 800dab8:	d005      	beq.n	800dac6 <__lo0bits+0x5a>
 800daba:	600b      	str	r3, [r1, #0]
 800dabc:	4770      	bx	lr
 800dabe:	4610      	mov	r0, r2
 800dac0:	e7e9      	b.n	800da96 <__lo0bits+0x2a>
 800dac2:	2000      	movs	r0, #0
 800dac4:	4770      	bx	lr
 800dac6:	2020      	movs	r0, #32
 800dac8:	4770      	bx	lr
	...

0800dacc <__i2b>:
 800dacc:	b510      	push	{r4, lr}
 800dace:	460c      	mov	r4, r1
 800dad0:	2101      	movs	r1, #1
 800dad2:	f7ff ff03 	bl	800d8dc <_Balloc>
 800dad6:	4602      	mov	r2, r0
 800dad8:	b928      	cbnz	r0, 800dae6 <__i2b+0x1a>
 800dada:	4b05      	ldr	r3, [pc, #20]	; (800daf0 <__i2b+0x24>)
 800dadc:	4805      	ldr	r0, [pc, #20]	; (800daf4 <__i2b+0x28>)
 800dade:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dae2:	f000 fc4f 	bl	800e384 <__assert_func>
 800dae6:	2301      	movs	r3, #1
 800dae8:	6144      	str	r4, [r0, #20]
 800daea:	6103      	str	r3, [r0, #16]
 800daec:	bd10      	pop	{r4, pc}
 800daee:	bf00      	nop
 800daf0:	0800ed2f 	.word	0x0800ed2f
 800daf4:	0800ed40 	.word	0x0800ed40

0800daf8 <__multiply>:
 800daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	4691      	mov	r9, r2
 800dafe:	690a      	ldr	r2, [r1, #16]
 800db00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db04:	429a      	cmp	r2, r3
 800db06:	bfb8      	it	lt
 800db08:	460b      	movlt	r3, r1
 800db0a:	460c      	mov	r4, r1
 800db0c:	bfbc      	itt	lt
 800db0e:	464c      	movlt	r4, r9
 800db10:	4699      	movlt	r9, r3
 800db12:	6927      	ldr	r7, [r4, #16]
 800db14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db18:	68a3      	ldr	r3, [r4, #8]
 800db1a:	6861      	ldr	r1, [r4, #4]
 800db1c:	eb07 060a 	add.w	r6, r7, sl
 800db20:	42b3      	cmp	r3, r6
 800db22:	b085      	sub	sp, #20
 800db24:	bfb8      	it	lt
 800db26:	3101      	addlt	r1, #1
 800db28:	f7ff fed8 	bl	800d8dc <_Balloc>
 800db2c:	b930      	cbnz	r0, 800db3c <__multiply+0x44>
 800db2e:	4602      	mov	r2, r0
 800db30:	4b44      	ldr	r3, [pc, #272]	; (800dc44 <__multiply+0x14c>)
 800db32:	4845      	ldr	r0, [pc, #276]	; (800dc48 <__multiply+0x150>)
 800db34:	f240 115d 	movw	r1, #349	; 0x15d
 800db38:	f000 fc24 	bl	800e384 <__assert_func>
 800db3c:	f100 0514 	add.w	r5, r0, #20
 800db40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db44:	462b      	mov	r3, r5
 800db46:	2200      	movs	r2, #0
 800db48:	4543      	cmp	r3, r8
 800db4a:	d321      	bcc.n	800db90 <__multiply+0x98>
 800db4c:	f104 0314 	add.w	r3, r4, #20
 800db50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db54:	f109 0314 	add.w	r3, r9, #20
 800db58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db5c:	9202      	str	r2, [sp, #8]
 800db5e:	1b3a      	subs	r2, r7, r4
 800db60:	3a15      	subs	r2, #21
 800db62:	f022 0203 	bic.w	r2, r2, #3
 800db66:	3204      	adds	r2, #4
 800db68:	f104 0115 	add.w	r1, r4, #21
 800db6c:	428f      	cmp	r7, r1
 800db6e:	bf38      	it	cc
 800db70:	2204      	movcc	r2, #4
 800db72:	9201      	str	r2, [sp, #4]
 800db74:	9a02      	ldr	r2, [sp, #8]
 800db76:	9303      	str	r3, [sp, #12]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d80c      	bhi.n	800db96 <__multiply+0x9e>
 800db7c:	2e00      	cmp	r6, #0
 800db7e:	dd03      	ble.n	800db88 <__multiply+0x90>
 800db80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db84:	2b00      	cmp	r3, #0
 800db86:	d05a      	beq.n	800dc3e <__multiply+0x146>
 800db88:	6106      	str	r6, [r0, #16]
 800db8a:	b005      	add	sp, #20
 800db8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db90:	f843 2b04 	str.w	r2, [r3], #4
 800db94:	e7d8      	b.n	800db48 <__multiply+0x50>
 800db96:	f8b3 a000 	ldrh.w	sl, [r3]
 800db9a:	f1ba 0f00 	cmp.w	sl, #0
 800db9e:	d024      	beq.n	800dbea <__multiply+0xf2>
 800dba0:	f104 0e14 	add.w	lr, r4, #20
 800dba4:	46a9      	mov	r9, r5
 800dba6:	f04f 0c00 	mov.w	ip, #0
 800dbaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dbae:	f8d9 1000 	ldr.w	r1, [r9]
 800dbb2:	fa1f fb82 	uxth.w	fp, r2
 800dbb6:	b289      	uxth	r1, r1
 800dbb8:	fb0a 110b 	mla	r1, sl, fp, r1
 800dbbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dbc0:	f8d9 2000 	ldr.w	r2, [r9]
 800dbc4:	4461      	add	r1, ip
 800dbc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbca:	fb0a c20b 	mla	r2, sl, fp, ip
 800dbce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbd2:	b289      	uxth	r1, r1
 800dbd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbd8:	4577      	cmp	r7, lr
 800dbda:	f849 1b04 	str.w	r1, [r9], #4
 800dbde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbe2:	d8e2      	bhi.n	800dbaa <__multiply+0xb2>
 800dbe4:	9a01      	ldr	r2, [sp, #4]
 800dbe6:	f845 c002 	str.w	ip, [r5, r2]
 800dbea:	9a03      	ldr	r2, [sp, #12]
 800dbec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	f1b9 0f00 	cmp.w	r9, #0
 800dbf6:	d020      	beq.n	800dc3a <__multiply+0x142>
 800dbf8:	6829      	ldr	r1, [r5, #0]
 800dbfa:	f104 0c14 	add.w	ip, r4, #20
 800dbfe:	46ae      	mov	lr, r5
 800dc00:	f04f 0a00 	mov.w	sl, #0
 800dc04:	f8bc b000 	ldrh.w	fp, [ip]
 800dc08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc0c:	fb09 220b 	mla	r2, r9, fp, r2
 800dc10:	4492      	add	sl, r2
 800dc12:	b289      	uxth	r1, r1
 800dc14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dc18:	f84e 1b04 	str.w	r1, [lr], #4
 800dc1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc20:	f8be 1000 	ldrh.w	r1, [lr]
 800dc24:	0c12      	lsrs	r2, r2, #16
 800dc26:	fb09 1102 	mla	r1, r9, r2, r1
 800dc2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dc2e:	4567      	cmp	r7, ip
 800dc30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc34:	d8e6      	bhi.n	800dc04 <__multiply+0x10c>
 800dc36:	9a01      	ldr	r2, [sp, #4]
 800dc38:	50a9      	str	r1, [r5, r2]
 800dc3a:	3504      	adds	r5, #4
 800dc3c:	e79a      	b.n	800db74 <__multiply+0x7c>
 800dc3e:	3e01      	subs	r6, #1
 800dc40:	e79c      	b.n	800db7c <__multiply+0x84>
 800dc42:	bf00      	nop
 800dc44:	0800ed2f 	.word	0x0800ed2f
 800dc48:	0800ed40 	.word	0x0800ed40

0800dc4c <__pow5mult>:
 800dc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc50:	4615      	mov	r5, r2
 800dc52:	f012 0203 	ands.w	r2, r2, #3
 800dc56:	4606      	mov	r6, r0
 800dc58:	460f      	mov	r7, r1
 800dc5a:	d007      	beq.n	800dc6c <__pow5mult+0x20>
 800dc5c:	4c25      	ldr	r4, [pc, #148]	; (800dcf4 <__pow5mult+0xa8>)
 800dc5e:	3a01      	subs	r2, #1
 800dc60:	2300      	movs	r3, #0
 800dc62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc66:	f7ff fe9b 	bl	800d9a0 <__multadd>
 800dc6a:	4607      	mov	r7, r0
 800dc6c:	10ad      	asrs	r5, r5, #2
 800dc6e:	d03d      	beq.n	800dcec <__pow5mult+0xa0>
 800dc70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dc72:	b97c      	cbnz	r4, 800dc94 <__pow5mult+0x48>
 800dc74:	2010      	movs	r0, #16
 800dc76:	f7ff fe1d 	bl	800d8b4 <malloc>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	6270      	str	r0, [r6, #36]	; 0x24
 800dc7e:	b928      	cbnz	r0, 800dc8c <__pow5mult+0x40>
 800dc80:	4b1d      	ldr	r3, [pc, #116]	; (800dcf8 <__pow5mult+0xac>)
 800dc82:	481e      	ldr	r0, [pc, #120]	; (800dcfc <__pow5mult+0xb0>)
 800dc84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dc88:	f000 fb7c 	bl	800e384 <__assert_func>
 800dc8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc90:	6004      	str	r4, [r0, #0]
 800dc92:	60c4      	str	r4, [r0, #12]
 800dc94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc9c:	b94c      	cbnz	r4, 800dcb2 <__pow5mult+0x66>
 800dc9e:	f240 2171 	movw	r1, #625	; 0x271
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff ff12 	bl	800dacc <__i2b>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800dcae:	4604      	mov	r4, r0
 800dcb0:	6003      	str	r3, [r0, #0]
 800dcb2:	f04f 0900 	mov.w	r9, #0
 800dcb6:	07eb      	lsls	r3, r5, #31
 800dcb8:	d50a      	bpl.n	800dcd0 <__pow5mult+0x84>
 800dcba:	4639      	mov	r1, r7
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f7ff ff1a 	bl	800daf8 <__multiply>
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	4680      	mov	r8, r0
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f7ff fe47 	bl	800d95c <_Bfree>
 800dcce:	4647      	mov	r7, r8
 800dcd0:	106d      	asrs	r5, r5, #1
 800dcd2:	d00b      	beq.n	800dcec <__pow5mult+0xa0>
 800dcd4:	6820      	ldr	r0, [r4, #0]
 800dcd6:	b938      	cbnz	r0, 800dce8 <__pow5mult+0x9c>
 800dcd8:	4622      	mov	r2, r4
 800dcda:	4621      	mov	r1, r4
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f7ff ff0b 	bl	800daf8 <__multiply>
 800dce2:	6020      	str	r0, [r4, #0]
 800dce4:	f8c0 9000 	str.w	r9, [r0]
 800dce8:	4604      	mov	r4, r0
 800dcea:	e7e4      	b.n	800dcb6 <__pow5mult+0x6a>
 800dcec:	4638      	mov	r0, r7
 800dcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf2:	bf00      	nop
 800dcf4:	0800ee90 	.word	0x0800ee90
 800dcf8:	0800ecbd 	.word	0x0800ecbd
 800dcfc:	0800ed40 	.word	0x0800ed40

0800dd00 <__lshift>:
 800dd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd04:	460c      	mov	r4, r1
 800dd06:	6849      	ldr	r1, [r1, #4]
 800dd08:	6923      	ldr	r3, [r4, #16]
 800dd0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd0e:	68a3      	ldr	r3, [r4, #8]
 800dd10:	4607      	mov	r7, r0
 800dd12:	4691      	mov	r9, r2
 800dd14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd18:	f108 0601 	add.w	r6, r8, #1
 800dd1c:	42b3      	cmp	r3, r6
 800dd1e:	db0b      	blt.n	800dd38 <__lshift+0x38>
 800dd20:	4638      	mov	r0, r7
 800dd22:	f7ff fddb 	bl	800d8dc <_Balloc>
 800dd26:	4605      	mov	r5, r0
 800dd28:	b948      	cbnz	r0, 800dd3e <__lshift+0x3e>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	4b2a      	ldr	r3, [pc, #168]	; (800ddd8 <__lshift+0xd8>)
 800dd2e:	482b      	ldr	r0, [pc, #172]	; (800dddc <__lshift+0xdc>)
 800dd30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd34:	f000 fb26 	bl	800e384 <__assert_func>
 800dd38:	3101      	adds	r1, #1
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	e7ee      	b.n	800dd1c <__lshift+0x1c>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f100 0114 	add.w	r1, r0, #20
 800dd44:	f100 0210 	add.w	r2, r0, #16
 800dd48:	4618      	mov	r0, r3
 800dd4a:	4553      	cmp	r3, sl
 800dd4c:	db37      	blt.n	800ddbe <__lshift+0xbe>
 800dd4e:	6920      	ldr	r0, [r4, #16]
 800dd50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd54:	f104 0314 	add.w	r3, r4, #20
 800dd58:	f019 091f 	ands.w	r9, r9, #31
 800dd5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dd64:	d02f      	beq.n	800ddc6 <__lshift+0xc6>
 800dd66:	f1c9 0e20 	rsb	lr, r9, #32
 800dd6a:	468a      	mov	sl, r1
 800dd6c:	f04f 0c00 	mov.w	ip, #0
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	fa02 f209 	lsl.w	r2, r2, r9
 800dd76:	ea42 020c 	orr.w	r2, r2, ip
 800dd7a:	f84a 2b04 	str.w	r2, [sl], #4
 800dd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd82:	4298      	cmp	r0, r3
 800dd84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dd88:	d8f2      	bhi.n	800dd70 <__lshift+0x70>
 800dd8a:	1b03      	subs	r3, r0, r4
 800dd8c:	3b15      	subs	r3, #21
 800dd8e:	f023 0303 	bic.w	r3, r3, #3
 800dd92:	3304      	adds	r3, #4
 800dd94:	f104 0215 	add.w	r2, r4, #21
 800dd98:	4290      	cmp	r0, r2
 800dd9a:	bf38      	it	cc
 800dd9c:	2304      	movcc	r3, #4
 800dd9e:	f841 c003 	str.w	ip, [r1, r3]
 800dda2:	f1bc 0f00 	cmp.w	ip, #0
 800dda6:	d001      	beq.n	800ddac <__lshift+0xac>
 800dda8:	f108 0602 	add.w	r6, r8, #2
 800ddac:	3e01      	subs	r6, #1
 800ddae:	4638      	mov	r0, r7
 800ddb0:	612e      	str	r6, [r5, #16]
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	f7ff fdd2 	bl	800d95c <_Bfree>
 800ddb8:	4628      	mov	r0, r5
 800ddba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	e7c1      	b.n	800dd4a <__lshift+0x4a>
 800ddc6:	3904      	subs	r1, #4
 800ddc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddd0:	4298      	cmp	r0, r3
 800ddd2:	d8f9      	bhi.n	800ddc8 <__lshift+0xc8>
 800ddd4:	e7ea      	b.n	800ddac <__lshift+0xac>
 800ddd6:	bf00      	nop
 800ddd8:	0800ed2f 	.word	0x0800ed2f
 800dddc:	0800ed40 	.word	0x0800ed40

0800dde0 <__mcmp>:
 800dde0:	b530      	push	{r4, r5, lr}
 800dde2:	6902      	ldr	r2, [r0, #16]
 800dde4:	690c      	ldr	r4, [r1, #16]
 800dde6:	1b12      	subs	r2, r2, r4
 800dde8:	d10e      	bne.n	800de08 <__mcmp+0x28>
 800ddea:	f100 0314 	add.w	r3, r0, #20
 800ddee:	3114      	adds	r1, #20
 800ddf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ddfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de00:	42a5      	cmp	r5, r4
 800de02:	d003      	beq.n	800de0c <__mcmp+0x2c>
 800de04:	d305      	bcc.n	800de12 <__mcmp+0x32>
 800de06:	2201      	movs	r2, #1
 800de08:	4610      	mov	r0, r2
 800de0a:	bd30      	pop	{r4, r5, pc}
 800de0c:	4283      	cmp	r3, r0
 800de0e:	d3f3      	bcc.n	800ddf8 <__mcmp+0x18>
 800de10:	e7fa      	b.n	800de08 <__mcmp+0x28>
 800de12:	f04f 32ff 	mov.w	r2, #4294967295
 800de16:	e7f7      	b.n	800de08 <__mcmp+0x28>

0800de18 <__mdiff>:
 800de18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	460c      	mov	r4, r1
 800de1e:	4606      	mov	r6, r0
 800de20:	4611      	mov	r1, r2
 800de22:	4620      	mov	r0, r4
 800de24:	4690      	mov	r8, r2
 800de26:	f7ff ffdb 	bl	800dde0 <__mcmp>
 800de2a:	1e05      	subs	r5, r0, #0
 800de2c:	d110      	bne.n	800de50 <__mdiff+0x38>
 800de2e:	4629      	mov	r1, r5
 800de30:	4630      	mov	r0, r6
 800de32:	f7ff fd53 	bl	800d8dc <_Balloc>
 800de36:	b930      	cbnz	r0, 800de46 <__mdiff+0x2e>
 800de38:	4b3a      	ldr	r3, [pc, #232]	; (800df24 <__mdiff+0x10c>)
 800de3a:	4602      	mov	r2, r0
 800de3c:	f240 2132 	movw	r1, #562	; 0x232
 800de40:	4839      	ldr	r0, [pc, #228]	; (800df28 <__mdiff+0x110>)
 800de42:	f000 fa9f 	bl	800e384 <__assert_func>
 800de46:	2301      	movs	r3, #1
 800de48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de50:	bfa4      	itt	ge
 800de52:	4643      	movge	r3, r8
 800de54:	46a0      	movge	r8, r4
 800de56:	4630      	mov	r0, r6
 800de58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de5c:	bfa6      	itte	ge
 800de5e:	461c      	movge	r4, r3
 800de60:	2500      	movge	r5, #0
 800de62:	2501      	movlt	r5, #1
 800de64:	f7ff fd3a 	bl	800d8dc <_Balloc>
 800de68:	b920      	cbnz	r0, 800de74 <__mdiff+0x5c>
 800de6a:	4b2e      	ldr	r3, [pc, #184]	; (800df24 <__mdiff+0x10c>)
 800de6c:	4602      	mov	r2, r0
 800de6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800de72:	e7e5      	b.n	800de40 <__mdiff+0x28>
 800de74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de78:	6926      	ldr	r6, [r4, #16]
 800de7a:	60c5      	str	r5, [r0, #12]
 800de7c:	f104 0914 	add.w	r9, r4, #20
 800de80:	f108 0514 	add.w	r5, r8, #20
 800de84:	f100 0e14 	add.w	lr, r0, #20
 800de88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de90:	f108 0210 	add.w	r2, r8, #16
 800de94:	46f2      	mov	sl, lr
 800de96:	2100      	movs	r1, #0
 800de98:	f859 3b04 	ldr.w	r3, [r9], #4
 800de9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dea0:	fa1f f883 	uxth.w	r8, r3
 800dea4:	fa11 f18b 	uxtah	r1, r1, fp
 800dea8:	0c1b      	lsrs	r3, r3, #16
 800deaa:	eba1 0808 	sub.w	r8, r1, r8
 800deae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800deb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800deb6:	fa1f f888 	uxth.w	r8, r8
 800deba:	1419      	asrs	r1, r3, #16
 800debc:	454e      	cmp	r6, r9
 800debe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dec2:	f84a 3b04 	str.w	r3, [sl], #4
 800dec6:	d8e7      	bhi.n	800de98 <__mdiff+0x80>
 800dec8:	1b33      	subs	r3, r6, r4
 800deca:	3b15      	subs	r3, #21
 800decc:	f023 0303 	bic.w	r3, r3, #3
 800ded0:	3304      	adds	r3, #4
 800ded2:	3415      	adds	r4, #21
 800ded4:	42a6      	cmp	r6, r4
 800ded6:	bf38      	it	cc
 800ded8:	2304      	movcc	r3, #4
 800deda:	441d      	add	r5, r3
 800dedc:	4473      	add	r3, lr
 800dede:	469e      	mov	lr, r3
 800dee0:	462e      	mov	r6, r5
 800dee2:	4566      	cmp	r6, ip
 800dee4:	d30e      	bcc.n	800df04 <__mdiff+0xec>
 800dee6:	f10c 0203 	add.w	r2, ip, #3
 800deea:	1b52      	subs	r2, r2, r5
 800deec:	f022 0203 	bic.w	r2, r2, #3
 800def0:	3d03      	subs	r5, #3
 800def2:	45ac      	cmp	ip, r5
 800def4:	bf38      	it	cc
 800def6:	2200      	movcc	r2, #0
 800def8:	441a      	add	r2, r3
 800defa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800defe:	b17b      	cbz	r3, 800df20 <__mdiff+0x108>
 800df00:	6107      	str	r7, [r0, #16]
 800df02:	e7a3      	b.n	800de4c <__mdiff+0x34>
 800df04:	f856 8b04 	ldr.w	r8, [r6], #4
 800df08:	fa11 f288 	uxtah	r2, r1, r8
 800df0c:	1414      	asrs	r4, r2, #16
 800df0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df12:	b292      	uxth	r2, r2
 800df14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df18:	f84e 2b04 	str.w	r2, [lr], #4
 800df1c:	1421      	asrs	r1, r4, #16
 800df1e:	e7e0      	b.n	800dee2 <__mdiff+0xca>
 800df20:	3f01      	subs	r7, #1
 800df22:	e7ea      	b.n	800defa <__mdiff+0xe2>
 800df24:	0800ed2f 	.word	0x0800ed2f
 800df28:	0800ed40 	.word	0x0800ed40

0800df2c <__d2b>:
 800df2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df30:	4689      	mov	r9, r1
 800df32:	2101      	movs	r1, #1
 800df34:	ec57 6b10 	vmov	r6, r7, d0
 800df38:	4690      	mov	r8, r2
 800df3a:	f7ff fccf 	bl	800d8dc <_Balloc>
 800df3e:	4604      	mov	r4, r0
 800df40:	b930      	cbnz	r0, 800df50 <__d2b+0x24>
 800df42:	4602      	mov	r2, r0
 800df44:	4b25      	ldr	r3, [pc, #148]	; (800dfdc <__d2b+0xb0>)
 800df46:	4826      	ldr	r0, [pc, #152]	; (800dfe0 <__d2b+0xb4>)
 800df48:	f240 310a 	movw	r1, #778	; 0x30a
 800df4c:	f000 fa1a 	bl	800e384 <__assert_func>
 800df50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800df54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df58:	bb35      	cbnz	r5, 800dfa8 <__d2b+0x7c>
 800df5a:	2e00      	cmp	r6, #0
 800df5c:	9301      	str	r3, [sp, #4]
 800df5e:	d028      	beq.n	800dfb2 <__d2b+0x86>
 800df60:	4668      	mov	r0, sp
 800df62:	9600      	str	r6, [sp, #0]
 800df64:	f7ff fd82 	bl	800da6c <__lo0bits>
 800df68:	9900      	ldr	r1, [sp, #0]
 800df6a:	b300      	cbz	r0, 800dfae <__d2b+0x82>
 800df6c:	9a01      	ldr	r2, [sp, #4]
 800df6e:	f1c0 0320 	rsb	r3, r0, #32
 800df72:	fa02 f303 	lsl.w	r3, r2, r3
 800df76:	430b      	orrs	r3, r1
 800df78:	40c2      	lsrs	r2, r0
 800df7a:	6163      	str	r3, [r4, #20]
 800df7c:	9201      	str	r2, [sp, #4]
 800df7e:	9b01      	ldr	r3, [sp, #4]
 800df80:	61a3      	str	r3, [r4, #24]
 800df82:	2b00      	cmp	r3, #0
 800df84:	bf14      	ite	ne
 800df86:	2202      	movne	r2, #2
 800df88:	2201      	moveq	r2, #1
 800df8a:	6122      	str	r2, [r4, #16]
 800df8c:	b1d5      	cbz	r5, 800dfc4 <__d2b+0x98>
 800df8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df92:	4405      	add	r5, r0
 800df94:	f8c9 5000 	str.w	r5, [r9]
 800df98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df9c:	f8c8 0000 	str.w	r0, [r8]
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	b003      	add	sp, #12
 800dfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dfac:	e7d5      	b.n	800df5a <__d2b+0x2e>
 800dfae:	6161      	str	r1, [r4, #20]
 800dfb0:	e7e5      	b.n	800df7e <__d2b+0x52>
 800dfb2:	a801      	add	r0, sp, #4
 800dfb4:	f7ff fd5a 	bl	800da6c <__lo0bits>
 800dfb8:	9b01      	ldr	r3, [sp, #4]
 800dfba:	6163      	str	r3, [r4, #20]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	6122      	str	r2, [r4, #16]
 800dfc0:	3020      	adds	r0, #32
 800dfc2:	e7e3      	b.n	800df8c <__d2b+0x60>
 800dfc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dfc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dfcc:	f8c9 0000 	str.w	r0, [r9]
 800dfd0:	6918      	ldr	r0, [r3, #16]
 800dfd2:	f7ff fd2b 	bl	800da2c <__hi0bits>
 800dfd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dfda:	e7df      	b.n	800df9c <__d2b+0x70>
 800dfdc:	0800ed2f 	.word	0x0800ed2f
 800dfe0:	0800ed40 	.word	0x0800ed40

0800dfe4 <_calloc_r>:
 800dfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfe6:	fba1 2402 	umull	r2, r4, r1, r2
 800dfea:	b94c      	cbnz	r4, 800e000 <_calloc_r+0x1c>
 800dfec:	4611      	mov	r1, r2
 800dfee:	9201      	str	r2, [sp, #4]
 800dff0:	f7fd ff2e 	bl	800be50 <_malloc_r>
 800dff4:	9a01      	ldr	r2, [sp, #4]
 800dff6:	4605      	mov	r5, r0
 800dff8:	b930      	cbnz	r0, 800e008 <_calloc_r+0x24>
 800dffa:	4628      	mov	r0, r5
 800dffc:	b003      	add	sp, #12
 800dffe:	bd30      	pop	{r4, r5, pc}
 800e000:	220c      	movs	r2, #12
 800e002:	6002      	str	r2, [r0, #0]
 800e004:	2500      	movs	r5, #0
 800e006:	e7f8      	b.n	800dffa <_calloc_r+0x16>
 800e008:	4621      	mov	r1, r4
 800e00a:	f7fd fef8 	bl	800bdfe <memset>
 800e00e:	e7f4      	b.n	800dffa <_calloc_r+0x16>

0800e010 <_free_r>:
 800e010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e012:	2900      	cmp	r1, #0
 800e014:	d044      	beq.n	800e0a0 <_free_r+0x90>
 800e016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e01a:	9001      	str	r0, [sp, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f1a1 0404 	sub.w	r4, r1, #4
 800e022:	bfb8      	it	lt
 800e024:	18e4      	addlt	r4, r4, r3
 800e026:	f7ff fc4d 	bl	800d8c4 <__malloc_lock>
 800e02a:	4a1e      	ldr	r2, [pc, #120]	; (800e0a4 <_free_r+0x94>)
 800e02c:	9801      	ldr	r0, [sp, #4]
 800e02e:	6813      	ldr	r3, [r2, #0]
 800e030:	b933      	cbnz	r3, 800e040 <_free_r+0x30>
 800e032:	6063      	str	r3, [r4, #4]
 800e034:	6014      	str	r4, [r2, #0]
 800e036:	b003      	add	sp, #12
 800e038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e03c:	f7ff bc48 	b.w	800d8d0 <__malloc_unlock>
 800e040:	42a3      	cmp	r3, r4
 800e042:	d908      	bls.n	800e056 <_free_r+0x46>
 800e044:	6825      	ldr	r5, [r4, #0]
 800e046:	1961      	adds	r1, r4, r5
 800e048:	428b      	cmp	r3, r1
 800e04a:	bf01      	itttt	eq
 800e04c:	6819      	ldreq	r1, [r3, #0]
 800e04e:	685b      	ldreq	r3, [r3, #4]
 800e050:	1949      	addeq	r1, r1, r5
 800e052:	6021      	streq	r1, [r4, #0]
 800e054:	e7ed      	b.n	800e032 <_free_r+0x22>
 800e056:	461a      	mov	r2, r3
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	b10b      	cbz	r3, 800e060 <_free_r+0x50>
 800e05c:	42a3      	cmp	r3, r4
 800e05e:	d9fa      	bls.n	800e056 <_free_r+0x46>
 800e060:	6811      	ldr	r1, [r2, #0]
 800e062:	1855      	adds	r5, r2, r1
 800e064:	42a5      	cmp	r5, r4
 800e066:	d10b      	bne.n	800e080 <_free_r+0x70>
 800e068:	6824      	ldr	r4, [r4, #0]
 800e06a:	4421      	add	r1, r4
 800e06c:	1854      	adds	r4, r2, r1
 800e06e:	42a3      	cmp	r3, r4
 800e070:	6011      	str	r1, [r2, #0]
 800e072:	d1e0      	bne.n	800e036 <_free_r+0x26>
 800e074:	681c      	ldr	r4, [r3, #0]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	6053      	str	r3, [r2, #4]
 800e07a:	4421      	add	r1, r4
 800e07c:	6011      	str	r1, [r2, #0]
 800e07e:	e7da      	b.n	800e036 <_free_r+0x26>
 800e080:	d902      	bls.n	800e088 <_free_r+0x78>
 800e082:	230c      	movs	r3, #12
 800e084:	6003      	str	r3, [r0, #0]
 800e086:	e7d6      	b.n	800e036 <_free_r+0x26>
 800e088:	6825      	ldr	r5, [r4, #0]
 800e08a:	1961      	adds	r1, r4, r5
 800e08c:	428b      	cmp	r3, r1
 800e08e:	bf04      	itt	eq
 800e090:	6819      	ldreq	r1, [r3, #0]
 800e092:	685b      	ldreq	r3, [r3, #4]
 800e094:	6063      	str	r3, [r4, #4]
 800e096:	bf04      	itt	eq
 800e098:	1949      	addeq	r1, r1, r5
 800e09a:	6021      	streq	r1, [r4, #0]
 800e09c:	6054      	str	r4, [r2, #4]
 800e09e:	e7ca      	b.n	800e036 <_free_r+0x26>
 800e0a0:	b003      	add	sp, #12
 800e0a2:	bd30      	pop	{r4, r5, pc}
 800e0a4:	200022dc 	.word	0x200022dc

0800e0a8 <__ssputs_r>:
 800e0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ac:	688e      	ldr	r6, [r1, #8]
 800e0ae:	429e      	cmp	r6, r3
 800e0b0:	4682      	mov	sl, r0
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	4690      	mov	r8, r2
 800e0b6:	461f      	mov	r7, r3
 800e0b8:	d838      	bhi.n	800e12c <__ssputs_r+0x84>
 800e0ba:	898a      	ldrh	r2, [r1, #12]
 800e0bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0c0:	d032      	beq.n	800e128 <__ssputs_r+0x80>
 800e0c2:	6825      	ldr	r5, [r4, #0]
 800e0c4:	6909      	ldr	r1, [r1, #16]
 800e0c6:	eba5 0901 	sub.w	r9, r5, r1
 800e0ca:	6965      	ldr	r5, [r4, #20]
 800e0cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	444b      	add	r3, r9
 800e0d8:	106d      	asrs	r5, r5, #1
 800e0da:	429d      	cmp	r5, r3
 800e0dc:	bf38      	it	cc
 800e0de:	461d      	movcc	r5, r3
 800e0e0:	0553      	lsls	r3, r2, #21
 800e0e2:	d531      	bpl.n	800e148 <__ssputs_r+0xa0>
 800e0e4:	4629      	mov	r1, r5
 800e0e6:	f7fd feb3 	bl	800be50 <_malloc_r>
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	b950      	cbnz	r0, 800e104 <__ssputs_r+0x5c>
 800e0ee:	230c      	movs	r3, #12
 800e0f0:	f8ca 3000 	str.w	r3, [sl]
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0fa:	81a3      	strh	r3, [r4, #12]
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e104:	6921      	ldr	r1, [r4, #16]
 800e106:	464a      	mov	r2, r9
 800e108:	f7fd fe6b 	bl	800bde2 <memcpy>
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e116:	81a3      	strh	r3, [r4, #12]
 800e118:	6126      	str	r6, [r4, #16]
 800e11a:	6165      	str	r5, [r4, #20]
 800e11c:	444e      	add	r6, r9
 800e11e:	eba5 0509 	sub.w	r5, r5, r9
 800e122:	6026      	str	r6, [r4, #0]
 800e124:	60a5      	str	r5, [r4, #8]
 800e126:	463e      	mov	r6, r7
 800e128:	42be      	cmp	r6, r7
 800e12a:	d900      	bls.n	800e12e <__ssputs_r+0x86>
 800e12c:	463e      	mov	r6, r7
 800e12e:	6820      	ldr	r0, [r4, #0]
 800e130:	4632      	mov	r2, r6
 800e132:	4641      	mov	r1, r8
 800e134:	f000 f968 	bl	800e408 <memmove>
 800e138:	68a3      	ldr	r3, [r4, #8]
 800e13a:	1b9b      	subs	r3, r3, r6
 800e13c:	60a3      	str	r3, [r4, #8]
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	4433      	add	r3, r6
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	2000      	movs	r0, #0
 800e146:	e7db      	b.n	800e100 <__ssputs_r+0x58>
 800e148:	462a      	mov	r2, r5
 800e14a:	f000 f977 	bl	800e43c <_realloc_r>
 800e14e:	4606      	mov	r6, r0
 800e150:	2800      	cmp	r0, #0
 800e152:	d1e1      	bne.n	800e118 <__ssputs_r+0x70>
 800e154:	6921      	ldr	r1, [r4, #16]
 800e156:	4650      	mov	r0, sl
 800e158:	f7ff ff5a 	bl	800e010 <_free_r>
 800e15c:	e7c7      	b.n	800e0ee <__ssputs_r+0x46>
	...

0800e160 <_svfiprintf_r>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	4698      	mov	r8, r3
 800e166:	898b      	ldrh	r3, [r1, #12]
 800e168:	061b      	lsls	r3, r3, #24
 800e16a:	b09d      	sub	sp, #116	; 0x74
 800e16c:	4607      	mov	r7, r0
 800e16e:	460d      	mov	r5, r1
 800e170:	4614      	mov	r4, r2
 800e172:	d50e      	bpl.n	800e192 <_svfiprintf_r+0x32>
 800e174:	690b      	ldr	r3, [r1, #16]
 800e176:	b963      	cbnz	r3, 800e192 <_svfiprintf_r+0x32>
 800e178:	2140      	movs	r1, #64	; 0x40
 800e17a:	f7fd fe69 	bl	800be50 <_malloc_r>
 800e17e:	6028      	str	r0, [r5, #0]
 800e180:	6128      	str	r0, [r5, #16]
 800e182:	b920      	cbnz	r0, 800e18e <_svfiprintf_r+0x2e>
 800e184:	230c      	movs	r3, #12
 800e186:	603b      	str	r3, [r7, #0]
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	e0d1      	b.n	800e332 <_svfiprintf_r+0x1d2>
 800e18e:	2340      	movs	r3, #64	; 0x40
 800e190:	616b      	str	r3, [r5, #20]
 800e192:	2300      	movs	r3, #0
 800e194:	9309      	str	r3, [sp, #36]	; 0x24
 800e196:	2320      	movs	r3, #32
 800e198:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e19c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1a0:	2330      	movs	r3, #48	; 0x30
 800e1a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e34c <_svfiprintf_r+0x1ec>
 800e1a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1aa:	f04f 0901 	mov.w	r9, #1
 800e1ae:	4623      	mov	r3, r4
 800e1b0:	469a      	mov	sl, r3
 800e1b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1b6:	b10a      	cbz	r2, 800e1bc <_svfiprintf_r+0x5c>
 800e1b8:	2a25      	cmp	r2, #37	; 0x25
 800e1ba:	d1f9      	bne.n	800e1b0 <_svfiprintf_r+0x50>
 800e1bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e1c0:	d00b      	beq.n	800e1da <_svfiprintf_r+0x7a>
 800e1c2:	465b      	mov	r3, fp
 800e1c4:	4622      	mov	r2, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	f7ff ff6d 	bl	800e0a8 <__ssputs_r>
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f000 80aa 	beq.w	800e328 <_svfiprintf_r+0x1c8>
 800e1d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1d6:	445a      	add	r2, fp
 800e1d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e1da:	f89a 3000 	ldrb.w	r3, [sl]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f000 80a2 	beq.w	800e328 <_svfiprintf_r+0x1c8>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1ee:	f10a 0a01 	add.w	sl, sl, #1
 800e1f2:	9304      	str	r3, [sp, #16]
 800e1f4:	9307      	str	r3, [sp, #28]
 800e1f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e1fc:	4654      	mov	r4, sl
 800e1fe:	2205      	movs	r2, #5
 800e200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e204:	4851      	ldr	r0, [pc, #324]	; (800e34c <_svfiprintf_r+0x1ec>)
 800e206:	f7f2 f803 	bl	8000210 <memchr>
 800e20a:	9a04      	ldr	r2, [sp, #16]
 800e20c:	b9d8      	cbnz	r0, 800e246 <_svfiprintf_r+0xe6>
 800e20e:	06d0      	lsls	r0, r2, #27
 800e210:	bf44      	itt	mi
 800e212:	2320      	movmi	r3, #32
 800e214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e218:	0711      	lsls	r1, r2, #28
 800e21a:	bf44      	itt	mi
 800e21c:	232b      	movmi	r3, #43	; 0x2b
 800e21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e222:	f89a 3000 	ldrb.w	r3, [sl]
 800e226:	2b2a      	cmp	r3, #42	; 0x2a
 800e228:	d015      	beq.n	800e256 <_svfiprintf_r+0xf6>
 800e22a:	9a07      	ldr	r2, [sp, #28]
 800e22c:	4654      	mov	r4, sl
 800e22e:	2000      	movs	r0, #0
 800e230:	f04f 0c0a 	mov.w	ip, #10
 800e234:	4621      	mov	r1, r4
 800e236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e23a:	3b30      	subs	r3, #48	; 0x30
 800e23c:	2b09      	cmp	r3, #9
 800e23e:	d94e      	bls.n	800e2de <_svfiprintf_r+0x17e>
 800e240:	b1b0      	cbz	r0, 800e270 <_svfiprintf_r+0x110>
 800e242:	9207      	str	r2, [sp, #28]
 800e244:	e014      	b.n	800e270 <_svfiprintf_r+0x110>
 800e246:	eba0 0308 	sub.w	r3, r0, r8
 800e24a:	fa09 f303 	lsl.w	r3, r9, r3
 800e24e:	4313      	orrs	r3, r2
 800e250:	9304      	str	r3, [sp, #16]
 800e252:	46a2      	mov	sl, r4
 800e254:	e7d2      	b.n	800e1fc <_svfiprintf_r+0x9c>
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	1d19      	adds	r1, r3, #4
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	9103      	str	r1, [sp, #12]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bfbb      	ittet	lt
 800e262:	425b      	neglt	r3, r3
 800e264:	f042 0202 	orrlt.w	r2, r2, #2
 800e268:	9307      	strge	r3, [sp, #28]
 800e26a:	9307      	strlt	r3, [sp, #28]
 800e26c:	bfb8      	it	lt
 800e26e:	9204      	strlt	r2, [sp, #16]
 800e270:	7823      	ldrb	r3, [r4, #0]
 800e272:	2b2e      	cmp	r3, #46	; 0x2e
 800e274:	d10c      	bne.n	800e290 <_svfiprintf_r+0x130>
 800e276:	7863      	ldrb	r3, [r4, #1]
 800e278:	2b2a      	cmp	r3, #42	; 0x2a
 800e27a:	d135      	bne.n	800e2e8 <_svfiprintf_r+0x188>
 800e27c:	9b03      	ldr	r3, [sp, #12]
 800e27e:	1d1a      	adds	r2, r3, #4
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	9203      	str	r2, [sp, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	bfb8      	it	lt
 800e288:	f04f 33ff 	movlt.w	r3, #4294967295
 800e28c:	3402      	adds	r4, #2
 800e28e:	9305      	str	r3, [sp, #20]
 800e290:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e35c <_svfiprintf_r+0x1fc>
 800e294:	7821      	ldrb	r1, [r4, #0]
 800e296:	2203      	movs	r2, #3
 800e298:	4650      	mov	r0, sl
 800e29a:	f7f1 ffb9 	bl	8000210 <memchr>
 800e29e:	b140      	cbz	r0, 800e2b2 <_svfiprintf_r+0x152>
 800e2a0:	2340      	movs	r3, #64	; 0x40
 800e2a2:	eba0 000a 	sub.w	r0, r0, sl
 800e2a6:	fa03 f000 	lsl.w	r0, r3, r0
 800e2aa:	9b04      	ldr	r3, [sp, #16]
 800e2ac:	4303      	orrs	r3, r0
 800e2ae:	3401      	adds	r4, #1
 800e2b0:	9304      	str	r3, [sp, #16]
 800e2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b6:	4826      	ldr	r0, [pc, #152]	; (800e350 <_svfiprintf_r+0x1f0>)
 800e2b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2bc:	2206      	movs	r2, #6
 800e2be:	f7f1 ffa7 	bl	8000210 <memchr>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d038      	beq.n	800e338 <_svfiprintf_r+0x1d8>
 800e2c6:	4b23      	ldr	r3, [pc, #140]	; (800e354 <_svfiprintf_r+0x1f4>)
 800e2c8:	bb1b      	cbnz	r3, 800e312 <_svfiprintf_r+0x1b2>
 800e2ca:	9b03      	ldr	r3, [sp, #12]
 800e2cc:	3307      	adds	r3, #7
 800e2ce:	f023 0307 	bic.w	r3, r3, #7
 800e2d2:	3308      	adds	r3, #8
 800e2d4:	9303      	str	r3, [sp, #12]
 800e2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d8:	4433      	add	r3, r6
 800e2da:	9309      	str	r3, [sp, #36]	; 0x24
 800e2dc:	e767      	b.n	800e1ae <_svfiprintf_r+0x4e>
 800e2de:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	e7a5      	b.n	800e234 <_svfiprintf_r+0xd4>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	3401      	adds	r4, #1
 800e2ec:	9305      	str	r3, [sp, #20]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	f04f 0c0a 	mov.w	ip, #10
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2fa:	3a30      	subs	r2, #48	; 0x30
 800e2fc:	2a09      	cmp	r2, #9
 800e2fe:	d903      	bls.n	800e308 <_svfiprintf_r+0x1a8>
 800e300:	2b00      	cmp	r3, #0
 800e302:	d0c5      	beq.n	800e290 <_svfiprintf_r+0x130>
 800e304:	9105      	str	r1, [sp, #20]
 800e306:	e7c3      	b.n	800e290 <_svfiprintf_r+0x130>
 800e308:	fb0c 2101 	mla	r1, ip, r1, r2
 800e30c:	4604      	mov	r4, r0
 800e30e:	2301      	movs	r3, #1
 800e310:	e7f0      	b.n	800e2f4 <_svfiprintf_r+0x194>
 800e312:	ab03      	add	r3, sp, #12
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	462a      	mov	r2, r5
 800e318:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <_svfiprintf_r+0x1f8>)
 800e31a:	a904      	add	r1, sp, #16
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7fd feab 	bl	800c078 <_printf_float>
 800e322:	1c42      	adds	r2, r0, #1
 800e324:	4606      	mov	r6, r0
 800e326:	d1d6      	bne.n	800e2d6 <_svfiprintf_r+0x176>
 800e328:	89ab      	ldrh	r3, [r5, #12]
 800e32a:	065b      	lsls	r3, r3, #25
 800e32c:	f53f af2c 	bmi.w	800e188 <_svfiprintf_r+0x28>
 800e330:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e332:	b01d      	add	sp, #116	; 0x74
 800e334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e338:	ab03      	add	r3, sp, #12
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	462a      	mov	r2, r5
 800e33e:	4b06      	ldr	r3, [pc, #24]	; (800e358 <_svfiprintf_r+0x1f8>)
 800e340:	a904      	add	r1, sp, #16
 800e342:	4638      	mov	r0, r7
 800e344:	f7fe f93c 	bl	800c5c0 <_printf_i>
 800e348:	e7eb      	b.n	800e322 <_svfiprintf_r+0x1c2>
 800e34a:	bf00      	nop
 800e34c:	0800ee9c 	.word	0x0800ee9c
 800e350:	0800eea6 	.word	0x0800eea6
 800e354:	0800c079 	.word	0x0800c079
 800e358:	0800e0a9 	.word	0x0800e0a9
 800e35c:	0800eea2 	.word	0x0800eea2

0800e360 <_read_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	4d07      	ldr	r5, [pc, #28]	; (800e380 <_read_r+0x20>)
 800e364:	4604      	mov	r4, r0
 800e366:	4608      	mov	r0, r1
 800e368:	4611      	mov	r1, r2
 800e36a:	2200      	movs	r2, #0
 800e36c:	602a      	str	r2, [r5, #0]
 800e36e:	461a      	mov	r2, r3
 800e370:	f7f3 fca4 	bl	8001cbc <_read>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	d102      	bne.n	800e37e <_read_r+0x1e>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b103      	cbz	r3, 800e37e <_read_r+0x1e>
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	200022e4 	.word	0x200022e4

0800e384 <__assert_func>:
 800e384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e386:	4614      	mov	r4, r2
 800e388:	461a      	mov	r2, r3
 800e38a:	4b09      	ldr	r3, [pc, #36]	; (800e3b0 <__assert_func+0x2c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4605      	mov	r5, r0
 800e390:	68d8      	ldr	r0, [r3, #12]
 800e392:	b14c      	cbz	r4, 800e3a8 <__assert_func+0x24>
 800e394:	4b07      	ldr	r3, [pc, #28]	; (800e3b4 <__assert_func+0x30>)
 800e396:	9100      	str	r1, [sp, #0]
 800e398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e39c:	4906      	ldr	r1, [pc, #24]	; (800e3b8 <__assert_func+0x34>)
 800e39e:	462b      	mov	r3, r5
 800e3a0:	f000 f80e 	bl	800e3c0 <fiprintf>
 800e3a4:	f000 faa0 	bl	800e8e8 <abort>
 800e3a8:	4b04      	ldr	r3, [pc, #16]	; (800e3bc <__assert_func+0x38>)
 800e3aa:	461c      	mov	r4, r3
 800e3ac:	e7f3      	b.n	800e396 <__assert_func+0x12>
 800e3ae:	bf00      	nop
 800e3b0:	20000010 	.word	0x20000010
 800e3b4:	0800eead 	.word	0x0800eead
 800e3b8:	0800eeba 	.word	0x0800eeba
 800e3bc:	0800eee8 	.word	0x0800eee8

0800e3c0 <fiprintf>:
 800e3c0:	b40e      	push	{r1, r2, r3}
 800e3c2:	b503      	push	{r0, r1, lr}
 800e3c4:	4601      	mov	r1, r0
 800e3c6:	ab03      	add	r3, sp, #12
 800e3c8:	4805      	ldr	r0, [pc, #20]	; (800e3e0 <fiprintf+0x20>)
 800e3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ce:	6800      	ldr	r0, [r0, #0]
 800e3d0:	9301      	str	r3, [sp, #4]
 800e3d2:	f000 f88b 	bl	800e4ec <_vfiprintf_r>
 800e3d6:	b002      	add	sp, #8
 800e3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3dc:	b003      	add	sp, #12
 800e3de:	4770      	bx	lr
 800e3e0:	20000010 	.word	0x20000010

0800e3e4 <__ascii_mbtowc>:
 800e3e4:	b082      	sub	sp, #8
 800e3e6:	b901      	cbnz	r1, 800e3ea <__ascii_mbtowc+0x6>
 800e3e8:	a901      	add	r1, sp, #4
 800e3ea:	b142      	cbz	r2, 800e3fe <__ascii_mbtowc+0x1a>
 800e3ec:	b14b      	cbz	r3, 800e402 <__ascii_mbtowc+0x1e>
 800e3ee:	7813      	ldrb	r3, [r2, #0]
 800e3f0:	600b      	str	r3, [r1, #0]
 800e3f2:	7812      	ldrb	r2, [r2, #0]
 800e3f4:	1e10      	subs	r0, r2, #0
 800e3f6:	bf18      	it	ne
 800e3f8:	2001      	movne	r0, #1
 800e3fa:	b002      	add	sp, #8
 800e3fc:	4770      	bx	lr
 800e3fe:	4610      	mov	r0, r2
 800e400:	e7fb      	b.n	800e3fa <__ascii_mbtowc+0x16>
 800e402:	f06f 0001 	mvn.w	r0, #1
 800e406:	e7f8      	b.n	800e3fa <__ascii_mbtowc+0x16>

0800e408 <memmove>:
 800e408:	4288      	cmp	r0, r1
 800e40a:	b510      	push	{r4, lr}
 800e40c:	eb01 0402 	add.w	r4, r1, r2
 800e410:	d902      	bls.n	800e418 <memmove+0x10>
 800e412:	4284      	cmp	r4, r0
 800e414:	4623      	mov	r3, r4
 800e416:	d807      	bhi.n	800e428 <memmove+0x20>
 800e418:	1e43      	subs	r3, r0, #1
 800e41a:	42a1      	cmp	r1, r4
 800e41c:	d008      	beq.n	800e430 <memmove+0x28>
 800e41e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e422:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e426:	e7f8      	b.n	800e41a <memmove+0x12>
 800e428:	4402      	add	r2, r0
 800e42a:	4601      	mov	r1, r0
 800e42c:	428a      	cmp	r2, r1
 800e42e:	d100      	bne.n	800e432 <memmove+0x2a>
 800e430:	bd10      	pop	{r4, pc}
 800e432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e43a:	e7f7      	b.n	800e42c <memmove+0x24>

0800e43c <_realloc_r>:
 800e43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e440:	4680      	mov	r8, r0
 800e442:	4614      	mov	r4, r2
 800e444:	460e      	mov	r6, r1
 800e446:	b921      	cbnz	r1, 800e452 <_realloc_r+0x16>
 800e448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e44c:	4611      	mov	r1, r2
 800e44e:	f7fd bcff 	b.w	800be50 <_malloc_r>
 800e452:	b92a      	cbnz	r2, 800e460 <_realloc_r+0x24>
 800e454:	f7ff fddc 	bl	800e010 <_free_r>
 800e458:	4625      	mov	r5, r4
 800e45a:	4628      	mov	r0, r5
 800e45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e460:	f000 faae 	bl	800e9c0 <_malloc_usable_size_r>
 800e464:	4284      	cmp	r4, r0
 800e466:	4607      	mov	r7, r0
 800e468:	d802      	bhi.n	800e470 <_realloc_r+0x34>
 800e46a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e46e:	d812      	bhi.n	800e496 <_realloc_r+0x5a>
 800e470:	4621      	mov	r1, r4
 800e472:	4640      	mov	r0, r8
 800e474:	f7fd fcec 	bl	800be50 <_malloc_r>
 800e478:	4605      	mov	r5, r0
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d0ed      	beq.n	800e45a <_realloc_r+0x1e>
 800e47e:	42bc      	cmp	r4, r7
 800e480:	4622      	mov	r2, r4
 800e482:	4631      	mov	r1, r6
 800e484:	bf28      	it	cs
 800e486:	463a      	movcs	r2, r7
 800e488:	f7fd fcab 	bl	800bde2 <memcpy>
 800e48c:	4631      	mov	r1, r6
 800e48e:	4640      	mov	r0, r8
 800e490:	f7ff fdbe 	bl	800e010 <_free_r>
 800e494:	e7e1      	b.n	800e45a <_realloc_r+0x1e>
 800e496:	4635      	mov	r5, r6
 800e498:	e7df      	b.n	800e45a <_realloc_r+0x1e>

0800e49a <__sfputc_r>:
 800e49a:	6893      	ldr	r3, [r2, #8]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	b410      	push	{r4}
 800e4a2:	6093      	str	r3, [r2, #8]
 800e4a4:	da08      	bge.n	800e4b8 <__sfputc_r+0x1e>
 800e4a6:	6994      	ldr	r4, [r2, #24]
 800e4a8:	42a3      	cmp	r3, r4
 800e4aa:	db01      	blt.n	800e4b0 <__sfputc_r+0x16>
 800e4ac:	290a      	cmp	r1, #10
 800e4ae:	d103      	bne.n	800e4b8 <__sfputc_r+0x1e>
 800e4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4b4:	f000 b94a 	b.w	800e74c <__swbuf_r>
 800e4b8:	6813      	ldr	r3, [r2, #0]
 800e4ba:	1c58      	adds	r0, r3, #1
 800e4bc:	6010      	str	r0, [r2, #0]
 800e4be:	7019      	strb	r1, [r3, #0]
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <__sfputs_r>:
 800e4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	460f      	mov	r7, r1
 800e4ce:	4614      	mov	r4, r2
 800e4d0:	18d5      	adds	r5, r2, r3
 800e4d2:	42ac      	cmp	r4, r5
 800e4d4:	d101      	bne.n	800e4da <__sfputs_r+0x12>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	e007      	b.n	800e4ea <__sfputs_r+0x22>
 800e4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4de:	463a      	mov	r2, r7
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff ffda 	bl	800e49a <__sfputc_r>
 800e4e6:	1c43      	adds	r3, r0, #1
 800e4e8:	d1f3      	bne.n	800e4d2 <__sfputs_r+0xa>
 800e4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e4ec <_vfiprintf_r>:
 800e4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	b09d      	sub	sp, #116	; 0x74
 800e4f4:	4614      	mov	r4, r2
 800e4f6:	4698      	mov	r8, r3
 800e4f8:	4606      	mov	r6, r0
 800e4fa:	b118      	cbz	r0, 800e504 <_vfiprintf_r+0x18>
 800e4fc:	6983      	ldr	r3, [r0, #24]
 800e4fe:	b90b      	cbnz	r3, 800e504 <_vfiprintf_r+0x18>
 800e500:	f7fd fbaa 	bl	800bc58 <__sinit>
 800e504:	4b89      	ldr	r3, [pc, #548]	; (800e72c <_vfiprintf_r+0x240>)
 800e506:	429d      	cmp	r5, r3
 800e508:	d11b      	bne.n	800e542 <_vfiprintf_r+0x56>
 800e50a:	6875      	ldr	r5, [r6, #4]
 800e50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e50e:	07d9      	lsls	r1, r3, #31
 800e510:	d405      	bmi.n	800e51e <_vfiprintf_r+0x32>
 800e512:	89ab      	ldrh	r3, [r5, #12]
 800e514:	059a      	lsls	r2, r3, #22
 800e516:	d402      	bmi.n	800e51e <_vfiprintf_r+0x32>
 800e518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e51a:	f7fd fc60 	bl	800bdde <__retarget_lock_acquire_recursive>
 800e51e:	89ab      	ldrh	r3, [r5, #12]
 800e520:	071b      	lsls	r3, r3, #28
 800e522:	d501      	bpl.n	800e528 <_vfiprintf_r+0x3c>
 800e524:	692b      	ldr	r3, [r5, #16]
 800e526:	b9eb      	cbnz	r3, 800e564 <_vfiprintf_r+0x78>
 800e528:	4629      	mov	r1, r5
 800e52a:	4630      	mov	r0, r6
 800e52c:	f000 f96e 	bl	800e80c <__swsetup_r>
 800e530:	b1c0      	cbz	r0, 800e564 <_vfiprintf_r+0x78>
 800e532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e534:	07dc      	lsls	r4, r3, #31
 800e536:	d50e      	bpl.n	800e556 <_vfiprintf_r+0x6a>
 800e538:	f04f 30ff 	mov.w	r0, #4294967295
 800e53c:	b01d      	add	sp, #116	; 0x74
 800e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e542:	4b7b      	ldr	r3, [pc, #492]	; (800e730 <_vfiprintf_r+0x244>)
 800e544:	429d      	cmp	r5, r3
 800e546:	d101      	bne.n	800e54c <_vfiprintf_r+0x60>
 800e548:	68b5      	ldr	r5, [r6, #8]
 800e54a:	e7df      	b.n	800e50c <_vfiprintf_r+0x20>
 800e54c:	4b79      	ldr	r3, [pc, #484]	; (800e734 <_vfiprintf_r+0x248>)
 800e54e:	429d      	cmp	r5, r3
 800e550:	bf08      	it	eq
 800e552:	68f5      	ldreq	r5, [r6, #12]
 800e554:	e7da      	b.n	800e50c <_vfiprintf_r+0x20>
 800e556:	89ab      	ldrh	r3, [r5, #12]
 800e558:	0598      	lsls	r0, r3, #22
 800e55a:	d4ed      	bmi.n	800e538 <_vfiprintf_r+0x4c>
 800e55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e55e:	f7fd fc3f 	bl	800bde0 <__retarget_lock_release_recursive>
 800e562:	e7e9      	b.n	800e538 <_vfiprintf_r+0x4c>
 800e564:	2300      	movs	r3, #0
 800e566:	9309      	str	r3, [sp, #36]	; 0x24
 800e568:	2320      	movs	r3, #32
 800e56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e56e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e572:	2330      	movs	r3, #48	; 0x30
 800e574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e738 <_vfiprintf_r+0x24c>
 800e578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e57c:	f04f 0901 	mov.w	r9, #1
 800e580:	4623      	mov	r3, r4
 800e582:	469a      	mov	sl, r3
 800e584:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e588:	b10a      	cbz	r2, 800e58e <_vfiprintf_r+0xa2>
 800e58a:	2a25      	cmp	r2, #37	; 0x25
 800e58c:	d1f9      	bne.n	800e582 <_vfiprintf_r+0x96>
 800e58e:	ebba 0b04 	subs.w	fp, sl, r4
 800e592:	d00b      	beq.n	800e5ac <_vfiprintf_r+0xc0>
 800e594:	465b      	mov	r3, fp
 800e596:	4622      	mov	r2, r4
 800e598:	4629      	mov	r1, r5
 800e59a:	4630      	mov	r0, r6
 800e59c:	f7ff ff94 	bl	800e4c8 <__sfputs_r>
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	f000 80aa 	beq.w	800e6fa <_vfiprintf_r+0x20e>
 800e5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5a8:	445a      	add	r2, fp
 800e5aa:	9209      	str	r2, [sp, #36]	; 0x24
 800e5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f000 80a2 	beq.w	800e6fa <_vfiprintf_r+0x20e>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5c0:	f10a 0a01 	add.w	sl, sl, #1
 800e5c4:	9304      	str	r3, [sp, #16]
 800e5c6:	9307      	str	r3, [sp, #28]
 800e5c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5cc:	931a      	str	r3, [sp, #104]	; 0x68
 800e5ce:	4654      	mov	r4, sl
 800e5d0:	2205      	movs	r2, #5
 800e5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5d6:	4858      	ldr	r0, [pc, #352]	; (800e738 <_vfiprintf_r+0x24c>)
 800e5d8:	f7f1 fe1a 	bl	8000210 <memchr>
 800e5dc:	9a04      	ldr	r2, [sp, #16]
 800e5de:	b9d8      	cbnz	r0, 800e618 <_vfiprintf_r+0x12c>
 800e5e0:	06d1      	lsls	r1, r2, #27
 800e5e2:	bf44      	itt	mi
 800e5e4:	2320      	movmi	r3, #32
 800e5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5ea:	0713      	lsls	r3, r2, #28
 800e5ec:	bf44      	itt	mi
 800e5ee:	232b      	movmi	r3, #43	; 0x2b
 800e5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5fa:	d015      	beq.n	800e628 <_vfiprintf_r+0x13c>
 800e5fc:	9a07      	ldr	r2, [sp, #28]
 800e5fe:	4654      	mov	r4, sl
 800e600:	2000      	movs	r0, #0
 800e602:	f04f 0c0a 	mov.w	ip, #10
 800e606:	4621      	mov	r1, r4
 800e608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e60c:	3b30      	subs	r3, #48	; 0x30
 800e60e:	2b09      	cmp	r3, #9
 800e610:	d94e      	bls.n	800e6b0 <_vfiprintf_r+0x1c4>
 800e612:	b1b0      	cbz	r0, 800e642 <_vfiprintf_r+0x156>
 800e614:	9207      	str	r2, [sp, #28]
 800e616:	e014      	b.n	800e642 <_vfiprintf_r+0x156>
 800e618:	eba0 0308 	sub.w	r3, r0, r8
 800e61c:	fa09 f303 	lsl.w	r3, r9, r3
 800e620:	4313      	orrs	r3, r2
 800e622:	9304      	str	r3, [sp, #16]
 800e624:	46a2      	mov	sl, r4
 800e626:	e7d2      	b.n	800e5ce <_vfiprintf_r+0xe2>
 800e628:	9b03      	ldr	r3, [sp, #12]
 800e62a:	1d19      	adds	r1, r3, #4
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	9103      	str	r1, [sp, #12]
 800e630:	2b00      	cmp	r3, #0
 800e632:	bfbb      	ittet	lt
 800e634:	425b      	neglt	r3, r3
 800e636:	f042 0202 	orrlt.w	r2, r2, #2
 800e63a:	9307      	strge	r3, [sp, #28]
 800e63c:	9307      	strlt	r3, [sp, #28]
 800e63e:	bfb8      	it	lt
 800e640:	9204      	strlt	r2, [sp, #16]
 800e642:	7823      	ldrb	r3, [r4, #0]
 800e644:	2b2e      	cmp	r3, #46	; 0x2e
 800e646:	d10c      	bne.n	800e662 <_vfiprintf_r+0x176>
 800e648:	7863      	ldrb	r3, [r4, #1]
 800e64a:	2b2a      	cmp	r3, #42	; 0x2a
 800e64c:	d135      	bne.n	800e6ba <_vfiprintf_r+0x1ce>
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	1d1a      	adds	r2, r3, #4
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	9203      	str	r2, [sp, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	bfb8      	it	lt
 800e65a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e65e:	3402      	adds	r4, #2
 800e660:	9305      	str	r3, [sp, #20]
 800e662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e748 <_vfiprintf_r+0x25c>
 800e666:	7821      	ldrb	r1, [r4, #0]
 800e668:	2203      	movs	r2, #3
 800e66a:	4650      	mov	r0, sl
 800e66c:	f7f1 fdd0 	bl	8000210 <memchr>
 800e670:	b140      	cbz	r0, 800e684 <_vfiprintf_r+0x198>
 800e672:	2340      	movs	r3, #64	; 0x40
 800e674:	eba0 000a 	sub.w	r0, r0, sl
 800e678:	fa03 f000 	lsl.w	r0, r3, r0
 800e67c:	9b04      	ldr	r3, [sp, #16]
 800e67e:	4303      	orrs	r3, r0
 800e680:	3401      	adds	r4, #1
 800e682:	9304      	str	r3, [sp, #16]
 800e684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e688:	482c      	ldr	r0, [pc, #176]	; (800e73c <_vfiprintf_r+0x250>)
 800e68a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e68e:	2206      	movs	r2, #6
 800e690:	f7f1 fdbe 	bl	8000210 <memchr>
 800e694:	2800      	cmp	r0, #0
 800e696:	d03f      	beq.n	800e718 <_vfiprintf_r+0x22c>
 800e698:	4b29      	ldr	r3, [pc, #164]	; (800e740 <_vfiprintf_r+0x254>)
 800e69a:	bb1b      	cbnz	r3, 800e6e4 <_vfiprintf_r+0x1f8>
 800e69c:	9b03      	ldr	r3, [sp, #12]
 800e69e:	3307      	adds	r3, #7
 800e6a0:	f023 0307 	bic.w	r3, r3, #7
 800e6a4:	3308      	adds	r3, #8
 800e6a6:	9303      	str	r3, [sp, #12]
 800e6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6aa:	443b      	add	r3, r7
 800e6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ae:	e767      	b.n	800e580 <_vfiprintf_r+0x94>
 800e6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6b4:	460c      	mov	r4, r1
 800e6b6:	2001      	movs	r0, #1
 800e6b8:	e7a5      	b.n	800e606 <_vfiprintf_r+0x11a>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	3401      	adds	r4, #1
 800e6be:	9305      	str	r3, [sp, #20]
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	f04f 0c0a 	mov.w	ip, #10
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6cc:	3a30      	subs	r2, #48	; 0x30
 800e6ce:	2a09      	cmp	r2, #9
 800e6d0:	d903      	bls.n	800e6da <_vfiprintf_r+0x1ee>
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d0c5      	beq.n	800e662 <_vfiprintf_r+0x176>
 800e6d6:	9105      	str	r1, [sp, #20]
 800e6d8:	e7c3      	b.n	800e662 <_vfiprintf_r+0x176>
 800e6da:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6de:	4604      	mov	r4, r0
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e7f0      	b.n	800e6c6 <_vfiprintf_r+0x1da>
 800e6e4:	ab03      	add	r3, sp, #12
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	462a      	mov	r2, r5
 800e6ea:	4b16      	ldr	r3, [pc, #88]	; (800e744 <_vfiprintf_r+0x258>)
 800e6ec:	a904      	add	r1, sp, #16
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f7fd fcc2 	bl	800c078 <_printf_float>
 800e6f4:	4607      	mov	r7, r0
 800e6f6:	1c78      	adds	r0, r7, #1
 800e6f8:	d1d6      	bne.n	800e6a8 <_vfiprintf_r+0x1bc>
 800e6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6fc:	07d9      	lsls	r1, r3, #31
 800e6fe:	d405      	bmi.n	800e70c <_vfiprintf_r+0x220>
 800e700:	89ab      	ldrh	r3, [r5, #12]
 800e702:	059a      	lsls	r2, r3, #22
 800e704:	d402      	bmi.n	800e70c <_vfiprintf_r+0x220>
 800e706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e708:	f7fd fb6a 	bl	800bde0 <__retarget_lock_release_recursive>
 800e70c:	89ab      	ldrh	r3, [r5, #12]
 800e70e:	065b      	lsls	r3, r3, #25
 800e710:	f53f af12 	bmi.w	800e538 <_vfiprintf_r+0x4c>
 800e714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e716:	e711      	b.n	800e53c <_vfiprintf_r+0x50>
 800e718:	ab03      	add	r3, sp, #12
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	462a      	mov	r2, r5
 800e71e:	4b09      	ldr	r3, [pc, #36]	; (800e744 <_vfiprintf_r+0x258>)
 800e720:	a904      	add	r1, sp, #16
 800e722:	4630      	mov	r0, r6
 800e724:	f7fd ff4c 	bl	800c5c0 <_printf_i>
 800e728:	e7e4      	b.n	800e6f4 <_vfiprintf_r+0x208>
 800e72a:	bf00      	nop
 800e72c:	0800ec38 	.word	0x0800ec38
 800e730:	0800ec58 	.word	0x0800ec58
 800e734:	0800ec18 	.word	0x0800ec18
 800e738:	0800ee9c 	.word	0x0800ee9c
 800e73c:	0800eea6 	.word	0x0800eea6
 800e740:	0800c079 	.word	0x0800c079
 800e744:	0800e4c9 	.word	0x0800e4c9
 800e748:	0800eea2 	.word	0x0800eea2

0800e74c <__swbuf_r>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	460e      	mov	r6, r1
 800e750:	4614      	mov	r4, r2
 800e752:	4605      	mov	r5, r0
 800e754:	b118      	cbz	r0, 800e75e <__swbuf_r+0x12>
 800e756:	6983      	ldr	r3, [r0, #24]
 800e758:	b90b      	cbnz	r3, 800e75e <__swbuf_r+0x12>
 800e75a:	f7fd fa7d 	bl	800bc58 <__sinit>
 800e75e:	4b21      	ldr	r3, [pc, #132]	; (800e7e4 <__swbuf_r+0x98>)
 800e760:	429c      	cmp	r4, r3
 800e762:	d12b      	bne.n	800e7bc <__swbuf_r+0x70>
 800e764:	686c      	ldr	r4, [r5, #4]
 800e766:	69a3      	ldr	r3, [r4, #24]
 800e768:	60a3      	str	r3, [r4, #8]
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	071a      	lsls	r2, r3, #28
 800e76e:	d52f      	bpl.n	800e7d0 <__swbuf_r+0x84>
 800e770:	6923      	ldr	r3, [r4, #16]
 800e772:	b36b      	cbz	r3, 800e7d0 <__swbuf_r+0x84>
 800e774:	6923      	ldr	r3, [r4, #16]
 800e776:	6820      	ldr	r0, [r4, #0]
 800e778:	1ac0      	subs	r0, r0, r3
 800e77a:	6963      	ldr	r3, [r4, #20]
 800e77c:	b2f6      	uxtb	r6, r6
 800e77e:	4283      	cmp	r3, r0
 800e780:	4637      	mov	r7, r6
 800e782:	dc04      	bgt.n	800e78e <__swbuf_r+0x42>
 800e784:	4621      	mov	r1, r4
 800e786:	4628      	mov	r0, r5
 800e788:	f7ff f842 	bl	800d810 <_fflush_r>
 800e78c:	bb30      	cbnz	r0, 800e7dc <__swbuf_r+0x90>
 800e78e:	68a3      	ldr	r3, [r4, #8]
 800e790:	3b01      	subs	r3, #1
 800e792:	60a3      	str	r3, [r4, #8]
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	6022      	str	r2, [r4, #0]
 800e79a:	701e      	strb	r6, [r3, #0]
 800e79c:	6963      	ldr	r3, [r4, #20]
 800e79e:	3001      	adds	r0, #1
 800e7a0:	4283      	cmp	r3, r0
 800e7a2:	d004      	beq.n	800e7ae <__swbuf_r+0x62>
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	07db      	lsls	r3, r3, #31
 800e7a8:	d506      	bpl.n	800e7b8 <__swbuf_r+0x6c>
 800e7aa:	2e0a      	cmp	r6, #10
 800e7ac:	d104      	bne.n	800e7b8 <__swbuf_r+0x6c>
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f7ff f82d 	bl	800d810 <_fflush_r>
 800e7b6:	b988      	cbnz	r0, 800e7dc <__swbuf_r+0x90>
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7bc:	4b0a      	ldr	r3, [pc, #40]	; (800e7e8 <__swbuf_r+0x9c>)
 800e7be:	429c      	cmp	r4, r3
 800e7c0:	d101      	bne.n	800e7c6 <__swbuf_r+0x7a>
 800e7c2:	68ac      	ldr	r4, [r5, #8]
 800e7c4:	e7cf      	b.n	800e766 <__swbuf_r+0x1a>
 800e7c6:	4b09      	ldr	r3, [pc, #36]	; (800e7ec <__swbuf_r+0xa0>)
 800e7c8:	429c      	cmp	r4, r3
 800e7ca:	bf08      	it	eq
 800e7cc:	68ec      	ldreq	r4, [r5, #12]
 800e7ce:	e7ca      	b.n	800e766 <__swbuf_r+0x1a>
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f000 f81a 	bl	800e80c <__swsetup_r>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d0cb      	beq.n	800e774 <__swbuf_r+0x28>
 800e7dc:	f04f 37ff 	mov.w	r7, #4294967295
 800e7e0:	e7ea      	b.n	800e7b8 <__swbuf_r+0x6c>
 800e7e2:	bf00      	nop
 800e7e4:	0800ec38 	.word	0x0800ec38
 800e7e8:	0800ec58 	.word	0x0800ec58
 800e7ec:	0800ec18 	.word	0x0800ec18

0800e7f0 <__ascii_wctomb>:
 800e7f0:	b149      	cbz	r1, 800e806 <__ascii_wctomb+0x16>
 800e7f2:	2aff      	cmp	r2, #255	; 0xff
 800e7f4:	bf85      	ittet	hi
 800e7f6:	238a      	movhi	r3, #138	; 0x8a
 800e7f8:	6003      	strhi	r3, [r0, #0]
 800e7fa:	700a      	strbls	r2, [r1, #0]
 800e7fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800e800:	bf98      	it	ls
 800e802:	2001      	movls	r0, #1
 800e804:	4770      	bx	lr
 800e806:	4608      	mov	r0, r1
 800e808:	4770      	bx	lr
	...

0800e80c <__swsetup_r>:
 800e80c:	4b32      	ldr	r3, [pc, #200]	; (800e8d8 <__swsetup_r+0xcc>)
 800e80e:	b570      	push	{r4, r5, r6, lr}
 800e810:	681d      	ldr	r5, [r3, #0]
 800e812:	4606      	mov	r6, r0
 800e814:	460c      	mov	r4, r1
 800e816:	b125      	cbz	r5, 800e822 <__swsetup_r+0x16>
 800e818:	69ab      	ldr	r3, [r5, #24]
 800e81a:	b913      	cbnz	r3, 800e822 <__swsetup_r+0x16>
 800e81c:	4628      	mov	r0, r5
 800e81e:	f7fd fa1b 	bl	800bc58 <__sinit>
 800e822:	4b2e      	ldr	r3, [pc, #184]	; (800e8dc <__swsetup_r+0xd0>)
 800e824:	429c      	cmp	r4, r3
 800e826:	d10f      	bne.n	800e848 <__swsetup_r+0x3c>
 800e828:	686c      	ldr	r4, [r5, #4]
 800e82a:	89a3      	ldrh	r3, [r4, #12]
 800e82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e830:	0719      	lsls	r1, r3, #28
 800e832:	d42c      	bmi.n	800e88e <__swsetup_r+0x82>
 800e834:	06dd      	lsls	r5, r3, #27
 800e836:	d411      	bmi.n	800e85c <__swsetup_r+0x50>
 800e838:	2309      	movs	r3, #9
 800e83a:	6033      	str	r3, [r6, #0]
 800e83c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e840:	81a3      	strh	r3, [r4, #12]
 800e842:	f04f 30ff 	mov.w	r0, #4294967295
 800e846:	e03e      	b.n	800e8c6 <__swsetup_r+0xba>
 800e848:	4b25      	ldr	r3, [pc, #148]	; (800e8e0 <__swsetup_r+0xd4>)
 800e84a:	429c      	cmp	r4, r3
 800e84c:	d101      	bne.n	800e852 <__swsetup_r+0x46>
 800e84e:	68ac      	ldr	r4, [r5, #8]
 800e850:	e7eb      	b.n	800e82a <__swsetup_r+0x1e>
 800e852:	4b24      	ldr	r3, [pc, #144]	; (800e8e4 <__swsetup_r+0xd8>)
 800e854:	429c      	cmp	r4, r3
 800e856:	bf08      	it	eq
 800e858:	68ec      	ldreq	r4, [r5, #12]
 800e85a:	e7e6      	b.n	800e82a <__swsetup_r+0x1e>
 800e85c:	0758      	lsls	r0, r3, #29
 800e85e:	d512      	bpl.n	800e886 <__swsetup_r+0x7a>
 800e860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e862:	b141      	cbz	r1, 800e876 <__swsetup_r+0x6a>
 800e864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e868:	4299      	cmp	r1, r3
 800e86a:	d002      	beq.n	800e872 <__swsetup_r+0x66>
 800e86c:	4630      	mov	r0, r6
 800e86e:	f7ff fbcf 	bl	800e010 <_free_r>
 800e872:	2300      	movs	r3, #0
 800e874:	6363      	str	r3, [r4, #52]	; 0x34
 800e876:	89a3      	ldrh	r3, [r4, #12]
 800e878:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e87c:	81a3      	strh	r3, [r4, #12]
 800e87e:	2300      	movs	r3, #0
 800e880:	6063      	str	r3, [r4, #4]
 800e882:	6923      	ldr	r3, [r4, #16]
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	89a3      	ldrh	r3, [r4, #12]
 800e888:	f043 0308 	orr.w	r3, r3, #8
 800e88c:	81a3      	strh	r3, [r4, #12]
 800e88e:	6923      	ldr	r3, [r4, #16]
 800e890:	b94b      	cbnz	r3, 800e8a6 <__swsetup_r+0x9a>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e89c:	d003      	beq.n	800e8a6 <__swsetup_r+0x9a>
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f000 f84d 	bl	800e940 <__smakebuf_r>
 800e8a6:	89a0      	ldrh	r0, [r4, #12]
 800e8a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8ac:	f010 0301 	ands.w	r3, r0, #1
 800e8b0:	d00a      	beq.n	800e8c8 <__swsetup_r+0xbc>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60a3      	str	r3, [r4, #8]
 800e8b6:	6963      	ldr	r3, [r4, #20]
 800e8b8:	425b      	negs	r3, r3
 800e8ba:	61a3      	str	r3, [r4, #24]
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	b943      	cbnz	r3, 800e8d2 <__swsetup_r+0xc6>
 800e8c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8c4:	d1ba      	bne.n	800e83c <__swsetup_r+0x30>
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}
 800e8c8:	0781      	lsls	r1, r0, #30
 800e8ca:	bf58      	it	pl
 800e8cc:	6963      	ldrpl	r3, [r4, #20]
 800e8ce:	60a3      	str	r3, [r4, #8]
 800e8d0:	e7f4      	b.n	800e8bc <__swsetup_r+0xb0>
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	e7f7      	b.n	800e8c6 <__swsetup_r+0xba>
 800e8d6:	bf00      	nop
 800e8d8:	20000010 	.word	0x20000010
 800e8dc:	0800ec38 	.word	0x0800ec38
 800e8e0:	0800ec58 	.word	0x0800ec58
 800e8e4:	0800ec18 	.word	0x0800ec18

0800e8e8 <abort>:
 800e8e8:	b508      	push	{r3, lr}
 800e8ea:	2006      	movs	r0, #6
 800e8ec:	f000 f898 	bl	800ea20 <raise>
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	f7f3 f9d9 	bl	8001ca8 <_exit>

0800e8f6 <__swhatbuf_r>:
 800e8f6:	b570      	push	{r4, r5, r6, lr}
 800e8f8:	460e      	mov	r6, r1
 800e8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8fe:	2900      	cmp	r1, #0
 800e900:	b096      	sub	sp, #88	; 0x58
 800e902:	4614      	mov	r4, r2
 800e904:	461d      	mov	r5, r3
 800e906:	da08      	bge.n	800e91a <__swhatbuf_r+0x24>
 800e908:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	602a      	str	r2, [r5, #0]
 800e910:	061a      	lsls	r2, r3, #24
 800e912:	d410      	bmi.n	800e936 <__swhatbuf_r+0x40>
 800e914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e918:	e00e      	b.n	800e938 <__swhatbuf_r+0x42>
 800e91a:	466a      	mov	r2, sp
 800e91c:	f000 f89c 	bl	800ea58 <_fstat_r>
 800e920:	2800      	cmp	r0, #0
 800e922:	dbf1      	blt.n	800e908 <__swhatbuf_r+0x12>
 800e924:	9a01      	ldr	r2, [sp, #4]
 800e926:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e92a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e92e:	425a      	negs	r2, r3
 800e930:	415a      	adcs	r2, r3
 800e932:	602a      	str	r2, [r5, #0]
 800e934:	e7ee      	b.n	800e914 <__swhatbuf_r+0x1e>
 800e936:	2340      	movs	r3, #64	; 0x40
 800e938:	2000      	movs	r0, #0
 800e93a:	6023      	str	r3, [r4, #0]
 800e93c:	b016      	add	sp, #88	; 0x58
 800e93e:	bd70      	pop	{r4, r5, r6, pc}

0800e940 <__smakebuf_r>:
 800e940:	898b      	ldrh	r3, [r1, #12]
 800e942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e944:	079d      	lsls	r5, r3, #30
 800e946:	4606      	mov	r6, r0
 800e948:	460c      	mov	r4, r1
 800e94a:	d507      	bpl.n	800e95c <__smakebuf_r+0x1c>
 800e94c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	6123      	str	r3, [r4, #16]
 800e954:	2301      	movs	r3, #1
 800e956:	6163      	str	r3, [r4, #20]
 800e958:	b002      	add	sp, #8
 800e95a:	bd70      	pop	{r4, r5, r6, pc}
 800e95c:	ab01      	add	r3, sp, #4
 800e95e:	466a      	mov	r2, sp
 800e960:	f7ff ffc9 	bl	800e8f6 <__swhatbuf_r>
 800e964:	9900      	ldr	r1, [sp, #0]
 800e966:	4605      	mov	r5, r0
 800e968:	4630      	mov	r0, r6
 800e96a:	f7fd fa71 	bl	800be50 <_malloc_r>
 800e96e:	b948      	cbnz	r0, 800e984 <__smakebuf_r+0x44>
 800e970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e974:	059a      	lsls	r2, r3, #22
 800e976:	d4ef      	bmi.n	800e958 <__smakebuf_r+0x18>
 800e978:	f023 0303 	bic.w	r3, r3, #3
 800e97c:	f043 0302 	orr.w	r3, r3, #2
 800e980:	81a3      	strh	r3, [r4, #12]
 800e982:	e7e3      	b.n	800e94c <__smakebuf_r+0xc>
 800e984:	4b0d      	ldr	r3, [pc, #52]	; (800e9bc <__smakebuf_r+0x7c>)
 800e986:	62b3      	str	r3, [r6, #40]	; 0x28
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	6020      	str	r0, [r4, #0]
 800e98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e990:	81a3      	strh	r3, [r4, #12]
 800e992:	9b00      	ldr	r3, [sp, #0]
 800e994:	6163      	str	r3, [r4, #20]
 800e996:	9b01      	ldr	r3, [sp, #4]
 800e998:	6120      	str	r0, [r4, #16]
 800e99a:	b15b      	cbz	r3, 800e9b4 <__smakebuf_r+0x74>
 800e99c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f000 f86b 	bl	800ea7c <_isatty_r>
 800e9a6:	b128      	cbz	r0, 800e9b4 <__smakebuf_r+0x74>
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	f023 0303 	bic.w	r3, r3, #3
 800e9ae:	f043 0301 	orr.w	r3, r3, #1
 800e9b2:	81a3      	strh	r3, [r4, #12]
 800e9b4:	89a0      	ldrh	r0, [r4, #12]
 800e9b6:	4305      	orrs	r5, r0
 800e9b8:	81a5      	strh	r5, [r4, #12]
 800e9ba:	e7cd      	b.n	800e958 <__smakebuf_r+0x18>
 800e9bc:	0800bbf1 	.word	0x0800bbf1

0800e9c0 <_malloc_usable_size_r>:
 800e9c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9c4:	1f18      	subs	r0, r3, #4
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	bfbc      	itt	lt
 800e9ca:	580b      	ldrlt	r3, [r1, r0]
 800e9cc:	18c0      	addlt	r0, r0, r3
 800e9ce:	4770      	bx	lr

0800e9d0 <_raise_r>:
 800e9d0:	291f      	cmp	r1, #31
 800e9d2:	b538      	push	{r3, r4, r5, lr}
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	d904      	bls.n	800e9e4 <_raise_r+0x14>
 800e9da:	2316      	movs	r3, #22
 800e9dc:	6003      	str	r3, [r0, #0]
 800e9de:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e9e6:	b112      	cbz	r2, 800e9ee <_raise_r+0x1e>
 800e9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9ec:	b94b      	cbnz	r3, 800ea02 <_raise_r+0x32>
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f000 f830 	bl	800ea54 <_getpid_r>
 800e9f4:	462a      	mov	r2, r5
 800e9f6:	4601      	mov	r1, r0
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9fe:	f000 b817 	b.w	800ea30 <_kill_r>
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d00a      	beq.n	800ea1c <_raise_r+0x4c>
 800ea06:	1c59      	adds	r1, r3, #1
 800ea08:	d103      	bne.n	800ea12 <_raise_r+0x42>
 800ea0a:	2316      	movs	r3, #22
 800ea0c:	6003      	str	r3, [r0, #0]
 800ea0e:	2001      	movs	r0, #1
 800ea10:	e7e7      	b.n	800e9e2 <_raise_r+0x12>
 800ea12:	2400      	movs	r4, #0
 800ea14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea18:	4628      	mov	r0, r5
 800ea1a:	4798      	blx	r3
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	e7e0      	b.n	800e9e2 <_raise_r+0x12>

0800ea20 <raise>:
 800ea20:	4b02      	ldr	r3, [pc, #8]	; (800ea2c <raise+0xc>)
 800ea22:	4601      	mov	r1, r0
 800ea24:	6818      	ldr	r0, [r3, #0]
 800ea26:	f7ff bfd3 	b.w	800e9d0 <_raise_r>
 800ea2a:	bf00      	nop
 800ea2c:	20000010 	.word	0x20000010

0800ea30 <_kill_r>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	4d07      	ldr	r5, [pc, #28]	; (800ea50 <_kill_r+0x20>)
 800ea34:	2300      	movs	r3, #0
 800ea36:	4604      	mov	r4, r0
 800ea38:	4608      	mov	r0, r1
 800ea3a:	4611      	mov	r1, r2
 800ea3c:	602b      	str	r3, [r5, #0]
 800ea3e:	f7f3 f923 	bl	8001c88 <_kill>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	d102      	bne.n	800ea4c <_kill_r+0x1c>
 800ea46:	682b      	ldr	r3, [r5, #0]
 800ea48:	b103      	cbz	r3, 800ea4c <_kill_r+0x1c>
 800ea4a:	6023      	str	r3, [r4, #0]
 800ea4c:	bd38      	pop	{r3, r4, r5, pc}
 800ea4e:	bf00      	nop
 800ea50:	200022e4 	.word	0x200022e4

0800ea54 <_getpid_r>:
 800ea54:	f7f3 b910 	b.w	8001c78 <_getpid>

0800ea58 <_fstat_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4d07      	ldr	r5, [pc, #28]	; (800ea78 <_fstat_r+0x20>)
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	4608      	mov	r0, r1
 800ea62:	4611      	mov	r1, r2
 800ea64:	602b      	str	r3, [r5, #0]
 800ea66:	f7f3 f96e 	bl	8001d46 <_fstat>
 800ea6a:	1c43      	adds	r3, r0, #1
 800ea6c:	d102      	bne.n	800ea74 <_fstat_r+0x1c>
 800ea6e:	682b      	ldr	r3, [r5, #0]
 800ea70:	b103      	cbz	r3, 800ea74 <_fstat_r+0x1c>
 800ea72:	6023      	str	r3, [r4, #0]
 800ea74:	bd38      	pop	{r3, r4, r5, pc}
 800ea76:	bf00      	nop
 800ea78:	200022e4 	.word	0x200022e4

0800ea7c <_isatty_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	4d06      	ldr	r5, [pc, #24]	; (800ea98 <_isatty_r+0x1c>)
 800ea80:	2300      	movs	r3, #0
 800ea82:	4604      	mov	r4, r0
 800ea84:	4608      	mov	r0, r1
 800ea86:	602b      	str	r3, [r5, #0]
 800ea88:	f7f3 f96d 	bl	8001d66 <_isatty>
 800ea8c:	1c43      	adds	r3, r0, #1
 800ea8e:	d102      	bne.n	800ea96 <_isatty_r+0x1a>
 800ea90:	682b      	ldr	r3, [r5, #0]
 800ea92:	b103      	cbz	r3, 800ea96 <_isatty_r+0x1a>
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	bd38      	pop	{r3, r4, r5, pc}
 800ea98:	200022e4 	.word	0x200022e4

0800ea9c <_init>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	bf00      	nop
 800eaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaa2:	bc08      	pop	{r3}
 800eaa4:	469e      	mov	lr, r3
 800eaa6:	4770      	bx	lr

0800eaa8 <_fini>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	bf00      	nop
 800eaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaae:	bc08      	pop	{r3}
 800eab0:	469e      	mov	lr, r3
 800eab2:	4770      	bx	lr
