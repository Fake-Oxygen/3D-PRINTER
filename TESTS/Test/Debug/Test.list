
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a368  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800a528  0800a528  0001a528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9b4  0800a9b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9bc  0800a9bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  200001dc  0800aba0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  0800aba0  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ed7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd9  00000000  00000000  000370e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00039dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e973  00000000  00000000  0003c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ef5  00000000  00000000  0006ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e8f6  00000000  00000000  0007fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e2f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006384  00000000  00000000  0019e348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a510 	.word	0x0800a510

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800a510 	.word	0x0800a510

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b096      	sub	sp, #88	; 0x58
 8000ee4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fd56 	bl	8001996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f8dd 	bl	80010a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eee:	f000 f93d 	bl	800116c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fa57 	bl	80013a4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef6:	f000 fa2b 	bl	8001350 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000efa:	f000 f967 	bl	80011cc <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000efe:	f000 f9db 	bl	80012b8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int pin;
  double val, resistance, temp, A,B,C;
  A = 0.001283927;
 8000f02:	a363      	add	r3, pc, #396	; (adr r3, 8001090 <main+0x1b0>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  B = 0.000238231;
 8000f0c:	a362      	add	r3, pc, #392	; (adr r3, 8001098 <main+0x1b8>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  C = 8.45802E-08;
 8000f16:	a362      	add	r3, pc, #392	; (adr r3, 80010a0 <main+0x1c0>)
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000f20:	4857      	ldr	r0, [pc, #348]	; (8001080 <main+0x1a0>)
 8000f22:	f001 f919 	bl	8002158 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f26:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2a:	4855      	ldr	r0, [pc, #340]	; (8001080 <main+0x1a0>)
 8000f2c:	f001 f9ce 	bl	80022cc <HAL_ADC_PollForConversion>
	      raw = HAL_ADC_GetValue(&hadc1);
 8000f30:	4853      	ldr	r0, [pc, #332]	; (8001080 <main+0x1a0>)
 8000f32:	f001 faa3 	bl	800247c <HAL_ADC_GetValue>
 8000f36:	4603      	mov	r3, r0
 8000f38:	85fb      	strh	r3, [r7, #46]	; 0x2e
	      val= (3.3/4096)*raw;
 8000f3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fb09 	bl	8000554 <__aeabi_i2d>
 8000f42:	a345      	add	r3, pc, #276	; (adr r3, 8001058 <main+0x178>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb6e 	bl	8000628 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	e9c7 2308 	strd	r2, r3, [r7, #32]
	      resistance = val/((3.3-val)/4700);
 8000f54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f58:	a141      	add	r1, pc, #260	; (adr r1, 8001060 <main+0x180>)
 8000f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f5e:	f7ff f9ab 	bl	80002b8 <__aeabi_dsub>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	a33f      	add	r3, pc, #252	; (adr r3, 8001068 <main+0x188>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fc84 	bl	800087c <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f7c:	f7ff fc7e 	bl	800087c <__aeabi_ddiv>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	e9c7 2306 	strd	r2, r3, [r7, #24]
	      temp = 1/(A+B*log(resistance)+C*pow(log(resistance),3))-272.15;
 8000f88:	ed97 0b06 	vldr	d0, [r7, #24]
 8000f8c:	f005 fa8c 	bl	80064a8 <log>
 8000f90:	ec51 0b10 	vmov	r0, r1, d0
 8000f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f98:	f7ff fb46 	bl	8000628 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000fa8:	f7ff f988 	bl	80002bc <__adddf3>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	ed97 0b06 	vldr	d0, [r7, #24]
 8000fb8:	f005 fa76 	bl	80064a8 <log>
 8000fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc0:	eef0 7a60 	vmov.f32	s15, s1
 8000fc4:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001070 <main+0x190>
 8000fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fcc:	eef0 0a67 	vmov.f32	s1, s15
 8000fd0:	f005 faa8 	bl	8006524 <pow>
 8000fd4:	ec51 0b10 	vmov	r0, r1, d0
 8000fd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fdc:	f7ff fb24 	bl	8000628 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	f7ff f968 	bl	80002bc <__adddf3>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	f04f 0000 	mov.w	r0, #0
 8000ff4:	4923      	ldr	r1, [pc, #140]	; (8001084 <main+0x1a4>)
 8000ff6:	f7ff fc41 	bl	800087c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	a31d      	add	r3, pc, #116	; (adr r3, 8001078 <main+0x198>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff f956 	bl	80002b8 <__aeabi_dsub>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
	      sprintf(msg, "%hu , %f , %f\r\n", raw, temp, resistance);
 8001014:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001016:	1d38      	adds	r0, r7, #4
 8001018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800101c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001020:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001024:	e9cd 2300 	strd	r2, r3, [sp]
 8001028:	460a      	mov	r2, r1
 800102a:	4917      	ldr	r1, [pc, #92]	; (8001088 <main+0x1a8>)
 800102c:	f006 fff6 	bl	800801c <siprintf>
	         HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f8e4 	bl	8000200 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <main+0x1ac>)
 8001044:	f004 f92e 	bl	80052a4 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8001048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104c:	f000 fd18 	bl	8001a80 <HAL_Delay>
  {
 8001050:	e766      	b.n	8000f20 <main+0x40>
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	66666666 	.word	0x66666666
 800105c:	3f4a6666 	.word	0x3f4a6666
 8001060:	66666666 	.word	0x66666666
 8001064:	400a6666 	.word	0x400a6666
 8001068:	00000000 	.word	0x00000000
 800106c:	40b25c00 	.word	0x40b25c00
 8001070:	00000000 	.word	0x00000000
 8001074:	40080000 	.word	0x40080000
 8001078:	66666666 	.word	0x66666666
 800107c:	40710266 	.word	0x40710266
 8001080:	200001f8 	.word	0x200001f8
 8001084:	3ff00000 	.word	0x3ff00000
 8001088:	0800a528 	.word	0x0800a528
 800108c:	20000260 	.word	0x20000260
 8001090:	1e6dcbad 	.word	0x1e6dcbad
 8001094:	3f55092e 	.word	0x3f55092e
 8001098:	b5318338 	.word	0xb5318338
 800109c:	3f2f39b4 	.word	0x3f2f39b4
 80010a0:	9d33f2b3 	.word	0x9d33f2b3
 80010a4:	3e76b44e 	.word	0x3e76b44e

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b098      	sub	sp, #96	; 0x60
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2248      	movs	r2, #72	; 0x48
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 fb3e 	bl	8007738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f002 fb38 	bl	8003740 <HAL_PWREx_ControlVoltageScaling>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010d6:	f000 f9fd 	bl	80014d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010da:	f002 fb01 	bl	80036e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <SystemClock_Config+0xc0>)
 80010e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <SystemClock_Config+0xc0>)
 80010e6:	f023 0318 	bic.w	r3, r3, #24
 80010ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010ee:	2314      	movs	r3, #20
 80010f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010fe:	2360      	movs	r3, #96	; 0x60
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001106:	2301      	movs	r3, #1
 8001108:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800110e:	233c      	movs	r3, #60	; 0x3c
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fbd0 	bl	80038c8 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800112e:	f000 f9d1 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2105      	movs	r1, #5
 800114c:	4618      	mov	r0, r3
 800114e:	f003 f837 	bl	80041c0 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001158:	f000 f9bc 	bl	80014d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800115c:	f003 fe5a 	bl	8004e14 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001160:	bf00      	nop
 8001162:	3760      	adds	r7, #96	; 0x60
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000

0800116c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0a6      	sub	sp, #152	; 0x98
 8001170:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2298      	movs	r2, #152	; 0x98
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fadd 	bl	8007738 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800117e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001182:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800118c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001190:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800119a:	2318      	movs	r3, #24
 800119c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80011aa:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80011ae:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fac2 	bl	800473c <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80011be:	f000 f989 	bl	80014d4 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3798      	adds	r7, #152	; 0x98
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <MX_ADC1_Init+0xe0>)
 80011f0:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <MX_ADC1_Init+0xe4>)
 80011f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <MX_ADC1_Init+0xe0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011fa:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_ADC1_Init+0xe0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <MX_ADC1_Init+0xe0>)
 800120e:	2204      	movs	r2, #4
 8001210:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001214:	2200      	movs	r2, #0
 8001216:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_ADC1_Init+0xe0>)
 800121a:	2200      	movs	r2, #0
 800121c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001220:	2201      	movs	r2, #1
 8001222:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ADC1_Init+0xe0>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_ADC1_Init+0xe0>)
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001250:	f000 fe30 	bl	8001eb4 <HAL_ADC_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800125a:	f000 f93b 	bl	80014d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <MX_ADC1_Init+0xe0>)
 800126a:	f001 fdbd 	bl	8002de8 <HAL_ADCEx_MultiModeConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001274:	f000 f92e 	bl	80014d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_ADC1_Init+0xe8>)
 800127a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127c:	2306      	movs	r3, #6
 800127e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001284:	237f      	movs	r3, #127	; 0x7f
 8001286:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001288:	2304      	movs	r3, #4
 800128a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_ADC1_Init+0xe0>)
 8001296:	f001 f8ff 	bl	8002498 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012a0:	f000 f918 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200001f8 	.word	0x200001f8
 80012b0:	50040000 	.word	0x50040000
 80012b4:	04300002 	.word	0x04300002

080012b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012be:	4a23      	ldr	r2, [pc, #140]	; (800134c <MX_LPUART1_UART_Init+0x94>)
 80012c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 8001302:	f003 ff7f 	bl	8005204 <HAL_UART_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800130c:	f000 f8e2 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001310:	2100      	movs	r1, #0
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 8001314:	f004 fd46 	bl	8005da4 <HAL_UARTEx_SetTxFifoThreshold>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800131e:	f000 f8d9 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001322:	2100      	movs	r1, #0
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 8001326:	f004 fd7b 	bl	8005e20 <HAL_UARTEx_SetRxFifoThreshold>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001330:	f000 f8d0 	bl	80014d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_LPUART1_UART_Init+0x90>)
 8001336:	f004 fcfc 	bl	8005d32 <HAL_UARTEx_DisableFifoMode>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001340:	f000 f8c8 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000260 	.word	0x20000260
 800134c:	40008000 	.word	0x40008000

08001350 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001356:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800135a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800135e:	2206      	movs	r2, #6
 8001360:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001364:	2202      	movs	r2, #2
 8001366:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800136a:	2201      	movs	r2, #1
 800136c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800137c:	2201      	movs	r2, #1
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001388:	2201      	movs	r2, #1
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800138e:	f002 f85f 	bl	8003450 <HAL_PCD_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 f89c 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002f0 	.word	0x200002f0

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a41      	ldr	r2, [pc, #260]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a35      	ldr	r2, [pc, #212]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MX_GPIO_Init+0x120>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <MX_GPIO_Init+0x120>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <MX_GPIO_Init+0x120>)
 8001408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <MX_GPIO_Init+0x120>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800141a:	f002 fa45 	bl	80038a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_GPIO_Init+0x120>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <MX_GPIO_Init+0x120>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_GPIO_Init+0x120>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800143c:	4822      	ldr	r0, [pc, #136]	; (80014c8 <MX_GPIO_Init+0x124>)
 800143e:	f001 ffef 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	4821      	ldr	r0, [pc, #132]	; (80014cc <MX_GPIO_Init+0x128>)
 8001448:	f001 ffea 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001452:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	481b      	ldr	r0, [pc, #108]	; (80014d0 <MX_GPIO_Init+0x12c>)
 8001464:	f001 fe4a 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001468:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <MX_GPIO_Init+0x124>)
 8001482:	f001 fe3b 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001486:	2320      	movs	r3, #32
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_GPIO_Init+0x128>)
 800149a:	f001 fe2f 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_GPIO_Init+0x128>)
 80014b6:	f001 fe21 	bl	80030fc <HAL_GPIO_Init>

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48001800 	.word	0x48001800
 80014d0:	48000800 	.word	0x48000800

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6613      	str	r3, [r2, #96]	; 0x60
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a15      	ldr	r2, [pc, #84]	; (800159c <HAL_ADC_MspInit+0x74>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d123      	bne.n	8001592 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_ADC_MspInit+0x78>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_ADC_MspInit+0x78>)
 8001550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_ADC_MspInit+0x78>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_ADC_MspInit+0x78>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_ADC_MspInit+0x78>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_ADC_MspInit+0x78>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800157e:	230b      	movs	r3, #11
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_ADC_MspInit+0x7c>)
 800158e:	f001 fdb5 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	50040000 	.word	0x50040000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000800 	.word	0x48000800

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0b0      	sub	sp, #192	; 0xc0
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2298      	movs	r2, #152	; 0x98
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 f8b5 	bl	8007738 <memset>
  if(huart->Instance==LPUART1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_UART_MspInit+0xb4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d13d      	bne.n	8001654 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015d8:	2320      	movs	r3, #32
 80015da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015dc:	2300      	movs	r3, #0
 80015de:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 f8a9 	bl	800473c <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f0:	f7ff ff70 	bl	80014d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_UART_MspInit+0xb8>)
 80015f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_UART_MspInit+0xb8>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_UART_MspInit+0xb8>)
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_UART_MspInit+0xb8>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_UART_MspInit+0xb8>)
 8001612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0xb8>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001624:	f002 f940 	bl	80038a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001628:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001642:	2308      	movs	r3, #8
 8001644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001648:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_UART_MspInit+0xbc>)
 8001650:	f001 fd54 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37c0      	adds	r7, #192	; 0xc0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40008000 	.word	0x40008000
 8001660:	40021000 	.word	0x40021000
 8001664:	48001800 	.word	0x48001800

08001668 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001688:	d154      	bne.n	8001734 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_PCD_MspInit+0xd4>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_PCD_MspInit+0xd4>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_PCD_MspInit+0xd4>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b4:	230a      	movs	r3, #10
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f001 fd1b 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f001 fd0d 	bl	80030fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_PCD_MspInit+0xd4>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_PCD_MspInit+0xd4>)
 80016e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_PCD_MspInit+0xd4>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_PCD_MspInit+0xd4>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d114      	bne.n	8001730 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_PCD_MspInit+0xd4>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_PCD_MspInit+0xd4>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6593      	str	r3, [r2, #88]	; 0x58
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_PCD_MspInit+0xd4>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800171e:	f002 f8b3 	bl	8003888 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_PCD_MspInit+0xd4>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <HAL_PCD_MspInit+0xd4>)
 8001728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800172e:	e001      	b.n	8001734 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001730:	f002 f8aa 	bl	8003888 <HAL_PWREx_EnableVddUSB>
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f000 f958 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
	return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ae:	f005 ff99 	bl	80076e4 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
	return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d6:	e7fe      	b.n	80017d6 <_exit+0x12>

080017d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
	}

return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
	}
	return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f005 fefe 	bl	80076e4 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20050000 	.word	0x20050000
 8001914:	00000400 	.word	0x00000400
 8001918:	200007fc 	.word	0x200007fc
 800191c:	20000818 	.word	0x20000818

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800197c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <LoopForever+0x6>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	; (8001984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <LoopForever+0xe>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	; (8001990 <LoopForever+0x16>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f005 febd 	bl	80076f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001976:	f7ff fab3 	bl	8000ee0 <main>

0800197a <LoopForever>:

LoopForever:
    b LoopForever
 800197a:	e7fe      	b.n	800197a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800197c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001988:	0800a9c4 	.word	0x0800a9c4
  ldr r2, =_sbss
 800198c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001990:	20000814 	.word	0x20000814

08001994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_2_IRQHandler>

08001996 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f001 fb77 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 f80e 	bl	80019c8 <HAL_InitTick>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	e001      	b.n	80019bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b8:	f7ff fd92 	bl	80014e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019bc:	79fb      	ldrb	r3, [r7, #7]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_InitTick+0x6c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d023      	beq.n	8001a24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_InitTick+0x70>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_InitTick+0x6c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fb75 	bl	80030e2 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d809      	bhi.n	8001a18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f001 fb4d 	bl	80030aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_InitTick+0x74>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e004      	b.n	8001a28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e001      	b.n	8001a28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000800 	.word	0x20000800

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000800 	.word	0x20000800

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3360      	adds	r3, #96	; 0x60
 8001b42:	461a      	mov	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <LL_ADC_SetOffset+0x44>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	03fff000 	.word	0x03fff000

08001b78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3360      	adds	r3, #96	; 0x60
 8001b86:	461a      	mov	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3360      	adds	r3, #96	; 0x60
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	615a      	str	r2, [r3, #20]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b087      	sub	sp, #28
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3330      	adds	r3, #48	; 0x30
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	211f      	movs	r1, #31
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	f003 011f 	and.w	r1, r3, #31
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c72:	bf00      	nop
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b087      	sub	sp, #28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3314      	adds	r3, #20
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0e5b      	lsrs	r3, r3, #25
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2107      	movs	r1, #7
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0d1b      	lsrs	r3, r3, #20
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0318 	and.w	r3, r3, #24
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cf8:	40d9      	lsrs	r1, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	431a      	orrs	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	0007ffff 	.word	0x0007ffff

08001d1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 031f 	and.w	r3, r3, #31
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6093      	str	r3, [r2, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d8c:	d101      	bne.n	8001d92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ddc:	d101      	bne.n	8001de2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <LL_ADC_IsEnabled+0x18>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <LL_ADC_IsEnabled+0x1a>
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e52:	f043 0204 	orr.w	r2, r3, #4
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d101      	bne.n	8001e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e134      	b.n	8002138 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fb23 	bl	8001528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff3f 	bl	8001d78 <LL_ADC_IsDeepPowerDownEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff25 	bl	8001d54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff5a 	bl	8001dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff3e 	bl	8001da0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f24:	4b86      	ldr	r3, [pc, #536]	; (8002140 <HAL_ADC_Init+0x28c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	4a86      	ldr	r2, [pc, #536]	; (8002144 <HAL_ADC_Init+0x290>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff3c 	bl	8001dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff75 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8001f7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80cd 	bne.w	8002126 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80c9 	bne.w	8002126 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f9c:	f043 0202 	orr.w	r2, r3, #2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff35 	bl	8001e18 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d110      	bne.n	8001fd6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fb4:	4864      	ldr	r0, [pc, #400]	; (8002148 <HAL_ADC_Init+0x294>)
 8001fb6:	f7ff ff2f 	bl	8001e18 <LL_ADC_IsEnabled>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4863      	ldr	r0, [pc, #396]	; (800214c <HAL_ADC_Init+0x298>)
 8001fbe:	f7ff ff2b 	bl	8001e18 <LL_ADC_IsEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4323      	orrs	r3, r4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	485f      	ldr	r0, [pc, #380]	; (8002150 <HAL_ADC_Init+0x29c>)
 8001fd2:	f7ff fd79 	bl	8001ac8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7e5b      	ldrb	r3, [r3, #25]
 8001fda:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fe6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fec:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	3b01      	subs	r3, #1
 800200a:	045b      	lsls	r3, r3, #17
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_ADC_Init+0x2a0>)
 8002036:	4013      	ands	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	69b9      	ldr	r1, [r7, #24]
 800203e:	430b      	orrs	r3, r1
 8002040:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff0d 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 800204c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff1a 	bl	8001e8c <LL_ADC_INJ_IsConversionOngoing>
 8002058:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d140      	bne.n	80020e2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d13d      	bne.n	80020e2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
 800206e:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002070:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002078:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002088:	f023 0306 	bic.w	r3, r3, #6
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	69b9      	ldr	r1, [r7, #24]
 8002092:	430b      	orrs	r3, r1
 8002094:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800209c:	2b01      	cmp	r3, #1
 800209e:	d118      	bne.n	80020d2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020bc:	4311      	orrs	r1, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020c2:	430a      	orrs	r2, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	611a      	str	r2, [r3, #16]
 80020d0:	e007      	b.n	80020e2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10c      	bne.n	8002104 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f023 010f 	bic.w	r1, r3, #15
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
 8002102:	e007      	b.n	8002114 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 020f 	bic.w	r2, r2, #15
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	f023 0303 	bic.w	r3, r3, #3
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	659a      	str	r2, [r3, #88]	; 0x58
 8002124:	e007      	b.n	8002136 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	f043 0210 	orr.w	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002136:	7ffb      	ldrb	r3, [r7, #31]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3724      	adds	r7, #36	; 0x24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	20000000 	.word	0x20000000
 8002144:	053e2d63 	.word	0x053e2d63
 8002148:	50040000 	.word	0x50040000
 800214c:	50040100 	.word	0x50040100
 8002150:	50040300 	.word	0x50040300
 8002154:	fff0c007 	.word	0xfff0c007

08002158 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002160:	4857      	ldr	r0, [pc, #348]	; (80022c0 <HAL_ADC_Start+0x168>)
 8002162:	f7ff fddb 	bl	8001d1c <LL_ADC_GetMultimode>
 8002166:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fe7a 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 809c 	bne.w	80022b2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_ADC_Start+0x30>
 8002184:	2302      	movs	r3, #2
 8002186:	e097      	b.n	80022b8 <HAL_ADC_Start+0x160>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fd7d 	bl	8002c90 <ADC_Enable>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 8083 	bne.w	80022a8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a42      	ldr	r2, [pc, #264]	; (80022c4 <HAL_ADC_Start+0x16c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d002      	beq.n	80021c6 <HAL_ADC_Start+0x6e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	e000      	b.n	80021c8 <HAL_ADC_Start+0x70>
 80021c6:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <HAL_ADC_Start+0x170>)
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d002      	beq.n	80021d6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ee:	d106      	bne.n	80021fe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f023 0206 	bic.w	r2, r3, #6
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80021fc:	e002      	b.n	8002204 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	221c      	movs	r2, #28
 800220a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <HAL_ADC_Start+0x16c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d002      	beq.n	8002224 <HAL_ADC_Start+0xcc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	e000      	b.n	8002226 <HAL_ADC_Start+0xce>
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_ADC_Start+0x170>)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	4293      	cmp	r3, r2
 800222c:	d008      	beq.n	8002240 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d002      	beq.n	8002240 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d114      	bne.n	800226a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fdeb 	bl	8001e3e <LL_ADC_REG_StartConversion>
 8002268:	e025      	b.n	80022b6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_ADC_Start+0x16c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d002      	beq.n	8002286 <HAL_ADC_Start+0x12e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e000      	b.n	8002288 <HAL_ADC_Start+0x130>
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_ADC_Start+0x170>)
 8002288:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00f      	beq.n	80022b6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800229e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	659a      	str	r2, [r3, #88]	; 0x58
 80022a6:	e006      	b.n	80022b6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80022b0:	e001      	b.n	80022b6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	50040300 	.word	0x50040300
 80022c4:	50040100 	.word	0x50040100
 80022c8:	50040000 	.word	0x50040000

080022cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d6:	4866      	ldr	r0, [pc, #408]	; (8002470 <HAL_ADC_PollForConversion+0x1a4>)
 80022d8:	f7ff fd20 	bl	8001d1c <LL_ADC_GetMultimode>
 80022dc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d102      	bne.n	80022ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80022e6:	2308      	movs	r3, #8
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e02a      	b.n	8002342 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d002      	beq.n	80022fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d111      	bne.n	8002322 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d007      	beq.n	800231c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f043 0220 	orr.w	r2, r3, #32
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0a4      	b.n	8002466 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800231c:	2304      	movs	r3, #4
 800231e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002320:	e00f      	b.n	8002342 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002322:	4853      	ldr	r0, [pc, #332]	; (8002470 <HAL_ADC_PollForConversion+0x1a4>)
 8002324:	f7ff fd08 	bl	8001d38 <LL_ADC_GetMultiDMATransfer>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e093      	b.n	8002466 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800233e:	2304      	movs	r3, #4
 8002340:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002342:	f7ff fb91 	bl	8001a68 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002348:	e021      	b.n	800238e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d01d      	beq.n	800238e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002352:	f7ff fb89 	bl	8001a68 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <HAL_ADC_PollForConversion+0x9c>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d112      	bne.n	800238e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e06b      	b.n	8002466 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0d6      	beq.n	800234a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fc27 	bl	8001c00 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01c      	beq.n	80023f2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e5b      	ldrb	r3, [r3, #25]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d118      	bne.n	80023f2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d111      	bne.n	80023f2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_ADC_PollForConversion+0x1a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d002      	beq.n	8002402 <HAL_ADC_PollForConversion+0x136>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	e000      	b.n	8002404 <HAL_ADC_PollForConversion+0x138>
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_ADC_PollForConversion+0x1ac>)
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4293      	cmp	r3, r2
 800240a:	d008      	beq.n	800241e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d002      	beq.n	800241e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b09      	cmp	r3, #9
 800241c:	d104      	bne.n	8002428 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	e00c      	b.n	8002442 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_ADC_PollForConversion+0x1a8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d002      	beq.n	8002438 <HAL_ADC_PollForConversion+0x16c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e000      	b.n	800243a <HAL_ADC_PollForConversion+0x16e>
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_ADC_PollForConversion+0x1ac>)
 800243a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d104      	bne.n	8002452 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2208      	movs	r2, #8
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e008      	b.n	8002464 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	220c      	movs	r2, #12
 8002462:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	50040300 	.word	0x50040300
 8002474:	50040100 	.word	0x50040100
 8002478:	50040000 	.word	0x50040000

0800247c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0b6      	sub	sp, #216	; 0xd8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x22>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e3d5      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x7ce>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fccd 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 83ba 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d824      	bhi.n	8002526 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	3b02      	subs	r3, #2
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d81b      	bhi.n	800251e <HAL_ADC_ConfigChannel+0x86>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_ADC_ConfigChannel+0x54>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	080024fd 	.word	0x080024fd
 80024f0:	08002505 	.word	0x08002505
 80024f4:	0800250d 	.word	0x0800250d
 80024f8:	08002515 	.word	0x08002515
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	220c      	movs	r2, #12
 8002500:	605a      	str	r2, [r3, #4]
          break;
 8002502:	e011      	b.n	8002528 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2212      	movs	r2, #18
 8002508:	605a      	str	r2, [r3, #4]
          break;
 800250a:	e00d      	b.n	8002528 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2218      	movs	r2, #24
 8002510:	605a      	str	r2, [r3, #4]
          break;
 8002512:	e009      	b.n	8002528 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251a:	605a      	str	r2, [r3, #4]
          break;
 800251c:	e004      	b.n	8002528 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2206      	movs	r2, #6
 8002522:	605a      	str	r2, [r3, #4]
          break;
 8002524:	e000      	b.n	8002528 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002526:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff fb76 	bl	8001c26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fc91 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8002544:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fc9d 	bl	8001e8c <LL_ADC_INJ_IsConversionOngoing>
 8002552:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002556:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 81c1 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 81bc 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002572:	d10f      	bne.n	8002594 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	f7ff fb7d 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb24 	bl	8001bda <LL_ADC_SetSamplingTimeCommonConfig>
 8002592:	e00e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f7ff fb6c 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fb14 	bl	8001bda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00a      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6919      	ldr	r1, [r3, #16]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025e4:	f7ff faa4 	bl	8001b30 <LL_ADC_SetOffset>
 80025e8:	e17b      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fac1 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x17e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fab6 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	e01e      	b.n	8002654 <HAL_ADC_ConfigChannel+0x1bc>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff faab 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002638:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800263c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e004      	b.n	8002652 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d4>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	e018      	b.n	800269e <HAL_ADC_ConfigChannel+0x206>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e004      	b.n	800269e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002694:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800269e:	429a      	cmp	r2, r3
 80026a0:	d106      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fa7a 	bl	8001ba4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fa5e 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x244>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fa53 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	f003 021f 	and.w	r2, r3, #31
 80026da:	e01e      	b.n	800271a <HAL_ADC_ConfigChannel+0x282>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fa48 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e004      	b.n	8002718 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800270e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x29a>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0e9b      	lsrs	r3, r3, #26
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	e018      	b.n	8002764 <HAL_ADC_ConfigChannel+0x2cc>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800274a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800274e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800275a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002764:	429a      	cmp	r2, r3
 8002766:	d106      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fa17 	bl	8001ba4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2102      	movs	r1, #2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f9fb 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x30a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f9f0 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	e01e      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x348>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f9e5 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e004      	b.n	80027de <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80027d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x360>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	e016      	b.n	8002826 <HAL_ADC_ConfigChannel+0x38e>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800280a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800280c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002818:	2320      	movs	r3, #32
 800281a:	e004      	b.n	8002826 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800281c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002826:	429a      	cmp	r2, r3
 8002828:	d106      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	2102      	movs	r1, #2
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff f9b6 	bl	8001ba4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2103      	movs	r1, #3
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f99a 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x3cc>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2103      	movs	r1, #3
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f98f 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 021f 	and.w	r2, r3, #31
 8002862:	e017      	b.n	8002894 <HAL_ADC_ConfigChannel+0x3fc>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2103      	movs	r1, #3
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f984 	bl	8001b78 <LL_ADC_GetOffsetChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800287c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002886:	2320      	movs	r3, #32
 8002888:	e003      	b.n	8002892 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800288a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x414>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	e011      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x438>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80028c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d106      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	2103      	movs	r1, #3
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f961 	bl	8001ba4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fa96 	bl	8001e18 <LL_ADC_IsEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 8140 	bne.w	8002b74 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	461a      	mov	r2, r3
 8002902:	f7ff f9e7 	bl	8001cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4a8f      	ldr	r2, [pc, #572]	; (8002b48 <HAL_ADC_ConfigChannel+0x6b0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	f040 8131 	bne.w	8002b74 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <HAL_ADC_ConfigChannel+0x4a2>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	3301      	adds	r3, #1
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2b09      	cmp	r3, #9
 8002930:	bf94      	ite	ls
 8002932:	2301      	movls	r3, #1
 8002934:	2300      	movhi	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e019      	b.n	800296e <HAL_ADC_ConfigChannel+0x4d6>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800294a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800294c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e003      	b.n	800295e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2b09      	cmp	r3, #9
 8002966:	bf94      	ite	ls
 8002968:	2301      	movls	r3, #1
 800296a:	2300      	movhi	r3, #0
 800296c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296e:	2b00      	cmp	r3, #0
 8002970:	d079      	beq.n	8002a66 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_ADC_ConfigChannel+0x4f6>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	3301      	adds	r3, #1
 8002986:	069b      	lsls	r3, r3, #26
 8002988:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298c:	e015      	b.n	80029ba <HAL_ADC_ConfigChannel+0x522>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800299c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80029aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	069b      	lsls	r3, r3, #26
 80029b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_ADC_ConfigChannel+0x542>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	e017      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x572>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e003      	b.n	80029fe <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80029f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	ea42 0103 	orr.w	r1, r2, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x598>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	051b      	lsls	r3, r3, #20
 8002a2e:	e018      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x5ca>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 021f 	and.w	r2, r3, #31
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a62:	430b      	orrs	r3, r1
 8002a64:	e081      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x5ea>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a80:	e015      	b.n	8002aae <HAL_ADC_ConfigChannel+0x616>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e003      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	069b      	lsls	r3, r3, #26
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x636>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0e9b      	lsrs	r3, r3, #26
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	e017      	b.n	8002afe <HAL_ADC_ConfigChannel+0x666>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	61fb      	str	r3, [r7, #28]
  return result;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	ea42 0103 	orr.w	r1, r2, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x692>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	3301      	adds	r3, #1
 8002b16:	f003 021f 	and.w	r2, r3, #31
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b1e      	subs	r3, #30
 8002b22:	051b      	lsls	r3, r3, #20
 8002b24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b28:	e01e      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x6d0>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	613b      	str	r3, [r7, #16]
  return result;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e006      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x6bc>
 8002b46:	bf00      	nop
 8002b48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f003 021f 	and.w	r2, r3, #31
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b1e      	subs	r3, #30
 8002b62:	051b      	lsls	r3, r3, #20
 8002b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7ff f885 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d06c      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b80:	483c      	ldr	r0, [pc, #240]	; (8002c74 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b82:	f7fe ffc7 	bl	8001b14 <LL_ADC_GetCommonPathInternalCh>
 8002b86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d127      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d121      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a35      	ldr	r2, [pc, #212]	; (8002c7c <HAL_ADC_ConfigChannel+0x7e4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d157      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	482f      	ldr	r0, [pc, #188]	; (8002c74 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bb6:	f7fe ff9a 	bl	8001aee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_ADC_ConfigChannel+0x7e8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	4a30      	ldr	r2, [pc, #192]	; (8002c84 <HAL_ADC_ConfigChannel+0x7ec>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bd4:	e002      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f9      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002be2:	e03a      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_ADC_ConfigChannel+0x7f0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x77e>
 8002bee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <HAL_ADC_ConfigChannel+0x7e4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d12a      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4819      	ldr	r0, [pc, #100]	; (8002c74 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c10:	f7fe ff6d 	bl	8001aee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c14:	e021      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_ADC_ConfigChannel+0x7f4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d11c      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <HAL_ADC_ConfigChannel+0x7e4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d111      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c3e:	4619      	mov	r1, r3
 8002c40:	480c      	ldr	r0, [pc, #48]	; (8002c74 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c42:	f7fe ff54 	bl	8001aee <LL_ADC_SetCommonPathInternalCh>
 8002c46:	e008      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c62:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	37d8      	adds	r7, #216	; 0xd8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	80080000 	.word	0x80080000
 8002c74:	50040300 	.word	0x50040300
 8002c78:	c7520000 	.word	0xc7520000
 8002c7c:	50040000 	.word	0x50040000
 8002c80:	20000000 	.word	0x20000000
 8002c84:	053e2d63 	.word	0x053e2d63
 8002c88:	cb840000 	.word	0xcb840000
 8002c8c:	80000001 	.word	0x80000001

08002c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff f8b9 	bl	8001e18 <LL_ADC_IsEnabled>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d169      	bne.n	8002d80 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <ADC_Enable+0xfc>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e055      	b.n	8002d82 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f888 	bl	8001df0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ce0:	482b      	ldr	r0, [pc, #172]	; (8002d90 <ADC_Enable+0x100>)
 8002ce2:	f7fe ff17 	bl	8001b14 <LL_ADC_GetCommonPathInternalCh>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf0:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <ADC_Enable+0x104>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <ADC_Enable+0x108>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002d0a:	e002      	b.n	8002d12 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f9      	bne.n	8002d0c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fea6 	bl	8001a68 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d1e:	e028      	b.n	8002d72 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f877 	bl	8001e18 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d104      	bne.n	8002d3a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f85b 	bl	8001df0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d3a:	f7fe fe95 	bl	8001a68 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d914      	bls.n	8002d72 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d00d      	beq.n	8002d72 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	f043 0210 	orr.w	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e007      	b.n	8002d82 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d1cf      	bne.n	8002d20 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	8000003f 	.word	0x8000003f
 8002d90:	50040300 	.word	0x50040300
 8002d94:	20000000 	.word	0x20000000
 8002d98:	053e2d63 	.word	0x053e2d63

08002d9c <LL_ADC_IsEnabled>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <LL_ADC_IsEnabled+0x18>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <LL_ADC_IsEnabled+0x1a>
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d101      	bne.n	8002dda <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b0a1      	sub	sp, #132	; 0x84
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e089      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e12:	2300      	movs	r3, #0
 8002e14:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a42      	ldr	r2, [pc, #264]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d102      	bne.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e001      	b.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e068      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ffb9 	bl	8002dc2 <LL_ADC_REG_IsConversionOngoing>
 8002e50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ffb3 	bl	8002dc2 <LL_ADC_REG_IsConversionOngoing>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d14a      	bne.n	8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d147      	bne.n	8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d027      	beq.n	8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e86:	035b      	lsls	r3, r3, #13
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e90:	4824      	ldr	r0, [pc, #144]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002e92:	f7ff ff83 	bl	8002d9c <LL_ADC_IsEnabled>
 8002e96:	4604      	mov	r4, r0
 8002e98:	4823      	ldr	r0, [pc, #140]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e9a:	f7ff ff7f 	bl	8002d9c <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4323      	orrs	r3, r4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d132      	bne.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eae:	f023 030f 	bic.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	6811      	ldr	r1, [r2, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	6892      	ldr	r2, [r2, #8]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec2:	e023      	b.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ece:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed0:	4814      	ldr	r0, [pc, #80]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002ed2:	f7ff ff63 	bl	8002d9c <LL_ADC_IsEnabled>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	4813      	ldr	r0, [pc, #76]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eda:	f7ff ff5f 	bl	8002d9c <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4323      	orrs	r3, r4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d112      	bne.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eee:	f023 030f 	bic.w	r3, r3, #15
 8002ef2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ef4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef6:	e009      	b.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f0a:	e000      	b.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3784      	adds	r7, #132	; 0x84
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	50040000 	.word	0x50040000
 8002f28:	50040100 	.word	0x50040100
 8002f2c:	50040300 	.word	0x50040300

08002f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	60d3      	str	r3, [r2, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__NVIC_GetPriorityGrouping+0x18>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 0307 	and.w	r3, r3, #7
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	; (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f7ff ff8e 	bl	8002f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff47 	bl	8002f30 <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff5c 	bl	8002f78 <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff8e 	bl	8002fe8 <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5d 	bl	8002f94 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffb0 	bl	8003050 <SysTick_Config>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310a:	e166      	b.n	80033da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2101      	movs	r1, #1
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8158 	beq.w	80033d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d005      	beq.n	800313c <HAL_GPIO_Init+0x40>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d130      	bne.n	800319e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003172:	2201      	movs	r2, #1
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0201 	and.w	r2, r3, #1
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d017      	beq.n	80031da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d123      	bne.n	800322e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	6939      	ldr	r1, [r7, #16]
 800322a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0203 	and.w	r2, r3, #3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80b2 	beq.w	80033d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003270:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <HAL_GPIO_Init+0x2fc>)
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	4a60      	ldr	r2, [pc, #384]	; (80033f8 <HAL_GPIO_Init+0x2fc>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6613      	str	r3, [r2, #96]	; 0x60
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <HAL_GPIO_Init+0x2fc>)
 800327e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003288:	4a5c      	ldr	r2, [pc, #368]	; (80033fc <HAL_GPIO_Init+0x300>)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	089b      	lsrs	r3, r3, #2
 800328e:	3302      	adds	r3, #2
 8003290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032b2:	d02b      	beq.n	800330c <HAL_GPIO_Init+0x210>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_GPIO_Init+0x304>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d025      	beq.n	8003308 <HAL_GPIO_Init+0x20c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a51      	ldr	r2, [pc, #324]	; (8003404 <HAL_GPIO_Init+0x308>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d01f      	beq.n	8003304 <HAL_GPIO_Init+0x208>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a50      	ldr	r2, [pc, #320]	; (8003408 <HAL_GPIO_Init+0x30c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d019      	beq.n	8003300 <HAL_GPIO_Init+0x204>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a4f      	ldr	r2, [pc, #316]	; (800340c <HAL_GPIO_Init+0x310>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d013      	beq.n	80032fc <HAL_GPIO_Init+0x200>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <HAL_GPIO_Init+0x314>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00d      	beq.n	80032f8 <HAL_GPIO_Init+0x1fc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_GPIO_Init+0x318>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <HAL_GPIO_Init+0x1f8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_GPIO_Init+0x31c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_GPIO_Init+0x1f4>
 80032ec:	2307      	movs	r3, #7
 80032ee:	e00e      	b.n	800330e <HAL_GPIO_Init+0x212>
 80032f0:	2308      	movs	r3, #8
 80032f2:	e00c      	b.n	800330e <HAL_GPIO_Init+0x212>
 80032f4:	2306      	movs	r3, #6
 80032f6:	e00a      	b.n	800330e <HAL_GPIO_Init+0x212>
 80032f8:	2305      	movs	r3, #5
 80032fa:	e008      	b.n	800330e <HAL_GPIO_Init+0x212>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e006      	b.n	800330e <HAL_GPIO_Init+0x212>
 8003300:	2303      	movs	r3, #3
 8003302:	e004      	b.n	800330e <HAL_GPIO_Init+0x212>
 8003304:	2302      	movs	r3, #2
 8003306:	e002      	b.n	800330e <HAL_GPIO_Init+0x212>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_GPIO_Init+0x212>
 800330c:	2300      	movs	r3, #0
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	f002 0203 	and.w	r2, r2, #3
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	4093      	lsls	r3, r2
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800331e:	4937      	ldr	r1, [pc, #220]	; (80033fc <HAL_GPIO_Init+0x300>)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800332c:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_GPIO_Init+0x320>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003350:	4a32      	ldr	r2, [pc, #200]	; (800341c <HAL_GPIO_Init+0x320>)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_GPIO_Init+0x320>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800337a:	4a28      	ldr	r2, [pc, #160]	; (800341c <HAL_GPIO_Init+0x320>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_GPIO_Init+0x320>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_GPIO_Init+0x320>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HAL_GPIO_Init+0x320>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_GPIO_Init+0x320>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3301      	adds	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f ae91 	bne.w	800310c <HAL_GPIO_Init+0x10>
  }
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	371c      	adds	r7, #28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010000 	.word	0x40010000
 8003400:	48000400 	.word	0x48000400
 8003404:	48000800 	.word	0x48000800
 8003408:	48000c00 	.word	0x48000c00
 800340c:	48001000 	.word	0x48001000
 8003410:	48001400 	.word	0x48001400
 8003414:	48001800 	.word	0x48001800
 8003418:	48001c00 	.word	0x48001c00
 800341c:	40010400 	.word	0x40010400

08003420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003430:	787b      	ldrb	r3, [r7, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800343c:	e002      	b.n	8003444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b08f      	sub	sp, #60	; 0x3c
 8003454:	af0a      	add	r7, sp, #40	; 0x28
 8003456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e116      	b.n	8003690 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fe f8f3 	bl	8001668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f002 fd75 	bl	8005f90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	687e      	ldr	r6, [r7, #4]
 80034ae:	466d      	mov	r5, sp
 80034b0:	f106 0410 	add.w	r4, r6, #16
 80034b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034c4:	1d33      	adds	r3, r6, #4
 80034c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c8:	6838      	ldr	r0, [r7, #0]
 80034ca:	f002 fd35 	bl	8005f38 <USB_CoreInit>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0d7      	b.n	8003690 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 fd63 	bl	8005fb2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e04a      	b.n	8003588 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	333d      	adds	r3, #61	; 0x3d
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	333c      	adds	r3, #60	; 0x3c
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	b298      	uxth	r0, r3
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3344      	adds	r3, #68	; 0x44
 800352e:	4602      	mov	r2, r0
 8003530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3340      	adds	r3, #64	; 0x40
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3348      	adds	r3, #72	; 0x48
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	334c      	adds	r3, #76	; 0x4c
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3354      	adds	r3, #84	; 0x54
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	3301      	adds	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d3af      	bcc.n	80034f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e044      	b.n	8003622 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d3b5      	bcc.n	8003598 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	687e      	ldr	r6, [r7, #4]
 8003634:	466d      	mov	r5, sp
 8003636:	f106 0410 	add.w	r4, r6, #16
 800363a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800363c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003646:	e885 0003 	stmia.w	r5, {r0, r1}
 800364a:	1d33      	adds	r3, r6, #4
 800364c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364e:	6838      	ldr	r0, [r7, #0]
 8003650:	f002 fcfc 	bl	800604c <USB_DevInit>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e014      	b.n	8003690 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f80a 	bl	8003698 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f002 fea8 	bl	80063de <USB_DevDisconnect>

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003698 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ca:	f043 0303 	orr.w	r3, r3, #3
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a04      	ldr	r2, [pc, #16]	; (80036fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40007000 	.word	0x40007000

08003700 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d102      	bne.n	8003718 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003716:	e00b      	b.n	8003730 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_PWREx_GetVoltageRange+0x3c>)
 800371a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d102      	bne.n	800372e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372c:	e000      	b.n	8003730 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800372e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40007000 	.word	0x40007000

08003740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d141      	bne.n	80037d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800374e:	4b4b      	ldr	r3, [pc, #300]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d131      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800375c:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003762:	4a46      	ldr	r2, [pc, #280]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800376c:	4b43      	ldr	r3, [pc, #268]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003774:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800377c:	4b40      	ldr	r3, [pc, #256]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2232      	movs	r2, #50	; 0x32
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	4a3f      	ldr	r2, [pc, #252]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	0c9b      	lsrs	r3, r3, #18
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003792:	e002      	b.n	800379a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3b01      	subs	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379a:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d102      	bne.n	80037ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f2      	bne.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ba:	d158      	bne.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e057      	b.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037d0:	e04d      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d141      	bne.n	800385e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037da:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d131      	bne.n	800384c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003800:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003806:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2232      	movs	r2, #50	; 0x32
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	0c9b      	lsrs	r3, r3, #18
 800381a:	3301      	adds	r3, #1
 800381c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381e:	e002      	b.n	8003826 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b01      	subs	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d102      	bne.n	800383a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f2      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d112      	bne.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e011      	b.n	8003870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800385c:	e007      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40007000 	.word	0x40007000
 8003880:	20000000 	.word	0x20000000
 8003884:	431bde83 	.word	0x431bde83

08003888 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003896:	6053      	str	r3, [r2, #4]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000

080038a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80038b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b6:	6053      	str	r3, [r2, #4]
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40007000 	.word	0x40007000

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f000 bc68 	b.w	80041ac <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038dc:	4b97      	ldr	r3, [pc, #604]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e6:	4b95      	ldr	r3, [pc, #596]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80e6 	beq.w	8003aca <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_RCC_OscConfig+0x4c>
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	f040 808d 	bne.w	8003a26 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b01      	cmp	r3, #1
 8003910:	f040 8089 	bne.w	8003a26 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003914:	4b89      	ldr	r3, [pc, #548]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_RCC_OscConfig+0x66>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f000 bc3f 	b.w	80041ac <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003932:	4b82      	ldr	r3, [pc, #520]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <HAL_RCC_OscConfig+0x80>
 800393e:	4b7f      	ldr	r3, [pc, #508]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003946:	e005      	b.n	8003954 <HAL_RCC_OscConfig+0x8c>
 8003948:	4b7c      	ldr	r3, [pc, #496]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 800394a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003954:	4293      	cmp	r3, r2
 8003956:	d224      	bcs.n	80039a2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fe2d 	bl	80045bc <RCC_SetFlashLatencyFromMSIRange>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f000 bc1f 	b.w	80041ac <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800396e:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a72      	ldr	r2, [pc, #456]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b70      	ldr	r3, [pc, #448]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	496d      	ldr	r1, [pc, #436]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800398c:	4b6b      	ldr	r3, [pc, #428]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	4968      	ldr	r1, [pc, #416]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
 80039a0:	e025      	b.n	80039ee <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a2:	4b66      	ldr	r3, [pc, #408]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80039a8:	f043 0308 	orr.w	r3, r3, #8
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	4960      	ldr	r1, [pc, #384]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c0:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	495b      	ldr	r1, [pc, #364]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fdec 	bl	80045bc <RCC_SetFlashLatencyFromMSIRange>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e3de      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ee:	f000 fd21 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4950      	ldr	r1, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x278>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0a:	4a4e      	ldr	r2, [pc, #312]	; (8003b44 <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a0e:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <HAL_RCC_OscConfig+0x280>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd ffd8 	bl	80019c8 <HAL_InitTick>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d052      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	e3c2      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d032      	beq.n	8003a94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a2e:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a3a:	f7fe f815 	bl	8001a68 <HAL_GetTick>
 8003a3e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a42:	f7fe f811 	bl	8001a68 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e3ab      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a54:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a35      	ldr	r2, [pc, #212]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	4930      	ldr	r1, [pc, #192]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a7e:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	492b      	ldr	r1, [pc, #172]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
 8003a92:	e01a      	b.n	8003aca <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a94:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a28      	ldr	r2, [pc, #160]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd ffe2 	bl	8001a68 <HAL_GetTick>
 8003aa4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aa8:	f7fd ffde 	bl	8001a68 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e378      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x1e0>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d073      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x220>
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d10e      	bne.n	8003b00 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d063      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2f4>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d15f      	bne.n	8003bbc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e355      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x250>
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e025      	b.n	8003b64 <HAL_RCC_OscConfig+0x29c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d114      	bne.n	8003b4c <HAL_RCC_OscConfig+0x284>
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a02      	ldr	r2, [pc, #8]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e013      	b.n	8003b64 <HAL_RCC_OscConfig+0x29c>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	0800a538 	.word	0x0800a538
 8003b44:	20000000 	.word	0x20000000
 8003b48:	20000004 	.word	0x20000004
 8003b4c:	4b8f      	ldr	r3, [pc, #572]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a8e      	ldr	r2, [pc, #568]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b8c      	ldr	r3, [pc, #560]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a8b      	ldr	r2, [pc, #556]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd ff7c 	bl	8001a68 <HAL_GetTick>
 8003b70:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd ff78 	bl	8001a68 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e312      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b86:	4b81      	ldr	r3, [pc, #516]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x2ac>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd ff68 	bl	8001a68 <HAL_GetTick>
 8003b98:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd ff64 	bl	8001a68 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e2fe      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bae:	4b77      	ldr	r3, [pc, #476]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2d4>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d060      	beq.n	8003c8c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_OscConfig+0x314>
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d119      	bne.n	8003c0a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d116      	bne.n	8003c0a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bdc:	4b6b      	ldr	r3, [pc, #428]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x32c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e2db      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	4962      	ldr	r1, [pc, #392]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c08:	e040      	b.n	8003c8c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d023      	beq.n	8003c5a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c12:	4b5e      	ldr	r3, [pc, #376]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5d      	ldr	r2, [pc, #372]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fd ff23 	bl	8001a68 <HAL_GetTick>
 8003c22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fd ff1f 	bl	8001a68 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e2b9      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c38:	4b54      	ldr	r3, [pc, #336]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	494e      	ldr	r1, [pc, #312]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
 8003c58:	e018      	b.n	8003c8c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5a:	4b4c      	ldr	r3, [pc, #304]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a4b      	ldr	r2, [pc, #300]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fd feff 	bl	8001a68 <HAL_GetTick>
 8003c6a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fd fefb 	bl	8001a68 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e295      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c80:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8082 	beq.w	8003d9e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d05f      	beq.n	8003d62 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d037      	beq.n	8003d28 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e26d      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003cda:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce0:	4a2a      	ldr	r2, [pc, #168]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cea:	f7fd febd 	bl	8001a68 <HAL_GetTick>
 8003cee:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fd feb9 	bl	8001a68 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b11      	cmp	r3, #17
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e253      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d04:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ef      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003d12:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d18:	f023 0210 	bic.w	r2, r3, #16
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	491a      	ldr	r1, [pc, #104]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd fe96 	bl	8001a68 <HAL_GetTick>
 8003d3c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fd fe92 	bl	8001a68 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b11      	cmp	r3, #17
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e22c      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ef      	beq.n	8003d40 <HAL_RCC_OscConfig+0x478>
 8003d60:	e01d      	b.n	8003d9e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d68:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d72:	f7fd fe79 	bl	8001a68 <HAL_GetTick>
 8003d76:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7a:	f7fd fe75 	bl	8001a68 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b11      	cmp	r3, #17
 8003d86:	d903      	bls.n	8003d90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e20f      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
 8003d8c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d90:	4b83      	ldr	r3, [pc, #524]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1ed      	bne.n	8003d7a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80bd 	beq.w	8003f26 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003db2:	4b7b      	ldr	r3, [pc, #492]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10e      	bne.n	8003ddc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	4b78      	ldr	r3, [pc, #480]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	4a77      	ldr	r2, [pc, #476]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dca:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ddc:	4b71      	ldr	r3, [pc, #452]	; (8003fa4 <HAL_RCC_OscConfig+0x6dc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d118      	bne.n	8003e1a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de8:	4b6e      	ldr	r3, [pc, #440]	; (8003fa4 <HAL_RCC_OscConfig+0x6dc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6d      	ldr	r2, [pc, #436]	; (8003fa4 <HAL_RCC_OscConfig+0x6dc>)
 8003dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df4:	f7fd fe38 	bl	8001a68 <HAL_GetTick>
 8003df8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfc:	f7fd fe34 	bl	8001a68 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1ce      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0e:	4b65      	ldr	r3, [pc, #404]	; (8003fa4 <HAL_RCC_OscConfig+0x6dc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d02c      	beq.n	8003e80 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003e26:	4b5e      	ldr	r3, [pc, #376]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	4959      	ldr	r1, [pc, #356]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e4c:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	4a53      	ldr	r2, [pc, #332]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	4a4f      	ldr	r2, [pc, #316]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6c:	e018      	b.n	8003ea0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e6e:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7e:	e00f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	4a46      	ldr	r2, [pc, #280]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d016      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fdde 	bl	8001a68 <HAL_GetTick>
 8003eac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fd fdda 	bl	8001a68 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e172      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ed      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x5e8>
 8003ed4:	e01d      	b.n	8003f12 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fd fdc7 	bl	8001a68 <HAL_GetTick>
 8003eda:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd fdc3 	bl	8001a68 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e15b      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1ed      	bne.n	8003ede <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d041      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fd8d 	bl	8001a68 <HAL_GetTick>
 8003f4e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f52:	f7fd fd89 	bl	8001a68 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e123      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <HAL_RCC_OscConfig+0x68a>
 8003f72:	e020      	b.n	8003fb6 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_OscConfig+0x6d8>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd fd70 	bl	8001a68 <HAL_GetTick>
 8003f88:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f8a:	e00d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f8c:	f7fd fd6c 	bl	8001a68 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d906      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e106      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fa8:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ea      	bne.n	8003f8c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80f5 	beq.w	80041aa <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	f040 80cb 	bne.w	8004160 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fca:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0203 	and.w	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d12c      	bne.n	8004038 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d123      	bne.n	8004038 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d11b      	bne.n	8004038 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d113      	bne.n	8004038 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	3b01      	subs	r3, #1
 800401e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d109      	bne.n	8004038 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d06d      	beq.n	8004114 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d068      	beq.n	8004110 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800404a:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0a8      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800405a:	4b56      	ldr	r3, [pc, #344]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a55      	ldr	r2, [pc, #340]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004064:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004066:	f7fd fcff 	bl	8001a68 <HAL_GetTick>
 800406a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fd fcfb 	bl	8001a68 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e095      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	4b4c      	ldr	r3, [pc, #304]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408c:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_RCC_OscConfig+0x8f0>)
 8004092:	4013      	ands	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800409c:	3a01      	subs	r2, #1
 800409e:	0112      	lsls	r2, r2, #4
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a6:	0212      	lsls	r2, r2, #8
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ae:	0852      	lsrs	r2, r2, #1
 80040b0:	3a01      	subs	r2, #1
 80040b2:	0552      	lsls	r2, r2, #21
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040ba:	0852      	lsrs	r2, r2, #1
 80040bc:	3a01      	subs	r2, #1
 80040be:	0652      	lsls	r2, r2, #25
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040c6:	06d2      	lsls	r2, r2, #27
 80040c8:	430a      	orrs	r2, r1
 80040ca:	493a      	ldr	r1, [pc, #232]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a34      	ldr	r2, [pc, #208]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e8:	f7fd fcbe 	bl	8001a68 <HAL_GetTick>
 80040ec:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd fcba 	bl	8001a68 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e054      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410e:	e04c      	b.n	80041aa <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e04b      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d144      	bne.n	80041aa <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004136:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004138:	f7fd fc96 	bl	8001a68 <HAL_GetTick>
 800413c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd fc92 	bl	8001a68 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e02c      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x878>
 800415e:	e024      	b.n	80041aa <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d01f      	beq.n	80041a6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800416c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fd fc79 	bl	8001a68 <HAL_GetTick>
 8004176:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7fd fc75 	bl	8001a68 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e00f      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4905      	ldr	r1, [pc, #20]	; (80041b4 <HAL_RCC_OscConfig+0x8ec>)
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_RCC_OscConfig+0x8f4>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	60cb      	str	r3, [r1, #12]
 80041a4:	e001      	b.n	80041aa <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3728      	adds	r7, #40	; 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000
 80041b8:	019d800c 	.word	0x019d800c
 80041bc:	feeefffc 	.word	0xfeeefffc

080041c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e11d      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b90      	ldr	r3, [pc, #576]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d910      	bls.n	8004208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b8d      	ldr	r3, [pc, #564]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 020f 	bic.w	r2, r3, #15
 80041ee:	498b      	ldr	r1, [pc, #556]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b89      	ldr	r3, [pc, #548]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e105      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d010      	beq.n	8004236 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4b81      	ldr	r3, [pc, #516]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004220:	429a      	cmp	r2, r3
 8004222:	d908      	bls.n	8004236 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004224:	4b7e      	ldr	r3, [pc, #504]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	497b      	ldr	r1, [pc, #492]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d079      	beq.n	8004336 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d11e      	bne.n	8004288 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	4b75      	ldr	r3, [pc, #468]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0dc      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800425a:	f000 fa09 	bl	8004670 <RCC_GetSysClockFreqFromPLLSource>
 800425e:	4603      	mov	r3, r0
 8004260:	4a70      	ldr	r2, [pc, #448]	; (8004424 <HAL_RCC_ClockConfig+0x264>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d946      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004266:	4b6e      	ldr	r3, [pc, #440]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d140      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004272:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800427a:	4a69      	ldr	r2, [pc, #420]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 800427c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004280:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e035      	b.n	80042f4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004290:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d115      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0b9      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042a8:	4b5d      	ldr	r3, [pc, #372]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0ad      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b8:	4b59      	ldr	r3, [pc, #356]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0a5      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80042c8:	f000 f8b4 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4a55      	ldr	r2, [pc, #340]	; (8004424 <HAL_RCC_ClockConfig+0x264>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d90f      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042d4:	4b52      	ldr	r3, [pc, #328]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042e0:	4b4f      	ldr	r3, [pc, #316]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e8:	4a4d      	ldr	r2, [pc, #308]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f4:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 0203 	bic.w	r2, r3, #3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4947      	ldr	r1, [pc, #284]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004306:	f7fd fbaf 	bl	8001a68 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430c:	e00a      	b.n	8004324 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430e:	f7fd fbab 	bl	8001a68 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e077      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004324:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 020c 	and.w	r2, r3, #12
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	429a      	cmp	r2, r3
 8004334:	d1eb      	bne.n	800430e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b80      	cmp	r3, #128	; 0x80
 800433a:	d105      	bne.n	8004348 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4a37      	ldr	r2, [pc, #220]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004346:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d010      	beq.n	8004376 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004360:	429a      	cmp	r2, r3
 8004362:	d208      	bcs.n	8004376 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	492b      	ldr	r1, [pc, #172]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d210      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 020f 	bic.w	r2, r3, #15
 800438c:	4923      	ldr	r1, [pc, #140]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_ClockConfig+0x25c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e036      	b.n	8004414 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4918      	ldr	r1, [pc, #96]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4910      	ldr	r1, [pc, #64]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e4:	f000 f826 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCC_ClockConfig+0x260>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	490c      	ldr	r1, [pc, #48]	; (8004428 <HAL_RCC_ClockConfig+0x268>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x26c>)
 8004402:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCC_ClockConfig+0x270>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd fadd 	bl	80019c8 <HAL_InitTick>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]

  return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40022000 	.word	0x40022000
 8004420:	40021000 	.word	0x40021000
 8004424:	04c4b400 	.word	0x04c4b400
 8004428:	0800a538 	.word	0x0800a538
 800442c:	20000000 	.word	0x20000000
 8004430:	20000004 	.word	0x20000004

08004434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004442:	4b3e      	ldr	r3, [pc, #248]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800444c:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x34>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d121      	bne.n	80044a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d11e      	bne.n	80044a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004468:	4b34      	ldr	r3, [pc, #208]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d107      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004474:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e005      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004484:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004490:	4a2b      	ldr	r2, [pc, #172]	; (8004540 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d102      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044ac:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_GetSysClockFreq+0x110>)
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	e004      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d134      	bne.n	800452c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0xa6>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d003      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0xac>
 80044d8:	e005      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_GetSysClockFreq+0x110>)
 80044dc:	617b      	str	r3, [r7, #20]
      break;
 80044de:	e005      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_RCC_GetSysClockFreq+0x114>)
 80044e2:	617b      	str	r3, [r7, #20]
      break;
 80044e4:	e002      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	617b      	str	r3, [r7, #20]
      break;
 80044ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	3301      	adds	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	fb03 f202 	mul.w	r2, r3, r2
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	0e5b      	lsrs	r3, r3, #25
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	3301      	adds	r3, #1
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800452c:	69bb      	ldr	r3, [r7, #24]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	0800a550 	.word	0x0800a550
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCC_GetHCLKFreq+0x14>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000000 	.word	0x20000000

08004564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004568:	f7ff fff0 	bl	800454c <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4904      	ldr	r1, [pc, #16]	; (800458c <HAL_RCC_GetPCLK1Freq+0x28>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	0800a548 	.word	0x0800a548

08004590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004594:	f7ff ffda 	bl	800454c <HAL_RCC_GetHCLKFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	0adb      	lsrs	r3, r3, #11
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	4904      	ldr	r1, [pc, #16]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	0800a548 	.word	0x0800a548

080045bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045c8:	4b27      	ldr	r3, [pc, #156]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045d4:	f7ff f894 	bl	8003700 <HAL_PWREx_GetVoltageRange>
 80045d8:	6178      	str	r0, [r7, #20]
 80045da:	e014      	b.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045dc:	4b22      	ldr	r3, [pc, #136]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e6:	6593      	str	r3, [r2, #88]	; 0x58
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045f4:	f7ff f884 	bl	8003700 <HAL_PWREx_GetVoltageRange>
 80045f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004604:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460c:	d10b      	bne.n	8004626 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b80      	cmp	r3, #128	; 0x80
 8004612:	d913      	bls.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2ba0      	cmp	r3, #160	; 0xa0
 8004618:	d902      	bls.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800461a:	2302      	movs	r3, #2
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	e00d      	b.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004620:	2301      	movs	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	e00a      	b.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b7f      	cmp	r3, #127	; 0x7f
 800462a:	d902      	bls.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800462c:	2302      	movs	r3, #2
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	e004      	b.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b70      	cmp	r3, #112	; 0x70
 8004636:	d101      	bne.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004638:	2301      	movs	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 020f 	bic.w	r2, r3, #15
 8004644:	4909      	ldr	r1, [pc, #36]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	40022000 	.word	0x40022000

08004670 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004676:	4b2d      	ldr	r3, [pc, #180]	; (800472c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d00b      	beq.n	800469e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d825      	bhi.n	80046d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d008      	beq.n	80046a4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d11f      	bne.n	80046d8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800469a:	613b      	str	r3, [r7, #16]
    break;
 800469c:	e01f      	b.n	80046de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800469e:	4b25      	ldr	r3, [pc, #148]	; (8004734 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80046a0:	613b      	str	r3, [r7, #16]
    break;
 80046a2:	e01c      	b.n	80046de <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d107      	bne.n	80046c0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046b0:	4b1e      	ldr	r3, [pc, #120]	; (800472c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e005      	b.n	80046cc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d4:	613b      	str	r3, [r7, #16]
    break;
 80046d6:	e002      	b.n	80046de <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
    break;
 80046dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	3301      	adds	r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	0a1b      	lsrs	r3, r3, #8
 80046f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	fb03 f202 	mul.w	r2, r3, r2
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004704:	4b09      	ldr	r3, [pc, #36]	; (800472c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	0e5b      	lsrs	r3, r3, #25
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	3301      	adds	r3, #1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800471e:	683b      	ldr	r3, [r7, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40021000 	.word	0x40021000
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200
 8004738:	0800a550 	.word	0x0800a550

0800473c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004744:	2300      	movs	r3, #0
 8004746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004748:	2300      	movs	r3, #0
 800474a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004754:	2b00      	cmp	r3, #0
 8004756:	d040      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475c:	2b80      	cmp	r3, #128	; 0x80
 800475e:	d02a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	d825      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004764:	2b60      	cmp	r3, #96	; 0x60
 8004766:	d026      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d821      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d006      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d81d      	bhi.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d010      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800477c:	e018      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800477e:	4b89      	ldr	r3, [pc, #548]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4a88      	ldr	r2, [pc, #544]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800478a:	e015      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb4e 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800479c:	e00c      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3320      	adds	r3, #32
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fc39 	bl	800501c <RCCEx_PLLSAI2_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ae:	e003      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	74fb      	strb	r3, [r7, #19]
      break;
 80047b4:	e000      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80047b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047be:	4b79      	ldr	r3, [pc, #484]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047cc:	4975      	ldr	r1, [pc, #468]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80047d4:	e001      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d047      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d030      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d82a      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fa:	d02a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004800:	d824      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480c:	d81e      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004816:	d010      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004818:	e018      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800481a:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a61      	ldr	r2, [pc, #388]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004826:	e015      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fb00 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004838:	e00c      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3320      	adds	r3, #32
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fbeb 	bl	800501c <RCCEx_PLLSAI2_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800484a:	e003      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	74fb      	strb	r3, [r7, #19]
      break;
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800485a:	4b52      	ldr	r3, [pc, #328]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	494e      	ldr	r1, [pc, #312]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004870:	e001      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004872:	7cfb      	ldrb	r3, [r7, #19]
 8004874:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 809f 	beq.w	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004884:	2300      	movs	r3, #0
 8004886:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004888:	4b46      	ldr	r3, [pc, #280]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004898:	2300      	movs	r3, #0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6593      	str	r3, [r2, #88]	; 0x58
 80048aa:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	2301      	movs	r3, #1
 80048b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ba:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c6:	f7fd f8cf 	bl	8001a68 <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048cc:	e009      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fd f8cb 	bl	8001a68 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d902      	bls.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	74fb      	strb	r3, [r7, #19]
        break;
 80048e0:	e005      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e2:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d15b      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01f      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	429a      	cmp	r2, r3
 8004910:	d019      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800493e:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d016      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fd f88a 	bl	8001a68 <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004956:	e00b      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd f886 	bl	8001a68 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d902      	bls.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	74fb      	strb	r3, [r7, #19]
            break;
 800496e:	e006      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ec      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10c      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800499c:	e008      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	74bb      	strb	r3, [r7, #18]
 80049a2:	e005      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b0:	7c7b      	ldrb	r3, [r7, #17]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4ba0      	ldr	r3, [pc, #640]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	4a9f      	ldr	r2, [pc, #636]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ce:	4b9a      	ldr	r3, [pc, #616]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f023 0203 	bic.w	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	4996      	ldr	r1, [pc, #600]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f0:	4b91      	ldr	r3, [pc, #580]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 020c 	bic.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	498e      	ldr	r1, [pc, #568]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a12:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	4985      	ldr	r1, [pc, #532]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a34:	4b80      	ldr	r3, [pc, #512]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	497d      	ldr	r1, [pc, #500]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a56:	4b78      	ldr	r3, [pc, #480]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	4974      	ldr	r1, [pc, #464]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a78:	4b6f      	ldr	r3, [pc, #444]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	496c      	ldr	r1, [pc, #432]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9a:	4b67      	ldr	r3, [pc, #412]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa8:	4963      	ldr	r1, [pc, #396]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004abc:	4b5e      	ldr	r3, [pc, #376]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aca:	495b      	ldr	r1, [pc, #364]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ade:	4b56      	ldr	r3, [pc, #344]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aec:	4952      	ldr	r1, [pc, #328]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b00:	4b4d      	ldr	r3, [pc, #308]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	494a      	ldr	r1, [pc, #296]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b22:	4b45      	ldr	r3, [pc, #276]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	4941      	ldr	r1, [pc, #260]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b44:	4b3c      	ldr	r3, [pc, #240]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b4a:	f023 0203 	bic.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b52:	4939      	ldr	r1, [pc, #228]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d028      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b66:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b74:	4930      	ldr	r1, [pc, #192]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b84:	d106      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	4a2b      	ldr	r2, [pc, #172]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b90:	60d3      	str	r3, [r2, #12]
 8004b92:	e011      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f945 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004bb4:	7cfb      	ldrb	r3, [r7, #19]
 8004bb6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d04d      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bcc:	d108      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004bce:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bd4:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004bde:	e012      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004be0:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004be6:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004bf0:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfe:	490e      	ldr	r1, [pc, #56]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
 8004c1c:	e020      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c26:	d109      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a02      	ldr	r2, [pc, #8]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c32:	60d3      	str	r3, [r2, #12]
 8004c34:	e014      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f8f1 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d028      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c6c:	4b68      	ldr	r3, [pc, #416]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	4965      	ldr	r1, [pc, #404]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c8c:	4b60      	ldr	r3, [pc, #384]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a5f      	ldr	r2, [pc, #380]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c96:	60d3      	str	r3, [r2, #12]
 8004c98:	e011      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca2:	d10c      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	2101      	movs	r1, #1
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f8c2 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01e      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cca:	4b51      	ldr	r3, [pc, #324]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cda:	494d      	ldr	r1, [pc, #308]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f89d 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d14:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d1a:	f023 0204 	bic.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d24:	493a      	ldr	r1, [pc, #232]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d38:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d3e:	f023 0218 	bic.w	r2, r3, #24
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	4931      	ldr	r1, [pc, #196]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d035      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d5c:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a2b      	ldr	r2, [pc, #172]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d68:	f7fc fe7e 	bl	8001a68 <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d6e:	e009      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d70:	f7fc fe7a 	bl	8001a68 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d902      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	74fb      	strb	r3, [r7, #19]
        break;
 8004d82:	e005      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d84:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ef      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d113      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da6:	491a      	ldr	r1, [pc, #104]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3320      	adds	r3, #32
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f931 	bl	800501c <RCCEx_PLLSAI2_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d017      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	490a      	ldr	r1, [pc, #40]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df6:	d105      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e04:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40021000 	.word	0x40021000

08004e14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e1e:	f043 0304 	orr.w	r3, r3, #4
 8004e22:	6013      	str	r3, [r2, #0]
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000

08004e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e42:	4b72      	ldr	r3, [pc, #456]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e4e:	4b6f      	ldr	r3, [pc, #444]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0203 	and.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d103      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
       ||
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d142      	bne.n	8004eec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
 8004e6a:	e03f      	b.n	8004eec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d018      	beq.n	8004ea6 <RCCEx_PLLSAI1_Config+0x72>
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d825      	bhi.n	8004ec4 <RCCEx_PLLSAI1_Config+0x90>
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d002      	beq.n	8004e82 <RCCEx_PLLSAI1_Config+0x4e>
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d009      	beq.n	8004e94 <RCCEx_PLLSAI1_Config+0x60>
 8004e80:	e020      	b.n	8004ec4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e82:	4b62      	ldr	r3, [pc, #392]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d11d      	bne.n	8004eca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e92:	e01a      	b.n	8004eca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e94:	4b5d      	ldr	r3, [pc, #372]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d116      	bne.n	8004ece <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea4:	e013      	b.n	8004ece <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ea6:	4b59      	ldr	r3, [pc, #356]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eb2:	4b56      	ldr	r3, [pc, #344]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ec2:	e006      	b.n	8004ed2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec8:	e004      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d108      	bne.n	8004eec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004eda:	4b4c      	ldr	r3, [pc, #304]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4949      	ldr	r1, [pc, #292]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8086 	bne.w	8005000 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ef4:	4b45      	ldr	r3, [pc, #276]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a44      	ldr	r2, [pc, #272]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fc fdb2 	bl	8001a68 <HAL_GetTick>
 8004f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f06:	e009      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f08:	f7fc fdae 	bl	8001a68 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d902      	bls.n	8004f1c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	73fb      	strb	r3, [r7, #15]
        break;
 8004f1a:	e005      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f1c:	4b3b      	ldr	r3, [pc, #236]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ef      	bne.n	8004f08 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d168      	bne.n	8005000 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d113      	bne.n	8004f5c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f34:	4b35      	ldr	r3, [pc, #212]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	4b35      	ldr	r3, [pc, #212]	; (8005010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6892      	ldr	r2, [r2, #8]
 8004f40:	0211      	lsls	r1, r2, #8
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68d2      	ldr	r2, [r2, #12]
 8004f46:	06d2      	lsls	r2, r2, #27
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6852      	ldr	r2, [r2, #4]
 8004f4e:	3a01      	subs	r2, #1
 8004f50:	0112      	lsls	r2, r2, #4
 8004f52:	430a      	orrs	r2, r1
 8004f54:	492d      	ldr	r1, [pc, #180]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	610b      	str	r3, [r1, #16]
 8004f5a:	e02d      	b.n	8004fb8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d115      	bne.n	8004f8e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f62:	4b2a      	ldr	r3, [pc, #168]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6892      	ldr	r2, [r2, #8]
 8004f6e:	0211      	lsls	r1, r2, #8
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6912      	ldr	r2, [r2, #16]
 8004f74:	0852      	lsrs	r2, r2, #1
 8004f76:	3a01      	subs	r2, #1
 8004f78:	0552      	lsls	r2, r2, #21
 8004f7a:	4311      	orrs	r1, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6852      	ldr	r2, [r2, #4]
 8004f80:	3a01      	subs	r2, #1
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	430a      	orrs	r2, r1
 8004f86:	4921      	ldr	r1, [pc, #132]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	610b      	str	r3, [r1, #16]
 8004f8c:	e014      	b.n	8004fb8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6892      	ldr	r2, [r2, #8]
 8004f9a:	0211      	lsls	r1, r2, #8
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6952      	ldr	r2, [r2, #20]
 8004fa0:	0852      	lsrs	r2, r2, #1
 8004fa2:	3a01      	subs	r2, #1
 8004fa4:	0652      	lsls	r2, r2, #25
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6852      	ldr	r2, [r2, #4]
 8004fac:	3a01      	subs	r2, #1
 8004fae:	0112      	lsls	r2, r2, #4
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	4916      	ldr	r1, [pc, #88]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fb8:	4b14      	ldr	r3, [pc, #80]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a13      	ldr	r2, [pc, #76]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fc fd50 	bl	8001a68 <HAL_GetTick>
 8004fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fca:	e009      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fcc:	f7fc fd4c 	bl	8001a68 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d902      	bls.n	8004fe0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8004fde:	e005      	b.n	8004fec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0ef      	beq.n	8004fcc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	4904      	ldr	r1, [pc, #16]	; (800500c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000
 8005010:	07ff800f 	.word	0x07ff800f
 8005014:	ff9f800f 	.word	0xff9f800f
 8005018:	f9ff800f 	.word	0xf9ff800f

0800501c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800502a:	4b72      	ldr	r3, [pc, #456]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00e      	beq.n	8005054 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005036:	4b6f      	ldr	r3, [pc, #444]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0203 	and.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d103      	bne.n	800504e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
       ||
 800504a:	2b00      	cmp	r3, #0
 800504c:	d142      	bne.n	80050d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	e03f      	b.n	80050d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d018      	beq.n	800508e <RCCEx_PLLSAI2_Config+0x72>
 800505c:	2b03      	cmp	r3, #3
 800505e:	d825      	bhi.n	80050ac <RCCEx_PLLSAI2_Config+0x90>
 8005060:	2b01      	cmp	r3, #1
 8005062:	d002      	beq.n	800506a <RCCEx_PLLSAI2_Config+0x4e>
 8005064:	2b02      	cmp	r3, #2
 8005066:	d009      	beq.n	800507c <RCCEx_PLLSAI2_Config+0x60>
 8005068:	e020      	b.n	80050ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800506a:	4b62      	ldr	r3, [pc, #392]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11d      	bne.n	80050b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800507a:	e01a      	b.n	80050b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800507c:	4b5d      	ldr	r3, [pc, #372]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005084:	2b00      	cmp	r3, #0
 8005086:	d116      	bne.n	80050b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800508c:	e013      	b.n	80050b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800508e:	4b59      	ldr	r3, [pc, #356]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800509a:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050aa:	e006      	b.n	80050ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
      break;
 80050b0:	e004      	b.n	80050bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80050ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d108      	bne.n	80050d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80050c2:	4b4c      	ldr	r3, [pc, #304]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 0203 	bic.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4949      	ldr	r1, [pc, #292]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 8086 	bne.w	80051e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050dc:	4b45      	ldr	r3, [pc, #276]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a44      	ldr	r2, [pc, #272]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e8:	f7fc fcbe 	bl	8001a68 <HAL_GetTick>
 80050ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050ee:	e009      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050f0:	f7fc fcba 	bl	8001a68 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d902      	bls.n	8005104 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	73fb      	strb	r3, [r7, #15]
        break;
 8005102:	e005      	b.n	8005110 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005104:	4b3b      	ldr	r3, [pc, #236]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ef      	bne.n	80050f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d168      	bne.n	80051e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d113      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800511c:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	4b35      	ldr	r3, [pc, #212]	; (80051f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005122:	4013      	ands	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6892      	ldr	r2, [r2, #8]
 8005128:	0211      	lsls	r1, r2, #8
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68d2      	ldr	r2, [r2, #12]
 800512e:	06d2      	lsls	r2, r2, #27
 8005130:	4311      	orrs	r1, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6852      	ldr	r2, [r2, #4]
 8005136:	3a01      	subs	r2, #1
 8005138:	0112      	lsls	r2, r2, #4
 800513a:	430a      	orrs	r2, r1
 800513c:	492d      	ldr	r1, [pc, #180]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800513e:	4313      	orrs	r3, r2
 8005140:	614b      	str	r3, [r1, #20]
 8005142:	e02d      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d115      	bne.n	8005176 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800514a:	4b2a      	ldr	r3, [pc, #168]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	0211      	lsls	r1, r2, #8
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6912      	ldr	r2, [r2, #16]
 800515c:	0852      	lsrs	r2, r2, #1
 800515e:	3a01      	subs	r2, #1
 8005160:	0552      	lsls	r2, r2, #21
 8005162:	4311      	orrs	r1, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6852      	ldr	r2, [r2, #4]
 8005168:	3a01      	subs	r2, #1
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	430a      	orrs	r2, r1
 800516e:	4921      	ldr	r1, [pc, #132]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005170:	4313      	orrs	r3, r2
 8005172:	614b      	str	r3, [r1, #20]
 8005174:	e014      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005176:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	4b21      	ldr	r3, [pc, #132]	; (8005200 <RCCEx_PLLSAI2_Config+0x1e4>)
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6892      	ldr	r2, [r2, #8]
 8005182:	0211      	lsls	r1, r2, #8
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6952      	ldr	r2, [r2, #20]
 8005188:	0852      	lsrs	r2, r2, #1
 800518a:	3a01      	subs	r2, #1
 800518c:	0652      	lsls	r2, r2, #25
 800518e:	4311      	orrs	r1, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6852      	ldr	r2, [r2, #4]
 8005194:	3a01      	subs	r2, #1
 8005196:	0112      	lsls	r2, r2, #4
 8005198:	430a      	orrs	r2, r1
 800519a:	4916      	ldr	r1, [pc, #88]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800519c:	4313      	orrs	r3, r2
 800519e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fc fc5c 	bl	8001a68 <HAL_GetTick>
 80051b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051b2:	e009      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051b4:	f7fc fc58 	bl	8001a68 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	73fb      	strb	r3, [r7, #15]
          break;
 80051c6:	e005      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051c8:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ef      	beq.n	80051b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	4904      	ldr	r1, [pc, #16]	; (80051f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000
 80051f8:	07ff800f 	.word	0x07ff800f
 80051fc:	ff9f800f 	.word	0xff9f800f
 8005200:	f9ff800f 	.word	0xf9ff800f

08005204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e042      	b.n	800529c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fc f9bd 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2224      	movs	r2, #36	; 0x24
 8005232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8c2 	bl	80053d0 <UART_SetConfig>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e022      	b.n	800529c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fbb2 	bl	80059c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fc39 	bl	8005b0c <UART_CheckIdleState>
 800529a:	4603      	mov	r3, r0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	f040 8083 	bne.w	80053c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Transmit+0x28>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e07b      	b.n	80053c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_UART_Transmit+0x3a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e074      	b.n	80053c8 <HAL_UART_Transmit+0x124>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2221      	movs	r2, #33	; 0x21
 80052f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052f6:	f7fc fbb7 	bl	8001a68 <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d108      	bne.n	8005328 <HAL_UART_Transmit+0x84>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e003      	b.n	8005330 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005338:	e02c      	b.n	8005394 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fc2c 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e039      	b.n	80053c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3302      	adds	r3, #2
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	e007      	b.n	8005382 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	781a      	ldrb	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1cc      	bne.n	800533a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2200      	movs	r2, #0
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fbf9 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e006      	b.n	80053c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e000      	b.n	80053c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80053c6:	2302      	movs	r3, #2
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d4:	b08c      	sub	sp, #48	; 0x30
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4baa      	ldr	r3, [pc, #680]	; (80056a8 <UART_SetConfig+0x2d8>)
 8005400:	4013      	ands	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005408:	430b      	orrs	r3, r1
 800540a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a9f      	ldr	r2, [pc, #636]	; (80056ac <UART_SetConfig+0x2dc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005438:	4313      	orrs	r3, r2
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005446:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005450:	430b      	orrs	r3, r1
 8005452:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	f023 010f 	bic.w	r1, r3, #15
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a90      	ldr	r2, [pc, #576]	; (80056b0 <UART_SetConfig+0x2e0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d125      	bne.n	80054c0 <UART_SetConfig+0xf0>
 8005474:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d81a      	bhi.n	80054b8 <UART_SetConfig+0xe8>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0xb8>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	080054a9 	.word	0x080054a9
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054b1 	.word	0x080054b1
 8005498:	2301      	movs	r3, #1
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549e:	e116      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a6:	e112      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ae:	e10e      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b6:	e10a      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054be:	e106      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7c      	ldr	r2, [pc, #496]	; (80056b8 <UART_SetConfig+0x2e8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d138      	bne.n	800553c <UART_SetConfig+0x16c>
 80054ca:	4b7a      	ldr	r3, [pc, #488]	; (80056b4 <UART_SetConfig+0x2e4>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d82d      	bhi.n	8005534 <UART_SetConfig+0x164>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x110>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005535 	.word	0x08005535
 80054ec:	08005535 	.word	0x08005535
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005535 	.word	0x08005535
 80054f8:	08005535 	.word	0x08005535
 80054fc:	08005535 	.word	0x08005535
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005535 	.word	0x08005535
 8005508:	08005535 	.word	0x08005535
 800550c:	08005535 	.word	0x08005535
 8005510:	0800552d 	.word	0x0800552d
 8005514:	2300      	movs	r3, #0
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800551a:	e0d8      	b.n	80056ce <UART_SetConfig+0x2fe>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005522:	e0d4      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800552a:	e0d0      	b.n	80056ce <UART_SetConfig+0x2fe>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005532:	e0cc      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553a:	e0c8      	b.n	80056ce <UART_SetConfig+0x2fe>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <UART_SetConfig+0x2ec>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d125      	bne.n	8005592 <UART_SetConfig+0x1c2>
 8005546:	4b5b      	ldr	r3, [pc, #364]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d016      	beq.n	8005582 <UART_SetConfig+0x1b2>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d818      	bhi.n	800558a <UART_SetConfig+0x1ba>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d00a      	beq.n	8005572 <UART_SetConfig+0x1a2>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d814      	bhi.n	800558a <UART_SetConfig+0x1ba>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <UART_SetConfig+0x19a>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d008      	beq.n	800557a <UART_SetConfig+0x1aa>
 8005568:	e00f      	b.n	800558a <UART_SetConfig+0x1ba>
 800556a:	2300      	movs	r3, #0
 800556c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005570:	e0ad      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005572:	2302      	movs	r3, #2
 8005574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005578:	e0a9      	b.n	80056ce <UART_SetConfig+0x2fe>
 800557a:	2304      	movs	r3, #4
 800557c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005580:	e0a5      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005582:	2308      	movs	r3, #8
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005588:	e0a1      	b.n	80056ce <UART_SetConfig+0x2fe>
 800558a:	2310      	movs	r3, #16
 800558c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005590:	e09d      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4a      	ldr	r2, [pc, #296]	; (80056c0 <UART_SetConfig+0x2f0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d125      	bne.n	80055e8 <UART_SetConfig+0x218>
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <UART_SetConfig+0x2e4>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055a6:	2bc0      	cmp	r3, #192	; 0xc0
 80055a8:	d016      	beq.n	80055d8 <UART_SetConfig+0x208>
 80055aa:	2bc0      	cmp	r3, #192	; 0xc0
 80055ac:	d818      	bhi.n	80055e0 <UART_SetConfig+0x210>
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d00a      	beq.n	80055c8 <UART_SetConfig+0x1f8>
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d814      	bhi.n	80055e0 <UART_SetConfig+0x210>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <UART_SetConfig+0x1f0>
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d008      	beq.n	80055d0 <UART_SetConfig+0x200>
 80055be:	e00f      	b.n	80055e0 <UART_SetConfig+0x210>
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c6:	e082      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055c8:	2302      	movs	r3, #2
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ce:	e07e      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d6:	e07a      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055de:	e076      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e6:	e072      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	; (80056c4 <UART_SetConfig+0x2f4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d12a      	bne.n	8005648 <UART_SetConfig+0x278>
 80055f2:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <UART_SetConfig+0x2e4>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005600:	d01a      	beq.n	8005638 <UART_SetConfig+0x268>
 8005602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005606:	d81b      	bhi.n	8005640 <UART_SetConfig+0x270>
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d00c      	beq.n	8005628 <UART_SetConfig+0x258>
 800560e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005612:	d815      	bhi.n	8005640 <UART_SetConfig+0x270>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <UART_SetConfig+0x250>
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	d008      	beq.n	8005630 <UART_SetConfig+0x260>
 800561e:	e00f      	b.n	8005640 <UART_SetConfig+0x270>
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005626:	e052      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e04e      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e04a      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e046      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e042      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <UART_SetConfig+0x2dc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d13a      	bne.n	80056c8 <UART_SetConfig+0x2f8>
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800565c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005660:	d01a      	beq.n	8005698 <UART_SetConfig+0x2c8>
 8005662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0x2d0>
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d00c      	beq.n	8005688 <UART_SetConfig+0x2b8>
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d815      	bhi.n	80056a0 <UART_SetConfig+0x2d0>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <UART_SetConfig+0x2b0>
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0x2c0>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x2d0>
 8005680:	2300      	movs	r3, #0
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e022      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e01e      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e01a      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e016      	b.n	80056ce <UART_SetConfig+0x2fe>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e012      	b.n	80056ce <UART_SetConfig+0x2fe>
 80056a8:	cfff69f3 	.word	0xcfff69f3
 80056ac:	40008000 	.word	0x40008000
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40004400 	.word	0x40004400
 80056bc:	40004800 	.word	0x40004800
 80056c0:	40004c00 	.word	0x40004c00
 80056c4:	40005000 	.word	0x40005000
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4aae      	ldr	r2, [pc, #696]	; (800598c <UART_SetConfig+0x5bc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	f040 8097 	bne.w	8005808 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d823      	bhi.n	800572a <UART_SetConfig+0x35a>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x318>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800571b 	.word	0x0800571b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fe ff2a 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005712:	e010      	b.n	8005736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b9e      	ldr	r3, [pc, #632]	; (8005990 <UART_SetConfig+0x5c0>)
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005718:	e00d      	b.n	8005736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe fe8b 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8130 	beq.w	800599e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	4a94      	ldr	r2, [pc, #592]	; (8005994 <UART_SetConfig+0x5c4>)
 8005744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005748:	461a      	mov	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005750:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	429a      	cmp	r2, r3
 8005760:	d305      	bcc.n	800576e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	429a      	cmp	r2, r3
 800576c:	d903      	bls.n	8005776 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005774:	e113      	b.n	800599e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2200      	movs	r2, #0
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	60fa      	str	r2, [r7, #12]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	4a84      	ldr	r2, [pc, #528]	; (8005994 <UART_SetConfig+0x5c4>)
 8005784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005788:	b29b      	uxth	r3, r3
 800578a:	2200      	movs	r2, #0
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005798:	f7fb fa1e 	bl	8000bd8 <__aeabi_uldivmod>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	020b      	lsls	r3, r1, #8
 80057ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057b2:	0202      	lsls	r2, r0, #8
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	6849      	ldr	r1, [r1, #4]
 80057b8:	0849      	lsrs	r1, r1, #1
 80057ba:	2000      	movs	r0, #0
 80057bc:	460c      	mov	r4, r1
 80057be:	4605      	mov	r5, r0
 80057c0:	eb12 0804 	adds.w	r8, r2, r4
 80057c4:	eb43 0905 	adc.w	r9, r3, r5
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	469a      	mov	sl, r3
 80057d0:	4693      	mov	fp, r2
 80057d2:	4652      	mov	r2, sl
 80057d4:	465b      	mov	r3, fp
 80057d6:	4640      	mov	r0, r8
 80057d8:	4649      	mov	r1, r9
 80057da:	f7fb f9fd 	bl	8000bd8 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4613      	mov	r3, r2
 80057e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ec:	d308      	bcc.n	8005800 <UART_SetConfig+0x430>
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f4:	d204      	bcs.n	8005800 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	e0ce      	b.n	800599e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005806:	e0ca      	b.n	800599e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005810:	d166      	bne.n	80058e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005816:	2b08      	cmp	r3, #8
 8005818:	d827      	bhi.n	800586a <UART_SetConfig+0x49a>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x450>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005845 	.word	0x08005845
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005855 	.word	0x08005855
 800582c:	0800586b 	.word	0x0800586b
 8005830:	0800585b 	.word	0x0800585b
 8005834:	0800586b 	.word	0x0800586b
 8005838:	0800586b 	.word	0x0800586b
 800583c:	0800586b 	.word	0x0800586b
 8005840:	08005863 	.word	0x08005863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe fe8e 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800584a:	e014      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fe fea0 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 8005850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005852:	e010      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005854:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <UART_SetConfig+0x5c0>)
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005858:	e00d      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585a:	f7fe fdeb 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005860:	e009      	b.n	8005876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005868:	e005      	b.n	8005876 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8090 	beq.w	800599e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	4a44      	ldr	r2, [pc, #272]	; (8005994 <UART_SetConfig+0x5c4>)
 8005884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005888:	461a      	mov	r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d916      	bls.n	80058d8 <UART_SetConfig+0x508>
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d212      	bcs.n	80058d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f023 030f 	bic.w	r3, r3, #15
 80058ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	8bfb      	ldrh	r3, [r7, #30]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	8bfa      	ldrh	r2, [r7, #30]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	e062      	b.n	800599e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058de:	e05e      	b.n	800599e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d828      	bhi.n	800593a <UART_SetConfig+0x56a>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x520>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fe fe26 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800591a:	e014      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fe fe38 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005922:	e010      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <UART_SetConfig+0x5c0>)
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005928:	e00d      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe fd83 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 800592e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005930:	e009      	b.n	8005946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005938:	e005      	b.n	8005946 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005944:	bf00      	nop
    }

    if (pclk != 0U)
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	d028      	beq.n	800599e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	4a10      	ldr	r2, [pc, #64]	; (8005994 <UART_SetConfig+0x5c4>)
 8005952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005956:	461a      	mov	r2, r3
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	fbb3 f2f2 	udiv	r2, r3, r2
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	441a      	add	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d910      	bls.n	8005998 <UART_SetConfig+0x5c8>
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d20c      	bcs.n	8005998 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	b29a      	uxth	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
 8005988:	e009      	b.n	800599e <UART_SetConfig+0x5ce>
 800598a:	bf00      	nop
 800598c:	40008000 	.word	0x40008000
 8005990:	00f42400 	.word	0x00f42400
 8005994:	0800a580 	.word	0x0800a580
      }
      else
      {
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2200      	movs	r2, #0
 80059b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80059ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3730      	adds	r7, #48	; 0x30
 80059c2:	46bd      	mov	sp, r7
 80059c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01a      	beq.n	8005ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac6:	d10a      	bne.n	8005ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b1c:	f7fb ffa4 	bl	8001a68 <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d10e      	bne.n	8005b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f82f 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e025      	b.n	8005b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d10e      	bne.n	8005b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f819 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e00f      	b.n	8005b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b09c      	sub	sp, #112	; 0x70
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb2:	e0a9      	b.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	f000 80a5 	beq.w	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fb ff53 	bl	8001a68 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d140      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005be8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e6      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e069      	b.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d051      	beq.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c72:	d149      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e6      	bne.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cd0:	623a      	str	r2, [r7, #32]
 8005cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	69f9      	ldr	r1, [r7, #28]
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e010      	b.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4013      	ands	r3, r2
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	f43f af46 	beq.w	8005bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3770      	adds	r7, #112	; 0x70
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e027      	b.n	8005d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	; 0x24
 8005d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e02d      	b.n	8005e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2224      	movs	r2, #36	; 0x24
 8005dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f84f 	bl	8005e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e02d      	b.n	8005e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2224      	movs	r2, #36	; 0x24
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0201 	bic.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f811 	bl	8005e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ebc:	e031      	b.n	8005f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	0e5b      	lsrs	r3, r3, #25
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	0f5b      	lsrs	r3, r3, #29
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	7b3a      	ldrb	r2, [r7, #12]
 8005eea:	4911      	ldr	r1, [pc, #68]	; (8005f30 <UARTEx_SetNbDataToProcess+0x94>)
 8005eec:	5c8a      	ldrb	r2, [r1, r2]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ef2:	7b3a      	ldrb	r2, [r7, #12]
 8005ef4:	490f      	ldr	r1, [pc, #60]	; (8005f34 <UARTEx_SetNbDataToProcess+0x98>)
 8005ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	7b7a      	ldrb	r2, [r7, #13]
 8005f08:	4909      	ldr	r1, [pc, #36]	; (8005f30 <UARTEx_SetNbDataToProcess+0x94>)
 8005f0a:	5c8a      	ldrb	r2, [r1, r2]
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f10:	7b7a      	ldrb	r2, [r7, #13]
 8005f12:	4908      	ldr	r1, [pc, #32]	; (8005f34 <UARTEx_SetNbDataToProcess+0x98>)
 8005f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	0800a598 	.word	0x0800a598
 8005f34:	0800a5a0 	.word	0x0800a5a0

08005f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f38:	b084      	sub	sp, #16
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	f107 001c 	add.w	r0, r7, #28
 8005f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa70 	bl	800643c <USB_CoreReset>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
 8005f72:	e005      	b.n	8005f80 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f8c:	b004      	add	sp, #16
 8005f8e:	4770      	bx	lr

08005f90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f023 0201 	bic.w	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d115      	bne.n	8006000 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	f7fb fd4d 	bl	8001a80 <HAL_Delay>
      ms++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fa17 	bl	8006420 <USB_GetMode>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d01e      	beq.n	8006036 <USB_SetCurrentMode+0x84>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b31      	cmp	r3, #49	; 0x31
 8005ffc:	d9f0      	bls.n	8005fe0 <USB_SetCurrentMode+0x2e>
 8005ffe:	e01a      	b.n	8006036 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d115      	bne.n	8006032 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006012:	2001      	movs	r0, #1
 8006014:	f7fb fd34 	bl	8001a80 <HAL_Delay>
      ms++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9fe 	bl	8006420 <USB_GetMode>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <USB_SetCurrentMode+0x84>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b31      	cmp	r3, #49	; 0x31
 800602e:	d9f0      	bls.n	8006012 <USB_SetCurrentMode+0x60>
 8006030:	e001      	b.n	8006036 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e005      	b.n	8006042 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b32      	cmp	r3, #50	; 0x32
 800603a:	d101      	bne.n	8006040 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800604c:	b084      	sub	sp, #16
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800605a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e009      	b.n	8006080 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3340      	adds	r3, #64	; 0x40
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	2200      	movs	r2, #0
 8006078:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b0e      	cmp	r3, #14
 8006084:	d9f2      	bls.n	800606c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11c      	bne.n	80060c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800609a:	f043 0302 	orr.w	r3, r3, #2
 800609e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e005      	b.n	80060d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d8:	461a      	mov	r2, r3
 80060da:	2300      	movs	r3, #0
 80060dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	4619      	mov	r1, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ec:	461a      	mov	r2, r3
 80060ee:	680b      	ldr	r3, [r1, #0]
 80060f0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060f2:	2103      	movs	r1, #3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f959 	bl	80063ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060fa:	2110      	movs	r1, #16
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8f1 	bl	80062e4 <USB_FlushTxFifo>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f91d 	bl	800634c <USB_FlushRxFifo>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	461a      	mov	r2, r3
 8006130:	2300      	movs	r3, #0
 8006132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	461a      	mov	r2, r3
 800613c:	2300      	movs	r3, #0
 800613e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e043      	b.n	80061ce <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615c:	d118      	bne.n	8006190 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	461a      	mov	r2, r3
 8006172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e013      	b.n	80061a2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	461a      	mov	r2, r3
 8006188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e008      	b.n	80061a2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	461a      	mov	r2, r3
 80061c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d3b7      	bcc.n	8006146 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	e043      	b.n	8006264 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f2:	d118      	bne.n	8006226 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	461a      	mov	r2, r3
 8006208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e013      	b.n	8006238 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	461a      	mov	r2, r3
 800621e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e008      	b.n	8006238 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	461a      	mov	r2, r3
 8006246:	2300      	movs	r3, #0
 8006248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	461a      	mov	r2, r3
 8006258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800625c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3301      	adds	r3, #1
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	429a      	cmp	r2, r3
 800626a:	d3b7      	bcc.n	80061dc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800627e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800628c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f043 0210 	orr.w	r2, r3, #16
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <USB_DevInit+0x294>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f043 0208 	orr.w	r2, r3, #8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c6:	f043 0304 	orr.w	r3, r3, #4
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062da:	b004      	add	sp, #16
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	803c3800 	.word	0x803c3800

080062e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4a13      	ldr	r2, [pc, #76]	; (8006348 <USB_FlushTxFifo+0x64>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e01b      	b.n	800633c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	daf2      	bge.n	80062f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	019b      	lsls	r3, r3, #6
 8006314:	f043 0220 	orr.w	r2, r3, #32
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4a08      	ldr	r2, [pc, #32]	; (8006348 <USB_FlushTxFifo+0x64>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e006      	b.n	800633c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b20      	cmp	r3, #32
 8006338:	d0f0      	beq.n	800631c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	00030d40 	.word	0x00030d40

0800634c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a11      	ldr	r2, [pc, #68]	; (80063a8 <USB_FlushRxFifo+0x5c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e018      	b.n	800639c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	daf2      	bge.n	8006358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2210      	movs	r2, #16
 800637a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a08      	ldr	r2, [pc, #32]	; (80063a8 <USB_FlushRxFifo+0x5c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e006      	b.n	800639c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	2b10      	cmp	r3, #16
 8006398:	d0f0      	beq.n	800637c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	00030d40 	.word	0x00030d40

080063ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063cc:	4313      	orrs	r3, r2
 80063ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063f8:	f023 0303 	bic.w	r3, r3, #3
 80063fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f003 0301 	and.w	r3, r3, #1
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a13      	ldr	r2, [pc, #76]	; (80064a0 <USB_CoreReset+0x64>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e01b      	b.n	8006492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	daf2      	bge.n	8006448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f043 0201 	orr.w	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3301      	adds	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <USB_CoreReset+0x64>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e006      	b.n	8006492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b01      	cmp	r3, #1
 800648e:	d0f0      	beq.n	8006472 <USB_CoreReset+0x36>

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	00030d40 	.word	0x00030d40
 80064a4:	00000000 	.word	0x00000000

080064a8 <log>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	ed2d 8b02 	vpush	{d8}
 80064ae:	ec55 4b10 	vmov	r4, r5, d0
 80064b2:	f000 f8a9 	bl	8006608 <__ieee754_log>
 80064b6:	4622      	mov	r2, r4
 80064b8:	462b      	mov	r3, r5
 80064ba:	4620      	mov	r0, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	eeb0 8a40 	vmov.f32	s16, s0
 80064c2:	eef0 8a60 	vmov.f32	s17, s1
 80064c6:	f7fa fb49 	bl	8000b5c <__aeabi_dcmpun>
 80064ca:	b998      	cbnz	r0, 80064f4 <log+0x4c>
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	4620      	mov	r0, r4
 80064d2:	4629      	mov	r1, r5
 80064d4:	f7fa fb38 	bl	8000b48 <__aeabi_dcmpgt>
 80064d8:	b960      	cbnz	r0, 80064f4 <log+0x4c>
 80064da:	2200      	movs	r2, #0
 80064dc:	2300      	movs	r3, #0
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7fa fb09 	bl	8000af8 <__aeabi_dcmpeq>
 80064e6:	b160      	cbz	r0, 8006502 <log+0x5a>
 80064e8:	f001 f8fc 	bl	80076e4 <__errno>
 80064ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8006518 <log+0x70>
 80064f0:	2322      	movs	r3, #34	; 0x22
 80064f2:	6003      	str	r3, [r0, #0]
 80064f4:	eeb0 0a48 	vmov.f32	s0, s16
 80064f8:	eef0 0a68 	vmov.f32	s1, s17
 80064fc:	ecbd 8b02 	vpop	{d8}
 8006500:	bd38      	pop	{r3, r4, r5, pc}
 8006502:	f001 f8ef 	bl	80076e4 <__errno>
 8006506:	ecbd 8b02 	vpop	{d8}
 800650a:	2321      	movs	r3, #33	; 0x21
 800650c:	6003      	str	r3, [r0, #0]
 800650e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006512:	4803      	ldr	r0, [pc, #12]	; (8006520 <log+0x78>)
 8006514:	f001 b858 	b.w	80075c8 <nan>
 8006518:	00000000 	.word	0x00000000
 800651c:	fff00000 	.word	0xfff00000
 8006520:	0800a848 	.word	0x0800a848

08006524 <pow>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	ed2d 8b02 	vpush	{d8}
 800652a:	eeb0 8a40 	vmov.f32	s16, s0
 800652e:	eef0 8a60 	vmov.f32	s17, s1
 8006532:	ec55 4b11 	vmov	r4, r5, d1
 8006536:	f000 fa23 	bl	8006980 <__ieee754_pow>
 800653a:	4622      	mov	r2, r4
 800653c:	462b      	mov	r3, r5
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	ec57 6b10 	vmov	r6, r7, d0
 8006546:	f7fa fb09 	bl	8000b5c <__aeabi_dcmpun>
 800654a:	2800      	cmp	r0, #0
 800654c:	d13b      	bne.n	80065c6 <pow+0xa2>
 800654e:	ec51 0b18 	vmov	r0, r1, d8
 8006552:	2200      	movs	r2, #0
 8006554:	2300      	movs	r3, #0
 8006556:	f7fa facf 	bl	8000af8 <__aeabi_dcmpeq>
 800655a:	b1b8      	cbz	r0, 800658c <pow+0x68>
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	4620      	mov	r0, r4
 8006562:	4629      	mov	r1, r5
 8006564:	f7fa fac8 	bl	8000af8 <__aeabi_dcmpeq>
 8006568:	2800      	cmp	r0, #0
 800656a:	d146      	bne.n	80065fa <pow+0xd6>
 800656c:	ec45 4b10 	vmov	d0, r4, r5
 8006570:	f001 f81f 	bl	80075b2 <finite>
 8006574:	b338      	cbz	r0, 80065c6 <pow+0xa2>
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	4620      	mov	r0, r4
 800657c:	4629      	mov	r1, r5
 800657e:	f7fa fac5 	bl	8000b0c <__aeabi_dcmplt>
 8006582:	b300      	cbz	r0, 80065c6 <pow+0xa2>
 8006584:	f001 f8ae 	bl	80076e4 <__errno>
 8006588:	2322      	movs	r3, #34	; 0x22
 800658a:	e01b      	b.n	80065c4 <pow+0xa0>
 800658c:	ec47 6b10 	vmov	d0, r6, r7
 8006590:	f001 f80f 	bl	80075b2 <finite>
 8006594:	b9e0      	cbnz	r0, 80065d0 <pow+0xac>
 8006596:	eeb0 0a48 	vmov.f32	s0, s16
 800659a:	eef0 0a68 	vmov.f32	s1, s17
 800659e:	f001 f808 	bl	80075b2 <finite>
 80065a2:	b1a8      	cbz	r0, 80065d0 <pow+0xac>
 80065a4:	ec45 4b10 	vmov	d0, r4, r5
 80065a8:	f001 f803 	bl	80075b2 <finite>
 80065ac:	b180      	cbz	r0, 80065d0 <pow+0xac>
 80065ae:	4632      	mov	r2, r6
 80065b0:	463b      	mov	r3, r7
 80065b2:	4630      	mov	r0, r6
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7fa fad1 	bl	8000b5c <__aeabi_dcmpun>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d0e2      	beq.n	8006584 <pow+0x60>
 80065be:	f001 f891 	bl	80076e4 <__errno>
 80065c2:	2321      	movs	r3, #33	; 0x21
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	ecbd 8b02 	vpop	{d8}
 80065ca:	ec47 6b10 	vmov	d0, r6, r7
 80065ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d0:	2200      	movs	r2, #0
 80065d2:	2300      	movs	r3, #0
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7fa fa8e 	bl	8000af8 <__aeabi_dcmpeq>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0f2      	beq.n	80065c6 <pow+0xa2>
 80065e0:	eeb0 0a48 	vmov.f32	s0, s16
 80065e4:	eef0 0a68 	vmov.f32	s1, s17
 80065e8:	f000 ffe3 	bl	80075b2 <finite>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d0ea      	beq.n	80065c6 <pow+0xa2>
 80065f0:	ec45 4b10 	vmov	d0, r4, r5
 80065f4:	f000 ffdd 	bl	80075b2 <finite>
 80065f8:	e7c3      	b.n	8006582 <pow+0x5e>
 80065fa:	4f01      	ldr	r7, [pc, #4]	; (8006600 <pow+0xdc>)
 80065fc:	2600      	movs	r6, #0
 80065fe:	e7e2      	b.n	80065c6 <pow+0xa2>
 8006600:	3ff00000 	.word	0x3ff00000
 8006604:	00000000 	.word	0x00000000

08006608 <__ieee754_log>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	ec51 0b10 	vmov	r0, r1, d0
 8006610:	ed2d 8b04 	vpush	{d8-d9}
 8006614:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006618:	b083      	sub	sp, #12
 800661a:	460d      	mov	r5, r1
 800661c:	da29      	bge.n	8006672 <__ieee754_log+0x6a>
 800661e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006622:	4303      	orrs	r3, r0
 8006624:	ee10 2a10 	vmov	r2, s0
 8006628:	d10c      	bne.n	8006644 <__ieee754_log+0x3c>
 800662a:	49cf      	ldr	r1, [pc, #828]	; (8006968 <__ieee754_log+0x360>)
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	2000      	movs	r0, #0
 8006632:	f7fa f923 	bl	800087c <__aeabi_ddiv>
 8006636:	ec41 0b10 	vmov	d0, r0, r1
 800663a:	b003      	add	sp, #12
 800663c:	ecbd 8b04 	vpop	{d8-d9}
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	2900      	cmp	r1, #0
 8006646:	da05      	bge.n	8006654 <__ieee754_log+0x4c>
 8006648:	460b      	mov	r3, r1
 800664a:	f7f9 fe35 	bl	80002b8 <__aeabi_dsub>
 800664e:	2200      	movs	r2, #0
 8006650:	2300      	movs	r3, #0
 8006652:	e7ee      	b.n	8006632 <__ieee754_log+0x2a>
 8006654:	4bc5      	ldr	r3, [pc, #788]	; (800696c <__ieee754_log+0x364>)
 8006656:	2200      	movs	r2, #0
 8006658:	f7f9 ffe6 	bl	8000628 <__aeabi_dmul>
 800665c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006660:	460d      	mov	r5, r1
 8006662:	4ac3      	ldr	r2, [pc, #780]	; (8006970 <__ieee754_log+0x368>)
 8006664:	4295      	cmp	r5, r2
 8006666:	dd06      	ble.n	8006676 <__ieee754_log+0x6e>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	f7f9 fe26 	bl	80002bc <__adddf3>
 8006670:	e7e1      	b.n	8006636 <__ieee754_log+0x2e>
 8006672:	2300      	movs	r3, #0
 8006674:	e7f5      	b.n	8006662 <__ieee754_log+0x5a>
 8006676:	152c      	asrs	r4, r5, #20
 8006678:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800667c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006680:	441c      	add	r4, r3
 8006682:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006686:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800668a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800668e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006692:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006696:	ea42 0105 	orr.w	r1, r2, r5
 800669a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800669e:	2200      	movs	r2, #0
 80066a0:	4bb4      	ldr	r3, [pc, #720]	; (8006974 <__ieee754_log+0x36c>)
 80066a2:	f7f9 fe09 	bl	80002b8 <__aeabi_dsub>
 80066a6:	1cab      	adds	r3, r5, #2
 80066a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	4682      	mov	sl, r0
 80066b0:	468b      	mov	fp, r1
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	dc53      	bgt.n	8006760 <__ieee754_log+0x158>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f7fa fa1d 	bl	8000af8 <__aeabi_dcmpeq>
 80066be:	b1d0      	cbz	r0, 80066f6 <__ieee754_log+0xee>
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	f000 8122 	beq.w	800690a <__ieee754_log+0x302>
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7f9 ff44 	bl	8000554 <__aeabi_i2d>
 80066cc:	a390      	add	r3, pc, #576	; (adr r3, 8006910 <__ieee754_log+0x308>)
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	4606      	mov	r6, r0
 80066d4:	460f      	mov	r7, r1
 80066d6:	f7f9 ffa7 	bl	8000628 <__aeabi_dmul>
 80066da:	a38f      	add	r3, pc, #572	; (adr r3, 8006918 <__ieee754_log+0x310>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	4604      	mov	r4, r0
 80066e2:	460d      	mov	r5, r1
 80066e4:	4630      	mov	r0, r6
 80066e6:	4639      	mov	r1, r7
 80066e8:	f7f9 ff9e 	bl	8000628 <__aeabi_dmul>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4620      	mov	r0, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	e7ba      	b.n	800666c <__ieee754_log+0x64>
 80066f6:	a38a      	add	r3, pc, #552	; (adr r3, 8006920 <__ieee754_log+0x318>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	4650      	mov	r0, sl
 80066fe:	4659      	mov	r1, fp
 8006700:	f7f9 ff92 	bl	8000628 <__aeabi_dmul>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	2000      	movs	r0, #0
 800670a:	499b      	ldr	r1, [pc, #620]	; (8006978 <__ieee754_log+0x370>)
 800670c:	f7f9 fdd4 	bl	80002b8 <__aeabi_dsub>
 8006710:	4652      	mov	r2, sl
 8006712:	4606      	mov	r6, r0
 8006714:	460f      	mov	r7, r1
 8006716:	465b      	mov	r3, fp
 8006718:	4650      	mov	r0, sl
 800671a:	4659      	mov	r1, fp
 800671c:	f7f9 ff84 	bl	8000628 <__aeabi_dmul>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7f9 ff7e 	bl	8000628 <__aeabi_dmul>
 800672c:	4606      	mov	r6, r0
 800672e:	460f      	mov	r7, r1
 8006730:	b914      	cbnz	r4, 8006738 <__ieee754_log+0x130>
 8006732:	4632      	mov	r2, r6
 8006734:	463b      	mov	r3, r7
 8006736:	e0a2      	b.n	800687e <__ieee754_log+0x276>
 8006738:	4620      	mov	r0, r4
 800673a:	f7f9 ff0b 	bl	8000554 <__aeabi_i2d>
 800673e:	a374      	add	r3, pc, #464	; (adr r3, 8006910 <__ieee754_log+0x308>)
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	4680      	mov	r8, r0
 8006746:	4689      	mov	r9, r1
 8006748:	f7f9 ff6e 	bl	8000628 <__aeabi_dmul>
 800674c:	a372      	add	r3, pc, #456	; (adr r3, 8006918 <__ieee754_log+0x310>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	4604      	mov	r4, r0
 8006754:	460d      	mov	r5, r1
 8006756:	4640      	mov	r0, r8
 8006758:	4649      	mov	r1, r9
 800675a:	f7f9 ff65 	bl	8000628 <__aeabi_dmul>
 800675e:	e0a7      	b.n	80068b0 <__ieee754_log+0x2a8>
 8006760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006764:	f7f9 fdaa 	bl	80002bc <__adddf3>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4650      	mov	r0, sl
 800676e:	4659      	mov	r1, fp
 8006770:	f7fa f884 	bl	800087c <__aeabi_ddiv>
 8006774:	ec41 0b18 	vmov	d8, r0, r1
 8006778:	4620      	mov	r0, r4
 800677a:	f7f9 feeb 	bl	8000554 <__aeabi_i2d>
 800677e:	ec53 2b18 	vmov	r2, r3, d8
 8006782:	ec41 0b19 	vmov	d9, r0, r1
 8006786:	ec51 0b18 	vmov	r0, r1, d8
 800678a:	f7f9 ff4d 	bl	8000628 <__aeabi_dmul>
 800678e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006792:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4680      	mov	r8, r0
 800679e:	4689      	mov	r9, r1
 80067a0:	f7f9 ff42 	bl	8000628 <__aeabi_dmul>
 80067a4:	a360      	add	r3, pc, #384	; (adr r3, 8006928 <__ieee754_log+0x320>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	f7f9 ff3b 	bl	8000628 <__aeabi_dmul>
 80067b2:	a35f      	add	r3, pc, #380	; (adr r3, 8006930 <__ieee754_log+0x328>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f7f9 fd80 	bl	80002bc <__adddf3>
 80067bc:	4632      	mov	r2, r6
 80067be:	463b      	mov	r3, r7
 80067c0:	f7f9 ff32 	bl	8000628 <__aeabi_dmul>
 80067c4:	a35c      	add	r3, pc, #368	; (adr r3, 8006938 <__ieee754_log+0x330>)
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	f7f9 fd77 	bl	80002bc <__adddf3>
 80067ce:	4632      	mov	r2, r6
 80067d0:	463b      	mov	r3, r7
 80067d2:	f7f9 ff29 	bl	8000628 <__aeabi_dmul>
 80067d6:	a35a      	add	r3, pc, #360	; (adr r3, 8006940 <__ieee754_log+0x338>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f7f9 fd6e 	bl	80002bc <__adddf3>
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	f7f9 ff20 	bl	8000628 <__aeabi_dmul>
 80067e8:	a357      	add	r3, pc, #348	; (adr r3, 8006948 <__ieee754_log+0x340>)
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	4680      	mov	r8, r0
 80067f0:	4689      	mov	r9, r1
 80067f2:	4630      	mov	r0, r6
 80067f4:	4639      	mov	r1, r7
 80067f6:	f7f9 ff17 	bl	8000628 <__aeabi_dmul>
 80067fa:	a355      	add	r3, pc, #340	; (adr r3, 8006950 <__ieee754_log+0x348>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f7f9 fd5c 	bl	80002bc <__adddf3>
 8006804:	4632      	mov	r2, r6
 8006806:	463b      	mov	r3, r7
 8006808:	f7f9 ff0e 	bl	8000628 <__aeabi_dmul>
 800680c:	a352      	add	r3, pc, #328	; (adr r3, 8006958 <__ieee754_log+0x350>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f7f9 fd53 	bl	80002bc <__adddf3>
 8006816:	4632      	mov	r2, r6
 8006818:	463b      	mov	r3, r7
 800681a:	f7f9 ff05 	bl	8000628 <__aeabi_dmul>
 800681e:	460b      	mov	r3, r1
 8006820:	4602      	mov	r2, r0
 8006822:	4649      	mov	r1, r9
 8006824:	4640      	mov	r0, r8
 8006826:	f7f9 fd49 	bl	80002bc <__adddf3>
 800682a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800682e:	9b01      	ldr	r3, [sp, #4]
 8006830:	3551      	adds	r5, #81	; 0x51
 8006832:	431d      	orrs	r5, r3
 8006834:	2d00      	cmp	r5, #0
 8006836:	4680      	mov	r8, r0
 8006838:	4689      	mov	r9, r1
 800683a:	dd48      	ble.n	80068ce <__ieee754_log+0x2c6>
 800683c:	4b4e      	ldr	r3, [pc, #312]	; (8006978 <__ieee754_log+0x370>)
 800683e:	2200      	movs	r2, #0
 8006840:	4650      	mov	r0, sl
 8006842:	4659      	mov	r1, fp
 8006844:	f7f9 fef0 	bl	8000628 <__aeabi_dmul>
 8006848:	4652      	mov	r2, sl
 800684a:	465b      	mov	r3, fp
 800684c:	f7f9 feec 	bl	8000628 <__aeabi_dmul>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	4640      	mov	r0, r8
 800685a:	4649      	mov	r1, r9
 800685c:	f7f9 fd2e 	bl	80002bc <__adddf3>
 8006860:	ec53 2b18 	vmov	r2, r3, d8
 8006864:	f7f9 fee0 	bl	8000628 <__aeabi_dmul>
 8006868:	4680      	mov	r8, r0
 800686a:	4689      	mov	r9, r1
 800686c:	b964      	cbnz	r4, 8006888 <__ieee754_log+0x280>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4630      	mov	r0, r6
 8006874:	4639      	mov	r1, r7
 8006876:	f7f9 fd1f 	bl	80002b8 <__aeabi_dsub>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4650      	mov	r0, sl
 8006880:	4659      	mov	r1, fp
 8006882:	f7f9 fd19 	bl	80002b8 <__aeabi_dsub>
 8006886:	e6d6      	b.n	8006636 <__ieee754_log+0x2e>
 8006888:	a321      	add	r3, pc, #132	; (adr r3, 8006910 <__ieee754_log+0x308>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	ec51 0b19 	vmov	r0, r1, d9
 8006892:	f7f9 fec9 	bl	8000628 <__aeabi_dmul>
 8006896:	a320      	add	r3, pc, #128	; (adr r3, 8006918 <__ieee754_log+0x310>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	4604      	mov	r4, r0
 800689e:	460d      	mov	r5, r1
 80068a0:	ec51 0b19 	vmov	r0, r1, d9
 80068a4:	f7f9 fec0 	bl	8000628 <__aeabi_dmul>
 80068a8:	4642      	mov	r2, r8
 80068aa:	464b      	mov	r3, r9
 80068ac:	f7f9 fd06 	bl	80002bc <__adddf3>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4630      	mov	r0, r6
 80068b6:	4639      	mov	r1, r7
 80068b8:	f7f9 fcfe 	bl	80002b8 <__aeabi_dsub>
 80068bc:	4652      	mov	r2, sl
 80068be:	465b      	mov	r3, fp
 80068c0:	f7f9 fcfa 	bl	80002b8 <__aeabi_dsub>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4620      	mov	r0, r4
 80068ca:	4629      	mov	r1, r5
 80068cc:	e7d9      	b.n	8006882 <__ieee754_log+0x27a>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4650      	mov	r0, sl
 80068d4:	4659      	mov	r1, fp
 80068d6:	f7f9 fcef 	bl	80002b8 <__aeabi_dsub>
 80068da:	ec53 2b18 	vmov	r2, r3, d8
 80068de:	f7f9 fea3 	bl	8000628 <__aeabi_dmul>
 80068e2:	4606      	mov	r6, r0
 80068e4:	460f      	mov	r7, r1
 80068e6:	2c00      	cmp	r4, #0
 80068e8:	f43f af23 	beq.w	8006732 <__ieee754_log+0x12a>
 80068ec:	a308      	add	r3, pc, #32	; (adr r3, 8006910 <__ieee754_log+0x308>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	ec51 0b19 	vmov	r0, r1, d9
 80068f6:	f7f9 fe97 	bl	8000628 <__aeabi_dmul>
 80068fa:	a307      	add	r3, pc, #28	; (adr r3, 8006918 <__ieee754_log+0x310>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	ec51 0b19 	vmov	r0, r1, d9
 8006908:	e727      	b.n	800675a <__ieee754_log+0x152>
 800690a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006960 <__ieee754_log+0x358>
 800690e:	e694      	b.n	800663a <__ieee754_log+0x32>
 8006910:	fee00000 	.word	0xfee00000
 8006914:	3fe62e42 	.word	0x3fe62e42
 8006918:	35793c76 	.word	0x35793c76
 800691c:	3dea39ef 	.word	0x3dea39ef
 8006920:	55555555 	.word	0x55555555
 8006924:	3fd55555 	.word	0x3fd55555
 8006928:	df3e5244 	.word	0xdf3e5244
 800692c:	3fc2f112 	.word	0x3fc2f112
 8006930:	96cb03de 	.word	0x96cb03de
 8006934:	3fc74664 	.word	0x3fc74664
 8006938:	94229359 	.word	0x94229359
 800693c:	3fd24924 	.word	0x3fd24924
 8006940:	55555593 	.word	0x55555593
 8006944:	3fe55555 	.word	0x3fe55555
 8006948:	d078c69f 	.word	0xd078c69f
 800694c:	3fc39a09 	.word	0x3fc39a09
 8006950:	1d8e78af 	.word	0x1d8e78af
 8006954:	3fcc71c5 	.word	0x3fcc71c5
 8006958:	9997fa04 	.word	0x9997fa04
 800695c:	3fd99999 	.word	0x3fd99999
	...
 8006968:	c3500000 	.word	0xc3500000
 800696c:	43500000 	.word	0x43500000
 8006970:	7fefffff 	.word	0x7fefffff
 8006974:	3ff00000 	.word	0x3ff00000
 8006978:	3fe00000 	.word	0x3fe00000
 800697c:	00000000 	.word	0x00000000

08006980 <__ieee754_pow>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ed2d 8b06 	vpush	{d8-d10}
 8006988:	b089      	sub	sp, #36	; 0x24
 800698a:	ed8d 1b00 	vstr	d1, [sp]
 800698e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006992:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006996:	ea58 0102 	orrs.w	r1, r8, r2
 800699a:	ec57 6b10 	vmov	r6, r7, d0
 800699e:	d115      	bne.n	80069cc <__ieee754_pow+0x4c>
 80069a0:	19b3      	adds	r3, r6, r6
 80069a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80069a6:	4152      	adcs	r2, r2
 80069a8:	4299      	cmp	r1, r3
 80069aa:	4b89      	ldr	r3, [pc, #548]	; (8006bd0 <__ieee754_pow+0x250>)
 80069ac:	4193      	sbcs	r3, r2
 80069ae:	f080 84d2 	bcs.w	8007356 <__ieee754_pow+0x9d6>
 80069b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069b6:	4630      	mov	r0, r6
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7f9 fc7f 	bl	80002bc <__adddf3>
 80069be:	ec41 0b10 	vmov	d0, r0, r1
 80069c2:	b009      	add	sp, #36	; 0x24
 80069c4:	ecbd 8b06 	vpop	{d8-d10}
 80069c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069cc:	4b81      	ldr	r3, [pc, #516]	; (8006bd4 <__ieee754_pow+0x254>)
 80069ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80069d2:	429c      	cmp	r4, r3
 80069d4:	ee10 aa10 	vmov	sl, s0
 80069d8:	463d      	mov	r5, r7
 80069da:	dc06      	bgt.n	80069ea <__ieee754_pow+0x6a>
 80069dc:	d101      	bne.n	80069e2 <__ieee754_pow+0x62>
 80069de:	2e00      	cmp	r6, #0
 80069e0:	d1e7      	bne.n	80069b2 <__ieee754_pow+0x32>
 80069e2:	4598      	cmp	r8, r3
 80069e4:	dc01      	bgt.n	80069ea <__ieee754_pow+0x6a>
 80069e6:	d10f      	bne.n	8006a08 <__ieee754_pow+0x88>
 80069e8:	b172      	cbz	r2, 8006a08 <__ieee754_pow+0x88>
 80069ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80069ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80069f2:	ea55 050a 	orrs.w	r5, r5, sl
 80069f6:	d1dc      	bne.n	80069b2 <__ieee754_pow+0x32>
 80069f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80069fc:	18db      	adds	r3, r3, r3
 80069fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006a02:	4152      	adcs	r2, r2
 8006a04:	429d      	cmp	r5, r3
 8006a06:	e7d0      	b.n	80069aa <__ieee754_pow+0x2a>
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	da3b      	bge.n	8006a84 <__ieee754_pow+0x104>
 8006a0c:	4b72      	ldr	r3, [pc, #456]	; (8006bd8 <__ieee754_pow+0x258>)
 8006a0e:	4598      	cmp	r8, r3
 8006a10:	dc51      	bgt.n	8006ab6 <__ieee754_pow+0x136>
 8006a12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006a16:	4598      	cmp	r8, r3
 8006a18:	f340 84ac 	ble.w	8007374 <__ieee754_pow+0x9f4>
 8006a1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006a20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006a24:	2b14      	cmp	r3, #20
 8006a26:	dd0f      	ble.n	8006a48 <__ieee754_pow+0xc8>
 8006a28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006a2c:	fa22 f103 	lsr.w	r1, r2, r3
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	4293      	cmp	r3, r2
 8006a36:	f040 849d 	bne.w	8007374 <__ieee754_pow+0x9f4>
 8006a3a:	f001 0101 	and.w	r1, r1, #1
 8006a3e:	f1c1 0302 	rsb	r3, r1, #2
 8006a42:	9304      	str	r3, [sp, #16]
 8006a44:	b182      	cbz	r2, 8006a68 <__ieee754_pow+0xe8>
 8006a46:	e05f      	b.n	8006b08 <__ieee754_pow+0x188>
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	d15b      	bne.n	8006b04 <__ieee754_pow+0x184>
 8006a4c:	f1c3 0314 	rsb	r3, r3, #20
 8006a50:	fa48 f103 	asr.w	r1, r8, r3
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	4543      	cmp	r3, r8
 8006a5a:	f040 8488 	bne.w	800736e <__ieee754_pow+0x9ee>
 8006a5e:	f001 0101 	and.w	r1, r1, #1
 8006a62:	f1c1 0302 	rsb	r3, r1, #2
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	4b5c      	ldr	r3, [pc, #368]	; (8006bdc <__ieee754_pow+0x25c>)
 8006a6a:	4598      	cmp	r8, r3
 8006a6c:	d132      	bne.n	8006ad4 <__ieee754_pow+0x154>
 8006a6e:	f1b9 0f00 	cmp.w	r9, #0
 8006a72:	f280 8478 	bge.w	8007366 <__ieee754_pow+0x9e6>
 8006a76:	4959      	ldr	r1, [pc, #356]	; (8006bdc <__ieee754_pow+0x25c>)
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f7f9 fefd 	bl	800087c <__aeabi_ddiv>
 8006a82:	e79c      	b.n	80069be <__ieee754_pow+0x3e>
 8006a84:	2300      	movs	r3, #0
 8006a86:	9304      	str	r3, [sp, #16]
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d13d      	bne.n	8006b08 <__ieee754_pow+0x188>
 8006a8c:	4b51      	ldr	r3, [pc, #324]	; (8006bd4 <__ieee754_pow+0x254>)
 8006a8e:	4598      	cmp	r8, r3
 8006a90:	d1ea      	bne.n	8006a68 <__ieee754_pow+0xe8>
 8006a92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a9a:	ea53 030a 	orrs.w	r3, r3, sl
 8006a9e:	f000 845a 	beq.w	8007356 <__ieee754_pow+0x9d6>
 8006aa2:	4b4f      	ldr	r3, [pc, #316]	; (8006be0 <__ieee754_pow+0x260>)
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	dd08      	ble.n	8006aba <__ieee754_pow+0x13a>
 8006aa8:	f1b9 0f00 	cmp.w	r9, #0
 8006aac:	f2c0 8457 	blt.w	800735e <__ieee754_pow+0x9de>
 8006ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ab4:	e783      	b.n	80069be <__ieee754_pow+0x3e>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e7e5      	b.n	8006a86 <__ieee754_pow+0x106>
 8006aba:	f1b9 0f00 	cmp.w	r9, #0
 8006abe:	f04f 0000 	mov.w	r0, #0
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	f6bf af7a 	bge.w	80069be <__ieee754_pow+0x3e>
 8006aca:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006ace:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ad2:	e774      	b.n	80069be <__ieee754_pow+0x3e>
 8006ad4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006ad8:	d106      	bne.n	8006ae8 <__ieee754_pow+0x168>
 8006ada:	4632      	mov	r2, r6
 8006adc:	463b      	mov	r3, r7
 8006ade:	4630      	mov	r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	f7f9 fda1 	bl	8000628 <__aeabi_dmul>
 8006ae6:	e76a      	b.n	80069be <__ieee754_pow+0x3e>
 8006ae8:	4b3e      	ldr	r3, [pc, #248]	; (8006be4 <__ieee754_pow+0x264>)
 8006aea:	4599      	cmp	r9, r3
 8006aec:	d10c      	bne.n	8006b08 <__ieee754_pow+0x188>
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	db0a      	blt.n	8006b08 <__ieee754_pow+0x188>
 8006af2:	ec47 6b10 	vmov	d0, r6, r7
 8006af6:	b009      	add	sp, #36	; 0x24
 8006af8:	ecbd 8b06 	vpop	{d8-d10}
 8006afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	f000 bc6c 	b.w	80073dc <__ieee754_sqrt>
 8006b04:	2300      	movs	r3, #0
 8006b06:	9304      	str	r3, [sp, #16]
 8006b08:	ec47 6b10 	vmov	d0, r6, r7
 8006b0c:	f000 fd48 	bl	80075a0 <fabs>
 8006b10:	ec51 0b10 	vmov	r0, r1, d0
 8006b14:	f1ba 0f00 	cmp.w	sl, #0
 8006b18:	d129      	bne.n	8006b6e <__ieee754_pow+0x1ee>
 8006b1a:	b124      	cbz	r4, 8006b26 <__ieee754_pow+0x1a6>
 8006b1c:	4b2f      	ldr	r3, [pc, #188]	; (8006bdc <__ieee754_pow+0x25c>)
 8006b1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d123      	bne.n	8006b6e <__ieee754_pow+0x1ee>
 8006b26:	f1b9 0f00 	cmp.w	r9, #0
 8006b2a:	da05      	bge.n	8006b38 <__ieee754_pow+0x1b8>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	2000      	movs	r0, #0
 8006b32:	492a      	ldr	r1, [pc, #168]	; (8006bdc <__ieee754_pow+0x25c>)
 8006b34:	f7f9 fea2 	bl	800087c <__aeabi_ddiv>
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	f6bf af40 	bge.w	80069be <__ieee754_pow+0x3e>
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b48:	4323      	orrs	r3, r4
 8006b4a:	d108      	bne.n	8006b5e <__ieee754_pow+0x1de>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4610      	mov	r0, r2
 8006b52:	4619      	mov	r1, r3
 8006b54:	f7f9 fbb0 	bl	80002b8 <__aeabi_dsub>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	e78f      	b.n	8006a7e <__ieee754_pow+0xfe>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f47f af2c 	bne.w	80069be <__ieee754_pow+0x3e>
 8006b66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	e727      	b.n	80069be <__ieee754_pow+0x3e>
 8006b6e:	0feb      	lsrs	r3, r5, #31
 8006b70:	3b01      	subs	r3, #1
 8006b72:	9306      	str	r3, [sp, #24]
 8006b74:	9a06      	ldr	r2, [sp, #24]
 8006b76:	9b04      	ldr	r3, [sp, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	d102      	bne.n	8006b82 <__ieee754_pow+0x202>
 8006b7c:	4632      	mov	r2, r6
 8006b7e:	463b      	mov	r3, r7
 8006b80:	e7e6      	b.n	8006b50 <__ieee754_pow+0x1d0>
 8006b82:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <__ieee754_pow+0x268>)
 8006b84:	4598      	cmp	r8, r3
 8006b86:	f340 80fb 	ble.w	8006d80 <__ieee754_pow+0x400>
 8006b8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b8e:	4598      	cmp	r8, r3
 8006b90:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <__ieee754_pow+0x260>)
 8006b92:	dd0c      	ble.n	8006bae <__ieee754_pow+0x22e>
 8006b94:	429c      	cmp	r4, r3
 8006b96:	dc0f      	bgt.n	8006bb8 <__ieee754_pow+0x238>
 8006b98:	f1b9 0f00 	cmp.w	r9, #0
 8006b9c:	da0f      	bge.n	8006bbe <__ieee754_pow+0x23e>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	b009      	add	sp, #36	; 0x24
 8006ba2:	ecbd 8b06 	vpop	{d8-d10}
 8006ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	f000 bcf0 	b.w	800758e <__math_oflow>
 8006bae:	429c      	cmp	r4, r3
 8006bb0:	dbf2      	blt.n	8006b98 <__ieee754_pow+0x218>
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <__ieee754_pow+0x25c>)
 8006bb4:	429c      	cmp	r4, r3
 8006bb6:	dd19      	ble.n	8006bec <__ieee754_pow+0x26c>
 8006bb8:	f1b9 0f00 	cmp.w	r9, #0
 8006bbc:	dcef      	bgt.n	8006b9e <__ieee754_pow+0x21e>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	b009      	add	sp, #36	; 0x24
 8006bc2:	ecbd 8b06 	vpop	{d8-d10}
 8006bc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	f000 bcd7 	b.w	800757c <__math_uflow>
 8006bce:	bf00      	nop
 8006bd0:	fff00000 	.word	0xfff00000
 8006bd4:	7ff00000 	.word	0x7ff00000
 8006bd8:	433fffff 	.word	0x433fffff
 8006bdc:	3ff00000 	.word	0x3ff00000
 8006be0:	3fefffff 	.word	0x3fefffff
 8006be4:	3fe00000 	.word	0x3fe00000
 8006be8:	41e00000 	.word	0x41e00000
 8006bec:	4b60      	ldr	r3, [pc, #384]	; (8006d70 <__ieee754_pow+0x3f0>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f7f9 fb62 	bl	80002b8 <__aeabi_dsub>
 8006bf4:	a354      	add	r3, pc, #336	; (adr r3, 8006d48 <__ieee754_pow+0x3c8>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	f7f9 fd13 	bl	8000628 <__aeabi_dmul>
 8006c02:	a353      	add	r3, pc, #332	; (adr r3, 8006d50 <__ieee754_pow+0x3d0>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	4606      	mov	r6, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	4629      	mov	r1, r5
 8006c10:	f7f9 fd0a 	bl	8000628 <__aeabi_dmul>
 8006c14:	4b57      	ldr	r3, [pc, #348]	; (8006d74 <__ieee754_pow+0x3f4>)
 8006c16:	4682      	mov	sl, r0
 8006c18:	468b      	mov	fp, r1
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 fd02 	bl	8000628 <__aeabi_dmul>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	a14b      	add	r1, pc, #300	; (adr r1, 8006d58 <__ieee754_pow+0x3d8>)
 8006c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2e:	f7f9 fb43 	bl	80002b8 <__aeabi_dsub>
 8006c32:	4622      	mov	r2, r4
 8006c34:	462b      	mov	r3, r5
 8006c36:	f7f9 fcf7 	bl	8000628 <__aeabi_dmul>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	2000      	movs	r0, #0
 8006c40:	494d      	ldr	r1, [pc, #308]	; (8006d78 <__ieee754_pow+0x3f8>)
 8006c42:	f7f9 fb39 	bl	80002b8 <__aeabi_dsub>
 8006c46:	4622      	mov	r2, r4
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4689      	mov	r9, r1
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	4620      	mov	r0, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7f9 fce9 	bl	8000628 <__aeabi_dmul>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	f7f9 fce3 	bl	8000628 <__aeabi_dmul>
 8006c62:	a33f      	add	r3, pc, #252	; (adr r3, 8006d60 <__ieee754_pow+0x3e0>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fcde 	bl	8000628 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4650      	mov	r0, sl
 8006c72:	4659      	mov	r1, fp
 8006c74:	f7f9 fb20 	bl	80002b8 <__aeabi_dsub>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4689      	mov	r9, r1
 8006c80:	4630      	mov	r0, r6
 8006c82:	4639      	mov	r1, r7
 8006c84:	f7f9 fb1a 	bl	80002bc <__adddf3>
 8006c88:	2000      	movs	r0, #0
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	4604      	mov	r4, r0
 8006c90:	460d      	mov	r5, r1
 8006c92:	f7f9 fb11 	bl	80002b8 <__aeabi_dsub>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 fb0b 	bl	80002b8 <__aeabi_dsub>
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	9a06      	ldr	r2, [sp, #24]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	4682      	mov	sl, r0
 8006cac:	468b      	mov	fp, r1
 8006cae:	f040 81e7 	bne.w	8007080 <__ieee754_pow+0x700>
 8006cb2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006d68 <__ieee754_pow+0x3e8>
 8006cb6:	eeb0 8a47 	vmov.f32	s16, s14
 8006cba:	eef0 8a67 	vmov.f32	s17, s15
 8006cbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ccc:	f7f9 faf4 	bl	80002b8 <__aeabi_dsub>
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	462b      	mov	r3, r5
 8006cd4:	f7f9 fca8 	bl	8000628 <__aeabi_dmul>
 8006cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cdc:	4680      	mov	r8, r0
 8006cde:	4689      	mov	r9, r1
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	4659      	mov	r1, fp
 8006ce4:	f7f9 fca0 	bl	8000628 <__aeabi_dmul>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4640      	mov	r0, r8
 8006cee:	4649      	mov	r1, r9
 8006cf0:	f7f9 fae4 	bl	80002bc <__adddf3>
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	4689      	mov	r9, r1
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fc92 	bl	8000628 <__aeabi_dmul>
 8006d04:	460b      	mov	r3, r1
 8006d06:	4604      	mov	r4, r0
 8006d08:	460d      	mov	r5, r1
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f7f9 fad4 	bl	80002bc <__adddf3>
 8006d14:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <__ieee754_pow+0x3fc>)
 8006d16:	4299      	cmp	r1, r3
 8006d18:	ec45 4b19 	vmov	d9, r4, r5
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	468b      	mov	fp, r1
 8006d22:	f340 82f1 	ble.w	8007308 <__ieee754_pow+0x988>
 8006d26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d2e:	4303      	orrs	r3, r0
 8006d30:	f000 81e4 	beq.w	80070fc <__ieee754_pow+0x77c>
 8006d34:	ec51 0b18 	vmov	r0, r1, d8
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f7f9 fee6 	bl	8000b0c <__aeabi_dcmplt>
 8006d40:	3800      	subs	r0, #0
 8006d42:	bf18      	it	ne
 8006d44:	2001      	movne	r0, #1
 8006d46:	e72b      	b.n	8006ba0 <__ieee754_pow+0x220>
 8006d48:	60000000 	.word	0x60000000
 8006d4c:	3ff71547 	.word	0x3ff71547
 8006d50:	f85ddf44 	.word	0xf85ddf44
 8006d54:	3e54ae0b 	.word	0x3e54ae0b
 8006d58:	55555555 	.word	0x55555555
 8006d5c:	3fd55555 	.word	0x3fd55555
 8006d60:	652b82fe 	.word	0x652b82fe
 8006d64:	3ff71547 	.word	0x3ff71547
 8006d68:	00000000 	.word	0x00000000
 8006d6c:	bff00000 	.word	0xbff00000
 8006d70:	3ff00000 	.word	0x3ff00000
 8006d74:	3fd00000 	.word	0x3fd00000
 8006d78:	3fe00000 	.word	0x3fe00000
 8006d7c:	408fffff 	.word	0x408fffff
 8006d80:	4bd5      	ldr	r3, [pc, #852]	; (80070d8 <__ieee754_pow+0x758>)
 8006d82:	402b      	ands	r3, r5
 8006d84:	2200      	movs	r2, #0
 8006d86:	b92b      	cbnz	r3, 8006d94 <__ieee754_pow+0x414>
 8006d88:	4bd4      	ldr	r3, [pc, #848]	; (80070dc <__ieee754_pow+0x75c>)
 8006d8a:	f7f9 fc4d 	bl	8000628 <__aeabi_dmul>
 8006d8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d92:	460c      	mov	r4, r1
 8006d94:	1523      	asrs	r3, r4, #20
 8006d96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d9a:	4413      	add	r3, r2
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	4bd0      	ldr	r3, [pc, #832]	; (80070e0 <__ieee754_pow+0x760>)
 8006da0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006da4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006da8:	429c      	cmp	r4, r3
 8006daa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006dae:	dd08      	ble.n	8006dc2 <__ieee754_pow+0x442>
 8006db0:	4bcc      	ldr	r3, [pc, #816]	; (80070e4 <__ieee754_pow+0x764>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	f340 8162 	ble.w	800707c <__ieee754_pow+0x6fc>
 8006db8:	9b05      	ldr	r3, [sp, #20]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006dc2:	2400      	movs	r4, #0
 8006dc4:	00e3      	lsls	r3, r4, #3
 8006dc6:	9307      	str	r3, [sp, #28]
 8006dc8:	4bc7      	ldr	r3, [pc, #796]	; (80070e8 <__ieee754_pow+0x768>)
 8006dca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006dce:	ed93 7b00 	vldr	d7, [r3]
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	ec53 2b17 	vmov	r2, r3, d7
 8006dd8:	eeb0 9a47 	vmov.f32	s18, s14
 8006ddc:	eef0 9a67 	vmov.f32	s19, s15
 8006de0:	4682      	mov	sl, r0
 8006de2:	f7f9 fa69 	bl	80002b8 <__aeabi_dsub>
 8006de6:	4652      	mov	r2, sl
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	462b      	mov	r3, r5
 8006dee:	ec51 0b19 	vmov	r0, r1, d9
 8006df2:	f7f9 fa63 	bl	80002bc <__adddf3>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	49bb      	ldr	r1, [pc, #748]	; (80070ec <__ieee754_pow+0x76c>)
 8006dfe:	f7f9 fd3d 	bl	800087c <__aeabi_ddiv>
 8006e02:	ec41 0b1a 	vmov	d10, r0, r1
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	f7f9 fc0b 	bl	8000628 <__aeabi_dmul>
 8006e12:	2300      	movs	r3, #0
 8006e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e18:	9302      	str	r3, [sp, #8]
 8006e1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e1e:	46ab      	mov	fp, r5
 8006e20:	106d      	asrs	r5, r5, #1
 8006e22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e2a:	ec41 0b18 	vmov	d8, r0, r1
 8006e2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006e32:	2200      	movs	r2, #0
 8006e34:	4640      	mov	r0, r8
 8006e36:	4649      	mov	r1, r9
 8006e38:	4614      	mov	r4, r2
 8006e3a:	461d      	mov	r5, r3
 8006e3c:	f7f9 fbf4 	bl	8000628 <__aeabi_dmul>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4630      	mov	r0, r6
 8006e46:	4639      	mov	r1, r7
 8006e48:	f7f9 fa36 	bl	80002b8 <__aeabi_dsub>
 8006e4c:	ec53 2b19 	vmov	r2, r3, d9
 8006e50:	4606      	mov	r6, r0
 8006e52:	460f      	mov	r7, r1
 8006e54:	4620      	mov	r0, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	f7f9 fa2e 	bl	80002b8 <__aeabi_dsub>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4650      	mov	r0, sl
 8006e62:	4659      	mov	r1, fp
 8006e64:	f7f9 fa28 	bl	80002b8 <__aeabi_dsub>
 8006e68:	4642      	mov	r2, r8
 8006e6a:	464b      	mov	r3, r9
 8006e6c:	f7f9 fbdc 	bl	8000628 <__aeabi_dmul>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4630      	mov	r0, r6
 8006e76:	4639      	mov	r1, r7
 8006e78:	f7f9 fa1e 	bl	80002b8 <__aeabi_dsub>
 8006e7c:	ec53 2b1a 	vmov	r2, r3, d10
 8006e80:	f7f9 fbd2 	bl	8000628 <__aeabi_dmul>
 8006e84:	ec53 2b18 	vmov	r2, r3, d8
 8006e88:	ec41 0b19 	vmov	d9, r0, r1
 8006e8c:	ec51 0b18 	vmov	r0, r1, d8
 8006e90:	f7f9 fbca 	bl	8000628 <__aeabi_dmul>
 8006e94:	a37c      	add	r3, pc, #496	; (adr r3, 8007088 <__ieee754_pow+0x708>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	f7f9 fbc3 	bl	8000628 <__aeabi_dmul>
 8006ea2:	a37b      	add	r3, pc, #492	; (adr r3, 8007090 <__ieee754_pow+0x710>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 fa08 	bl	80002bc <__adddf3>
 8006eac:	4622      	mov	r2, r4
 8006eae:	462b      	mov	r3, r5
 8006eb0:	f7f9 fbba 	bl	8000628 <__aeabi_dmul>
 8006eb4:	a378      	add	r3, pc, #480	; (adr r3, 8007098 <__ieee754_pow+0x718>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f7f9 f9ff 	bl	80002bc <__adddf3>
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	f7f9 fbb1 	bl	8000628 <__aeabi_dmul>
 8006ec6:	a376      	add	r3, pc, #472	; (adr r3, 80070a0 <__ieee754_pow+0x720>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f7f9 f9f6 	bl	80002bc <__adddf3>
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	f7f9 fba8 	bl	8000628 <__aeabi_dmul>
 8006ed8:	a373      	add	r3, pc, #460	; (adr r3, 80070a8 <__ieee754_pow+0x728>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 f9ed 	bl	80002bc <__adddf3>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	f7f9 fb9f 	bl	8000628 <__aeabi_dmul>
 8006eea:	a371      	add	r3, pc, #452	; (adr r3, 80070b0 <__ieee754_pow+0x730>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 f9e4 	bl	80002bc <__adddf3>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	462b      	mov	r3, r5
 8006efc:	4620      	mov	r0, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	f7f9 fb92 	bl	8000628 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	f7f9 fb8c 	bl	8000628 <__aeabi_dmul>
 8006f10:	4642      	mov	r2, r8
 8006f12:	4604      	mov	r4, r0
 8006f14:	460d      	mov	r5, r1
 8006f16:	464b      	mov	r3, r9
 8006f18:	ec51 0b18 	vmov	r0, r1, d8
 8006f1c:	f7f9 f9ce 	bl	80002bc <__adddf3>
 8006f20:	ec53 2b19 	vmov	r2, r3, d9
 8006f24:	f7f9 fb80 	bl	8000628 <__aeabi_dmul>
 8006f28:	4622      	mov	r2, r4
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	f7f9 f9c6 	bl	80002bc <__adddf3>
 8006f30:	4642      	mov	r2, r8
 8006f32:	4682      	mov	sl, r0
 8006f34:	468b      	mov	fp, r1
 8006f36:	464b      	mov	r3, r9
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 fb74 	bl	8000628 <__aeabi_dmul>
 8006f40:	4b6b      	ldr	r3, [pc, #428]	; (80070f0 <__ieee754_pow+0x770>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	4606      	mov	r6, r0
 8006f46:	460f      	mov	r7, r1
 8006f48:	f7f9 f9b8 	bl	80002bc <__adddf3>
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	465b      	mov	r3, fp
 8006f50:	f7f9 f9b4 	bl	80002bc <__adddf3>
 8006f54:	2000      	movs	r0, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4640      	mov	r0, r8
 8006f60:	4649      	mov	r1, r9
 8006f62:	f7f9 fb61 	bl	8000628 <__aeabi_dmul>
 8006f66:	4b62      	ldr	r3, [pc, #392]	; (80070f0 <__ieee754_pow+0x770>)
 8006f68:	4680      	mov	r8, r0
 8006f6a:	4689      	mov	r9, r1
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 f9a1 	bl	80002b8 <__aeabi_dsub>
 8006f76:	4632      	mov	r2, r6
 8006f78:	463b      	mov	r3, r7
 8006f7a:	f7f9 f99d 	bl	80002b8 <__aeabi_dsub>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4650      	mov	r0, sl
 8006f84:	4659      	mov	r1, fp
 8006f86:	f7f9 f997 	bl	80002b8 <__aeabi_dsub>
 8006f8a:	ec53 2b18 	vmov	r2, r3, d8
 8006f8e:	f7f9 fb4b 	bl	8000628 <__aeabi_dmul>
 8006f92:	4622      	mov	r2, r4
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	462b      	mov	r3, r5
 8006f9a:	ec51 0b19 	vmov	r0, r1, d9
 8006f9e:	f7f9 fb43 	bl	8000628 <__aeabi_dmul>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 f987 	bl	80002bc <__adddf3>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	460f      	mov	r7, r1
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 f97f 	bl	80002bc <__adddf3>
 8006fbe:	a33e      	add	r3, pc, #248	; (adr r3, 80070b8 <__ieee754_pow+0x738>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	460d      	mov	r5, r1
 8006fca:	f7f9 fb2d 	bl	8000628 <__aeabi_dmul>
 8006fce:	4642      	mov	r2, r8
 8006fd0:	ec41 0b18 	vmov	d8, r0, r1
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 f96d 	bl	80002b8 <__aeabi_dsub>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 f967 	bl	80002b8 <__aeabi_dsub>
 8006fea:	a335      	add	r3, pc, #212	; (adr r3, 80070c0 <__ieee754_pow+0x740>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f7f9 fb1a 	bl	8000628 <__aeabi_dmul>
 8006ff4:	a334      	add	r3, pc, #208	; (adr r3, 80070c8 <__ieee754_pow+0x748>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	460f      	mov	r7, r1
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 fb11 	bl	8000628 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4630      	mov	r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	f7f9 f955 	bl	80002bc <__adddf3>
 8007012:	9a07      	ldr	r2, [sp, #28]
 8007014:	4b37      	ldr	r3, [pc, #220]	; (80070f4 <__ieee754_pow+0x774>)
 8007016:	4413      	add	r3, r2
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f7f9 f94e 	bl	80002bc <__adddf3>
 8007020:	4682      	mov	sl, r0
 8007022:	9805      	ldr	r0, [sp, #20]
 8007024:	468b      	mov	fp, r1
 8007026:	f7f9 fa95 	bl	8000554 <__aeabi_i2d>
 800702a:	9a07      	ldr	r2, [sp, #28]
 800702c:	4b32      	ldr	r3, [pc, #200]	; (80070f8 <__ieee754_pow+0x778>)
 800702e:	4413      	add	r3, r2
 8007030:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007034:	4606      	mov	r6, r0
 8007036:	460f      	mov	r7, r1
 8007038:	4652      	mov	r2, sl
 800703a:	465b      	mov	r3, fp
 800703c:	ec51 0b18 	vmov	r0, r1, d8
 8007040:	f7f9 f93c 	bl	80002bc <__adddf3>
 8007044:	4642      	mov	r2, r8
 8007046:	464b      	mov	r3, r9
 8007048:	f7f9 f938 	bl	80002bc <__adddf3>
 800704c:	4632      	mov	r2, r6
 800704e:	463b      	mov	r3, r7
 8007050:	f7f9 f934 	bl	80002bc <__adddf3>
 8007054:	2000      	movs	r0, #0
 8007056:	4632      	mov	r2, r6
 8007058:	463b      	mov	r3, r7
 800705a:	4604      	mov	r4, r0
 800705c:	460d      	mov	r5, r1
 800705e:	f7f9 f92b 	bl	80002b8 <__aeabi_dsub>
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	f7f9 f927 	bl	80002b8 <__aeabi_dsub>
 800706a:	ec53 2b18 	vmov	r2, r3, d8
 800706e:	f7f9 f923 	bl	80002b8 <__aeabi_dsub>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4650      	mov	r0, sl
 8007078:	4659      	mov	r1, fp
 800707a:	e610      	b.n	8006c9e <__ieee754_pow+0x31e>
 800707c:	2401      	movs	r4, #1
 800707e:	e6a1      	b.n	8006dc4 <__ieee754_pow+0x444>
 8007080:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80070d0 <__ieee754_pow+0x750>
 8007084:	e617      	b.n	8006cb6 <__ieee754_pow+0x336>
 8007086:	bf00      	nop
 8007088:	4a454eef 	.word	0x4a454eef
 800708c:	3fca7e28 	.word	0x3fca7e28
 8007090:	93c9db65 	.word	0x93c9db65
 8007094:	3fcd864a 	.word	0x3fcd864a
 8007098:	a91d4101 	.word	0xa91d4101
 800709c:	3fd17460 	.word	0x3fd17460
 80070a0:	518f264d 	.word	0x518f264d
 80070a4:	3fd55555 	.word	0x3fd55555
 80070a8:	db6fabff 	.word	0xdb6fabff
 80070ac:	3fdb6db6 	.word	0x3fdb6db6
 80070b0:	33333303 	.word	0x33333303
 80070b4:	3fe33333 	.word	0x3fe33333
 80070b8:	e0000000 	.word	0xe0000000
 80070bc:	3feec709 	.word	0x3feec709
 80070c0:	dc3a03fd 	.word	0xdc3a03fd
 80070c4:	3feec709 	.word	0x3feec709
 80070c8:	145b01f5 	.word	0x145b01f5
 80070cc:	be3e2fe0 	.word	0xbe3e2fe0
 80070d0:	00000000 	.word	0x00000000
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	7ff00000 	.word	0x7ff00000
 80070dc:	43400000 	.word	0x43400000
 80070e0:	0003988e 	.word	0x0003988e
 80070e4:	000bb679 	.word	0x000bb679
 80070e8:	0800a5a8 	.word	0x0800a5a8
 80070ec:	3ff00000 	.word	0x3ff00000
 80070f0:	40080000 	.word	0x40080000
 80070f4:	0800a5c8 	.word	0x0800a5c8
 80070f8:	0800a5b8 	.word	0x0800a5b8
 80070fc:	a3b5      	add	r3, pc, #724	; (adr r3, 80073d4 <__ieee754_pow+0xa54>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f7f9 f8d9 	bl	80002bc <__adddf3>
 800710a:	4622      	mov	r2, r4
 800710c:	ec41 0b1a 	vmov	d10, r0, r1
 8007110:	462b      	mov	r3, r5
 8007112:	4630      	mov	r0, r6
 8007114:	4639      	mov	r1, r7
 8007116:	f7f9 f8cf 	bl	80002b8 <__aeabi_dsub>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	ec51 0b1a 	vmov	r0, r1, d10
 8007122:	f7f9 fd11 	bl	8000b48 <__aeabi_dcmpgt>
 8007126:	2800      	cmp	r0, #0
 8007128:	f47f ae04 	bne.w	8006d34 <__ieee754_pow+0x3b4>
 800712c:	4aa4      	ldr	r2, [pc, #656]	; (80073c0 <__ieee754_pow+0xa40>)
 800712e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007132:	4293      	cmp	r3, r2
 8007134:	f340 8108 	ble.w	8007348 <__ieee754_pow+0x9c8>
 8007138:	151b      	asrs	r3, r3, #20
 800713a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800713e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007142:	fa4a f303 	asr.w	r3, sl, r3
 8007146:	445b      	add	r3, fp
 8007148:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800714c:	4e9d      	ldr	r6, [pc, #628]	; (80073c4 <__ieee754_pow+0xa44>)
 800714e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007152:	4116      	asrs	r6, r2
 8007154:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007158:	2000      	movs	r0, #0
 800715a:	ea23 0106 	bic.w	r1, r3, r6
 800715e:	f1c2 0214 	rsb	r2, r2, #20
 8007162:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007166:	fa4a fa02 	asr.w	sl, sl, r2
 800716a:	f1bb 0f00 	cmp.w	fp, #0
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4620      	mov	r0, r4
 8007174:	4629      	mov	r1, r5
 8007176:	bfb8      	it	lt
 8007178:	f1ca 0a00 	rsblt	sl, sl, #0
 800717c:	f7f9 f89c 	bl	80002b8 <__aeabi_dsub>
 8007180:	ec41 0b19 	vmov	d9, r0, r1
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	ec51 0b19 	vmov	r0, r1, d9
 800718c:	f7f9 f896 	bl	80002bc <__adddf3>
 8007190:	a37b      	add	r3, pc, #492	; (adr r3, 8007380 <__ieee754_pow+0xa00>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	2000      	movs	r0, #0
 8007198:	4604      	mov	r4, r0
 800719a:	460d      	mov	r5, r1
 800719c:	f7f9 fa44 	bl	8000628 <__aeabi_dmul>
 80071a0:	ec53 2b19 	vmov	r2, r3, d9
 80071a4:	4606      	mov	r6, r0
 80071a6:	460f      	mov	r7, r1
 80071a8:	4620      	mov	r0, r4
 80071aa:	4629      	mov	r1, r5
 80071ac:	f7f9 f884 	bl	80002b8 <__aeabi_dsub>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4640      	mov	r0, r8
 80071b6:	4649      	mov	r1, r9
 80071b8:	f7f9 f87e 	bl	80002b8 <__aeabi_dsub>
 80071bc:	a372      	add	r3, pc, #456	; (adr r3, 8007388 <__ieee754_pow+0xa08>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f9 fa31 	bl	8000628 <__aeabi_dmul>
 80071c6:	a372      	add	r3, pc, #456	; (adr r3, 8007390 <__ieee754_pow+0xa10>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	4620      	mov	r0, r4
 80071d2:	4629      	mov	r1, r5
 80071d4:	f7f9 fa28 	bl	8000628 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4640      	mov	r0, r8
 80071de:	4649      	mov	r1, r9
 80071e0:	f7f9 f86c 	bl	80002bc <__adddf3>
 80071e4:	4604      	mov	r4, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7f9 f864 	bl	80002bc <__adddf3>
 80071f4:	4632      	mov	r2, r6
 80071f6:	463b      	mov	r3, r7
 80071f8:	4680      	mov	r8, r0
 80071fa:	4689      	mov	r9, r1
 80071fc:	f7f9 f85c 	bl	80002b8 <__aeabi_dsub>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 f856 	bl	80002b8 <__aeabi_dsub>
 800720c:	4642      	mov	r2, r8
 800720e:	4606      	mov	r6, r0
 8007210:	460f      	mov	r7, r1
 8007212:	464b      	mov	r3, r9
 8007214:	4640      	mov	r0, r8
 8007216:	4649      	mov	r1, r9
 8007218:	f7f9 fa06 	bl	8000628 <__aeabi_dmul>
 800721c:	a35e      	add	r3, pc, #376	; (adr r3, 8007398 <__ieee754_pow+0xa18>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	4604      	mov	r4, r0
 8007224:	460d      	mov	r5, r1
 8007226:	f7f9 f9ff 	bl	8000628 <__aeabi_dmul>
 800722a:	a35d      	add	r3, pc, #372	; (adr r3, 80073a0 <__ieee754_pow+0xa20>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f842 	bl	80002b8 <__aeabi_dsub>
 8007234:	4622      	mov	r2, r4
 8007236:	462b      	mov	r3, r5
 8007238:	f7f9 f9f6 	bl	8000628 <__aeabi_dmul>
 800723c:	a35a      	add	r3, pc, #360	; (adr r3, 80073a8 <__ieee754_pow+0xa28>)
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 f83b 	bl	80002bc <__adddf3>
 8007246:	4622      	mov	r2, r4
 8007248:	462b      	mov	r3, r5
 800724a:	f7f9 f9ed 	bl	8000628 <__aeabi_dmul>
 800724e:	a358      	add	r3, pc, #352	; (adr r3, 80073b0 <__ieee754_pow+0xa30>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 f830 	bl	80002b8 <__aeabi_dsub>
 8007258:	4622      	mov	r2, r4
 800725a:	462b      	mov	r3, r5
 800725c:	f7f9 f9e4 	bl	8000628 <__aeabi_dmul>
 8007260:	a355      	add	r3, pc, #340	; (adr r3, 80073b8 <__ieee754_pow+0xa38>)
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f7f9 f829 	bl	80002bc <__adddf3>
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	f7f9 f9db 	bl	8000628 <__aeabi_dmul>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4640      	mov	r0, r8
 8007278:	4649      	mov	r1, r9
 800727a:	f7f9 f81d 	bl	80002b8 <__aeabi_dsub>
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	f7f9 f9cd 	bl	8000628 <__aeabi_dmul>
 800728e:	2200      	movs	r2, #0
 8007290:	ec41 0b19 	vmov	d9, r0, r1
 8007294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007298:	4620      	mov	r0, r4
 800729a:	4629      	mov	r1, r5
 800729c:	f7f9 f80c 	bl	80002b8 <__aeabi_dsub>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	ec51 0b19 	vmov	r0, r1, d9
 80072a8:	f7f9 fae8 	bl	800087c <__aeabi_ddiv>
 80072ac:	4632      	mov	r2, r6
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	463b      	mov	r3, r7
 80072b4:	4640      	mov	r0, r8
 80072b6:	4649      	mov	r1, r9
 80072b8:	f7f9 f9b6 	bl	8000628 <__aeabi_dmul>
 80072bc:	4632      	mov	r2, r6
 80072be:	463b      	mov	r3, r7
 80072c0:	f7f8 fffc 	bl	80002bc <__adddf3>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f8 fff4 	bl	80002b8 <__aeabi_dsub>
 80072d0:	4642      	mov	r2, r8
 80072d2:	464b      	mov	r3, r9
 80072d4:	f7f8 fff0 	bl	80002b8 <__aeabi_dsub>
 80072d8:	460b      	mov	r3, r1
 80072da:	4602      	mov	r2, r0
 80072dc:	493a      	ldr	r1, [pc, #232]	; (80073c8 <__ieee754_pow+0xa48>)
 80072de:	2000      	movs	r0, #0
 80072e0:	f7f8 ffea 	bl	80002b8 <__aeabi_dsub>
 80072e4:	ec41 0b10 	vmov	d0, r0, r1
 80072e8:	ee10 3a90 	vmov	r3, s1
 80072ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80072f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f4:	da2b      	bge.n	800734e <__ieee754_pow+0x9ce>
 80072f6:	4650      	mov	r0, sl
 80072f8:	f000 f96e 	bl	80075d8 <scalbn>
 80072fc:	ec51 0b10 	vmov	r0, r1, d0
 8007300:	ec53 2b18 	vmov	r2, r3, d8
 8007304:	f7ff bbed 	b.w	8006ae2 <__ieee754_pow+0x162>
 8007308:	4b30      	ldr	r3, [pc, #192]	; (80073cc <__ieee754_pow+0xa4c>)
 800730a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800730e:	429e      	cmp	r6, r3
 8007310:	f77f af0c 	ble.w	800712c <__ieee754_pow+0x7ac>
 8007314:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <__ieee754_pow+0xa50>)
 8007316:	440b      	add	r3, r1
 8007318:	4303      	orrs	r3, r0
 800731a:	d009      	beq.n	8007330 <__ieee754_pow+0x9b0>
 800731c:	ec51 0b18 	vmov	r0, r1, d8
 8007320:	2200      	movs	r2, #0
 8007322:	2300      	movs	r3, #0
 8007324:	f7f9 fbf2 	bl	8000b0c <__aeabi_dcmplt>
 8007328:	3800      	subs	r0, #0
 800732a:	bf18      	it	ne
 800732c:	2001      	movne	r0, #1
 800732e:	e447      	b.n	8006bc0 <__ieee754_pow+0x240>
 8007330:	4622      	mov	r2, r4
 8007332:	462b      	mov	r3, r5
 8007334:	f7f8 ffc0 	bl	80002b8 <__aeabi_dsub>
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	f7f9 fbfa 	bl	8000b34 <__aeabi_dcmpge>
 8007340:	2800      	cmp	r0, #0
 8007342:	f43f aef3 	beq.w	800712c <__ieee754_pow+0x7ac>
 8007346:	e7e9      	b.n	800731c <__ieee754_pow+0x99c>
 8007348:	f04f 0a00 	mov.w	sl, #0
 800734c:	e71a      	b.n	8007184 <__ieee754_pow+0x804>
 800734e:	ec51 0b10 	vmov	r0, r1, d0
 8007352:	4619      	mov	r1, r3
 8007354:	e7d4      	b.n	8007300 <__ieee754_pow+0x980>
 8007356:	491c      	ldr	r1, [pc, #112]	; (80073c8 <__ieee754_pow+0xa48>)
 8007358:	2000      	movs	r0, #0
 800735a:	f7ff bb30 	b.w	80069be <__ieee754_pow+0x3e>
 800735e:	2000      	movs	r0, #0
 8007360:	2100      	movs	r1, #0
 8007362:	f7ff bb2c 	b.w	80069be <__ieee754_pow+0x3e>
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7ff bb28 	b.w	80069be <__ieee754_pow+0x3e>
 800736e:	9204      	str	r2, [sp, #16]
 8007370:	f7ff bb7a 	b.w	8006a68 <__ieee754_pow+0xe8>
 8007374:	2300      	movs	r3, #0
 8007376:	f7ff bb64 	b.w	8006a42 <__ieee754_pow+0xc2>
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w
 8007380:	00000000 	.word	0x00000000
 8007384:	3fe62e43 	.word	0x3fe62e43
 8007388:	fefa39ef 	.word	0xfefa39ef
 800738c:	3fe62e42 	.word	0x3fe62e42
 8007390:	0ca86c39 	.word	0x0ca86c39
 8007394:	be205c61 	.word	0xbe205c61
 8007398:	72bea4d0 	.word	0x72bea4d0
 800739c:	3e663769 	.word	0x3e663769
 80073a0:	c5d26bf1 	.word	0xc5d26bf1
 80073a4:	3ebbbd41 	.word	0x3ebbbd41
 80073a8:	af25de2c 	.word	0xaf25de2c
 80073ac:	3f11566a 	.word	0x3f11566a
 80073b0:	16bebd93 	.word	0x16bebd93
 80073b4:	3f66c16c 	.word	0x3f66c16c
 80073b8:	5555553e 	.word	0x5555553e
 80073bc:	3fc55555 	.word	0x3fc55555
 80073c0:	3fe00000 	.word	0x3fe00000
 80073c4:	000fffff 	.word	0x000fffff
 80073c8:	3ff00000 	.word	0x3ff00000
 80073cc:	4090cbff 	.word	0x4090cbff
 80073d0:	3f6f3400 	.word	0x3f6f3400
 80073d4:	652b82fe 	.word	0x652b82fe
 80073d8:	3c971547 	.word	0x3c971547

080073dc <__ieee754_sqrt>:
 80073dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e0:	ec55 4b10 	vmov	r4, r5, d0
 80073e4:	4e55      	ldr	r6, [pc, #340]	; (800753c <__ieee754_sqrt+0x160>)
 80073e6:	43ae      	bics	r6, r5
 80073e8:	ee10 0a10 	vmov	r0, s0
 80073ec:	ee10 3a10 	vmov	r3, s0
 80073f0:	462a      	mov	r2, r5
 80073f2:	4629      	mov	r1, r5
 80073f4:	d110      	bne.n	8007418 <__ieee754_sqrt+0x3c>
 80073f6:	ee10 2a10 	vmov	r2, s0
 80073fa:	462b      	mov	r3, r5
 80073fc:	f7f9 f914 	bl	8000628 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	f7f8 ff58 	bl	80002bc <__adddf3>
 800740c:	4604      	mov	r4, r0
 800740e:	460d      	mov	r5, r1
 8007410:	ec45 4b10 	vmov	d0, r4, r5
 8007414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007418:	2d00      	cmp	r5, #0
 800741a:	dc10      	bgt.n	800743e <__ieee754_sqrt+0x62>
 800741c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007420:	4330      	orrs	r0, r6
 8007422:	d0f5      	beq.n	8007410 <__ieee754_sqrt+0x34>
 8007424:	b15d      	cbz	r5, 800743e <__ieee754_sqrt+0x62>
 8007426:	ee10 2a10 	vmov	r2, s0
 800742a:	462b      	mov	r3, r5
 800742c:	ee10 0a10 	vmov	r0, s0
 8007430:	f7f8 ff42 	bl	80002b8 <__aeabi_dsub>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	f7f9 fa20 	bl	800087c <__aeabi_ddiv>
 800743c:	e7e6      	b.n	800740c <__ieee754_sqrt+0x30>
 800743e:	1512      	asrs	r2, r2, #20
 8007440:	d074      	beq.n	800752c <__ieee754_sqrt+0x150>
 8007442:	07d4      	lsls	r4, r2, #31
 8007444:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007448:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800744c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007450:	bf5e      	ittt	pl
 8007452:	0fda      	lsrpl	r2, r3, #31
 8007454:	005b      	lslpl	r3, r3, #1
 8007456:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800745a:	2400      	movs	r4, #0
 800745c:	0fda      	lsrs	r2, r3, #31
 800745e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007462:	107f      	asrs	r7, r7, #1
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	2516      	movs	r5, #22
 8007468:	4620      	mov	r0, r4
 800746a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800746e:	1886      	adds	r6, r0, r2
 8007470:	428e      	cmp	r6, r1
 8007472:	bfde      	ittt	le
 8007474:	1b89      	suble	r1, r1, r6
 8007476:	18b0      	addle	r0, r6, r2
 8007478:	18a4      	addle	r4, r4, r2
 800747a:	0049      	lsls	r1, r1, #1
 800747c:	3d01      	subs	r5, #1
 800747e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007482:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007486:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800748a:	d1f0      	bne.n	800746e <__ieee754_sqrt+0x92>
 800748c:	462a      	mov	r2, r5
 800748e:	f04f 0e20 	mov.w	lr, #32
 8007492:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007496:	4281      	cmp	r1, r0
 8007498:	eb06 0c05 	add.w	ip, r6, r5
 800749c:	dc02      	bgt.n	80074a4 <__ieee754_sqrt+0xc8>
 800749e:	d113      	bne.n	80074c8 <__ieee754_sqrt+0xec>
 80074a0:	459c      	cmp	ip, r3
 80074a2:	d811      	bhi.n	80074c8 <__ieee754_sqrt+0xec>
 80074a4:	f1bc 0f00 	cmp.w	ip, #0
 80074a8:	eb0c 0506 	add.w	r5, ip, r6
 80074ac:	da43      	bge.n	8007536 <__ieee754_sqrt+0x15a>
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	db41      	blt.n	8007536 <__ieee754_sqrt+0x15a>
 80074b2:	f100 0801 	add.w	r8, r0, #1
 80074b6:	1a09      	subs	r1, r1, r0
 80074b8:	459c      	cmp	ip, r3
 80074ba:	bf88      	it	hi
 80074bc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80074c0:	eba3 030c 	sub.w	r3, r3, ip
 80074c4:	4432      	add	r2, r6
 80074c6:	4640      	mov	r0, r8
 80074c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80074cc:	f1be 0e01 	subs.w	lr, lr, #1
 80074d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80074d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074dc:	d1db      	bne.n	8007496 <__ieee754_sqrt+0xba>
 80074de:	430b      	orrs	r3, r1
 80074e0:	d006      	beq.n	80074f0 <__ieee754_sqrt+0x114>
 80074e2:	1c50      	adds	r0, r2, #1
 80074e4:	bf13      	iteet	ne
 80074e6:	3201      	addne	r2, #1
 80074e8:	3401      	addeq	r4, #1
 80074ea:	4672      	moveq	r2, lr
 80074ec:	f022 0201 	bicne.w	r2, r2, #1
 80074f0:	1063      	asrs	r3, r4, #1
 80074f2:	0852      	lsrs	r2, r2, #1
 80074f4:	07e1      	lsls	r1, r4, #31
 80074f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80074fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80074fe:	bf48      	it	mi
 8007500:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007504:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007508:	4614      	mov	r4, r2
 800750a:	e781      	b.n	8007410 <__ieee754_sqrt+0x34>
 800750c:	0ad9      	lsrs	r1, r3, #11
 800750e:	3815      	subs	r0, #21
 8007510:	055b      	lsls	r3, r3, #21
 8007512:	2900      	cmp	r1, #0
 8007514:	d0fa      	beq.n	800750c <__ieee754_sqrt+0x130>
 8007516:	02cd      	lsls	r5, r1, #11
 8007518:	d50a      	bpl.n	8007530 <__ieee754_sqrt+0x154>
 800751a:	f1c2 0420 	rsb	r4, r2, #32
 800751e:	fa23 f404 	lsr.w	r4, r3, r4
 8007522:	1e55      	subs	r5, r2, #1
 8007524:	4093      	lsls	r3, r2
 8007526:	4321      	orrs	r1, r4
 8007528:	1b42      	subs	r2, r0, r5
 800752a:	e78a      	b.n	8007442 <__ieee754_sqrt+0x66>
 800752c:	4610      	mov	r0, r2
 800752e:	e7f0      	b.n	8007512 <__ieee754_sqrt+0x136>
 8007530:	0049      	lsls	r1, r1, #1
 8007532:	3201      	adds	r2, #1
 8007534:	e7ef      	b.n	8007516 <__ieee754_sqrt+0x13a>
 8007536:	4680      	mov	r8, r0
 8007538:	e7bd      	b.n	80074b6 <__ieee754_sqrt+0xda>
 800753a:	bf00      	nop
 800753c:	7ff00000 	.word	0x7ff00000

08007540 <with_errno>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	460d      	mov	r5, r1
 8007546:	4616      	mov	r6, r2
 8007548:	f000 f8cc 	bl	80076e4 <__errno>
 800754c:	4629      	mov	r1, r5
 800754e:	6006      	str	r6, [r0, #0]
 8007550:	4620      	mov	r0, r4
 8007552:	bd70      	pop	{r4, r5, r6, pc}

08007554 <xflow>:
 8007554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007556:	4614      	mov	r4, r2
 8007558:	461d      	mov	r5, r3
 800755a:	b108      	cbz	r0, 8007560 <xflow+0xc>
 800755c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007560:	e9cd 2300 	strd	r2, r3, [sp]
 8007564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007568:	4620      	mov	r0, r4
 800756a:	4629      	mov	r1, r5
 800756c:	f7f9 f85c 	bl	8000628 <__aeabi_dmul>
 8007570:	2222      	movs	r2, #34	; 0x22
 8007572:	b003      	add	sp, #12
 8007574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007578:	f7ff bfe2 	b.w	8007540 <with_errno>

0800757c <__math_uflow>:
 800757c:	b508      	push	{r3, lr}
 800757e:	2200      	movs	r2, #0
 8007580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007584:	f7ff ffe6 	bl	8007554 <xflow>
 8007588:	ec41 0b10 	vmov	d0, r0, r1
 800758c:	bd08      	pop	{r3, pc}

0800758e <__math_oflow>:
 800758e:	b508      	push	{r3, lr}
 8007590:	2200      	movs	r2, #0
 8007592:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007596:	f7ff ffdd 	bl	8007554 <xflow>
 800759a:	ec41 0b10 	vmov	d0, r0, r1
 800759e:	bd08      	pop	{r3, pc}

080075a0 <fabs>:
 80075a0:	ec51 0b10 	vmov	r0, r1, d0
 80075a4:	ee10 2a10 	vmov	r2, s0
 80075a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075ac:	ec43 2b10 	vmov	d0, r2, r3
 80075b0:	4770      	bx	lr

080075b2 <finite>:
 80075b2:	b082      	sub	sp, #8
 80075b4:	ed8d 0b00 	vstr	d0, [sp]
 80075b8:	9801      	ldr	r0, [sp, #4]
 80075ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80075be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80075c2:	0fc0      	lsrs	r0, r0, #31
 80075c4:	b002      	add	sp, #8
 80075c6:	4770      	bx	lr

080075c8 <nan>:
 80075c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80075d0 <nan+0x8>
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	00000000 	.word	0x00000000
 80075d4:	7ff80000 	.word	0x7ff80000

080075d8 <scalbn>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	ec55 4b10 	vmov	r4, r5, d0
 80075de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80075e2:	4606      	mov	r6, r0
 80075e4:	462b      	mov	r3, r5
 80075e6:	b99a      	cbnz	r2, 8007610 <scalbn+0x38>
 80075e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075ec:	4323      	orrs	r3, r4
 80075ee:	d036      	beq.n	800765e <scalbn+0x86>
 80075f0:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <scalbn+0x100>)
 80075f2:	4629      	mov	r1, r5
 80075f4:	ee10 0a10 	vmov	r0, s0
 80075f8:	2200      	movs	r2, #0
 80075fa:	f7f9 f815 	bl	8000628 <__aeabi_dmul>
 80075fe:	4b37      	ldr	r3, [pc, #220]	; (80076dc <scalbn+0x104>)
 8007600:	429e      	cmp	r6, r3
 8007602:	4604      	mov	r4, r0
 8007604:	460d      	mov	r5, r1
 8007606:	da10      	bge.n	800762a <scalbn+0x52>
 8007608:	a32b      	add	r3, pc, #172	; (adr r3, 80076b8 <scalbn+0xe0>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	e03a      	b.n	8007686 <scalbn+0xae>
 8007610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007614:	428a      	cmp	r2, r1
 8007616:	d10c      	bne.n	8007632 <scalbn+0x5a>
 8007618:	ee10 2a10 	vmov	r2, s0
 800761c:	4620      	mov	r0, r4
 800761e:	4629      	mov	r1, r5
 8007620:	f7f8 fe4c 	bl	80002bc <__adddf3>
 8007624:	4604      	mov	r4, r0
 8007626:	460d      	mov	r5, r1
 8007628:	e019      	b.n	800765e <scalbn+0x86>
 800762a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800762e:	460b      	mov	r3, r1
 8007630:	3a36      	subs	r2, #54	; 0x36
 8007632:	4432      	add	r2, r6
 8007634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007638:	428a      	cmp	r2, r1
 800763a:	dd08      	ble.n	800764e <scalbn+0x76>
 800763c:	2d00      	cmp	r5, #0
 800763e:	a120      	add	r1, pc, #128	; (adr r1, 80076c0 <scalbn+0xe8>)
 8007640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007644:	da1c      	bge.n	8007680 <scalbn+0xa8>
 8007646:	a120      	add	r1, pc, #128	; (adr r1, 80076c8 <scalbn+0xf0>)
 8007648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800764c:	e018      	b.n	8007680 <scalbn+0xa8>
 800764e:	2a00      	cmp	r2, #0
 8007650:	dd08      	ble.n	8007664 <scalbn+0x8c>
 8007652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800765a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800765e:	ec45 4b10 	vmov	d0, r4, r5
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007668:	da19      	bge.n	800769e <scalbn+0xc6>
 800766a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800766e:	429e      	cmp	r6, r3
 8007670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007674:	dd0a      	ble.n	800768c <scalbn+0xb4>
 8007676:	a112      	add	r1, pc, #72	; (adr r1, 80076c0 <scalbn+0xe8>)
 8007678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e2      	bne.n	8007646 <scalbn+0x6e>
 8007680:	a30f      	add	r3, pc, #60	; (adr r3, 80076c0 <scalbn+0xe8>)
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f8 ffcf 	bl	8000628 <__aeabi_dmul>
 800768a:	e7cb      	b.n	8007624 <scalbn+0x4c>
 800768c:	a10a      	add	r1, pc, #40	; (adr r1, 80076b8 <scalbn+0xe0>)
 800768e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0b8      	beq.n	8007608 <scalbn+0x30>
 8007696:	a10e      	add	r1, pc, #56	; (adr r1, 80076d0 <scalbn+0xf8>)
 8007698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800769c:	e7b4      	b.n	8007608 <scalbn+0x30>
 800769e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076a2:	3236      	adds	r2, #54	; 0x36
 80076a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80076ac:	4620      	mov	r0, r4
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <scalbn+0x108>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	e7e8      	b.n	8007686 <scalbn+0xae>
 80076b4:	f3af 8000 	nop.w
 80076b8:	c2f8f359 	.word	0xc2f8f359
 80076bc:	01a56e1f 	.word	0x01a56e1f
 80076c0:	8800759c 	.word	0x8800759c
 80076c4:	7e37e43c 	.word	0x7e37e43c
 80076c8:	8800759c 	.word	0x8800759c
 80076cc:	fe37e43c 	.word	0xfe37e43c
 80076d0:	c2f8f359 	.word	0xc2f8f359
 80076d4:	81a56e1f 	.word	0x81a56e1f
 80076d8:	43500000 	.word	0x43500000
 80076dc:	ffff3cb0 	.word	0xffff3cb0
 80076e0:	3c900000 	.word	0x3c900000

080076e4 <__errno>:
 80076e4:	4b01      	ldr	r3, [pc, #4]	; (80076ec <__errno+0x8>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	2000000c 	.word	0x2000000c

080076f0 <__libc_init_array>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	4d0d      	ldr	r5, [pc, #52]	; (8007728 <__libc_init_array+0x38>)
 80076f4:	4c0d      	ldr	r4, [pc, #52]	; (800772c <__libc_init_array+0x3c>)
 80076f6:	1b64      	subs	r4, r4, r5
 80076f8:	10a4      	asrs	r4, r4, #2
 80076fa:	2600      	movs	r6, #0
 80076fc:	42a6      	cmp	r6, r4
 80076fe:	d109      	bne.n	8007714 <__libc_init_array+0x24>
 8007700:	4d0b      	ldr	r5, [pc, #44]	; (8007730 <__libc_init_array+0x40>)
 8007702:	4c0c      	ldr	r4, [pc, #48]	; (8007734 <__libc_init_array+0x44>)
 8007704:	f002 ff04 	bl	800a510 <_init>
 8007708:	1b64      	subs	r4, r4, r5
 800770a:	10a4      	asrs	r4, r4, #2
 800770c:	2600      	movs	r6, #0
 800770e:	42a6      	cmp	r6, r4
 8007710:	d105      	bne.n	800771e <__libc_init_array+0x2e>
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	f855 3b04 	ldr.w	r3, [r5], #4
 8007718:	4798      	blx	r3
 800771a:	3601      	adds	r6, #1
 800771c:	e7ee      	b.n	80076fc <__libc_init_array+0xc>
 800771e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007722:	4798      	blx	r3
 8007724:	3601      	adds	r6, #1
 8007726:	e7f2      	b.n	800770e <__libc_init_array+0x1e>
 8007728:	0800a9bc 	.word	0x0800a9bc
 800772c:	0800a9bc 	.word	0x0800a9bc
 8007730:	0800a9bc 	.word	0x0800a9bc
 8007734:	0800a9c0 	.word	0x0800a9c0

08007738 <memset>:
 8007738:	4402      	add	r2, r0
 800773a:	4603      	mov	r3, r0
 800773c:	4293      	cmp	r3, r2
 800773e:	d100      	bne.n	8007742 <memset+0xa>
 8007740:	4770      	bx	lr
 8007742:	f803 1b01 	strb.w	r1, [r3], #1
 8007746:	e7f9      	b.n	800773c <memset+0x4>

08007748 <__cvt>:
 8007748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	ec55 4b10 	vmov	r4, r5, d0
 8007750:	2d00      	cmp	r5, #0
 8007752:	460e      	mov	r6, r1
 8007754:	4619      	mov	r1, r3
 8007756:	462b      	mov	r3, r5
 8007758:	bfbb      	ittet	lt
 800775a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800775e:	461d      	movlt	r5, r3
 8007760:	2300      	movge	r3, #0
 8007762:	232d      	movlt	r3, #45	; 0x2d
 8007764:	700b      	strb	r3, [r1, #0]
 8007766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007768:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800776c:	4691      	mov	r9, r2
 800776e:	f023 0820 	bic.w	r8, r3, #32
 8007772:	bfbc      	itt	lt
 8007774:	4622      	movlt	r2, r4
 8007776:	4614      	movlt	r4, r2
 8007778:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800777c:	d005      	beq.n	800778a <__cvt+0x42>
 800777e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007782:	d100      	bne.n	8007786 <__cvt+0x3e>
 8007784:	3601      	adds	r6, #1
 8007786:	2102      	movs	r1, #2
 8007788:	e000      	b.n	800778c <__cvt+0x44>
 800778a:	2103      	movs	r1, #3
 800778c:	ab03      	add	r3, sp, #12
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	ab02      	add	r3, sp, #8
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	ec45 4b10 	vmov	d0, r4, r5
 8007798:	4653      	mov	r3, sl
 800779a:	4632      	mov	r2, r6
 800779c:	f000 fcec 	bl	8008178 <_dtoa_r>
 80077a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077a4:	4607      	mov	r7, r0
 80077a6:	d102      	bne.n	80077ae <__cvt+0x66>
 80077a8:	f019 0f01 	tst.w	r9, #1
 80077ac:	d022      	beq.n	80077f4 <__cvt+0xac>
 80077ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077b2:	eb07 0906 	add.w	r9, r7, r6
 80077b6:	d110      	bne.n	80077da <__cvt+0x92>
 80077b8:	783b      	ldrb	r3, [r7, #0]
 80077ba:	2b30      	cmp	r3, #48	; 0x30
 80077bc:	d10a      	bne.n	80077d4 <__cvt+0x8c>
 80077be:	2200      	movs	r2, #0
 80077c0:	2300      	movs	r3, #0
 80077c2:	4620      	mov	r0, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	f7f9 f997 	bl	8000af8 <__aeabi_dcmpeq>
 80077ca:	b918      	cbnz	r0, 80077d4 <__cvt+0x8c>
 80077cc:	f1c6 0601 	rsb	r6, r6, #1
 80077d0:	f8ca 6000 	str.w	r6, [sl]
 80077d4:	f8da 3000 	ldr.w	r3, [sl]
 80077d8:	4499      	add	r9, r3
 80077da:	2200      	movs	r2, #0
 80077dc:	2300      	movs	r3, #0
 80077de:	4620      	mov	r0, r4
 80077e0:	4629      	mov	r1, r5
 80077e2:	f7f9 f989 	bl	8000af8 <__aeabi_dcmpeq>
 80077e6:	b108      	cbz	r0, 80077ec <__cvt+0xa4>
 80077e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80077ec:	2230      	movs	r2, #48	; 0x30
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	454b      	cmp	r3, r9
 80077f2:	d307      	bcc.n	8007804 <__cvt+0xbc>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077f8:	1bdb      	subs	r3, r3, r7
 80077fa:	4638      	mov	r0, r7
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	b004      	add	sp, #16
 8007800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007804:	1c59      	adds	r1, r3, #1
 8007806:	9103      	str	r1, [sp, #12]
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	e7f0      	b.n	80077ee <__cvt+0xa6>

0800780c <__exponent>:
 800780c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800780e:	4603      	mov	r3, r0
 8007810:	2900      	cmp	r1, #0
 8007812:	bfb8      	it	lt
 8007814:	4249      	neglt	r1, r1
 8007816:	f803 2b02 	strb.w	r2, [r3], #2
 800781a:	bfb4      	ite	lt
 800781c:	222d      	movlt	r2, #45	; 0x2d
 800781e:	222b      	movge	r2, #43	; 0x2b
 8007820:	2909      	cmp	r1, #9
 8007822:	7042      	strb	r2, [r0, #1]
 8007824:	dd2a      	ble.n	800787c <__exponent+0x70>
 8007826:	f10d 0407 	add.w	r4, sp, #7
 800782a:	46a4      	mov	ip, r4
 800782c:	270a      	movs	r7, #10
 800782e:	46a6      	mov	lr, r4
 8007830:	460a      	mov	r2, r1
 8007832:	fb91 f6f7 	sdiv	r6, r1, r7
 8007836:	fb07 1516 	mls	r5, r7, r6, r1
 800783a:	3530      	adds	r5, #48	; 0x30
 800783c:	2a63      	cmp	r2, #99	; 0x63
 800783e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007842:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007846:	4631      	mov	r1, r6
 8007848:	dcf1      	bgt.n	800782e <__exponent+0x22>
 800784a:	3130      	adds	r1, #48	; 0x30
 800784c:	f1ae 0502 	sub.w	r5, lr, #2
 8007850:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007854:	1c44      	adds	r4, r0, #1
 8007856:	4629      	mov	r1, r5
 8007858:	4561      	cmp	r1, ip
 800785a:	d30a      	bcc.n	8007872 <__exponent+0x66>
 800785c:	f10d 0209 	add.w	r2, sp, #9
 8007860:	eba2 020e 	sub.w	r2, r2, lr
 8007864:	4565      	cmp	r5, ip
 8007866:	bf88      	it	hi
 8007868:	2200      	movhi	r2, #0
 800786a:	4413      	add	r3, r2
 800786c:	1a18      	subs	r0, r3, r0
 800786e:	b003      	add	sp, #12
 8007870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007876:	f804 2f01 	strb.w	r2, [r4, #1]!
 800787a:	e7ed      	b.n	8007858 <__exponent+0x4c>
 800787c:	2330      	movs	r3, #48	; 0x30
 800787e:	3130      	adds	r1, #48	; 0x30
 8007880:	7083      	strb	r3, [r0, #2]
 8007882:	70c1      	strb	r1, [r0, #3]
 8007884:	1d03      	adds	r3, r0, #4
 8007886:	e7f1      	b.n	800786c <__exponent+0x60>

08007888 <_printf_float>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	ed2d 8b02 	vpush	{d8}
 8007890:	b08d      	sub	sp, #52	; 0x34
 8007892:	460c      	mov	r4, r1
 8007894:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007898:	4616      	mov	r6, r2
 800789a:	461f      	mov	r7, r3
 800789c:	4605      	mov	r5, r0
 800789e:	f001 fa59 	bl	8008d54 <_localeconv_r>
 80078a2:	f8d0 a000 	ldr.w	sl, [r0]
 80078a6:	4650      	mov	r0, sl
 80078a8:	f7f8 fcaa 	bl	8000200 <strlen>
 80078ac:	2300      	movs	r3, #0
 80078ae:	930a      	str	r3, [sp, #40]	; 0x28
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	9305      	str	r3, [sp, #20]
 80078b4:	f8d8 3000 	ldr.w	r3, [r8]
 80078b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078bc:	3307      	adds	r3, #7
 80078be:	f023 0307 	bic.w	r3, r3, #7
 80078c2:	f103 0208 	add.w	r2, r3, #8
 80078c6:	f8c8 2000 	str.w	r2, [r8]
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078da:	9307      	str	r3, [sp, #28]
 80078dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80078e0:	ee08 0a10 	vmov	s16, r0
 80078e4:	4b9f      	ldr	r3, [pc, #636]	; (8007b64 <_printf_float+0x2dc>)
 80078e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ea:	f04f 32ff 	mov.w	r2, #4294967295
 80078ee:	f7f9 f935 	bl	8000b5c <__aeabi_dcmpun>
 80078f2:	bb88      	cbnz	r0, 8007958 <_printf_float+0xd0>
 80078f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078f8:	4b9a      	ldr	r3, [pc, #616]	; (8007b64 <_printf_float+0x2dc>)
 80078fa:	f04f 32ff 	mov.w	r2, #4294967295
 80078fe:	f7f9 f90f 	bl	8000b20 <__aeabi_dcmple>
 8007902:	bb48      	cbnz	r0, 8007958 <_printf_float+0xd0>
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	4640      	mov	r0, r8
 800790a:	4649      	mov	r1, r9
 800790c:	f7f9 f8fe 	bl	8000b0c <__aeabi_dcmplt>
 8007910:	b110      	cbz	r0, 8007918 <_printf_float+0x90>
 8007912:	232d      	movs	r3, #45	; 0x2d
 8007914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007918:	4b93      	ldr	r3, [pc, #588]	; (8007b68 <_printf_float+0x2e0>)
 800791a:	4894      	ldr	r0, [pc, #592]	; (8007b6c <_printf_float+0x2e4>)
 800791c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007920:	bf94      	ite	ls
 8007922:	4698      	movls	r8, r3
 8007924:	4680      	movhi	r8, r0
 8007926:	2303      	movs	r3, #3
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	9b05      	ldr	r3, [sp, #20]
 800792c:	f023 0204 	bic.w	r2, r3, #4
 8007930:	6022      	str	r2, [r4, #0]
 8007932:	f04f 0900 	mov.w	r9, #0
 8007936:	9700      	str	r7, [sp, #0]
 8007938:	4633      	mov	r3, r6
 800793a:	aa0b      	add	r2, sp, #44	; 0x2c
 800793c:	4621      	mov	r1, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f9d8 	bl	8007cf4 <_printf_common>
 8007944:	3001      	adds	r0, #1
 8007946:	f040 8090 	bne.w	8007a6a <_printf_float+0x1e2>
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	b00d      	add	sp, #52	; 0x34
 8007950:	ecbd 8b02 	vpop	{d8}
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007958:	4642      	mov	r2, r8
 800795a:	464b      	mov	r3, r9
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f9 f8fc 	bl	8000b5c <__aeabi_dcmpun>
 8007964:	b140      	cbz	r0, 8007978 <_printf_float+0xf0>
 8007966:	464b      	mov	r3, r9
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfbc      	itt	lt
 800796c:	232d      	movlt	r3, #45	; 0x2d
 800796e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007972:	487f      	ldr	r0, [pc, #508]	; (8007b70 <_printf_float+0x2e8>)
 8007974:	4b7f      	ldr	r3, [pc, #508]	; (8007b74 <_printf_float+0x2ec>)
 8007976:	e7d1      	b.n	800791c <_printf_float+0x94>
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800797e:	9206      	str	r2, [sp, #24]
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	d13f      	bne.n	8007a04 <_printf_float+0x17c>
 8007984:	2306      	movs	r3, #6
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	9b05      	ldr	r3, [sp, #20]
 800798a:	6861      	ldr	r1, [r4, #4]
 800798c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007990:	2300      	movs	r3, #0
 8007992:	9303      	str	r3, [sp, #12]
 8007994:	ab0a      	add	r3, sp, #40	; 0x28
 8007996:	e9cd b301 	strd	fp, r3, [sp, #4]
 800799a:	ab09      	add	r3, sp, #36	; 0x24
 800799c:	ec49 8b10 	vmov	d0, r8, r9
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	6022      	str	r2, [r4, #0]
 80079a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7ff fecd 	bl	8007748 <__cvt>
 80079ae:	9b06      	ldr	r3, [sp, #24]
 80079b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079b2:	2b47      	cmp	r3, #71	; 0x47
 80079b4:	4680      	mov	r8, r0
 80079b6:	d108      	bne.n	80079ca <_printf_float+0x142>
 80079b8:	1cc8      	adds	r0, r1, #3
 80079ba:	db02      	blt.n	80079c2 <_printf_float+0x13a>
 80079bc:	6863      	ldr	r3, [r4, #4]
 80079be:	4299      	cmp	r1, r3
 80079c0:	dd41      	ble.n	8007a46 <_printf_float+0x1be>
 80079c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80079c6:	fa5f fb8b 	uxtb.w	fp, fp
 80079ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079ce:	d820      	bhi.n	8007a12 <_printf_float+0x18a>
 80079d0:	3901      	subs	r1, #1
 80079d2:	465a      	mov	r2, fp
 80079d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079d8:	9109      	str	r1, [sp, #36]	; 0x24
 80079da:	f7ff ff17 	bl	800780c <__exponent>
 80079de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079e0:	1813      	adds	r3, r2, r0
 80079e2:	2a01      	cmp	r2, #1
 80079e4:	4681      	mov	r9, r0
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	dc02      	bgt.n	80079f0 <_printf_float+0x168>
 80079ea:	6822      	ldr	r2, [r4, #0]
 80079ec:	07d2      	lsls	r2, r2, #31
 80079ee:	d501      	bpl.n	80079f4 <_printf_float+0x16c>
 80079f0:	3301      	adds	r3, #1
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d09c      	beq.n	8007936 <_printf_float+0xae>
 80079fc:	232d      	movs	r3, #45	; 0x2d
 80079fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a02:	e798      	b.n	8007936 <_printf_float+0xae>
 8007a04:	9a06      	ldr	r2, [sp, #24]
 8007a06:	2a47      	cmp	r2, #71	; 0x47
 8007a08:	d1be      	bne.n	8007988 <_printf_float+0x100>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1bc      	bne.n	8007988 <_printf_float+0x100>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e7b9      	b.n	8007986 <_printf_float+0xfe>
 8007a12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a16:	d118      	bne.n	8007a4a <_printf_float+0x1c2>
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	dd0b      	ble.n	8007a36 <_printf_float+0x1ae>
 8007a1e:	6121      	str	r1, [r4, #16]
 8007a20:	b913      	cbnz	r3, 8007a28 <_printf_float+0x1a0>
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	07d0      	lsls	r0, r2, #31
 8007a26:	d502      	bpl.n	8007a2e <_printf_float+0x1a6>
 8007a28:	3301      	adds	r3, #1
 8007a2a:	440b      	add	r3, r1
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a30:	f04f 0900 	mov.w	r9, #0
 8007a34:	e7de      	b.n	80079f4 <_printf_float+0x16c>
 8007a36:	b913      	cbnz	r3, 8007a3e <_printf_float+0x1b6>
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	07d2      	lsls	r2, r2, #31
 8007a3c:	d501      	bpl.n	8007a42 <_printf_float+0x1ba>
 8007a3e:	3302      	adds	r3, #2
 8007a40:	e7f4      	b.n	8007a2c <_printf_float+0x1a4>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e7f2      	b.n	8007a2c <_printf_float+0x1a4>
 8007a46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	4299      	cmp	r1, r3
 8007a4e:	db05      	blt.n	8007a5c <_printf_float+0x1d4>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	6121      	str	r1, [r4, #16]
 8007a54:	07d8      	lsls	r0, r3, #31
 8007a56:	d5ea      	bpl.n	8007a2e <_printf_float+0x1a6>
 8007a58:	1c4b      	adds	r3, r1, #1
 8007a5a:	e7e7      	b.n	8007a2c <_printf_float+0x1a4>
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	bfd4      	ite	le
 8007a60:	f1c1 0202 	rsble	r2, r1, #2
 8007a64:	2201      	movgt	r2, #1
 8007a66:	4413      	add	r3, r2
 8007a68:	e7e0      	b.n	8007a2c <_printf_float+0x1a4>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	055a      	lsls	r2, r3, #21
 8007a6e:	d407      	bmi.n	8007a80 <_printf_float+0x1f8>
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	4642      	mov	r2, r8
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d12c      	bne.n	8007ad8 <_printf_float+0x250>
 8007a7e:	e764      	b.n	800794a <_printf_float+0xc2>
 8007a80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a84:	f240 80e0 	bls.w	8007c48 <_printf_float+0x3c0>
 8007a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f7f9 f832 	bl	8000af8 <__aeabi_dcmpeq>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d034      	beq.n	8007b02 <_printf_float+0x27a>
 8007a98:	4a37      	ldr	r2, [pc, #220]	; (8007b78 <_printf_float+0x2f0>)
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f af51 	beq.w	800794a <_printf_float+0xc2>
 8007aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aac:	429a      	cmp	r2, r3
 8007aae:	db02      	blt.n	8007ab6 <_printf_float+0x22e>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	07d8      	lsls	r0, r3, #31
 8007ab4:	d510      	bpl.n	8007ad8 <_printf_float+0x250>
 8007ab6:	ee18 3a10 	vmov	r3, s16
 8007aba:	4652      	mov	r2, sl
 8007abc:	4631      	mov	r1, r6
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	f43f af41 	beq.w	800794a <_printf_float+0xc2>
 8007ac8:	f04f 0800 	mov.w	r8, #0
 8007acc:	f104 091a 	add.w	r9, r4, #26
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	4543      	cmp	r3, r8
 8007ad6:	dc09      	bgt.n	8007aec <_printf_float+0x264>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	079b      	lsls	r3, r3, #30
 8007adc:	f100 8105 	bmi.w	8007cea <_printf_float+0x462>
 8007ae0:	68e0      	ldr	r0, [r4, #12]
 8007ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae4:	4298      	cmp	r0, r3
 8007ae6:	bfb8      	it	lt
 8007ae8:	4618      	movlt	r0, r3
 8007aea:	e730      	b.n	800794e <_printf_float+0xc6>
 8007aec:	2301      	movs	r3, #1
 8007aee:	464a      	mov	r2, r9
 8007af0:	4631      	mov	r1, r6
 8007af2:	4628      	mov	r0, r5
 8007af4:	47b8      	blx	r7
 8007af6:	3001      	adds	r0, #1
 8007af8:	f43f af27 	beq.w	800794a <_printf_float+0xc2>
 8007afc:	f108 0801 	add.w	r8, r8, #1
 8007b00:	e7e6      	b.n	8007ad0 <_printf_float+0x248>
 8007b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dc39      	bgt.n	8007b7c <_printf_float+0x2f4>
 8007b08:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <_printf_float+0x2f0>)
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	f43f af19 	beq.w	800794a <_printf_float+0xc2>
 8007b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d102      	bne.n	8007b26 <_printf_float+0x29e>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	07d9      	lsls	r1, r3, #31
 8007b24:	d5d8      	bpl.n	8007ad8 <_printf_float+0x250>
 8007b26:	ee18 3a10 	vmov	r3, s16
 8007b2a:	4652      	mov	r2, sl
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4628      	mov	r0, r5
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f af09 	beq.w	800794a <_printf_float+0xc2>
 8007b38:	f04f 0900 	mov.w	r9, #0
 8007b3c:	f104 0a1a 	add.w	sl, r4, #26
 8007b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b42:	425b      	negs	r3, r3
 8007b44:	454b      	cmp	r3, r9
 8007b46:	dc01      	bgt.n	8007b4c <_printf_float+0x2c4>
 8007b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4a:	e792      	b.n	8007a72 <_printf_float+0x1ea>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f aef7 	beq.w	800794a <_printf_float+0xc2>
 8007b5c:	f109 0901 	add.w	r9, r9, #1
 8007b60:	e7ee      	b.n	8007b40 <_printf_float+0x2b8>
 8007b62:	bf00      	nop
 8007b64:	7fefffff 	.word	0x7fefffff
 8007b68:	0800a5dc 	.word	0x0800a5dc
 8007b6c:	0800a5e0 	.word	0x0800a5e0
 8007b70:	0800a5e8 	.word	0x0800a5e8
 8007b74:	0800a5e4 	.word	0x0800a5e4
 8007b78:	0800a5ec 	.word	0x0800a5ec
 8007b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b80:	429a      	cmp	r2, r3
 8007b82:	bfa8      	it	ge
 8007b84:	461a      	movge	r2, r3
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	4691      	mov	r9, r2
 8007b8a:	dc37      	bgt.n	8007bfc <_printf_float+0x374>
 8007b8c:	f04f 0b00 	mov.w	fp, #0
 8007b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b94:	f104 021a 	add.w	r2, r4, #26
 8007b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b9a:	9305      	str	r3, [sp, #20]
 8007b9c:	eba3 0309 	sub.w	r3, r3, r9
 8007ba0:	455b      	cmp	r3, fp
 8007ba2:	dc33      	bgt.n	8007c0c <_printf_float+0x384>
 8007ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	db3b      	blt.n	8007c24 <_printf_float+0x39c>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	07da      	lsls	r2, r3, #31
 8007bb0:	d438      	bmi.n	8007c24 <_printf_float+0x39c>
 8007bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb4:	9a05      	ldr	r2, [sp, #20]
 8007bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bb8:	1a9a      	subs	r2, r3, r2
 8007bba:	eba3 0901 	sub.w	r9, r3, r1
 8007bbe:	4591      	cmp	r9, r2
 8007bc0:	bfa8      	it	ge
 8007bc2:	4691      	movge	r9, r2
 8007bc4:	f1b9 0f00 	cmp.w	r9, #0
 8007bc8:	dc35      	bgt.n	8007c36 <_printf_float+0x3ae>
 8007bca:	f04f 0800 	mov.w	r8, #0
 8007bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bd2:	f104 0a1a 	add.w	sl, r4, #26
 8007bd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	eba3 0309 	sub.w	r3, r3, r9
 8007be0:	4543      	cmp	r3, r8
 8007be2:	f77f af79 	ble.w	8007ad8 <_printf_float+0x250>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4652      	mov	r2, sl
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f aeaa 	beq.w	800794a <_printf_float+0xc2>
 8007bf6:	f108 0801 	add.w	r8, r8, #1
 8007bfa:	e7ec      	b.n	8007bd6 <_printf_float+0x34e>
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4642      	mov	r2, r8
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	d1c0      	bne.n	8007b8c <_printf_float+0x304>
 8007c0a:	e69e      	b.n	800794a <_printf_float+0xc2>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	9205      	str	r2, [sp, #20]
 8007c14:	47b8      	blx	r7
 8007c16:	3001      	adds	r0, #1
 8007c18:	f43f ae97 	beq.w	800794a <_printf_float+0xc2>
 8007c1c:	9a05      	ldr	r2, [sp, #20]
 8007c1e:	f10b 0b01 	add.w	fp, fp, #1
 8007c22:	e7b9      	b.n	8007b98 <_printf_float+0x310>
 8007c24:	ee18 3a10 	vmov	r3, s16
 8007c28:	4652      	mov	r2, sl
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	d1be      	bne.n	8007bb2 <_printf_float+0x32a>
 8007c34:	e689      	b.n	800794a <_printf_float+0xc2>
 8007c36:	9a05      	ldr	r2, [sp, #20]
 8007c38:	464b      	mov	r3, r9
 8007c3a:	4442      	add	r2, r8
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4628      	mov	r0, r5
 8007c40:	47b8      	blx	r7
 8007c42:	3001      	adds	r0, #1
 8007c44:	d1c1      	bne.n	8007bca <_printf_float+0x342>
 8007c46:	e680      	b.n	800794a <_printf_float+0xc2>
 8007c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4a:	2a01      	cmp	r2, #1
 8007c4c:	dc01      	bgt.n	8007c52 <_printf_float+0x3ca>
 8007c4e:	07db      	lsls	r3, r3, #31
 8007c50:	d538      	bpl.n	8007cc4 <_printf_float+0x43c>
 8007c52:	2301      	movs	r3, #1
 8007c54:	4642      	mov	r2, r8
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f ae74 	beq.w	800794a <_printf_float+0xc2>
 8007c62:	ee18 3a10 	vmov	r3, s16
 8007c66:	4652      	mov	r2, sl
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f ae6b 	beq.w	800794a <_printf_float+0xc2>
 8007c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f7f8 ff3c 	bl	8000af8 <__aeabi_dcmpeq>
 8007c80:	b9d8      	cbnz	r0, 8007cba <_printf_float+0x432>
 8007c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c84:	f108 0201 	add.w	r2, r8, #1
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	d10e      	bne.n	8007cb2 <_printf_float+0x42a>
 8007c94:	e659      	b.n	800794a <_printf_float+0xc2>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4652      	mov	r2, sl
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	47b8      	blx	r7
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	f43f ae52 	beq.w	800794a <_printf_float+0xc2>
 8007ca6:	f108 0801 	add.w	r8, r8, #1
 8007caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cac:	3b01      	subs	r3, #1
 8007cae:	4543      	cmp	r3, r8
 8007cb0:	dcf1      	bgt.n	8007c96 <_printf_float+0x40e>
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cb8:	e6dc      	b.n	8007a74 <_printf_float+0x1ec>
 8007cba:	f04f 0800 	mov.w	r8, #0
 8007cbe:	f104 0a1a 	add.w	sl, r4, #26
 8007cc2:	e7f2      	b.n	8007caa <_printf_float+0x422>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4642      	mov	r2, r8
 8007cc8:	e7df      	b.n	8007c8a <_printf_float+0x402>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	464a      	mov	r2, r9
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	f43f ae38 	beq.w	800794a <_printf_float+0xc2>
 8007cda:	f108 0801 	add.w	r8, r8, #1
 8007cde:	68e3      	ldr	r3, [r4, #12]
 8007ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ce2:	1a5b      	subs	r3, r3, r1
 8007ce4:	4543      	cmp	r3, r8
 8007ce6:	dcf0      	bgt.n	8007cca <_printf_float+0x442>
 8007ce8:	e6fa      	b.n	8007ae0 <_printf_float+0x258>
 8007cea:	f04f 0800 	mov.w	r8, #0
 8007cee:	f104 0919 	add.w	r9, r4, #25
 8007cf2:	e7f4      	b.n	8007cde <_printf_float+0x456>

08007cf4 <_printf_common>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	4616      	mov	r6, r2
 8007cfa:	4699      	mov	r9, r3
 8007cfc:	688a      	ldr	r2, [r1, #8]
 8007cfe:	690b      	ldr	r3, [r1, #16]
 8007d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d04:	4293      	cmp	r3, r2
 8007d06:	bfb8      	it	lt
 8007d08:	4613      	movlt	r3, r2
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d10:	4607      	mov	r7, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	b10a      	cbz	r2, 8007d1a <_printf_common+0x26>
 8007d16:	3301      	adds	r3, #1
 8007d18:	6033      	str	r3, [r6, #0]
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	0699      	lsls	r1, r3, #26
 8007d1e:	bf42      	ittt	mi
 8007d20:	6833      	ldrmi	r3, [r6, #0]
 8007d22:	3302      	addmi	r3, #2
 8007d24:	6033      	strmi	r3, [r6, #0]
 8007d26:	6825      	ldr	r5, [r4, #0]
 8007d28:	f015 0506 	ands.w	r5, r5, #6
 8007d2c:	d106      	bne.n	8007d3c <_printf_common+0x48>
 8007d2e:	f104 0a19 	add.w	sl, r4, #25
 8007d32:	68e3      	ldr	r3, [r4, #12]
 8007d34:	6832      	ldr	r2, [r6, #0]
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	42ab      	cmp	r3, r5
 8007d3a:	dc26      	bgt.n	8007d8a <_printf_common+0x96>
 8007d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d40:	1e13      	subs	r3, r2, #0
 8007d42:	6822      	ldr	r2, [r4, #0]
 8007d44:	bf18      	it	ne
 8007d46:	2301      	movne	r3, #1
 8007d48:	0692      	lsls	r2, r2, #26
 8007d4a:	d42b      	bmi.n	8007da4 <_printf_common+0xb0>
 8007d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d50:	4649      	mov	r1, r9
 8007d52:	4638      	mov	r0, r7
 8007d54:	47c0      	blx	r8
 8007d56:	3001      	adds	r0, #1
 8007d58:	d01e      	beq.n	8007d98 <_printf_common+0xa4>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	68e5      	ldr	r5, [r4, #12]
 8007d5e:	6832      	ldr	r2, [r6, #0]
 8007d60:	f003 0306 	and.w	r3, r3, #6
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	bf08      	it	eq
 8007d68:	1aad      	subeq	r5, r5, r2
 8007d6a:	68a3      	ldr	r3, [r4, #8]
 8007d6c:	6922      	ldr	r2, [r4, #16]
 8007d6e:	bf0c      	ite	eq
 8007d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d74:	2500      	movne	r5, #0
 8007d76:	4293      	cmp	r3, r2
 8007d78:	bfc4      	itt	gt
 8007d7a:	1a9b      	subgt	r3, r3, r2
 8007d7c:	18ed      	addgt	r5, r5, r3
 8007d7e:	2600      	movs	r6, #0
 8007d80:	341a      	adds	r4, #26
 8007d82:	42b5      	cmp	r5, r6
 8007d84:	d11a      	bne.n	8007dbc <_printf_common+0xc8>
 8007d86:	2000      	movs	r0, #0
 8007d88:	e008      	b.n	8007d9c <_printf_common+0xa8>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4652      	mov	r2, sl
 8007d8e:	4649      	mov	r1, r9
 8007d90:	4638      	mov	r0, r7
 8007d92:	47c0      	blx	r8
 8007d94:	3001      	adds	r0, #1
 8007d96:	d103      	bne.n	8007da0 <_printf_common+0xac>
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da0:	3501      	adds	r5, #1
 8007da2:	e7c6      	b.n	8007d32 <_printf_common+0x3e>
 8007da4:	18e1      	adds	r1, r4, r3
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	2030      	movs	r0, #48	; 0x30
 8007daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dae:	4422      	add	r2, r4
 8007db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007db8:	3302      	adds	r3, #2
 8007dba:	e7c7      	b.n	8007d4c <_printf_common+0x58>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	47c0      	blx	r8
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	d0e6      	beq.n	8007d98 <_printf_common+0xa4>
 8007dca:	3601      	adds	r6, #1
 8007dcc:	e7d9      	b.n	8007d82 <_printf_common+0x8e>
	...

08007dd0 <_printf_i>:
 8007dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	7e0f      	ldrb	r7, [r1, #24]
 8007dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dd8:	2f78      	cmp	r7, #120	; 0x78
 8007dda:	4691      	mov	r9, r2
 8007ddc:	4680      	mov	r8, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	469a      	mov	sl, r3
 8007de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007de6:	d807      	bhi.n	8007df8 <_printf_i+0x28>
 8007de8:	2f62      	cmp	r7, #98	; 0x62
 8007dea:	d80a      	bhi.n	8007e02 <_printf_i+0x32>
 8007dec:	2f00      	cmp	r7, #0
 8007dee:	f000 80d8 	beq.w	8007fa2 <_printf_i+0x1d2>
 8007df2:	2f58      	cmp	r7, #88	; 0x58
 8007df4:	f000 80a3 	beq.w	8007f3e <_printf_i+0x16e>
 8007df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e00:	e03a      	b.n	8007e78 <_printf_i+0xa8>
 8007e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e06:	2b15      	cmp	r3, #21
 8007e08:	d8f6      	bhi.n	8007df8 <_printf_i+0x28>
 8007e0a:	a101      	add	r1, pc, #4	; (adr r1, 8007e10 <_printf_i+0x40>)
 8007e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e10:	08007e69 	.word	0x08007e69
 8007e14:	08007e7d 	.word	0x08007e7d
 8007e18:	08007df9 	.word	0x08007df9
 8007e1c:	08007df9 	.word	0x08007df9
 8007e20:	08007df9 	.word	0x08007df9
 8007e24:	08007df9 	.word	0x08007df9
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08007df9 	.word	0x08007df9
 8007e30:	08007df9 	.word	0x08007df9
 8007e34:	08007df9 	.word	0x08007df9
 8007e38:	08007df9 	.word	0x08007df9
 8007e3c:	08007f89 	.word	0x08007f89
 8007e40:	08007ead 	.word	0x08007ead
 8007e44:	08007f6b 	.word	0x08007f6b
 8007e48:	08007df9 	.word	0x08007df9
 8007e4c:	08007df9 	.word	0x08007df9
 8007e50:	08007fab 	.word	0x08007fab
 8007e54:	08007df9 	.word	0x08007df9
 8007e58:	08007ead 	.word	0x08007ead
 8007e5c:	08007df9 	.word	0x08007df9
 8007e60:	08007df9 	.word	0x08007df9
 8007e64:	08007f73 	.word	0x08007f73
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	1d1a      	adds	r2, r3, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	602a      	str	r2, [r5, #0]
 8007e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e0a3      	b.n	8007fc4 <_printf_i+0x1f4>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	6829      	ldr	r1, [r5, #0]
 8007e80:	0606      	lsls	r6, r0, #24
 8007e82:	f101 0304 	add.w	r3, r1, #4
 8007e86:	d50a      	bpl.n	8007e9e <_printf_i+0xce>
 8007e88:	680e      	ldr	r6, [r1, #0]
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	da03      	bge.n	8007e98 <_printf_i+0xc8>
 8007e90:	232d      	movs	r3, #45	; 0x2d
 8007e92:	4276      	negs	r6, r6
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e98:	485e      	ldr	r0, [pc, #376]	; (8008014 <_printf_i+0x244>)
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	e019      	b.n	8007ed2 <_printf_i+0x102>
 8007e9e:	680e      	ldr	r6, [r1, #0]
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ea6:	bf18      	it	ne
 8007ea8:	b236      	sxthne	r6, r6
 8007eaa:	e7ef      	b.n	8007e8c <_printf_i+0xbc>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	6820      	ldr	r0, [r4, #0]
 8007eb0:	1d19      	adds	r1, r3, #4
 8007eb2:	6029      	str	r1, [r5, #0]
 8007eb4:	0601      	lsls	r1, r0, #24
 8007eb6:	d501      	bpl.n	8007ebc <_printf_i+0xec>
 8007eb8:	681e      	ldr	r6, [r3, #0]
 8007eba:	e002      	b.n	8007ec2 <_printf_i+0xf2>
 8007ebc:	0646      	lsls	r6, r0, #25
 8007ebe:	d5fb      	bpl.n	8007eb8 <_printf_i+0xe8>
 8007ec0:	881e      	ldrh	r6, [r3, #0]
 8007ec2:	4854      	ldr	r0, [pc, #336]	; (8008014 <_printf_i+0x244>)
 8007ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2308      	moveq	r3, #8
 8007eca:	230a      	movne	r3, #10
 8007ecc:	2100      	movs	r1, #0
 8007ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ed2:	6865      	ldr	r5, [r4, #4]
 8007ed4:	60a5      	str	r5, [r4, #8]
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	bfa2      	ittt	ge
 8007eda:	6821      	ldrge	r1, [r4, #0]
 8007edc:	f021 0104 	bicge.w	r1, r1, #4
 8007ee0:	6021      	strge	r1, [r4, #0]
 8007ee2:	b90e      	cbnz	r6, 8007ee8 <_printf_i+0x118>
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	d04d      	beq.n	8007f84 <_printf_i+0x1b4>
 8007ee8:	4615      	mov	r5, r2
 8007eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eee:	fb03 6711 	mls	r7, r3, r1, r6
 8007ef2:	5dc7      	ldrb	r7, [r0, r7]
 8007ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ef8:	4637      	mov	r7, r6
 8007efa:	42bb      	cmp	r3, r7
 8007efc:	460e      	mov	r6, r1
 8007efe:	d9f4      	bls.n	8007eea <_printf_i+0x11a>
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d10b      	bne.n	8007f1c <_printf_i+0x14c>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	07de      	lsls	r6, r3, #31
 8007f08:	d508      	bpl.n	8007f1c <_printf_i+0x14c>
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	6861      	ldr	r1, [r4, #4]
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	bfde      	ittt	le
 8007f12:	2330      	movle	r3, #48	; 0x30
 8007f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f1c:	1b52      	subs	r2, r2, r5
 8007f1e:	6122      	str	r2, [r4, #16]
 8007f20:	f8cd a000 	str.w	sl, [sp]
 8007f24:	464b      	mov	r3, r9
 8007f26:	aa03      	add	r2, sp, #12
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f7ff fee2 	bl	8007cf4 <_printf_common>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d14c      	bne.n	8007fce <_printf_i+0x1fe>
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	b004      	add	sp, #16
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	4835      	ldr	r0, [pc, #212]	; (8008014 <_printf_i+0x244>)
 8007f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f44:	6829      	ldr	r1, [r5, #0]
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f4c:	6029      	str	r1, [r5, #0]
 8007f4e:	061d      	lsls	r5, r3, #24
 8007f50:	d514      	bpl.n	8007f7c <_printf_i+0x1ac>
 8007f52:	07df      	lsls	r7, r3, #31
 8007f54:	bf44      	itt	mi
 8007f56:	f043 0320 	orrmi.w	r3, r3, #32
 8007f5a:	6023      	strmi	r3, [r4, #0]
 8007f5c:	b91e      	cbnz	r6, 8007f66 <_printf_i+0x196>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f023 0320 	bic.w	r3, r3, #32
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	2310      	movs	r3, #16
 8007f68:	e7b0      	b.n	8007ecc <_printf_i+0xfc>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f043 0320 	orr.w	r3, r3, #32
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	2378      	movs	r3, #120	; 0x78
 8007f74:	4828      	ldr	r0, [pc, #160]	; (8008018 <_printf_i+0x248>)
 8007f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f7a:	e7e3      	b.n	8007f44 <_printf_i+0x174>
 8007f7c:	0659      	lsls	r1, r3, #25
 8007f7e:	bf48      	it	mi
 8007f80:	b2b6      	uxthmi	r6, r6
 8007f82:	e7e6      	b.n	8007f52 <_printf_i+0x182>
 8007f84:	4615      	mov	r5, r2
 8007f86:	e7bb      	b.n	8007f00 <_printf_i+0x130>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6826      	ldr	r6, [r4, #0]
 8007f8c:	6961      	ldr	r1, [r4, #20]
 8007f8e:	1d18      	adds	r0, r3, #4
 8007f90:	6028      	str	r0, [r5, #0]
 8007f92:	0635      	lsls	r5, r6, #24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0x1cc>
 8007f98:	6019      	str	r1, [r3, #0]
 8007f9a:	e002      	b.n	8007fa2 <_printf_i+0x1d2>
 8007f9c:	0670      	lsls	r0, r6, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0x1c8>
 8007fa0:	8019      	strh	r1, [r3, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	4615      	mov	r5, r2
 8007fa8:	e7ba      	b.n	8007f20 <_printf_i+0x150>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	1d1a      	adds	r2, r3, #4
 8007fae:	602a      	str	r2, [r5, #0]
 8007fb0:	681d      	ldr	r5, [r3, #0]
 8007fb2:	6862      	ldr	r2, [r4, #4]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7f8 f92a 	bl	8000210 <memchr>
 8007fbc:	b108      	cbz	r0, 8007fc2 <_printf_i+0x1f2>
 8007fbe:	1b40      	subs	r0, r0, r5
 8007fc0:	6060      	str	r0, [r4, #4]
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fcc:	e7a8      	b.n	8007f20 <_printf_i+0x150>
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0ab      	beq.n	8007f34 <_printf_i+0x164>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	079b      	lsls	r3, r3, #30
 8007fe0:	d413      	bmi.n	800800a <_printf_i+0x23a>
 8007fe2:	68e0      	ldr	r0, [r4, #12]
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	bfb8      	it	lt
 8007fea:	4618      	movlt	r0, r3
 8007fec:	e7a4      	b.n	8007f38 <_printf_i+0x168>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	47d0      	blx	sl
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d09b      	beq.n	8007f34 <_printf_i+0x164>
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	68e3      	ldr	r3, [r4, #12]
 8008000:	9903      	ldr	r1, [sp, #12]
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	42ab      	cmp	r3, r5
 8008006:	dcf2      	bgt.n	8007fee <_printf_i+0x21e>
 8008008:	e7eb      	b.n	8007fe2 <_printf_i+0x212>
 800800a:	2500      	movs	r5, #0
 800800c:	f104 0619 	add.w	r6, r4, #25
 8008010:	e7f5      	b.n	8007ffe <_printf_i+0x22e>
 8008012:	bf00      	nop
 8008014:	0800a5ee 	.word	0x0800a5ee
 8008018:	0800a5ff 	.word	0x0800a5ff

0800801c <siprintf>:
 800801c:	b40e      	push	{r1, r2, r3}
 800801e:	b500      	push	{lr}
 8008020:	b09c      	sub	sp, #112	; 0x70
 8008022:	ab1d      	add	r3, sp, #116	; 0x74
 8008024:	9002      	str	r0, [sp, #8]
 8008026:	9006      	str	r0, [sp, #24]
 8008028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800802c:	4809      	ldr	r0, [pc, #36]	; (8008054 <siprintf+0x38>)
 800802e:	9107      	str	r1, [sp, #28]
 8008030:	9104      	str	r1, [sp, #16]
 8008032:	4909      	ldr	r1, [pc, #36]	; (8008058 <siprintf+0x3c>)
 8008034:	f853 2b04 	ldr.w	r2, [r3], #4
 8008038:	9105      	str	r1, [sp, #20]
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	a902      	add	r1, sp, #8
 8008040:	f001 fb78 	bl	8009734 <_svfiprintf_r>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	b01c      	add	sp, #112	; 0x70
 800804c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008050:	b003      	add	sp, #12
 8008052:	4770      	bx	lr
 8008054:	2000000c 	.word	0x2000000c
 8008058:	ffff0208 	.word	0xffff0208

0800805c <quorem>:
 800805c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	6903      	ldr	r3, [r0, #16]
 8008062:	690c      	ldr	r4, [r1, #16]
 8008064:	42a3      	cmp	r3, r4
 8008066:	4607      	mov	r7, r0
 8008068:	f2c0 8081 	blt.w	800816e <quorem+0x112>
 800806c:	3c01      	subs	r4, #1
 800806e:	f101 0814 	add.w	r8, r1, #20
 8008072:	f100 0514 	add.w	r5, r0, #20
 8008076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008084:	3301      	adds	r3, #1
 8008086:	429a      	cmp	r2, r3
 8008088:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800808c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008090:	fbb2 f6f3 	udiv	r6, r2, r3
 8008094:	d331      	bcc.n	80080fa <quorem+0x9e>
 8008096:	f04f 0e00 	mov.w	lr, #0
 800809a:	4640      	mov	r0, r8
 800809c:	46ac      	mov	ip, r5
 800809e:	46f2      	mov	sl, lr
 80080a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80080a4:	b293      	uxth	r3, r2
 80080a6:	fb06 e303 	mla	r3, r6, r3, lr
 80080aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ebaa 0303 	sub.w	r3, sl, r3
 80080b4:	f8dc a000 	ldr.w	sl, [ip]
 80080b8:	0c12      	lsrs	r2, r2, #16
 80080ba:	fa13 f38a 	uxtah	r3, r3, sl
 80080be:	fb06 e202 	mla	r2, r6, r2, lr
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080ca:	b292      	uxth	r2, r2
 80080cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80080d8:	4581      	cmp	r9, r0
 80080da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080de:	f84c 3b04 	str.w	r3, [ip], #4
 80080e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080e6:	d2db      	bcs.n	80080a0 <quorem+0x44>
 80080e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80080ec:	b92b      	cbnz	r3, 80080fa <quorem+0x9e>
 80080ee:	9b01      	ldr	r3, [sp, #4]
 80080f0:	3b04      	subs	r3, #4
 80080f2:	429d      	cmp	r5, r3
 80080f4:	461a      	mov	r2, r3
 80080f6:	d32e      	bcc.n	8008156 <quorem+0xfa>
 80080f8:	613c      	str	r4, [r7, #16]
 80080fa:	4638      	mov	r0, r7
 80080fc:	f001 f8c6 	bl	800928c <__mcmp>
 8008100:	2800      	cmp	r0, #0
 8008102:	db24      	blt.n	800814e <quorem+0xf2>
 8008104:	3601      	adds	r6, #1
 8008106:	4628      	mov	r0, r5
 8008108:	f04f 0c00 	mov.w	ip, #0
 800810c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008110:	f8d0 e000 	ldr.w	lr, [r0]
 8008114:	b293      	uxth	r3, r2
 8008116:	ebac 0303 	sub.w	r3, ip, r3
 800811a:	0c12      	lsrs	r2, r2, #16
 800811c:	fa13 f38e 	uxtah	r3, r3, lr
 8008120:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008128:	b29b      	uxth	r3, r3
 800812a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800812e:	45c1      	cmp	r9, r8
 8008130:	f840 3b04 	str.w	r3, [r0], #4
 8008134:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008138:	d2e8      	bcs.n	800810c <quorem+0xb0>
 800813a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800813e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008142:	b922      	cbnz	r2, 800814e <quorem+0xf2>
 8008144:	3b04      	subs	r3, #4
 8008146:	429d      	cmp	r5, r3
 8008148:	461a      	mov	r2, r3
 800814a:	d30a      	bcc.n	8008162 <quorem+0x106>
 800814c:	613c      	str	r4, [r7, #16]
 800814e:	4630      	mov	r0, r6
 8008150:	b003      	add	sp, #12
 8008152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	3b04      	subs	r3, #4
 800815a:	2a00      	cmp	r2, #0
 800815c:	d1cc      	bne.n	80080f8 <quorem+0x9c>
 800815e:	3c01      	subs	r4, #1
 8008160:	e7c7      	b.n	80080f2 <quorem+0x96>
 8008162:	6812      	ldr	r2, [r2, #0]
 8008164:	3b04      	subs	r3, #4
 8008166:	2a00      	cmp	r2, #0
 8008168:	d1f0      	bne.n	800814c <quorem+0xf0>
 800816a:	3c01      	subs	r4, #1
 800816c:	e7eb      	b.n	8008146 <quorem+0xea>
 800816e:	2000      	movs	r0, #0
 8008170:	e7ee      	b.n	8008150 <quorem+0xf4>
 8008172:	0000      	movs	r0, r0
 8008174:	0000      	movs	r0, r0
	...

08008178 <_dtoa_r>:
 8008178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	ed2d 8b04 	vpush	{d8-d9}
 8008180:	ec57 6b10 	vmov	r6, r7, d0
 8008184:	b093      	sub	sp, #76	; 0x4c
 8008186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008188:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800818c:	9106      	str	r1, [sp, #24]
 800818e:	ee10 aa10 	vmov	sl, s0
 8008192:	4604      	mov	r4, r0
 8008194:	9209      	str	r2, [sp, #36]	; 0x24
 8008196:	930c      	str	r3, [sp, #48]	; 0x30
 8008198:	46bb      	mov	fp, r7
 800819a:	b975      	cbnz	r5, 80081ba <_dtoa_r+0x42>
 800819c:	2010      	movs	r0, #16
 800819e:	f000 fddd 	bl	8008d5c <malloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6260      	str	r0, [r4, #36]	; 0x24
 80081a6:	b920      	cbnz	r0, 80081b2 <_dtoa_r+0x3a>
 80081a8:	4ba7      	ldr	r3, [pc, #668]	; (8008448 <_dtoa_r+0x2d0>)
 80081aa:	21ea      	movs	r1, #234	; 0xea
 80081ac:	48a7      	ldr	r0, [pc, #668]	; (800844c <_dtoa_r+0x2d4>)
 80081ae:	f001 fbd1 	bl	8009954 <__assert_func>
 80081b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081b6:	6005      	str	r5, [r0, #0]
 80081b8:	60c5      	str	r5, [r0, #12]
 80081ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081bc:	6819      	ldr	r1, [r3, #0]
 80081be:	b151      	cbz	r1, 80081d6 <_dtoa_r+0x5e>
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	604a      	str	r2, [r1, #4]
 80081c4:	2301      	movs	r3, #1
 80081c6:	4093      	lsls	r3, r2
 80081c8:	608b      	str	r3, [r1, #8]
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fe1c 	bl	8008e08 <_Bfree>
 80081d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	1e3b      	subs	r3, r7, #0
 80081d8:	bfaa      	itet	ge
 80081da:	2300      	movge	r3, #0
 80081dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081e0:	f8c8 3000 	strge.w	r3, [r8]
 80081e4:	4b9a      	ldr	r3, [pc, #616]	; (8008450 <_dtoa_r+0x2d8>)
 80081e6:	bfbc      	itt	lt
 80081e8:	2201      	movlt	r2, #1
 80081ea:	f8c8 2000 	strlt.w	r2, [r8]
 80081ee:	ea33 030b 	bics.w	r3, r3, fp
 80081f2:	d11b      	bne.n	800822c <_dtoa_r+0xb4>
 80081f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008200:	4333      	orrs	r3, r6
 8008202:	f000 8592 	beq.w	8008d2a <_dtoa_r+0xbb2>
 8008206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008208:	b963      	cbnz	r3, 8008224 <_dtoa_r+0xac>
 800820a:	4b92      	ldr	r3, [pc, #584]	; (8008454 <_dtoa_r+0x2dc>)
 800820c:	e022      	b.n	8008254 <_dtoa_r+0xdc>
 800820e:	4b92      	ldr	r3, [pc, #584]	; (8008458 <_dtoa_r+0x2e0>)
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	3308      	adds	r3, #8
 8008214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	9801      	ldr	r0, [sp, #4]
 800821a:	b013      	add	sp, #76	; 0x4c
 800821c:	ecbd 8b04 	vpop	{d8-d9}
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	4b8b      	ldr	r3, [pc, #556]	; (8008454 <_dtoa_r+0x2dc>)
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	3303      	adds	r3, #3
 800822a:	e7f3      	b.n	8008214 <_dtoa_r+0x9c>
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	4650      	mov	r0, sl
 8008232:	4659      	mov	r1, fp
 8008234:	f7f8 fc60 	bl	8000af8 <__aeabi_dcmpeq>
 8008238:	ec4b ab19 	vmov	d9, sl, fp
 800823c:	4680      	mov	r8, r0
 800823e:	b158      	cbz	r0, 8008258 <_dtoa_r+0xe0>
 8008240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008242:	2301      	movs	r3, #1
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 856b 	beq.w	8008d24 <_dtoa_r+0xbac>
 800824e:	4883      	ldr	r0, [pc, #524]	; (800845c <_dtoa_r+0x2e4>)
 8008250:	6018      	str	r0, [r3, #0]
 8008252:	1e43      	subs	r3, r0, #1
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	e7df      	b.n	8008218 <_dtoa_r+0xa0>
 8008258:	ec4b ab10 	vmov	d0, sl, fp
 800825c:	aa10      	add	r2, sp, #64	; 0x40
 800825e:	a911      	add	r1, sp, #68	; 0x44
 8008260:	4620      	mov	r0, r4
 8008262:	f001 f8b9 	bl	80093d8 <__d2b>
 8008266:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800826a:	ee08 0a10 	vmov	s16, r0
 800826e:	2d00      	cmp	r5, #0
 8008270:	f000 8084 	beq.w	800837c <_dtoa_r+0x204>
 8008274:	ee19 3a90 	vmov	r3, s19
 8008278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800827c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008280:	4656      	mov	r6, sl
 8008282:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008286:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800828a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800828e:	4b74      	ldr	r3, [pc, #464]	; (8008460 <_dtoa_r+0x2e8>)
 8008290:	2200      	movs	r2, #0
 8008292:	4630      	mov	r0, r6
 8008294:	4639      	mov	r1, r7
 8008296:	f7f8 f80f 	bl	80002b8 <__aeabi_dsub>
 800829a:	a365      	add	r3, pc, #404	; (adr r3, 8008430 <_dtoa_r+0x2b8>)
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f8 f9c2 	bl	8000628 <__aeabi_dmul>
 80082a4:	a364      	add	r3, pc, #400	; (adr r3, 8008438 <_dtoa_r+0x2c0>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f7f8 f807 	bl	80002bc <__adddf3>
 80082ae:	4606      	mov	r6, r0
 80082b0:	4628      	mov	r0, r5
 80082b2:	460f      	mov	r7, r1
 80082b4:	f7f8 f94e 	bl	8000554 <__aeabi_i2d>
 80082b8:	a361      	add	r3, pc, #388	; (adr r3, 8008440 <_dtoa_r+0x2c8>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f8 f9b3 	bl	8000628 <__aeabi_dmul>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4630      	mov	r0, r6
 80082c8:	4639      	mov	r1, r7
 80082ca:	f7f7 fff7 	bl	80002bc <__adddf3>
 80082ce:	4606      	mov	r6, r0
 80082d0:	460f      	mov	r7, r1
 80082d2:	f7f8 fc59 	bl	8000b88 <__aeabi_d2iz>
 80082d6:	2200      	movs	r2, #0
 80082d8:	9000      	str	r0, [sp, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	4630      	mov	r0, r6
 80082de:	4639      	mov	r1, r7
 80082e0:	f7f8 fc14 	bl	8000b0c <__aeabi_dcmplt>
 80082e4:	b150      	cbz	r0, 80082fc <_dtoa_r+0x184>
 80082e6:	9800      	ldr	r0, [sp, #0]
 80082e8:	f7f8 f934 	bl	8000554 <__aeabi_i2d>
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	f7f8 fc02 	bl	8000af8 <__aeabi_dcmpeq>
 80082f4:	b910      	cbnz	r0, 80082fc <_dtoa_r+0x184>
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	9b00      	ldr	r3, [sp, #0]
 80082fe:	2b16      	cmp	r3, #22
 8008300:	d85a      	bhi.n	80083b8 <_dtoa_r+0x240>
 8008302:	9a00      	ldr	r2, [sp, #0]
 8008304:	4b57      	ldr	r3, [pc, #348]	; (8008464 <_dtoa_r+0x2ec>)
 8008306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	ec51 0b19 	vmov	r0, r1, d9
 8008312:	f7f8 fbfb 	bl	8000b0c <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d050      	beq.n	80083bc <_dtoa_r+0x244>
 800831a:	9b00      	ldr	r3, [sp, #0]
 800831c:	3b01      	subs	r3, #1
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	2300      	movs	r3, #0
 8008322:	930b      	str	r3, [sp, #44]	; 0x2c
 8008324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008326:	1b5d      	subs	r5, r3, r5
 8008328:	1e6b      	subs	r3, r5, #1
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	bf45      	ittet	mi
 800832e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008332:	9304      	strmi	r3, [sp, #16]
 8008334:	2300      	movpl	r3, #0
 8008336:	2300      	movmi	r3, #0
 8008338:	bf4c      	ite	mi
 800833a:	9305      	strmi	r3, [sp, #20]
 800833c:	9304      	strpl	r3, [sp, #16]
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	db3d      	blt.n	80083c0 <_dtoa_r+0x248>
 8008344:	9b05      	ldr	r3, [sp, #20]
 8008346:	9a00      	ldr	r2, [sp, #0]
 8008348:	920a      	str	r2, [sp, #40]	; 0x28
 800834a:	4413      	add	r3, r2
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	2300      	movs	r3, #0
 8008350:	9307      	str	r3, [sp, #28]
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	2b09      	cmp	r3, #9
 8008356:	f200 8089 	bhi.w	800846c <_dtoa_r+0x2f4>
 800835a:	2b05      	cmp	r3, #5
 800835c:	bfc4      	itt	gt
 800835e:	3b04      	subgt	r3, #4
 8008360:	9306      	strgt	r3, [sp, #24]
 8008362:	9b06      	ldr	r3, [sp, #24]
 8008364:	f1a3 0302 	sub.w	r3, r3, #2
 8008368:	bfcc      	ite	gt
 800836a:	2500      	movgt	r5, #0
 800836c:	2501      	movle	r5, #1
 800836e:	2b03      	cmp	r3, #3
 8008370:	f200 8087 	bhi.w	8008482 <_dtoa_r+0x30a>
 8008374:	e8df f003 	tbb	[pc, r3]
 8008378:	59383a2d 	.word	0x59383a2d
 800837c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008380:	441d      	add	r5, r3
 8008382:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008386:	2b20      	cmp	r3, #32
 8008388:	bfc1      	itttt	gt
 800838a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800838e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008392:	fa0b f303 	lslgt.w	r3, fp, r3
 8008396:	fa26 f000 	lsrgt.w	r0, r6, r0
 800839a:	bfda      	itte	le
 800839c:	f1c3 0320 	rsble	r3, r3, #32
 80083a0:	fa06 f003 	lslle.w	r0, r6, r3
 80083a4:	4318      	orrgt	r0, r3
 80083a6:	f7f8 f8c5 	bl	8000534 <__aeabi_ui2d>
 80083aa:	2301      	movs	r3, #1
 80083ac:	4606      	mov	r6, r0
 80083ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083b2:	3d01      	subs	r5, #1
 80083b4:	930e      	str	r3, [sp, #56]	; 0x38
 80083b6:	e76a      	b.n	800828e <_dtoa_r+0x116>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7b2      	b.n	8008322 <_dtoa_r+0x1aa>
 80083bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80083be:	e7b1      	b.n	8008324 <_dtoa_r+0x1ac>
 80083c0:	9b04      	ldr	r3, [sp, #16]
 80083c2:	9a00      	ldr	r2, [sp, #0]
 80083c4:	1a9b      	subs	r3, r3, r2
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	4253      	negs	r3, r2
 80083ca:	9307      	str	r3, [sp, #28]
 80083cc:	2300      	movs	r3, #0
 80083ce:	930a      	str	r3, [sp, #40]	; 0x28
 80083d0:	e7bf      	b.n	8008352 <_dtoa_r+0x1da>
 80083d2:	2300      	movs	r3, #0
 80083d4:	9308      	str	r3, [sp, #32]
 80083d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dc55      	bgt.n	8008488 <_dtoa_r+0x310>
 80083dc:	2301      	movs	r3, #1
 80083de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083e2:	461a      	mov	r2, r3
 80083e4:	9209      	str	r2, [sp, #36]	; 0x24
 80083e6:	e00c      	b.n	8008402 <_dtoa_r+0x28a>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7f3      	b.n	80083d4 <_dtoa_r+0x25c>
 80083ec:	2300      	movs	r3, #0
 80083ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	9b00      	ldr	r3, [sp, #0]
 80083f4:	4413      	add	r3, r2
 80083f6:	9302      	str	r3, [sp, #8]
 80083f8:	3301      	adds	r3, #1
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	bfb8      	it	lt
 8008400:	2301      	movlt	r3, #1
 8008402:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008404:	2200      	movs	r2, #0
 8008406:	6042      	str	r2, [r0, #4]
 8008408:	2204      	movs	r2, #4
 800840a:	f102 0614 	add.w	r6, r2, #20
 800840e:	429e      	cmp	r6, r3
 8008410:	6841      	ldr	r1, [r0, #4]
 8008412:	d93d      	bls.n	8008490 <_dtoa_r+0x318>
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fcb7 	bl	8008d88 <_Balloc>
 800841a:	9001      	str	r0, [sp, #4]
 800841c:	2800      	cmp	r0, #0
 800841e:	d13b      	bne.n	8008498 <_dtoa_r+0x320>
 8008420:	4b11      	ldr	r3, [pc, #68]	; (8008468 <_dtoa_r+0x2f0>)
 8008422:	4602      	mov	r2, r0
 8008424:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008428:	e6c0      	b.n	80081ac <_dtoa_r+0x34>
 800842a:	2301      	movs	r3, #1
 800842c:	e7df      	b.n	80083ee <_dtoa_r+0x276>
 800842e:	bf00      	nop
 8008430:	636f4361 	.word	0x636f4361
 8008434:	3fd287a7 	.word	0x3fd287a7
 8008438:	8b60c8b3 	.word	0x8b60c8b3
 800843c:	3fc68a28 	.word	0x3fc68a28
 8008440:	509f79fb 	.word	0x509f79fb
 8008444:	3fd34413 	.word	0x3fd34413
 8008448:	0800a61d 	.word	0x0800a61d
 800844c:	0800a634 	.word	0x0800a634
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	0800a619 	.word	0x0800a619
 8008458:	0800a610 	.word	0x0800a610
 800845c:	0800a5ed 	.word	0x0800a5ed
 8008460:	3ff80000 	.word	0x3ff80000
 8008464:	0800a728 	.word	0x0800a728
 8008468:	0800a68f 	.word	0x0800a68f
 800846c:	2501      	movs	r5, #1
 800846e:	2300      	movs	r3, #0
 8008470:	9306      	str	r3, [sp, #24]
 8008472:	9508      	str	r5, [sp, #32]
 8008474:	f04f 33ff 	mov.w	r3, #4294967295
 8008478:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800847c:	2200      	movs	r2, #0
 800847e:	2312      	movs	r3, #18
 8008480:	e7b0      	b.n	80083e4 <_dtoa_r+0x26c>
 8008482:	2301      	movs	r3, #1
 8008484:	9308      	str	r3, [sp, #32]
 8008486:	e7f5      	b.n	8008474 <_dtoa_r+0x2fc>
 8008488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800848e:	e7b8      	b.n	8008402 <_dtoa_r+0x28a>
 8008490:	3101      	adds	r1, #1
 8008492:	6041      	str	r1, [r0, #4]
 8008494:	0052      	lsls	r2, r2, #1
 8008496:	e7b8      	b.n	800840a <_dtoa_r+0x292>
 8008498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800849a:	9a01      	ldr	r2, [sp, #4]
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	2b0e      	cmp	r3, #14
 80084a2:	f200 809d 	bhi.w	80085e0 <_dtoa_r+0x468>
 80084a6:	2d00      	cmp	r5, #0
 80084a8:	f000 809a 	beq.w	80085e0 <_dtoa_r+0x468>
 80084ac:	9b00      	ldr	r3, [sp, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	dd32      	ble.n	8008518 <_dtoa_r+0x3a0>
 80084b2:	4ab7      	ldr	r2, [pc, #732]	; (8008790 <_dtoa_r+0x618>)
 80084b4:	f003 030f 	and.w	r3, r3, #15
 80084b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084c0:	9b00      	ldr	r3, [sp, #0]
 80084c2:	05d8      	lsls	r0, r3, #23
 80084c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084c8:	d516      	bpl.n	80084f8 <_dtoa_r+0x380>
 80084ca:	4bb2      	ldr	r3, [pc, #712]	; (8008794 <_dtoa_r+0x61c>)
 80084cc:	ec51 0b19 	vmov	r0, r1, d9
 80084d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084d4:	f7f8 f9d2 	bl	800087c <__aeabi_ddiv>
 80084d8:	f007 070f 	and.w	r7, r7, #15
 80084dc:	4682      	mov	sl, r0
 80084de:	468b      	mov	fp, r1
 80084e0:	2503      	movs	r5, #3
 80084e2:	4eac      	ldr	r6, [pc, #688]	; (8008794 <_dtoa_r+0x61c>)
 80084e4:	b957      	cbnz	r7, 80084fc <_dtoa_r+0x384>
 80084e6:	4642      	mov	r2, r8
 80084e8:	464b      	mov	r3, r9
 80084ea:	4650      	mov	r0, sl
 80084ec:	4659      	mov	r1, fp
 80084ee:	f7f8 f9c5 	bl	800087c <__aeabi_ddiv>
 80084f2:	4682      	mov	sl, r0
 80084f4:	468b      	mov	fp, r1
 80084f6:	e028      	b.n	800854a <_dtoa_r+0x3d2>
 80084f8:	2502      	movs	r5, #2
 80084fa:	e7f2      	b.n	80084e2 <_dtoa_r+0x36a>
 80084fc:	07f9      	lsls	r1, r7, #31
 80084fe:	d508      	bpl.n	8008512 <_dtoa_r+0x39a>
 8008500:	4640      	mov	r0, r8
 8008502:	4649      	mov	r1, r9
 8008504:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008508:	f7f8 f88e 	bl	8000628 <__aeabi_dmul>
 800850c:	3501      	adds	r5, #1
 800850e:	4680      	mov	r8, r0
 8008510:	4689      	mov	r9, r1
 8008512:	107f      	asrs	r7, r7, #1
 8008514:	3608      	adds	r6, #8
 8008516:	e7e5      	b.n	80084e4 <_dtoa_r+0x36c>
 8008518:	f000 809b 	beq.w	8008652 <_dtoa_r+0x4da>
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	4f9d      	ldr	r7, [pc, #628]	; (8008794 <_dtoa_r+0x61c>)
 8008520:	425e      	negs	r6, r3
 8008522:	4b9b      	ldr	r3, [pc, #620]	; (8008790 <_dtoa_r+0x618>)
 8008524:	f006 020f 	and.w	r2, r6, #15
 8008528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	ec51 0b19 	vmov	r0, r1, d9
 8008534:	f7f8 f878 	bl	8000628 <__aeabi_dmul>
 8008538:	1136      	asrs	r6, r6, #4
 800853a:	4682      	mov	sl, r0
 800853c:	468b      	mov	fp, r1
 800853e:	2300      	movs	r3, #0
 8008540:	2502      	movs	r5, #2
 8008542:	2e00      	cmp	r6, #0
 8008544:	d17a      	bne.n	800863c <_dtoa_r+0x4c4>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1d3      	bne.n	80084f2 <_dtoa_r+0x37a>
 800854a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 8082 	beq.w	8008656 <_dtoa_r+0x4de>
 8008552:	4b91      	ldr	r3, [pc, #580]	; (8008798 <_dtoa_r+0x620>)
 8008554:	2200      	movs	r2, #0
 8008556:	4650      	mov	r0, sl
 8008558:	4659      	mov	r1, fp
 800855a:	f7f8 fad7 	bl	8000b0c <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	d079      	beq.n	8008656 <_dtoa_r+0x4de>
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d076      	beq.n	8008656 <_dtoa_r+0x4de>
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	dd36      	ble.n	80085dc <_dtoa_r+0x464>
 800856e:	9b00      	ldr	r3, [sp, #0]
 8008570:	4650      	mov	r0, sl
 8008572:	4659      	mov	r1, fp
 8008574:	1e5f      	subs	r7, r3, #1
 8008576:	2200      	movs	r2, #0
 8008578:	4b88      	ldr	r3, [pc, #544]	; (800879c <_dtoa_r+0x624>)
 800857a:	f7f8 f855 	bl	8000628 <__aeabi_dmul>
 800857e:	9e02      	ldr	r6, [sp, #8]
 8008580:	4682      	mov	sl, r0
 8008582:	468b      	mov	fp, r1
 8008584:	3501      	adds	r5, #1
 8008586:	4628      	mov	r0, r5
 8008588:	f7f7 ffe4 	bl	8000554 <__aeabi_i2d>
 800858c:	4652      	mov	r2, sl
 800858e:	465b      	mov	r3, fp
 8008590:	f7f8 f84a 	bl	8000628 <__aeabi_dmul>
 8008594:	4b82      	ldr	r3, [pc, #520]	; (80087a0 <_dtoa_r+0x628>)
 8008596:	2200      	movs	r2, #0
 8008598:	f7f7 fe90 	bl	80002bc <__adddf3>
 800859c:	46d0      	mov	r8, sl
 800859e:	46d9      	mov	r9, fp
 80085a0:	4682      	mov	sl, r0
 80085a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	d158      	bne.n	800865c <_dtoa_r+0x4e4>
 80085aa:	4b7e      	ldr	r3, [pc, #504]	; (80087a4 <_dtoa_r+0x62c>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	4640      	mov	r0, r8
 80085b0:	4649      	mov	r1, r9
 80085b2:	f7f7 fe81 	bl	80002b8 <__aeabi_dsub>
 80085b6:	4652      	mov	r2, sl
 80085b8:	465b      	mov	r3, fp
 80085ba:	4680      	mov	r8, r0
 80085bc:	4689      	mov	r9, r1
 80085be:	f7f8 fac3 	bl	8000b48 <__aeabi_dcmpgt>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	f040 8295 	bne.w	8008af2 <_dtoa_r+0x97a>
 80085c8:	4652      	mov	r2, sl
 80085ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f8 fa9b 	bl	8000b0c <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f040 8289 	bne.w	8008aee <_dtoa_r+0x976>
 80085dc:	ec5b ab19 	vmov	sl, fp, d9
 80085e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f2c0 8148 	blt.w	8008878 <_dtoa_r+0x700>
 80085e8:	9a00      	ldr	r2, [sp, #0]
 80085ea:	2a0e      	cmp	r2, #14
 80085ec:	f300 8144 	bgt.w	8008878 <_dtoa_r+0x700>
 80085f0:	4b67      	ldr	r3, [pc, #412]	; (8008790 <_dtoa_r+0x618>)
 80085f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f280 80d5 	bge.w	80087ac <_dtoa_r+0x634>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f300 80d1 	bgt.w	80087ac <_dtoa_r+0x634>
 800860a:	f040 826f 	bne.w	8008aec <_dtoa_r+0x974>
 800860e:	4b65      	ldr	r3, [pc, #404]	; (80087a4 <_dtoa_r+0x62c>)
 8008610:	2200      	movs	r2, #0
 8008612:	4640      	mov	r0, r8
 8008614:	4649      	mov	r1, r9
 8008616:	f7f8 f807 	bl	8000628 <__aeabi_dmul>
 800861a:	4652      	mov	r2, sl
 800861c:	465b      	mov	r3, fp
 800861e:	f7f8 fa89 	bl	8000b34 <__aeabi_dcmpge>
 8008622:	9e03      	ldr	r6, [sp, #12]
 8008624:	4637      	mov	r7, r6
 8008626:	2800      	cmp	r0, #0
 8008628:	f040 8245 	bne.w	8008ab6 <_dtoa_r+0x93e>
 800862c:	9d01      	ldr	r5, [sp, #4]
 800862e:	2331      	movs	r3, #49	; 0x31
 8008630:	f805 3b01 	strb.w	r3, [r5], #1
 8008634:	9b00      	ldr	r3, [sp, #0]
 8008636:	3301      	adds	r3, #1
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	e240      	b.n	8008abe <_dtoa_r+0x946>
 800863c:	07f2      	lsls	r2, r6, #31
 800863e:	d505      	bpl.n	800864c <_dtoa_r+0x4d4>
 8008640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008644:	f7f7 fff0 	bl	8000628 <__aeabi_dmul>
 8008648:	3501      	adds	r5, #1
 800864a:	2301      	movs	r3, #1
 800864c:	1076      	asrs	r6, r6, #1
 800864e:	3708      	adds	r7, #8
 8008650:	e777      	b.n	8008542 <_dtoa_r+0x3ca>
 8008652:	2502      	movs	r5, #2
 8008654:	e779      	b.n	800854a <_dtoa_r+0x3d2>
 8008656:	9f00      	ldr	r7, [sp, #0]
 8008658:	9e03      	ldr	r6, [sp, #12]
 800865a:	e794      	b.n	8008586 <_dtoa_r+0x40e>
 800865c:	9901      	ldr	r1, [sp, #4]
 800865e:	4b4c      	ldr	r3, [pc, #304]	; (8008790 <_dtoa_r+0x618>)
 8008660:	4431      	add	r1, r6
 8008662:	910d      	str	r1, [sp, #52]	; 0x34
 8008664:	9908      	ldr	r1, [sp, #32]
 8008666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800866a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800866e:	2900      	cmp	r1, #0
 8008670:	d043      	beq.n	80086fa <_dtoa_r+0x582>
 8008672:	494d      	ldr	r1, [pc, #308]	; (80087a8 <_dtoa_r+0x630>)
 8008674:	2000      	movs	r0, #0
 8008676:	f7f8 f901 	bl	800087c <__aeabi_ddiv>
 800867a:	4652      	mov	r2, sl
 800867c:	465b      	mov	r3, fp
 800867e:	f7f7 fe1b 	bl	80002b8 <__aeabi_dsub>
 8008682:	9d01      	ldr	r5, [sp, #4]
 8008684:	4682      	mov	sl, r0
 8008686:	468b      	mov	fp, r1
 8008688:	4649      	mov	r1, r9
 800868a:	4640      	mov	r0, r8
 800868c:	f7f8 fa7c 	bl	8000b88 <__aeabi_d2iz>
 8008690:	4606      	mov	r6, r0
 8008692:	f7f7 ff5f 	bl	8000554 <__aeabi_i2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f7 fe0b 	bl	80002b8 <__aeabi_dsub>
 80086a2:	3630      	adds	r6, #48	; 0x30
 80086a4:	f805 6b01 	strb.w	r6, [r5], #1
 80086a8:	4652      	mov	r2, sl
 80086aa:	465b      	mov	r3, fp
 80086ac:	4680      	mov	r8, r0
 80086ae:	4689      	mov	r9, r1
 80086b0:	f7f8 fa2c 	bl	8000b0c <__aeabi_dcmplt>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d163      	bne.n	8008780 <_dtoa_r+0x608>
 80086b8:	4642      	mov	r2, r8
 80086ba:	464b      	mov	r3, r9
 80086bc:	4936      	ldr	r1, [pc, #216]	; (8008798 <_dtoa_r+0x620>)
 80086be:	2000      	movs	r0, #0
 80086c0:	f7f7 fdfa 	bl	80002b8 <__aeabi_dsub>
 80086c4:	4652      	mov	r2, sl
 80086c6:	465b      	mov	r3, fp
 80086c8:	f7f8 fa20 	bl	8000b0c <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f040 80b5 	bne.w	800883c <_dtoa_r+0x6c4>
 80086d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d4:	429d      	cmp	r5, r3
 80086d6:	d081      	beq.n	80085dc <_dtoa_r+0x464>
 80086d8:	4b30      	ldr	r3, [pc, #192]	; (800879c <_dtoa_r+0x624>)
 80086da:	2200      	movs	r2, #0
 80086dc:	4650      	mov	r0, sl
 80086de:	4659      	mov	r1, fp
 80086e0:	f7f7 ffa2 	bl	8000628 <__aeabi_dmul>
 80086e4:	4b2d      	ldr	r3, [pc, #180]	; (800879c <_dtoa_r+0x624>)
 80086e6:	4682      	mov	sl, r0
 80086e8:	468b      	mov	fp, r1
 80086ea:	4640      	mov	r0, r8
 80086ec:	4649      	mov	r1, r9
 80086ee:	2200      	movs	r2, #0
 80086f0:	f7f7 ff9a 	bl	8000628 <__aeabi_dmul>
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	e7c6      	b.n	8008688 <_dtoa_r+0x510>
 80086fa:	4650      	mov	r0, sl
 80086fc:	4659      	mov	r1, fp
 80086fe:	f7f7 ff93 	bl	8000628 <__aeabi_dmul>
 8008702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008704:	9d01      	ldr	r5, [sp, #4]
 8008706:	930f      	str	r3, [sp, #60]	; 0x3c
 8008708:	4682      	mov	sl, r0
 800870a:	468b      	mov	fp, r1
 800870c:	4649      	mov	r1, r9
 800870e:	4640      	mov	r0, r8
 8008710:	f7f8 fa3a 	bl	8000b88 <__aeabi_d2iz>
 8008714:	4606      	mov	r6, r0
 8008716:	f7f7 ff1d 	bl	8000554 <__aeabi_i2d>
 800871a:	3630      	adds	r6, #48	; 0x30
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	f7f7 fdc8 	bl	80002b8 <__aeabi_dsub>
 8008728:	f805 6b01 	strb.w	r6, [r5], #1
 800872c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800872e:	429d      	cmp	r5, r3
 8008730:	4680      	mov	r8, r0
 8008732:	4689      	mov	r9, r1
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	d124      	bne.n	8008784 <_dtoa_r+0x60c>
 800873a:	4b1b      	ldr	r3, [pc, #108]	; (80087a8 <_dtoa_r+0x630>)
 800873c:	4650      	mov	r0, sl
 800873e:	4659      	mov	r1, fp
 8008740:	f7f7 fdbc 	bl	80002bc <__adddf3>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4640      	mov	r0, r8
 800874a:	4649      	mov	r1, r9
 800874c:	f7f8 f9fc 	bl	8000b48 <__aeabi_dcmpgt>
 8008750:	2800      	cmp	r0, #0
 8008752:	d173      	bne.n	800883c <_dtoa_r+0x6c4>
 8008754:	4652      	mov	r2, sl
 8008756:	465b      	mov	r3, fp
 8008758:	4913      	ldr	r1, [pc, #76]	; (80087a8 <_dtoa_r+0x630>)
 800875a:	2000      	movs	r0, #0
 800875c:	f7f7 fdac 	bl	80002b8 <__aeabi_dsub>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f8 f9d0 	bl	8000b0c <__aeabi_dcmplt>
 800876c:	2800      	cmp	r0, #0
 800876e:	f43f af35 	beq.w	80085dc <_dtoa_r+0x464>
 8008772:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008774:	1e6b      	subs	r3, r5, #1
 8008776:	930f      	str	r3, [sp, #60]	; 0x3c
 8008778:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800877c:	2b30      	cmp	r3, #48	; 0x30
 800877e:	d0f8      	beq.n	8008772 <_dtoa_r+0x5fa>
 8008780:	9700      	str	r7, [sp, #0]
 8008782:	e049      	b.n	8008818 <_dtoa_r+0x6a0>
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <_dtoa_r+0x624>)
 8008786:	f7f7 ff4f 	bl	8000628 <__aeabi_dmul>
 800878a:	4680      	mov	r8, r0
 800878c:	4689      	mov	r9, r1
 800878e:	e7bd      	b.n	800870c <_dtoa_r+0x594>
 8008790:	0800a728 	.word	0x0800a728
 8008794:	0800a700 	.word	0x0800a700
 8008798:	3ff00000 	.word	0x3ff00000
 800879c:	40240000 	.word	0x40240000
 80087a0:	401c0000 	.word	0x401c0000
 80087a4:	40140000 	.word	0x40140000
 80087a8:	3fe00000 	.word	0x3fe00000
 80087ac:	9d01      	ldr	r5, [sp, #4]
 80087ae:	4656      	mov	r6, sl
 80087b0:	465f      	mov	r7, fp
 80087b2:	4642      	mov	r2, r8
 80087b4:	464b      	mov	r3, r9
 80087b6:	4630      	mov	r0, r6
 80087b8:	4639      	mov	r1, r7
 80087ba:	f7f8 f85f 	bl	800087c <__aeabi_ddiv>
 80087be:	f7f8 f9e3 	bl	8000b88 <__aeabi_d2iz>
 80087c2:	4682      	mov	sl, r0
 80087c4:	f7f7 fec6 	bl	8000554 <__aeabi_i2d>
 80087c8:	4642      	mov	r2, r8
 80087ca:	464b      	mov	r3, r9
 80087cc:	f7f7 ff2c 	bl	8000628 <__aeabi_dmul>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4630      	mov	r0, r6
 80087d6:	4639      	mov	r1, r7
 80087d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087dc:	f7f7 fd6c 	bl	80002b8 <__aeabi_dsub>
 80087e0:	f805 6b01 	strb.w	r6, [r5], #1
 80087e4:	9e01      	ldr	r6, [sp, #4]
 80087e6:	9f03      	ldr	r7, [sp, #12]
 80087e8:	1bae      	subs	r6, r5, r6
 80087ea:	42b7      	cmp	r7, r6
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	d135      	bne.n	800885e <_dtoa_r+0x6e6>
 80087f2:	f7f7 fd63 	bl	80002bc <__adddf3>
 80087f6:	4642      	mov	r2, r8
 80087f8:	464b      	mov	r3, r9
 80087fa:	4606      	mov	r6, r0
 80087fc:	460f      	mov	r7, r1
 80087fe:	f7f8 f9a3 	bl	8000b48 <__aeabi_dcmpgt>
 8008802:	b9d0      	cbnz	r0, 800883a <_dtoa_r+0x6c2>
 8008804:	4642      	mov	r2, r8
 8008806:	464b      	mov	r3, r9
 8008808:	4630      	mov	r0, r6
 800880a:	4639      	mov	r1, r7
 800880c:	f7f8 f974 	bl	8000af8 <__aeabi_dcmpeq>
 8008810:	b110      	cbz	r0, 8008818 <_dtoa_r+0x6a0>
 8008812:	f01a 0f01 	tst.w	sl, #1
 8008816:	d110      	bne.n	800883a <_dtoa_r+0x6c2>
 8008818:	4620      	mov	r0, r4
 800881a:	ee18 1a10 	vmov	r1, s16
 800881e:	f000 faf3 	bl	8008e08 <_Bfree>
 8008822:	2300      	movs	r3, #0
 8008824:	9800      	ldr	r0, [sp, #0]
 8008826:	702b      	strb	r3, [r5, #0]
 8008828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800882a:	3001      	adds	r0, #1
 800882c:	6018      	str	r0, [r3, #0]
 800882e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008830:	2b00      	cmp	r3, #0
 8008832:	f43f acf1 	beq.w	8008218 <_dtoa_r+0xa0>
 8008836:	601d      	str	r5, [r3, #0]
 8008838:	e4ee      	b.n	8008218 <_dtoa_r+0xa0>
 800883a:	9f00      	ldr	r7, [sp, #0]
 800883c:	462b      	mov	r3, r5
 800883e:	461d      	mov	r5, r3
 8008840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008844:	2a39      	cmp	r2, #57	; 0x39
 8008846:	d106      	bne.n	8008856 <_dtoa_r+0x6de>
 8008848:	9a01      	ldr	r2, [sp, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d1f7      	bne.n	800883e <_dtoa_r+0x6c6>
 800884e:	9901      	ldr	r1, [sp, #4]
 8008850:	2230      	movs	r2, #48	; 0x30
 8008852:	3701      	adds	r7, #1
 8008854:	700a      	strb	r2, [r1, #0]
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	3201      	adds	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]
 800885c:	e790      	b.n	8008780 <_dtoa_r+0x608>
 800885e:	4ba6      	ldr	r3, [pc, #664]	; (8008af8 <_dtoa_r+0x980>)
 8008860:	2200      	movs	r2, #0
 8008862:	f7f7 fee1 	bl	8000628 <__aeabi_dmul>
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	4606      	mov	r6, r0
 800886c:	460f      	mov	r7, r1
 800886e:	f7f8 f943 	bl	8000af8 <__aeabi_dcmpeq>
 8008872:	2800      	cmp	r0, #0
 8008874:	d09d      	beq.n	80087b2 <_dtoa_r+0x63a>
 8008876:	e7cf      	b.n	8008818 <_dtoa_r+0x6a0>
 8008878:	9a08      	ldr	r2, [sp, #32]
 800887a:	2a00      	cmp	r2, #0
 800887c:	f000 80d7 	beq.w	8008a2e <_dtoa_r+0x8b6>
 8008880:	9a06      	ldr	r2, [sp, #24]
 8008882:	2a01      	cmp	r2, #1
 8008884:	f300 80ba 	bgt.w	80089fc <_dtoa_r+0x884>
 8008888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800888a:	2a00      	cmp	r2, #0
 800888c:	f000 80b2 	beq.w	80089f4 <_dtoa_r+0x87c>
 8008890:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008894:	9e07      	ldr	r6, [sp, #28]
 8008896:	9d04      	ldr	r5, [sp, #16]
 8008898:	9a04      	ldr	r2, [sp, #16]
 800889a:	441a      	add	r2, r3
 800889c:	9204      	str	r2, [sp, #16]
 800889e:	9a05      	ldr	r2, [sp, #20]
 80088a0:	2101      	movs	r1, #1
 80088a2:	441a      	add	r2, r3
 80088a4:	4620      	mov	r0, r4
 80088a6:	9205      	str	r2, [sp, #20]
 80088a8:	f000 fb66 	bl	8008f78 <__i2b>
 80088ac:	4607      	mov	r7, r0
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	dd0c      	ble.n	80088cc <_dtoa_r+0x754>
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd09      	ble.n	80088cc <_dtoa_r+0x754>
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	9a04      	ldr	r2, [sp, #16]
 80088bc:	bfa8      	it	ge
 80088be:	462b      	movge	r3, r5
 80088c0:	1ad2      	subs	r2, r2, r3
 80088c2:	9204      	str	r2, [sp, #16]
 80088c4:	9a05      	ldr	r2, [sp, #20]
 80088c6:	1aed      	subs	r5, r5, r3
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	9305      	str	r3, [sp, #20]
 80088cc:	9b07      	ldr	r3, [sp, #28]
 80088ce:	b31b      	cbz	r3, 8008918 <_dtoa_r+0x7a0>
 80088d0:	9b08      	ldr	r3, [sp, #32]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80af 	beq.w	8008a36 <_dtoa_r+0x8be>
 80088d8:	2e00      	cmp	r6, #0
 80088da:	dd13      	ble.n	8008904 <_dtoa_r+0x78c>
 80088dc:	4639      	mov	r1, r7
 80088de:	4632      	mov	r2, r6
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fc09 	bl	80090f8 <__pow5mult>
 80088e6:	ee18 2a10 	vmov	r2, s16
 80088ea:	4601      	mov	r1, r0
 80088ec:	4607      	mov	r7, r0
 80088ee:	4620      	mov	r0, r4
 80088f0:	f000 fb58 	bl	8008fa4 <__multiply>
 80088f4:	ee18 1a10 	vmov	r1, s16
 80088f8:	4680      	mov	r8, r0
 80088fa:	4620      	mov	r0, r4
 80088fc:	f000 fa84 	bl	8008e08 <_Bfree>
 8008900:	ee08 8a10 	vmov	s16, r8
 8008904:	9b07      	ldr	r3, [sp, #28]
 8008906:	1b9a      	subs	r2, r3, r6
 8008908:	d006      	beq.n	8008918 <_dtoa_r+0x7a0>
 800890a:	ee18 1a10 	vmov	r1, s16
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fbf2 	bl	80090f8 <__pow5mult>
 8008914:	ee08 0a10 	vmov	s16, r0
 8008918:	2101      	movs	r1, #1
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fb2c 	bl	8008f78 <__i2b>
 8008920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	4606      	mov	r6, r0
 8008926:	f340 8088 	ble.w	8008a3a <_dtoa_r+0x8c2>
 800892a:	461a      	mov	r2, r3
 800892c:	4601      	mov	r1, r0
 800892e:	4620      	mov	r0, r4
 8008930:	f000 fbe2 	bl	80090f8 <__pow5mult>
 8008934:	9b06      	ldr	r3, [sp, #24]
 8008936:	2b01      	cmp	r3, #1
 8008938:	4606      	mov	r6, r0
 800893a:	f340 8081 	ble.w	8008a40 <_dtoa_r+0x8c8>
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	6933      	ldr	r3, [r6, #16]
 8008944:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008948:	6918      	ldr	r0, [r3, #16]
 800894a:	f000 fac5 	bl	8008ed8 <__hi0bits>
 800894e:	f1c0 0020 	rsb	r0, r0, #32
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	4418      	add	r0, r3
 8008956:	f010 001f 	ands.w	r0, r0, #31
 800895a:	f000 8092 	beq.w	8008a82 <_dtoa_r+0x90a>
 800895e:	f1c0 0320 	rsb	r3, r0, #32
 8008962:	2b04      	cmp	r3, #4
 8008964:	f340 808a 	ble.w	8008a7c <_dtoa_r+0x904>
 8008968:	f1c0 001c 	rsb	r0, r0, #28
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	4403      	add	r3, r0
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	9b05      	ldr	r3, [sp, #20]
 8008974:	4403      	add	r3, r0
 8008976:	4405      	add	r5, r0
 8008978:	9305      	str	r3, [sp, #20]
 800897a:	9b04      	ldr	r3, [sp, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	dd07      	ble.n	8008990 <_dtoa_r+0x818>
 8008980:	ee18 1a10 	vmov	r1, s16
 8008984:	461a      	mov	r2, r3
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fc10 	bl	80091ac <__lshift>
 800898c:	ee08 0a10 	vmov	s16, r0
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	dd05      	ble.n	80089a2 <_dtoa_r+0x82a>
 8008996:	4631      	mov	r1, r6
 8008998:	461a      	mov	r2, r3
 800899a:	4620      	mov	r0, r4
 800899c:	f000 fc06 	bl	80091ac <__lshift>
 80089a0:	4606      	mov	r6, r0
 80089a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d06e      	beq.n	8008a86 <_dtoa_r+0x90e>
 80089a8:	ee18 0a10 	vmov	r0, s16
 80089ac:	4631      	mov	r1, r6
 80089ae:	f000 fc6d 	bl	800928c <__mcmp>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	da67      	bge.n	8008a86 <_dtoa_r+0x90e>
 80089b6:	9b00      	ldr	r3, [sp, #0]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	ee18 1a10 	vmov	r1, s16
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	220a      	movs	r2, #10
 80089c2:	2300      	movs	r3, #0
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fa41 	bl	8008e4c <__multadd>
 80089ca:	9b08      	ldr	r3, [sp, #32]
 80089cc:	ee08 0a10 	vmov	s16, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 81b1 	beq.w	8008d38 <_dtoa_r+0xbc0>
 80089d6:	2300      	movs	r3, #0
 80089d8:	4639      	mov	r1, r7
 80089da:	220a      	movs	r2, #10
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fa35 	bl	8008e4c <__multadd>
 80089e2:	9b02      	ldr	r3, [sp, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	4607      	mov	r7, r0
 80089e8:	f300 808e 	bgt.w	8008b08 <_dtoa_r+0x990>
 80089ec:	9b06      	ldr	r3, [sp, #24]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	dc51      	bgt.n	8008a96 <_dtoa_r+0x91e>
 80089f2:	e089      	b.n	8008b08 <_dtoa_r+0x990>
 80089f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089fa:	e74b      	b.n	8008894 <_dtoa_r+0x71c>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	1e5e      	subs	r6, r3, #1
 8008a00:	9b07      	ldr	r3, [sp, #28]
 8008a02:	42b3      	cmp	r3, r6
 8008a04:	bfbf      	itttt	lt
 8008a06:	9b07      	ldrlt	r3, [sp, #28]
 8008a08:	9607      	strlt	r6, [sp, #28]
 8008a0a:	1af2      	sublt	r2, r6, r3
 8008a0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a0e:	bfb6      	itet	lt
 8008a10:	189b      	addlt	r3, r3, r2
 8008a12:	1b9e      	subge	r6, r3, r6
 8008a14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a16:	9b03      	ldr	r3, [sp, #12]
 8008a18:	bfb8      	it	lt
 8008a1a:	2600      	movlt	r6, #0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfb7      	itett	lt
 8008a20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a28:	1a9d      	sublt	r5, r3, r2
 8008a2a:	2300      	movlt	r3, #0
 8008a2c:	e734      	b.n	8008898 <_dtoa_r+0x720>
 8008a2e:	9e07      	ldr	r6, [sp, #28]
 8008a30:	9d04      	ldr	r5, [sp, #16]
 8008a32:	9f08      	ldr	r7, [sp, #32]
 8008a34:	e73b      	b.n	80088ae <_dtoa_r+0x736>
 8008a36:	9a07      	ldr	r2, [sp, #28]
 8008a38:	e767      	b.n	800890a <_dtoa_r+0x792>
 8008a3a:	9b06      	ldr	r3, [sp, #24]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	dc18      	bgt.n	8008a72 <_dtoa_r+0x8fa>
 8008a40:	f1ba 0f00 	cmp.w	sl, #0
 8008a44:	d115      	bne.n	8008a72 <_dtoa_r+0x8fa>
 8008a46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a4a:	b993      	cbnz	r3, 8008a72 <_dtoa_r+0x8fa>
 8008a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a50:	0d1b      	lsrs	r3, r3, #20
 8008a52:	051b      	lsls	r3, r3, #20
 8008a54:	b183      	cbz	r3, 8008a78 <_dtoa_r+0x900>
 8008a56:	9b04      	ldr	r3, [sp, #16]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	9304      	str	r3, [sp, #16]
 8008a5c:	9b05      	ldr	r3, [sp, #20]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	9305      	str	r3, [sp, #20]
 8008a62:	f04f 0801 	mov.w	r8, #1
 8008a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f47f af6a 	bne.w	8008942 <_dtoa_r+0x7ca>
 8008a6e:	2001      	movs	r0, #1
 8008a70:	e76f      	b.n	8008952 <_dtoa_r+0x7da>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	e7f6      	b.n	8008a66 <_dtoa_r+0x8ee>
 8008a78:	4698      	mov	r8, r3
 8008a7a:	e7f4      	b.n	8008a66 <_dtoa_r+0x8ee>
 8008a7c:	f43f af7d 	beq.w	800897a <_dtoa_r+0x802>
 8008a80:	4618      	mov	r0, r3
 8008a82:	301c      	adds	r0, #28
 8008a84:	e772      	b.n	800896c <_dtoa_r+0x7f4>
 8008a86:	9b03      	ldr	r3, [sp, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dc37      	bgt.n	8008afc <_dtoa_r+0x984>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	dd34      	ble.n	8008afc <_dtoa_r+0x984>
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	9302      	str	r3, [sp, #8]
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	b96b      	cbnz	r3, 8008ab6 <_dtoa_r+0x93e>
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	2205      	movs	r2, #5
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f9d4 	bl	8008e4c <__multadd>
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	ee18 0a10 	vmov	r0, s16
 8008aac:	f000 fbee 	bl	800928c <__mcmp>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f73f adbb 	bgt.w	800862c <_dtoa_r+0x4b4>
 8008ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab8:	9d01      	ldr	r5, [sp, #4]
 8008aba:	43db      	mvns	r3, r3
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 f99f 	bl	8008e08 <_Bfree>
 8008aca:	2f00      	cmp	r7, #0
 8008acc:	f43f aea4 	beq.w	8008818 <_dtoa_r+0x6a0>
 8008ad0:	f1b8 0f00 	cmp.w	r8, #0
 8008ad4:	d005      	beq.n	8008ae2 <_dtoa_r+0x96a>
 8008ad6:	45b8      	cmp	r8, r7
 8008ad8:	d003      	beq.n	8008ae2 <_dtoa_r+0x96a>
 8008ada:	4641      	mov	r1, r8
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 f993 	bl	8008e08 <_Bfree>
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 f98f 	bl	8008e08 <_Bfree>
 8008aea:	e695      	b.n	8008818 <_dtoa_r+0x6a0>
 8008aec:	2600      	movs	r6, #0
 8008aee:	4637      	mov	r7, r6
 8008af0:	e7e1      	b.n	8008ab6 <_dtoa_r+0x93e>
 8008af2:	9700      	str	r7, [sp, #0]
 8008af4:	4637      	mov	r7, r6
 8008af6:	e599      	b.n	800862c <_dtoa_r+0x4b4>
 8008af8:	40240000 	.word	0x40240000
 8008afc:	9b08      	ldr	r3, [sp, #32]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80ca 	beq.w	8008c98 <_dtoa_r+0xb20>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	9302      	str	r3, [sp, #8]
 8008b08:	2d00      	cmp	r5, #0
 8008b0a:	dd05      	ble.n	8008b18 <_dtoa_r+0x9a0>
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	462a      	mov	r2, r5
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fb4b 	bl	80091ac <__lshift>
 8008b16:	4607      	mov	r7, r0
 8008b18:	f1b8 0f00 	cmp.w	r8, #0
 8008b1c:	d05b      	beq.n	8008bd6 <_dtoa_r+0xa5e>
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 f931 	bl	8008d88 <_Balloc>
 8008b26:	4605      	mov	r5, r0
 8008b28:	b928      	cbnz	r0, 8008b36 <_dtoa_r+0x9be>
 8008b2a:	4b87      	ldr	r3, [pc, #540]	; (8008d48 <_dtoa_r+0xbd0>)
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b32:	f7ff bb3b 	b.w	80081ac <_dtoa_r+0x34>
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	3202      	adds	r2, #2
 8008b3a:	0092      	lsls	r2, r2, #2
 8008b3c:	f107 010c 	add.w	r1, r7, #12
 8008b40:	300c      	adds	r0, #12
 8008b42:	f000 f913 	bl	8008d6c <memcpy>
 8008b46:	2201      	movs	r2, #1
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fb2e 	bl	80091ac <__lshift>
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	f103 0901 	add.w	r9, r3, #1
 8008b56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	9305      	str	r3, [sp, #20]
 8008b5e:	f00a 0301 	and.w	r3, sl, #1
 8008b62:	46b8      	mov	r8, r7
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	4607      	mov	r7, r0
 8008b68:	4631      	mov	r1, r6
 8008b6a:	ee18 0a10 	vmov	r0, s16
 8008b6e:	f7ff fa75 	bl	800805c <quorem>
 8008b72:	4641      	mov	r1, r8
 8008b74:	9002      	str	r0, [sp, #8]
 8008b76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b7a:	ee18 0a10 	vmov	r0, s16
 8008b7e:	f000 fb85 	bl	800928c <__mcmp>
 8008b82:	463a      	mov	r2, r7
 8008b84:	9003      	str	r0, [sp, #12]
 8008b86:	4631      	mov	r1, r6
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fb9b 	bl	80092c4 <__mdiff>
 8008b8e:	68c2      	ldr	r2, [r0, #12]
 8008b90:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b94:	4605      	mov	r5, r0
 8008b96:	bb02      	cbnz	r2, 8008bda <_dtoa_r+0xa62>
 8008b98:	4601      	mov	r1, r0
 8008b9a:	ee18 0a10 	vmov	r0, s16
 8008b9e:	f000 fb75 	bl	800928c <__mcmp>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	9207      	str	r2, [sp, #28]
 8008baa:	f000 f92d 	bl	8008e08 <_Bfree>
 8008bae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bb2:	ea43 0102 	orr.w	r1, r3, r2
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	464d      	mov	r5, r9
 8008bbc:	d10f      	bne.n	8008bde <_dtoa_r+0xa66>
 8008bbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bc2:	d02a      	beq.n	8008c1a <_dtoa_r+0xaa2>
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dd02      	ble.n	8008bd0 <_dtoa_r+0xa58>
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008bd0:	f88b a000 	strb.w	sl, [fp]
 8008bd4:	e775      	b.n	8008ac2 <_dtoa_r+0x94a>
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	e7ba      	b.n	8008b50 <_dtoa_r+0x9d8>
 8008bda:	2201      	movs	r2, #1
 8008bdc:	e7e2      	b.n	8008ba4 <_dtoa_r+0xa2c>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	db04      	blt.n	8008bee <_dtoa_r+0xa76>
 8008be4:	9906      	ldr	r1, [sp, #24]
 8008be6:	430b      	orrs	r3, r1
 8008be8:	9904      	ldr	r1, [sp, #16]
 8008bea:	430b      	orrs	r3, r1
 8008bec:	d122      	bne.n	8008c34 <_dtoa_r+0xabc>
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	ddee      	ble.n	8008bd0 <_dtoa_r+0xa58>
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 fad7 	bl	80091ac <__lshift>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	ee08 0a10 	vmov	s16, r0
 8008c04:	f000 fb42 	bl	800928c <__mcmp>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	dc03      	bgt.n	8008c14 <_dtoa_r+0xa9c>
 8008c0c:	d1e0      	bne.n	8008bd0 <_dtoa_r+0xa58>
 8008c0e:	f01a 0f01 	tst.w	sl, #1
 8008c12:	d0dd      	beq.n	8008bd0 <_dtoa_r+0xa58>
 8008c14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c18:	d1d7      	bne.n	8008bca <_dtoa_r+0xa52>
 8008c1a:	2339      	movs	r3, #57	; 0x39
 8008c1c:	f88b 3000 	strb.w	r3, [fp]
 8008c20:	462b      	mov	r3, r5
 8008c22:	461d      	mov	r5, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c2a:	2a39      	cmp	r2, #57	; 0x39
 8008c2c:	d071      	beq.n	8008d12 <_dtoa_r+0xb9a>
 8008c2e:	3201      	adds	r2, #1
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	e746      	b.n	8008ac2 <_dtoa_r+0x94a>
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	dd07      	ble.n	8008c48 <_dtoa_r+0xad0>
 8008c38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c3c:	d0ed      	beq.n	8008c1a <_dtoa_r+0xaa2>
 8008c3e:	f10a 0301 	add.w	r3, sl, #1
 8008c42:	f88b 3000 	strb.w	r3, [fp]
 8008c46:	e73c      	b.n	8008ac2 <_dtoa_r+0x94a>
 8008c48:	9b05      	ldr	r3, [sp, #20]
 8008c4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c4e:	4599      	cmp	r9, r3
 8008c50:	d047      	beq.n	8008ce2 <_dtoa_r+0xb6a>
 8008c52:	ee18 1a10 	vmov	r1, s16
 8008c56:	2300      	movs	r3, #0
 8008c58:	220a      	movs	r2, #10
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 f8f6 	bl	8008e4c <__multadd>
 8008c60:	45b8      	cmp	r8, r7
 8008c62:	ee08 0a10 	vmov	s16, r0
 8008c66:	f04f 0300 	mov.w	r3, #0
 8008c6a:	f04f 020a 	mov.w	r2, #10
 8008c6e:	4641      	mov	r1, r8
 8008c70:	4620      	mov	r0, r4
 8008c72:	d106      	bne.n	8008c82 <_dtoa_r+0xb0a>
 8008c74:	f000 f8ea 	bl	8008e4c <__multadd>
 8008c78:	4680      	mov	r8, r0
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	f109 0901 	add.w	r9, r9, #1
 8008c80:	e772      	b.n	8008b68 <_dtoa_r+0x9f0>
 8008c82:	f000 f8e3 	bl	8008e4c <__multadd>
 8008c86:	4639      	mov	r1, r7
 8008c88:	4680      	mov	r8, r0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	220a      	movs	r2, #10
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 f8dc 	bl	8008e4c <__multadd>
 8008c94:	4607      	mov	r7, r0
 8008c96:	e7f1      	b.n	8008c7c <_dtoa_r+0xb04>
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	9302      	str	r3, [sp, #8]
 8008c9c:	9d01      	ldr	r5, [sp, #4]
 8008c9e:	ee18 0a10 	vmov	r0, s16
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	f7ff f9da 	bl	800805c <quorem>
 8008ca8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	f805 ab01 	strb.w	sl, [r5], #1
 8008cb2:	1aea      	subs	r2, r5, r3
 8008cb4:	9b02      	ldr	r3, [sp, #8]
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	dd09      	ble.n	8008cce <_dtoa_r+0xb56>
 8008cba:	ee18 1a10 	vmov	r1, s16
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	220a      	movs	r2, #10
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 f8c2 	bl	8008e4c <__multadd>
 8008cc8:	ee08 0a10 	vmov	s16, r0
 8008ccc:	e7e7      	b.n	8008c9e <_dtoa_r+0xb26>
 8008cce:	9b02      	ldr	r3, [sp, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bfc8      	it	gt
 8008cd4:	461d      	movgt	r5, r3
 8008cd6:	9b01      	ldr	r3, [sp, #4]
 8008cd8:	bfd8      	it	le
 8008cda:	2501      	movle	r5, #1
 8008cdc:	441d      	add	r5, r3
 8008cde:	f04f 0800 	mov.w	r8, #0
 8008ce2:	ee18 1a10 	vmov	r1, s16
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fa5f 	bl	80091ac <__lshift>
 8008cee:	4631      	mov	r1, r6
 8008cf0:	ee08 0a10 	vmov	s16, r0
 8008cf4:	f000 faca 	bl	800928c <__mcmp>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	dc91      	bgt.n	8008c20 <_dtoa_r+0xaa8>
 8008cfc:	d102      	bne.n	8008d04 <_dtoa_r+0xb8c>
 8008cfe:	f01a 0f01 	tst.w	sl, #1
 8008d02:	d18d      	bne.n	8008c20 <_dtoa_r+0xaa8>
 8008d04:	462b      	mov	r3, r5
 8008d06:	461d      	mov	r5, r3
 8008d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d0c:	2a30      	cmp	r2, #48	; 0x30
 8008d0e:	d0fa      	beq.n	8008d06 <_dtoa_r+0xb8e>
 8008d10:	e6d7      	b.n	8008ac2 <_dtoa_r+0x94a>
 8008d12:	9a01      	ldr	r2, [sp, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d184      	bne.n	8008c22 <_dtoa_r+0xaaa>
 8008d18:	9b00      	ldr	r3, [sp, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2331      	movs	r3, #49	; 0x31
 8008d20:	7013      	strb	r3, [r2, #0]
 8008d22:	e6ce      	b.n	8008ac2 <_dtoa_r+0x94a>
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <_dtoa_r+0xbd4>)
 8008d26:	f7ff ba95 	b.w	8008254 <_dtoa_r+0xdc>
 8008d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f47f aa6e 	bne.w	800820e <_dtoa_r+0x96>
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <_dtoa_r+0xbd8>)
 8008d34:	f7ff ba8e 	b.w	8008254 <_dtoa_r+0xdc>
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dcae      	bgt.n	8008c9c <_dtoa_r+0xb24>
 8008d3e:	9b06      	ldr	r3, [sp, #24]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	f73f aea8 	bgt.w	8008a96 <_dtoa_r+0x91e>
 8008d46:	e7a9      	b.n	8008c9c <_dtoa_r+0xb24>
 8008d48:	0800a68f 	.word	0x0800a68f
 8008d4c:	0800a5ec 	.word	0x0800a5ec
 8008d50:	0800a610 	.word	0x0800a610

08008d54 <_localeconv_r>:
 8008d54:	4800      	ldr	r0, [pc, #0]	; (8008d58 <_localeconv_r+0x4>)
 8008d56:	4770      	bx	lr
 8008d58:	20000160 	.word	0x20000160

08008d5c <malloc>:
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <malloc+0xc>)
 8008d5e:	4601      	mov	r1, r0
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	f000 bc17 	b.w	8009594 <_malloc_r>
 8008d66:	bf00      	nop
 8008d68:	2000000c 	.word	0x2000000c

08008d6c <memcpy>:
 8008d6c:	440a      	add	r2, r1
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d74:	d100      	bne.n	8008d78 <memcpy+0xc>
 8008d76:	4770      	bx	lr
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d82:	4291      	cmp	r1, r2
 8008d84:	d1f9      	bne.n	8008d7a <memcpy+0xe>
 8008d86:	bd10      	pop	{r4, pc}

08008d88 <_Balloc>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	460d      	mov	r5, r1
 8008d90:	b976      	cbnz	r6, 8008db0 <_Balloc+0x28>
 8008d92:	2010      	movs	r0, #16
 8008d94:	f7ff ffe2 	bl	8008d5c <malloc>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8008d9c:	b920      	cbnz	r0, 8008da8 <_Balloc+0x20>
 8008d9e:	4b18      	ldr	r3, [pc, #96]	; (8008e00 <_Balloc+0x78>)
 8008da0:	4818      	ldr	r0, [pc, #96]	; (8008e04 <_Balloc+0x7c>)
 8008da2:	2166      	movs	r1, #102	; 0x66
 8008da4:	f000 fdd6 	bl	8009954 <__assert_func>
 8008da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dac:	6006      	str	r6, [r0, #0]
 8008dae:	60c6      	str	r6, [r0, #12]
 8008db0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008db2:	68f3      	ldr	r3, [r6, #12]
 8008db4:	b183      	cbz	r3, 8008dd8 <_Balloc+0x50>
 8008db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dbe:	b9b8      	cbnz	r0, 8008df0 <_Balloc+0x68>
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8008dc6:	1d72      	adds	r2, r6, #5
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 fb60 	bl	8009490 <_calloc_r>
 8008dd0:	b160      	cbz	r0, 8008dec <_Balloc+0x64>
 8008dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dd6:	e00e      	b.n	8008df6 <_Balloc+0x6e>
 8008dd8:	2221      	movs	r2, #33	; 0x21
 8008dda:	2104      	movs	r1, #4
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 fb57 	bl	8009490 <_calloc_r>
 8008de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008de4:	60f0      	str	r0, [r6, #12]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1e4      	bne.n	8008db6 <_Balloc+0x2e>
 8008dec:	2000      	movs	r0, #0
 8008dee:	bd70      	pop	{r4, r5, r6, pc}
 8008df0:	6802      	ldr	r2, [r0, #0]
 8008df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008df6:	2300      	movs	r3, #0
 8008df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dfc:	e7f7      	b.n	8008dee <_Balloc+0x66>
 8008dfe:	bf00      	nop
 8008e00:	0800a61d 	.word	0x0800a61d
 8008e04:	0800a6a0 	.word	0x0800a6a0

08008e08 <_Bfree>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	b976      	cbnz	r6, 8008e30 <_Bfree+0x28>
 8008e12:	2010      	movs	r0, #16
 8008e14:	f7ff ffa2 	bl	8008d5c <malloc>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6268      	str	r0, [r5, #36]	; 0x24
 8008e1c:	b920      	cbnz	r0, 8008e28 <_Bfree+0x20>
 8008e1e:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <_Bfree+0x3c>)
 8008e20:	4809      	ldr	r0, [pc, #36]	; (8008e48 <_Bfree+0x40>)
 8008e22:	218a      	movs	r1, #138	; 0x8a
 8008e24:	f000 fd96 	bl	8009954 <__assert_func>
 8008e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e2c:	6006      	str	r6, [r0, #0]
 8008e2e:	60c6      	str	r6, [r0, #12]
 8008e30:	b13c      	cbz	r4, 8008e42 <_Bfree+0x3a>
 8008e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e34:	6862      	ldr	r2, [r4, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e3c:	6021      	str	r1, [r4, #0]
 8008e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	0800a61d 	.word	0x0800a61d
 8008e48:	0800a6a0 	.word	0x0800a6a0

08008e4c <__multadd>:
 8008e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e50:	690d      	ldr	r5, [r1, #16]
 8008e52:	4607      	mov	r7, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	461e      	mov	r6, r3
 8008e58:	f101 0c14 	add.w	ip, r1, #20
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8008e62:	b299      	uxth	r1, r3
 8008e64:	fb02 6101 	mla	r1, r2, r1, r6
 8008e68:	0c1e      	lsrs	r6, r3, #16
 8008e6a:	0c0b      	lsrs	r3, r1, #16
 8008e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8008e70:	b289      	uxth	r1, r1
 8008e72:	3001      	adds	r0, #1
 8008e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e78:	4285      	cmp	r5, r0
 8008e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8008e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e82:	dcec      	bgt.n	8008e5e <__multadd+0x12>
 8008e84:	b30e      	cbz	r6, 8008eca <__multadd+0x7e>
 8008e86:	68a3      	ldr	r3, [r4, #8]
 8008e88:	42ab      	cmp	r3, r5
 8008e8a:	dc19      	bgt.n	8008ec0 <__multadd+0x74>
 8008e8c:	6861      	ldr	r1, [r4, #4]
 8008e8e:	4638      	mov	r0, r7
 8008e90:	3101      	adds	r1, #1
 8008e92:	f7ff ff79 	bl	8008d88 <_Balloc>
 8008e96:	4680      	mov	r8, r0
 8008e98:	b928      	cbnz	r0, 8008ea6 <__multadd+0x5a>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <__multadd+0x84>)
 8008e9e:	480d      	ldr	r0, [pc, #52]	; (8008ed4 <__multadd+0x88>)
 8008ea0:	21b5      	movs	r1, #181	; 0xb5
 8008ea2:	f000 fd57 	bl	8009954 <__assert_func>
 8008ea6:	6922      	ldr	r2, [r4, #16]
 8008ea8:	3202      	adds	r2, #2
 8008eaa:	f104 010c 	add.w	r1, r4, #12
 8008eae:	0092      	lsls	r2, r2, #2
 8008eb0:	300c      	adds	r0, #12
 8008eb2:	f7ff ff5b 	bl	8008d6c <memcpy>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f7ff ffa5 	bl	8008e08 <_Bfree>
 8008ebe:	4644      	mov	r4, r8
 8008ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	615e      	str	r6, [r3, #20]
 8008ec8:	6125      	str	r5, [r4, #16]
 8008eca:	4620      	mov	r0, r4
 8008ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed0:	0800a68f 	.word	0x0800a68f
 8008ed4:	0800a6a0 	.word	0x0800a6a0

08008ed8 <__hi0bits>:
 8008ed8:	0c03      	lsrs	r3, r0, #16
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	b9d3      	cbnz	r3, 8008f14 <__hi0bits+0x3c>
 8008ede:	0400      	lsls	r0, r0, #16
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ee6:	bf04      	itt	eq
 8008ee8:	0200      	lsleq	r0, r0, #8
 8008eea:	3308      	addeq	r3, #8
 8008eec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ef0:	bf04      	itt	eq
 8008ef2:	0100      	lsleq	r0, r0, #4
 8008ef4:	3304      	addeq	r3, #4
 8008ef6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008efa:	bf04      	itt	eq
 8008efc:	0080      	lsleq	r0, r0, #2
 8008efe:	3302      	addeq	r3, #2
 8008f00:	2800      	cmp	r0, #0
 8008f02:	db05      	blt.n	8008f10 <__hi0bits+0x38>
 8008f04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f08:	f103 0301 	add.w	r3, r3, #1
 8008f0c:	bf08      	it	eq
 8008f0e:	2320      	moveq	r3, #32
 8008f10:	4618      	mov	r0, r3
 8008f12:	4770      	bx	lr
 8008f14:	2300      	movs	r3, #0
 8008f16:	e7e4      	b.n	8008ee2 <__hi0bits+0xa>

08008f18 <__lo0bits>:
 8008f18:	6803      	ldr	r3, [r0, #0]
 8008f1a:	f013 0207 	ands.w	r2, r3, #7
 8008f1e:	4601      	mov	r1, r0
 8008f20:	d00b      	beq.n	8008f3a <__lo0bits+0x22>
 8008f22:	07da      	lsls	r2, r3, #31
 8008f24:	d423      	bmi.n	8008f6e <__lo0bits+0x56>
 8008f26:	0798      	lsls	r0, r3, #30
 8008f28:	bf49      	itett	mi
 8008f2a:	085b      	lsrmi	r3, r3, #1
 8008f2c:	089b      	lsrpl	r3, r3, #2
 8008f2e:	2001      	movmi	r0, #1
 8008f30:	600b      	strmi	r3, [r1, #0]
 8008f32:	bf5c      	itt	pl
 8008f34:	600b      	strpl	r3, [r1, #0]
 8008f36:	2002      	movpl	r0, #2
 8008f38:	4770      	bx	lr
 8008f3a:	b298      	uxth	r0, r3
 8008f3c:	b9a8      	cbnz	r0, 8008f6a <__lo0bits+0x52>
 8008f3e:	0c1b      	lsrs	r3, r3, #16
 8008f40:	2010      	movs	r0, #16
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	b90a      	cbnz	r2, 8008f4a <__lo0bits+0x32>
 8008f46:	3008      	adds	r0, #8
 8008f48:	0a1b      	lsrs	r3, r3, #8
 8008f4a:	071a      	lsls	r2, r3, #28
 8008f4c:	bf04      	itt	eq
 8008f4e:	091b      	lsreq	r3, r3, #4
 8008f50:	3004      	addeq	r0, #4
 8008f52:	079a      	lsls	r2, r3, #30
 8008f54:	bf04      	itt	eq
 8008f56:	089b      	lsreq	r3, r3, #2
 8008f58:	3002      	addeq	r0, #2
 8008f5a:	07da      	lsls	r2, r3, #31
 8008f5c:	d403      	bmi.n	8008f66 <__lo0bits+0x4e>
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	f100 0001 	add.w	r0, r0, #1
 8008f64:	d005      	beq.n	8008f72 <__lo0bits+0x5a>
 8008f66:	600b      	str	r3, [r1, #0]
 8008f68:	4770      	bx	lr
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	e7e9      	b.n	8008f42 <__lo0bits+0x2a>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	4770      	bx	lr
 8008f72:	2020      	movs	r0, #32
 8008f74:	4770      	bx	lr
	...

08008f78 <__i2b>:
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	f7ff ff03 	bl	8008d88 <_Balloc>
 8008f82:	4602      	mov	r2, r0
 8008f84:	b928      	cbnz	r0, 8008f92 <__i2b+0x1a>
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <__i2b+0x24>)
 8008f88:	4805      	ldr	r0, [pc, #20]	; (8008fa0 <__i2b+0x28>)
 8008f8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f8e:	f000 fce1 	bl	8009954 <__assert_func>
 8008f92:	2301      	movs	r3, #1
 8008f94:	6144      	str	r4, [r0, #20]
 8008f96:	6103      	str	r3, [r0, #16]
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	bf00      	nop
 8008f9c:	0800a68f 	.word	0x0800a68f
 8008fa0:	0800a6a0 	.word	0x0800a6a0

08008fa4 <__multiply>:
 8008fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa8:	4691      	mov	r9, r2
 8008faa:	690a      	ldr	r2, [r1, #16]
 8008fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	bfb8      	it	lt
 8008fb4:	460b      	movlt	r3, r1
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	bfbc      	itt	lt
 8008fba:	464c      	movlt	r4, r9
 8008fbc:	4699      	movlt	r9, r3
 8008fbe:	6927      	ldr	r7, [r4, #16]
 8008fc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fc4:	68a3      	ldr	r3, [r4, #8]
 8008fc6:	6861      	ldr	r1, [r4, #4]
 8008fc8:	eb07 060a 	add.w	r6, r7, sl
 8008fcc:	42b3      	cmp	r3, r6
 8008fce:	b085      	sub	sp, #20
 8008fd0:	bfb8      	it	lt
 8008fd2:	3101      	addlt	r1, #1
 8008fd4:	f7ff fed8 	bl	8008d88 <_Balloc>
 8008fd8:	b930      	cbnz	r0, 8008fe8 <__multiply+0x44>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4b44      	ldr	r3, [pc, #272]	; (80090f0 <__multiply+0x14c>)
 8008fde:	4845      	ldr	r0, [pc, #276]	; (80090f4 <__multiply+0x150>)
 8008fe0:	f240 115d 	movw	r1, #349	; 0x15d
 8008fe4:	f000 fcb6 	bl	8009954 <__assert_func>
 8008fe8:	f100 0514 	add.w	r5, r0, #20
 8008fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	4543      	cmp	r3, r8
 8008ff6:	d321      	bcc.n	800903c <__multiply+0x98>
 8008ff8:	f104 0314 	add.w	r3, r4, #20
 8008ffc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009000:	f109 0314 	add.w	r3, r9, #20
 8009004:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009008:	9202      	str	r2, [sp, #8]
 800900a:	1b3a      	subs	r2, r7, r4
 800900c:	3a15      	subs	r2, #21
 800900e:	f022 0203 	bic.w	r2, r2, #3
 8009012:	3204      	adds	r2, #4
 8009014:	f104 0115 	add.w	r1, r4, #21
 8009018:	428f      	cmp	r7, r1
 800901a:	bf38      	it	cc
 800901c:	2204      	movcc	r2, #4
 800901e:	9201      	str	r2, [sp, #4]
 8009020:	9a02      	ldr	r2, [sp, #8]
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	429a      	cmp	r2, r3
 8009026:	d80c      	bhi.n	8009042 <__multiply+0x9e>
 8009028:	2e00      	cmp	r6, #0
 800902a:	dd03      	ble.n	8009034 <__multiply+0x90>
 800902c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009030:	2b00      	cmp	r3, #0
 8009032:	d05a      	beq.n	80090ea <__multiply+0x146>
 8009034:	6106      	str	r6, [r0, #16]
 8009036:	b005      	add	sp, #20
 8009038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903c:	f843 2b04 	str.w	r2, [r3], #4
 8009040:	e7d8      	b.n	8008ff4 <__multiply+0x50>
 8009042:	f8b3 a000 	ldrh.w	sl, [r3]
 8009046:	f1ba 0f00 	cmp.w	sl, #0
 800904a:	d024      	beq.n	8009096 <__multiply+0xf2>
 800904c:	f104 0e14 	add.w	lr, r4, #20
 8009050:	46a9      	mov	r9, r5
 8009052:	f04f 0c00 	mov.w	ip, #0
 8009056:	f85e 2b04 	ldr.w	r2, [lr], #4
 800905a:	f8d9 1000 	ldr.w	r1, [r9]
 800905e:	fa1f fb82 	uxth.w	fp, r2
 8009062:	b289      	uxth	r1, r1
 8009064:	fb0a 110b 	mla	r1, sl, fp, r1
 8009068:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800906c:	f8d9 2000 	ldr.w	r2, [r9]
 8009070:	4461      	add	r1, ip
 8009072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009076:	fb0a c20b 	mla	r2, sl, fp, ip
 800907a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800907e:	b289      	uxth	r1, r1
 8009080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009084:	4577      	cmp	r7, lr
 8009086:	f849 1b04 	str.w	r1, [r9], #4
 800908a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800908e:	d8e2      	bhi.n	8009056 <__multiply+0xb2>
 8009090:	9a01      	ldr	r2, [sp, #4]
 8009092:	f845 c002 	str.w	ip, [r5, r2]
 8009096:	9a03      	ldr	r2, [sp, #12]
 8009098:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800909c:	3304      	adds	r3, #4
 800909e:	f1b9 0f00 	cmp.w	r9, #0
 80090a2:	d020      	beq.n	80090e6 <__multiply+0x142>
 80090a4:	6829      	ldr	r1, [r5, #0]
 80090a6:	f104 0c14 	add.w	ip, r4, #20
 80090aa:	46ae      	mov	lr, r5
 80090ac:	f04f 0a00 	mov.w	sl, #0
 80090b0:	f8bc b000 	ldrh.w	fp, [ip]
 80090b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090b8:	fb09 220b 	mla	r2, r9, fp, r2
 80090bc:	4492      	add	sl, r2
 80090be:	b289      	uxth	r1, r1
 80090c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80090c4:	f84e 1b04 	str.w	r1, [lr], #4
 80090c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090cc:	f8be 1000 	ldrh.w	r1, [lr]
 80090d0:	0c12      	lsrs	r2, r2, #16
 80090d2:	fb09 1102 	mla	r1, r9, r2, r1
 80090d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80090da:	4567      	cmp	r7, ip
 80090dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090e0:	d8e6      	bhi.n	80090b0 <__multiply+0x10c>
 80090e2:	9a01      	ldr	r2, [sp, #4]
 80090e4:	50a9      	str	r1, [r5, r2]
 80090e6:	3504      	adds	r5, #4
 80090e8:	e79a      	b.n	8009020 <__multiply+0x7c>
 80090ea:	3e01      	subs	r6, #1
 80090ec:	e79c      	b.n	8009028 <__multiply+0x84>
 80090ee:	bf00      	nop
 80090f0:	0800a68f 	.word	0x0800a68f
 80090f4:	0800a6a0 	.word	0x0800a6a0

080090f8 <__pow5mult>:
 80090f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090fc:	4615      	mov	r5, r2
 80090fe:	f012 0203 	ands.w	r2, r2, #3
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	d007      	beq.n	8009118 <__pow5mult+0x20>
 8009108:	4c25      	ldr	r4, [pc, #148]	; (80091a0 <__pow5mult+0xa8>)
 800910a:	3a01      	subs	r2, #1
 800910c:	2300      	movs	r3, #0
 800910e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009112:	f7ff fe9b 	bl	8008e4c <__multadd>
 8009116:	4607      	mov	r7, r0
 8009118:	10ad      	asrs	r5, r5, #2
 800911a:	d03d      	beq.n	8009198 <__pow5mult+0xa0>
 800911c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800911e:	b97c      	cbnz	r4, 8009140 <__pow5mult+0x48>
 8009120:	2010      	movs	r0, #16
 8009122:	f7ff fe1b 	bl	8008d5c <malloc>
 8009126:	4602      	mov	r2, r0
 8009128:	6270      	str	r0, [r6, #36]	; 0x24
 800912a:	b928      	cbnz	r0, 8009138 <__pow5mult+0x40>
 800912c:	4b1d      	ldr	r3, [pc, #116]	; (80091a4 <__pow5mult+0xac>)
 800912e:	481e      	ldr	r0, [pc, #120]	; (80091a8 <__pow5mult+0xb0>)
 8009130:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009134:	f000 fc0e 	bl	8009954 <__assert_func>
 8009138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800913c:	6004      	str	r4, [r0, #0]
 800913e:	60c4      	str	r4, [r0, #12]
 8009140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009148:	b94c      	cbnz	r4, 800915e <__pow5mult+0x66>
 800914a:	f240 2171 	movw	r1, #625	; 0x271
 800914e:	4630      	mov	r0, r6
 8009150:	f7ff ff12 	bl	8008f78 <__i2b>
 8009154:	2300      	movs	r3, #0
 8009156:	f8c8 0008 	str.w	r0, [r8, #8]
 800915a:	4604      	mov	r4, r0
 800915c:	6003      	str	r3, [r0, #0]
 800915e:	f04f 0900 	mov.w	r9, #0
 8009162:	07eb      	lsls	r3, r5, #31
 8009164:	d50a      	bpl.n	800917c <__pow5mult+0x84>
 8009166:	4639      	mov	r1, r7
 8009168:	4622      	mov	r2, r4
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff ff1a 	bl	8008fa4 <__multiply>
 8009170:	4639      	mov	r1, r7
 8009172:	4680      	mov	r8, r0
 8009174:	4630      	mov	r0, r6
 8009176:	f7ff fe47 	bl	8008e08 <_Bfree>
 800917a:	4647      	mov	r7, r8
 800917c:	106d      	asrs	r5, r5, #1
 800917e:	d00b      	beq.n	8009198 <__pow5mult+0xa0>
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	b938      	cbnz	r0, 8009194 <__pow5mult+0x9c>
 8009184:	4622      	mov	r2, r4
 8009186:	4621      	mov	r1, r4
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff ff0b 	bl	8008fa4 <__multiply>
 800918e:	6020      	str	r0, [r4, #0]
 8009190:	f8c0 9000 	str.w	r9, [r0]
 8009194:	4604      	mov	r4, r0
 8009196:	e7e4      	b.n	8009162 <__pow5mult+0x6a>
 8009198:	4638      	mov	r0, r7
 800919a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919e:	bf00      	nop
 80091a0:	0800a7f0 	.word	0x0800a7f0
 80091a4:	0800a61d 	.word	0x0800a61d
 80091a8:	0800a6a0 	.word	0x0800a6a0

080091ac <__lshift>:
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	460c      	mov	r4, r1
 80091b2:	6849      	ldr	r1, [r1, #4]
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	4607      	mov	r7, r0
 80091be:	4691      	mov	r9, r2
 80091c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091c4:	f108 0601 	add.w	r6, r8, #1
 80091c8:	42b3      	cmp	r3, r6
 80091ca:	db0b      	blt.n	80091e4 <__lshift+0x38>
 80091cc:	4638      	mov	r0, r7
 80091ce:	f7ff fddb 	bl	8008d88 <_Balloc>
 80091d2:	4605      	mov	r5, r0
 80091d4:	b948      	cbnz	r0, 80091ea <__lshift+0x3e>
 80091d6:	4602      	mov	r2, r0
 80091d8:	4b2a      	ldr	r3, [pc, #168]	; (8009284 <__lshift+0xd8>)
 80091da:	482b      	ldr	r0, [pc, #172]	; (8009288 <__lshift+0xdc>)
 80091dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091e0:	f000 fbb8 	bl	8009954 <__assert_func>
 80091e4:	3101      	adds	r1, #1
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	e7ee      	b.n	80091c8 <__lshift+0x1c>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f100 0114 	add.w	r1, r0, #20
 80091f0:	f100 0210 	add.w	r2, r0, #16
 80091f4:	4618      	mov	r0, r3
 80091f6:	4553      	cmp	r3, sl
 80091f8:	db37      	blt.n	800926a <__lshift+0xbe>
 80091fa:	6920      	ldr	r0, [r4, #16]
 80091fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009200:	f104 0314 	add.w	r3, r4, #20
 8009204:	f019 091f 	ands.w	r9, r9, #31
 8009208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800920c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009210:	d02f      	beq.n	8009272 <__lshift+0xc6>
 8009212:	f1c9 0e20 	rsb	lr, r9, #32
 8009216:	468a      	mov	sl, r1
 8009218:	f04f 0c00 	mov.w	ip, #0
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	fa02 f209 	lsl.w	r2, r2, r9
 8009222:	ea42 020c 	orr.w	r2, r2, ip
 8009226:	f84a 2b04 	str.w	r2, [sl], #4
 800922a:	f853 2b04 	ldr.w	r2, [r3], #4
 800922e:	4298      	cmp	r0, r3
 8009230:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009234:	d8f2      	bhi.n	800921c <__lshift+0x70>
 8009236:	1b03      	subs	r3, r0, r4
 8009238:	3b15      	subs	r3, #21
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	3304      	adds	r3, #4
 8009240:	f104 0215 	add.w	r2, r4, #21
 8009244:	4290      	cmp	r0, r2
 8009246:	bf38      	it	cc
 8009248:	2304      	movcc	r3, #4
 800924a:	f841 c003 	str.w	ip, [r1, r3]
 800924e:	f1bc 0f00 	cmp.w	ip, #0
 8009252:	d001      	beq.n	8009258 <__lshift+0xac>
 8009254:	f108 0602 	add.w	r6, r8, #2
 8009258:	3e01      	subs	r6, #1
 800925a:	4638      	mov	r0, r7
 800925c:	612e      	str	r6, [r5, #16]
 800925e:	4621      	mov	r1, r4
 8009260:	f7ff fdd2 	bl	8008e08 <_Bfree>
 8009264:	4628      	mov	r0, r5
 8009266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926a:	f842 0f04 	str.w	r0, [r2, #4]!
 800926e:	3301      	adds	r3, #1
 8009270:	e7c1      	b.n	80091f6 <__lshift+0x4a>
 8009272:	3904      	subs	r1, #4
 8009274:	f853 2b04 	ldr.w	r2, [r3], #4
 8009278:	f841 2f04 	str.w	r2, [r1, #4]!
 800927c:	4298      	cmp	r0, r3
 800927e:	d8f9      	bhi.n	8009274 <__lshift+0xc8>
 8009280:	e7ea      	b.n	8009258 <__lshift+0xac>
 8009282:	bf00      	nop
 8009284:	0800a68f 	.word	0x0800a68f
 8009288:	0800a6a0 	.word	0x0800a6a0

0800928c <__mcmp>:
 800928c:	b530      	push	{r4, r5, lr}
 800928e:	6902      	ldr	r2, [r0, #16]
 8009290:	690c      	ldr	r4, [r1, #16]
 8009292:	1b12      	subs	r2, r2, r4
 8009294:	d10e      	bne.n	80092b4 <__mcmp+0x28>
 8009296:	f100 0314 	add.w	r3, r0, #20
 800929a:	3114      	adds	r1, #20
 800929c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092ac:	42a5      	cmp	r5, r4
 80092ae:	d003      	beq.n	80092b8 <__mcmp+0x2c>
 80092b0:	d305      	bcc.n	80092be <__mcmp+0x32>
 80092b2:	2201      	movs	r2, #1
 80092b4:	4610      	mov	r0, r2
 80092b6:	bd30      	pop	{r4, r5, pc}
 80092b8:	4283      	cmp	r3, r0
 80092ba:	d3f3      	bcc.n	80092a4 <__mcmp+0x18>
 80092bc:	e7fa      	b.n	80092b4 <__mcmp+0x28>
 80092be:	f04f 32ff 	mov.w	r2, #4294967295
 80092c2:	e7f7      	b.n	80092b4 <__mcmp+0x28>

080092c4 <__mdiff>:
 80092c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c8:	460c      	mov	r4, r1
 80092ca:	4606      	mov	r6, r0
 80092cc:	4611      	mov	r1, r2
 80092ce:	4620      	mov	r0, r4
 80092d0:	4690      	mov	r8, r2
 80092d2:	f7ff ffdb 	bl	800928c <__mcmp>
 80092d6:	1e05      	subs	r5, r0, #0
 80092d8:	d110      	bne.n	80092fc <__mdiff+0x38>
 80092da:	4629      	mov	r1, r5
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff fd53 	bl	8008d88 <_Balloc>
 80092e2:	b930      	cbnz	r0, 80092f2 <__mdiff+0x2e>
 80092e4:	4b3a      	ldr	r3, [pc, #232]	; (80093d0 <__mdiff+0x10c>)
 80092e6:	4602      	mov	r2, r0
 80092e8:	f240 2132 	movw	r1, #562	; 0x232
 80092ec:	4839      	ldr	r0, [pc, #228]	; (80093d4 <__mdiff+0x110>)
 80092ee:	f000 fb31 	bl	8009954 <__assert_func>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fc:	bfa4      	itt	ge
 80092fe:	4643      	movge	r3, r8
 8009300:	46a0      	movge	r8, r4
 8009302:	4630      	mov	r0, r6
 8009304:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009308:	bfa6      	itte	ge
 800930a:	461c      	movge	r4, r3
 800930c:	2500      	movge	r5, #0
 800930e:	2501      	movlt	r5, #1
 8009310:	f7ff fd3a 	bl	8008d88 <_Balloc>
 8009314:	b920      	cbnz	r0, 8009320 <__mdiff+0x5c>
 8009316:	4b2e      	ldr	r3, [pc, #184]	; (80093d0 <__mdiff+0x10c>)
 8009318:	4602      	mov	r2, r0
 800931a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800931e:	e7e5      	b.n	80092ec <__mdiff+0x28>
 8009320:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009324:	6926      	ldr	r6, [r4, #16]
 8009326:	60c5      	str	r5, [r0, #12]
 8009328:	f104 0914 	add.w	r9, r4, #20
 800932c:	f108 0514 	add.w	r5, r8, #20
 8009330:	f100 0e14 	add.w	lr, r0, #20
 8009334:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009338:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800933c:	f108 0210 	add.w	r2, r8, #16
 8009340:	46f2      	mov	sl, lr
 8009342:	2100      	movs	r1, #0
 8009344:	f859 3b04 	ldr.w	r3, [r9], #4
 8009348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800934c:	fa1f f883 	uxth.w	r8, r3
 8009350:	fa11 f18b 	uxtah	r1, r1, fp
 8009354:	0c1b      	lsrs	r3, r3, #16
 8009356:	eba1 0808 	sub.w	r8, r1, r8
 800935a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800935e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009362:	fa1f f888 	uxth.w	r8, r8
 8009366:	1419      	asrs	r1, r3, #16
 8009368:	454e      	cmp	r6, r9
 800936a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800936e:	f84a 3b04 	str.w	r3, [sl], #4
 8009372:	d8e7      	bhi.n	8009344 <__mdiff+0x80>
 8009374:	1b33      	subs	r3, r6, r4
 8009376:	3b15      	subs	r3, #21
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	3304      	adds	r3, #4
 800937e:	3415      	adds	r4, #21
 8009380:	42a6      	cmp	r6, r4
 8009382:	bf38      	it	cc
 8009384:	2304      	movcc	r3, #4
 8009386:	441d      	add	r5, r3
 8009388:	4473      	add	r3, lr
 800938a:	469e      	mov	lr, r3
 800938c:	462e      	mov	r6, r5
 800938e:	4566      	cmp	r6, ip
 8009390:	d30e      	bcc.n	80093b0 <__mdiff+0xec>
 8009392:	f10c 0203 	add.w	r2, ip, #3
 8009396:	1b52      	subs	r2, r2, r5
 8009398:	f022 0203 	bic.w	r2, r2, #3
 800939c:	3d03      	subs	r5, #3
 800939e:	45ac      	cmp	ip, r5
 80093a0:	bf38      	it	cc
 80093a2:	2200      	movcc	r2, #0
 80093a4:	441a      	add	r2, r3
 80093a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093aa:	b17b      	cbz	r3, 80093cc <__mdiff+0x108>
 80093ac:	6107      	str	r7, [r0, #16]
 80093ae:	e7a3      	b.n	80092f8 <__mdiff+0x34>
 80093b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80093b4:	fa11 f288 	uxtah	r2, r1, r8
 80093b8:	1414      	asrs	r4, r2, #16
 80093ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093be:	b292      	uxth	r2, r2
 80093c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093c4:	f84e 2b04 	str.w	r2, [lr], #4
 80093c8:	1421      	asrs	r1, r4, #16
 80093ca:	e7e0      	b.n	800938e <__mdiff+0xca>
 80093cc:	3f01      	subs	r7, #1
 80093ce:	e7ea      	b.n	80093a6 <__mdiff+0xe2>
 80093d0:	0800a68f 	.word	0x0800a68f
 80093d4:	0800a6a0 	.word	0x0800a6a0

080093d8 <__d2b>:
 80093d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093dc:	4689      	mov	r9, r1
 80093de:	2101      	movs	r1, #1
 80093e0:	ec57 6b10 	vmov	r6, r7, d0
 80093e4:	4690      	mov	r8, r2
 80093e6:	f7ff fccf 	bl	8008d88 <_Balloc>
 80093ea:	4604      	mov	r4, r0
 80093ec:	b930      	cbnz	r0, 80093fc <__d2b+0x24>
 80093ee:	4602      	mov	r2, r0
 80093f0:	4b25      	ldr	r3, [pc, #148]	; (8009488 <__d2b+0xb0>)
 80093f2:	4826      	ldr	r0, [pc, #152]	; (800948c <__d2b+0xb4>)
 80093f4:	f240 310a 	movw	r1, #778	; 0x30a
 80093f8:	f000 faac 	bl	8009954 <__assert_func>
 80093fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009400:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009404:	bb35      	cbnz	r5, 8009454 <__d2b+0x7c>
 8009406:	2e00      	cmp	r6, #0
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	d028      	beq.n	800945e <__d2b+0x86>
 800940c:	4668      	mov	r0, sp
 800940e:	9600      	str	r6, [sp, #0]
 8009410:	f7ff fd82 	bl	8008f18 <__lo0bits>
 8009414:	9900      	ldr	r1, [sp, #0]
 8009416:	b300      	cbz	r0, 800945a <__d2b+0x82>
 8009418:	9a01      	ldr	r2, [sp, #4]
 800941a:	f1c0 0320 	rsb	r3, r0, #32
 800941e:	fa02 f303 	lsl.w	r3, r2, r3
 8009422:	430b      	orrs	r3, r1
 8009424:	40c2      	lsrs	r2, r0
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	9201      	str	r2, [sp, #4]
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	61a3      	str	r3, [r4, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	bf14      	ite	ne
 8009432:	2202      	movne	r2, #2
 8009434:	2201      	moveq	r2, #1
 8009436:	6122      	str	r2, [r4, #16]
 8009438:	b1d5      	cbz	r5, 8009470 <__d2b+0x98>
 800943a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800943e:	4405      	add	r5, r0
 8009440:	f8c9 5000 	str.w	r5, [r9]
 8009444:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009448:	f8c8 0000 	str.w	r0, [r8]
 800944c:	4620      	mov	r0, r4
 800944e:	b003      	add	sp, #12
 8009450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009458:	e7d5      	b.n	8009406 <__d2b+0x2e>
 800945a:	6161      	str	r1, [r4, #20]
 800945c:	e7e5      	b.n	800942a <__d2b+0x52>
 800945e:	a801      	add	r0, sp, #4
 8009460:	f7ff fd5a 	bl	8008f18 <__lo0bits>
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	6163      	str	r3, [r4, #20]
 8009468:	2201      	movs	r2, #1
 800946a:	6122      	str	r2, [r4, #16]
 800946c:	3020      	adds	r0, #32
 800946e:	e7e3      	b.n	8009438 <__d2b+0x60>
 8009470:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009474:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009478:	f8c9 0000 	str.w	r0, [r9]
 800947c:	6918      	ldr	r0, [r3, #16]
 800947e:	f7ff fd2b 	bl	8008ed8 <__hi0bits>
 8009482:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009486:	e7df      	b.n	8009448 <__d2b+0x70>
 8009488:	0800a68f 	.word	0x0800a68f
 800948c:	0800a6a0 	.word	0x0800a6a0

08009490 <_calloc_r>:
 8009490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009492:	fba1 2402 	umull	r2, r4, r1, r2
 8009496:	b94c      	cbnz	r4, 80094ac <_calloc_r+0x1c>
 8009498:	4611      	mov	r1, r2
 800949a:	9201      	str	r2, [sp, #4]
 800949c:	f000 f87a 	bl	8009594 <_malloc_r>
 80094a0:	9a01      	ldr	r2, [sp, #4]
 80094a2:	4605      	mov	r5, r0
 80094a4:	b930      	cbnz	r0, 80094b4 <_calloc_r+0x24>
 80094a6:	4628      	mov	r0, r5
 80094a8:	b003      	add	sp, #12
 80094aa:	bd30      	pop	{r4, r5, pc}
 80094ac:	220c      	movs	r2, #12
 80094ae:	6002      	str	r2, [r0, #0]
 80094b0:	2500      	movs	r5, #0
 80094b2:	e7f8      	b.n	80094a6 <_calloc_r+0x16>
 80094b4:	4621      	mov	r1, r4
 80094b6:	f7fe f93f 	bl	8007738 <memset>
 80094ba:	e7f4      	b.n	80094a6 <_calloc_r+0x16>

080094bc <_free_r>:
 80094bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094be:	2900      	cmp	r1, #0
 80094c0:	d044      	beq.n	800954c <_free_r+0x90>
 80094c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c6:	9001      	str	r0, [sp, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f1a1 0404 	sub.w	r4, r1, #4
 80094ce:	bfb8      	it	lt
 80094d0:	18e4      	addlt	r4, r4, r3
 80094d2:	f000 fa9b 	bl	8009a0c <__malloc_lock>
 80094d6:	4a1e      	ldr	r2, [pc, #120]	; (8009550 <_free_r+0x94>)
 80094d8:	9801      	ldr	r0, [sp, #4]
 80094da:	6813      	ldr	r3, [r2, #0]
 80094dc:	b933      	cbnz	r3, 80094ec <_free_r+0x30>
 80094de:	6063      	str	r3, [r4, #4]
 80094e0:	6014      	str	r4, [r2, #0]
 80094e2:	b003      	add	sp, #12
 80094e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094e8:	f000 ba96 	b.w	8009a18 <__malloc_unlock>
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	d908      	bls.n	8009502 <_free_r+0x46>
 80094f0:	6825      	ldr	r5, [r4, #0]
 80094f2:	1961      	adds	r1, r4, r5
 80094f4:	428b      	cmp	r3, r1
 80094f6:	bf01      	itttt	eq
 80094f8:	6819      	ldreq	r1, [r3, #0]
 80094fa:	685b      	ldreq	r3, [r3, #4]
 80094fc:	1949      	addeq	r1, r1, r5
 80094fe:	6021      	streq	r1, [r4, #0]
 8009500:	e7ed      	b.n	80094de <_free_r+0x22>
 8009502:	461a      	mov	r2, r3
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	b10b      	cbz	r3, 800950c <_free_r+0x50>
 8009508:	42a3      	cmp	r3, r4
 800950a:	d9fa      	bls.n	8009502 <_free_r+0x46>
 800950c:	6811      	ldr	r1, [r2, #0]
 800950e:	1855      	adds	r5, r2, r1
 8009510:	42a5      	cmp	r5, r4
 8009512:	d10b      	bne.n	800952c <_free_r+0x70>
 8009514:	6824      	ldr	r4, [r4, #0]
 8009516:	4421      	add	r1, r4
 8009518:	1854      	adds	r4, r2, r1
 800951a:	42a3      	cmp	r3, r4
 800951c:	6011      	str	r1, [r2, #0]
 800951e:	d1e0      	bne.n	80094e2 <_free_r+0x26>
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	6053      	str	r3, [r2, #4]
 8009526:	4421      	add	r1, r4
 8009528:	6011      	str	r1, [r2, #0]
 800952a:	e7da      	b.n	80094e2 <_free_r+0x26>
 800952c:	d902      	bls.n	8009534 <_free_r+0x78>
 800952e:	230c      	movs	r3, #12
 8009530:	6003      	str	r3, [r0, #0]
 8009532:	e7d6      	b.n	80094e2 <_free_r+0x26>
 8009534:	6825      	ldr	r5, [r4, #0]
 8009536:	1961      	adds	r1, r4, r5
 8009538:	428b      	cmp	r3, r1
 800953a:	bf04      	itt	eq
 800953c:	6819      	ldreq	r1, [r3, #0]
 800953e:	685b      	ldreq	r3, [r3, #4]
 8009540:	6063      	str	r3, [r4, #4]
 8009542:	bf04      	itt	eq
 8009544:	1949      	addeq	r1, r1, r5
 8009546:	6021      	streq	r1, [r4, #0]
 8009548:	6054      	str	r4, [r2, #4]
 800954a:	e7ca      	b.n	80094e2 <_free_r+0x26>
 800954c:	b003      	add	sp, #12
 800954e:	bd30      	pop	{r4, r5, pc}
 8009550:	20000804 	.word	0x20000804

08009554 <sbrk_aligned>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4e0e      	ldr	r6, [pc, #56]	; (8009590 <sbrk_aligned+0x3c>)
 8009558:	460c      	mov	r4, r1
 800955a:	6831      	ldr	r1, [r6, #0]
 800955c:	4605      	mov	r5, r0
 800955e:	b911      	cbnz	r1, 8009566 <sbrk_aligned+0x12>
 8009560:	f000 f9e8 	bl	8009934 <_sbrk_r>
 8009564:	6030      	str	r0, [r6, #0]
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f000 f9e3 	bl	8009934 <_sbrk_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d00a      	beq.n	8009588 <sbrk_aligned+0x34>
 8009572:	1cc4      	adds	r4, r0, #3
 8009574:	f024 0403 	bic.w	r4, r4, #3
 8009578:	42a0      	cmp	r0, r4
 800957a:	d007      	beq.n	800958c <sbrk_aligned+0x38>
 800957c:	1a21      	subs	r1, r4, r0
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f9d8 	bl	8009934 <_sbrk_r>
 8009584:	3001      	adds	r0, #1
 8009586:	d101      	bne.n	800958c <sbrk_aligned+0x38>
 8009588:	f04f 34ff 	mov.w	r4, #4294967295
 800958c:	4620      	mov	r0, r4
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	20000808 	.word	0x20000808

08009594 <_malloc_r>:
 8009594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009598:	1ccd      	adds	r5, r1, #3
 800959a:	f025 0503 	bic.w	r5, r5, #3
 800959e:	3508      	adds	r5, #8
 80095a0:	2d0c      	cmp	r5, #12
 80095a2:	bf38      	it	cc
 80095a4:	250c      	movcc	r5, #12
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	4607      	mov	r7, r0
 80095aa:	db01      	blt.n	80095b0 <_malloc_r+0x1c>
 80095ac:	42a9      	cmp	r1, r5
 80095ae:	d905      	bls.n	80095bc <_malloc_r+0x28>
 80095b0:	230c      	movs	r3, #12
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	2600      	movs	r6, #0
 80095b6:	4630      	mov	r0, r6
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	4e2e      	ldr	r6, [pc, #184]	; (8009678 <_malloc_r+0xe4>)
 80095be:	f000 fa25 	bl	8009a0c <__malloc_lock>
 80095c2:	6833      	ldr	r3, [r6, #0]
 80095c4:	461c      	mov	r4, r3
 80095c6:	bb34      	cbnz	r4, 8009616 <_malloc_r+0x82>
 80095c8:	4629      	mov	r1, r5
 80095ca:	4638      	mov	r0, r7
 80095cc:	f7ff ffc2 	bl	8009554 <sbrk_aligned>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	4604      	mov	r4, r0
 80095d4:	d14d      	bne.n	8009672 <_malloc_r+0xde>
 80095d6:	6834      	ldr	r4, [r6, #0]
 80095d8:	4626      	mov	r6, r4
 80095da:	2e00      	cmp	r6, #0
 80095dc:	d140      	bne.n	8009660 <_malloc_r+0xcc>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	4631      	mov	r1, r6
 80095e2:	4638      	mov	r0, r7
 80095e4:	eb04 0803 	add.w	r8, r4, r3
 80095e8:	f000 f9a4 	bl	8009934 <_sbrk_r>
 80095ec:	4580      	cmp	r8, r0
 80095ee:	d13a      	bne.n	8009666 <_malloc_r+0xd2>
 80095f0:	6821      	ldr	r1, [r4, #0]
 80095f2:	3503      	adds	r5, #3
 80095f4:	1a6d      	subs	r5, r5, r1
 80095f6:	f025 0503 	bic.w	r5, r5, #3
 80095fa:	3508      	adds	r5, #8
 80095fc:	2d0c      	cmp	r5, #12
 80095fe:	bf38      	it	cc
 8009600:	250c      	movcc	r5, #12
 8009602:	4629      	mov	r1, r5
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ffa5 	bl	8009554 <sbrk_aligned>
 800960a:	3001      	adds	r0, #1
 800960c:	d02b      	beq.n	8009666 <_malloc_r+0xd2>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	442b      	add	r3, r5
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	e00e      	b.n	8009634 <_malloc_r+0xa0>
 8009616:	6822      	ldr	r2, [r4, #0]
 8009618:	1b52      	subs	r2, r2, r5
 800961a:	d41e      	bmi.n	800965a <_malloc_r+0xc6>
 800961c:	2a0b      	cmp	r2, #11
 800961e:	d916      	bls.n	800964e <_malloc_r+0xba>
 8009620:	1961      	adds	r1, r4, r5
 8009622:	42a3      	cmp	r3, r4
 8009624:	6025      	str	r5, [r4, #0]
 8009626:	bf18      	it	ne
 8009628:	6059      	strne	r1, [r3, #4]
 800962a:	6863      	ldr	r3, [r4, #4]
 800962c:	bf08      	it	eq
 800962e:	6031      	streq	r1, [r6, #0]
 8009630:	5162      	str	r2, [r4, r5]
 8009632:	604b      	str	r3, [r1, #4]
 8009634:	4638      	mov	r0, r7
 8009636:	f104 060b 	add.w	r6, r4, #11
 800963a:	f000 f9ed 	bl	8009a18 <__malloc_unlock>
 800963e:	f026 0607 	bic.w	r6, r6, #7
 8009642:	1d23      	adds	r3, r4, #4
 8009644:	1af2      	subs	r2, r6, r3
 8009646:	d0b6      	beq.n	80095b6 <_malloc_r+0x22>
 8009648:	1b9b      	subs	r3, r3, r6
 800964a:	50a3      	str	r3, [r4, r2]
 800964c:	e7b3      	b.n	80095b6 <_malloc_r+0x22>
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	42a3      	cmp	r3, r4
 8009652:	bf0c      	ite	eq
 8009654:	6032      	streq	r2, [r6, #0]
 8009656:	605a      	strne	r2, [r3, #4]
 8009658:	e7ec      	b.n	8009634 <_malloc_r+0xa0>
 800965a:	4623      	mov	r3, r4
 800965c:	6864      	ldr	r4, [r4, #4]
 800965e:	e7b2      	b.n	80095c6 <_malloc_r+0x32>
 8009660:	4634      	mov	r4, r6
 8009662:	6876      	ldr	r6, [r6, #4]
 8009664:	e7b9      	b.n	80095da <_malloc_r+0x46>
 8009666:	230c      	movs	r3, #12
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	4638      	mov	r0, r7
 800966c:	f000 f9d4 	bl	8009a18 <__malloc_unlock>
 8009670:	e7a1      	b.n	80095b6 <_malloc_r+0x22>
 8009672:	6025      	str	r5, [r4, #0]
 8009674:	e7de      	b.n	8009634 <_malloc_r+0xa0>
 8009676:	bf00      	nop
 8009678:	20000804 	.word	0x20000804

0800967c <__ssputs_r>:
 800967c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	688e      	ldr	r6, [r1, #8]
 8009682:	429e      	cmp	r6, r3
 8009684:	4682      	mov	sl, r0
 8009686:	460c      	mov	r4, r1
 8009688:	4690      	mov	r8, r2
 800968a:	461f      	mov	r7, r3
 800968c:	d838      	bhi.n	8009700 <__ssputs_r+0x84>
 800968e:	898a      	ldrh	r2, [r1, #12]
 8009690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009694:	d032      	beq.n	80096fc <__ssputs_r+0x80>
 8009696:	6825      	ldr	r5, [r4, #0]
 8009698:	6909      	ldr	r1, [r1, #16]
 800969a:	eba5 0901 	sub.w	r9, r5, r1
 800969e:	6965      	ldr	r5, [r4, #20]
 80096a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096a8:	3301      	adds	r3, #1
 80096aa:	444b      	add	r3, r9
 80096ac:	106d      	asrs	r5, r5, #1
 80096ae:	429d      	cmp	r5, r3
 80096b0:	bf38      	it	cc
 80096b2:	461d      	movcc	r5, r3
 80096b4:	0553      	lsls	r3, r2, #21
 80096b6:	d531      	bpl.n	800971c <__ssputs_r+0xa0>
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7ff ff6b 	bl	8009594 <_malloc_r>
 80096be:	4606      	mov	r6, r0
 80096c0:	b950      	cbnz	r0, 80096d8 <__ssputs_r+0x5c>
 80096c2:	230c      	movs	r3, #12
 80096c4:	f8ca 3000 	str.w	r3, [sl]
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d8:	6921      	ldr	r1, [r4, #16]
 80096da:	464a      	mov	r2, r9
 80096dc:	f7ff fb46 	bl	8008d6c <memcpy>
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	6126      	str	r6, [r4, #16]
 80096ee:	6165      	str	r5, [r4, #20]
 80096f0:	444e      	add	r6, r9
 80096f2:	eba5 0509 	sub.w	r5, r5, r9
 80096f6:	6026      	str	r6, [r4, #0]
 80096f8:	60a5      	str	r5, [r4, #8]
 80096fa:	463e      	mov	r6, r7
 80096fc:	42be      	cmp	r6, r7
 80096fe:	d900      	bls.n	8009702 <__ssputs_r+0x86>
 8009700:	463e      	mov	r6, r7
 8009702:	6820      	ldr	r0, [r4, #0]
 8009704:	4632      	mov	r2, r6
 8009706:	4641      	mov	r1, r8
 8009708:	f000 f966 	bl	80099d8 <memmove>
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	1b9b      	subs	r3, r3, r6
 8009710:	60a3      	str	r3, [r4, #8]
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	4433      	add	r3, r6
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	2000      	movs	r0, #0
 800971a:	e7db      	b.n	80096d4 <__ssputs_r+0x58>
 800971c:	462a      	mov	r2, r5
 800971e:	f000 f981 	bl	8009a24 <_realloc_r>
 8009722:	4606      	mov	r6, r0
 8009724:	2800      	cmp	r0, #0
 8009726:	d1e1      	bne.n	80096ec <__ssputs_r+0x70>
 8009728:	6921      	ldr	r1, [r4, #16]
 800972a:	4650      	mov	r0, sl
 800972c:	f7ff fec6 	bl	80094bc <_free_r>
 8009730:	e7c7      	b.n	80096c2 <__ssputs_r+0x46>
	...

08009734 <_svfiprintf_r>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	4698      	mov	r8, r3
 800973a:	898b      	ldrh	r3, [r1, #12]
 800973c:	061b      	lsls	r3, r3, #24
 800973e:	b09d      	sub	sp, #116	; 0x74
 8009740:	4607      	mov	r7, r0
 8009742:	460d      	mov	r5, r1
 8009744:	4614      	mov	r4, r2
 8009746:	d50e      	bpl.n	8009766 <_svfiprintf_r+0x32>
 8009748:	690b      	ldr	r3, [r1, #16]
 800974a:	b963      	cbnz	r3, 8009766 <_svfiprintf_r+0x32>
 800974c:	2140      	movs	r1, #64	; 0x40
 800974e:	f7ff ff21 	bl	8009594 <_malloc_r>
 8009752:	6028      	str	r0, [r5, #0]
 8009754:	6128      	str	r0, [r5, #16]
 8009756:	b920      	cbnz	r0, 8009762 <_svfiprintf_r+0x2e>
 8009758:	230c      	movs	r3, #12
 800975a:	603b      	str	r3, [r7, #0]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e0d1      	b.n	8009906 <_svfiprintf_r+0x1d2>
 8009762:	2340      	movs	r3, #64	; 0x40
 8009764:	616b      	str	r3, [r5, #20]
 8009766:	2300      	movs	r3, #0
 8009768:	9309      	str	r3, [sp, #36]	; 0x24
 800976a:	2320      	movs	r3, #32
 800976c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009770:	f8cd 800c 	str.w	r8, [sp, #12]
 8009774:	2330      	movs	r3, #48	; 0x30
 8009776:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009920 <_svfiprintf_r+0x1ec>
 800977a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800977e:	f04f 0901 	mov.w	r9, #1
 8009782:	4623      	mov	r3, r4
 8009784:	469a      	mov	sl, r3
 8009786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800978a:	b10a      	cbz	r2, 8009790 <_svfiprintf_r+0x5c>
 800978c:	2a25      	cmp	r2, #37	; 0x25
 800978e:	d1f9      	bne.n	8009784 <_svfiprintf_r+0x50>
 8009790:	ebba 0b04 	subs.w	fp, sl, r4
 8009794:	d00b      	beq.n	80097ae <_svfiprintf_r+0x7a>
 8009796:	465b      	mov	r3, fp
 8009798:	4622      	mov	r2, r4
 800979a:	4629      	mov	r1, r5
 800979c:	4638      	mov	r0, r7
 800979e:	f7ff ff6d 	bl	800967c <__ssputs_r>
 80097a2:	3001      	adds	r0, #1
 80097a4:	f000 80aa 	beq.w	80098fc <_svfiprintf_r+0x1c8>
 80097a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097aa:	445a      	add	r2, fp
 80097ac:	9209      	str	r2, [sp, #36]	; 0x24
 80097ae:	f89a 3000 	ldrb.w	r3, [sl]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80a2 	beq.w	80098fc <_svfiprintf_r+0x1c8>
 80097b8:	2300      	movs	r3, #0
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295
 80097be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c2:	f10a 0a01 	add.w	sl, sl, #1
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	9307      	str	r3, [sp, #28]
 80097ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ce:	931a      	str	r3, [sp, #104]	; 0x68
 80097d0:	4654      	mov	r4, sl
 80097d2:	2205      	movs	r2, #5
 80097d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d8:	4851      	ldr	r0, [pc, #324]	; (8009920 <_svfiprintf_r+0x1ec>)
 80097da:	f7f6 fd19 	bl	8000210 <memchr>
 80097de:	9a04      	ldr	r2, [sp, #16]
 80097e0:	b9d8      	cbnz	r0, 800981a <_svfiprintf_r+0xe6>
 80097e2:	06d0      	lsls	r0, r2, #27
 80097e4:	bf44      	itt	mi
 80097e6:	2320      	movmi	r3, #32
 80097e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ec:	0711      	lsls	r1, r2, #28
 80097ee:	bf44      	itt	mi
 80097f0:	232b      	movmi	r3, #43	; 0x2b
 80097f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f6:	f89a 3000 	ldrb.w	r3, [sl]
 80097fa:	2b2a      	cmp	r3, #42	; 0x2a
 80097fc:	d015      	beq.n	800982a <_svfiprintf_r+0xf6>
 80097fe:	9a07      	ldr	r2, [sp, #28]
 8009800:	4654      	mov	r4, sl
 8009802:	2000      	movs	r0, #0
 8009804:	f04f 0c0a 	mov.w	ip, #10
 8009808:	4621      	mov	r1, r4
 800980a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800980e:	3b30      	subs	r3, #48	; 0x30
 8009810:	2b09      	cmp	r3, #9
 8009812:	d94e      	bls.n	80098b2 <_svfiprintf_r+0x17e>
 8009814:	b1b0      	cbz	r0, 8009844 <_svfiprintf_r+0x110>
 8009816:	9207      	str	r2, [sp, #28]
 8009818:	e014      	b.n	8009844 <_svfiprintf_r+0x110>
 800981a:	eba0 0308 	sub.w	r3, r0, r8
 800981e:	fa09 f303 	lsl.w	r3, r9, r3
 8009822:	4313      	orrs	r3, r2
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	46a2      	mov	sl, r4
 8009828:	e7d2      	b.n	80097d0 <_svfiprintf_r+0x9c>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	1d19      	adds	r1, r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	9103      	str	r1, [sp, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfbb      	ittet	lt
 8009836:	425b      	neglt	r3, r3
 8009838:	f042 0202 	orrlt.w	r2, r2, #2
 800983c:	9307      	strge	r3, [sp, #28]
 800983e:	9307      	strlt	r3, [sp, #28]
 8009840:	bfb8      	it	lt
 8009842:	9204      	strlt	r2, [sp, #16]
 8009844:	7823      	ldrb	r3, [r4, #0]
 8009846:	2b2e      	cmp	r3, #46	; 0x2e
 8009848:	d10c      	bne.n	8009864 <_svfiprintf_r+0x130>
 800984a:	7863      	ldrb	r3, [r4, #1]
 800984c:	2b2a      	cmp	r3, #42	; 0x2a
 800984e:	d135      	bne.n	80098bc <_svfiprintf_r+0x188>
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	9203      	str	r2, [sp, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	bfb8      	it	lt
 800985c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009860:	3402      	adds	r4, #2
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009930 <_svfiprintf_r+0x1fc>
 8009868:	7821      	ldrb	r1, [r4, #0]
 800986a:	2203      	movs	r2, #3
 800986c:	4650      	mov	r0, sl
 800986e:	f7f6 fccf 	bl	8000210 <memchr>
 8009872:	b140      	cbz	r0, 8009886 <_svfiprintf_r+0x152>
 8009874:	2340      	movs	r3, #64	; 0x40
 8009876:	eba0 000a 	sub.w	r0, r0, sl
 800987a:	fa03 f000 	lsl.w	r0, r3, r0
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	4303      	orrs	r3, r0
 8009882:	3401      	adds	r4, #1
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988a:	4826      	ldr	r0, [pc, #152]	; (8009924 <_svfiprintf_r+0x1f0>)
 800988c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009890:	2206      	movs	r2, #6
 8009892:	f7f6 fcbd 	bl	8000210 <memchr>
 8009896:	2800      	cmp	r0, #0
 8009898:	d038      	beq.n	800990c <_svfiprintf_r+0x1d8>
 800989a:	4b23      	ldr	r3, [pc, #140]	; (8009928 <_svfiprintf_r+0x1f4>)
 800989c:	bb1b      	cbnz	r3, 80098e6 <_svfiprintf_r+0x1b2>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	3307      	adds	r3, #7
 80098a2:	f023 0307 	bic.w	r3, r3, #7
 80098a6:	3308      	adds	r3, #8
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ac:	4433      	add	r3, r6
 80098ae:	9309      	str	r3, [sp, #36]	; 0x24
 80098b0:	e767      	b.n	8009782 <_svfiprintf_r+0x4e>
 80098b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80098b6:	460c      	mov	r4, r1
 80098b8:	2001      	movs	r0, #1
 80098ba:	e7a5      	b.n	8009808 <_svfiprintf_r+0xd4>
 80098bc:	2300      	movs	r3, #0
 80098be:	3401      	adds	r4, #1
 80098c0:	9305      	str	r3, [sp, #20]
 80098c2:	4619      	mov	r1, r3
 80098c4:	f04f 0c0a 	mov.w	ip, #10
 80098c8:	4620      	mov	r0, r4
 80098ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ce:	3a30      	subs	r2, #48	; 0x30
 80098d0:	2a09      	cmp	r2, #9
 80098d2:	d903      	bls.n	80098dc <_svfiprintf_r+0x1a8>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0c5      	beq.n	8009864 <_svfiprintf_r+0x130>
 80098d8:	9105      	str	r1, [sp, #20]
 80098da:	e7c3      	b.n	8009864 <_svfiprintf_r+0x130>
 80098dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80098e0:	4604      	mov	r4, r0
 80098e2:	2301      	movs	r3, #1
 80098e4:	e7f0      	b.n	80098c8 <_svfiprintf_r+0x194>
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462a      	mov	r2, r5
 80098ec:	4b0f      	ldr	r3, [pc, #60]	; (800992c <_svfiprintf_r+0x1f8>)
 80098ee:	a904      	add	r1, sp, #16
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7fd ffc9 	bl	8007888 <_printf_float>
 80098f6:	1c42      	adds	r2, r0, #1
 80098f8:	4606      	mov	r6, r0
 80098fa:	d1d6      	bne.n	80098aa <_svfiprintf_r+0x176>
 80098fc:	89ab      	ldrh	r3, [r5, #12]
 80098fe:	065b      	lsls	r3, r3, #25
 8009900:	f53f af2c 	bmi.w	800975c <_svfiprintf_r+0x28>
 8009904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009906:	b01d      	add	sp, #116	; 0x74
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	ab03      	add	r3, sp, #12
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	462a      	mov	r2, r5
 8009912:	4b06      	ldr	r3, [pc, #24]	; (800992c <_svfiprintf_r+0x1f8>)
 8009914:	a904      	add	r1, sp, #16
 8009916:	4638      	mov	r0, r7
 8009918:	f7fe fa5a 	bl	8007dd0 <_printf_i>
 800991c:	e7eb      	b.n	80098f6 <_svfiprintf_r+0x1c2>
 800991e:	bf00      	nop
 8009920:	0800a7fc 	.word	0x0800a7fc
 8009924:	0800a806 	.word	0x0800a806
 8009928:	08007889 	.word	0x08007889
 800992c:	0800967d 	.word	0x0800967d
 8009930:	0800a802 	.word	0x0800a802

08009934 <_sbrk_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4d06      	ldr	r5, [pc, #24]	; (8009950 <_sbrk_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7f7 ffb8 	bl	80018b4 <_sbrk>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_sbrk_r+0x1a>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_sbrk_r+0x1a>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	2000080c 	.word	0x2000080c

08009954 <__assert_func>:
 8009954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009956:	4614      	mov	r4, r2
 8009958:	461a      	mov	r2, r3
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <__assert_func+0x2c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4605      	mov	r5, r0
 8009960:	68d8      	ldr	r0, [r3, #12]
 8009962:	b14c      	cbz	r4, 8009978 <__assert_func+0x24>
 8009964:	4b07      	ldr	r3, [pc, #28]	; (8009984 <__assert_func+0x30>)
 8009966:	9100      	str	r1, [sp, #0]
 8009968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800996c:	4906      	ldr	r1, [pc, #24]	; (8009988 <__assert_func+0x34>)
 800996e:	462b      	mov	r3, r5
 8009970:	f000 f80e 	bl	8009990 <fiprintf>
 8009974:	f000 faac 	bl	8009ed0 <abort>
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <__assert_func+0x38>)
 800997a:	461c      	mov	r4, r3
 800997c:	e7f3      	b.n	8009966 <__assert_func+0x12>
 800997e:	bf00      	nop
 8009980:	2000000c 	.word	0x2000000c
 8009984:	0800a80d 	.word	0x0800a80d
 8009988:	0800a81a 	.word	0x0800a81a
 800998c:	0800a848 	.word	0x0800a848

08009990 <fiprintf>:
 8009990:	b40e      	push	{r1, r2, r3}
 8009992:	b503      	push	{r0, r1, lr}
 8009994:	4601      	mov	r1, r0
 8009996:	ab03      	add	r3, sp, #12
 8009998:	4805      	ldr	r0, [pc, #20]	; (80099b0 <fiprintf+0x20>)
 800999a:	f853 2b04 	ldr.w	r2, [r3], #4
 800999e:	6800      	ldr	r0, [r0, #0]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	f000 f897 	bl	8009ad4 <_vfiprintf_r>
 80099a6:	b002      	add	sp, #8
 80099a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ac:	b003      	add	sp, #12
 80099ae:	4770      	bx	lr
 80099b0:	2000000c 	.word	0x2000000c

080099b4 <__ascii_mbtowc>:
 80099b4:	b082      	sub	sp, #8
 80099b6:	b901      	cbnz	r1, 80099ba <__ascii_mbtowc+0x6>
 80099b8:	a901      	add	r1, sp, #4
 80099ba:	b142      	cbz	r2, 80099ce <__ascii_mbtowc+0x1a>
 80099bc:	b14b      	cbz	r3, 80099d2 <__ascii_mbtowc+0x1e>
 80099be:	7813      	ldrb	r3, [r2, #0]
 80099c0:	600b      	str	r3, [r1, #0]
 80099c2:	7812      	ldrb	r2, [r2, #0]
 80099c4:	1e10      	subs	r0, r2, #0
 80099c6:	bf18      	it	ne
 80099c8:	2001      	movne	r0, #1
 80099ca:	b002      	add	sp, #8
 80099cc:	4770      	bx	lr
 80099ce:	4610      	mov	r0, r2
 80099d0:	e7fb      	b.n	80099ca <__ascii_mbtowc+0x16>
 80099d2:	f06f 0001 	mvn.w	r0, #1
 80099d6:	e7f8      	b.n	80099ca <__ascii_mbtowc+0x16>

080099d8 <memmove>:
 80099d8:	4288      	cmp	r0, r1
 80099da:	b510      	push	{r4, lr}
 80099dc:	eb01 0402 	add.w	r4, r1, r2
 80099e0:	d902      	bls.n	80099e8 <memmove+0x10>
 80099e2:	4284      	cmp	r4, r0
 80099e4:	4623      	mov	r3, r4
 80099e6:	d807      	bhi.n	80099f8 <memmove+0x20>
 80099e8:	1e43      	subs	r3, r0, #1
 80099ea:	42a1      	cmp	r1, r4
 80099ec:	d008      	beq.n	8009a00 <memmove+0x28>
 80099ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099f6:	e7f8      	b.n	80099ea <memmove+0x12>
 80099f8:	4402      	add	r2, r0
 80099fa:	4601      	mov	r1, r0
 80099fc:	428a      	cmp	r2, r1
 80099fe:	d100      	bne.n	8009a02 <memmove+0x2a>
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a0a:	e7f7      	b.n	80099fc <memmove+0x24>

08009a0c <__malloc_lock>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__malloc_lock+0x8>)
 8009a0e:	f000 bc1f 	b.w	800a250 <__retarget_lock_acquire_recursive>
 8009a12:	bf00      	nop
 8009a14:	20000810 	.word	0x20000810

08009a18 <__malloc_unlock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__malloc_unlock+0x8>)
 8009a1a:	f000 bc1a 	b.w	800a252 <__retarget_lock_release_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20000810 	.word	0x20000810

08009a24 <_realloc_r>:
 8009a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a28:	4680      	mov	r8, r0
 8009a2a:	4614      	mov	r4, r2
 8009a2c:	460e      	mov	r6, r1
 8009a2e:	b921      	cbnz	r1, 8009a3a <_realloc_r+0x16>
 8009a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	4611      	mov	r1, r2
 8009a36:	f7ff bdad 	b.w	8009594 <_malloc_r>
 8009a3a:	b92a      	cbnz	r2, 8009a48 <_realloc_r+0x24>
 8009a3c:	f7ff fd3e 	bl	80094bc <_free_r>
 8009a40:	4625      	mov	r5, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a48:	f000 fc6a 	bl	800a320 <_malloc_usable_size_r>
 8009a4c:	4284      	cmp	r4, r0
 8009a4e:	4607      	mov	r7, r0
 8009a50:	d802      	bhi.n	8009a58 <_realloc_r+0x34>
 8009a52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a56:	d812      	bhi.n	8009a7e <_realloc_r+0x5a>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	f7ff fd9a 	bl	8009594 <_malloc_r>
 8009a60:	4605      	mov	r5, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d0ed      	beq.n	8009a42 <_realloc_r+0x1e>
 8009a66:	42bc      	cmp	r4, r7
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	bf28      	it	cs
 8009a6e:	463a      	movcs	r2, r7
 8009a70:	f7ff f97c 	bl	8008d6c <memcpy>
 8009a74:	4631      	mov	r1, r6
 8009a76:	4640      	mov	r0, r8
 8009a78:	f7ff fd20 	bl	80094bc <_free_r>
 8009a7c:	e7e1      	b.n	8009a42 <_realloc_r+0x1e>
 8009a7e:	4635      	mov	r5, r6
 8009a80:	e7df      	b.n	8009a42 <_realloc_r+0x1e>

08009a82 <__sfputc_r>:
 8009a82:	6893      	ldr	r3, [r2, #8]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	b410      	push	{r4}
 8009a8a:	6093      	str	r3, [r2, #8]
 8009a8c:	da08      	bge.n	8009aa0 <__sfputc_r+0x1e>
 8009a8e:	6994      	ldr	r4, [r2, #24]
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	db01      	blt.n	8009a98 <__sfputc_r+0x16>
 8009a94:	290a      	cmp	r1, #10
 8009a96:	d103      	bne.n	8009aa0 <__sfputc_r+0x1e>
 8009a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a9c:	f000 b94a 	b.w	8009d34 <__swbuf_r>
 8009aa0:	6813      	ldr	r3, [r2, #0]
 8009aa2:	1c58      	adds	r0, r3, #1
 8009aa4:	6010      	str	r0, [r2, #0]
 8009aa6:	7019      	strb	r1, [r3, #0]
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <__sfputs_r>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	460f      	mov	r7, r1
 8009ab6:	4614      	mov	r4, r2
 8009ab8:	18d5      	adds	r5, r2, r3
 8009aba:	42ac      	cmp	r4, r5
 8009abc:	d101      	bne.n	8009ac2 <__sfputs_r+0x12>
 8009abe:	2000      	movs	r0, #0
 8009ac0:	e007      	b.n	8009ad2 <__sfputs_r+0x22>
 8009ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac6:	463a      	mov	r2, r7
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff ffda 	bl	8009a82 <__sfputc_r>
 8009ace:	1c43      	adds	r3, r0, #1
 8009ad0:	d1f3      	bne.n	8009aba <__sfputs_r+0xa>
 8009ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ad4 <_vfiprintf_r>:
 8009ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad8:	460d      	mov	r5, r1
 8009ada:	b09d      	sub	sp, #116	; 0x74
 8009adc:	4614      	mov	r4, r2
 8009ade:	4698      	mov	r8, r3
 8009ae0:	4606      	mov	r6, r0
 8009ae2:	b118      	cbz	r0, 8009aec <_vfiprintf_r+0x18>
 8009ae4:	6983      	ldr	r3, [r0, #24]
 8009ae6:	b90b      	cbnz	r3, 8009aec <_vfiprintf_r+0x18>
 8009ae8:	f000 fb14 	bl	800a114 <__sinit>
 8009aec:	4b89      	ldr	r3, [pc, #548]	; (8009d14 <_vfiprintf_r+0x240>)
 8009aee:	429d      	cmp	r5, r3
 8009af0:	d11b      	bne.n	8009b2a <_vfiprintf_r+0x56>
 8009af2:	6875      	ldr	r5, [r6, #4]
 8009af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af6:	07d9      	lsls	r1, r3, #31
 8009af8:	d405      	bmi.n	8009b06 <_vfiprintf_r+0x32>
 8009afa:	89ab      	ldrh	r3, [r5, #12]
 8009afc:	059a      	lsls	r2, r3, #22
 8009afe:	d402      	bmi.n	8009b06 <_vfiprintf_r+0x32>
 8009b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b02:	f000 fba5 	bl	800a250 <__retarget_lock_acquire_recursive>
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	071b      	lsls	r3, r3, #28
 8009b0a:	d501      	bpl.n	8009b10 <_vfiprintf_r+0x3c>
 8009b0c:	692b      	ldr	r3, [r5, #16]
 8009b0e:	b9eb      	cbnz	r3, 8009b4c <_vfiprintf_r+0x78>
 8009b10:	4629      	mov	r1, r5
 8009b12:	4630      	mov	r0, r6
 8009b14:	f000 f96e 	bl	8009df4 <__swsetup_r>
 8009b18:	b1c0      	cbz	r0, 8009b4c <_vfiprintf_r+0x78>
 8009b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b1c:	07dc      	lsls	r4, r3, #31
 8009b1e:	d50e      	bpl.n	8009b3e <_vfiprintf_r+0x6a>
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	b01d      	add	sp, #116	; 0x74
 8009b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	; (8009d18 <_vfiprintf_r+0x244>)
 8009b2c:	429d      	cmp	r5, r3
 8009b2e:	d101      	bne.n	8009b34 <_vfiprintf_r+0x60>
 8009b30:	68b5      	ldr	r5, [r6, #8]
 8009b32:	e7df      	b.n	8009af4 <_vfiprintf_r+0x20>
 8009b34:	4b79      	ldr	r3, [pc, #484]	; (8009d1c <_vfiprintf_r+0x248>)
 8009b36:	429d      	cmp	r5, r3
 8009b38:	bf08      	it	eq
 8009b3a:	68f5      	ldreq	r5, [r6, #12]
 8009b3c:	e7da      	b.n	8009af4 <_vfiprintf_r+0x20>
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	0598      	lsls	r0, r3, #22
 8009b42:	d4ed      	bmi.n	8009b20 <_vfiprintf_r+0x4c>
 8009b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b46:	f000 fb84 	bl	800a252 <__retarget_lock_release_recursive>
 8009b4a:	e7e9      	b.n	8009b20 <_vfiprintf_r+0x4c>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b50:	2320      	movs	r3, #32
 8009b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b5a:	2330      	movs	r3, #48	; 0x30
 8009b5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d20 <_vfiprintf_r+0x24c>
 8009b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b64:	f04f 0901 	mov.w	r9, #1
 8009b68:	4623      	mov	r3, r4
 8009b6a:	469a      	mov	sl, r3
 8009b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b70:	b10a      	cbz	r2, 8009b76 <_vfiprintf_r+0xa2>
 8009b72:	2a25      	cmp	r2, #37	; 0x25
 8009b74:	d1f9      	bne.n	8009b6a <_vfiprintf_r+0x96>
 8009b76:	ebba 0b04 	subs.w	fp, sl, r4
 8009b7a:	d00b      	beq.n	8009b94 <_vfiprintf_r+0xc0>
 8009b7c:	465b      	mov	r3, fp
 8009b7e:	4622      	mov	r2, r4
 8009b80:	4629      	mov	r1, r5
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7ff ff94 	bl	8009ab0 <__sfputs_r>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f000 80aa 	beq.w	8009ce2 <_vfiprintf_r+0x20e>
 8009b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b90:	445a      	add	r2, fp
 8009b92:	9209      	str	r2, [sp, #36]	; 0x24
 8009b94:	f89a 3000 	ldrb.w	r3, [sl]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80a2 	beq.w	8009ce2 <_vfiprintf_r+0x20e>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba8:	f10a 0a01 	add.w	sl, sl, #1
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb6:	4654      	mov	r4, sl
 8009bb8:	2205      	movs	r2, #5
 8009bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbe:	4858      	ldr	r0, [pc, #352]	; (8009d20 <_vfiprintf_r+0x24c>)
 8009bc0:	f7f6 fb26 	bl	8000210 <memchr>
 8009bc4:	9a04      	ldr	r2, [sp, #16]
 8009bc6:	b9d8      	cbnz	r0, 8009c00 <_vfiprintf_r+0x12c>
 8009bc8:	06d1      	lsls	r1, r2, #27
 8009bca:	bf44      	itt	mi
 8009bcc:	2320      	movmi	r3, #32
 8009bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd2:	0713      	lsls	r3, r2, #28
 8009bd4:	bf44      	itt	mi
 8009bd6:	232b      	movmi	r3, #43	; 0x2b
 8009bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009be0:	2b2a      	cmp	r3, #42	; 0x2a
 8009be2:	d015      	beq.n	8009c10 <_vfiprintf_r+0x13c>
 8009be4:	9a07      	ldr	r2, [sp, #28]
 8009be6:	4654      	mov	r4, sl
 8009be8:	2000      	movs	r0, #0
 8009bea:	f04f 0c0a 	mov.w	ip, #10
 8009bee:	4621      	mov	r1, r4
 8009bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bf4:	3b30      	subs	r3, #48	; 0x30
 8009bf6:	2b09      	cmp	r3, #9
 8009bf8:	d94e      	bls.n	8009c98 <_vfiprintf_r+0x1c4>
 8009bfa:	b1b0      	cbz	r0, 8009c2a <_vfiprintf_r+0x156>
 8009bfc:	9207      	str	r2, [sp, #28]
 8009bfe:	e014      	b.n	8009c2a <_vfiprintf_r+0x156>
 8009c00:	eba0 0308 	sub.w	r3, r0, r8
 8009c04:	fa09 f303 	lsl.w	r3, r9, r3
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	9304      	str	r3, [sp, #16]
 8009c0c:	46a2      	mov	sl, r4
 8009c0e:	e7d2      	b.n	8009bb6 <_vfiprintf_r+0xe2>
 8009c10:	9b03      	ldr	r3, [sp, #12]
 8009c12:	1d19      	adds	r1, r3, #4
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	9103      	str	r1, [sp, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bfbb      	ittet	lt
 8009c1c:	425b      	neglt	r3, r3
 8009c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c22:	9307      	strge	r3, [sp, #28]
 8009c24:	9307      	strlt	r3, [sp, #28]
 8009c26:	bfb8      	it	lt
 8009c28:	9204      	strlt	r2, [sp, #16]
 8009c2a:	7823      	ldrb	r3, [r4, #0]
 8009c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c2e:	d10c      	bne.n	8009c4a <_vfiprintf_r+0x176>
 8009c30:	7863      	ldrb	r3, [r4, #1]
 8009c32:	2b2a      	cmp	r3, #42	; 0x2a
 8009c34:	d135      	bne.n	8009ca2 <_vfiprintf_r+0x1ce>
 8009c36:	9b03      	ldr	r3, [sp, #12]
 8009c38:	1d1a      	adds	r2, r3, #4
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	9203      	str	r2, [sp, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bfb8      	it	lt
 8009c42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c46:	3402      	adds	r4, #2
 8009c48:	9305      	str	r3, [sp, #20]
 8009c4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d30 <_vfiprintf_r+0x25c>
 8009c4e:	7821      	ldrb	r1, [r4, #0]
 8009c50:	2203      	movs	r2, #3
 8009c52:	4650      	mov	r0, sl
 8009c54:	f7f6 fadc 	bl	8000210 <memchr>
 8009c58:	b140      	cbz	r0, 8009c6c <_vfiprintf_r+0x198>
 8009c5a:	2340      	movs	r3, #64	; 0x40
 8009c5c:	eba0 000a 	sub.w	r0, r0, sl
 8009c60:	fa03 f000 	lsl.w	r0, r3, r0
 8009c64:	9b04      	ldr	r3, [sp, #16]
 8009c66:	4303      	orrs	r3, r0
 8009c68:	3401      	adds	r4, #1
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c70:	482c      	ldr	r0, [pc, #176]	; (8009d24 <_vfiprintf_r+0x250>)
 8009c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c76:	2206      	movs	r2, #6
 8009c78:	f7f6 faca 	bl	8000210 <memchr>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d03f      	beq.n	8009d00 <_vfiprintf_r+0x22c>
 8009c80:	4b29      	ldr	r3, [pc, #164]	; (8009d28 <_vfiprintf_r+0x254>)
 8009c82:	bb1b      	cbnz	r3, 8009ccc <_vfiprintf_r+0x1f8>
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	3307      	adds	r3, #7
 8009c88:	f023 0307 	bic.w	r3, r3, #7
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	9303      	str	r3, [sp, #12]
 8009c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c92:	443b      	add	r3, r7
 8009c94:	9309      	str	r3, [sp, #36]	; 0x24
 8009c96:	e767      	b.n	8009b68 <_vfiprintf_r+0x94>
 8009c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	e7a5      	b.n	8009bee <_vfiprintf_r+0x11a>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	3401      	adds	r4, #1
 8009ca6:	9305      	str	r3, [sp, #20]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	f04f 0c0a 	mov.w	ip, #10
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb4:	3a30      	subs	r2, #48	; 0x30
 8009cb6:	2a09      	cmp	r2, #9
 8009cb8:	d903      	bls.n	8009cc2 <_vfiprintf_r+0x1ee>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0c5      	beq.n	8009c4a <_vfiprintf_r+0x176>
 8009cbe:	9105      	str	r1, [sp, #20]
 8009cc0:	e7c3      	b.n	8009c4a <_vfiprintf_r+0x176>
 8009cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e7f0      	b.n	8009cae <_vfiprintf_r+0x1da>
 8009ccc:	ab03      	add	r3, sp, #12
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4b16      	ldr	r3, [pc, #88]	; (8009d2c <_vfiprintf_r+0x258>)
 8009cd4:	a904      	add	r1, sp, #16
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7fd fdd6 	bl	8007888 <_printf_float>
 8009cdc:	4607      	mov	r7, r0
 8009cde:	1c78      	adds	r0, r7, #1
 8009ce0:	d1d6      	bne.n	8009c90 <_vfiprintf_r+0x1bc>
 8009ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ce4:	07d9      	lsls	r1, r3, #31
 8009ce6:	d405      	bmi.n	8009cf4 <_vfiprintf_r+0x220>
 8009ce8:	89ab      	ldrh	r3, [r5, #12]
 8009cea:	059a      	lsls	r2, r3, #22
 8009cec:	d402      	bmi.n	8009cf4 <_vfiprintf_r+0x220>
 8009cee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cf0:	f000 faaf 	bl	800a252 <__retarget_lock_release_recursive>
 8009cf4:	89ab      	ldrh	r3, [r5, #12]
 8009cf6:	065b      	lsls	r3, r3, #25
 8009cf8:	f53f af12 	bmi.w	8009b20 <_vfiprintf_r+0x4c>
 8009cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cfe:	e711      	b.n	8009b24 <_vfiprintf_r+0x50>
 8009d00:	ab03      	add	r3, sp, #12
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	462a      	mov	r2, r5
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <_vfiprintf_r+0x258>)
 8009d08:	a904      	add	r1, sp, #16
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7fe f860 	bl	8007dd0 <_printf_i>
 8009d10:	e7e4      	b.n	8009cdc <_vfiprintf_r+0x208>
 8009d12:	bf00      	nop
 8009d14:	0800a974 	.word	0x0800a974
 8009d18:	0800a994 	.word	0x0800a994
 8009d1c:	0800a954 	.word	0x0800a954
 8009d20:	0800a7fc 	.word	0x0800a7fc
 8009d24:	0800a806 	.word	0x0800a806
 8009d28:	08007889 	.word	0x08007889
 8009d2c:	08009ab1 	.word	0x08009ab1
 8009d30:	0800a802 	.word	0x0800a802

08009d34 <__swbuf_r>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	460e      	mov	r6, r1
 8009d38:	4614      	mov	r4, r2
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	b118      	cbz	r0, 8009d46 <__swbuf_r+0x12>
 8009d3e:	6983      	ldr	r3, [r0, #24]
 8009d40:	b90b      	cbnz	r3, 8009d46 <__swbuf_r+0x12>
 8009d42:	f000 f9e7 	bl	800a114 <__sinit>
 8009d46:	4b21      	ldr	r3, [pc, #132]	; (8009dcc <__swbuf_r+0x98>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	d12b      	bne.n	8009da4 <__swbuf_r+0x70>
 8009d4c:	686c      	ldr	r4, [r5, #4]
 8009d4e:	69a3      	ldr	r3, [r4, #24]
 8009d50:	60a3      	str	r3, [r4, #8]
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	071a      	lsls	r2, r3, #28
 8009d56:	d52f      	bpl.n	8009db8 <__swbuf_r+0x84>
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	b36b      	cbz	r3, 8009db8 <__swbuf_r+0x84>
 8009d5c:	6923      	ldr	r3, [r4, #16]
 8009d5e:	6820      	ldr	r0, [r4, #0]
 8009d60:	1ac0      	subs	r0, r0, r3
 8009d62:	6963      	ldr	r3, [r4, #20]
 8009d64:	b2f6      	uxtb	r6, r6
 8009d66:	4283      	cmp	r3, r0
 8009d68:	4637      	mov	r7, r6
 8009d6a:	dc04      	bgt.n	8009d76 <__swbuf_r+0x42>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 f93c 	bl	8009fec <_fflush_r>
 8009d74:	bb30      	cbnz	r0, 8009dc4 <__swbuf_r+0x90>
 8009d76:	68a3      	ldr	r3, [r4, #8]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	60a3      	str	r3, [r4, #8]
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	6022      	str	r2, [r4, #0]
 8009d82:	701e      	strb	r6, [r3, #0]
 8009d84:	6963      	ldr	r3, [r4, #20]
 8009d86:	3001      	adds	r0, #1
 8009d88:	4283      	cmp	r3, r0
 8009d8a:	d004      	beq.n	8009d96 <__swbuf_r+0x62>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	07db      	lsls	r3, r3, #31
 8009d90:	d506      	bpl.n	8009da0 <__swbuf_r+0x6c>
 8009d92:	2e0a      	cmp	r6, #10
 8009d94:	d104      	bne.n	8009da0 <__swbuf_r+0x6c>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 f927 	bl	8009fec <_fflush_r>
 8009d9e:	b988      	cbnz	r0, 8009dc4 <__swbuf_r+0x90>
 8009da0:	4638      	mov	r0, r7
 8009da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da4:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <__swbuf_r+0x9c>)
 8009da6:	429c      	cmp	r4, r3
 8009da8:	d101      	bne.n	8009dae <__swbuf_r+0x7a>
 8009daa:	68ac      	ldr	r4, [r5, #8]
 8009dac:	e7cf      	b.n	8009d4e <__swbuf_r+0x1a>
 8009dae:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <__swbuf_r+0xa0>)
 8009db0:	429c      	cmp	r4, r3
 8009db2:	bf08      	it	eq
 8009db4:	68ec      	ldreq	r4, [r5, #12]
 8009db6:	e7ca      	b.n	8009d4e <__swbuf_r+0x1a>
 8009db8:	4621      	mov	r1, r4
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f000 f81a 	bl	8009df4 <__swsetup_r>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d0cb      	beq.n	8009d5c <__swbuf_r+0x28>
 8009dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8009dc8:	e7ea      	b.n	8009da0 <__swbuf_r+0x6c>
 8009dca:	bf00      	nop
 8009dcc:	0800a974 	.word	0x0800a974
 8009dd0:	0800a994 	.word	0x0800a994
 8009dd4:	0800a954 	.word	0x0800a954

08009dd8 <__ascii_wctomb>:
 8009dd8:	b149      	cbz	r1, 8009dee <__ascii_wctomb+0x16>
 8009dda:	2aff      	cmp	r2, #255	; 0xff
 8009ddc:	bf85      	ittet	hi
 8009dde:	238a      	movhi	r3, #138	; 0x8a
 8009de0:	6003      	strhi	r3, [r0, #0]
 8009de2:	700a      	strbls	r2, [r1, #0]
 8009de4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009de8:	bf98      	it	ls
 8009dea:	2001      	movls	r0, #1
 8009dec:	4770      	bx	lr
 8009dee:	4608      	mov	r0, r1
 8009df0:	4770      	bx	lr
	...

08009df4 <__swsetup_r>:
 8009df4:	4b32      	ldr	r3, [pc, #200]	; (8009ec0 <__swsetup_r+0xcc>)
 8009df6:	b570      	push	{r4, r5, r6, lr}
 8009df8:	681d      	ldr	r5, [r3, #0]
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	b125      	cbz	r5, 8009e0a <__swsetup_r+0x16>
 8009e00:	69ab      	ldr	r3, [r5, #24]
 8009e02:	b913      	cbnz	r3, 8009e0a <__swsetup_r+0x16>
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 f985 	bl	800a114 <__sinit>
 8009e0a:	4b2e      	ldr	r3, [pc, #184]	; (8009ec4 <__swsetup_r+0xd0>)
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d10f      	bne.n	8009e30 <__swsetup_r+0x3c>
 8009e10:	686c      	ldr	r4, [r5, #4]
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e18:	0719      	lsls	r1, r3, #28
 8009e1a:	d42c      	bmi.n	8009e76 <__swsetup_r+0x82>
 8009e1c:	06dd      	lsls	r5, r3, #27
 8009e1e:	d411      	bmi.n	8009e44 <__swsetup_r+0x50>
 8009e20:	2309      	movs	r3, #9
 8009e22:	6033      	str	r3, [r6, #0]
 8009e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2e:	e03e      	b.n	8009eae <__swsetup_r+0xba>
 8009e30:	4b25      	ldr	r3, [pc, #148]	; (8009ec8 <__swsetup_r+0xd4>)
 8009e32:	429c      	cmp	r4, r3
 8009e34:	d101      	bne.n	8009e3a <__swsetup_r+0x46>
 8009e36:	68ac      	ldr	r4, [r5, #8]
 8009e38:	e7eb      	b.n	8009e12 <__swsetup_r+0x1e>
 8009e3a:	4b24      	ldr	r3, [pc, #144]	; (8009ecc <__swsetup_r+0xd8>)
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	bf08      	it	eq
 8009e40:	68ec      	ldreq	r4, [r5, #12]
 8009e42:	e7e6      	b.n	8009e12 <__swsetup_r+0x1e>
 8009e44:	0758      	lsls	r0, r3, #29
 8009e46:	d512      	bpl.n	8009e6e <__swsetup_r+0x7a>
 8009e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e4a:	b141      	cbz	r1, 8009e5e <__swsetup_r+0x6a>
 8009e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e50:	4299      	cmp	r1, r3
 8009e52:	d002      	beq.n	8009e5a <__swsetup_r+0x66>
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff fb31 	bl	80094bc <_free_r>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	2300      	movs	r3, #0
 8009e68:	6063      	str	r3, [r4, #4]
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f043 0308 	orr.w	r3, r3, #8
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	6923      	ldr	r3, [r4, #16]
 8009e78:	b94b      	cbnz	r3, 8009e8e <__swsetup_r+0x9a>
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e84:	d003      	beq.n	8009e8e <__swsetup_r+0x9a>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 fa09 	bl	800a2a0 <__smakebuf_r>
 8009e8e:	89a0      	ldrh	r0, [r4, #12]
 8009e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e94:	f010 0301 	ands.w	r3, r0, #1
 8009e98:	d00a      	beq.n	8009eb0 <__swsetup_r+0xbc>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60a3      	str	r3, [r4, #8]
 8009e9e:	6963      	ldr	r3, [r4, #20]
 8009ea0:	425b      	negs	r3, r3
 8009ea2:	61a3      	str	r3, [r4, #24]
 8009ea4:	6923      	ldr	r3, [r4, #16]
 8009ea6:	b943      	cbnz	r3, 8009eba <__swsetup_r+0xc6>
 8009ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009eac:	d1ba      	bne.n	8009e24 <__swsetup_r+0x30>
 8009eae:	bd70      	pop	{r4, r5, r6, pc}
 8009eb0:	0781      	lsls	r1, r0, #30
 8009eb2:	bf58      	it	pl
 8009eb4:	6963      	ldrpl	r3, [r4, #20]
 8009eb6:	60a3      	str	r3, [r4, #8]
 8009eb8:	e7f4      	b.n	8009ea4 <__swsetup_r+0xb0>
 8009eba:	2000      	movs	r0, #0
 8009ebc:	e7f7      	b.n	8009eae <__swsetup_r+0xba>
 8009ebe:	bf00      	nop
 8009ec0:	2000000c 	.word	0x2000000c
 8009ec4:	0800a974 	.word	0x0800a974
 8009ec8:	0800a994 	.word	0x0800a994
 8009ecc:	0800a954 	.word	0x0800a954

08009ed0 <abort>:
 8009ed0:	b508      	push	{r3, lr}
 8009ed2:	2006      	movs	r0, #6
 8009ed4:	f000 fa54 	bl	800a380 <raise>
 8009ed8:	2001      	movs	r0, #1
 8009eda:	f7f7 fc73 	bl	80017c4 <_exit>
	...

08009ee0 <__sflush_r>:
 8009ee0:	898a      	ldrh	r2, [r1, #12]
 8009ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	0710      	lsls	r0, r2, #28
 8009eea:	460c      	mov	r4, r1
 8009eec:	d458      	bmi.n	8009fa0 <__sflush_r+0xc0>
 8009eee:	684b      	ldr	r3, [r1, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	dc05      	bgt.n	8009f00 <__sflush_r+0x20>
 8009ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dc02      	bgt.n	8009f00 <__sflush_r+0x20>
 8009efa:	2000      	movs	r0, #0
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f02:	2e00      	cmp	r6, #0
 8009f04:	d0f9      	beq.n	8009efa <__sflush_r+0x1a>
 8009f06:	2300      	movs	r3, #0
 8009f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f0c:	682f      	ldr	r7, [r5, #0]
 8009f0e:	602b      	str	r3, [r5, #0]
 8009f10:	d032      	beq.n	8009f78 <__sflush_r+0x98>
 8009f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	075a      	lsls	r2, r3, #29
 8009f18:	d505      	bpl.n	8009f26 <__sflush_r+0x46>
 8009f1a:	6863      	ldr	r3, [r4, #4]
 8009f1c:	1ac0      	subs	r0, r0, r3
 8009f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f20:	b10b      	cbz	r3, 8009f26 <__sflush_r+0x46>
 8009f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f24:	1ac0      	subs	r0, r0, r3
 8009f26:	2300      	movs	r3, #0
 8009f28:	4602      	mov	r2, r0
 8009f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f2c:	6a21      	ldr	r1, [r4, #32]
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b0      	blx	r6
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	d106      	bne.n	8009f46 <__sflush_r+0x66>
 8009f38:	6829      	ldr	r1, [r5, #0]
 8009f3a:	291d      	cmp	r1, #29
 8009f3c:	d82c      	bhi.n	8009f98 <__sflush_r+0xb8>
 8009f3e:	4a2a      	ldr	r2, [pc, #168]	; (8009fe8 <__sflush_r+0x108>)
 8009f40:	40ca      	lsrs	r2, r1
 8009f42:	07d6      	lsls	r6, r2, #31
 8009f44:	d528      	bpl.n	8009f98 <__sflush_r+0xb8>
 8009f46:	2200      	movs	r2, #0
 8009f48:	6062      	str	r2, [r4, #4]
 8009f4a:	04d9      	lsls	r1, r3, #19
 8009f4c:	6922      	ldr	r2, [r4, #16]
 8009f4e:	6022      	str	r2, [r4, #0]
 8009f50:	d504      	bpl.n	8009f5c <__sflush_r+0x7c>
 8009f52:	1c42      	adds	r2, r0, #1
 8009f54:	d101      	bne.n	8009f5a <__sflush_r+0x7a>
 8009f56:	682b      	ldr	r3, [r5, #0]
 8009f58:	b903      	cbnz	r3, 8009f5c <__sflush_r+0x7c>
 8009f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f5e:	602f      	str	r7, [r5, #0]
 8009f60:	2900      	cmp	r1, #0
 8009f62:	d0ca      	beq.n	8009efa <__sflush_r+0x1a>
 8009f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f68:	4299      	cmp	r1, r3
 8009f6a:	d002      	beq.n	8009f72 <__sflush_r+0x92>
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f7ff faa5 	bl	80094bc <_free_r>
 8009f72:	2000      	movs	r0, #0
 8009f74:	6360      	str	r0, [r4, #52]	; 0x34
 8009f76:	e7c1      	b.n	8009efc <__sflush_r+0x1c>
 8009f78:	6a21      	ldr	r1, [r4, #32]
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b0      	blx	r6
 8009f80:	1c41      	adds	r1, r0, #1
 8009f82:	d1c7      	bne.n	8009f14 <__sflush_r+0x34>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0c4      	beq.n	8009f14 <__sflush_r+0x34>
 8009f8a:	2b1d      	cmp	r3, #29
 8009f8c:	d001      	beq.n	8009f92 <__sflush_r+0xb2>
 8009f8e:	2b16      	cmp	r3, #22
 8009f90:	d101      	bne.n	8009f96 <__sflush_r+0xb6>
 8009f92:	602f      	str	r7, [r5, #0]
 8009f94:	e7b1      	b.n	8009efa <__sflush_r+0x1a>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	e7ad      	b.n	8009efc <__sflush_r+0x1c>
 8009fa0:	690f      	ldr	r7, [r1, #16]
 8009fa2:	2f00      	cmp	r7, #0
 8009fa4:	d0a9      	beq.n	8009efa <__sflush_r+0x1a>
 8009fa6:	0793      	lsls	r3, r2, #30
 8009fa8:	680e      	ldr	r6, [r1, #0]
 8009faa:	bf08      	it	eq
 8009fac:	694b      	ldreq	r3, [r1, #20]
 8009fae:	600f      	str	r7, [r1, #0]
 8009fb0:	bf18      	it	ne
 8009fb2:	2300      	movne	r3, #0
 8009fb4:	eba6 0807 	sub.w	r8, r6, r7
 8009fb8:	608b      	str	r3, [r1, #8]
 8009fba:	f1b8 0f00 	cmp.w	r8, #0
 8009fbe:	dd9c      	ble.n	8009efa <__sflush_r+0x1a>
 8009fc0:	6a21      	ldr	r1, [r4, #32]
 8009fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fc4:	4643      	mov	r3, r8
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	4628      	mov	r0, r5
 8009fca:	47b0      	blx	r6
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	dc06      	bgt.n	8009fde <__sflush_r+0xfe>
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	e78e      	b.n	8009efc <__sflush_r+0x1c>
 8009fde:	4407      	add	r7, r0
 8009fe0:	eba8 0800 	sub.w	r8, r8, r0
 8009fe4:	e7e9      	b.n	8009fba <__sflush_r+0xda>
 8009fe6:	bf00      	nop
 8009fe8:	20400001 	.word	0x20400001

08009fec <_fflush_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	690b      	ldr	r3, [r1, #16]
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	b913      	cbnz	r3, 8009ffc <_fflush_r+0x10>
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	b118      	cbz	r0, 800a006 <_fflush_r+0x1a>
 8009ffe:	6983      	ldr	r3, [r0, #24]
 800a000:	b90b      	cbnz	r3, 800a006 <_fflush_r+0x1a>
 800a002:	f000 f887 	bl	800a114 <__sinit>
 800a006:	4b14      	ldr	r3, [pc, #80]	; (800a058 <_fflush_r+0x6c>)
 800a008:	429c      	cmp	r4, r3
 800a00a:	d11b      	bne.n	800a044 <_fflush_r+0x58>
 800a00c:	686c      	ldr	r4, [r5, #4]
 800a00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0ef      	beq.n	8009ff6 <_fflush_r+0xa>
 800a016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a018:	07d0      	lsls	r0, r2, #31
 800a01a:	d404      	bmi.n	800a026 <_fflush_r+0x3a>
 800a01c:	0599      	lsls	r1, r3, #22
 800a01e:	d402      	bmi.n	800a026 <_fflush_r+0x3a>
 800a020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a022:	f000 f915 	bl	800a250 <__retarget_lock_acquire_recursive>
 800a026:	4628      	mov	r0, r5
 800a028:	4621      	mov	r1, r4
 800a02a:	f7ff ff59 	bl	8009ee0 <__sflush_r>
 800a02e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a030:	07da      	lsls	r2, r3, #31
 800a032:	4605      	mov	r5, r0
 800a034:	d4e0      	bmi.n	8009ff8 <_fflush_r+0xc>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	059b      	lsls	r3, r3, #22
 800a03a:	d4dd      	bmi.n	8009ff8 <_fflush_r+0xc>
 800a03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a03e:	f000 f908 	bl	800a252 <__retarget_lock_release_recursive>
 800a042:	e7d9      	b.n	8009ff8 <_fflush_r+0xc>
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <_fflush_r+0x70>)
 800a046:	429c      	cmp	r4, r3
 800a048:	d101      	bne.n	800a04e <_fflush_r+0x62>
 800a04a:	68ac      	ldr	r4, [r5, #8]
 800a04c:	e7df      	b.n	800a00e <_fflush_r+0x22>
 800a04e:	4b04      	ldr	r3, [pc, #16]	; (800a060 <_fflush_r+0x74>)
 800a050:	429c      	cmp	r4, r3
 800a052:	bf08      	it	eq
 800a054:	68ec      	ldreq	r4, [r5, #12]
 800a056:	e7da      	b.n	800a00e <_fflush_r+0x22>
 800a058:	0800a974 	.word	0x0800a974
 800a05c:	0800a994 	.word	0x0800a994
 800a060:	0800a954 	.word	0x0800a954

0800a064 <std>:
 800a064:	2300      	movs	r3, #0
 800a066:	b510      	push	{r4, lr}
 800a068:	4604      	mov	r4, r0
 800a06a:	e9c0 3300 	strd	r3, r3, [r0]
 800a06e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a072:	6083      	str	r3, [r0, #8]
 800a074:	8181      	strh	r1, [r0, #12]
 800a076:	6643      	str	r3, [r0, #100]	; 0x64
 800a078:	81c2      	strh	r2, [r0, #14]
 800a07a:	6183      	str	r3, [r0, #24]
 800a07c:	4619      	mov	r1, r3
 800a07e:	2208      	movs	r2, #8
 800a080:	305c      	adds	r0, #92	; 0x5c
 800a082:	f7fd fb59 	bl	8007738 <memset>
 800a086:	4b05      	ldr	r3, [pc, #20]	; (800a09c <std+0x38>)
 800a088:	6263      	str	r3, [r4, #36]	; 0x24
 800a08a:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <std+0x3c>)
 800a08c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <std+0x40>)
 800a090:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a092:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <std+0x44>)
 800a094:	6224      	str	r4, [r4, #32]
 800a096:	6323      	str	r3, [r4, #48]	; 0x30
 800a098:	bd10      	pop	{r4, pc}
 800a09a:	bf00      	nop
 800a09c:	0800a3b9 	.word	0x0800a3b9
 800a0a0:	0800a3db 	.word	0x0800a3db
 800a0a4:	0800a413 	.word	0x0800a413
 800a0a8:	0800a437 	.word	0x0800a437

0800a0ac <_cleanup_r>:
 800a0ac:	4901      	ldr	r1, [pc, #4]	; (800a0b4 <_cleanup_r+0x8>)
 800a0ae:	f000 b8af 	b.w	800a210 <_fwalk_reent>
 800a0b2:	bf00      	nop
 800a0b4:	08009fed 	.word	0x08009fed

0800a0b8 <__sfmoreglue>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	2268      	movs	r2, #104	; 0x68
 800a0bc:	1e4d      	subs	r5, r1, #1
 800a0be:	4355      	muls	r5, r2
 800a0c0:	460e      	mov	r6, r1
 800a0c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0c6:	f7ff fa65 	bl	8009594 <_malloc_r>
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	b140      	cbz	r0, 800a0e0 <__sfmoreglue+0x28>
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	e9c0 1600 	strd	r1, r6, [r0]
 800a0d4:	300c      	adds	r0, #12
 800a0d6:	60a0      	str	r0, [r4, #8]
 800a0d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0dc:	f7fd fb2c 	bl	8007738 <memset>
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}

0800a0e4 <__sfp_lock_acquire>:
 800a0e4:	4801      	ldr	r0, [pc, #4]	; (800a0ec <__sfp_lock_acquire+0x8>)
 800a0e6:	f000 b8b3 	b.w	800a250 <__retarget_lock_acquire_recursive>
 800a0ea:	bf00      	nop
 800a0ec:	20000811 	.word	0x20000811

0800a0f0 <__sfp_lock_release>:
 800a0f0:	4801      	ldr	r0, [pc, #4]	; (800a0f8 <__sfp_lock_release+0x8>)
 800a0f2:	f000 b8ae 	b.w	800a252 <__retarget_lock_release_recursive>
 800a0f6:	bf00      	nop
 800a0f8:	20000811 	.word	0x20000811

0800a0fc <__sinit_lock_acquire>:
 800a0fc:	4801      	ldr	r0, [pc, #4]	; (800a104 <__sinit_lock_acquire+0x8>)
 800a0fe:	f000 b8a7 	b.w	800a250 <__retarget_lock_acquire_recursive>
 800a102:	bf00      	nop
 800a104:	20000812 	.word	0x20000812

0800a108 <__sinit_lock_release>:
 800a108:	4801      	ldr	r0, [pc, #4]	; (800a110 <__sinit_lock_release+0x8>)
 800a10a:	f000 b8a2 	b.w	800a252 <__retarget_lock_release_recursive>
 800a10e:	bf00      	nop
 800a110:	20000812 	.word	0x20000812

0800a114 <__sinit>:
 800a114:	b510      	push	{r4, lr}
 800a116:	4604      	mov	r4, r0
 800a118:	f7ff fff0 	bl	800a0fc <__sinit_lock_acquire>
 800a11c:	69a3      	ldr	r3, [r4, #24]
 800a11e:	b11b      	cbz	r3, 800a128 <__sinit+0x14>
 800a120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a124:	f7ff bff0 	b.w	800a108 <__sinit_lock_release>
 800a128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a12c:	6523      	str	r3, [r4, #80]	; 0x50
 800a12e:	4b13      	ldr	r3, [pc, #76]	; (800a17c <__sinit+0x68>)
 800a130:	4a13      	ldr	r2, [pc, #76]	; (800a180 <__sinit+0x6c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	62a2      	str	r2, [r4, #40]	; 0x28
 800a136:	42a3      	cmp	r3, r4
 800a138:	bf04      	itt	eq
 800a13a:	2301      	moveq	r3, #1
 800a13c:	61a3      	streq	r3, [r4, #24]
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 f820 	bl	800a184 <__sfp>
 800a144:	6060      	str	r0, [r4, #4]
 800a146:	4620      	mov	r0, r4
 800a148:	f000 f81c 	bl	800a184 <__sfp>
 800a14c:	60a0      	str	r0, [r4, #8]
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 f818 	bl	800a184 <__sfp>
 800a154:	2200      	movs	r2, #0
 800a156:	60e0      	str	r0, [r4, #12]
 800a158:	2104      	movs	r1, #4
 800a15a:	6860      	ldr	r0, [r4, #4]
 800a15c:	f7ff ff82 	bl	800a064 <std>
 800a160:	68a0      	ldr	r0, [r4, #8]
 800a162:	2201      	movs	r2, #1
 800a164:	2109      	movs	r1, #9
 800a166:	f7ff ff7d 	bl	800a064 <std>
 800a16a:	68e0      	ldr	r0, [r4, #12]
 800a16c:	2202      	movs	r2, #2
 800a16e:	2112      	movs	r1, #18
 800a170:	f7ff ff78 	bl	800a064 <std>
 800a174:	2301      	movs	r3, #1
 800a176:	61a3      	str	r3, [r4, #24]
 800a178:	e7d2      	b.n	800a120 <__sinit+0xc>
 800a17a:	bf00      	nop
 800a17c:	0800a5d8 	.word	0x0800a5d8
 800a180:	0800a0ad 	.word	0x0800a0ad

0800a184 <__sfp>:
 800a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a186:	4607      	mov	r7, r0
 800a188:	f7ff ffac 	bl	800a0e4 <__sfp_lock_acquire>
 800a18c:	4b1e      	ldr	r3, [pc, #120]	; (800a208 <__sfp+0x84>)
 800a18e:	681e      	ldr	r6, [r3, #0]
 800a190:	69b3      	ldr	r3, [r6, #24]
 800a192:	b913      	cbnz	r3, 800a19a <__sfp+0x16>
 800a194:	4630      	mov	r0, r6
 800a196:	f7ff ffbd 	bl	800a114 <__sinit>
 800a19a:	3648      	adds	r6, #72	; 0x48
 800a19c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	d503      	bpl.n	800a1ac <__sfp+0x28>
 800a1a4:	6833      	ldr	r3, [r6, #0]
 800a1a6:	b30b      	cbz	r3, 800a1ec <__sfp+0x68>
 800a1a8:	6836      	ldr	r6, [r6, #0]
 800a1aa:	e7f7      	b.n	800a19c <__sfp+0x18>
 800a1ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1b0:	b9d5      	cbnz	r5, 800a1e8 <__sfp+0x64>
 800a1b2:	4b16      	ldr	r3, [pc, #88]	; (800a20c <__sfp+0x88>)
 800a1b4:	60e3      	str	r3, [r4, #12]
 800a1b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1ba:	6665      	str	r5, [r4, #100]	; 0x64
 800a1bc:	f000 f847 	bl	800a24e <__retarget_lock_init_recursive>
 800a1c0:	f7ff ff96 	bl	800a0f0 <__sfp_lock_release>
 800a1c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1cc:	6025      	str	r5, [r4, #0]
 800a1ce:	61a5      	str	r5, [r4, #24]
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1d8:	f7fd faae 	bl	8007738 <memset>
 800a1dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e8:	3468      	adds	r4, #104	; 0x68
 800a1ea:	e7d9      	b.n	800a1a0 <__sfp+0x1c>
 800a1ec:	2104      	movs	r1, #4
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	f7ff ff62 	bl	800a0b8 <__sfmoreglue>
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	6030      	str	r0, [r6, #0]
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d1d5      	bne.n	800a1a8 <__sfp+0x24>
 800a1fc:	f7ff ff78 	bl	800a0f0 <__sfp_lock_release>
 800a200:	230c      	movs	r3, #12
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	e7ee      	b.n	800a1e4 <__sfp+0x60>
 800a206:	bf00      	nop
 800a208:	0800a5d8 	.word	0x0800a5d8
 800a20c:	ffff0001 	.word	0xffff0001

0800a210 <_fwalk_reent>:
 800a210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a214:	4606      	mov	r6, r0
 800a216:	4688      	mov	r8, r1
 800a218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a21c:	2700      	movs	r7, #0
 800a21e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a222:	f1b9 0901 	subs.w	r9, r9, #1
 800a226:	d505      	bpl.n	800a234 <_fwalk_reent+0x24>
 800a228:	6824      	ldr	r4, [r4, #0]
 800a22a:	2c00      	cmp	r4, #0
 800a22c:	d1f7      	bne.n	800a21e <_fwalk_reent+0xe>
 800a22e:	4638      	mov	r0, r7
 800a230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a234:	89ab      	ldrh	r3, [r5, #12]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d907      	bls.n	800a24a <_fwalk_reent+0x3a>
 800a23a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a23e:	3301      	adds	r3, #1
 800a240:	d003      	beq.n	800a24a <_fwalk_reent+0x3a>
 800a242:	4629      	mov	r1, r5
 800a244:	4630      	mov	r0, r6
 800a246:	47c0      	blx	r8
 800a248:	4307      	orrs	r7, r0
 800a24a:	3568      	adds	r5, #104	; 0x68
 800a24c:	e7e9      	b.n	800a222 <_fwalk_reent+0x12>

0800a24e <__retarget_lock_init_recursive>:
 800a24e:	4770      	bx	lr

0800a250 <__retarget_lock_acquire_recursive>:
 800a250:	4770      	bx	lr

0800a252 <__retarget_lock_release_recursive>:
 800a252:	4770      	bx	lr

0800a254 <__swhatbuf_r>:
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	460e      	mov	r6, r1
 800a258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25c:	2900      	cmp	r1, #0
 800a25e:	b096      	sub	sp, #88	; 0x58
 800a260:	4614      	mov	r4, r2
 800a262:	461d      	mov	r5, r3
 800a264:	da08      	bge.n	800a278 <__swhatbuf_r+0x24>
 800a266:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	602a      	str	r2, [r5, #0]
 800a26e:	061a      	lsls	r2, r3, #24
 800a270:	d410      	bmi.n	800a294 <__swhatbuf_r+0x40>
 800a272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a276:	e00e      	b.n	800a296 <__swhatbuf_r+0x42>
 800a278:	466a      	mov	r2, sp
 800a27a:	f000 f903 	bl	800a484 <_fstat_r>
 800a27e:	2800      	cmp	r0, #0
 800a280:	dbf1      	blt.n	800a266 <__swhatbuf_r+0x12>
 800a282:	9a01      	ldr	r2, [sp, #4]
 800a284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a28c:	425a      	negs	r2, r3
 800a28e:	415a      	adcs	r2, r3
 800a290:	602a      	str	r2, [r5, #0]
 800a292:	e7ee      	b.n	800a272 <__swhatbuf_r+0x1e>
 800a294:	2340      	movs	r3, #64	; 0x40
 800a296:	2000      	movs	r0, #0
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	b016      	add	sp, #88	; 0x58
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2a0 <__smakebuf_r>:
 800a2a0:	898b      	ldrh	r3, [r1, #12]
 800a2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2a4:	079d      	lsls	r5, r3, #30
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	d507      	bpl.n	800a2bc <__smakebuf_r+0x1c>
 800a2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	6123      	str	r3, [r4, #16]
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	6163      	str	r3, [r4, #20]
 800a2b8:	b002      	add	sp, #8
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	ab01      	add	r3, sp, #4
 800a2be:	466a      	mov	r2, sp
 800a2c0:	f7ff ffc8 	bl	800a254 <__swhatbuf_r>
 800a2c4:	9900      	ldr	r1, [sp, #0]
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	f7ff f963 	bl	8009594 <_malloc_r>
 800a2ce:	b948      	cbnz	r0, 800a2e4 <__smakebuf_r+0x44>
 800a2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d4:	059a      	lsls	r2, r3, #22
 800a2d6:	d4ef      	bmi.n	800a2b8 <__smakebuf_r+0x18>
 800a2d8:	f023 0303 	bic.w	r3, r3, #3
 800a2dc:	f043 0302 	orr.w	r3, r3, #2
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	e7e3      	b.n	800a2ac <__smakebuf_r+0xc>
 800a2e4:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <__smakebuf_r+0x7c>)
 800a2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	6020      	str	r0, [r4, #0]
 800a2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	9b00      	ldr	r3, [sp, #0]
 800a2f4:	6163      	str	r3, [r4, #20]
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	6120      	str	r0, [r4, #16]
 800a2fa:	b15b      	cbz	r3, 800a314 <__smakebuf_r+0x74>
 800a2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f8d1 	bl	800a4a8 <_isatty_r>
 800a306:	b128      	cbz	r0, 800a314 <__smakebuf_r+0x74>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	f043 0301 	orr.w	r3, r3, #1
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	89a0      	ldrh	r0, [r4, #12]
 800a316:	4305      	orrs	r5, r0
 800a318:	81a5      	strh	r5, [r4, #12]
 800a31a:	e7cd      	b.n	800a2b8 <__smakebuf_r+0x18>
 800a31c:	0800a0ad 	.word	0x0800a0ad

0800a320 <_malloc_usable_size_r>:
 800a320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a324:	1f18      	subs	r0, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	bfbc      	itt	lt
 800a32a:	580b      	ldrlt	r3, [r1, r0]
 800a32c:	18c0      	addlt	r0, r0, r3
 800a32e:	4770      	bx	lr

0800a330 <_raise_r>:
 800a330:	291f      	cmp	r1, #31
 800a332:	b538      	push	{r3, r4, r5, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	460d      	mov	r5, r1
 800a338:	d904      	bls.n	800a344 <_raise_r+0x14>
 800a33a:	2316      	movs	r3, #22
 800a33c:	6003      	str	r3, [r0, #0]
 800a33e:	f04f 30ff 	mov.w	r0, #4294967295
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a346:	b112      	cbz	r2, 800a34e <_raise_r+0x1e>
 800a348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a34c:	b94b      	cbnz	r3, 800a362 <_raise_r+0x32>
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 f830 	bl	800a3b4 <_getpid_r>
 800a354:	462a      	mov	r2, r5
 800a356:	4601      	mov	r1, r0
 800a358:	4620      	mov	r0, r4
 800a35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35e:	f000 b817 	b.w	800a390 <_kill_r>
 800a362:	2b01      	cmp	r3, #1
 800a364:	d00a      	beq.n	800a37c <_raise_r+0x4c>
 800a366:	1c59      	adds	r1, r3, #1
 800a368:	d103      	bne.n	800a372 <_raise_r+0x42>
 800a36a:	2316      	movs	r3, #22
 800a36c:	6003      	str	r3, [r0, #0]
 800a36e:	2001      	movs	r0, #1
 800a370:	e7e7      	b.n	800a342 <_raise_r+0x12>
 800a372:	2400      	movs	r4, #0
 800a374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a378:	4628      	mov	r0, r5
 800a37a:	4798      	blx	r3
 800a37c:	2000      	movs	r0, #0
 800a37e:	e7e0      	b.n	800a342 <_raise_r+0x12>

0800a380 <raise>:
 800a380:	4b02      	ldr	r3, [pc, #8]	; (800a38c <raise+0xc>)
 800a382:	4601      	mov	r1, r0
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	f7ff bfd3 	b.w	800a330 <_raise_r>
 800a38a:	bf00      	nop
 800a38c:	2000000c 	.word	0x2000000c

0800a390 <_kill_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d07      	ldr	r5, [pc, #28]	; (800a3b0 <_kill_r+0x20>)
 800a394:	2300      	movs	r3, #0
 800a396:	4604      	mov	r4, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	4611      	mov	r1, r2
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	f7f7 fa01 	bl	80017a4 <_kill>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	d102      	bne.n	800a3ac <_kill_r+0x1c>
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	b103      	cbz	r3, 800a3ac <_kill_r+0x1c>
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	bd38      	pop	{r3, r4, r5, pc}
 800a3ae:	bf00      	nop
 800a3b0:	2000080c 	.word	0x2000080c

0800a3b4 <_getpid_r>:
 800a3b4:	f7f7 b9ee 	b.w	8001794 <_getpid>

0800a3b8 <__sread>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c0:	f000 f894 	bl	800a4ec <_read_r>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	bfab      	itete	ge
 800a3c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a3cc:	181b      	addge	r3, r3, r0
 800a3ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3d2:	bfac      	ite	ge
 800a3d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3d6:	81a3      	strhlt	r3, [r4, #12]
 800a3d8:	bd10      	pop	{r4, pc}

0800a3da <__swrite>:
 800a3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3de:	461f      	mov	r7, r3
 800a3e0:	898b      	ldrh	r3, [r1, #12]
 800a3e2:	05db      	lsls	r3, r3, #23
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	4616      	mov	r6, r2
 800a3ea:	d505      	bpl.n	800a3f8 <__swrite+0x1e>
 800a3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f000 f868 	bl	800a4c8 <_lseek_r>
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a402:	81a3      	strh	r3, [r4, #12]
 800a404:	4632      	mov	r2, r6
 800a406:	463b      	mov	r3, r7
 800a408:	4628      	mov	r0, r5
 800a40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a40e:	f000 b817 	b.w	800a440 <_write_r>

0800a412 <__sseek>:
 800a412:	b510      	push	{r4, lr}
 800a414:	460c      	mov	r4, r1
 800a416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41a:	f000 f855 	bl	800a4c8 <_lseek_r>
 800a41e:	1c43      	adds	r3, r0, #1
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	bf15      	itete	ne
 800a424:	6560      	strne	r0, [r4, #84]	; 0x54
 800a426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a42a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a42e:	81a3      	strheq	r3, [r4, #12]
 800a430:	bf18      	it	ne
 800a432:	81a3      	strhne	r3, [r4, #12]
 800a434:	bd10      	pop	{r4, pc}

0800a436 <__sclose>:
 800a436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a43a:	f000 b813 	b.w	800a464 <_close_r>
	...

0800a440 <_write_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d07      	ldr	r5, [pc, #28]	; (800a460 <_write_r+0x20>)
 800a444:	4604      	mov	r4, r0
 800a446:	4608      	mov	r0, r1
 800a448:	4611      	mov	r1, r2
 800a44a:	2200      	movs	r2, #0
 800a44c:	602a      	str	r2, [r5, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	f7f7 f9df 	bl	8001812 <_write>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d102      	bne.n	800a45e <_write_r+0x1e>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	b103      	cbz	r3, 800a45e <_write_r+0x1e>
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	2000080c 	.word	0x2000080c

0800a464 <_close_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4d06      	ldr	r5, [pc, #24]	; (800a480 <_close_r+0x1c>)
 800a468:	2300      	movs	r3, #0
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	f7f7 f9eb 	bl	800184a <_close>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_close_r+0x1a>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_close_r+0x1a>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	2000080c 	.word	0x2000080c

0800a484 <_fstat_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d07      	ldr	r5, [pc, #28]	; (800a4a4 <_fstat_r+0x20>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	4611      	mov	r1, r2
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	f7f7 f9e6 	bl	8001862 <_fstat>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d102      	bne.n	800a4a0 <_fstat_r+0x1c>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b103      	cbz	r3, 800a4a0 <_fstat_r+0x1c>
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	bd38      	pop	{r3, r4, r5, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2000080c 	.word	0x2000080c

0800a4a8 <_isatty_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_isatty_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f7 f9e5 	bl	8001882 <_isatty>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_isatty_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_isatty_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	2000080c 	.word	0x2000080c

0800a4c8 <_lseek_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	; (800a4e8 <_lseek_r+0x20>)
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	602a      	str	r2, [r5, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f7f7 f9de 	bl	8001898 <_lseek>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_lseek_r+0x1e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_lseek_r+0x1e>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	2000080c 	.word	0x2000080c

0800a4ec <_read_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d07      	ldr	r5, [pc, #28]	; (800a50c <_read_r+0x20>)
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	4608      	mov	r0, r1
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	602a      	str	r2, [r5, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f7f7 f96c 	bl	80017d8 <_read>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_read_r+0x1e>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_read_r+0x1e>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	2000080c 	.word	0x2000080c

0800a510 <_init>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	bf00      	nop
 800a514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a516:	bc08      	pop	{r3}
 800a518:	469e      	mov	lr, r3
 800a51a:	4770      	bx	lr

0800a51c <_fini>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	bf00      	nop
 800a520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a522:	bc08      	pop	{r3}
 800a524:	469e      	mov	lr, r3
 800a526:	4770      	bx	lr
