
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0bc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800d280  0800d280  0001d280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d754  0800d754  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d754  0800d754  0001d754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d75c  0800d75c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d75c  0800d75c  0001d75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d760  0800d760  0001d760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe0  200001e0  0800d944  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200021c0  0800d944  000221c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213e3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e5  00000000  00000000  000415f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  000457d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  00047260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a40  00000000  00000000  00048b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfe5  00000000  00000000  0004e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128ff4  00000000  00000000  0006b585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085cc  00000000  00000000  001945cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d264 	.word	0x0800d264

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800d264 	.word	0x0800d264

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b096      	sub	sp, #88	; 0x58
 8000ee4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fe64 	bl	8001bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f901 	bl	80010f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eee:	f000 f961 	bl	80011b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fac7 	bl	8001484 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef6:	f000 fa9b 	bl	8001430 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000efa:	f000 f98b 	bl	8001214 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000efe:	f000 f9ff 	bl	8001300 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000f02:	f000 fa49 	bl	8001398 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  int pin;
  	 double temp_tres = 100;
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b6f      	ldr	r3, [pc, #444]	; (80010c8 <main+0x1e8>)
 8000f0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f10:	f005 fc24 	bl	800675c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f14:	4a6d      	ldr	r2, [pc, #436]	; (80010cc <main+0x1ec>)
 8000f16:	2100      	movs	r1, #0
 8000f18:	486d      	ldr	r0, [pc, #436]	; (80010d0 <main+0x1f0>)
 8000f1a:	f005 fc69 	bl	80067f0 <osThreadNew>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a6c      	ldr	r2, [pc, #432]	; (80010d4 <main+0x1f4>)
 8000f22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f24:	f005 fc3e 	bl	80067a4 <osKernelStart>
	 	//	  TIM3->CCR1 = 1023;
	 	//  else
	 		//  TIM3->CCR1 = 0;

	//  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2c:	486a      	ldr	r0, [pc, #424]	; (80010d8 <main+0x1f8>)
 8000f2e:	f002 fb9d 	bl	800366c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000f32:	2064      	movs	r0, #100	; 0x64
 8000f34:	f000 feb2 	bl	8001c9c <HAL_Delay>
	  double val, resistance, A,B,C;
	  uint16_t raw;
	  	  A = 0.000732;
 8000f38:	a353      	add	r3, pc, #332	; (adr r3, 8001088 <main+0x1a8>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	  	  B = 0.000214;
 8000f42:	a353      	add	r3, pc, #332	; (adr r3, 8001090 <main+0x1b0>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  	  C = 1.07E-07;
 8000f4c:	a352      	add	r3, pc, #328	; (adr r3, 8001098 <main+0x1b8>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	  		  char msg[10];
	  		  	  HAL_ADC_Start(&hadc1);
 8000f56:	4861      	ldr	r0, [pc, #388]	; (80010dc <main+0x1fc>)
 8000f58:	f001 fa0c 	bl	8002374 <HAL_ADC_Start>
	  	  	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	485e      	ldr	r0, [pc, #376]	; (80010dc <main+0x1fc>)
 8000f62:	f001 fac1 	bl	80024e8 <HAL_ADC_PollForConversion>
	  	  	      raw = HAL_ADC_GetValue(&hadc1);
 8000f66:	485d      	ldr	r0, [pc, #372]	; (80010dc <main+0x1fc>)
 8000f68:	f001 fb96 	bl	8002698 <HAL_ADC_GetValue>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
	  	  	      val= (3.3/4096)*raw;
 8000f70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff faee 	bl	8000554 <__aeabi_i2d>
 8000f78:	a349      	add	r3, pc, #292	; (adr r3, 80010a0 <main+0x1c0>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff fb53 	bl	8000628 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  	  	      resistance = val/((3.3-val)/100000);
 8000f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f8e:	a146      	add	r1, pc, #280	; (adr r1, 80010a8 <main+0x1c8>)
 8000f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f94:	f7ff f990 	bl	80002b8 <__aeabi_dsub>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	a343      	add	r3, pc, #268	; (adr r3, 80010b0 <main+0x1d0>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fc69 	bl	800087c <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fb2:	f7ff fc63 	bl	800087c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  	  	      temp = 1/(A+B*log(resistance)+C*pow(log(resistance),3))-272.15;
 8000fbe:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fc2:	f008 f91d 	bl	8009200 <log>
 8000fc6:	ec51 0b10 	vmov	r0, r1, d0
 8000fca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fce:	f7ff fb2b 	bl	8000628 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000fde:	f7ff f96d 	bl	80002bc <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4614      	mov	r4, r2
 8000fe8:	461d      	mov	r5, r3
 8000fea:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fee:	f008 f907 	bl	8009200 <log>
 8000ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8000ff6:	eef0 7a60 	vmov.f32	s15, s1
 8000ffa:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80010b8 <main+0x1d8>
 8000ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8001002:	eef0 0a67 	vmov.f32	s1, s15
 8001006:	f008 f939 	bl	800927c <pow>
 800100a:	ec51 0b10 	vmov	r0, r1, d0
 800100e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001012:	f7ff fb09 	bl	8000628 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff f94d 	bl	80002bc <__adddf3>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <main+0x200>)
 800102c:	f7ff fc26 	bl	800087c <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	a321      	add	r3, pc, #132	; (adr r3, 80010c0 <main+0x1e0>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff f93b 	bl	80002b8 <__aeabi_dsub>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <main+0x204>)
 8001048:	e9c1 2300 	strd	r2, r3, [r1]
	  	  	      sprintf(msg, "%hu , %f , %f\r\n", raw, temp, resistance);
 800104c:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <main+0x204>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	1d3c      	adds	r4, r7, #4
 8001056:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800105a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800105e:	e9cd 2300 	strd	r2, r3, [sp]
 8001062:	462a      	mov	r2, r5
 8001064:	4920      	ldr	r1, [pc, #128]	; (80010e8 <main+0x208>)
 8001066:	4620      	mov	r0, r4
 8001068:	f009 fe92 	bl	800ad90 <siprintf>
	  			 HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f8c6 	bl	8000200 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	1d39      	adds	r1, r7, #4
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	481b      	ldr	r0, [pc, #108]	; (80010ec <main+0x20c>)
 8001080:	f004 fa38 	bl	80054f4 <HAL_UART_Transmit>
  {
 8001084:	e750      	b.n	8000f28 <main+0x48>
 8001086:	bf00      	nop
 8001088:	07c419a0 	.word	0x07c419a0
 800108c:	3f47fc76 	.word	0x3f47fc76
 8001090:	00b02928 	.word	0x00b02928
 8001094:	3f2c0ca6 	.word	0x3f2c0ca6
 8001098:	e820eec1 	.word	0xe820eec1
 800109c:	3e7cb8fb 	.word	0x3e7cb8fb
 80010a0:	66666666 	.word	0x66666666
 80010a4:	3f4a6666 	.word	0x3f4a6666
 80010a8:	66666666 	.word	0x66666666
 80010ac:	400a6666 	.word	0x400a6666
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40f86a00 	.word	0x40f86a00
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40080000 	.word	0x40080000
 80010c0:	66666666 	.word	0x66666666
 80010c4:	40710266 	.word	0x40710266
 80010c8:	40590000 	.word	0x40590000
 80010cc:	0800d2b4 	.word	0x0800d2b4
 80010d0:	08001661 	.word	0x08001661
 80010d4:	20000890 	.word	0x20000890
 80010d8:	48000400 	.word	0x48000400
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	3ff00000 	.word	0x3ff00000
 80010e4:	20000898 	.word	0x20000898
 80010e8:	0800d28c 	.word	0x0800d28c
 80010ec:	20000264 	.word	0x20000264

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b098      	sub	sp, #96	; 0x60
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2248      	movs	r2, #72	; 0x48
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 f9d4 	bl	800a4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001112:	2000      	movs	r0, #0
 8001114:	f002 fc3c 	bl	8003990 <HAL_PWREx_ControlVoltageScaling>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800111e:	f000 faa7 	bl	8001670 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001122:	f002 fc05 	bl	8003930 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <SystemClock_Config+0xc0>)
 8001128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800112c:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <SystemClock_Config+0xc0>)
 800112e:	f023 0318 	bic.w	r3, r3, #24
 8001132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001136:	2314      	movs	r3, #20
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800113a:	2301      	movs	r3, #1
 800113c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800113e:	2301      	movs	r3, #1
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001146:	2360      	movs	r3, #96	; 0x60
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800114e:	2301      	movs	r3, #1
 8001150:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001152:	2301      	movs	r3, #1
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001156:	233c      	movs	r3, #60	; 0x3c
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115a:	2302      	movs	r3, #2
 800115c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fcd4 	bl	8003b18 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001176:	f000 fa7b 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2303      	movs	r3, #3
 8001180:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2105      	movs	r1, #5
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f93c 	bl	8004410 <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800119e:	f000 fa67 	bl	8001670 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011a2:	f003 ff5f 	bl	8005064 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011a6:	bf00      	nop
 80011a8:	3760      	adds	r7, #96	; 0x60
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0a6      	sub	sp, #152	; 0x98
 80011b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2298      	movs	r2, #152	; 0x98
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f009 f973 	bl	800a4ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80011c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80011d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011d8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011da:	2301      	movs	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011e2:	2318      	movs	r3, #24
 80011e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80011f2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80011f6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 fbc6 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001206:	f000 fa33 	bl	8001670 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3798      	adds	r7, #152	; 0x98
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001238:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <MX_ADC1_Init+0xe4>)
 800123a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_ADC1_Init+0xe0>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_ADC1_Init+0xe0>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001256:	2204      	movs	r2, #4
 8001258:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_ADC1_Init+0xe0>)
 800125c:	2200      	movs	r2, #0
 800125e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001262:	2200      	movs	r2, #0
 8001264:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001268:	2201      	movs	r2, #1
 800126a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC1_Init+0xe0>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_ADC1_Init+0xe0>)
 800127c:	2200      	movs	r2, #0
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_ADC1_Init+0xe0>)
 800128a:	2200      	movs	r2, #0
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <MX_ADC1_Init+0xe0>)
 8001298:	f000 ff1a 	bl	80020d0 <HAL_ADC_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012a2:	f000 f9e5 	bl	8001670 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_ADC1_Init+0xe0>)
 80012b2:	f001 fea7 	bl	8003004 <HAL_ADCEx_MultiModeConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012bc:	f000 f9d8 	bl	8001670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_ADC1_Init+0xe8>)
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c4:	2306      	movs	r3, #6
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012cc:	237f      	movs	r3, #127	; 0x7f
 80012ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d0:	2304      	movs	r3, #4
 80012d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_ADC1_Init+0xe0>)
 80012de:	f001 f9e9 	bl	80026b4 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012e8:	f000 f9c2 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200001fc 	.word	0x200001fc
 80012f8:	50040000 	.word	0x50040000
 80012fc:	04300002 	.word	0x04300002

08001300 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <MX_LPUART1_UART_Init+0x94>)
 8001308:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800134a:	f004 f883 	bl	8005454 <HAL_UART_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001354:	f000 f98c 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800135c:	f004 fe4a 	bl	8005ff4 <HAL_UARTEx_SetTxFifoThreshold>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001366:	f000 f983 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800136e:	f004 fe7f 	bl	8006070 <HAL_UARTEx_SetRxFifoThreshold>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001378:	f000 f97a 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_LPUART1_UART_Init+0x90>)
 800137e:	f004 fe00 	bl	8005f82 <HAL_UARTEx_DisableFifoMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001388:	f000 f972 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000264 	.word	0x20000264
 8001394:	40008000 	.word	0x40008000

08001398 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_UART4_Init+0x90>)
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <MX_UART4_Init+0x94>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_UART4_Init+0x90>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_UART4_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_UART4_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_UART4_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_UART4_Init+0x90>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_UART4_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_UART4_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_UART4_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_UART4_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_UART4_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <MX_UART4_Init+0x90>)
 80013e2:	f004 f837 	bl	8005454 <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013ec:	f000 f940 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_UART4_Init+0x90>)
 80013f4:	f004 fdfe 	bl	8005ff4 <HAL_UARTEx_SetTxFifoThreshold>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80013fe:	f000 f937 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MX_UART4_Init+0x90>)
 8001406:	f004 fe33 	bl	8006070 <HAL_UARTEx_SetRxFifoThreshold>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001410:	f000 f92e 	bl	8001670 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_UART4_Init+0x90>)
 8001416:	f004 fdb4 	bl	8005f82 <HAL_UARTEx_DisableFifoMode>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 f926 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200002f4 	.word	0x200002f4
 800142c:	40004c00 	.word	0x40004c00

08001430 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001436:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800143a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800143e:	2206      	movs	r2, #6
 8001440:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001444:	2202      	movs	r2, #2
 8001446:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800145c:	2201      	movs	r2, #1
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001468:	2201      	movs	r2, #1
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800146e:	f002 f917 	bl	80036a0 <HAL_PCD_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 f8fa 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000384 	.word	0x20000384

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <MX_GPIO_Init+0x1c4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a64      	ldr	r2, [pc, #400]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b62      	ldr	r3, [pc, #392]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e2:	4b59      	ldr	r3, [pc, #356]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b56      	ldr	r3, [pc, #344]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <MX_GPIO_Init+0x1c4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a52      	ldr	r2, [pc, #328]	; (8001648 <MX_GPIO_Init+0x1c4>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b50      	ldr	r3, [pc, #320]	; (8001648 <MX_GPIO_Init+0x1c4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <MX_GPIO_Init+0x1c4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <MX_GPIO_Init+0x1c4>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <MX_GPIO_Init+0x1c4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <MX_GPIO_Init+0x1c4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a46      	ldr	r2, [pc, #280]	; (8001648 <MX_GPIO_Init+0x1c4>)
 8001530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <MX_GPIO_Init+0x1c4>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001542:	f002 fad9 	bl	8003af8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154c:	483f      	ldr	r0, [pc, #252]	; (800164c <MX_GPIO_Init+0x1c8>)
 800154e:	f002 f875 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001558:	483d      	ldr	r0, [pc, #244]	; (8001650 <MX_GPIO_Init+0x1cc>)
 800155a:	f002 f86f 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001564:	483b      	ldr	r0, [pc, #236]	; (8001654 <MX_GPIO_Init+0x1d0>)
 8001566:	f002 f869 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	483a      	ldr	r0, [pc, #232]	; (8001658 <MX_GPIO_Init+0x1d4>)
 8001570:	f002 f864 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4834      	ldr	r0, [pc, #208]	; (800165c <MX_GPIO_Init+0x1d8>)
 800158c:	f001 fec4 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4828      	ldr	r0, [pc, #160]	; (800164c <MX_GPIO_Init+0x1c8>)
 80015aa:	f001 feb5 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4822      	ldr	r0, [pc, #136]	; (8001650 <MX_GPIO_Init+0x1cc>)
 80015c8:	f001 fea6 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80015cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	481b      	ldr	r0, [pc, #108]	; (8001654 <MX_GPIO_Init+0x1d0>)
 80015e6:	f001 fe97 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015ea:	2320      	movs	r3, #32
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4816      	ldr	r0, [pc, #88]	; (8001658 <MX_GPIO_Init+0x1d4>)
 80015fe:	f001 fe8b 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <MX_GPIO_Init+0x1d4>)
 800161a:	f001 fe7d 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800161e:	2310      	movs	r3, #16
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800162e:	2302      	movs	r3, #2
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_GPIO_Init+0x1d0>)
 800163a:	f001 fe6d 	bl	8003318 <HAL_GPIO_Init>

}
 800163e:	bf00      	nop
 8001640:	3730      	adds	r7, #48	; 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	48001400 	.word	0x48001400
 8001650:	48001000 	.word	0x48001000
 8001654:	48000400 	.word	0x48000400
 8001658:	48001800 	.word	0x48001800
 800165c:	48000800 	.word	0x48000800

08001660 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f005 f953 	bl	8006914 <osDelay>
 800166e:	e7fb      	b.n	8001668 <StartDefaultTask+0x8>

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_MspInit+0x4c>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_MspInit+0x4c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6613      	str	r3, [r2, #96]	; 0x60
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_MspInit+0x4c>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_MspInit+0x4c>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6593      	str	r3, [r2, #88]	; 0x58
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	210f      	movs	r1, #15
 80016b6:	f06f 0001 	mvn.w	r0, #1
 80016ba:	f001 fe04 	bl	80032c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a15      	ldr	r2, [pc, #84]	; (8001740 <HAL_ADC_MspInit+0x74>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d123      	bne.n	8001736 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_ADC_MspInit+0x78>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_ADC_MspInit+0x78>)
 80016f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_ADC_MspInit+0x78>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_ADC_MspInit+0x78>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_ADC_MspInit+0x78>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_ADC_MspInit+0x78>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001722:	230b      	movs	r3, #11
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_ADC_MspInit+0x7c>)
 8001732:	f001 fdf1 	bl	8003318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	50040000 	.word	0x50040000
 8001744:	40021000 	.word	0x40021000
 8001748:	48000800 	.word	0x48000800

0800174c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0b2      	sub	sp, #200	; 0xc8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2298      	movs	r2, #152	; 0x98
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f008 fe9d 	bl	800a4ac <memset>
  if(huart->Instance==LPUART1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a43      	ldr	r2, [pc, #268]	; (8001884 <HAL_UART_MspInit+0x138>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d13e      	bne.n	80017fa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800177c:	2320      	movs	r3, #32
 800177e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4618      	mov	r0, r3
 800178a:	f003 f8ff 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001794:	f7ff ff6c 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001798:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_UART_MspInit+0x13c>)
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <HAL_UART_MspInit+0x13c>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017a4:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_UART_MspInit+0x13c>)
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b0:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_UART_MspInit+0x13c>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	4a34      	ldr	r2, [pc, #208]	; (8001888 <HAL_UART_MspInit+0x13c>)
 80017b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017bc:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_UART_MspInit+0x13c>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80017c8:	f002 f996 	bl	8003af8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80017cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017e6:	2308      	movs	r3, #8
 80017e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4826      	ldr	r0, [pc, #152]	; (800188c <HAL_UART_MspInit+0x140>)
 80017f4:	f001 fd90 	bl	8003318 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80017f8:	e040      	b.n	800187c <HAL_UART_MspInit+0x130>
  else if(huart->Instance==UART4)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_UART_MspInit+0x144>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d13b      	bne.n	800187c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001804:	2308      	movs	r3, #8
 8001806:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001808:	2300      	movs	r3, #0
 800180a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4618      	mov	r0, r3
 8001812:	f003 f8bb 	bl	800498c <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800181c:	f7ff ff28 	bl	8001670 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x13c>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_UART_MspInit+0x13c>)
 8001826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800182a:	6593      	str	r3, [r2, #88]	; 0x58
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_UART_MspInit+0x13c>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_UART_MspInit+0x13c>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_UART_MspInit+0x13c>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_UART_MspInit+0x13c>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001850:	2303      	movs	r3, #3
 8001852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001868:	2308      	movs	r3, #8
 800186a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001878:	f001 fd4e 	bl	8003318 <HAL_GPIO_Init>
}
 800187c:	bf00      	nop
 800187e:	37c8      	adds	r7, #200	; 0xc8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40008000 	.word	0x40008000
 8001888:	40021000 	.word	0x40021000
 800188c:	48001800 	.word	0x48001800
 8001890:	40004c00 	.word	0x40004c00

08001894 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b4:	d154      	bne.n	8001960 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018ce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018e0:	230a      	movs	r3, #10
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ee:	f001 fd13 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190a:	f001 fd05 	bl	8003318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d114      	bne.n	800195c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800194a:	f002 f8c5 	bl	8003ad8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_PCD_MspInit+0xd4>)
 8001954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800195a:	e001      	b.n	8001960 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800195c:	f002 f8bc 	bl	8003ad8 <HAL_PWREx_EnableVddUSB>
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f95e 	bl	8001c5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019a0:	f006 fbc6 	bl	8008130 <xTaskGetSchedulerState>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d001      	beq.n	80019ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80019aa:	f007 f9ad 	bl	8008d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
	return 1;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_kill>:

int _kill(int pid, int sig)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019cc:	f008 fd36 	bl	800a43c <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2216      	movs	r2, #22
 80019d4:	601a      	str	r2, [r3, #0]
	return -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_exit>:

void _exit (int status)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ea:	f04f 31ff 	mov.w	r1, #4294967295
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffe7 	bl	80019c2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019f4:	e7fe      	b.n	80019f4 <_exit+0x12>

080019f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e00a      	b.n	8001a1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a08:	f3af 8000 	nop.w
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	b2ca      	uxtb	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbf0      	blt.n	8001a08 <_read+0x12>
	}

return len;
 8001a26:	687b      	ldr	r3, [r7, #4]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e009      	b.n	8001a56 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	60ba      	str	r2, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbf1      	blt.n	8001a42 <_write+0x12>
	}
	return len;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_close>:

int _close(int file)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a90:	605a      	str	r2, [r3, #4]
	return 0;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_isatty>:

int _isatty(int file)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
	return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f008 fc9c 	bl	800a43c <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20050000 	.word	0x20050000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	200008a0 	.word	0x200008a0
 8001b38:	200021c0 	.word	0x200021c0

08001b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b64:	f7ff ffea 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	; (8001ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <LoopForever+0xe>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	; (8001bac <LoopForever+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f008 fc5b 	bl	800a448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b92:	f7ff f9a5 	bl	8000ee0 <main>

08001b96 <LoopForever>:

LoopForever:
    b LoopForever
 8001b96:	e7fe      	b.n	8001b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ba4:	0800d764 	.word	0x0800d764
  ldr r2, =_sbss
 8001ba8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001bac:	200021c0 	.word	0x200021c0

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>

08001bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f001 fb77 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f80e 	bl	8001be4 <HAL_InitTick>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	71fb      	strb	r3, [r7, #7]
 8001bd2:	e001      	b.n	8001bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd4:	f7ff fd52 	bl	800167c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_InitTick+0x6c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_InitTick+0x70>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_InitTick+0x6c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fb75 	bl	80032fe <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d809      	bhi.n	8001c34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f001 fb4d 	bl	80032c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_InitTick+0x74>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e007      	b.n	8001c44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e004      	b.n	8001c44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e001      	b.n	8001c44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	200008a4 	.word	0x200008a4

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200008a4 	.word	0x200008a4

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3360      	adds	r3, #96	; 0x60
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <LL_ADC_SetOffset+0x44>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	03fff000 	.word	0x03fff000

08001d94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3360      	adds	r3, #96	; 0x60
 8001da2:	461a      	mov	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3360      	adds	r3, #96	; 0x60
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	615a      	str	r2, [r3, #20]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b087      	sub	sp, #28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3330      	adds	r3, #48	; 0x30
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	4413      	add	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	211f      	movs	r1, #31
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	401a      	ands	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 011f 	and.w	r1, r3, #31
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b087      	sub	sp, #28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0e5b      	lsrs	r3, r3, #25
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	0d1b      	lsrs	r3, r3, #20
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2107      	movs	r1, #7
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	0d1b      	lsrs	r3, r3, #20
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0318 	and.w	r3, r3, #24
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f14:	40d9      	lsrs	r1, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	400b      	ands	r3, r1
 8001f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	0007ffff 	.word	0x0007ffff

08001f38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 031f 	and.w	r3, r3, #31
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6093      	str	r3, [r2, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800201c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <LL_ADC_IsEnabled+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_ADC_IsEnabled+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800206a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800206e:	f043 0204 	orr.w	r2, r3, #4
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d101      	bne.n	800209a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e134      	b.n	8002354 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fae7 	bl	80016cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff3f 	bl	8001f94 <LL_ADC_IsDeepPowerDownEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff25 	bl	8001f70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff5a 	bl	8001fe4 <LL_ADC_IsInternalRegulatorEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff3e 	bl	8001fbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002140:	4b86      	ldr	r3, [pc, #536]	; (800235c <HAL_ADC_Init+0x28c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	4a86      	ldr	r2, [pc, #536]	; (8002360 <HAL_ADC_Init+0x290>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002154:	e002      	b.n	800215c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff3c 	bl	8001fe4 <LL_ADC_IsInternalRegulatorEnabled>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff75 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 8002198:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80cd 	bne.w	8002342 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 80c9 	bne.w	8002342 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b8:	f043 0202 	orr.w	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff35 	bl	8002034 <LL_ADC_IsEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d110      	bne.n	80021f2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d0:	4864      	ldr	r0, [pc, #400]	; (8002364 <HAL_ADC_Init+0x294>)
 80021d2:	f7ff ff2f 	bl	8002034 <LL_ADC_IsEnabled>
 80021d6:	4604      	mov	r4, r0
 80021d8:	4863      	ldr	r0, [pc, #396]	; (8002368 <HAL_ADC_Init+0x298>)
 80021da:	f7ff ff2b 	bl	8002034 <LL_ADC_IsEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	4323      	orrs	r3, r4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4619      	mov	r1, r3
 80021ec:	485f      	ldr	r0, [pc, #380]	; (800236c <HAL_ADC_Init+0x29c>)
 80021ee:	f7ff fd79 	bl	8001ce4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7e5b      	ldrb	r3, [r3, #25]
 80021f6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021fc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002202:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002208:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	3b01      	subs	r3, #1
 8002226:	045b      	lsls	r3, r3, #17
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_ADC_Init+0x2a0>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	69b9      	ldr	r1, [r7, #24]
 800225a:	430b      	orrs	r3, r1
 800225c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff0d 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 8002268:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff1a 	bl	80020a8 <LL_ADC_INJ_IsConversionOngoing>
 8002274:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d140      	bne.n	80022fe <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d13d      	bne.n	80022fe <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7e1b      	ldrb	r3, [r3, #24]
 800228a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800228c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002294:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a4:	f023 0306 	bic.w	r3, r3, #6
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	69b9      	ldr	r1, [r7, #24]
 80022ae:	430b      	orrs	r3, r1
 80022b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d118      	bne.n	80022ee <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d8:	4311      	orrs	r1, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022de:	430a      	orrs	r2, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	611a      	str	r2, [r3, #16]
 80022ec:	e007      	b.n	80022fe <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10c      	bne.n	8002320 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f023 010f 	bic.w	r1, r3, #15
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
 800231e:	e007      	b.n	8002330 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020f 	bic.w	r2, r2, #15
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f023 0303 	bic.w	r3, r3, #3
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
 8002340:	e007      	b.n	8002352 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002352:	7ffb      	ldrb	r3, [r7, #31]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3724      	adds	r7, #36	; 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	20000000 	.word	0x20000000
 8002360:	053e2d63 	.word	0x053e2d63
 8002364:	50040000 	.word	0x50040000
 8002368:	50040100 	.word	0x50040100
 800236c:	50040300 	.word	0x50040300
 8002370:	fff0c007 	.word	0xfff0c007

08002374 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237c:	4857      	ldr	r0, [pc, #348]	; (80024dc <HAL_ADC_Start+0x168>)
 800237e:	f7ff fddb 	bl	8001f38 <LL_ADC_GetMultimode>
 8002382:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe7a 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 809c 	bne.w	80024ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_Start+0x30>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e097      	b.n	80024d4 <HAL_ADC_Start+0x160>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fd7d 	bl	8002eac <ADC_Enable>
 80023b2:	4603      	mov	r3, r0
 80023b4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 8083 	bne.w	80024c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a42      	ldr	r2, [pc, #264]	; (80024e0 <HAL_ADC_Start+0x16c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d002      	beq.n	80023e2 <HAL_ADC_Start+0x6e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	e000      	b.n	80023e4 <HAL_ADC_Start+0x70>
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_ADC_Start+0x170>)
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d002      	beq.n	80023f2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240a:	d106      	bne.n	800241a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	f023 0206 	bic.w	r2, r3, #6
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	; 0x5c
 8002418:	e002      	b.n	8002420 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	221c      	movs	r2, #28
 8002426:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <HAL_ADC_Start+0x16c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d002      	beq.n	8002440 <HAL_ADC_Start+0xcc>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	e000      	b.n	8002442 <HAL_ADC_Start+0xce>
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_ADC_Start+0x170>)
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	4293      	cmp	r3, r2
 8002448:	d008      	beq.n	800245c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	2b05      	cmp	r3, #5
 8002454:	d002      	beq.n	800245c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b09      	cmp	r3, #9
 800245a:	d114      	bne.n	8002486 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002472:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fdeb 	bl	800205a <LL_ADC_REG_StartConversion>
 8002484:	e025      	b.n	80024d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_ADC_Start+0x16c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d002      	beq.n	80024a2 <HAL_ADC_Start+0x12e>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	e000      	b.n	80024a4 <HAL_ADC_Start+0x130>
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_ADC_Start+0x170>)
 80024a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00f      	beq.n	80024d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	659a      	str	r2, [r3, #88]	; 0x58
 80024c2:	e006      	b.n	80024d2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80024cc:	e001      	b.n	80024d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
 80024d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	50040300 	.word	0x50040300
 80024e0:	50040100 	.word	0x50040100
 80024e4:	50040000 	.word	0x50040000

080024e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f2:	4866      	ldr	r0, [pc, #408]	; (800268c <HAL_ADC_PollForConversion+0x1a4>)
 80024f4:	f7ff fd20 	bl	8001f38 <LL_ADC_GetMultimode>
 80024f8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d102      	bne.n	8002508 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002502:	2308      	movs	r3, #8
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e02a      	b.n	800255e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d002      	beq.n	800251a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b09      	cmp	r3, #9
 8002518:	d111      	bne.n	800253e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0a4      	b.n	8002682 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002538:	2304      	movs	r3, #4
 800253a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800253c:	e00f      	b.n	800255e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800253e:	4853      	ldr	r0, [pc, #332]	; (800268c <HAL_ADC_PollForConversion+0x1a4>)
 8002540:	f7ff fd08 	bl	8001f54 <LL_ADC_GetMultiDMATransfer>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e093      	b.n	8002682 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800255a:	2304      	movs	r3, #4
 800255c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800255e:	f7ff fb91 	bl	8001c84 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002564:	e021      	b.n	80025aa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d01d      	beq.n	80025aa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800256e:	f7ff fb89 	bl	8001c84 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <HAL_ADC_PollForConversion+0x9c>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d112      	bne.n	80025aa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10b      	bne.n	80025aa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f043 0204 	orr.w	r2, r3, #4
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e06b      	b.n	8002682 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0d6      	beq.n	8002566 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fc27 	bl	8001e1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01c      	beq.n	800260e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7e5b      	ldrb	r3, [r3, #25]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d118      	bne.n	800260e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d111      	bne.n	800260e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_ADC_PollForConversion+0x1a8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d002      	beq.n	800261e <HAL_ADC_PollForConversion+0x136>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e000      	b.n	8002620 <HAL_ADC_PollForConversion+0x138>
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_ADC_PollForConversion+0x1ac>)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	4293      	cmp	r3, r2
 8002626:	d008      	beq.n	800263a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d002      	beq.n	800263a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b09      	cmp	r3, #9
 8002638:	d104      	bne.n	8002644 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	e00c      	b.n	800265e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_ADC_PollForConversion+0x1a8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d002      	beq.n	8002654 <HAL_ADC_PollForConversion+0x16c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e000      	b.n	8002656 <HAL_ADC_PollForConversion+0x16e>
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_ADC_PollForConversion+0x1ac>)
 8002656:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d104      	bne.n	800266e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2208      	movs	r2, #8
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e008      	b.n	8002680 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	220c      	movs	r2, #12
 800267e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	50040300 	.word	0x50040300
 8002690:	50040100 	.word	0x50040100
 8002694:	50040000 	.word	0x50040000

08002698 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0b6      	sub	sp, #216	; 0xd8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x22>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e3d5      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x7ce>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fccd 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 83ba 	bne.w	8002e64 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d824      	bhi.n	8002742 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	3b02      	subs	r3, #2
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d81b      	bhi.n	800273a <HAL_ADC_ConfigChannel+0x86>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_ADC_ConfigChannel+0x54>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002719 	.word	0x08002719
 800270c:	08002721 	.word	0x08002721
 8002710:	08002729 	.word	0x08002729
 8002714:	08002731 	.word	0x08002731
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	220c      	movs	r2, #12
 800271c:	605a      	str	r2, [r3, #4]
          break;
 800271e:	e011      	b.n	8002744 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2212      	movs	r2, #18
 8002724:	605a      	str	r2, [r3, #4]
          break;
 8002726:	e00d      	b.n	8002744 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2218      	movs	r2, #24
 800272c:	605a      	str	r2, [r3, #4]
          break;
 800272e:	e009      	b.n	8002744 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002736:	605a      	str	r2, [r3, #4]
          break;
 8002738:	e004      	b.n	8002744 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2206      	movs	r2, #6
 800273e:	605a      	str	r2, [r3, #4]
          break;
 8002740:	e000      	b.n	8002744 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002742:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	f7ff fb76 	bl	8001e42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc91 	bl	8002082 <LL_ADC_REG_IsConversionOngoing>
 8002760:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fc9d 	bl	80020a8 <LL_ADC_INJ_IsConversionOngoing>
 800276e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 81c1 	bne.w	8002afe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800277c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 81bc 	bne.w	8002afe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800278e:	d10f      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2200      	movs	r2, #0
 800279a:	4619      	mov	r1, r3
 800279c:	f7ff fb7d 	bl	8001e9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fb24 	bl	8001df6 <LL_ADC_SetSamplingTimeCommonConfig>
 80027ae:	e00e      	b.n	80027ce <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	461a      	mov	r2, r3
 80027be:	f7ff fb6c 	bl	8001e9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fb14 	bl	8001df6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	08db      	lsrs	r3, r3, #3
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00a      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6919      	ldr	r1, [r3, #16]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002800:	f7ff faa4 	bl	8001d4c <LL_ADC_SetOffset>
 8002804:	e17b      	b.n	8002afe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fac1 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x17e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fab6 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	e01e      	b.n	8002870 <HAL_ADC_ConfigChannel+0x1bc>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff faab 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002860:	2320      	movs	r3, #32
 8002862:	e004      	b.n	800286e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d4>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	e018      	b.n	80028ba <HAL_ADC_ConfigChannel+0x206>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800289c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e004      	b.n	80028ba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80028b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d106      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fa7a 	bl	8001dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fa5e 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x244>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fa53 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 021f 	and.w	r2, r3, #31
 80028f6:	e01e      	b.n	8002936 <HAL_ADC_ConfigChannel+0x282>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fa48 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800291a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800291e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e004      	b.n	8002934 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800292a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x29a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e018      	b.n	8002980 <HAL_ADC_ConfigChannel+0x2cc>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002962:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800296a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e004      	b.n	8002980 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002976:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fa17 	bl	8001dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f9fb 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <HAL_ADC_ConfigChannel+0x30a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2102      	movs	r1, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f9f0 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	e01e      	b.n	80029fc <HAL_ADC_ConfigChannel+0x348>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f9e5 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80029f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x360>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	e016      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x38e>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e004      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d106      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f9b6 	bl	8001dc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2103      	movs	r1, #3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f99a 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x3cc>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2103      	movs	r1, #3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f98f 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	f003 021f 	and.w	r2, r3, #31
 8002a7e:	e017      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x3fc>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2103      	movs	r1, #3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f984 	bl	8001d94 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a9a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e003      	b.n	8002aae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x414>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	e011      	b.n	8002aec <HAL_ADC_ConfigChannel+0x438>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2103      	movs	r1, #3
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f961 	bl	8001dc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fa96 	bl	8002034 <LL_ADC_IsEnabled>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 8140 	bne.w	8002d90 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f7ff f9e7 	bl	8001ef0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a8f      	ldr	r2, [pc, #572]	; (8002d64 <HAL_ADC_ConfigChannel+0x6b0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	f040 8131 	bne.w	8002d90 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x4a2>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	3301      	adds	r3, #1
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	bf94      	ite	ls
 8002b4e:	2301      	movls	r3, #1
 8002b50:	2300      	movhi	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e019      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x4d6>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b66:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e003      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d079      	beq.n	8002c82 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x4f6>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba8:	e015      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x522>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	069b      	lsls	r3, r3, #26
 8002bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x542>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	e017      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x572>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	ea42 0103 	orr.w	r1, r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x598>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 021f 	and.w	r2, r3, #31
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	e018      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x5ca>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	e081      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x5ea>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9c:	e015      	b.n	8002cca <HAL_ADC_ConfigChannel+0x616>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	069b      	lsls	r3, r3, #26
 8002cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x636>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	e017      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x666>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	61fb      	str	r3, [r7, #28]
  return result;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002d02:	2320      	movs	r3, #32
 8002d04:	e003      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	ea42 0103 	orr.w	r1, r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x692>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 021f 	and.w	r2, r3, #31
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b1e      	subs	r3, #30
 8002d3e:	051b      	lsls	r3, r3, #20
 8002d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d44:	e01e      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x6d0>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	613b      	str	r3, [r7, #16]
  return result;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e006      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x6bc>
 8002d62:	bf00      	nop
 8002d64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b1e      	subs	r3, #30
 8002d7e:	051b      	lsls	r3, r3, #20
 8002d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	430b      	orrs	r3, r1
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	6892      	ldr	r2, [r2, #8]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7ff f885 	bl	8001e9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_ADC_ConfigChannel+0x7d8>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d06c      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d9c:	483c      	ldr	r0, [pc, #240]	; (8002e90 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d9e:	f7fe ffc7 	bl	8001d30 <LL_ADC_GetCommonPathInternalCh>
 8002da2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <HAL_ADC_ConfigChannel+0x7e0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d127      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d121      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <HAL_ADC_ConfigChannel+0x7e4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d157      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dce:	4619      	mov	r1, r3
 8002dd0:	482f      	ldr	r0, [pc, #188]	; (8002e90 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dd2:	f7fe ff9a 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_ADC_ConfigChannel+0x7e8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002df0:	e002      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f9      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dfe:	e03a      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d113      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x77e>
 8002e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1f      	ldr	r2, [pc, #124]	; (8002e98 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d12a      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4819      	ldr	r0, [pc, #100]	; (8002e90 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e2c:	f7fe ff6d 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e30:	e021      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d11c      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d116      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d111      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e5e:	f7fe ff54 	bl	8001d0a <LL_ADC_SetCommonPathInternalCh>
 8002e62:	e008      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	37d8      	adds	r7, #216	; 0xd8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	80080000 	.word	0x80080000
 8002e90:	50040300 	.word	0x50040300
 8002e94:	c7520000 	.word	0xc7520000
 8002e98:	50040000 	.word	0x50040000
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	053e2d63 	.word	0x053e2d63
 8002ea4:	cb840000 	.word	0xcb840000
 8002ea8:	80000001 	.word	0x80000001

08002eac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff f8b9 	bl	8002034 <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d169      	bne.n	8002f9c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <ADC_Enable+0xfc>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e055      	b.n	8002f9e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f888 	bl	800200c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002efc:	482b      	ldr	r0, [pc, #172]	; (8002fac <ADC_Enable+0x100>)
 8002efe:	f7fe ff17 	bl	8001d30 <LL_ADC_GetCommonPathInternalCh>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <ADC_Enable+0x104>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <ADC_Enable+0x108>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f26:	e002      	b.n	8002f2e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f9      	bne.n	8002f28 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f34:	f7fe fea6 	bl	8001c84 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3a:	e028      	b.n	8002f8e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f877 	bl	8002034 <LL_ADC_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff f85b 	bl	800200c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f56:	f7fe fe95 	bl	8001c84 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d914      	bls.n	8002f8e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d00d      	beq.n	8002f8e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d1cf      	bne.n	8002f3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	8000003f 	.word	0x8000003f
 8002fac:	50040300 	.word	0x50040300
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	053e2d63 	.word	0x053e2d63

08002fb8 <LL_ADC_IsEnabled>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <LL_ADC_IsEnabled+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_ADC_IsEnabled+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_REG_IsConversionOngoing>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b0a1      	sub	sp, #132	; 0x84
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800301e:	2302      	movs	r3, #2
 8003020:	e089      	b.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800302a:	2300      	movs	r3, #0
 800302c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800302e:	2300      	movs	r3, #0
 8003030:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a42      	ldr	r2, [pc, #264]	; (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d102      	bne.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e001      	b.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e068      	b.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ffb9 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 800306c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ffb3 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d14a      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800307e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003080:	2b00      	cmp	r3, #0
 8003082:	d147      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003086:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d027      	beq.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030a2:	035b      	lsls	r3, r3, #13
 80030a4:	430b      	orrs	r3, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ac:	4824      	ldr	r0, [pc, #144]	; (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80030ae:	f7ff ff83 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030b2:	4604      	mov	r4, r0
 80030b4:	4823      	ldr	r0, [pc, #140]	; (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030b6:	f7ff ff7f 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4323      	orrs	r3, r4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d132      	bne.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030ca:	f023 030f 	bic.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	431a      	orrs	r2, r3
 80030da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030de:	e023      	b.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	4814      	ldr	r0, [pc, #80]	; (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80030ee:	f7ff ff63 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4813      	ldr	r0, [pc, #76]	; (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030f6:	f7ff ff5f 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4323      	orrs	r3, r4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d112      	bne.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800310a:	f023 030f 	bic.w	r3, r3, #15
 800310e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003110:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003112:	e009      	b.n	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003126:	e000      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003128:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003132:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003136:	4618      	mov	r0, r3
 8003138:	3784      	adds	r7, #132	; 0x84
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop
 8003140:	50040000 	.word	0x50040000
 8003144:	50040100 	.word	0x50040100
 8003148:	50040300 	.word	0x50040300

0800314c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__NVIC_GetPriorityGrouping+0x18>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0307 	and.w	r3, r3, #7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db0a      	blt.n	80031da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	490c      	ldr	r1, [pc, #48]	; (80031fc <__NVIC_SetPriority+0x4c>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d8:	e00a      	b.n	80031f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <__NVIC_SetPriority+0x50>)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3b04      	subs	r3, #4
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	761a      	strb	r2, [r3, #24]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f1c3 0307 	rsb	r3, r3, #7
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf28      	it	cs
 8003222:	2304      	movcs	r3, #4
 8003224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3304      	adds	r3, #4
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <NVIC_EncodePriority+0x30>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3b03      	subs	r3, #3
 8003232:	e000      	b.n	8003236 <NVIC_EncodePriority+0x32>
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43d9      	mvns	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	4313      	orrs	r3, r2
         );
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f7ff ff8e 	bl	80031b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff47 	bl	800314c <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff5c 	bl	8003194 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff8e 	bl	8003204 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5d 	bl	80031b0 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffb0 	bl	800326c <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003326:	e166      	b.n	80035f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8158 	beq.w	80035f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d005      	beq.n	8003358 <HAL_GPIO_Init+0x40>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d130      	bne.n	80033ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800338e:	2201      	movs	r2, #1
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f003 0201 	and.w	r2, r3, #1
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d017      	beq.n	80033f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d123      	bne.n	800344a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	08da      	lsrs	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3208      	adds	r2, #8
 8003444:	6939      	ldr	r1, [r7, #16]
 8003446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0203 	and.w	r2, r3, #3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 80b2 	beq.w	80035f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348c:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_GPIO_Init+0x2fc>)
 800348e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003490:	4a60      	ldr	r2, [pc, #384]	; (8003614 <HAL_GPIO_Init+0x2fc>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6613      	str	r3, [r2, #96]	; 0x60
 8003498:	4b5e      	ldr	r3, [pc, #376]	; (8003614 <HAL_GPIO_Init+0x2fc>)
 800349a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034a4:	4a5c      	ldr	r2, [pc, #368]	; (8003618 <HAL_GPIO_Init+0x300>)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	3302      	adds	r3, #2
 80034ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034ce:	d02b      	beq.n	8003528 <HAL_GPIO_Init+0x210>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_GPIO_Init+0x304>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d025      	beq.n	8003524 <HAL_GPIO_Init+0x20c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a51      	ldr	r2, [pc, #324]	; (8003620 <HAL_GPIO_Init+0x308>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01f      	beq.n	8003520 <HAL_GPIO_Init+0x208>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a50      	ldr	r2, [pc, #320]	; (8003624 <HAL_GPIO_Init+0x30c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d019      	beq.n	800351c <HAL_GPIO_Init+0x204>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a4f      	ldr	r2, [pc, #316]	; (8003628 <HAL_GPIO_Init+0x310>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_GPIO_Init+0x200>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_GPIO_Init+0x314>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00d      	beq.n	8003514 <HAL_GPIO_Init+0x1fc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a4d      	ldr	r2, [pc, #308]	; (8003630 <HAL_GPIO_Init+0x318>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <HAL_GPIO_Init+0x1f8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a4c      	ldr	r2, [pc, #304]	; (8003634 <HAL_GPIO_Init+0x31c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_GPIO_Init+0x1f4>
 8003508:	2307      	movs	r3, #7
 800350a:	e00e      	b.n	800352a <HAL_GPIO_Init+0x212>
 800350c:	2308      	movs	r3, #8
 800350e:	e00c      	b.n	800352a <HAL_GPIO_Init+0x212>
 8003510:	2306      	movs	r3, #6
 8003512:	e00a      	b.n	800352a <HAL_GPIO_Init+0x212>
 8003514:	2305      	movs	r3, #5
 8003516:	e008      	b.n	800352a <HAL_GPIO_Init+0x212>
 8003518:	2304      	movs	r3, #4
 800351a:	e006      	b.n	800352a <HAL_GPIO_Init+0x212>
 800351c:	2303      	movs	r3, #3
 800351e:	e004      	b.n	800352a <HAL_GPIO_Init+0x212>
 8003520:	2302      	movs	r3, #2
 8003522:	e002      	b.n	800352a <HAL_GPIO_Init+0x212>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_GPIO_Init+0x212>
 8003528:	2300      	movs	r3, #0
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	f002 0203 	and.w	r2, r2, #3
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	4093      	lsls	r3, r2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800353a:	4937      	ldr	r1, [pc, #220]	; (8003618 <HAL_GPIO_Init+0x300>)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003548:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_GPIO_Init+0x320>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800356c:	4a32      	ldr	r2, [pc, #200]	; (8003638 <HAL_GPIO_Init+0x320>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <HAL_GPIO_Init+0x320>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003596:	4a28      	ldr	r2, [pc, #160]	; (8003638 <HAL_GPIO_Init+0x320>)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_GPIO_Init+0x320>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035c0:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <HAL_GPIO_Init+0x320>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_GPIO_Init+0x320>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <HAL_GPIO_Init+0x320>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3301      	adds	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f ae91 	bne.w	8003328 <HAL_GPIO_Init+0x10>
  }
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000
 8003618:	40010000 	.word	0x40010000
 800361c:	48000400 	.word	0x48000400
 8003620:	48000800 	.word	0x48000800
 8003624:	48000c00 	.word	0x48000c00
 8003628:	48001000 	.word	0x48001000
 800362c:	48001400 	.word	0x48001400
 8003630:	48001800 	.word	0x48001800
 8003634:	48001c00 	.word	0x48001c00
 8003638:	40010400 	.word	0x40010400

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003658:	e002      	b.n	8003660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	041a      	lsls	r2, r3, #16
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43d9      	mvns	r1, r3
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	400b      	ands	r3, r1
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b08f      	sub	sp, #60	; 0x3c
 80036a4:	af0a      	add	r7, sp, #40	; 0x28
 80036a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e116      	b.n	80038e0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fe f8e1 	bl	8001894 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2203      	movs	r2, #3
 80036d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 fd75 	bl	80061e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	687e      	ldr	r6, [r7, #4]
 80036fe:	466d      	mov	r5, sp
 8003700:	f106 0410 	add.w	r4, r6, #16
 8003704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003710:	e885 0003 	stmia.w	r5, {r0, r1}
 8003714:	1d33      	adds	r3, r6, #4
 8003716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003718:	6838      	ldr	r0, [r7, #0]
 800371a:	f002 fd35 	bl	8006188 <USB_CoreInit>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0d7      	b.n	80038e0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fd63 	bl	8006202 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e04a      	b.n	80037d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	333d      	adds	r3, #61	; 0x3d
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	333c      	adds	r3, #60	; 0x3c
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	b298      	uxth	r0, r3
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	3344      	adds	r3, #68	; 0x44
 800377e:	4602      	mov	r2, r0
 8003780:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3340      	adds	r3, #64	; 0x40
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3348      	adds	r3, #72	; 0x48
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	334c      	adds	r3, #76	; 0x4c
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3354      	adds	r3, #84	; 0x54
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	3301      	adds	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d3af      	bcc.n	8003742 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e044      	b.n	8003872 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	3301      	adds	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d3b5      	bcc.n	80037e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	687e      	ldr	r6, [r7, #4]
 8003884:	466d      	mov	r5, sp
 8003886:	f106 0410 	add.w	r4, r6, #16
 800388a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800388c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800388e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003896:	e885 0003 	stmia.w	r5, {r0, r1}
 800389a:	1d33      	adds	r3, r6, #4
 800389c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800389e:	6838      	ldr	r0, [r7, #0]
 80038a0:	f002 fcfc 	bl	800629c <USB_DevInit>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e014      	b.n	80038e0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f80a 	bl	80038e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 fea8 	bl	800662e <USB_DevDisconnect>

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391a:	f043 0303 	orr.w	r3, r3, #3
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a04      	ldr	r2, [pc, #16]	; (800394c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800393a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40007000 	.word	0x40007000

08003950 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d102      	bne.n	8003968 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003966:	e00b      	b.n	8003980 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_PWREx_GetVoltageRange+0x3c>)
 800396a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003976:	d102      	bne.n	800397e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800397c:	e000      	b.n	8003980 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800397e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40007000 	.word	0x40007000

08003990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d141      	bne.n	8003a22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800399e:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039aa:	d131      	bne.n	8003a10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039ac:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b2:	4a46      	ldr	r2, [pc, #280]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039bc:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039c4:	4a41      	ldr	r2, [pc, #260]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80039cc:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2232      	movs	r2, #50	; 0x32
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	4a3f      	ldr	r2, [pc, #252]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	0c9b      	lsrs	r3, r3, #18
 80039de:	3301      	adds	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039e2:	e002      	b.n	80039ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ea:	4b38      	ldr	r3, [pc, #224]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f6:	d102      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f2      	bne.n	80039e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039fe:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d158      	bne.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e057      	b.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a10:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a16:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a20:	e04d      	b.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d141      	bne.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a36:	d131      	bne.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a3e:	4a23      	ldr	r2, [pc, #140]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a48:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2232      	movs	r2, #50	; 0x32
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9b      	lsrs	r3, r3, #18
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a6e:	e002      	b.n	8003a76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a82:	d102      	bne.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f2      	bne.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a96:	d112      	bne.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e011      	b.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003aac:	e007      	b.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003abc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	431bde83 	.word	0x431bde83

08003ad8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae6:	6053      	str	r3, [r2, #4]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40007000 	.word	0x40007000

08003af8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b06:	6053      	str	r3, [r2, #4]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40007000 	.word	0x40007000

08003b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f000 bc68 	b.w	80043fc <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2c:	4b97      	ldr	r3, [pc, #604]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b36:	4b95      	ldr	r3, [pc, #596]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80e6 	beq.w	8003d1a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_RCC_OscConfig+0x4c>
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	f040 808d 	bne.w	8003c76 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 8089 	bne.w	8003c76 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b64:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <HAL_RCC_OscConfig+0x66>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f000 bc3f 	b.w	80043fc <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b82:	4b82      	ldr	r3, [pc, #520]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <HAL_RCC_OscConfig+0x80>
 8003b8e:	4b7f      	ldr	r3, [pc, #508]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b96:	e005      	b.n	8003ba4 <HAL_RCC_OscConfig+0x8c>
 8003b98:	4b7c      	ldr	r3, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d224      	bcs.n	8003bf2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fe2d 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f000 bc1f 	b.w	80043fc <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bbe:	4b73      	ldr	r3, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a72      	ldr	r2, [pc, #456]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bc4:	f043 0308 	orr.w	r3, r3, #8
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	496d      	ldr	r1, [pc, #436]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bdc:	4b6b      	ldr	r3, [pc, #428]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	4968      	ldr	r1, [pc, #416]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
 8003bf0:	e025      	b.n	8003c3e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf2:	4b66      	ldr	r3, [pc, #408]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a65      	ldr	r2, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003bf8:	f043 0308 	orr.w	r3, r3, #8
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	4960      	ldr	r1, [pc, #384]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c10:	4b5e      	ldr	r3, [pc, #376]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	495b      	ldr	r1, [pc, #364]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fdec 	bl	800480c <RCC_SetFlashLatencyFromMSIRange>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e3de      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c3e:	f000 fd21 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	4950      	ldr	r1, [pc, #320]	; (8003d90 <HAL_RCC_OscConfig+0x278>)
 8003c50:	5ccb      	ldrb	r3, [r1, r3]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a4e      	ldr	r2, [pc, #312]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd ffbe 	bl	8001be4 <HAL_InitTick>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d052      	beq.n	8003d18 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	e3c2      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d032      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c7e:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fffb 	bl	8001c84 <HAL_GetTick>
 8003c8e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c92:	f7fd fff7 	bl	8001c84 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e3ab      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ca4:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb0:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003cb6:	f043 0308 	orr.w	r3, r3, #8
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	4930      	ldr	r1, [pc, #192]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cce:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	492b      	ldr	r1, [pc, #172]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
 8003ce2:	e01a      	b.n	8003d1a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ce4:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cf0:	f7fd ffc8 	bl	8001c84 <HAL_GetTick>
 8003cf4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf8:	f7fd ffc4 	bl	8001c84 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e378      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x1e0>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d073      	beq.n	8003e0e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_OscConfig+0x220>
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d10e      	bne.n	8003d50 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d063      	beq.n	8003e0c <HAL_RCC_OscConfig+0x2f4>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d15f      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e355      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x250>
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e025      	b.n	8003db4 <HAL_RCC_OscConfig+0x29c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d70:	d114      	bne.n	8003d9c <HAL_RCC_OscConfig+0x284>
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a02      	ldr	r2, [pc, #8]	; (8003d8c <HAL_RCC_OscConfig+0x274>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e013      	b.n	8003db4 <HAL_RCC_OscConfig+0x29c>
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	0800d2d8 	.word	0x0800d2d8
 8003d94:	20000000 	.word	0x20000000
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	4b8f      	ldr	r3, [pc, #572]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a8e      	ldr	r2, [pc, #568]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b8c      	ldr	r3, [pc, #560]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a8b      	ldr	r2, [pc, #556]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd ff62 	bl	8001c84 <HAL_GetTick>
 8003dc0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fd ff5e 	bl	8001c84 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e312      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x2ac>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd ff4e 	bl	8001c84 <HAL_GetTick>
 8003de8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fd ff4a 	bl	8001c84 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e2fe      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dfe:	4b77      	ldr	r3, [pc, #476]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x2d4>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d060      	beq.n	8003edc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_OscConfig+0x314>
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d119      	bne.n	8003e5a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d116      	bne.n	8003e5a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e2c:	4b6b      	ldr	r3, [pc, #428]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_OscConfig+0x32c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e2db      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b65      	ldr	r3, [pc, #404]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	4962      	ldr	r1, [pc, #392]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e58:	e040      	b.n	8003edc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d023      	beq.n	8003eaa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e62:	4b5e      	ldr	r3, [pc, #376]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5d      	ldr	r2, [pc, #372]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fd ff09 	bl	8001c84 <HAL_GetTick>
 8003e72:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e76:	f7fd ff05 	bl	8001c84 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e2b9      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e88:	4b54      	ldr	r3, [pc, #336]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e94:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	494e      	ldr	r1, [pc, #312]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
 8003ea8:	e018      	b.n	8003edc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a4b      	ldr	r2, [pc, #300]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd fee5 	bl	8001c84 <HAL_GetTick>
 8003eba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebe:	f7fd fee1 	bl	8001c84 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e295      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8082 	beq.w	8003fee <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d05f      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d037      	beq.n	8003f78 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e26d      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01b      	beq.n	8003f62 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f30:	4a2a      	ldr	r2, [pc, #168]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f3a:	f7fd fea3 	bl	8001c84 <HAL_GetTick>
 8003f3e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f42:	f7fd fe9f 	bl	8001c84 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b11      	cmp	r3, #17
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e253      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f54:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ef      	bne.n	8003f42 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003f62:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f68:	f023 0210 	bic.w	r2, r3, #16
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	491a      	ldr	r1, [pc, #104]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f78:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fd fe7c 	bl	8001c84 <HAL_GetTick>
 8003f8c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fd fe78 	bl	8001c84 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b11      	cmp	r3, #17
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e22c      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ef      	beq.n	8003f90 <HAL_RCC_OscConfig+0x478>
 8003fb0:	e01d      	b.n	8003fee <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb8:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fd fe5f 	bl	8001c84 <HAL_GetTick>
 8003fc6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fd fe5b 	bl	8001c84 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b11      	cmp	r3, #17
 8003fd6:	d903      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e20f      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
 8003fdc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fe0:	4b83      	ldr	r3, [pc, #524]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ed      	bne.n	8003fca <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80bd 	beq.w	8004176 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004002:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10e      	bne.n	800402c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	4b78      	ldr	r3, [pc, #480]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	4a77      	ldr	r2, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	6593      	str	r3, [r2, #88]	; 0x58
 800401a:	4b75      	ldr	r3, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	4b71      	ldr	r3, [pc, #452]	; (80041f4 <HAL_RCC_OscConfig+0x6dc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d118      	bne.n	800406a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004038:	4b6e      	ldr	r3, [pc, #440]	; (80041f4 <HAL_RCC_OscConfig+0x6dc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6d      	ldr	r2, [pc, #436]	; (80041f4 <HAL_RCC_OscConfig+0x6dc>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004044:	f7fd fe1e 	bl	8001c84 <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404c:	f7fd fe1a 	bl	8001c84 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1ce      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405e:	4b65      	ldr	r3, [pc, #404]	; (80041f4 <HAL_RCC_OscConfig+0x6dc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d02c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004076:	4b5e      	ldr	r3, [pc, #376]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	4959      	ldr	r1, [pc, #356]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800409c:	4b54      	ldr	r3, [pc, #336]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	4a53      	ldr	r2, [pc, #332]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	4a4f      	ldr	r2, [pc, #316]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040bc:	e018      	b.n	80040f0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040be:	4b4c      	ldr	r3, [pc, #304]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	4a4a      	ldr	r2, [pc, #296]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ce:	e00f      	b.n	80040f0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040d0:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	4a46      	ldr	r2, [pc, #280]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	4a42      	ldr	r2, [pc, #264]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fd fdc4 	bl	8001c84 <HAL_GetTick>
 80040fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004100:	f7fd fdc0 	bl	8001c84 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e172      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004116:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ed      	beq.n	8004100 <HAL_RCC_OscConfig+0x5e8>
 8004124:	e01d      	b.n	8004162 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd fdad 	bl	8001c84 <HAL_GetTick>
 800412a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fd fda9 	bl	8001c84 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e15b      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004144:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ed      	bne.n	800412e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004152:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 800415a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004166:	2b01      	cmp	r3, #1
 8004168:	d105      	bne.n	8004176 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416a:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004174:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d041      	beq.n	8004206 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800418a:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 800418c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004190:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd fd73 	bl	8001c84 <HAL_GetTick>
 800419e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041a2:	f7fd fd6f 	bl	8001c84 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e123      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80041b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0ef      	beq.n	80041a2 <HAL_RCC_OscConfig+0x68a>
 80041c2:	e020      	b.n	8004206 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80041c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <HAL_RCC_OscConfig+0x6d8>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fd fd56 	bl	8001c84 <HAL_GetTick>
 80041d8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041da:	e00d      	b.n	80041f8 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041dc:	f7fd fd52 	bl	8001c84 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d906      	bls.n	80041f8 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e106      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041f8:	4b82      	ldr	r3, [pc, #520]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80041fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ea      	bne.n	80041dc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80f5 	beq.w	80043fa <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	2b02      	cmp	r3, #2
 8004216:	f040 80cb 	bne.w	80043b0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800421a:	4b7a      	ldr	r3, [pc, #488]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0203 	and.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	429a      	cmp	r2, r3
 800422c:	d12c      	bne.n	8004288 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	3b01      	subs	r3, #1
 800423a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d123      	bne.n	8004288 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d11b      	bne.n	8004288 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d113      	bne.n	8004288 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	3b01      	subs	r3, #1
 800426e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d109      	bne.n	8004288 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d06d      	beq.n	8004364 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d068      	beq.n	8004360 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800428e:	4b5d      	ldr	r3, [pc, #372]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800429a:	4b5a      	ldr	r3, [pc, #360]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0a8      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042aa:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a55      	ldr	r2, [pc, #340]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80042b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042b6:	f7fd fce5 	bl	8001c84 <HAL_GetTick>
 80042ba:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042be:	f7fd fce1 	bl	8001c84 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e095      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d0:	4b4c      	ldr	r3, [pc, #304]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f0      	bne.n	80042be <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042dc:	4b49      	ldr	r3, [pc, #292]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	4b49      	ldr	r3, [pc, #292]	; (8004408 <HAL_RCC_OscConfig+0x8f0>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042ec:	3a01      	subs	r2, #1
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	4311      	orrs	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042f6:	0212      	lsls	r2, r2, #8
 80042f8:	4311      	orrs	r1, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042fe:	0852      	lsrs	r2, r2, #1
 8004300:	3a01      	subs	r2, #1
 8004302:	0552      	lsls	r2, r2, #21
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800430a:	0852      	lsrs	r2, r2, #1
 800430c:	3a01      	subs	r2, #1
 800430e:	0652      	lsls	r2, r2, #25
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004316:	06d2      	lsls	r2, r2, #27
 8004318:	430a      	orrs	r2, r1
 800431a:	493a      	ldr	r1, [pc, #232]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 800431c:	4313      	orrs	r3, r2
 800431e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004320:	4b38      	ldr	r3, [pc, #224]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a37      	ldr	r2, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004336:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004338:	f7fd fca4 	bl	8001c84 <HAL_GetTick>
 800433c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fd fca0 	bl	8001c84 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e054      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800435e:	e04c      	b.n	80043fa <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e04b      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d144      	bne.n	80043fa <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 8004382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004386:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004388:	f7fd fc7c 	bl	8001c84 <HAL_GetTick>
 800438c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fd fc78 	bl	8001c84 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e02c      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a2:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x878>
 80043ae:	e024      	b.n	80043fa <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d01f      	beq.n	80043f6 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80043bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fd fc5f 	bl	8001c84 <HAL_GetTick>
 80043c6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fd fc5b 	bl	8001c84 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e00f      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4905      	ldr	r1, [pc, #20]	; (8004404 <HAL_RCC_OscConfig+0x8ec>)
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <HAL_RCC_OscConfig+0x8f4>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	60cb      	str	r3, [r1, #12]
 80043f4:	e001      	b.n	80043fa <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3728      	adds	r7, #40	; 0x28
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40021000 	.word	0x40021000
 8004408:	019d800c 	.word	0x019d800c
 800440c:	feeefffc 	.word	0xfeeefffc

08004410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e11d      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b90      	ldr	r3, [pc, #576]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d910      	bls.n	8004458 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b8d      	ldr	r3, [pc, #564]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 020f 	bic.w	r2, r3, #15
 800443e:	498b      	ldr	r1, [pc, #556]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b89      	ldr	r3, [pc, #548]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e105      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d010      	beq.n	8004486 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	4b81      	ldr	r3, [pc, #516]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004470:	429a      	cmp	r2, r3
 8004472:	d908      	bls.n	8004486 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004474:	4b7e      	ldr	r3, [pc, #504]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	497b      	ldr	r1, [pc, #492]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d079      	beq.n	8004586 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d11e      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b75      	ldr	r3, [pc, #468]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0dc      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044aa:	f000 fa09 	bl	80048c0 <RCC_GetSysClockFreqFromPLLSource>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a70      	ldr	r2, [pc, #448]	; (8004674 <HAL_RCC_ClockConfig+0x264>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d946      	bls.n	8004544 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044b6:	4b6e      	ldr	r3, [pc, #440]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d140      	bne.n	8004544 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044c2:	4b6b      	ldr	r3, [pc, #428]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ca:	4a69      	ldr	r2, [pc, #420]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80044cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	e035      	b.n	8004544 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e0:	4b63      	ldr	r3, [pc, #396]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d115      	bne.n	8004518 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0b9      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044f8:	4b5d      	ldr	r3, [pc, #372]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0ad      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004508:	4b59      	ldr	r3, [pc, #356]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0a5      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004518:	f000 f8b4 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 800451c:	4603      	mov	r3, r0
 800451e:	4a55      	ldr	r2, [pc, #340]	; (8004674 <HAL_RCC_ClockConfig+0x264>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d90f      	bls.n	8004544 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004524:	4b52      	ldr	r3, [pc, #328]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004530:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004538:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004544:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 0203 	bic.w	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4947      	ldr	r1, [pc, #284]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fd fb95 	bl	8001c84 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455c:	e00a      	b.n	8004574 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455e:	f7fd fb91 	bl	8001c84 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e077      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004574:	4b3e      	ldr	r3, [pc, #248]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 020c 	and.w	r2, r3, #12
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	429a      	cmp	r2, r3
 8004584:	d1eb      	bne.n	800455e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d105      	bne.n	8004598 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800458c:	4b38      	ldr	r3, [pc, #224]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a37      	ldr	r2, [pc, #220]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004596:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4b31      	ldr	r3, [pc, #196]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d208      	bcs.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b4:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	492b      	ldr	r1, [pc, #172]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c6:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d210      	bcs.n	80045f6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 020f 	bic.w	r2, r3, #15
 80045dc:	4923      	ldr	r1, [pc, #140]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <HAL_RCC_ClockConfig+0x25c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e036      	b.n	8004664 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	4918      	ldr	r1, [pc, #96]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004620:	4b13      	ldr	r3, [pc, #76]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4910      	ldr	r1, [pc, #64]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004634:	f000 f826 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <HAL_RCC_ClockConfig+0x260>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	091b      	lsrs	r3, r3, #4
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <HAL_RCC_ClockConfig+0x268>)
 8004646:	5ccb      	ldrb	r3, [r1, r3]
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x26c>)
 8004652:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <HAL_RCC_ClockConfig+0x270>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7fd fac3 	bl	8001be4 <HAL_InitTick>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]

  return status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40022000 	.word	0x40022000
 8004670:	40021000 	.word	0x40021000
 8004674:	04c4b400 	.word	0x04c4b400
 8004678:	0800d2d8 	.word	0x0800d2d8
 800467c:	20000000 	.word	0x20000000
 8004680:	20000004 	.word	0x20000004

08004684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	; 0x24
 8004688:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004692:	4b3e      	ldr	r3, [pc, #248]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x34>
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b0c      	cmp	r3, #12
 80046b0:	d121      	bne.n	80046f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d11e      	bne.n	80046f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046b8:	4b34      	ldr	r3, [pc, #208]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e005      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046d4:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046e0:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10d      	bne.n	800470c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d102      	bne.n	8004702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <HAL_RCC_GetSysClockFreq+0x110>)
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	e004      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d101      	bne.n	800470c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004708:	4b23      	ldr	r3, [pc, #140]	; (8004798 <HAL_RCC_GetSysClockFreq+0x114>)
 800470a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d134      	bne.n	800477c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004712:	4b1e      	ldr	r3, [pc, #120]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0xa6>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d003      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0xac>
 8004728:	e005      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800472a:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <HAL_RCC_GetSysClockFreq+0x110>)
 800472c:	617b      	str	r3, [r7, #20]
      break;
 800472e:	e005      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_RCC_GetSysClockFreq+0x114>)
 8004732:	617b      	str	r3, [r7, #20]
      break;
 8004734:	e002      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	617b      	str	r3, [r7, #20]
      break;
 800473a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800473c:	4b13      	ldr	r3, [pc, #76]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	3301      	adds	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	fb03 f202 	mul.w	r2, r3, r2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	0e5b      	lsrs	r3, r3, #25
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	3301      	adds	r3, #1
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	fbb2 f3f3 	udiv	r3, r2, r3
 800477a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800477c:	69bb      	ldr	r3, [r7, #24]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3724      	adds	r7, #36	; 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
 8004790:	0800d2f0 	.word	0x0800d2f0
 8004794:	00f42400 	.word	0x00f42400
 8004798:	007a1200 	.word	0x007a1200

0800479c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000000 	.word	0x20000000

080047b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047b8:	f7ff fff0 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4904      	ldr	r1, [pc, #16]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	0800d2e8 	.word	0x0800d2e8

080047e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047e4:	f7ff ffda 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0adb      	lsrs	r3, r3, #11
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4904      	ldr	r1, [pc, #16]	; (8004808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	0800d2e8 	.word	0x0800d2e8

0800480c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004824:	f7ff f894 	bl	8003950 <HAL_PWREx_GetVoltageRange>
 8004828:	6178      	str	r0, [r7, #20]
 800482a:	e014      	b.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004844:	f7ff f884 	bl	8003950 <HAL_PWREx_GetVoltageRange>
 8004848:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d10b      	bne.n	8004876 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d913      	bls.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2ba0      	cmp	r3, #160	; 0xa0
 8004868:	d902      	bls.n	8004870 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800486a:	2302      	movs	r3, #2
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e00d      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e00a      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d902      	bls.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800487c:	2302      	movs	r3, #2
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e004      	b.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b70      	cmp	r3, #112	; 0x70
 8004886:	d101      	bne.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004888:	2301      	movs	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 020f 	bic.w	r2, r3, #15
 8004894:	4909      	ldr	r1, [pc, #36]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40022000 	.word	0x40022000

080048c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d00b      	beq.n	80048ee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d825      	bhi.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d008      	beq.n	80048f4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d11f      	bne.n	8004928 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048ea:	613b      	str	r3, [r7, #16]
    break;
 80048ec:	e01f      	b.n	800492e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80048f0:	613b      	str	r3, [r7, #16]
    break;
 80048f2:	e01c      	b.n	800492e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048f4:	4b21      	ldr	r3, [pc, #132]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e005      	b.n	800491c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004910:	4b1a      	ldr	r3, [pc, #104]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800491c:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	613b      	str	r3, [r7, #16]
    break;
 8004926:	e002      	b.n	800492e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
    break;
 800492c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	3301      	adds	r3, #1
 800493a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	fb03 f202 	mul.w	r2, r3, r2
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0e5b      	lsrs	r3, r3, #25
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800496e:	683b      	ldr	r3, [r7, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40021000 	.word	0x40021000
 8004980:	00f42400 	.word	0x00f42400
 8004984:	007a1200 	.word	0x007a1200
 8004988:	0800d2f0 	.word	0x0800d2f0

0800498c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004994:	2300      	movs	r3, #0
 8004996:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004998:	2300      	movs	r3, #0
 800499a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d040      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d02a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d825      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d026      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d821      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d006      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d81d      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d010      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x62>
 80049cc:	e018      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049ce:	4b89      	ldr	r3, [pc, #548]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4a88      	ldr	r2, [pc, #544]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049da:	e015      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fb4e 	bl	8005084 <RCCEx_PLLSAI1_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ec:	e00c      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3320      	adds	r3, #32
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fc39 	bl	800526c <RCCEx_PLLSAI2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	74fb      	strb	r3, [r7, #19]
      break;
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a0e:	4b79      	ldr	r3, [pc, #484]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a14:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1c:	4975      	ldr	r1, [pc, #468]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a24:	e001      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a26:	7cfb      	ldrb	r3, [r7, #19]
 8004a28:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d047      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d030      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a44:	d82a      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4a:	d02a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a50:	d824      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a56:	d008      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5c:	d81e      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a66:	d010      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a68:	e018      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a6a:	4b62      	ldr	r3, [pc, #392]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	4a61      	ldr	r2, [pc, #388]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a76:	e015      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fb00 	bl	8005084 <RCCEx_PLLSAI1_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a88:	e00c      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3320      	adds	r3, #32
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fbeb 	bl	800526c <RCCEx_PLLSAI2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a9a:	e003      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	74fb      	strb	r3, [r7, #19]
      break;
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aaa:	4b52      	ldr	r3, [pc, #328]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	494e      	ldr	r1, [pc, #312]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ac0:	e001      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 809f 	beq.w	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ad8:	4b46      	ldr	r3, [pc, #280]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	4a40      	ldr	r2, [pc, #256]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6593      	str	r3, [r2, #88]	; 0x58
 8004afa:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b0a:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a3a      	ldr	r2, [pc, #232]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b16:	f7fd f8b5 	bl	8001c84 <HAL_GetTick>
 8004b1a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b1c:	e009      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1e:	f7fd f8b1 	bl	8001c84 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d902      	bls.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	74fb      	strb	r3, [r7, #19]
        break;
 8004b30:	e005      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b32:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ef      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d15b      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b44:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01f      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d019      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b6e:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d016      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fd f870 	bl	8001c84 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fd f86c 	bl	8001c84 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d902      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	74fb      	strb	r3, [r7, #19]
            break;
 8004bbe:	e006      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0ec      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be4:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bec:	e008      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	74bb      	strb	r3, [r7, #18]
 8004bf2:	e005      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c00:	7c7b      	ldrb	r3, [r7, #17]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c06:	4ba0      	ldr	r3, [pc, #640]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	4a9f      	ldr	r2, [pc, #636]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c1e:	4b9a      	ldr	r3, [pc, #616]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f023 0203 	bic.w	r2, r3, #3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2c:	4996      	ldr	r1, [pc, #600]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c40:	4b91      	ldr	r3, [pc, #580]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f023 020c 	bic.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	498e      	ldr	r1, [pc, #568]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c62:	4b89      	ldr	r3, [pc, #548]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	4985      	ldr	r1, [pc, #532]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c84:	4b80      	ldr	r3, [pc, #512]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c92:	497d      	ldr	r1, [pc, #500]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ca6:	4b78      	ldr	r3, [pc, #480]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	4974      	ldr	r1, [pc, #464]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc8:	4b6f      	ldr	r3, [pc, #444]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd6:	496c      	ldr	r1, [pc, #432]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cea:	4b67      	ldr	r3, [pc, #412]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf8:	4963      	ldr	r1, [pc, #396]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d0c:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1a:	495b      	ldr	r1, [pc, #364]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2e:	4b56      	ldr	r3, [pc, #344]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	4952      	ldr	r1, [pc, #328]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d50:	4b4d      	ldr	r3, [pc, #308]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	494a      	ldr	r1, [pc, #296]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d72:	4b45      	ldr	r3, [pc, #276]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	4941      	ldr	r1, [pc, #260]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d94:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	4939      	ldr	r1, [pc, #228]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d028      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db6:	4b34      	ldr	r3, [pc, #208]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc4:	4930      	ldr	r1, [pc, #192]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004de0:	60d3      	str	r3, [r2, #12]
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f945 	bl	8005084 <RCCEx_PLLSAI1_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d04d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1c:	d108      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e2e:	e012      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e30:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4e:	490e      	ldr	r1, [pc, #56]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6a:	60d3      	str	r3, [r2, #12]
 8004e6c:	e020      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e76:	d109      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a02      	ldr	r2, [pc, #8]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e82:	60d3      	str	r3, [r2, #12]
 8004e84:	e014      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f8f1 	bl	8005084 <RCCEx_PLLSAI1_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d028      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ebc:	4b68      	ldr	r3, [pc, #416]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eca:	4965      	ldr	r1, [pc, #404]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eda:	d106      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004edc:	4b60      	ldr	r3, [pc, #384]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a5f      	ldr	r2, [pc, #380]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee6:	60d3      	str	r3, [r2, #12]
 8004ee8:	e011      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef2:	d10c      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2101      	movs	r1, #1
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f8c2 	bl	8005084 <RCCEx_PLLSAI1_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01e      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1a:	4b51      	ldr	r3, [pc, #324]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2a:	494d      	ldr	r1, [pc, #308]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3304      	adds	r3, #4
 8004f42:	2102      	movs	r1, #2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f89d 	bl	8005084 <RCCEx_PLLSAI1_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f64:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f6a:	f023 0204 	bic.w	r2, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f74:	493a      	ldr	r1, [pc, #232]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00b      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f88:	4b35      	ldr	r3, [pc, #212]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f8e:	f023 0218 	bic.w	r2, r3, #24
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	4931      	ldr	r1, [pc, #196]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d035      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fac:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb8:	f7fc fe64 	bl	8001c84 <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fbe:	e009      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fc0:	f7fc fe60 	bl	8001c84 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d902      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fd4:	4b22      	ldr	r3, [pc, #136]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ef      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d113      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff6:	491a      	ldr	r1, [pc, #104]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3320      	adds	r3, #32
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 f931 	bl	800526c <RCCEx_PLLSAI2_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005014:	7cfb      	ldrb	r3, [r7, #19]
 8005016:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d017      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800502a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	490a      	ldr	r1, [pc, #40]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005046:	d105      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a04      	ldr	r2, [pc, #16]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800504e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005052:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005054:	7cbb      	ldrb	r3, [r7, #18]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000

08005064 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a04      	ldr	r2, [pc, #16]	; (8005080 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	6013      	str	r3, [r2, #0]
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000

08005084 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005092:	4b72      	ldr	r3, [pc, #456]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00e      	beq.n	80050bc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800509e:	4b6f      	ldr	r3, [pc, #444]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0203 	and.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d103      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
       ||
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d142      	bne.n	800513c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
 80050ba:	e03f      	b.n	800513c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d018      	beq.n	80050f6 <RCCEx_PLLSAI1_Config+0x72>
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d825      	bhi.n	8005114 <RCCEx_PLLSAI1_Config+0x90>
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d002      	beq.n	80050d2 <RCCEx_PLLSAI1_Config+0x4e>
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d009      	beq.n	80050e4 <RCCEx_PLLSAI1_Config+0x60>
 80050d0:	e020      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050d2:	4b62      	ldr	r3, [pc, #392]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d11d      	bne.n	800511a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e2:	e01a      	b.n	800511a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050e4:	4b5d      	ldr	r3, [pc, #372]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d116      	bne.n	800511e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f4:	e013      	b.n	800511e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005102:	4b56      	ldr	r3, [pc, #344]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005112:	e006      	b.n	8005122 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
      break;
 8005118:	e004      	b.n	8005124 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800511a:	bf00      	nop
 800511c:	e002      	b.n	8005124 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005122:	bf00      	nop
    }

    if(status == HAL_OK)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d108      	bne.n	800513c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800512a:	4b4c      	ldr	r3, [pc, #304]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f023 0203 	bic.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4949      	ldr	r1, [pc, #292]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005138:	4313      	orrs	r3, r2
 800513a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 8086 	bne.w	8005250 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005144:	4b45      	ldr	r3, [pc, #276]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a44      	ldr	r2, [pc, #272]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 800514a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800514e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7fc fd98 	bl	8001c84 <HAL_GetTick>
 8005154:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005156:	e009      	b.n	800516c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005158:	f7fc fd94 	bl	8001c84 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d902      	bls.n	800516c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	73fb      	strb	r3, [r7, #15]
        break;
 800516a:	e005      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800516c:	4b3b      	ldr	r3, [pc, #236]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ef      	bne.n	8005158 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d168      	bne.n	8005250 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d113      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005184:	4b35      	ldr	r3, [pc, #212]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	4b35      	ldr	r3, [pc, #212]	; (8005260 <RCCEx_PLLSAI1_Config+0x1dc>)
 800518a:	4013      	ands	r3, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6892      	ldr	r2, [r2, #8]
 8005190:	0211      	lsls	r1, r2, #8
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68d2      	ldr	r2, [r2, #12]
 8005196:	06d2      	lsls	r2, r2, #27
 8005198:	4311      	orrs	r1, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6852      	ldr	r2, [r2, #4]
 800519e:	3a01      	subs	r2, #1
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	430a      	orrs	r2, r1
 80051a4:	492d      	ldr	r1, [pc, #180]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	610b      	str	r3, [r1, #16]
 80051aa:	e02d      	b.n	8005208 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d115      	bne.n	80051de <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051b2:	4b2a      	ldr	r3, [pc, #168]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6892      	ldr	r2, [r2, #8]
 80051be:	0211      	lsls	r1, r2, #8
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6912      	ldr	r2, [r2, #16]
 80051c4:	0852      	lsrs	r2, r2, #1
 80051c6:	3a01      	subs	r2, #1
 80051c8:	0552      	lsls	r2, r2, #21
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6852      	ldr	r2, [r2, #4]
 80051d0:	3a01      	subs	r2, #1
 80051d2:	0112      	lsls	r2, r2, #4
 80051d4:	430a      	orrs	r2, r1
 80051d6:	4921      	ldr	r1, [pc, #132]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	610b      	str	r3, [r1, #16]
 80051dc:	e014      	b.n	8005208 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051de:	4b1f      	ldr	r3, [pc, #124]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	4b21      	ldr	r3, [pc, #132]	; (8005268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6892      	ldr	r2, [r2, #8]
 80051ea:	0211      	lsls	r1, r2, #8
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6952      	ldr	r2, [r2, #20]
 80051f0:	0852      	lsrs	r2, r2, #1
 80051f2:	3a01      	subs	r2, #1
 80051f4:	0652      	lsls	r2, r2, #25
 80051f6:	4311      	orrs	r1, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6852      	ldr	r2, [r2, #4]
 80051fc:	3a01      	subs	r2, #1
 80051fe:	0112      	lsls	r2, r2, #4
 8005200:	430a      	orrs	r2, r1
 8005202:	4916      	ldr	r1, [pc, #88]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005204:	4313      	orrs	r3, r2
 8005206:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005208:	4b14      	ldr	r3, [pc, #80]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a13      	ldr	r2, [pc, #76]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 800520e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005212:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fc fd36 	bl	8001c84 <HAL_GetTick>
 8005218:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800521a:	e009      	b.n	8005230 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800521c:	f7fc fd32 	bl	8001c84 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d902      	bls.n	8005230 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	73fb      	strb	r3, [r7, #15]
          break;
 800522e:	e005      	b.n	800523c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ef      	beq.n	800521c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	4904      	ldr	r1, [pc, #16]	; (800525c <RCCEx_PLLSAI1_Config+0x1d8>)
 800524c:	4313      	orrs	r3, r2
 800524e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000
 8005260:	07ff800f 	.word	0x07ff800f
 8005264:	ff9f800f 	.word	0xff9f800f
 8005268:	f9ff800f 	.word	0xf9ff800f

0800526c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800527a:	4b72      	ldr	r3, [pc, #456]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005286:	4b6f      	ldr	r3, [pc, #444]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0203 	and.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d103      	bne.n	800529e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
       ||
 800529a:	2b00      	cmp	r3, #0
 800529c:	d142      	bne.n	8005324 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
 80052a2:	e03f      	b.n	8005324 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d018      	beq.n	80052de <RCCEx_PLLSAI2_Config+0x72>
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d825      	bhi.n	80052fc <RCCEx_PLLSAI2_Config+0x90>
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d002      	beq.n	80052ba <RCCEx_PLLSAI2_Config+0x4e>
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d009      	beq.n	80052cc <RCCEx_PLLSAI2_Config+0x60>
 80052b8:	e020      	b.n	80052fc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ba:	4b62      	ldr	r3, [pc, #392]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11d      	bne.n	8005302 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ca:	e01a      	b.n	8005302 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052cc:	4b5d      	ldr	r3, [pc, #372]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d116      	bne.n	8005306 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052dc:	e013      	b.n	8005306 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052de:	4b59      	ldr	r3, [pc, #356]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ea:	4b56      	ldr	r3, [pc, #344]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052fa:	e006      	b.n	800530a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005300:	e004      	b.n	800530c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005302:	bf00      	nop
 8005304:	e002      	b.n	800530c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800530a:	bf00      	nop
    }

    if(status == HAL_OK)
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005312:	4b4c      	ldr	r3, [pc, #304]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f023 0203 	bic.w	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4949      	ldr	r1, [pc, #292]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005320:	4313      	orrs	r3, r2
 8005322:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f040 8086 	bne.w	8005438 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800532c:	4b45      	ldr	r3, [pc, #276]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a44      	ldr	r2, [pc, #272]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005338:	f7fc fca4 	bl	8001c84 <HAL_GetTick>
 800533c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800533e:	e009      	b.n	8005354 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005340:	f7fc fca0 	bl	8001c84 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d902      	bls.n	8005354 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	73fb      	strb	r3, [r7, #15]
        break;
 8005352:	e005      	b.n	8005360 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005354:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1ef      	bne.n	8005340 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d168      	bne.n	8005438 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d113      	bne.n	8005394 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800536c:	4b35      	ldr	r3, [pc, #212]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	4b35      	ldr	r3, [pc, #212]	; (8005448 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005372:	4013      	ands	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6892      	ldr	r2, [r2, #8]
 8005378:	0211      	lsls	r1, r2, #8
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68d2      	ldr	r2, [r2, #12]
 800537e:	06d2      	lsls	r2, r2, #27
 8005380:	4311      	orrs	r1, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6852      	ldr	r2, [r2, #4]
 8005386:	3a01      	subs	r2, #1
 8005388:	0112      	lsls	r2, r2, #4
 800538a:	430a      	orrs	r2, r1
 800538c:	492d      	ldr	r1, [pc, #180]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 800538e:	4313      	orrs	r3, r2
 8005390:	614b      	str	r3, [r1, #20]
 8005392:	e02d      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d115      	bne.n	80053c6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800539a:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	4b2b      	ldr	r3, [pc, #172]	; (800544c <RCCEx_PLLSAI2_Config+0x1e0>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6892      	ldr	r2, [r2, #8]
 80053a6:	0211      	lsls	r1, r2, #8
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6912      	ldr	r2, [r2, #16]
 80053ac:	0852      	lsrs	r2, r2, #1
 80053ae:	3a01      	subs	r2, #1
 80053b0:	0552      	lsls	r2, r2, #21
 80053b2:	4311      	orrs	r1, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6852      	ldr	r2, [r2, #4]
 80053b8:	3a01      	subs	r2, #1
 80053ba:	0112      	lsls	r2, r2, #4
 80053bc:	430a      	orrs	r2, r1
 80053be:	4921      	ldr	r1, [pc, #132]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	614b      	str	r3, [r1, #20]
 80053c4:	e014      	b.n	80053f0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053c6:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	4b21      	ldr	r3, [pc, #132]	; (8005450 <RCCEx_PLLSAI2_Config+0x1e4>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6892      	ldr	r2, [r2, #8]
 80053d2:	0211      	lsls	r1, r2, #8
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6952      	ldr	r2, [r2, #20]
 80053d8:	0852      	lsrs	r2, r2, #1
 80053da:	3a01      	subs	r2, #1
 80053dc:	0652      	lsls	r2, r2, #25
 80053de:	4311      	orrs	r1, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6852      	ldr	r2, [r2, #4]
 80053e4:	3a01      	subs	r2, #1
 80053e6:	0112      	lsls	r2, r2, #4
 80053e8:	430a      	orrs	r2, r1
 80053ea:	4916      	ldr	r1, [pc, #88]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053f0:	4b14      	ldr	r3, [pc, #80]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a13      	ldr	r2, [pc, #76]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fc:	f7fc fc42 	bl	8001c84 <HAL_GetTick>
 8005400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005402:	e009      	b.n	8005418 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005404:	f7fc fc3e 	bl	8001c84 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d902      	bls.n	8005418 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	73fb      	strb	r3, [r7, #15]
          break;
 8005416:	e005      	b.n	8005424 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ef      	beq.n	8005404 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	4904      	ldr	r1, [pc, #16]	; (8005444 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005434:	4313      	orrs	r3, r2
 8005436:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000
 8005448:	07ff800f 	.word	0x07ff800f
 800544c:	ff9f800f 	.word	0xff9f800f
 8005450:	f9ff800f 	.word	0xf9ff800f

08005454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e042      	b.n	80054ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fc f967 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2224      	movs	r2, #36	; 0x24
 8005482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8c2 	bl	8005620 <UART_SetConfig>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e022      	b.n	80054ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fbb2 	bl	8005c18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc39 	bl	8005d5c <UART_CheckIdleState>
 80054ea:	4603      	mov	r3, r0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550a:	2b20      	cmp	r3, #32
 800550c:	f040 8083 	bne.w	8005616 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_UART_Transmit+0x28>
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e07b      	b.n	8005618 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_UART_Transmit+0x3a>
 800552a:	2302      	movs	r3, #2
 800552c:	e074      	b.n	8005618 <HAL_UART_Transmit+0x124>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2221      	movs	r2, #33	; 0x21
 8005542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005546:	f7fc fb9d 	bl	8001c84 <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005564:	d108      	bne.n	8005578 <HAL_UART_Transmit+0x84>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e003      	b.n	8005580 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005588:	e02c      	b.n	80055e4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fc2c 	bl	8005df2 <UART_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e039      	b.n	8005618 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	3302      	adds	r3, #2
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e007      	b.n	80055d2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	3301      	adds	r3, #1
 80055d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1cc      	bne.n	800558a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fbf9 	bl	8005df2 <UART_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e006      	b.n	8005618 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e000      	b.n	8005618 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005624:	b08c      	sub	sp, #48	; 0x30
 8005626:	af00      	add	r7, sp, #0
 8005628:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	431a      	orrs	r2, r3
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	4313      	orrs	r3, r2
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4baa      	ldr	r3, [pc, #680]	; (80058f8 <UART_SetConfig+0x2d8>)
 8005650:	4013      	ands	r3, r2
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005658:	430b      	orrs	r3, r1
 800565a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a9f      	ldr	r2, [pc, #636]	; (80058fc <UART_SetConfig+0x2dc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d004      	beq.n	800568c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005688:	4313      	orrs	r3, r2
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005696:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	f023 010f 	bic.w	r1, r3, #15
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a90      	ldr	r2, [pc, #576]	; (8005900 <UART_SetConfig+0x2e0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d125      	bne.n	8005710 <UART_SetConfig+0xf0>
 80056c4:	4b8f      	ldr	r3, [pc, #572]	; (8005904 <UART_SetConfig+0x2e4>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d81a      	bhi.n	8005708 <UART_SetConfig+0xe8>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <UART_SetConfig+0xb8>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056f9 	.word	0x080056f9
 80056e0:	080056f1 	.word	0x080056f1
 80056e4:	08005701 	.word	0x08005701
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ee:	e116      	b.n	800591e <UART_SetConfig+0x2fe>
 80056f0:	2302      	movs	r3, #2
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f6:	e112      	b.n	800591e <UART_SetConfig+0x2fe>
 80056f8:	2304      	movs	r3, #4
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056fe:	e10e      	b.n	800591e <UART_SetConfig+0x2fe>
 8005700:	2308      	movs	r3, #8
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005706:	e10a      	b.n	800591e <UART_SetConfig+0x2fe>
 8005708:	2310      	movs	r3, #16
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800570e:	e106      	b.n	800591e <UART_SetConfig+0x2fe>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a7c      	ldr	r2, [pc, #496]	; (8005908 <UART_SetConfig+0x2e8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d138      	bne.n	800578c <UART_SetConfig+0x16c>
 800571a:	4b7a      	ldr	r3, [pc, #488]	; (8005904 <UART_SetConfig+0x2e4>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f003 030c 	and.w	r3, r3, #12
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d82d      	bhi.n	8005784 <UART_SetConfig+0x164>
 8005728:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x110>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005765 	.word	0x08005765
 8005734:	08005785 	.word	0x08005785
 8005738:	08005785 	.word	0x08005785
 800573c:	08005785 	.word	0x08005785
 8005740:	08005775 	.word	0x08005775
 8005744:	08005785 	.word	0x08005785
 8005748:	08005785 	.word	0x08005785
 800574c:	08005785 	.word	0x08005785
 8005750:	0800576d 	.word	0x0800576d
 8005754:	08005785 	.word	0x08005785
 8005758:	08005785 	.word	0x08005785
 800575c:	08005785 	.word	0x08005785
 8005760:	0800577d 	.word	0x0800577d
 8005764:	2300      	movs	r3, #0
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576a:	e0d8      	b.n	800591e <UART_SetConfig+0x2fe>
 800576c:	2302      	movs	r3, #2
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005772:	e0d4      	b.n	800591e <UART_SetConfig+0x2fe>
 8005774:	2304      	movs	r3, #4
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577a:	e0d0      	b.n	800591e <UART_SetConfig+0x2fe>
 800577c:	2308      	movs	r3, #8
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005782:	e0cc      	b.n	800591e <UART_SetConfig+0x2fe>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578a:	e0c8      	b.n	800591e <UART_SetConfig+0x2fe>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a5e      	ldr	r2, [pc, #376]	; (800590c <UART_SetConfig+0x2ec>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d125      	bne.n	80057e2 <UART_SetConfig+0x1c2>
 8005796:	4b5b      	ldr	r3, [pc, #364]	; (8005904 <UART_SetConfig+0x2e4>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057a0:	2b30      	cmp	r3, #48	; 0x30
 80057a2:	d016      	beq.n	80057d2 <UART_SetConfig+0x1b2>
 80057a4:	2b30      	cmp	r3, #48	; 0x30
 80057a6:	d818      	bhi.n	80057da <UART_SetConfig+0x1ba>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d00a      	beq.n	80057c2 <UART_SetConfig+0x1a2>
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d814      	bhi.n	80057da <UART_SetConfig+0x1ba>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <UART_SetConfig+0x19a>
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d008      	beq.n	80057ca <UART_SetConfig+0x1aa>
 80057b8:	e00f      	b.n	80057da <UART_SetConfig+0x1ba>
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c0:	e0ad      	b.n	800591e <UART_SetConfig+0x2fe>
 80057c2:	2302      	movs	r3, #2
 80057c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c8:	e0a9      	b.n	800591e <UART_SetConfig+0x2fe>
 80057ca:	2304      	movs	r3, #4
 80057cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d0:	e0a5      	b.n	800591e <UART_SetConfig+0x2fe>
 80057d2:	2308      	movs	r3, #8
 80057d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d8:	e0a1      	b.n	800591e <UART_SetConfig+0x2fe>
 80057da:	2310      	movs	r3, #16
 80057dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e0:	e09d      	b.n	800591e <UART_SetConfig+0x2fe>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a4a      	ldr	r2, [pc, #296]	; (8005910 <UART_SetConfig+0x2f0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d125      	bne.n	8005838 <UART_SetConfig+0x218>
 80057ec:	4b45      	ldr	r3, [pc, #276]	; (8005904 <UART_SetConfig+0x2e4>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057f6:	2bc0      	cmp	r3, #192	; 0xc0
 80057f8:	d016      	beq.n	8005828 <UART_SetConfig+0x208>
 80057fa:	2bc0      	cmp	r3, #192	; 0xc0
 80057fc:	d818      	bhi.n	8005830 <UART_SetConfig+0x210>
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d00a      	beq.n	8005818 <UART_SetConfig+0x1f8>
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d814      	bhi.n	8005830 <UART_SetConfig+0x210>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <UART_SetConfig+0x1f0>
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d008      	beq.n	8005820 <UART_SetConfig+0x200>
 800580e:	e00f      	b.n	8005830 <UART_SetConfig+0x210>
 8005810:	2300      	movs	r3, #0
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005816:	e082      	b.n	800591e <UART_SetConfig+0x2fe>
 8005818:	2302      	movs	r3, #2
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581e:	e07e      	b.n	800591e <UART_SetConfig+0x2fe>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005826:	e07a      	b.n	800591e <UART_SetConfig+0x2fe>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582e:	e076      	b.n	800591e <UART_SetConfig+0x2fe>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005836:	e072      	b.n	800591e <UART_SetConfig+0x2fe>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a35      	ldr	r2, [pc, #212]	; (8005914 <UART_SetConfig+0x2f4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d12a      	bne.n	8005898 <UART_SetConfig+0x278>
 8005842:	4b30      	ldr	r3, [pc, #192]	; (8005904 <UART_SetConfig+0x2e4>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005850:	d01a      	beq.n	8005888 <UART_SetConfig+0x268>
 8005852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005856:	d81b      	bhi.n	8005890 <UART_SetConfig+0x270>
 8005858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585c:	d00c      	beq.n	8005878 <UART_SetConfig+0x258>
 800585e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005862:	d815      	bhi.n	8005890 <UART_SetConfig+0x270>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <UART_SetConfig+0x250>
 8005868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586c:	d008      	beq.n	8005880 <UART_SetConfig+0x260>
 800586e:	e00f      	b.n	8005890 <UART_SetConfig+0x270>
 8005870:	2300      	movs	r3, #0
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005876:	e052      	b.n	800591e <UART_SetConfig+0x2fe>
 8005878:	2302      	movs	r3, #2
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800587e:	e04e      	b.n	800591e <UART_SetConfig+0x2fe>
 8005880:	2304      	movs	r3, #4
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005886:	e04a      	b.n	800591e <UART_SetConfig+0x2fe>
 8005888:	2308      	movs	r3, #8
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588e:	e046      	b.n	800591e <UART_SetConfig+0x2fe>
 8005890:	2310      	movs	r3, #16
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005896:	e042      	b.n	800591e <UART_SetConfig+0x2fe>
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a17      	ldr	r2, [pc, #92]	; (80058fc <UART_SetConfig+0x2dc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d13a      	bne.n	8005918 <UART_SetConfig+0x2f8>
 80058a2:	4b18      	ldr	r3, [pc, #96]	; (8005904 <UART_SetConfig+0x2e4>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058b0:	d01a      	beq.n	80058e8 <UART_SetConfig+0x2c8>
 80058b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058b6:	d81b      	bhi.n	80058f0 <UART_SetConfig+0x2d0>
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058bc:	d00c      	beq.n	80058d8 <UART_SetConfig+0x2b8>
 80058be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c2:	d815      	bhi.n	80058f0 <UART_SetConfig+0x2d0>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <UART_SetConfig+0x2b0>
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058cc:	d008      	beq.n	80058e0 <UART_SetConfig+0x2c0>
 80058ce:	e00f      	b.n	80058f0 <UART_SetConfig+0x2d0>
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e022      	b.n	800591e <UART_SetConfig+0x2fe>
 80058d8:	2302      	movs	r3, #2
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e01e      	b.n	800591e <UART_SetConfig+0x2fe>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e6:	e01a      	b.n	800591e <UART_SetConfig+0x2fe>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ee:	e016      	b.n	800591e <UART_SetConfig+0x2fe>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f6:	e012      	b.n	800591e <UART_SetConfig+0x2fe>
 80058f8:	cfff69f3 	.word	0xcfff69f3
 80058fc:	40008000 	.word	0x40008000
 8005900:	40013800 	.word	0x40013800
 8005904:	40021000 	.word	0x40021000
 8005908:	40004400 	.word	0x40004400
 800590c:	40004800 	.word	0x40004800
 8005910:	40004c00 	.word	0x40004c00
 8005914:	40005000 	.word	0x40005000
 8005918:	2310      	movs	r3, #16
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4aae      	ldr	r2, [pc, #696]	; (8005bdc <UART_SetConfig+0x5bc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	f040 8097 	bne.w	8005a58 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800592a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800592e:	2b08      	cmp	r3, #8
 8005930:	d823      	bhi.n	800597a <UART_SetConfig+0x35a>
 8005932:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <UART_SetConfig+0x318>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	0800595d 	.word	0x0800595d
 800593c:	0800597b 	.word	0x0800597b
 8005940:	08005965 	.word	0x08005965
 8005944:	0800597b 	.word	0x0800597b
 8005948:	0800596b 	.word	0x0800596b
 800594c:	0800597b 	.word	0x0800597b
 8005950:	0800597b 	.word	0x0800597b
 8005954:	0800597b 	.word	0x0800597b
 8005958:	08005973 	.word	0x08005973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800595c:	f7fe ff2a 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 8005960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005962:	e010      	b.n	8005986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005964:	4b9e      	ldr	r3, [pc, #632]	; (8005be0 <UART_SetConfig+0x5c0>)
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005968:	e00d      	b.n	8005986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596a:	f7fe fe8b 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005970:	e009      	b.n	8005986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005978:	e005      	b.n	8005986 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005984:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8130 	beq.w	8005bee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	4a94      	ldr	r2, [pc, #592]	; (8005be4 <UART_SetConfig+0x5c4>)
 8005994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005998:	461a      	mov	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	fbb3 f3f2 	udiv	r3, r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	4413      	add	r3, r2
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d305      	bcc.n	80059be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d903      	bls.n	80059c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059c4:	e113      	b.n	8005bee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	2200      	movs	r2, #0
 80059ca:	60bb      	str	r3, [r7, #8]
 80059cc:	60fa      	str	r2, [r7, #12]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	4a84      	ldr	r2, [pc, #528]	; (8005be4 <UART_SetConfig+0x5c4>)
 80059d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2200      	movs	r2, #0
 80059dc:	603b      	str	r3, [r7, #0]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059e8:	f7fb f8f6 	bl	8000bd8 <__aeabi_uldivmod>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4610      	mov	r0, r2
 80059f2:	4619      	mov	r1, r3
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	020b      	lsls	r3, r1, #8
 80059fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a02:	0202      	lsls	r2, r0, #8
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	6849      	ldr	r1, [r1, #4]
 8005a08:	0849      	lsrs	r1, r1, #1
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	4605      	mov	r5, r0
 8005a10:	eb12 0804 	adds.w	r8, r2, r4
 8005a14:	eb43 0905 	adc.w	r9, r3, r5
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	469a      	mov	sl, r3
 8005a20:	4693      	mov	fp, r2
 8005a22:	4652      	mov	r2, sl
 8005a24:	465b      	mov	r3, fp
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f7fb f8d5 	bl	8000bd8 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4613      	mov	r3, r2
 8005a34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3c:	d308      	bcc.n	8005a50 <UART_SetConfig+0x430>
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a44:	d204      	bcs.n	8005a50 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e0ce      	b.n	8005bee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a56:	e0ca      	b.n	8005bee <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a60:	d166      	bne.n	8005b30 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a66:	2b08      	cmp	r3, #8
 8005a68:	d827      	bhi.n	8005aba <UART_SetConfig+0x49a>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <UART_SetConfig+0x450>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	08005abb 	.word	0x08005abb
 8005a80:	08005aab 	.word	0x08005aab
 8005a84:	08005abb 	.word	0x08005abb
 8005a88:	08005abb 	.word	0x08005abb
 8005a8c:	08005abb 	.word	0x08005abb
 8005a90:	08005ab3 	.word	0x08005ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7fe fe8e 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 8005a98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a9a:	e014      	b.n	8005ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7fe fea0 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
 8005aa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aa2:	e010      	b.n	8005ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aa4:	4b4e      	ldr	r3, [pc, #312]	; (8005be0 <UART_SetConfig+0x5c0>)
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005aa8:	e00d      	b.n	8005ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aaa:	f7fe fdeb 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8005aae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab0:	e009      	b.n	8005ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ab8:	e005      	b.n	8005ac6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8090 	beq.w	8005bee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	4a44      	ldr	r2, [pc, #272]	; (8005be4 <UART_SetConfig+0x5c4>)
 8005ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ae0:	005a      	lsls	r2, r3, #1
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	441a      	add	r2, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	2b0f      	cmp	r3, #15
 8005af8:	d916      	bls.n	8005b28 <UART_SetConfig+0x508>
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b00:	d212      	bcs.n	8005b28 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f023 030f 	bic.w	r3, r3, #15
 8005b0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	8bfb      	ldrh	r3, [r7, #30]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	8bfa      	ldrh	r2, [r7, #30]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	e062      	b.n	8005bee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b2e:	e05e      	b.n	8005bee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d828      	bhi.n	8005b8a <UART_SetConfig+0x56a>
 8005b38:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <UART_SetConfig+0x520>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005b8b 	.word	0x08005b8b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b8b 	.word	0x08005b8b
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005b8b 	.word	0x08005b8b
 8005b60:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fe fe26 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b6a:	e014      	b.n	8005b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fe fe38 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
 8005b70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b72:	e010      	b.n	8005b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <UART_SetConfig+0x5c0>)
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b78:	e00d      	b.n	8005b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fe fd83 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8005b7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b80:	e009      	b.n	8005b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b88:	e005      	b.n	8005b96 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b94:	bf00      	nop
    }

    if (pclk != 0U)
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d028      	beq.n	8005bee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <UART_SetConfig+0x5c4>)
 8005ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	441a      	add	r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b0f      	cmp	r3, #15
 8005bc4:	d910      	bls.n	8005be8 <UART_SetConfig+0x5c8>
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bcc:	d20c      	bcs.n	8005be8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60da      	str	r2, [r3, #12]
 8005bd8:	e009      	b.n	8005bee <UART_SetConfig+0x5ce>
 8005bda:	bf00      	nop
 8005bdc:	40008000 	.word	0x40008000
 8005be0:	00f42400 	.word	0x00f42400
 8005be4:	0800d320 	.word	0x0800d320
      }
      else
      {
        ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2200      	movs	r2, #0
 8005c02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3730      	adds	r7, #48	; 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d16:	d10a      	bne.n	8005d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d6c:	f7fb ff8a 	bl	8001c84 <HAL_GetTick>
 8005d70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d10e      	bne.n	8005d9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f82f 	bl	8005df2 <UART_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e025      	b.n	8005dea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d10e      	bne.n	8005dca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f819 	bl	8005df2 <UART_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e00f      	b.n	8005dea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b09c      	sub	sp, #112	; 0x70
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e02:	e0a9      	b.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	f000 80a5 	beq.w	8005f58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0e:	f7fb ff39 	bl	8001c84 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d140      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e38:	667b      	str	r3, [r7, #100]	; 0x64
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e6      	bne.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e76:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e5      	bne.n	8005e56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e069      	b.n	8005f7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d051      	beq.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec2:	d149      	bne.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ecc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
 8005eee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e6      	bne.n	8005ece <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f20:	623a      	str	r2, [r7, #32]
 8005f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e010      	b.n	8005f7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	f43f af46 	beq.w	8005e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3770      	adds	r7, #112	; 0x70
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e027      	b.n	8005fe8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2224      	movs	r2, #36	; 0x24
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006008:	2302      	movs	r3, #2
 800600a:	e02d      	b.n	8006068 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	; 0x24
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f84f 	bl	80060ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006084:	2302      	movs	r3, #2
 8006086:	e02d      	b.n	80060e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f811 	bl	80060ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800610c:	e031      	b.n	8006172 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800610e:	2308      	movs	r3, #8
 8006110:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006112:	2308      	movs	r3, #8
 8006114:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	0e5b      	lsrs	r3, r3, #25
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	0f5b      	lsrs	r3, r3, #29
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006136:	7bbb      	ldrb	r3, [r7, #14]
 8006138:	7b3a      	ldrb	r2, [r7, #12]
 800613a:	4911      	ldr	r1, [pc, #68]	; (8006180 <UARTEx_SetNbDataToProcess+0x94>)
 800613c:	5c8a      	ldrb	r2, [r1, r2]
 800613e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006142:	7b3a      	ldrb	r2, [r7, #12]
 8006144:	490f      	ldr	r1, [pc, #60]	; (8006184 <UARTEx_SetNbDataToProcess+0x98>)
 8006146:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006148:	fb93 f3f2 	sdiv	r3, r3, r2
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	7b7a      	ldrb	r2, [r7, #13]
 8006158:	4909      	ldr	r1, [pc, #36]	; (8006180 <UARTEx_SetNbDataToProcess+0x94>)
 800615a:	5c8a      	ldrb	r2, [r1, r2]
 800615c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006160:	7b7a      	ldrb	r2, [r7, #13]
 8006162:	4908      	ldr	r1, [pc, #32]	; (8006184 <UARTEx_SetNbDataToProcess+0x98>)
 8006164:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006166:	fb93 f3f2 	sdiv	r3, r3, r2
 800616a:	b29a      	uxth	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	0800d338 	.word	0x0800d338
 8006184:	0800d340 	.word	0x0800d340

08006188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006188:	b084      	sub	sp, #16
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	f107 001c 	add.w	r0, r7, #28
 8006196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa70 	bl	800668c <USB_CoreReset>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80061b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
 80061c2:	e005      	b.n	80061d0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061dc:	b004      	add	sp, #16
 80061de:	4770      	bx	lr

080061e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 0201 	bic.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d115      	bne.n	8006250 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006230:	2001      	movs	r0, #1
 8006232:	f7fb fd33 	bl	8001c9c <HAL_Delay>
      ms++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa17 	bl	8006670 <USB_GetMode>
 8006242:	4603      	mov	r3, r0
 8006244:	2b01      	cmp	r3, #1
 8006246:	d01e      	beq.n	8006286 <USB_SetCurrentMode+0x84>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b31      	cmp	r3, #49	; 0x31
 800624c:	d9f0      	bls.n	8006230 <USB_SetCurrentMode+0x2e>
 800624e:	e01a      	b.n	8006286 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d115      	bne.n	8006282 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006262:	2001      	movs	r0, #1
 8006264:	f7fb fd1a 	bl	8001c9c <HAL_Delay>
      ms++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9fe 	bl	8006670 <USB_GetMode>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <USB_SetCurrentMode+0x84>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b31      	cmp	r3, #49	; 0x31
 800627e:	d9f0      	bls.n	8006262 <USB_SetCurrentMode+0x60>
 8006280:	e001      	b.n	8006286 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e005      	b.n	8006292 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b32      	cmp	r3, #50	; 0x32
 800628a:	d101      	bne.n	8006290 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800629c:	b084      	sub	sp, #16
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e009      	b.n	80062d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3340      	adds	r3, #64	; 0x40
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3301      	adds	r3, #1
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b0e      	cmp	r3, #14
 80062d4:	d9f2      	bls.n	80062bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d11c      	bne.n	8006316 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ea:	f043 0302 	orr.w	r3, r3, #2
 80062ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e005      	b.n	8006322 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006334:	4619      	mov	r1, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	461a      	mov	r2, r3
 800633e:	680b      	ldr	r3, [r1, #0]
 8006340:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006342:	2103      	movs	r1, #3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f959 	bl	80065fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800634a:	2110      	movs	r1, #16
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8f1 	bl	8006534 <USB_FlushTxFifo>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f91d 	bl	800659c <USB_FlushRxFifo>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	461a      	mov	r2, r3
 8006374:	2300      	movs	r3, #0
 8006376:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	461a      	mov	r2, r3
 8006380:	2300      	movs	r3, #0
 8006382:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e043      	b.n	800641e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ac:	d118      	bne.n	80063e0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	461a      	mov	r2, r3
 80063c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	e013      	b.n	80063f2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	461a      	mov	r2, r3
 80063d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e008      	b.n	80063f2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	461a      	mov	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	461a      	mov	r2, r3
 8006412:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	3301      	adds	r3, #1
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	429a      	cmp	r2, r3
 8006424:	d3b7      	bcc.n	8006396 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e043      	b.n	80064b4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800643e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006442:	d118      	bne.n	8006476 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	461a      	mov	r2, r3
 8006458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e013      	b.n	8006488 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e008      	b.n	8006488 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	461a      	mov	r2, r3
 8006484:	2300      	movs	r3, #0
 8006486:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006494:	461a      	mov	r2, r3
 8006496:	2300      	movs	r3, #0
 8006498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3301      	adds	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d3b7      	bcc.n	800642c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f043 0210 	orr.w	r2, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <USB_DevInit+0x294>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f043 0208 	orr.w	r2, r3, #8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d107      	bne.n	800651e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006516:	f043 0304 	orr.w	r3, r3, #4
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800652a:	b004      	add	sp, #16
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	803c3800 	.word	0x803c3800

08006534 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a13      	ldr	r2, [pc, #76]	; (8006598 <USB_FlushTxFifo+0x64>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d901      	bls.n	8006554 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e01b      	b.n	800658c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	daf2      	bge.n	8006542 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	019b      	lsls	r3, r3, #6
 8006564:	f043 0220 	orr.w	r2, r3, #32
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a08      	ldr	r2, [pc, #32]	; (8006598 <USB_FlushTxFifo+0x64>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e006      	b.n	800658c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b20      	cmp	r3, #32
 8006588:	d0f0      	beq.n	800656c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	00030d40 	.word	0x00030d40

0800659c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a11      	ldr	r2, [pc, #68]	; (80065f8 <USB_FlushRxFifo+0x5c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d901      	bls.n	80065ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e018      	b.n	80065ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	daf2      	bge.n	80065a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2210      	movs	r2, #16
 80065ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <USB_FlushRxFifo+0x5c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e006      	b.n	80065ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d0f0      	beq.n	80065cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	00030d40 	.word	0x00030d40

080065fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800661c:	4313      	orrs	r3, r2
 800661e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006648:	f023 0303 	bic.w	r3, r3, #3
 800664c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f003 0301 	and.w	r3, r3, #1
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <USB_CoreReset+0x64>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e01b      	b.n	80066e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	daf2      	bge.n	8006698 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <USB_CoreReset+0x64>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e006      	b.n	80066e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d0f0      	beq.n	80066c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	00030d40 	.word	0x00030d40

080066f4 <__NVIC_SetPriority>:
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	6039      	str	r1, [r7, #0]
 80066fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006704:	2b00      	cmp	r3, #0
 8006706:	db0a      	blt.n	800671e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	490c      	ldr	r1, [pc, #48]	; (8006740 <__NVIC_SetPriority+0x4c>)
 800670e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006712:	0112      	lsls	r2, r2, #4
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	440b      	add	r3, r1
 8006718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800671c:	e00a      	b.n	8006734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	4908      	ldr	r1, [pc, #32]	; (8006744 <__NVIC_SetPriority+0x50>)
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	3b04      	subs	r3, #4
 800672c:	0112      	lsls	r2, r2, #4
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	440b      	add	r3, r1
 8006732:	761a      	strb	r2, [r3, #24]
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	e000e100 	.word	0xe000e100
 8006744:	e000ed00 	.word	0xe000ed00

08006748 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800674c:	2100      	movs	r1, #0
 800674e:	f06f 0004 	mvn.w	r0, #4
 8006752:	f7ff ffcf 	bl	80066f4 <__NVIC_SetPriority>
#endif
}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006762:	f3ef 8305 	mrs	r3, IPSR
 8006766:	603b      	str	r3, [r7, #0]
  return(result);
 8006768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800676e:	f06f 0305 	mvn.w	r3, #5
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	e00c      	b.n	8006790 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <osKernelInitialize+0x44>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d105      	bne.n	800678a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800677e:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <osKernelInitialize+0x44>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006784:	2300      	movs	r3, #0
 8006786:	607b      	str	r3, [r7, #4]
 8006788:	e002      	b.n	8006790 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
 800678e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006790:	687b      	ldr	r3, [r7, #4]
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200008a8 	.word	0x200008a8

080067a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067aa:	f3ef 8305 	mrs	r3, IPSR
 80067ae:	603b      	str	r3, [r7, #0]
  return(result);
 80067b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <osKernelStart+0x1a>
    stat = osErrorISR;
 80067b6:	f06f 0305 	mvn.w	r3, #5
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	e010      	b.n	80067e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067be:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <osKernelStart+0x48>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d109      	bne.n	80067da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067c6:	f7ff ffbf 	bl	8006748 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <osKernelStart+0x48>)
 80067cc:	2202      	movs	r2, #2
 80067ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067d0:	f001 f866 	bl	80078a0 <vTaskStartScheduler>
      stat = osOK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e002      	b.n	80067e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067e0:	687b      	ldr	r3, [r7, #4]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200008a8 	.word	0x200008a8

080067f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	; 0x38
 80067f4:	af04      	add	r7, sp, #16
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006800:	f3ef 8305 	mrs	r3, IPSR
 8006804:	617b      	str	r3, [r7, #20]
  return(result);
 8006806:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006808:	2b00      	cmp	r3, #0
 800680a:	d17e      	bne.n	800690a <osThreadNew+0x11a>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d07b      	beq.n	800690a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006816:	2318      	movs	r3, #24
 8006818:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d045      	beq.n	80068b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <osThreadNew+0x48>
        name = attr->name;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <osThreadNew+0x6e>
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	2b38      	cmp	r3, #56	; 0x38
 8006850:	d805      	bhi.n	800685e <osThreadNew+0x6e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <osThreadNew+0x72>
        return (NULL);
 800685e:	2300      	movs	r3, #0
 8006860:	e054      	b.n	800690c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	089b      	lsrs	r3, r3, #2
 8006870:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <osThreadNew+0xa8>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b5b      	cmp	r3, #91	; 0x5b
 8006880:	d90a      	bls.n	8006898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006886:	2b00      	cmp	r3, #0
 8006888:	d006      	beq.n	8006898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <osThreadNew+0xa8>
        mem = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e010      	b.n	80068ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10c      	bne.n	80068ba <osThreadNew+0xca>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d108      	bne.n	80068ba <osThreadNew+0xca>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <osThreadNew+0xca>
          mem = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	e001      	b.n	80068ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d110      	bne.n	80068e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068c8:	9202      	str	r2, [sp, #8]
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fe0c 	bl	80074f4 <xTaskCreateStatic>
 80068dc:	4603      	mov	r3, r0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	e013      	b.n	800690a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d110      	bne.n	800690a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f107 0310 	add.w	r3, r7, #16
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fe57 	bl	80075ae <xTaskCreate>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d001      	beq.n	800690a <osThreadNew+0x11a>
            hTask = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800690a:	693b      	ldr	r3, [r7, #16]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3728      	adds	r7, #40	; 0x28
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800691c:	f3ef 8305 	mrs	r3, IPSR
 8006920:	60bb      	str	r3, [r7, #8]
  return(result);
 8006922:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <osDelay+0x1c>
    stat = osErrorISR;
 8006928:	f06f 0305 	mvn.w	r3, #5
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	e007      	b.n	8006940 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <osDelay+0x2c>
      vTaskDelay(ticks);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 ff7c 	bl	8007838 <vTaskDelay>
    }
  }

  return (stat);
 8006940:	68fb      	ldr	r3, [r7, #12]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a07      	ldr	r2, [pc, #28]	; (8006978 <vApplicationGetIdleTaskMemory+0x2c>)
 800695c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4a06      	ldr	r2, [pc, #24]	; (800697c <vApplicationGetIdleTaskMemory+0x30>)
 8006962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	601a      	str	r2, [r3, #0]
}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	200008ac 	.word	0x200008ac
 800697c:	20000908 	.word	0x20000908

08006980 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a07      	ldr	r2, [pc, #28]	; (80069ac <vApplicationGetTimerTaskMemory+0x2c>)
 8006990:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <vApplicationGetTimerTaskMemory+0x30>)
 8006996:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800699e:	601a      	str	r2, [r3, #0]
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20000b08 	.word	0x20000b08
 80069b0:	20000b64 	.word	0x20000b64

080069b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f103 0208 	add.w	r2, r3, #8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295
 80069cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f103 0208 	add.w	r2, r3, #8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f103 0208 	add.w	r2, r3, #8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d103      	bne.n	8006a76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e00c      	b.n	8006a90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e002      	b.n	8006a84 <vListInsert+0x2e>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d2f6      	bcs.n	8006a7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6892      	ldr	r2, [r2, #8]
 8006ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6852      	ldr	r2, [r2, #4]
 8006ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d103      	bne.n	8006afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	1e5a      	subs	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b46:	f002 f84d 	bl	8008be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	441a      	add	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	3b01      	subs	r3, #1
 8006b78:	68f9      	ldr	r1, [r7, #12]
 8006b7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	22ff      	movs	r2, #255	; 0xff
 8006b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	22ff      	movs	r2, #255	; 0xff
 8006b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d114      	bne.n	8006bc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01a      	beq.n	8006bda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3310      	adds	r3, #16
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f903 	bl	8007db4 <xTaskRemoveFromEventList>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d012      	beq.n	8006bda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <xQueueGenericReset+0xcc>)
 8006bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	e009      	b.n	8006bda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3310      	adds	r3, #16
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fef2 	bl	80069b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3324      	adds	r3, #36	; 0x24
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff feed 	bl	80069b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bda:	f002 f833 	bl	8008c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bde:	2301      	movs	r3, #1
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08e      	sub	sp, #56	; 0x38
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <xQueueGenericCreateStatic+0x52>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <xQueueGenericCreateStatic+0x56>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <xQueueGenericCreateStatic+0x58>
 8006c42:	2300      	movs	r3, #0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	623b      	str	r3, [r7, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <xQueueGenericCreateStatic+0x7e>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <xQueueGenericCreateStatic+0x82>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <xQueueGenericCreateStatic+0x84>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	61fb      	str	r3, [r7, #28]
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c8a:	2350      	movs	r3, #80	; 0x50
 8006c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b50      	cmp	r3, #80	; 0x50
 8006c92:	d00a      	beq.n	8006caa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	61bb      	str	r3, [r7, #24]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006caa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f805 	bl	8006cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3730      	adds	r7, #48	; 0x30
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e002      	b.n	8006cfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	69b8      	ldr	r0, [r7, #24]
 8006d0e:	f7ff ff05 	bl	8006b1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	78fa      	ldrb	r2, [r7, #3]
 8006d16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08e      	sub	sp, #56	; 0x38
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d32:	2300      	movs	r3, #0
 8006d34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <xQueueGenericSend+0x32>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d103      	bne.n	8006d64 <xQueueGenericSend+0x40>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <xQueueGenericSend+0x44>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <xQueueGenericSend+0x46>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <xQueueGenericSend+0x60>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d103      	bne.n	8006d92 <xQueueGenericSend+0x6e>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <xQueueGenericSend+0x72>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <xQueueGenericSend+0x74>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006db2:	f001 f9bd 	bl	8008130 <xTaskGetSchedulerState>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <xQueueGenericSend+0x9e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <xQueueGenericSend+0xa2>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <xQueueGenericSend+0xa4>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	61fb      	str	r3, [r7, #28]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006de2:	f001 feff 	bl	8008be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <xQueueGenericSend+0xd4>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d129      	bne.n	8006e4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dfe:	f000 fa0b 	bl	8007218 <prvCopyDataToQueue>
 8006e02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d010      	beq.n	8006e2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	3324      	adds	r3, #36	; 0x24
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 ffcf 	bl	8007db4 <xTaskRemoveFromEventList>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d013      	beq.n	8006e44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e1c:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <xQueueGenericSend+0x1f8>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	e00a      	b.n	8006e44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e34:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <xQueueGenericSend+0x1f8>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e44:	f001 fefe 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e063      	b.n	8006f14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e52:	f001 fef7 	bl	8008c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e05c      	b.n	8006f14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e60:	f107 0314 	add.w	r3, r7, #20
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 f809 	bl	8007e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e6e:	f001 fee9 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e72:	f000 fd7b 	bl	800796c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e76:	f001 feb5 	bl	8008be4 <vPortEnterCritical>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e80:	b25b      	sxtb	r3, r3
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d103      	bne.n	8006e90 <xQueueGenericSend+0x16c>
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d103      	bne.n	8006ea6 <xQueueGenericSend+0x182>
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea6:	f001 fecd 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eaa:	1d3a      	adds	r2, r7, #4
 8006eac:	f107 0314 	add.w	r3, r7, #20
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fff8 	bl	8007ea8 <xTaskCheckForTimeOut>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d124      	bne.n	8006f08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ec0:	f000 faa2 	bl	8007408 <prvIsQueueFull>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d018      	beq.n	8006efc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	3310      	adds	r3, #16
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 ff1e 	bl	8007d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eda:	f000 fa2d 	bl	8007338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ede:	f000 fd53 	bl	8007988 <xTaskResumeAll>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f47f af7c 	bne.w	8006de2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <xQueueGenericSend+0x1f8>)
 8006eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	e772      	b.n	8006de2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006efe:	f000 fa1b 	bl	8007338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f02:	f000 fd41 	bl	8007988 <xTaskResumeAll>
 8006f06:	e76c      	b.n	8006de2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f0a:	f000 fa15 	bl	8007338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f0e:	f000 fd3b 	bl	8007988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3738      	adds	r7, #56	; 0x38
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b090      	sub	sp, #64	; 0x40
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <xQueueGenericSendFromISR+0x3c>
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <xQueueGenericSendFromISR+0x40>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <xQueueGenericSendFromISR+0x42>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d103      	bne.n	8006f8a <xQueueGenericSendFromISR+0x6a>
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d101      	bne.n	8006f8e <xQueueGenericSendFromISR+0x6e>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueGenericSendFromISR+0x70>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	623b      	str	r3, [r7, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006faa:	f001 fefd 	bl	8008da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fae:	f3ef 8211 	mrs	r2, BASEPRI
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	61fa      	str	r2, [r7, #28]
 8006fc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <xQueueGenericSendFromISR+0xbc>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d12f      	bne.n	800703c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ff2:	f000 f911 	bl	8007218 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ff6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d112      	bne.n	8007026 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d016      	beq.n	8007036 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	3324      	adds	r3, #36	; 0x24
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fed1 	bl	8007db4 <xTaskRemoveFromEventList>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00e      	beq.n	8007036 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00b      	beq.n	8007036 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e007      	b.n	8007036 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800702a:	3301      	adds	r3, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	b25a      	sxtb	r2, r3
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007036:	2301      	movs	r3, #1
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800703a:	e001      	b.n	8007040 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800703c:	2300      	movs	r3, #0
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007042:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800704a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800704c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800704e:	4618      	mov	r0, r3
 8007050:	3740      	adds	r7, #64	; 0x40
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	; 0x30
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <xQueueReceive+0x30>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	623b      	str	r3, [r7, #32]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d103      	bne.n	8007096 <xQueueReceive+0x3e>
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <xQueueReceive+0x42>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <xQueueReceive+0x44>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <xQueueReceive+0x5e>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	61fb      	str	r3, [r7, #28]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070b6:	f001 f83b 	bl	8008130 <xTaskGetSchedulerState>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <xQueueReceive+0x6e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <xQueueReceive+0x72>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <xQueueReceive+0x74>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <xQueueReceive+0x8e>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	61bb      	str	r3, [r7, #24]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070e6:	f001 fd7d 	bl	8008be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01f      	beq.n	8007136 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fa:	f000 f8f7 	bl	80072ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	1e5a      	subs	r2, r3, #1
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00f      	beq.n	800712e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	3310      	adds	r3, #16
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fe4e 	bl	8007db4 <xTaskRemoveFromEventList>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800711e:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <xQueueReceive+0x1bc>)
 8007120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800712e:	f001 fd89 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8007132:	2301      	movs	r3, #1
 8007134:	e069      	b.n	800720a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d103      	bne.n	8007144 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800713c:	f001 fd82 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007140:	2300      	movs	r3, #0
 8007142:	e062      	b.n	800720a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800714a:	f107 0310 	add.w	r3, r7, #16
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fe94 	bl	8007e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007158:	f001 fd74 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800715c:	f000 fc06 	bl	800796c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007160:	f001 fd40 	bl	8008be4 <vPortEnterCritical>
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800716a:	b25b      	sxtb	r3, r3
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d103      	bne.n	800717a <xQueueReceive+0x122>
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007180:	b25b      	sxtb	r3, r3
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d103      	bne.n	8007190 <xQueueReceive+0x138>
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007190:	f001 fd58 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007194:	1d3a      	adds	r2, r7, #4
 8007196:	f107 0310 	add.w	r3, r7, #16
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fe83 	bl	8007ea8 <xTaskCheckForTimeOut>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d123      	bne.n	80071f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071aa:	f000 f917 	bl	80073dc <prvIsQueueEmpty>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d017      	beq.n	80071e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	3324      	adds	r3, #36	; 0x24
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fda9 	bl	8007d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c4:	f000 f8b8 	bl	8007338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071c8:	f000 fbde 	bl	8007988 <xTaskResumeAll>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d189      	bne.n	80070e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071d2:	4b10      	ldr	r3, [pc, #64]	; (8007214 <xQueueReceive+0x1bc>)
 80071d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	e780      	b.n	80070e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e6:	f000 f8a7 	bl	8007338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ea:	f000 fbcd 	bl	8007988 <xTaskResumeAll>
 80071ee:	e77a      	b.n	80070e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f2:	f000 f8a1 	bl	8007338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071f6:	f000 fbc7 	bl	8007988 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fc:	f000 f8ee 	bl	80073dc <prvIsQueueEmpty>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	f43f af6f 	beq.w	80070e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007208:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800720a:	4618      	mov	r0, r3
 800720c:	3730      	adds	r7, #48	; 0x30
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10d      	bne.n	8007252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d14d      	bne.n	80072da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 ff92 	bl	800816c <xTaskPriorityDisinherit>
 8007248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	e043      	b.n	80072da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d119      	bne.n	800728c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6858      	ldr	r0, [r3, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	461a      	mov	r2, r3
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	f003 f914 	bl	800a490 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d32b      	bcc.n	80072da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	e026      	b.n	80072da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68d8      	ldr	r0, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	461a      	mov	r2, r3
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	f003 f8fa 	bl	800a490 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	425b      	negs	r3, r3
 80072a6:	441a      	add	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d207      	bcs.n	80072c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	425b      	negs	r3, r3
 80072c2:	441a      	add	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d105      	bne.n	80072da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072e2:	697b      	ldr	r3, [r7, #20]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d018      	beq.n	8007330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	441a      	add	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d303      	bcc.n	8007320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68d9      	ldr	r1, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	461a      	mov	r2, r3
 800732a:	6838      	ldr	r0, [r7, #0]
 800732c:	f003 f8b0 	bl	800a490 <memcpy>
	}
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007340:	f001 fc50 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800734c:	e011      	b.n	8007372 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d012      	beq.n	800737c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fd2a 	bl	8007db4 <xTaskRemoveFromEventList>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007366:	f000 fe01 	bl	8007f6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	3b01      	subs	r3, #1
 800736e:	b2db      	uxtb	r3, r3
 8007370:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	dce9      	bgt.n	800734e <prvUnlockQueue+0x16>
 800737a:	e000      	b.n	800737e <prvUnlockQueue+0x46>
					break;
 800737c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	22ff      	movs	r2, #255	; 0xff
 8007382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007386:	f001 fc5d 	bl	8008c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800738a:	f001 fc2b 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007394:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007396:	e011      	b.n	80073bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d012      	beq.n	80073c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fd05 	bl	8007db4 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073b0:	f000 fddc 	bl	8007f6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dce9      	bgt.n	8007398 <prvUnlockQueue+0x60>
 80073c4:	e000      	b.n	80073c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	22ff      	movs	r2, #255	; 0xff
 80073cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073d0:	f001 fc38 	bl	8008c44 <vPortExitCritical>
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073e4:	f001 fbfe 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073f0:	2301      	movs	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	e001      	b.n	80073fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073fa:	f001 fc23 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007410:	f001 fbe8 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	429a      	cmp	r2, r3
 800741e:	d102      	bne.n	8007426 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e001      	b.n	800742a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800742a:	f001 fc0b 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 800742e:	68fb      	ldr	r3, [r7, #12]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e014      	b.n	8007472 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007448:	4a0f      	ldr	r2, [pc, #60]	; (8007488 <vQueueAddToRegistry+0x50>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007454:	490c      	ldr	r1, [pc, #48]	; (8007488 <vQueueAddToRegistry+0x50>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800745e:	4a0a      	ldr	r2, [pc, #40]	; (8007488 <vQueueAddToRegistry+0x50>)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800746a:	e006      	b.n	800747a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3301      	adds	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b07      	cmp	r3, #7
 8007476:	d9e7      	bls.n	8007448 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20000f64 	.word	0x20000f64

0800748c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800749c:	f001 fba2 	bl	8008be4 <vPortEnterCritical>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a6:	b25b      	sxtb	r3, r3
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d103      	bne.n	80074b6 <vQueueWaitForMessageRestricted+0x2a>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d103      	bne.n	80074cc <vQueueWaitForMessageRestricted+0x40>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074cc:	f001 fbba 	bl	8008c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fc3b 	bl	8007d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074e6:	6978      	ldr	r0, [r7, #20]
 80074e8:	f7ff ff26 	bl	8007338 <prvUnlockQueue>
	}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08e      	sub	sp, #56	; 0x38
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	623b      	str	r3, [r7, #32]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <xTaskCreateStatic+0x46>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	61fb      	str	r3, [r7, #28]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800753a:	235c      	movs	r3, #92	; 0x5c
 800753c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b5c      	cmp	r3, #92	; 0x5c
 8007542:	d00a      	beq.n	800755a <xTaskCreateStatic+0x66>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	61bb      	str	r3, [r7, #24]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800755a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01e      	beq.n	80075a0 <xTaskCreateStatic+0xac>
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01b      	beq.n	80075a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007570:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	2202      	movs	r2, #2
 8007576:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800757a:	2300      	movs	r3, #0
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	f107 0314 	add.w	r3, r7, #20
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f850 	bl	8007638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800759a:	f000 f8dd 	bl	8007758 <prvAddNewTaskToReadyList>
 800759e:	e001      	b.n	80075a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075a4:	697b      	ldr	r3, [r7, #20]
	}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3728      	adds	r7, #40	; 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b08c      	sub	sp, #48	; 0x30
 80075b2:	af04      	add	r7, sp, #16
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 fc30 	bl	8008e28 <pvPortMalloc>
 80075c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075d0:	205c      	movs	r0, #92	; 0x5c
 80075d2:	f001 fc29 	bl	8008e28 <pvPortMalloc>
 80075d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
 80075e4:	e005      	b.n	80075f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075e6:	6978      	ldr	r0, [r7, #20]
 80075e8:	f001 fcea 	bl	8008fc0 <vPortFree>
 80075ec:	e001      	b.n	80075f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d017      	beq.n	8007628 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007600:	88fa      	ldrh	r2, [r7, #6]
 8007602:	2300      	movs	r3, #0
 8007604:	9303      	str	r3, [sp, #12]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	9302      	str	r3, [sp, #8]
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f80e 	bl	8007638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800761c:	69f8      	ldr	r0, [r7, #28]
 800761e:	f000 f89b 	bl	8007758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007622:	2301      	movs	r3, #1
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e002      	b.n	800762e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007628:	f04f 33ff 	mov.w	r3, #4294967295
 800762c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800762e:	69bb      	ldr	r3, [r7, #24]
	}
 8007630:	4618      	mov	r0, r3
 8007632:	3720      	adds	r7, #32
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	461a      	mov	r2, r3
 8007650:	21a5      	movs	r1, #165	; 0xa5
 8007652:	f002 ff2b 	bl	800a4ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007660:	3b01      	subs	r3, #1
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <prvInitialiseNewTask+0x58>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	617b      	str	r3, [r7, #20]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01f      	beq.n	80076d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e012      	b.n	80076c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	7819      	ldrb	r1, [r3, #0]
 80076a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	4413      	add	r3, r2
 80076aa:	3334      	adds	r3, #52	; 0x34
 80076ac:	460a      	mov	r2, r1
 80076ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d006      	beq.n	80076ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3301      	adds	r3, #1
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	2b0f      	cmp	r3, #15
 80076c6:	d9e9      	bls.n	800769c <prvInitialiseNewTask+0x64>
 80076c8:	e000      	b.n	80076cc <prvInitialiseNewTask+0x94>
			{
				break;
 80076ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076d4:	e003      	b.n	80076de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	2b37      	cmp	r3, #55	; 0x37
 80076e2:	d901      	bls.n	80076e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076e4:	2337      	movs	r3, #55	; 0x37
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	2200      	movs	r2, #0
 80076f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff f978 	bl	80069f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	3318      	adds	r3, #24
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff f973 	bl	80069f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	2200      	movs	r2, #0
 8007728:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	68f9      	ldr	r1, [r7, #12]
 8007736:	69b8      	ldr	r0, [r7, #24]
 8007738:	f001 f928 	bl	800898c <pxPortInitialiseStack>
 800773c:	4602      	mov	r2, r0
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800774e:	bf00      	nop
 8007750:	3720      	adds	r7, #32
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007760:	f001 fa40 	bl	8008be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007764:	4b2d      	ldr	r3, [pc, #180]	; (800781c <prvAddNewTaskToReadyList+0xc4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	4a2c      	ldr	r2, [pc, #176]	; (800781c <prvAddNewTaskToReadyList+0xc4>)
 800776c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800776e:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800777c:	4b27      	ldr	r3, [pc, #156]	; (800781c <prvAddNewTaskToReadyList+0xc4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d110      	bne.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007784:	f000 fc16 	bl	8007fb4 <prvInitialiseTaskLists>
 8007788:	e00d      	b.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800778a:	4b26      	ldr	r3, [pc, #152]	; (8007824 <prvAddNewTaskToReadyList+0xcc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007792:	4b23      	ldr	r3, [pc, #140]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	429a      	cmp	r2, r3
 800779e:	d802      	bhi.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077a0:	4a1f      	ldr	r2, [pc, #124]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077a6:	4b20      	ldr	r3, [pc, #128]	; (8007828 <prvAddNewTaskToReadyList+0xd0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3301      	adds	r3, #1
 80077ac:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <prvAddNewTaskToReadyList+0xd0>)
 80077ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077b0:	4b1d      	ldr	r3, [pc, #116]	; (8007828 <prvAddNewTaskToReadyList+0xd0>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <prvAddNewTaskToReadyList+0xd4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d903      	bls.n	80077cc <prvAddNewTaskToReadyList+0x74>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	4a18      	ldr	r2, [pc, #96]	; (800782c <prvAddNewTaskToReadyList+0xd4>)
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a15      	ldr	r2, [pc, #84]	; (8007830 <prvAddNewTaskToReadyList+0xd8>)
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7ff f913 	bl	8006a0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077e8:	f001 fa2c 	bl	8008c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <prvAddNewTaskToReadyList+0xcc>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00e      	beq.n	8007812 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d207      	bcs.n	8007812 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <prvAddNewTaskToReadyList+0xdc>)
 8007804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20001478 	.word	0x20001478
 8007820:	20000fa4 	.word	0x20000fa4
 8007824:	20001484 	.word	0x20001484
 8007828:	20001494 	.word	0x20001494
 800782c:	20001480 	.word	0x20001480
 8007830:	20000fa8 	.word	0x20000fa8
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d017      	beq.n	800787a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800784a:	4b13      	ldr	r3, [pc, #76]	; (8007898 <vTaskDelay+0x60>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <vTaskDelay+0x30>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	60bb      	str	r3, [r7, #8]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007868:	f000 f880 	bl	800796c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800786c:	2100      	movs	r1, #0
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fcea 	bl	8008248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007874:	f000 f888 	bl	8007988 <xTaskResumeAll>
 8007878:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d107      	bne.n	8007890 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <vTaskDelay+0x64>)
 8007882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	200014a0 	.word	0x200014a0
 800789c:	e000ed04 	.word	0xe000ed04

080078a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	; 0x28
 80078a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ae:	463a      	mov	r2, r7
 80078b0:	1d39      	adds	r1, r7, #4
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff f848 	bl	800694c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	9202      	str	r2, [sp, #8]
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	2300      	movs	r3, #0
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	2300      	movs	r3, #0
 80078cc:	460a      	mov	r2, r1
 80078ce:	4921      	ldr	r1, [pc, #132]	; (8007954 <vTaskStartScheduler+0xb4>)
 80078d0:	4821      	ldr	r0, [pc, #132]	; (8007958 <vTaskStartScheduler+0xb8>)
 80078d2:	f7ff fe0f 	bl	80074f4 <xTaskCreateStatic>
 80078d6:	4603      	mov	r3, r0
 80078d8:	4a20      	ldr	r2, [pc, #128]	; (800795c <vTaskStartScheduler+0xbc>)
 80078da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078dc:	4b1f      	ldr	r3, [pc, #124]	; (800795c <vTaskStartScheduler+0xbc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078e4:	2301      	movs	r3, #1
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e001      	b.n	80078ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d102      	bne.n	80078fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078f4:	f000 fcfc 	bl	80082f0 <xTimerCreateTimerTask>
 80078f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d116      	bne.n	800792e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613b      	str	r3, [r7, #16]
}
 8007912:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007914:	4b12      	ldr	r3, [pc, #72]	; (8007960 <vTaskStartScheduler+0xc0>)
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800791c:	4b11      	ldr	r3, [pc, #68]	; (8007964 <vTaskStartScheduler+0xc4>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007922:	4b11      	ldr	r3, [pc, #68]	; (8007968 <vTaskStartScheduler+0xc8>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007928:	f001 f8ba 	bl	8008aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800792c:	e00e      	b.n	800794c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d10a      	bne.n	800794c <vTaskStartScheduler+0xac>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <vTaskStartScheduler+0xaa>
}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	0800d29c 	.word	0x0800d29c
 8007958:	08007f85 	.word	0x08007f85
 800795c:	2000149c 	.word	0x2000149c
 8007960:	20001498 	.word	0x20001498
 8007964:	20001484 	.word	0x20001484
 8007968:	2000147c 	.word	0x2000147c

0800796c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007970:	4b04      	ldr	r3, [pc, #16]	; (8007984 <vTaskSuspendAll+0x18>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a03      	ldr	r2, [pc, #12]	; (8007984 <vTaskSuspendAll+0x18>)
 8007978:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800797a:	bf00      	nop
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	200014a0 	.word	0x200014a0

08007988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007996:	4b42      	ldr	r3, [pc, #264]	; (8007aa0 <xTaskResumeAll+0x118>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	603b      	str	r3, [r7, #0]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079b4:	f001 f916 	bl	8008be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079b8:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <xTaskResumeAll+0x118>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3b01      	subs	r3, #1
 80079be:	4a38      	ldr	r2, [pc, #224]	; (8007aa0 <xTaskResumeAll+0x118>)
 80079c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c2:	4b37      	ldr	r3, [pc, #220]	; (8007aa0 <xTaskResumeAll+0x118>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d162      	bne.n	8007a90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ca:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <xTaskResumeAll+0x11c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d05e      	beq.n	8007a90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079d2:	e02f      	b.n	8007a34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d4:	4b34      	ldr	r3, [pc, #208]	; (8007aa8 <xTaskResumeAll+0x120>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3318      	adds	r3, #24
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff f871 	bl	8006ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff f86c 	bl	8006ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f4:	4b2d      	ldr	r3, [pc, #180]	; (8007aac <xTaskResumeAll+0x124>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d903      	bls.n	8007a04 <xTaskResumeAll+0x7c>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4a2a      	ldr	r2, [pc, #168]	; (8007aac <xTaskResumeAll+0x124>)
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a27      	ldr	r2, [pc, #156]	; (8007ab0 <xTaskResumeAll+0x128>)
 8007a12:	441a      	add	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fe fff7 	bl	8006a0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <xTaskResumeAll+0x12c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d302      	bcc.n	8007a34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a2e:	4b22      	ldr	r3, [pc, #136]	; (8007ab8 <xTaskResumeAll+0x130>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a34:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <xTaskResumeAll+0x120>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1cb      	bne.n	80079d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a42:	f000 fb55 	bl	80080f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a46:	4b1d      	ldr	r3, [pc, #116]	; (8007abc <xTaskResumeAll+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d010      	beq.n	8007a74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a52:	f000 f847 	bl	8007ae4 <xTaskIncrementTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <xTaskResumeAll+0x130>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1f1      	bne.n	8007a52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <xTaskResumeAll+0x134>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a74:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <xTaskResumeAll+0x130>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a80:	4b0f      	ldr	r3, [pc, #60]	; (8007ac0 <xTaskResumeAll+0x138>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a90:	f001 f8d8 	bl	8008c44 <vPortExitCritical>

	return xAlreadyYielded;
 8007a94:	68bb      	ldr	r3, [r7, #8]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200014a0 	.word	0x200014a0
 8007aa4:	20001478 	.word	0x20001478
 8007aa8:	20001438 	.word	0x20001438
 8007aac:	20001480 	.word	0x20001480
 8007ab0:	20000fa8 	.word	0x20000fa8
 8007ab4:	20000fa4 	.word	0x20000fa4
 8007ab8:	2000148c 	.word	0x2000148c
 8007abc:	20001488 	.word	0x20001488
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <xTaskGetTickCount+0x1c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ad0:	687b      	ldr	r3, [r7, #4]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	2000147c 	.word	0x2000147c

08007ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aee:	4b4f      	ldr	r3, [pc, #316]	; (8007c2c <xTaskIncrementTick+0x148>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 808f 	bne.w	8007c16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007af8:	4b4d      	ldr	r3, [pc, #308]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b00:	4a4b      	ldr	r2, [pc, #300]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d120      	bne.n	8007b4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b0c:	4b49      	ldr	r3, [pc, #292]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	603b      	str	r3, [r7, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <xTaskIncrementTick+0x46>
 8007b2c:	4b41      	ldr	r3, [pc, #260]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	4b41      	ldr	r3, [pc, #260]	; (8007c38 <xTaskIncrementTick+0x154>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a3f      	ldr	r2, [pc, #252]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	4a3f      	ldr	r2, [pc, #252]	; (8007c38 <xTaskIncrementTick+0x154>)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4b3e      	ldr	r3, [pc, #248]	; (8007c3c <xTaskIncrementTick+0x158>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a3d      	ldr	r2, [pc, #244]	; (8007c3c <xTaskIncrementTick+0x158>)
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	f000 fad1 	bl	80080f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b4e:	4b3c      	ldr	r3, [pc, #240]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d349      	bcc.n	8007bec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b58:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b62:	4b37      	ldr	r3, [pc, #220]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	601a      	str	r2, [r3, #0]
					break;
 8007b6a:	e03f      	b.n	8007bec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6c:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d203      	bcs.n	8007b8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b84:	4a2e      	ldr	r2, [pc, #184]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b8a:	e02f      	b.n	8007bec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe ff99 	bl	8006ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe ff90 	bl	8006ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <xTaskIncrementTick+0x160>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <xTaskIncrementTick+0xd8>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a22      	ldr	r2, [pc, #136]	; (8007c44 <xTaskIncrementTick+0x160>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a1f      	ldr	r2, [pc, #124]	; (8007c48 <xTaskIncrementTick+0x164>)
 8007bca:	441a      	add	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7fe ff1b 	bl	8006a0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <xTaskIncrementTick+0x168>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d3b8      	bcc.n	8007b58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007be6:	2301      	movs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bea:	e7b5      	b.n	8007b58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bec:	4b17      	ldr	r3, [pc, #92]	; (8007c4c <xTaskIncrementTick+0x168>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4915      	ldr	r1, [pc, #84]	; (8007c48 <xTaskIncrementTick+0x164>)
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d901      	bls.n	8007c08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c04:	2301      	movs	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c08:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <xTaskIncrementTick+0x16c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c10:	2301      	movs	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e004      	b.n	8007c20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <xTaskIncrementTick+0x170>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	4a0d      	ldr	r2, [pc, #52]	; (8007c54 <xTaskIncrementTick+0x170>)
 8007c1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c20:	697b      	ldr	r3, [r7, #20]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200014a0 	.word	0x200014a0
 8007c30:	2000147c 	.word	0x2000147c
 8007c34:	20001430 	.word	0x20001430
 8007c38:	20001434 	.word	0x20001434
 8007c3c:	20001490 	.word	0x20001490
 8007c40:	20001498 	.word	0x20001498
 8007c44:	20001480 	.word	0x20001480
 8007c48:	20000fa8 	.word	0x20000fa8
 8007c4c:	20000fa4 	.word	0x20000fa4
 8007c50:	2000148c 	.word	0x2000148c
 8007c54:	20001488 	.word	0x20001488

08007c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c5e:	4b28      	ldr	r3, [pc, #160]	; (8007d00 <vTaskSwitchContext+0xa8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <vTaskSwitchContext+0xac>)
 8007c68:	2201      	movs	r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c6c:	e041      	b.n	8007cf2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007c6e:	4b25      	ldr	r3, [pc, #148]	; (8007d04 <vTaskSwitchContext+0xac>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <vTaskSwitchContext+0xb0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	e010      	b.n	8007c9e <vTaskSwitchContext+0x46>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	607b      	str	r3, [r7, #4]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <vTaskSwitchContext+0x3e>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	491b      	ldr	r1, [pc, #108]	; (8007d0c <vTaskSwitchContext+0xb4>)
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0e4      	beq.n	8007c7c <vTaskSwitchContext+0x24>
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <vTaskSwitchContext+0xb4>)
 8007cbe:	4413      	add	r3, r2
 8007cc0:	60bb      	str	r3, [r7, #8]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d104      	bne.n	8007ce2 <vTaskSwitchContext+0x8a>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <vTaskSwitchContext+0xb8>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	4a06      	ldr	r2, [pc, #24]	; (8007d08 <vTaskSwitchContext+0xb0>)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6013      	str	r3, [r2, #0]
}
 8007cf2:	bf00      	nop
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	200014a0 	.word	0x200014a0
 8007d04:	2000148c 	.word	0x2000148c
 8007d08:	20001480 	.word	0x20001480
 8007d0c:	20000fa8 	.word	0x20000fa8
 8007d10:	20000fa4 	.word	0x20000fa4

08007d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	60fb      	str	r3, [r7, #12]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <vTaskPlaceOnEventList+0x44>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3318      	adds	r3, #24
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fe fe87 	bl	8006a56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d48:	2101      	movs	r1, #1
 8007d4a:	6838      	ldr	r0, [r7, #0]
 8007d4c:	f000 fa7c 	bl	8008248 <prvAddCurrentTaskToDelayedList>
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20000fa4 	.word	0x20000fa4

08007d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	617b      	str	r3, [r7, #20]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3318      	adds	r3, #24
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7fe fe3e 	bl	8006a0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	68b8      	ldr	r0, [r7, #8]
 8007da2:	f000 fa51 	bl	8008248 <prvAddCurrentTaskToDelayedList>
	}
 8007da6:	bf00      	nop
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000fa4 	.word	0x20000fa4

08007db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	60fb      	str	r3, [r7, #12]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3318      	adds	r3, #24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fe6f 	bl	8006ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dea:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <xTaskRemoveFromEventList+0xb0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d11d      	bne.n	8007e2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fe66 	bl	8006ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <xTaskRemoveFromEventList+0xb4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d903      	bls.n	8007e10 <xTaskRemoveFromEventList+0x5c>
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a16      	ldr	r2, [pc, #88]	; (8007e68 <xTaskRemoveFromEventList+0xb4>)
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4a13      	ldr	r2, [pc, #76]	; (8007e6c <xTaskRemoveFromEventList+0xb8>)
 8007e1e:	441a      	add	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fdf1 	bl	8006a0e <vListInsertEnd>
 8007e2c:	e005      	b.n	8007e3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3318      	adds	r3, #24
 8007e32:	4619      	mov	r1, r3
 8007e34:	480e      	ldr	r0, [pc, #56]	; (8007e70 <xTaskRemoveFromEventList+0xbc>)
 8007e36:	f7fe fdea 	bl	8006a0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <xTaskRemoveFromEventList+0xc0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d905      	bls.n	8007e54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <xTaskRemoveFromEventList+0xc4>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	e001      	b.n	8007e58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e58:	697b      	ldr	r3, [r7, #20]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	200014a0 	.word	0x200014a0
 8007e68:	20001480 	.word	0x20001480
 8007e6c:	20000fa8 	.word	0x20000fa8
 8007e70:	20001438 	.word	0x20001438
 8007e74:	20000fa4 	.word	0x20000fa4
 8007e78:	2000148c 	.word	0x2000148c

08007e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e84:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <vTaskInternalSetTimeOutState+0x24>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <vTaskInternalSetTimeOutState+0x28>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20001490 	.word	0x20001490
 8007ea4:	2000147c 	.word	0x2000147c

08007ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	613b      	str	r3, [r7, #16]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10a      	bne.n	8007eea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007eea:	f000 fe7b 	bl	8008be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <xTaskCheckForTimeOut+0xbc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d102      	bne.n	8007f0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e023      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <xTaskCheckForTimeOut+0xc0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d007      	beq.n	8007f2a <xTaskCheckForTimeOut+0x82>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	e015      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d20b      	bcs.n	8007f4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ff9b 	bl	8007e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	e004      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f56:	f000 fe75 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	2000147c 	.word	0x2000147c
 8007f68:	20001490 	.word	0x20001490

08007f6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f70:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <vTaskMissedYield+0x14>)
 8007f72:	2201      	movs	r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
}
 8007f76:	bf00      	nop
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	2000148c 	.word	0x2000148c

08007f84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f8c:	f000 f852 	bl	8008034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <prvIdleTask+0x28>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d9f9      	bls.n	8007f8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <prvIdleTask+0x2c>)
 8007f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fa8:	e7f0      	b.n	8007f8c <prvIdleTask+0x8>
 8007faa:	bf00      	nop
 8007fac:	20000fa8 	.word	0x20000fa8
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]
 8007fbe:	e00c      	b.n	8007fda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4a12      	ldr	r2, [pc, #72]	; (8008014 <prvInitialiseTaskLists+0x60>)
 8007fcc:	4413      	add	r3, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fcf0 	bl	80069b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	607b      	str	r3, [r7, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b37      	cmp	r3, #55	; 0x37
 8007fde:	d9ef      	bls.n	8007fc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fe0:	480d      	ldr	r0, [pc, #52]	; (8008018 <prvInitialiseTaskLists+0x64>)
 8007fe2:	f7fe fce7 	bl	80069b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fe6:	480d      	ldr	r0, [pc, #52]	; (800801c <prvInitialiseTaskLists+0x68>)
 8007fe8:	f7fe fce4 	bl	80069b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fec:	480c      	ldr	r0, [pc, #48]	; (8008020 <prvInitialiseTaskLists+0x6c>)
 8007fee:	f7fe fce1 	bl	80069b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ff2:	480c      	ldr	r0, [pc, #48]	; (8008024 <prvInitialiseTaskLists+0x70>)
 8007ff4:	f7fe fcde 	bl	80069b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ff8:	480b      	ldr	r0, [pc, #44]	; (8008028 <prvInitialiseTaskLists+0x74>)
 8007ffa:	f7fe fcdb 	bl	80069b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	; (800802c <prvInitialiseTaskLists+0x78>)
 8008000:	4a05      	ldr	r2, [pc, #20]	; (8008018 <prvInitialiseTaskLists+0x64>)
 8008002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <prvInitialiseTaskLists+0x7c>)
 8008006:	4a05      	ldr	r2, [pc, #20]	; (800801c <prvInitialiseTaskLists+0x68>)
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000fa8 	.word	0x20000fa8
 8008018:	20001408 	.word	0x20001408
 800801c:	2000141c 	.word	0x2000141c
 8008020:	20001438 	.word	0x20001438
 8008024:	2000144c 	.word	0x2000144c
 8008028:	20001464 	.word	0x20001464
 800802c:	20001430 	.word	0x20001430
 8008030:	20001434 	.word	0x20001434

08008034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800803a:	e019      	b.n	8008070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800803c:	f000 fdd2 	bl	8008be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008040:	4b10      	ldr	r3, [pc, #64]	; (8008084 <prvCheckTasksWaitingTermination+0x50>)
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fd3b 	bl	8006ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008052:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <prvCheckTasksWaitingTermination+0x54>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3b01      	subs	r3, #1
 8008058:	4a0b      	ldr	r2, [pc, #44]	; (8008088 <prvCheckTasksWaitingTermination+0x54>)
 800805a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3b01      	subs	r3, #1
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 8008064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008066:	f000 fded 	bl	8008c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f810 	bl	8008090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e1      	bne.n	800803c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	2000144c 	.word	0x2000144c
 8008088:	20001478 	.word	0x20001478
 800808c:	20001460 	.word	0x20001460

08008090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d108      	bne.n	80080b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 ff8a 	bl	8008fc0 <vPortFree>
				vPortFree( pxTCB );
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 ff87 	bl	8008fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080b2:	e018      	b.n	80080e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d103      	bne.n	80080c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 ff7e 	bl	8008fc0 <vPortFree>
	}
 80080c4:	e00f      	b.n	80080e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d00a      	beq.n	80080e6 <prvDeleteTCB+0x56>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60fb      	str	r3, [r7, #12]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <prvDeleteTCB+0x54>
	}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <prvResetNextTaskUnblockTime+0x38>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <prvResetNextTaskUnblockTime+0x3c>)
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008108:	e008      	b.n	800811c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810a:	4b07      	ldr	r3, [pc, #28]	; (8008128 <prvResetNextTaskUnblockTime+0x38>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a04      	ldr	r2, [pc, #16]	; (800812c <prvResetNextTaskUnblockTime+0x3c>)
 800811a:	6013      	str	r3, [r2, #0]
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	20001430 	.word	0x20001430
 800812c:	20001498 	.word	0x20001498

08008130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <xTaskGetSchedulerState+0x34>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800813e:	2301      	movs	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e008      	b.n	8008156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008144:	4b08      	ldr	r3, [pc, #32]	; (8008168 <xTaskGetSchedulerState+0x38>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800814c:	2302      	movs	r3, #2
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	e001      	b.n	8008156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008156:	687b      	ldr	r3, [r7, #4]
	}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	20001484 	.word	0x20001484
 8008168:	200014a0 	.word	0x200014a0

0800816c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d056      	beq.n	8008230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008182:	4b2e      	ldr	r3, [pc, #184]	; (800823c <xTaskPriorityDisinherit+0xd0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	429a      	cmp	r2, r3
 800818a:	d00a      	beq.n	80081a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60fb      	str	r3, [r7, #12]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	60bb      	str	r3, [r7, #8]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c4:	1e5a      	subs	r2, r3, #1
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d02c      	beq.n	8008230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d128      	bne.n	8008230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fc70 	bl	8006ac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <xTaskPriorityDisinherit+0xd4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <xTaskPriorityDisinherit+0xa4>
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4a0c      	ldr	r2, [pc, #48]	; (8008240 <xTaskPriorityDisinherit+0xd4>)
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4a09      	ldr	r2, [pc, #36]	; (8008244 <xTaskPriorityDisinherit+0xd8>)
 800821e:	441a      	add	r2, r3
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7fe fbf1 	bl	8006a0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000fa4 	.word	0x20000fa4
 8008240:	20001480 	.word	0x20001480
 8008244:	20000fa8 	.word	0x20000fa8

08008248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008252:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008258:	4b20      	ldr	r3, [pc, #128]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fc32 	bl	8006ac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d10a      	bne.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4819      	ldr	r0, [pc, #100]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800827c:	f7fe fbc7 	bl	8006a0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008280:	e026      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	429a      	cmp	r2, r3
 8008298:	d209      	bcs.n	80082ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fe fbd5 	bl	8006a56 <vListInsert>
}
 80082ac:	e010      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fe fbcb 	bl	8006a56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d202      	bcs.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6013      	str	r3, [r2, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	2000147c 	.word	0x2000147c
 80082dc:	20000fa4 	.word	0x20000fa4
 80082e0:	20001464 	.word	0x20001464
 80082e4:	20001434 	.word	0x20001434
 80082e8:	20001430 	.word	0x20001430
 80082ec:	20001498 	.word	0x20001498

080082f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082fa:	f000 fb07 	bl	800890c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082fe:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <xTimerCreateTimerTask+0x80>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d021      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800830e:	1d3a      	adds	r2, r7, #4
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fb31 	bl	8006980 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	9202      	str	r2, [sp, #8]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	2302      	movs	r3, #2
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	460a      	mov	r2, r1
 8008330:	4910      	ldr	r1, [pc, #64]	; (8008374 <xTimerCreateTimerTask+0x84>)
 8008332:	4811      	ldr	r0, [pc, #68]	; (8008378 <xTimerCreateTimerTask+0x88>)
 8008334:	f7ff f8de 	bl	80074f4 <xTaskCreateStatic>
 8008338:	4603      	mov	r3, r0
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <xTimerCreateTimerTask+0x8c>)
 800833c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <xTimerCreateTimerTask+0x8c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008366:	697b      	ldr	r3, [r7, #20]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	200014d4 	.word	0x200014d4
 8008374:	0800d2a4 	.word	0x0800d2a4
 8008378:	080084b5 	.word	0x080084b5
 800837c:	200014d8 	.word	0x200014d8

08008380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800838e:	2300      	movs	r3, #0
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083ae:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <xTimerGenericCommand+0x98>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02a      	beq.n	800840c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	dc18      	bgt.n	80083fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083c8:	f7ff feb2 	bl	8008130 <xTaskGetSchedulerState>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d109      	bne.n	80083e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <xTimerGenericCommand+0x98>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f107 0110 	add.w	r1, r7, #16
 80083da:	2300      	movs	r3, #0
 80083dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083de:	f7fe fca1 	bl	8006d24 <xQueueGenericSend>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
 80083e4:	e012      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <xTimerGenericCommand+0x98>)
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f107 0110 	add.w	r1, r7, #16
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f7fe fc97 	bl	8006d24 <xQueueGenericSend>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
 80083f8:	e008      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	f7fe fd8b 	bl	8006f20 <xQueueGenericSendFromISR>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800840e:	4618      	mov	r0, r3
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200014d4 	.word	0x200014d4

0800841c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008426:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <prvProcessExpiredTimer+0x94>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fb47 	bl	8006ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	18d1      	adds	r1, r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f000 f8d1 	bl	80085fc <prvInsertTimerInActiveList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01f      	beq.n	80084a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008460:	2300      	movs	r3, #0
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	6978      	ldr	r0, [r7, #20]
 800846c:	f7ff ff88 	bl	8008380 <xTimerGenericCommand>
 8008470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60fb      	str	r3, [r7, #12]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	6978      	ldr	r0, [r7, #20]
 80084a6:	4798      	blx	r3
}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200014cc 	.word	0x200014cc

080084b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f857 	bl	8008574 <prvGetNextExpireTime>
 80084c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4619      	mov	r1, r3
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f803 	bl	80084d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084d2:	f000 f8d5 	bl	8008680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d6:	e7f1      	b.n	80084bc <prvTimerTask+0x8>

080084d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084e2:	f7ff fa43 	bl	800796c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f866 	bl	80085bc <prvSampleTimeNow>
 80084f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d130      	bne.n	800855a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	429a      	cmp	r2, r3
 8008504:	d806      	bhi.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008506:	f7ff fa3f 	bl	8007988 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ff85 	bl	800841c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008512:	e024      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <prvProcessTimerOrBlockTask+0x90>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <prvProcessTimerOrBlockTask+0x50>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <prvProcessTimerOrBlockTask+0x52>
 8008528:	2300      	movs	r3, #0
 800852a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <prvProcessTimerOrBlockTask+0x94>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	f7fe ffa7 	bl	800748c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800853e:	f7ff fa23 	bl	8007988 <xTaskResumeAll>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008548:	4b09      	ldr	r3, [pc, #36]	; (8008570 <prvProcessTimerOrBlockTask+0x98>)
 800854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	f3bf 8f6f 	isb	sy
}
 8008558:	e001      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800855a:	f7ff fa15 	bl	8007988 <xTaskResumeAll>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	200014d0 	.word	0x200014d0
 800856c:	200014d4 	.word	0x200014d4
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800857c:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <prvGetNextExpireTime+0x16>
 8008586:	2201      	movs	r2, #1
 8008588:	e000      	b.n	800858c <prvGetNextExpireTime+0x18>
 800858a:	2200      	movs	r2, #0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e001      	b.n	80085a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	200014cc 	.word	0x200014cc

080085bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c4:	f7ff fa7e 	bl	8007ac4 <xTaskGetTickCount>
 80085c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d205      	bcs.n	80085e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085d4:	f000 f936 	bl	8008844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e002      	b.n	80085e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e6:	4a04      	ldr	r2, [pc, #16]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200014dc 	.word	0x200014dc

080085fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d812      	bhi.n	8008648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e01b      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <prvInsertTimerInActiveList+0x7c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe fa08 	bl	8006a56 <vListInsert>
 8008646:	e012      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d206      	bcs.n	800865e <prvInsertTimerInActiveList+0x62>
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e007      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <prvInsertTimerInActiveList+0x80>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fe f9f4 	bl	8006a56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	200014d0 	.word	0x200014d0
 800867c:	200014cc 	.word	0x200014cc

08008680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008686:	e0ca      	b.n	800881e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da18      	bge.n	80086c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	3304      	adds	r3, #4
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61fb      	str	r3, [r7, #28]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	6850      	ldr	r0, [r2, #4]
 80086b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ba:	6892      	ldr	r2, [r2, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f2c0 80aa 	blt.w	800881c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe f9f5 	bl	8006ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086de:	463b      	mov	r3, r7
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ff6b 	bl	80085bc <prvSampleTimeNow>
 80086e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	f200 8097 	bhi.w	800881e <prvProcessReceivedCommands+0x19e>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <prvProcessReceivedCommands+0x78>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008721 	.word	0x08008721
 8008704:	08008795 	.word	0x08008795
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087f3 	.word	0x080087f3
 8008710:	08008721 	.word	0x08008721
 8008714:	08008721 	.word	0x08008721
 8008718:	08008795 	.word	0x08008795
 800871c:	080087a9 	.word	0x080087a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	18d1      	adds	r1, r2, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008740:	f7ff ff5c 	bl	80085fc <prvInsertTimerInActiveList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d069      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d05e      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	441a      	add	r2, r3
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2100      	movs	r1, #0
 8008770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008772:	f7ff fe05 	bl	8008380 <xTimerGenericCommand>
 8008776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d14f      	bne.n	800881e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61bb      	str	r3, [r7, #24]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087a6:	e03a      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10a      	bne.n	80087de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	617b      	str	r3, [r7, #20]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	18d1      	adds	r1, r2, r3
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ec:	f7ff ff06 	bl	80085fc <prvInsertTimerInActiveList>
					break;
 80087f0:	e015      	b.n	800881e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008802:	f000 fbdd 	bl	8008fc0 <vPortFree>
 8008806:	e00a      	b.n	800881e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	b2da      	uxtb	r2, r3
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800881a:	e000      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800881c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <prvProcessReceivedCommands+0x1c0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1d39      	adds	r1, r7, #4
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fc16 	bl	8007058 <xQueueReceive>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f af2a 	bne.w	8008688 <prvProcessReceivedCommands+0x8>
	}
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3730      	adds	r7, #48	; 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	200014d4 	.word	0x200014d4

08008844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800884a:	e048      	b.n	80088de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <prvSwitchTimerLists+0xc0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b2b      	ldr	r3, [pc, #172]	; (8008904 <prvSwitchTimerLists+0xc0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe f92f 	bl	8006ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02e      	beq.n	80088de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90e      	bls.n	80088b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fe f8d4 	bl	8006a56 <vListInsert>
 80088ae:	e016      	b.n	80088de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fd60 	bl	8008380 <xTimerGenericCommand>
 80088c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	603b      	str	r3, [r7, #0]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1b1      	bne.n	800884c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f6:	4a04      	ldr	r2, [pc, #16]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	200014cc 	.word	0x200014cc
 8008908:	200014d0 	.word	0x200014d0

0800890c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008912:	f000 f967 	bl	8008be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d120      	bne.n	8008960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800891e:	4814      	ldr	r0, [pc, #80]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 8008920:	f7fe f848 	bl	80069b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008924:	4813      	ldr	r0, [pc, #76]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008926:	f7fe f845 	bl	80069b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <prvCheckForValidListAndQueue+0x6c>)
 800892c:	4a10      	ldr	r2, [pc, #64]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 800892e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008930:	4b12      	ldr	r3, [pc, #72]	; (800897c <prvCheckForValidListAndQueue+0x70>)
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008936:	2300      	movs	r3, #0
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4b11      	ldr	r3, [pc, #68]	; (8008980 <prvCheckForValidListAndQueue+0x74>)
 800893c:	4a11      	ldr	r2, [pc, #68]	; (8008984 <prvCheckForValidListAndQueue+0x78>)
 800893e:	2110      	movs	r1, #16
 8008940:	200a      	movs	r0, #10
 8008942:	f7fe f953 	bl	8006bec <xQueueGenericCreateStatic>
 8008946:	4603      	mov	r3, r0
 8008948:	4a08      	ldr	r2, [pc, #32]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	490b      	ldr	r1, [pc, #44]	; (8008988 <prvCheckForValidListAndQueue+0x7c>)
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fd6c 	bl	8007438 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008960:	f000 f970 	bl	8008c44 <vPortExitCritical>
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200014d4 	.word	0x200014d4
 8008970:	200014a4 	.word	0x200014a4
 8008974:	200014b8 	.word	0x200014b8
 8008978:	200014cc 	.word	0x200014cc
 800897c:	200014d0 	.word	0x200014d0
 8008980:	20001580 	.word	0x20001580
 8008984:	200014e0 	.word	0x200014e0
 8008988:	0800d2ac 	.word	0x0800d2ac

0800898c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b04      	subs	r3, #4
 800899c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <pxPortInitialiseStack+0x64>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3b14      	subs	r3, #20
 80089c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f06f 0202 	mvn.w	r2, #2
 80089da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b20      	subs	r3, #32
 80089e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	080089f5 	.word	0x080089f5

080089f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <prvTaskExitError+0x54>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d00a      	beq.n	8008a1e <prvTaskExitError+0x2a>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <prvTaskExitError+0x28>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a32:	bf00      	nop
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0fc      	beq.n	8008a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	2000000c 	.word	0x2000000c
 8008a4c:	00000000 	.word	0x00000000

08008a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <pxCurrentTCBConst2>)
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	6808      	ldr	r0, [r1, #0]
 8008a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	f380 8809 	msr	PSP, r0
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8811 	msr	BASEPRI, r0
 8008a6a:	4770      	bx	lr
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst2>:
 8008a70:	20000fa4 	.word	0x20000fa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <prvPortStartFirstTask+0x24>)
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f380 8808 	msr	MSP, r0
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8814 	msr	CONTROL, r0
 8008a8a:	b662      	cpsie	i
 8008a8c:	b661      	cpsie	f
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	df00      	svc	0
 8008a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a9a:	bf00      	nop
 8008a9c:	e000ed08 	.word	0xe000ed08

08008aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008aa6:	4b46      	ldr	r3, [pc, #280]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a46      	ldr	r2, [pc, #280]	; (8008bc4 <xPortStartScheduler+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ac6:	4b3e      	ldr	r3, [pc, #248]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <xPortStartScheduler+0x128>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10a      	bne.n	8008ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <xPortStartScheduler+0x12c>)
 8008ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4b31      	ldr	r3, [pc, #196]	; (8008bd0 <xPortStartScheduler+0x130>)
 8008b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b0e:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b14:	e009      	b.n	8008b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b16:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4a2d      	ldr	r2, [pc, #180]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d0ef      	beq.n	8008b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b36:	4b27      	ldr	r3, [pc, #156]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1c3 0307 	rsb	r3, r3, #7
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d00a      	beq.n	8008b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b6a:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b8e:	f000 f8dd 	bl	8008d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <xPortStartScheduler+0x13c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b98:	f000 f8fc 	bl	8008d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <xPortStartScheduler+0x140>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <xPortStartScheduler+0x140>)
 8008ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ba8:	f7ff ff66 	bl	8008a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bac:	f7ff f854 	bl	8007c58 <vTaskSwitchContext>
	prvTaskExitError();
 8008bb0:	f7ff ff20 	bl	80089f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	e000ed00 	.word	0xe000ed00
 8008bc4:	410fc271 	.word	0x410fc271
 8008bc8:	410fc270 	.word	0x410fc270
 8008bcc:	e000e400 	.word	0xe000e400
 8008bd0:	200015d0 	.word	0x200015d0
 8008bd4:	200015d4 	.word	0x200015d4
 8008bd8:	e000ed20 	.word	0xe000ed20
 8008bdc:	2000000c 	.word	0x2000000c
 8008be0:	e000ef34 	.word	0xe000ef34

08008be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	607b      	str	r3, [r7, #4]
}
 8008bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10f      	bne.n	8008c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <vPortEnterCritical+0x5c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	603b      	str	r3, [r7, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vPortEnterCritical+0x4a>
	}
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <vPortExitCritical+0x50>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vPortExitCritical+0x24>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <vPortExitCritical+0x50>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <vPortExitCritical+0x50>)
 8008c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c72:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <vPortExitCritical+0x50>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <vPortExitCritical+0x42>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f383 8811 	msr	BASEPRI, r3
}
 8008c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2000000c 	.word	0x2000000c
	...

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f01e 0f10 	tst.w	lr, #16
 8008cb0:	bf08      	it	eq
 8008cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	6010      	str	r0, [r2, #0]
 8008cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cc4:	f380 8811 	msr	BASEPRI, r0
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f7fe ffc2 	bl	8007c58 <vTaskSwitchContext>
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	f380 8811 	msr	BASEPRI, r0
 8008cdc:	bc09      	pop	{r0, r3}
 8008cde:	6819      	ldr	r1, [r3, #0]
 8008ce0:	6808      	ldr	r0, [r1, #0]
 8008ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce6:	f01e 0f10 	tst.w	lr, #16
 8008cea:	bf08      	it	eq
 8008cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cf0:	f380 8809 	msr	PSP, r0
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	f3af 8000 	nop.w

08008d00 <pxCurrentTCBConst>:
 8008d00:	20000fa4 	.word	0x20000fa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d22:	f7fe fedf 	bl	8007ae4 <xTaskIncrementTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <xPortSysTickHandler+0x40>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
}
 8008d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <vPortSetupTimerInterrupt+0x38>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <vPortSetupTimerInterrupt+0x3c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <vPortSetupTimerInterrupt+0x40>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	099b      	lsrs	r3, r3, #6
 8008d68:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <vPortSetupTimerInterrupt+0x44>)
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d6e:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000e010 	.word	0xe000e010
 8008d84:	e000e018 	.word	0xe000e018
 8008d88:	20000000 	.word	0x20000000
 8008d8c:	10624dd3 	.word	0x10624dd3
 8008d90:	e000e014 	.word	0xe000e014

08008d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008da4 <vPortEnableVFP+0x10>
 8008d98:	6801      	ldr	r1, [r0, #0]
 8008d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d9e:	6001      	str	r1, [r0, #0]
 8008da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008da2:	bf00      	nop
 8008da4:	e000ed88 	.word	0xe000ed88

08008da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d914      	bls.n	8008de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <vPortValidateInterruptPriority+0x70>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dc4:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <vPortValidateInterruptPriority+0x74>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d20a      	bcs.n	8008de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	607b      	str	r3, [r7, #4]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <vPortValidateInterruptPriority+0x78>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <vPortValidateInterruptPriority+0x7c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d90a      	bls.n	8008e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	603b      	str	r3, [r7, #0]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <vPortValidateInterruptPriority+0x60>
	}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	e000e3f0 	.word	0xe000e3f0
 8008e1c:	200015d0 	.word	0x200015d0
 8008e20:	e000ed0c 	.word	0xe000ed0c
 8008e24:	200015d4 	.word	0x200015d4

08008e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e34:	f7fe fd9a 	bl	800796c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e38:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <pvPortMalloc+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e40:	f000 f920 	bl	8009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e44:	4b59      	ldr	r3, [pc, #356]	; (8008fac <pvPortMalloc+0x184>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 8093 	bne.w	8008f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01d      	beq.n	8008e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e58:	2208      	movs	r2, #8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d014      	beq.n	8008e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f023 0307 	bic.w	r3, r3, #7
 8008e70:	3308      	adds	r3, #8
 8008e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <pvPortMalloc+0x6c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d06e      	beq.n	8008f78 <pvPortMalloc+0x150>
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <pvPortMalloc+0x188>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d869      	bhi.n	8008f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ea4:	4b43      	ldr	r3, [pc, #268]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eae:	e004      	b.n	8008eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d903      	bls.n	8008ecc <pvPortMalloc+0xa4>
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1f1      	bne.n	8008eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ecc:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <pvPortMalloc+0x180>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d050      	beq.n	8008f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2208      	movs	r2, #8
 8008edc:	4413      	add	r3, r2
 8008ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d91f      	bls.n	8008f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <pvPortMalloc+0xf8>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	613b      	str	r3, [r7, #16]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f32:	69b8      	ldr	r0, [r7, #24]
 8008f34:	f000 f908 	bl	8009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f38:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d203      	bcs.n	8008f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <pvPortMalloc+0x184>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <pvPortMalloc+0x194>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <pvPortMalloc+0x194>)
 8008f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f78:	f7fe fd06 	bl	8007988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <pvPortMalloc+0x174>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60fb      	str	r3, [r7, #12]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <pvPortMalloc+0x172>
	return pvReturn;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20002198 	.word	0x20002198
 8008fac:	200021ac 	.word	0x200021ac
 8008fb0:	2000219c 	.word	0x2000219c
 8008fb4:	20002190 	.word	0x20002190
 8008fb8:	200021a0 	.word	0x200021a0
 8008fbc:	200021a4 	.word	0x200021a4

08008fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d04d      	beq.n	800906e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	425b      	negs	r3, r3
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4b24      	ldr	r3, [pc, #144]	; (8009078 <vPortFree+0xb8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <vPortFree+0x44>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <vPortFree+0x62>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <vPortFree+0xb8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01e      	beq.n	800906e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11a      	bne.n	800906e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <vPortFree+0xb8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009048:	f7fe fc90 	bl	800796c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <vPortFree+0xbc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4413      	add	r3, r2
 8009056:	4a09      	ldr	r2, [pc, #36]	; (800907c <vPortFree+0xbc>)
 8009058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 f874 	bl	8009148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <vPortFree+0xc0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a06      	ldr	r2, [pc, #24]	; (8009080 <vPortFree+0xc0>)
 8009068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800906a:	f7fe fc8d 	bl	8007988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	200021ac 	.word	0x200021ac
 800907c:	2000219c 	.word	0x2000219c
 8009080:	200021a8 	.word	0x200021a8

08009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <prvHeapInit+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <prvHeapInit+0xac>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <prvHeapInit+0xb0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <prvHeapInit+0xb0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a15      	ldr	r2, [pc, #84]	; (8009138 <prvHeapInit+0xb4>)
 80090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <prvHeapInit+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvHeapInit+0xb4>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <prvHeapInit+0xb8>)
 8009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <prvHeapInit+0xbc>)
 800911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <prvHeapInit+0xc0>)
 800911e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	200015d8 	.word	0x200015d8
 8009134:	20002190 	.word	0x20002190
 8009138:	20002198 	.word	0x20002198
 800913c:	200021a0 	.word	0x200021a0
 8009140:	2000219c 	.word	0x2000219c
 8009144:	200021ac 	.word	0x200021ac

08009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <prvInsertBlockIntoFreeList+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <prvInsertBlockIntoFreeList+0x14>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8f7      	bhi.n	8009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d118      	bne.n	80091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d00d      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e008      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20002190 	.word	0x20002190
 80091f8:	20002198 	.word	0x20002198
 80091fc:	00000000 	.word	0x00000000

08009200 <log>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	ed2d 8b02 	vpush	{d8}
 8009206:	ec55 4b10 	vmov	r4, r5, d0
 800920a:	f000 f8a9 	bl	8009360 <__ieee754_log>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	4620      	mov	r0, r4
 8009214:	4629      	mov	r1, r5
 8009216:	eeb0 8a40 	vmov.f32	s16, s0
 800921a:	eef0 8a60 	vmov.f32	s17, s1
 800921e:	f7f7 fc9d 	bl	8000b5c <__aeabi_dcmpun>
 8009222:	b998      	cbnz	r0, 800924c <log+0x4c>
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	4620      	mov	r0, r4
 800922a:	4629      	mov	r1, r5
 800922c:	f7f7 fc8c 	bl	8000b48 <__aeabi_dcmpgt>
 8009230:	b960      	cbnz	r0, 800924c <log+0x4c>
 8009232:	2200      	movs	r2, #0
 8009234:	2300      	movs	r3, #0
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 fc5d 	bl	8000af8 <__aeabi_dcmpeq>
 800923e:	b160      	cbz	r0, 800925a <log+0x5a>
 8009240:	f001 f8fc 	bl	800a43c <__errno>
 8009244:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8009270 <log+0x70>
 8009248:	2322      	movs	r3, #34	; 0x22
 800924a:	6003      	str	r3, [r0, #0]
 800924c:	eeb0 0a48 	vmov.f32	s0, s16
 8009250:	eef0 0a68 	vmov.f32	s1, s17
 8009254:	ecbd 8b02 	vpop	{d8}
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	f001 f8ef 	bl	800a43c <__errno>
 800925e:	ecbd 8b02 	vpop	{d8}
 8009262:	2321      	movs	r3, #33	; 0x21
 8009264:	6003      	str	r3, [r0, #0]
 8009266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800926a:	4803      	ldr	r0, [pc, #12]	; (8009278 <log+0x78>)
 800926c:	f001 b858 	b.w	800a320 <nan>
 8009270:	00000000 	.word	0x00000000
 8009274:	fff00000 	.word	0xfff00000
 8009278:	0800d5e8 	.word	0x0800d5e8

0800927c <pow>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	ed2d 8b02 	vpush	{d8}
 8009282:	eeb0 8a40 	vmov.f32	s16, s0
 8009286:	eef0 8a60 	vmov.f32	s17, s1
 800928a:	ec55 4b11 	vmov	r4, r5, d1
 800928e:	f000 fa23 	bl	80096d8 <__ieee754_pow>
 8009292:	4622      	mov	r2, r4
 8009294:	462b      	mov	r3, r5
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	ec57 6b10 	vmov	r6, r7, d0
 800929e:	f7f7 fc5d 	bl	8000b5c <__aeabi_dcmpun>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d13b      	bne.n	800931e <pow+0xa2>
 80092a6:	ec51 0b18 	vmov	r0, r1, d8
 80092aa:	2200      	movs	r2, #0
 80092ac:	2300      	movs	r3, #0
 80092ae:	f7f7 fc23 	bl	8000af8 <__aeabi_dcmpeq>
 80092b2:	b1b8      	cbz	r0, 80092e4 <pow+0x68>
 80092b4:	2200      	movs	r2, #0
 80092b6:	2300      	movs	r3, #0
 80092b8:	4620      	mov	r0, r4
 80092ba:	4629      	mov	r1, r5
 80092bc:	f7f7 fc1c 	bl	8000af8 <__aeabi_dcmpeq>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d146      	bne.n	8009352 <pow+0xd6>
 80092c4:	ec45 4b10 	vmov	d0, r4, r5
 80092c8:	f001 f81f 	bl	800a30a <finite>
 80092cc:	b338      	cbz	r0, 800931e <pow+0xa2>
 80092ce:	2200      	movs	r2, #0
 80092d0:	2300      	movs	r3, #0
 80092d2:	4620      	mov	r0, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7f7 fc19 	bl	8000b0c <__aeabi_dcmplt>
 80092da:	b300      	cbz	r0, 800931e <pow+0xa2>
 80092dc:	f001 f8ae 	bl	800a43c <__errno>
 80092e0:	2322      	movs	r3, #34	; 0x22
 80092e2:	e01b      	b.n	800931c <pow+0xa0>
 80092e4:	ec47 6b10 	vmov	d0, r6, r7
 80092e8:	f001 f80f 	bl	800a30a <finite>
 80092ec:	b9e0      	cbnz	r0, 8009328 <pow+0xac>
 80092ee:	eeb0 0a48 	vmov.f32	s0, s16
 80092f2:	eef0 0a68 	vmov.f32	s1, s17
 80092f6:	f001 f808 	bl	800a30a <finite>
 80092fa:	b1a8      	cbz	r0, 8009328 <pow+0xac>
 80092fc:	ec45 4b10 	vmov	d0, r4, r5
 8009300:	f001 f803 	bl	800a30a <finite>
 8009304:	b180      	cbz	r0, 8009328 <pow+0xac>
 8009306:	4632      	mov	r2, r6
 8009308:	463b      	mov	r3, r7
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	f7f7 fc25 	bl	8000b5c <__aeabi_dcmpun>
 8009312:	2800      	cmp	r0, #0
 8009314:	d0e2      	beq.n	80092dc <pow+0x60>
 8009316:	f001 f891 	bl	800a43c <__errno>
 800931a:	2321      	movs	r3, #33	; 0x21
 800931c:	6003      	str	r3, [r0, #0]
 800931e:	ecbd 8b02 	vpop	{d8}
 8009322:	ec47 6b10 	vmov	d0, r6, r7
 8009326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009328:	2200      	movs	r2, #0
 800932a:	2300      	movs	r3, #0
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fbe2 	bl	8000af8 <__aeabi_dcmpeq>
 8009334:	2800      	cmp	r0, #0
 8009336:	d0f2      	beq.n	800931e <pow+0xa2>
 8009338:	eeb0 0a48 	vmov.f32	s0, s16
 800933c:	eef0 0a68 	vmov.f32	s1, s17
 8009340:	f000 ffe3 	bl	800a30a <finite>
 8009344:	2800      	cmp	r0, #0
 8009346:	d0ea      	beq.n	800931e <pow+0xa2>
 8009348:	ec45 4b10 	vmov	d0, r4, r5
 800934c:	f000 ffdd 	bl	800a30a <finite>
 8009350:	e7c3      	b.n	80092da <pow+0x5e>
 8009352:	4f01      	ldr	r7, [pc, #4]	; (8009358 <pow+0xdc>)
 8009354:	2600      	movs	r6, #0
 8009356:	e7e2      	b.n	800931e <pow+0xa2>
 8009358:	3ff00000 	.word	0x3ff00000
 800935c:	00000000 	.word	0x00000000

08009360 <__ieee754_log>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	ec51 0b10 	vmov	r0, r1, d0
 8009368:	ed2d 8b04 	vpush	{d8-d9}
 800936c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009370:	b083      	sub	sp, #12
 8009372:	460d      	mov	r5, r1
 8009374:	da29      	bge.n	80093ca <__ieee754_log+0x6a>
 8009376:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800937a:	4303      	orrs	r3, r0
 800937c:	ee10 2a10 	vmov	r2, s0
 8009380:	d10c      	bne.n	800939c <__ieee754_log+0x3c>
 8009382:	49cf      	ldr	r1, [pc, #828]	; (80096c0 <__ieee754_log+0x360>)
 8009384:	2200      	movs	r2, #0
 8009386:	2300      	movs	r3, #0
 8009388:	2000      	movs	r0, #0
 800938a:	f7f7 fa77 	bl	800087c <__aeabi_ddiv>
 800938e:	ec41 0b10 	vmov	d0, r0, r1
 8009392:	b003      	add	sp, #12
 8009394:	ecbd 8b04 	vpop	{d8-d9}
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	2900      	cmp	r1, #0
 800939e:	da05      	bge.n	80093ac <__ieee754_log+0x4c>
 80093a0:	460b      	mov	r3, r1
 80093a2:	f7f6 ff89 	bl	80002b8 <__aeabi_dsub>
 80093a6:	2200      	movs	r2, #0
 80093a8:	2300      	movs	r3, #0
 80093aa:	e7ee      	b.n	800938a <__ieee754_log+0x2a>
 80093ac:	4bc5      	ldr	r3, [pc, #788]	; (80096c4 <__ieee754_log+0x364>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	f7f7 f93a 	bl	8000628 <__aeabi_dmul>
 80093b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80093b8:	460d      	mov	r5, r1
 80093ba:	4ac3      	ldr	r2, [pc, #780]	; (80096c8 <__ieee754_log+0x368>)
 80093bc:	4295      	cmp	r5, r2
 80093be:	dd06      	ble.n	80093ce <__ieee754_log+0x6e>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	f7f6 ff7a 	bl	80002bc <__adddf3>
 80093c8:	e7e1      	b.n	800938e <__ieee754_log+0x2e>
 80093ca:	2300      	movs	r3, #0
 80093cc:	e7f5      	b.n	80093ba <__ieee754_log+0x5a>
 80093ce:	152c      	asrs	r4, r5, #20
 80093d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80093d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80093d8:	441c      	add	r4, r3
 80093da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80093de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80093e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80093ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80093ee:	ea42 0105 	orr.w	r1, r2, r5
 80093f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80093f6:	2200      	movs	r2, #0
 80093f8:	4bb4      	ldr	r3, [pc, #720]	; (80096cc <__ieee754_log+0x36c>)
 80093fa:	f7f6 ff5d 	bl	80002b8 <__aeabi_dsub>
 80093fe:	1cab      	adds	r3, r5, #2
 8009400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009404:	2b02      	cmp	r3, #2
 8009406:	4682      	mov	sl, r0
 8009408:	468b      	mov	fp, r1
 800940a:	f04f 0200 	mov.w	r2, #0
 800940e:	dc53      	bgt.n	80094b8 <__ieee754_log+0x158>
 8009410:	2300      	movs	r3, #0
 8009412:	f7f7 fb71 	bl	8000af8 <__aeabi_dcmpeq>
 8009416:	b1d0      	cbz	r0, 800944e <__ieee754_log+0xee>
 8009418:	2c00      	cmp	r4, #0
 800941a:	f000 8122 	beq.w	8009662 <__ieee754_log+0x302>
 800941e:	4620      	mov	r0, r4
 8009420:	f7f7 f898 	bl	8000554 <__aeabi_i2d>
 8009424:	a390      	add	r3, pc, #576	; (adr r3, 8009668 <__ieee754_log+0x308>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	f7f7 f8fb 	bl	8000628 <__aeabi_dmul>
 8009432:	a38f      	add	r3, pc, #572	; (adr r3, 8009670 <__ieee754_log+0x310>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	4604      	mov	r4, r0
 800943a:	460d      	mov	r5, r1
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f7 f8f2 	bl	8000628 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	e7ba      	b.n	80093c4 <__ieee754_log+0x64>
 800944e:	a38a      	add	r3, pc, #552	; (adr r3, 8009678 <__ieee754_log+0x318>)
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	4650      	mov	r0, sl
 8009456:	4659      	mov	r1, fp
 8009458:	f7f7 f8e6 	bl	8000628 <__aeabi_dmul>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	2000      	movs	r0, #0
 8009462:	499b      	ldr	r1, [pc, #620]	; (80096d0 <__ieee754_log+0x370>)
 8009464:	f7f6 ff28 	bl	80002b8 <__aeabi_dsub>
 8009468:	4652      	mov	r2, sl
 800946a:	4606      	mov	r6, r0
 800946c:	460f      	mov	r7, r1
 800946e:	465b      	mov	r3, fp
 8009470:	4650      	mov	r0, sl
 8009472:	4659      	mov	r1, fp
 8009474:	f7f7 f8d8 	bl	8000628 <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7f7 f8d2 	bl	8000628 <__aeabi_dmul>
 8009484:	4606      	mov	r6, r0
 8009486:	460f      	mov	r7, r1
 8009488:	b914      	cbnz	r4, 8009490 <__ieee754_log+0x130>
 800948a:	4632      	mov	r2, r6
 800948c:	463b      	mov	r3, r7
 800948e:	e0a2      	b.n	80095d6 <__ieee754_log+0x276>
 8009490:	4620      	mov	r0, r4
 8009492:	f7f7 f85f 	bl	8000554 <__aeabi_i2d>
 8009496:	a374      	add	r3, pc, #464	; (adr r3, 8009668 <__ieee754_log+0x308>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	4680      	mov	r8, r0
 800949e:	4689      	mov	r9, r1
 80094a0:	f7f7 f8c2 	bl	8000628 <__aeabi_dmul>
 80094a4:	a372      	add	r3, pc, #456	; (adr r3, 8009670 <__ieee754_log+0x310>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	4604      	mov	r4, r0
 80094ac:	460d      	mov	r5, r1
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f7 f8b9 	bl	8000628 <__aeabi_dmul>
 80094b6:	e0a7      	b.n	8009608 <__ieee754_log+0x2a8>
 80094b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094bc:	f7f6 fefe 	bl	80002bc <__adddf3>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4650      	mov	r0, sl
 80094c6:	4659      	mov	r1, fp
 80094c8:	f7f7 f9d8 	bl	800087c <__aeabi_ddiv>
 80094cc:	ec41 0b18 	vmov	d8, r0, r1
 80094d0:	4620      	mov	r0, r4
 80094d2:	f7f7 f83f 	bl	8000554 <__aeabi_i2d>
 80094d6:	ec53 2b18 	vmov	r2, r3, d8
 80094da:	ec41 0b19 	vmov	d9, r0, r1
 80094de:	ec51 0b18 	vmov	r0, r1, d8
 80094e2:	f7f7 f8a1 	bl	8000628 <__aeabi_dmul>
 80094e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80094ea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	4680      	mov	r8, r0
 80094f6:	4689      	mov	r9, r1
 80094f8:	f7f7 f896 	bl	8000628 <__aeabi_dmul>
 80094fc:	a360      	add	r3, pc, #384	; (adr r3, 8009680 <__ieee754_log+0x320>)
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	4606      	mov	r6, r0
 8009504:	460f      	mov	r7, r1
 8009506:	f7f7 f88f 	bl	8000628 <__aeabi_dmul>
 800950a:	a35f      	add	r3, pc, #380	; (adr r3, 8009688 <__ieee754_log+0x328>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f7f6 fed4 	bl	80002bc <__adddf3>
 8009514:	4632      	mov	r2, r6
 8009516:	463b      	mov	r3, r7
 8009518:	f7f7 f886 	bl	8000628 <__aeabi_dmul>
 800951c:	a35c      	add	r3, pc, #368	; (adr r3, 8009690 <__ieee754_log+0x330>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	f7f6 fecb 	bl	80002bc <__adddf3>
 8009526:	4632      	mov	r2, r6
 8009528:	463b      	mov	r3, r7
 800952a:	f7f7 f87d 	bl	8000628 <__aeabi_dmul>
 800952e:	a35a      	add	r3, pc, #360	; (adr r3, 8009698 <__ieee754_log+0x338>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7f6 fec2 	bl	80002bc <__adddf3>
 8009538:	4642      	mov	r2, r8
 800953a:	464b      	mov	r3, r9
 800953c:	f7f7 f874 	bl	8000628 <__aeabi_dmul>
 8009540:	a357      	add	r3, pc, #348	; (adr r3, 80096a0 <__ieee754_log+0x340>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	4680      	mov	r8, r0
 8009548:	4689      	mov	r9, r1
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7f7 f86b 	bl	8000628 <__aeabi_dmul>
 8009552:	a355      	add	r3, pc, #340	; (adr r3, 80096a8 <__ieee754_log+0x348>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f6 feb0 	bl	80002bc <__adddf3>
 800955c:	4632      	mov	r2, r6
 800955e:	463b      	mov	r3, r7
 8009560:	f7f7 f862 	bl	8000628 <__aeabi_dmul>
 8009564:	a352      	add	r3, pc, #328	; (adr r3, 80096b0 <__ieee754_log+0x350>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fea7 	bl	80002bc <__adddf3>
 800956e:	4632      	mov	r2, r6
 8009570:	463b      	mov	r3, r7
 8009572:	f7f7 f859 	bl	8000628 <__aeabi_dmul>
 8009576:	460b      	mov	r3, r1
 8009578:	4602      	mov	r2, r0
 800957a:	4649      	mov	r1, r9
 800957c:	4640      	mov	r0, r8
 800957e:	f7f6 fe9d 	bl	80002bc <__adddf3>
 8009582:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	3551      	adds	r5, #81	; 0x51
 800958a:	431d      	orrs	r5, r3
 800958c:	2d00      	cmp	r5, #0
 800958e:	4680      	mov	r8, r0
 8009590:	4689      	mov	r9, r1
 8009592:	dd48      	ble.n	8009626 <__ieee754_log+0x2c6>
 8009594:	4b4e      	ldr	r3, [pc, #312]	; (80096d0 <__ieee754_log+0x370>)
 8009596:	2200      	movs	r2, #0
 8009598:	4650      	mov	r0, sl
 800959a:	4659      	mov	r1, fp
 800959c:	f7f7 f844 	bl	8000628 <__aeabi_dmul>
 80095a0:	4652      	mov	r2, sl
 80095a2:	465b      	mov	r3, fp
 80095a4:	f7f7 f840 	bl	8000628 <__aeabi_dmul>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4606      	mov	r6, r0
 80095ae:	460f      	mov	r7, r1
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f6 fe82 	bl	80002bc <__adddf3>
 80095b8:	ec53 2b18 	vmov	r2, r3, d8
 80095bc:	f7f7 f834 	bl	8000628 <__aeabi_dmul>
 80095c0:	4680      	mov	r8, r0
 80095c2:	4689      	mov	r9, r1
 80095c4:	b964      	cbnz	r4, 80095e0 <__ieee754_log+0x280>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4630      	mov	r0, r6
 80095cc:	4639      	mov	r1, r7
 80095ce:	f7f6 fe73 	bl	80002b8 <__aeabi_dsub>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4650      	mov	r0, sl
 80095d8:	4659      	mov	r1, fp
 80095da:	f7f6 fe6d 	bl	80002b8 <__aeabi_dsub>
 80095de:	e6d6      	b.n	800938e <__ieee754_log+0x2e>
 80095e0:	a321      	add	r3, pc, #132	; (adr r3, 8009668 <__ieee754_log+0x308>)
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	ec51 0b19 	vmov	r0, r1, d9
 80095ea:	f7f7 f81d 	bl	8000628 <__aeabi_dmul>
 80095ee:	a320      	add	r3, pc, #128	; (adr r3, 8009670 <__ieee754_log+0x310>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	ec51 0b19 	vmov	r0, r1, d9
 80095fc:	f7f7 f814 	bl	8000628 <__aeabi_dmul>
 8009600:	4642      	mov	r2, r8
 8009602:	464b      	mov	r3, r9
 8009604:	f7f6 fe5a 	bl	80002bc <__adddf3>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4630      	mov	r0, r6
 800960e:	4639      	mov	r1, r7
 8009610:	f7f6 fe52 	bl	80002b8 <__aeabi_dsub>
 8009614:	4652      	mov	r2, sl
 8009616:	465b      	mov	r3, fp
 8009618:	f7f6 fe4e 	bl	80002b8 <__aeabi_dsub>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4620      	mov	r0, r4
 8009622:	4629      	mov	r1, r5
 8009624:	e7d9      	b.n	80095da <__ieee754_log+0x27a>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 fe43 	bl	80002b8 <__aeabi_dsub>
 8009632:	ec53 2b18 	vmov	r2, r3, d8
 8009636:	f7f6 fff7 	bl	8000628 <__aeabi_dmul>
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	2c00      	cmp	r4, #0
 8009640:	f43f af23 	beq.w	800948a <__ieee754_log+0x12a>
 8009644:	a308      	add	r3, pc, #32	; (adr r3, 8009668 <__ieee754_log+0x308>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	ec51 0b19 	vmov	r0, r1, d9
 800964e:	f7f6 ffeb 	bl	8000628 <__aeabi_dmul>
 8009652:	a307      	add	r3, pc, #28	; (adr r3, 8009670 <__ieee754_log+0x310>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	4604      	mov	r4, r0
 800965a:	460d      	mov	r5, r1
 800965c:	ec51 0b19 	vmov	r0, r1, d9
 8009660:	e727      	b.n	80094b2 <__ieee754_log+0x152>
 8009662:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80096b8 <__ieee754_log+0x358>
 8009666:	e694      	b.n	8009392 <__ieee754_log+0x32>
 8009668:	fee00000 	.word	0xfee00000
 800966c:	3fe62e42 	.word	0x3fe62e42
 8009670:	35793c76 	.word	0x35793c76
 8009674:	3dea39ef 	.word	0x3dea39ef
 8009678:	55555555 	.word	0x55555555
 800967c:	3fd55555 	.word	0x3fd55555
 8009680:	df3e5244 	.word	0xdf3e5244
 8009684:	3fc2f112 	.word	0x3fc2f112
 8009688:	96cb03de 	.word	0x96cb03de
 800968c:	3fc74664 	.word	0x3fc74664
 8009690:	94229359 	.word	0x94229359
 8009694:	3fd24924 	.word	0x3fd24924
 8009698:	55555593 	.word	0x55555593
 800969c:	3fe55555 	.word	0x3fe55555
 80096a0:	d078c69f 	.word	0xd078c69f
 80096a4:	3fc39a09 	.word	0x3fc39a09
 80096a8:	1d8e78af 	.word	0x1d8e78af
 80096ac:	3fcc71c5 	.word	0x3fcc71c5
 80096b0:	9997fa04 	.word	0x9997fa04
 80096b4:	3fd99999 	.word	0x3fd99999
	...
 80096c0:	c3500000 	.word	0xc3500000
 80096c4:	43500000 	.word	0x43500000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	3ff00000 	.word	0x3ff00000
 80096d0:	3fe00000 	.word	0x3fe00000
 80096d4:	00000000 	.word	0x00000000

080096d8 <__ieee754_pow>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	ed2d 8b06 	vpush	{d8-d10}
 80096e0:	b089      	sub	sp, #36	; 0x24
 80096e2:	ed8d 1b00 	vstr	d1, [sp]
 80096e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80096ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80096ee:	ea58 0102 	orrs.w	r1, r8, r2
 80096f2:	ec57 6b10 	vmov	r6, r7, d0
 80096f6:	d115      	bne.n	8009724 <__ieee754_pow+0x4c>
 80096f8:	19b3      	adds	r3, r6, r6
 80096fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80096fe:	4152      	adcs	r2, r2
 8009700:	4299      	cmp	r1, r3
 8009702:	4b89      	ldr	r3, [pc, #548]	; (8009928 <__ieee754_pow+0x250>)
 8009704:	4193      	sbcs	r3, r2
 8009706:	f080 84d2 	bcs.w	800a0ae <__ieee754_pow+0x9d6>
 800970a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 fdd3 	bl	80002bc <__adddf3>
 8009716:	ec41 0b10 	vmov	d0, r0, r1
 800971a:	b009      	add	sp, #36	; 0x24
 800971c:	ecbd 8b06 	vpop	{d8-d10}
 8009720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009724:	4b81      	ldr	r3, [pc, #516]	; (800992c <__ieee754_pow+0x254>)
 8009726:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800972a:	429c      	cmp	r4, r3
 800972c:	ee10 aa10 	vmov	sl, s0
 8009730:	463d      	mov	r5, r7
 8009732:	dc06      	bgt.n	8009742 <__ieee754_pow+0x6a>
 8009734:	d101      	bne.n	800973a <__ieee754_pow+0x62>
 8009736:	2e00      	cmp	r6, #0
 8009738:	d1e7      	bne.n	800970a <__ieee754_pow+0x32>
 800973a:	4598      	cmp	r8, r3
 800973c:	dc01      	bgt.n	8009742 <__ieee754_pow+0x6a>
 800973e:	d10f      	bne.n	8009760 <__ieee754_pow+0x88>
 8009740:	b172      	cbz	r2, 8009760 <__ieee754_pow+0x88>
 8009742:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009746:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800974a:	ea55 050a 	orrs.w	r5, r5, sl
 800974e:	d1dc      	bne.n	800970a <__ieee754_pow+0x32>
 8009750:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009754:	18db      	adds	r3, r3, r3
 8009756:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800975a:	4152      	adcs	r2, r2
 800975c:	429d      	cmp	r5, r3
 800975e:	e7d0      	b.n	8009702 <__ieee754_pow+0x2a>
 8009760:	2d00      	cmp	r5, #0
 8009762:	da3b      	bge.n	80097dc <__ieee754_pow+0x104>
 8009764:	4b72      	ldr	r3, [pc, #456]	; (8009930 <__ieee754_pow+0x258>)
 8009766:	4598      	cmp	r8, r3
 8009768:	dc51      	bgt.n	800980e <__ieee754_pow+0x136>
 800976a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800976e:	4598      	cmp	r8, r3
 8009770:	f340 84ac 	ble.w	800a0cc <__ieee754_pow+0x9f4>
 8009774:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800977c:	2b14      	cmp	r3, #20
 800977e:	dd0f      	ble.n	80097a0 <__ieee754_pow+0xc8>
 8009780:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009784:	fa22 f103 	lsr.w	r1, r2, r3
 8009788:	fa01 f303 	lsl.w	r3, r1, r3
 800978c:	4293      	cmp	r3, r2
 800978e:	f040 849d 	bne.w	800a0cc <__ieee754_pow+0x9f4>
 8009792:	f001 0101 	and.w	r1, r1, #1
 8009796:	f1c1 0302 	rsb	r3, r1, #2
 800979a:	9304      	str	r3, [sp, #16]
 800979c:	b182      	cbz	r2, 80097c0 <__ieee754_pow+0xe8>
 800979e:	e05f      	b.n	8009860 <__ieee754_pow+0x188>
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d15b      	bne.n	800985c <__ieee754_pow+0x184>
 80097a4:	f1c3 0314 	rsb	r3, r3, #20
 80097a8:	fa48 f103 	asr.w	r1, r8, r3
 80097ac:	fa01 f303 	lsl.w	r3, r1, r3
 80097b0:	4543      	cmp	r3, r8
 80097b2:	f040 8488 	bne.w	800a0c6 <__ieee754_pow+0x9ee>
 80097b6:	f001 0101 	and.w	r1, r1, #1
 80097ba:	f1c1 0302 	rsb	r3, r1, #2
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	4b5c      	ldr	r3, [pc, #368]	; (8009934 <__ieee754_pow+0x25c>)
 80097c2:	4598      	cmp	r8, r3
 80097c4:	d132      	bne.n	800982c <__ieee754_pow+0x154>
 80097c6:	f1b9 0f00 	cmp.w	r9, #0
 80097ca:	f280 8478 	bge.w	800a0be <__ieee754_pow+0x9e6>
 80097ce:	4959      	ldr	r1, [pc, #356]	; (8009934 <__ieee754_pow+0x25c>)
 80097d0:	4632      	mov	r2, r6
 80097d2:	463b      	mov	r3, r7
 80097d4:	2000      	movs	r0, #0
 80097d6:	f7f7 f851 	bl	800087c <__aeabi_ddiv>
 80097da:	e79c      	b.n	8009716 <__ieee754_pow+0x3e>
 80097dc:	2300      	movs	r3, #0
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	d13d      	bne.n	8009860 <__ieee754_pow+0x188>
 80097e4:	4b51      	ldr	r3, [pc, #324]	; (800992c <__ieee754_pow+0x254>)
 80097e6:	4598      	cmp	r8, r3
 80097e8:	d1ea      	bne.n	80097c0 <__ieee754_pow+0xe8>
 80097ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80097ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80097f2:	ea53 030a 	orrs.w	r3, r3, sl
 80097f6:	f000 845a 	beq.w	800a0ae <__ieee754_pow+0x9d6>
 80097fa:	4b4f      	ldr	r3, [pc, #316]	; (8009938 <__ieee754_pow+0x260>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	dd08      	ble.n	8009812 <__ieee754_pow+0x13a>
 8009800:	f1b9 0f00 	cmp.w	r9, #0
 8009804:	f2c0 8457 	blt.w	800a0b6 <__ieee754_pow+0x9de>
 8009808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800980c:	e783      	b.n	8009716 <__ieee754_pow+0x3e>
 800980e:	2302      	movs	r3, #2
 8009810:	e7e5      	b.n	80097de <__ieee754_pow+0x106>
 8009812:	f1b9 0f00 	cmp.w	r9, #0
 8009816:	f04f 0000 	mov.w	r0, #0
 800981a:	f04f 0100 	mov.w	r1, #0
 800981e:	f6bf af7a 	bge.w	8009716 <__ieee754_pow+0x3e>
 8009822:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009826:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800982a:	e774      	b.n	8009716 <__ieee754_pow+0x3e>
 800982c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009830:	d106      	bne.n	8009840 <__ieee754_pow+0x168>
 8009832:	4632      	mov	r2, r6
 8009834:	463b      	mov	r3, r7
 8009836:	4630      	mov	r0, r6
 8009838:	4639      	mov	r1, r7
 800983a:	f7f6 fef5 	bl	8000628 <__aeabi_dmul>
 800983e:	e76a      	b.n	8009716 <__ieee754_pow+0x3e>
 8009840:	4b3e      	ldr	r3, [pc, #248]	; (800993c <__ieee754_pow+0x264>)
 8009842:	4599      	cmp	r9, r3
 8009844:	d10c      	bne.n	8009860 <__ieee754_pow+0x188>
 8009846:	2d00      	cmp	r5, #0
 8009848:	db0a      	blt.n	8009860 <__ieee754_pow+0x188>
 800984a:	ec47 6b10 	vmov	d0, r6, r7
 800984e:	b009      	add	sp, #36	; 0x24
 8009850:	ecbd 8b06 	vpop	{d8-d10}
 8009854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	f000 bc6c 	b.w	800a134 <__ieee754_sqrt>
 800985c:	2300      	movs	r3, #0
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	ec47 6b10 	vmov	d0, r6, r7
 8009864:	f000 fd48 	bl	800a2f8 <fabs>
 8009868:	ec51 0b10 	vmov	r0, r1, d0
 800986c:	f1ba 0f00 	cmp.w	sl, #0
 8009870:	d129      	bne.n	80098c6 <__ieee754_pow+0x1ee>
 8009872:	b124      	cbz	r4, 800987e <__ieee754_pow+0x1a6>
 8009874:	4b2f      	ldr	r3, [pc, #188]	; (8009934 <__ieee754_pow+0x25c>)
 8009876:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800987a:	429a      	cmp	r2, r3
 800987c:	d123      	bne.n	80098c6 <__ieee754_pow+0x1ee>
 800987e:	f1b9 0f00 	cmp.w	r9, #0
 8009882:	da05      	bge.n	8009890 <__ieee754_pow+0x1b8>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	2000      	movs	r0, #0
 800988a:	492a      	ldr	r1, [pc, #168]	; (8009934 <__ieee754_pow+0x25c>)
 800988c:	f7f6 fff6 	bl	800087c <__aeabi_ddiv>
 8009890:	2d00      	cmp	r5, #0
 8009892:	f6bf af40 	bge.w	8009716 <__ieee754_pow+0x3e>
 8009896:	9b04      	ldr	r3, [sp, #16]
 8009898:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800989c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80098a0:	4323      	orrs	r3, r4
 80098a2:	d108      	bne.n	80098b6 <__ieee754_pow+0x1de>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4610      	mov	r0, r2
 80098aa:	4619      	mov	r1, r3
 80098ac:	f7f6 fd04 	bl	80002b8 <__aeabi_dsub>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	e78f      	b.n	80097d6 <__ieee754_pow+0xfe>
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	f47f af2c 	bne.w	8009716 <__ieee754_pow+0x3e>
 80098be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c2:	4619      	mov	r1, r3
 80098c4:	e727      	b.n	8009716 <__ieee754_pow+0x3e>
 80098c6:	0feb      	lsrs	r3, r5, #31
 80098c8:	3b01      	subs	r3, #1
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	9a06      	ldr	r2, [sp, #24]
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	d102      	bne.n	80098da <__ieee754_pow+0x202>
 80098d4:	4632      	mov	r2, r6
 80098d6:	463b      	mov	r3, r7
 80098d8:	e7e6      	b.n	80098a8 <__ieee754_pow+0x1d0>
 80098da:	4b19      	ldr	r3, [pc, #100]	; (8009940 <__ieee754_pow+0x268>)
 80098dc:	4598      	cmp	r8, r3
 80098de:	f340 80fb 	ble.w	8009ad8 <__ieee754_pow+0x400>
 80098e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098e6:	4598      	cmp	r8, r3
 80098e8:	4b13      	ldr	r3, [pc, #76]	; (8009938 <__ieee754_pow+0x260>)
 80098ea:	dd0c      	ble.n	8009906 <__ieee754_pow+0x22e>
 80098ec:	429c      	cmp	r4, r3
 80098ee:	dc0f      	bgt.n	8009910 <__ieee754_pow+0x238>
 80098f0:	f1b9 0f00 	cmp.w	r9, #0
 80098f4:	da0f      	bge.n	8009916 <__ieee754_pow+0x23e>
 80098f6:	2000      	movs	r0, #0
 80098f8:	b009      	add	sp, #36	; 0x24
 80098fa:	ecbd 8b06 	vpop	{d8-d10}
 80098fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009902:	f000 bcf0 	b.w	800a2e6 <__math_oflow>
 8009906:	429c      	cmp	r4, r3
 8009908:	dbf2      	blt.n	80098f0 <__ieee754_pow+0x218>
 800990a:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <__ieee754_pow+0x25c>)
 800990c:	429c      	cmp	r4, r3
 800990e:	dd19      	ble.n	8009944 <__ieee754_pow+0x26c>
 8009910:	f1b9 0f00 	cmp.w	r9, #0
 8009914:	dcef      	bgt.n	80098f6 <__ieee754_pow+0x21e>
 8009916:	2000      	movs	r0, #0
 8009918:	b009      	add	sp, #36	; 0x24
 800991a:	ecbd 8b06 	vpop	{d8-d10}
 800991e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009922:	f000 bcd7 	b.w	800a2d4 <__math_uflow>
 8009926:	bf00      	nop
 8009928:	fff00000 	.word	0xfff00000
 800992c:	7ff00000 	.word	0x7ff00000
 8009930:	433fffff 	.word	0x433fffff
 8009934:	3ff00000 	.word	0x3ff00000
 8009938:	3fefffff 	.word	0x3fefffff
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	41e00000 	.word	0x41e00000
 8009944:	4b60      	ldr	r3, [pc, #384]	; (8009ac8 <__ieee754_pow+0x3f0>)
 8009946:	2200      	movs	r2, #0
 8009948:	f7f6 fcb6 	bl	80002b8 <__aeabi_dsub>
 800994c:	a354      	add	r3, pc, #336	; (adr r3, 8009aa0 <__ieee754_pow+0x3c8>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	f7f6 fe67 	bl	8000628 <__aeabi_dmul>
 800995a:	a353      	add	r3, pc, #332	; (adr r3, 8009aa8 <__ieee754_pow+0x3d0>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	4606      	mov	r6, r0
 8009962:	460f      	mov	r7, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fe5e 	bl	8000628 <__aeabi_dmul>
 800996c:	4b57      	ldr	r3, [pc, #348]	; (8009acc <__ieee754_pow+0x3f4>)
 800996e:	4682      	mov	sl, r0
 8009970:	468b      	mov	fp, r1
 8009972:	2200      	movs	r2, #0
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fe56 	bl	8000628 <__aeabi_dmul>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	a14b      	add	r1, pc, #300	; (adr r1, 8009ab0 <__ieee754_pow+0x3d8>)
 8009982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009986:	f7f6 fc97 	bl	80002b8 <__aeabi_dsub>
 800998a:	4622      	mov	r2, r4
 800998c:	462b      	mov	r3, r5
 800998e:	f7f6 fe4b 	bl	8000628 <__aeabi_dmul>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	2000      	movs	r0, #0
 8009998:	494d      	ldr	r1, [pc, #308]	; (8009ad0 <__ieee754_pow+0x3f8>)
 800999a:	f7f6 fc8d 	bl	80002b8 <__aeabi_dsub>
 800999e:	4622      	mov	r2, r4
 80099a0:	4680      	mov	r8, r0
 80099a2:	4689      	mov	r9, r1
 80099a4:	462b      	mov	r3, r5
 80099a6:	4620      	mov	r0, r4
 80099a8:	4629      	mov	r1, r5
 80099aa:	f7f6 fe3d 	bl	8000628 <__aeabi_dmul>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4640      	mov	r0, r8
 80099b4:	4649      	mov	r1, r9
 80099b6:	f7f6 fe37 	bl	8000628 <__aeabi_dmul>
 80099ba:	a33f      	add	r3, pc, #252	; (adr r3, 8009ab8 <__ieee754_pow+0x3e0>)
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f7f6 fe32 	bl	8000628 <__aeabi_dmul>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4650      	mov	r0, sl
 80099ca:	4659      	mov	r1, fp
 80099cc:	f7f6 fc74 	bl	80002b8 <__aeabi_dsub>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4680      	mov	r8, r0
 80099d6:	4689      	mov	r9, r1
 80099d8:	4630      	mov	r0, r6
 80099da:	4639      	mov	r1, r7
 80099dc:	f7f6 fc6e 	bl	80002bc <__adddf3>
 80099e0:	2000      	movs	r0, #0
 80099e2:	4632      	mov	r2, r6
 80099e4:	463b      	mov	r3, r7
 80099e6:	4604      	mov	r4, r0
 80099e8:	460d      	mov	r5, r1
 80099ea:	f7f6 fc65 	bl	80002b8 <__aeabi_dsub>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4640      	mov	r0, r8
 80099f4:	4649      	mov	r1, r9
 80099f6:	f7f6 fc5f 	bl	80002b8 <__aeabi_dsub>
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	9a06      	ldr	r2, [sp, #24]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	4313      	orrs	r3, r2
 8009a02:	4682      	mov	sl, r0
 8009a04:	468b      	mov	fp, r1
 8009a06:	f040 81e7 	bne.w	8009dd8 <__ieee754_pow+0x700>
 8009a0a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009ac0 <__ieee754_pow+0x3e8>
 8009a0e:	eeb0 8a47 	vmov.f32	s16, s14
 8009a12:	eef0 8a67 	vmov.f32	s17, s15
 8009a16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	4632      	mov	r2, r6
 8009a1e:	463b      	mov	r3, r7
 8009a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a24:	f7f6 fc48 	bl	80002b8 <__aeabi_dsub>
 8009a28:	4622      	mov	r2, r4
 8009a2a:	462b      	mov	r3, r5
 8009a2c:	f7f6 fdfc 	bl	8000628 <__aeabi_dmul>
 8009a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a34:	4680      	mov	r8, r0
 8009a36:	4689      	mov	r9, r1
 8009a38:	4650      	mov	r0, sl
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	f7f6 fdf4 	bl	8000628 <__aeabi_dmul>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4640      	mov	r0, r8
 8009a46:	4649      	mov	r1, r9
 8009a48:	f7f6 fc38 	bl	80002bc <__adddf3>
 8009a4c:	4632      	mov	r2, r6
 8009a4e:	463b      	mov	r3, r7
 8009a50:	4680      	mov	r8, r0
 8009a52:	4689      	mov	r9, r1
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7f6 fde6 	bl	8000628 <__aeabi_dmul>
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4604      	mov	r4, r0
 8009a60:	460d      	mov	r5, r1
 8009a62:	4602      	mov	r2, r0
 8009a64:	4649      	mov	r1, r9
 8009a66:	4640      	mov	r0, r8
 8009a68:	f7f6 fc28 	bl	80002bc <__adddf3>
 8009a6c:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <__ieee754_pow+0x3fc>)
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	ec45 4b19 	vmov	d9, r4, r5
 8009a74:	4606      	mov	r6, r0
 8009a76:	460f      	mov	r7, r1
 8009a78:	468b      	mov	fp, r1
 8009a7a:	f340 82f1 	ble.w	800a060 <__ieee754_pow+0x988>
 8009a7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a86:	4303      	orrs	r3, r0
 8009a88:	f000 81e4 	beq.w	8009e54 <__ieee754_pow+0x77c>
 8009a8c:	ec51 0b18 	vmov	r0, r1, d8
 8009a90:	2200      	movs	r2, #0
 8009a92:	2300      	movs	r3, #0
 8009a94:	f7f7 f83a 	bl	8000b0c <__aeabi_dcmplt>
 8009a98:	3800      	subs	r0, #0
 8009a9a:	bf18      	it	ne
 8009a9c:	2001      	movne	r0, #1
 8009a9e:	e72b      	b.n	80098f8 <__ieee754_pow+0x220>
 8009aa0:	60000000 	.word	0x60000000
 8009aa4:	3ff71547 	.word	0x3ff71547
 8009aa8:	f85ddf44 	.word	0xf85ddf44
 8009aac:	3e54ae0b 	.word	0x3e54ae0b
 8009ab0:	55555555 	.word	0x55555555
 8009ab4:	3fd55555 	.word	0x3fd55555
 8009ab8:	652b82fe 	.word	0x652b82fe
 8009abc:	3ff71547 	.word	0x3ff71547
 8009ac0:	00000000 	.word	0x00000000
 8009ac4:	bff00000 	.word	0xbff00000
 8009ac8:	3ff00000 	.word	0x3ff00000
 8009acc:	3fd00000 	.word	0x3fd00000
 8009ad0:	3fe00000 	.word	0x3fe00000
 8009ad4:	408fffff 	.word	0x408fffff
 8009ad8:	4bd5      	ldr	r3, [pc, #852]	; (8009e30 <__ieee754_pow+0x758>)
 8009ada:	402b      	ands	r3, r5
 8009adc:	2200      	movs	r2, #0
 8009ade:	b92b      	cbnz	r3, 8009aec <__ieee754_pow+0x414>
 8009ae0:	4bd4      	ldr	r3, [pc, #848]	; (8009e34 <__ieee754_pow+0x75c>)
 8009ae2:	f7f6 fda1 	bl	8000628 <__aeabi_dmul>
 8009ae6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009aea:	460c      	mov	r4, r1
 8009aec:	1523      	asrs	r3, r4, #20
 8009aee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009af2:	4413      	add	r3, r2
 8009af4:	9305      	str	r3, [sp, #20]
 8009af6:	4bd0      	ldr	r3, [pc, #832]	; (8009e38 <__ieee754_pow+0x760>)
 8009af8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009afc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b00:	429c      	cmp	r4, r3
 8009b02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b06:	dd08      	ble.n	8009b1a <__ieee754_pow+0x442>
 8009b08:	4bcc      	ldr	r3, [pc, #816]	; (8009e3c <__ieee754_pow+0x764>)
 8009b0a:	429c      	cmp	r4, r3
 8009b0c:	f340 8162 	ble.w	8009dd4 <__ieee754_pow+0x6fc>
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	3301      	adds	r3, #1
 8009b14:	9305      	str	r3, [sp, #20]
 8009b16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b1a:	2400      	movs	r4, #0
 8009b1c:	00e3      	lsls	r3, r4, #3
 8009b1e:	9307      	str	r3, [sp, #28]
 8009b20:	4bc7      	ldr	r3, [pc, #796]	; (8009e40 <__ieee754_pow+0x768>)
 8009b22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b26:	ed93 7b00 	vldr	d7, [r3]
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	ec53 2b17 	vmov	r2, r3, d7
 8009b30:	eeb0 9a47 	vmov.f32	s18, s14
 8009b34:	eef0 9a67 	vmov.f32	s19, s15
 8009b38:	4682      	mov	sl, r0
 8009b3a:	f7f6 fbbd 	bl	80002b8 <__aeabi_dsub>
 8009b3e:	4652      	mov	r2, sl
 8009b40:	4606      	mov	r6, r0
 8009b42:	460f      	mov	r7, r1
 8009b44:	462b      	mov	r3, r5
 8009b46:	ec51 0b19 	vmov	r0, r1, d9
 8009b4a:	f7f6 fbb7 	bl	80002bc <__adddf3>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	2000      	movs	r0, #0
 8009b54:	49bb      	ldr	r1, [pc, #748]	; (8009e44 <__ieee754_pow+0x76c>)
 8009b56:	f7f6 fe91 	bl	800087c <__aeabi_ddiv>
 8009b5a:	ec41 0b1a 	vmov	d10, r0, r1
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4630      	mov	r0, r6
 8009b64:	4639      	mov	r1, r7
 8009b66:	f7f6 fd5f 	bl	8000628 <__aeabi_dmul>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b70:	9302      	str	r3, [sp, #8]
 8009b72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b76:	46ab      	mov	fp, r5
 8009b78:	106d      	asrs	r5, r5, #1
 8009b7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b82:	ec41 0b18 	vmov	d8, r0, r1
 8009b86:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	4649      	mov	r1, r9
 8009b90:	4614      	mov	r4, r2
 8009b92:	461d      	mov	r5, r3
 8009b94:	f7f6 fd48 	bl	8000628 <__aeabi_dmul>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 fb8a 	bl	80002b8 <__aeabi_dsub>
 8009ba4:	ec53 2b19 	vmov	r2, r3, d9
 8009ba8:	4606      	mov	r6, r0
 8009baa:	460f      	mov	r7, r1
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fb82 	bl	80002b8 <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4650      	mov	r0, sl
 8009bba:	4659      	mov	r1, fp
 8009bbc:	f7f6 fb7c 	bl	80002b8 <__aeabi_dsub>
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	f7f6 fd30 	bl	8000628 <__aeabi_dmul>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4630      	mov	r0, r6
 8009bce:	4639      	mov	r1, r7
 8009bd0:	f7f6 fb72 	bl	80002b8 <__aeabi_dsub>
 8009bd4:	ec53 2b1a 	vmov	r2, r3, d10
 8009bd8:	f7f6 fd26 	bl	8000628 <__aeabi_dmul>
 8009bdc:	ec53 2b18 	vmov	r2, r3, d8
 8009be0:	ec41 0b19 	vmov	d9, r0, r1
 8009be4:	ec51 0b18 	vmov	r0, r1, d8
 8009be8:	f7f6 fd1e 	bl	8000628 <__aeabi_dmul>
 8009bec:	a37c      	add	r3, pc, #496	; (adr r3, 8009de0 <__ieee754_pow+0x708>)
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	f7f6 fd17 	bl	8000628 <__aeabi_dmul>
 8009bfa:	a37b      	add	r3, pc, #492	; (adr r3, 8009de8 <__ieee754_pow+0x710>)
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f7f6 fb5c 	bl	80002bc <__adddf3>
 8009c04:	4622      	mov	r2, r4
 8009c06:	462b      	mov	r3, r5
 8009c08:	f7f6 fd0e 	bl	8000628 <__aeabi_dmul>
 8009c0c:	a378      	add	r3, pc, #480	; (adr r3, 8009df0 <__ieee754_pow+0x718>)
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f7f6 fb53 	bl	80002bc <__adddf3>
 8009c16:	4622      	mov	r2, r4
 8009c18:	462b      	mov	r3, r5
 8009c1a:	f7f6 fd05 	bl	8000628 <__aeabi_dmul>
 8009c1e:	a376      	add	r3, pc, #472	; (adr r3, 8009df8 <__ieee754_pow+0x720>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f7f6 fb4a 	bl	80002bc <__adddf3>
 8009c28:	4622      	mov	r2, r4
 8009c2a:	462b      	mov	r3, r5
 8009c2c:	f7f6 fcfc 	bl	8000628 <__aeabi_dmul>
 8009c30:	a373      	add	r3, pc, #460	; (adr r3, 8009e00 <__ieee754_pow+0x728>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fb41 	bl	80002bc <__adddf3>
 8009c3a:	4622      	mov	r2, r4
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	f7f6 fcf3 	bl	8000628 <__aeabi_dmul>
 8009c42:	a371      	add	r3, pc, #452	; (adr r3, 8009e08 <__ieee754_pow+0x730>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 fb38 	bl	80002bc <__adddf3>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460f      	mov	r7, r1
 8009c52:	462b      	mov	r3, r5
 8009c54:	4620      	mov	r0, r4
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7f6 fce6 	bl	8000628 <__aeabi_dmul>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 fce0 	bl	8000628 <__aeabi_dmul>
 8009c68:	4642      	mov	r2, r8
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	464b      	mov	r3, r9
 8009c70:	ec51 0b18 	vmov	r0, r1, d8
 8009c74:	f7f6 fb22 	bl	80002bc <__adddf3>
 8009c78:	ec53 2b19 	vmov	r2, r3, d9
 8009c7c:	f7f6 fcd4 	bl	8000628 <__aeabi_dmul>
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	f7f6 fb1a 	bl	80002bc <__adddf3>
 8009c88:	4642      	mov	r2, r8
 8009c8a:	4682      	mov	sl, r0
 8009c8c:	468b      	mov	fp, r1
 8009c8e:	464b      	mov	r3, r9
 8009c90:	4640      	mov	r0, r8
 8009c92:	4649      	mov	r1, r9
 8009c94:	f7f6 fcc8 	bl	8000628 <__aeabi_dmul>
 8009c98:	4b6b      	ldr	r3, [pc, #428]	; (8009e48 <__ieee754_pow+0x770>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	460f      	mov	r7, r1
 8009ca0:	f7f6 fb0c 	bl	80002bc <__adddf3>
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	465b      	mov	r3, fp
 8009ca8:	f7f6 fb08 	bl	80002bc <__adddf3>
 8009cac:	2000      	movs	r0, #0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	460d      	mov	r5, r1
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7f6 fcb5 	bl	8000628 <__aeabi_dmul>
 8009cbe:	4b62      	ldr	r3, [pc, #392]	; (8009e48 <__ieee754_pow+0x770>)
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	4689      	mov	r9, r1
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7f6 faf5 	bl	80002b8 <__aeabi_dsub>
 8009cce:	4632      	mov	r2, r6
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	f7f6 faf1 	bl	80002b8 <__aeabi_dsub>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4650      	mov	r0, sl
 8009cdc:	4659      	mov	r1, fp
 8009cde:	f7f6 faeb 	bl	80002b8 <__aeabi_dsub>
 8009ce2:	ec53 2b18 	vmov	r2, r3, d8
 8009ce6:	f7f6 fc9f 	bl	8000628 <__aeabi_dmul>
 8009cea:	4622      	mov	r2, r4
 8009cec:	4606      	mov	r6, r0
 8009cee:	460f      	mov	r7, r1
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	ec51 0b19 	vmov	r0, r1, d9
 8009cf6:	f7f6 fc97 	bl	8000628 <__aeabi_dmul>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	f7f6 fadb 	bl	80002bc <__adddf3>
 8009d06:	4606      	mov	r6, r0
 8009d08:	460f      	mov	r7, r1
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4640      	mov	r0, r8
 8009d10:	4649      	mov	r1, r9
 8009d12:	f7f6 fad3 	bl	80002bc <__adddf3>
 8009d16:	a33e      	add	r3, pc, #248	; (adr r3, 8009e10 <__ieee754_pow+0x738>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	460d      	mov	r5, r1
 8009d22:	f7f6 fc81 	bl	8000628 <__aeabi_dmul>
 8009d26:	4642      	mov	r2, r8
 8009d28:	ec41 0b18 	vmov	d8, r0, r1
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 fac1 	bl	80002b8 <__aeabi_dsub>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	f7f6 fabb 	bl	80002b8 <__aeabi_dsub>
 8009d42:	a335      	add	r3, pc, #212	; (adr r3, 8009e18 <__ieee754_pow+0x740>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f7f6 fc6e 	bl	8000628 <__aeabi_dmul>
 8009d4c:	a334      	add	r3, pc, #208	; (adr r3, 8009e20 <__ieee754_pow+0x748>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fc65 	bl	8000628 <__aeabi_dmul>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 faa9 	bl	80002bc <__adddf3>
 8009d6a:	9a07      	ldr	r2, [sp, #28]
 8009d6c:	4b37      	ldr	r3, [pc, #220]	; (8009e4c <__ieee754_pow+0x774>)
 8009d6e:	4413      	add	r3, r2
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 faa2 	bl	80002bc <__adddf3>
 8009d78:	4682      	mov	sl, r0
 8009d7a:	9805      	ldr	r0, [sp, #20]
 8009d7c:	468b      	mov	fp, r1
 8009d7e:	f7f6 fbe9 	bl	8000554 <__aeabi_i2d>
 8009d82:	9a07      	ldr	r2, [sp, #28]
 8009d84:	4b32      	ldr	r3, [pc, #200]	; (8009e50 <__ieee754_pow+0x778>)
 8009d86:	4413      	add	r3, r2
 8009d88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	4652      	mov	r2, sl
 8009d92:	465b      	mov	r3, fp
 8009d94:	ec51 0b18 	vmov	r0, r1, d8
 8009d98:	f7f6 fa90 	bl	80002bc <__adddf3>
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	464b      	mov	r3, r9
 8009da0:	f7f6 fa8c 	bl	80002bc <__adddf3>
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	f7f6 fa88 	bl	80002bc <__adddf3>
 8009dac:	2000      	movs	r0, #0
 8009dae:	4632      	mov	r2, r6
 8009db0:	463b      	mov	r3, r7
 8009db2:	4604      	mov	r4, r0
 8009db4:	460d      	mov	r5, r1
 8009db6:	f7f6 fa7f 	bl	80002b8 <__aeabi_dsub>
 8009dba:	4642      	mov	r2, r8
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	f7f6 fa7b 	bl	80002b8 <__aeabi_dsub>
 8009dc2:	ec53 2b18 	vmov	r2, r3, d8
 8009dc6:	f7f6 fa77 	bl	80002b8 <__aeabi_dsub>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4650      	mov	r0, sl
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	e610      	b.n	80099f6 <__ieee754_pow+0x31e>
 8009dd4:	2401      	movs	r4, #1
 8009dd6:	e6a1      	b.n	8009b1c <__ieee754_pow+0x444>
 8009dd8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009e28 <__ieee754_pow+0x750>
 8009ddc:	e617      	b.n	8009a0e <__ieee754_pow+0x336>
 8009dde:	bf00      	nop
 8009de0:	4a454eef 	.word	0x4a454eef
 8009de4:	3fca7e28 	.word	0x3fca7e28
 8009de8:	93c9db65 	.word	0x93c9db65
 8009dec:	3fcd864a 	.word	0x3fcd864a
 8009df0:	a91d4101 	.word	0xa91d4101
 8009df4:	3fd17460 	.word	0x3fd17460
 8009df8:	518f264d 	.word	0x518f264d
 8009dfc:	3fd55555 	.word	0x3fd55555
 8009e00:	db6fabff 	.word	0xdb6fabff
 8009e04:	3fdb6db6 	.word	0x3fdb6db6
 8009e08:	33333303 	.word	0x33333303
 8009e0c:	3fe33333 	.word	0x3fe33333
 8009e10:	e0000000 	.word	0xe0000000
 8009e14:	3feec709 	.word	0x3feec709
 8009e18:	dc3a03fd 	.word	0xdc3a03fd
 8009e1c:	3feec709 	.word	0x3feec709
 8009e20:	145b01f5 	.word	0x145b01f5
 8009e24:	be3e2fe0 	.word	0xbe3e2fe0
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	3ff00000 	.word	0x3ff00000
 8009e30:	7ff00000 	.word	0x7ff00000
 8009e34:	43400000 	.word	0x43400000
 8009e38:	0003988e 	.word	0x0003988e
 8009e3c:	000bb679 	.word	0x000bb679
 8009e40:	0800d348 	.word	0x0800d348
 8009e44:	3ff00000 	.word	0x3ff00000
 8009e48:	40080000 	.word	0x40080000
 8009e4c:	0800d368 	.word	0x0800d368
 8009e50:	0800d358 	.word	0x0800d358
 8009e54:	a3b5      	add	r3, pc, #724	; (adr r3, 800a12c <__ieee754_pow+0xa54>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	f7f6 fa2d 	bl	80002bc <__adddf3>
 8009e62:	4622      	mov	r2, r4
 8009e64:	ec41 0b1a 	vmov	d10, r0, r1
 8009e68:	462b      	mov	r3, r5
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	f7f6 fa23 	bl	80002b8 <__aeabi_dsub>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	ec51 0b1a 	vmov	r0, r1, d10
 8009e7a:	f7f6 fe65 	bl	8000b48 <__aeabi_dcmpgt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f47f ae04 	bne.w	8009a8c <__ieee754_pow+0x3b4>
 8009e84:	4aa4      	ldr	r2, [pc, #656]	; (800a118 <__ieee754_pow+0xa40>)
 8009e86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	f340 8108 	ble.w	800a0a0 <__ieee754_pow+0x9c8>
 8009e90:	151b      	asrs	r3, r3, #20
 8009e92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009e9a:	fa4a f303 	asr.w	r3, sl, r3
 8009e9e:	445b      	add	r3, fp
 8009ea0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009ea4:	4e9d      	ldr	r6, [pc, #628]	; (800a11c <__ieee754_pow+0xa44>)
 8009ea6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009eaa:	4116      	asrs	r6, r2
 8009eac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	ea23 0106 	bic.w	r1, r3, r6
 8009eb6:	f1c2 0214 	rsb	r2, r2, #20
 8009eba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ebe:	fa4a fa02 	asr.w	sl, sl, r2
 8009ec2:	f1bb 0f00 	cmp.w	fp, #0
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4620      	mov	r0, r4
 8009ecc:	4629      	mov	r1, r5
 8009ece:	bfb8      	it	lt
 8009ed0:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ed4:	f7f6 f9f0 	bl	80002b8 <__aeabi_dsub>
 8009ed8:	ec41 0b19 	vmov	d9, r0, r1
 8009edc:	4642      	mov	r2, r8
 8009ede:	464b      	mov	r3, r9
 8009ee0:	ec51 0b19 	vmov	r0, r1, d9
 8009ee4:	f7f6 f9ea 	bl	80002bc <__adddf3>
 8009ee8:	a37b      	add	r3, pc, #492	; (adr r3, 800a0d8 <__ieee754_pow+0xa00>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	2000      	movs	r0, #0
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	f7f6 fb98 	bl	8000628 <__aeabi_dmul>
 8009ef8:	ec53 2b19 	vmov	r2, r3, d9
 8009efc:	4606      	mov	r6, r0
 8009efe:	460f      	mov	r7, r1
 8009f00:	4620      	mov	r0, r4
 8009f02:	4629      	mov	r1, r5
 8009f04:	f7f6 f9d8 	bl	80002b8 <__aeabi_dsub>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4640      	mov	r0, r8
 8009f0e:	4649      	mov	r1, r9
 8009f10:	f7f6 f9d2 	bl	80002b8 <__aeabi_dsub>
 8009f14:	a372      	add	r3, pc, #456	; (adr r3, 800a0e0 <__ieee754_pow+0xa08>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f7f6 fb85 	bl	8000628 <__aeabi_dmul>
 8009f1e:	a372      	add	r3, pc, #456	; (adr r3, 800a0e8 <__ieee754_pow+0xa10>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	4680      	mov	r8, r0
 8009f26:	4689      	mov	r9, r1
 8009f28:	4620      	mov	r0, r4
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	f7f6 fb7c 	bl	8000628 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7f6 f9c0 	bl	80002bc <__adddf3>
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	460d      	mov	r5, r1
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4630      	mov	r0, r6
 8009f46:	4639      	mov	r1, r7
 8009f48:	f7f6 f9b8 	bl	80002bc <__adddf3>
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	463b      	mov	r3, r7
 8009f50:	4680      	mov	r8, r0
 8009f52:	4689      	mov	r9, r1
 8009f54:	f7f6 f9b0 	bl	80002b8 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f7f6 f9aa 	bl	80002b8 <__aeabi_dsub>
 8009f64:	4642      	mov	r2, r8
 8009f66:	4606      	mov	r6, r0
 8009f68:	460f      	mov	r7, r1
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7f6 fb5a 	bl	8000628 <__aeabi_dmul>
 8009f74:	a35e      	add	r3, pc, #376	; (adr r3, 800a0f0 <__ieee754_pow+0xa18>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	460d      	mov	r5, r1
 8009f7e:	f7f6 fb53 	bl	8000628 <__aeabi_dmul>
 8009f82:	a35d      	add	r3, pc, #372	; (adr r3, 800a0f8 <__ieee754_pow+0xa20>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f7f6 f996 	bl	80002b8 <__aeabi_dsub>
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	462b      	mov	r3, r5
 8009f90:	f7f6 fb4a 	bl	8000628 <__aeabi_dmul>
 8009f94:	a35a      	add	r3, pc, #360	; (adr r3, 800a100 <__ieee754_pow+0xa28>)
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	f7f6 f98f 	bl	80002bc <__adddf3>
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	462b      	mov	r3, r5
 8009fa2:	f7f6 fb41 	bl	8000628 <__aeabi_dmul>
 8009fa6:	a358      	add	r3, pc, #352	; (adr r3, 800a108 <__ieee754_pow+0xa30>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f7f6 f984 	bl	80002b8 <__aeabi_dsub>
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	462b      	mov	r3, r5
 8009fb4:	f7f6 fb38 	bl	8000628 <__aeabi_dmul>
 8009fb8:	a355      	add	r3, pc, #340	; (adr r3, 800a110 <__ieee754_pow+0xa38>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 f97d 	bl	80002bc <__adddf3>
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	f7f6 fb2f 	bl	8000628 <__aeabi_dmul>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	f7f6 f971 	bl	80002b8 <__aeabi_dsub>
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	460d      	mov	r5, r1
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4640      	mov	r0, r8
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	f7f6 fb21 	bl	8000628 <__aeabi_dmul>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	ec41 0b19 	vmov	d9, r0, r1
 8009fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 f960 	bl	80002b8 <__aeabi_dsub>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	ec51 0b19 	vmov	r0, r1, d9
 800a000:	f7f6 fc3c 	bl	800087c <__aeabi_ddiv>
 800a004:	4632      	mov	r2, r6
 800a006:	4604      	mov	r4, r0
 800a008:	460d      	mov	r5, r1
 800a00a:	463b      	mov	r3, r7
 800a00c:	4640      	mov	r0, r8
 800a00e:	4649      	mov	r1, r9
 800a010:	f7f6 fb0a 	bl	8000628 <__aeabi_dmul>
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	f7f6 f950 	bl	80002bc <__adddf3>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4620      	mov	r0, r4
 800a022:	4629      	mov	r1, r5
 800a024:	f7f6 f948 	bl	80002b8 <__aeabi_dsub>
 800a028:	4642      	mov	r2, r8
 800a02a:	464b      	mov	r3, r9
 800a02c:	f7f6 f944 	bl	80002b8 <__aeabi_dsub>
 800a030:	460b      	mov	r3, r1
 800a032:	4602      	mov	r2, r0
 800a034:	493a      	ldr	r1, [pc, #232]	; (800a120 <__ieee754_pow+0xa48>)
 800a036:	2000      	movs	r0, #0
 800a038:	f7f6 f93e 	bl	80002b8 <__aeabi_dsub>
 800a03c:	ec41 0b10 	vmov	d0, r0, r1
 800a040:	ee10 3a90 	vmov	r3, s1
 800a044:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a04c:	da2b      	bge.n	800a0a6 <__ieee754_pow+0x9ce>
 800a04e:	4650      	mov	r0, sl
 800a050:	f000 f96e 	bl	800a330 <scalbn>
 800a054:	ec51 0b10 	vmov	r0, r1, d0
 800a058:	ec53 2b18 	vmov	r2, r3, d8
 800a05c:	f7ff bbed 	b.w	800983a <__ieee754_pow+0x162>
 800a060:	4b30      	ldr	r3, [pc, #192]	; (800a124 <__ieee754_pow+0xa4c>)
 800a062:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a066:	429e      	cmp	r6, r3
 800a068:	f77f af0c 	ble.w	8009e84 <__ieee754_pow+0x7ac>
 800a06c:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <__ieee754_pow+0xa50>)
 800a06e:	440b      	add	r3, r1
 800a070:	4303      	orrs	r3, r0
 800a072:	d009      	beq.n	800a088 <__ieee754_pow+0x9b0>
 800a074:	ec51 0b18 	vmov	r0, r1, d8
 800a078:	2200      	movs	r2, #0
 800a07a:	2300      	movs	r3, #0
 800a07c:	f7f6 fd46 	bl	8000b0c <__aeabi_dcmplt>
 800a080:	3800      	subs	r0, #0
 800a082:	bf18      	it	ne
 800a084:	2001      	movne	r0, #1
 800a086:	e447      	b.n	8009918 <__ieee754_pow+0x240>
 800a088:	4622      	mov	r2, r4
 800a08a:	462b      	mov	r3, r5
 800a08c:	f7f6 f914 	bl	80002b8 <__aeabi_dsub>
 800a090:	4642      	mov	r2, r8
 800a092:	464b      	mov	r3, r9
 800a094:	f7f6 fd4e 	bl	8000b34 <__aeabi_dcmpge>
 800a098:	2800      	cmp	r0, #0
 800a09a:	f43f aef3 	beq.w	8009e84 <__ieee754_pow+0x7ac>
 800a09e:	e7e9      	b.n	800a074 <__ieee754_pow+0x99c>
 800a0a0:	f04f 0a00 	mov.w	sl, #0
 800a0a4:	e71a      	b.n	8009edc <__ieee754_pow+0x804>
 800a0a6:	ec51 0b10 	vmov	r0, r1, d0
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	e7d4      	b.n	800a058 <__ieee754_pow+0x980>
 800a0ae:	491c      	ldr	r1, [pc, #112]	; (800a120 <__ieee754_pow+0xa48>)
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	f7ff bb30 	b.w	8009716 <__ieee754_pow+0x3e>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	f7ff bb2c 	b.w	8009716 <__ieee754_pow+0x3e>
 800a0be:	4630      	mov	r0, r6
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	f7ff bb28 	b.w	8009716 <__ieee754_pow+0x3e>
 800a0c6:	9204      	str	r2, [sp, #16]
 800a0c8:	f7ff bb7a 	b.w	80097c0 <__ieee754_pow+0xe8>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f7ff bb64 	b.w	800979a <__ieee754_pow+0xc2>
 800a0d2:	bf00      	nop
 800a0d4:	f3af 8000 	nop.w
 800a0d8:	00000000 	.word	0x00000000
 800a0dc:	3fe62e43 	.word	0x3fe62e43
 800a0e0:	fefa39ef 	.word	0xfefa39ef
 800a0e4:	3fe62e42 	.word	0x3fe62e42
 800a0e8:	0ca86c39 	.word	0x0ca86c39
 800a0ec:	be205c61 	.word	0xbe205c61
 800a0f0:	72bea4d0 	.word	0x72bea4d0
 800a0f4:	3e663769 	.word	0x3e663769
 800a0f8:	c5d26bf1 	.word	0xc5d26bf1
 800a0fc:	3ebbbd41 	.word	0x3ebbbd41
 800a100:	af25de2c 	.word	0xaf25de2c
 800a104:	3f11566a 	.word	0x3f11566a
 800a108:	16bebd93 	.word	0x16bebd93
 800a10c:	3f66c16c 	.word	0x3f66c16c
 800a110:	5555553e 	.word	0x5555553e
 800a114:	3fc55555 	.word	0x3fc55555
 800a118:	3fe00000 	.word	0x3fe00000
 800a11c:	000fffff 	.word	0x000fffff
 800a120:	3ff00000 	.word	0x3ff00000
 800a124:	4090cbff 	.word	0x4090cbff
 800a128:	3f6f3400 	.word	0x3f6f3400
 800a12c:	652b82fe 	.word	0x652b82fe
 800a130:	3c971547 	.word	0x3c971547

0800a134 <__ieee754_sqrt>:
 800a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a138:	ec55 4b10 	vmov	r4, r5, d0
 800a13c:	4e55      	ldr	r6, [pc, #340]	; (800a294 <__ieee754_sqrt+0x160>)
 800a13e:	43ae      	bics	r6, r5
 800a140:	ee10 0a10 	vmov	r0, s0
 800a144:	ee10 3a10 	vmov	r3, s0
 800a148:	462a      	mov	r2, r5
 800a14a:	4629      	mov	r1, r5
 800a14c:	d110      	bne.n	800a170 <__ieee754_sqrt+0x3c>
 800a14e:	ee10 2a10 	vmov	r2, s0
 800a152:	462b      	mov	r3, r5
 800a154:	f7f6 fa68 	bl	8000628 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4620      	mov	r0, r4
 800a15e:	4629      	mov	r1, r5
 800a160:	f7f6 f8ac 	bl	80002bc <__adddf3>
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	ec45 4b10 	vmov	d0, r4, r5
 800a16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a170:	2d00      	cmp	r5, #0
 800a172:	dc10      	bgt.n	800a196 <__ieee754_sqrt+0x62>
 800a174:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a178:	4330      	orrs	r0, r6
 800a17a:	d0f5      	beq.n	800a168 <__ieee754_sqrt+0x34>
 800a17c:	b15d      	cbz	r5, 800a196 <__ieee754_sqrt+0x62>
 800a17e:	ee10 2a10 	vmov	r2, s0
 800a182:	462b      	mov	r3, r5
 800a184:	ee10 0a10 	vmov	r0, s0
 800a188:	f7f6 f896 	bl	80002b8 <__aeabi_dsub>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	f7f6 fb74 	bl	800087c <__aeabi_ddiv>
 800a194:	e7e6      	b.n	800a164 <__ieee754_sqrt+0x30>
 800a196:	1512      	asrs	r2, r2, #20
 800a198:	d074      	beq.n	800a284 <__ieee754_sqrt+0x150>
 800a19a:	07d4      	lsls	r4, r2, #31
 800a19c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a1a0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a1a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a1a8:	bf5e      	ittt	pl
 800a1aa:	0fda      	lsrpl	r2, r3, #31
 800a1ac:	005b      	lslpl	r3, r3, #1
 800a1ae:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a1b2:	2400      	movs	r4, #0
 800a1b4:	0fda      	lsrs	r2, r3, #31
 800a1b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a1ba:	107f      	asrs	r7, r7, #1
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	2516      	movs	r5, #22
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a1c6:	1886      	adds	r6, r0, r2
 800a1c8:	428e      	cmp	r6, r1
 800a1ca:	bfde      	ittt	le
 800a1cc:	1b89      	suble	r1, r1, r6
 800a1ce:	18b0      	addle	r0, r6, r2
 800a1d0:	18a4      	addle	r4, r4, r2
 800a1d2:	0049      	lsls	r1, r1, #1
 800a1d4:	3d01      	subs	r5, #1
 800a1d6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a1da:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a1de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1e2:	d1f0      	bne.n	800a1c6 <__ieee754_sqrt+0x92>
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	f04f 0e20 	mov.w	lr, #32
 800a1ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a1ee:	4281      	cmp	r1, r0
 800a1f0:	eb06 0c05 	add.w	ip, r6, r5
 800a1f4:	dc02      	bgt.n	800a1fc <__ieee754_sqrt+0xc8>
 800a1f6:	d113      	bne.n	800a220 <__ieee754_sqrt+0xec>
 800a1f8:	459c      	cmp	ip, r3
 800a1fa:	d811      	bhi.n	800a220 <__ieee754_sqrt+0xec>
 800a1fc:	f1bc 0f00 	cmp.w	ip, #0
 800a200:	eb0c 0506 	add.w	r5, ip, r6
 800a204:	da43      	bge.n	800a28e <__ieee754_sqrt+0x15a>
 800a206:	2d00      	cmp	r5, #0
 800a208:	db41      	blt.n	800a28e <__ieee754_sqrt+0x15a>
 800a20a:	f100 0801 	add.w	r8, r0, #1
 800a20e:	1a09      	subs	r1, r1, r0
 800a210:	459c      	cmp	ip, r3
 800a212:	bf88      	it	hi
 800a214:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a218:	eba3 030c 	sub.w	r3, r3, ip
 800a21c:	4432      	add	r2, r6
 800a21e:	4640      	mov	r0, r8
 800a220:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a224:	f1be 0e01 	subs.w	lr, lr, #1
 800a228:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a22c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a230:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a234:	d1db      	bne.n	800a1ee <__ieee754_sqrt+0xba>
 800a236:	430b      	orrs	r3, r1
 800a238:	d006      	beq.n	800a248 <__ieee754_sqrt+0x114>
 800a23a:	1c50      	adds	r0, r2, #1
 800a23c:	bf13      	iteet	ne
 800a23e:	3201      	addne	r2, #1
 800a240:	3401      	addeq	r4, #1
 800a242:	4672      	moveq	r2, lr
 800a244:	f022 0201 	bicne.w	r2, r2, #1
 800a248:	1063      	asrs	r3, r4, #1
 800a24a:	0852      	lsrs	r2, r2, #1
 800a24c:	07e1      	lsls	r1, r4, #31
 800a24e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a252:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a256:	bf48      	it	mi
 800a258:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a25c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a260:	4614      	mov	r4, r2
 800a262:	e781      	b.n	800a168 <__ieee754_sqrt+0x34>
 800a264:	0ad9      	lsrs	r1, r3, #11
 800a266:	3815      	subs	r0, #21
 800a268:	055b      	lsls	r3, r3, #21
 800a26a:	2900      	cmp	r1, #0
 800a26c:	d0fa      	beq.n	800a264 <__ieee754_sqrt+0x130>
 800a26e:	02cd      	lsls	r5, r1, #11
 800a270:	d50a      	bpl.n	800a288 <__ieee754_sqrt+0x154>
 800a272:	f1c2 0420 	rsb	r4, r2, #32
 800a276:	fa23 f404 	lsr.w	r4, r3, r4
 800a27a:	1e55      	subs	r5, r2, #1
 800a27c:	4093      	lsls	r3, r2
 800a27e:	4321      	orrs	r1, r4
 800a280:	1b42      	subs	r2, r0, r5
 800a282:	e78a      	b.n	800a19a <__ieee754_sqrt+0x66>
 800a284:	4610      	mov	r0, r2
 800a286:	e7f0      	b.n	800a26a <__ieee754_sqrt+0x136>
 800a288:	0049      	lsls	r1, r1, #1
 800a28a:	3201      	adds	r2, #1
 800a28c:	e7ef      	b.n	800a26e <__ieee754_sqrt+0x13a>
 800a28e:	4680      	mov	r8, r0
 800a290:	e7bd      	b.n	800a20e <__ieee754_sqrt+0xda>
 800a292:	bf00      	nop
 800a294:	7ff00000 	.word	0x7ff00000

0800a298 <with_errno>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	4604      	mov	r4, r0
 800a29c:	460d      	mov	r5, r1
 800a29e:	4616      	mov	r6, r2
 800a2a0:	f000 f8cc 	bl	800a43c <__errno>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	6006      	str	r6, [r0, #0]
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}

0800a2ac <xflow>:
 800a2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ae:	4614      	mov	r4, r2
 800a2b0:	461d      	mov	r5, r3
 800a2b2:	b108      	cbz	r0, 800a2b8 <xflow+0xc>
 800a2b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2b8:	e9cd 2300 	strd	r2, r3, [sp]
 800a2bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	f7f6 f9b0 	bl	8000628 <__aeabi_dmul>
 800a2c8:	2222      	movs	r2, #34	; 0x22
 800a2ca:	b003      	add	sp, #12
 800a2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2d0:	f7ff bfe2 	b.w	800a298 <with_errno>

0800a2d4 <__math_uflow>:
 800a2d4:	b508      	push	{r3, lr}
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a2dc:	f7ff ffe6 	bl	800a2ac <xflow>
 800a2e0:	ec41 0b10 	vmov	d0, r0, r1
 800a2e4:	bd08      	pop	{r3, pc}

0800a2e6 <__math_oflow>:
 800a2e6:	b508      	push	{r3, lr}
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a2ee:	f7ff ffdd 	bl	800a2ac <xflow>
 800a2f2:	ec41 0b10 	vmov	d0, r0, r1
 800a2f6:	bd08      	pop	{r3, pc}

0800a2f8 <fabs>:
 800a2f8:	ec51 0b10 	vmov	r0, r1, d0
 800a2fc:	ee10 2a10 	vmov	r2, s0
 800a300:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a304:	ec43 2b10 	vmov	d0, r2, r3
 800a308:	4770      	bx	lr

0800a30a <finite>:
 800a30a:	b082      	sub	sp, #8
 800a30c:	ed8d 0b00 	vstr	d0, [sp]
 800a310:	9801      	ldr	r0, [sp, #4]
 800a312:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a316:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a31a:	0fc0      	lsrs	r0, r0, #31
 800a31c:	b002      	add	sp, #8
 800a31e:	4770      	bx	lr

0800a320 <nan>:
 800a320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a328 <nan+0x8>
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	00000000 	.word	0x00000000
 800a32c:	7ff80000 	.word	0x7ff80000

0800a330 <scalbn>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	ec55 4b10 	vmov	r4, r5, d0
 800a336:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a33a:	4606      	mov	r6, r0
 800a33c:	462b      	mov	r3, r5
 800a33e:	b99a      	cbnz	r2, 800a368 <scalbn+0x38>
 800a340:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a344:	4323      	orrs	r3, r4
 800a346:	d036      	beq.n	800a3b6 <scalbn+0x86>
 800a348:	4b39      	ldr	r3, [pc, #228]	; (800a430 <scalbn+0x100>)
 800a34a:	4629      	mov	r1, r5
 800a34c:	ee10 0a10 	vmov	r0, s0
 800a350:	2200      	movs	r2, #0
 800a352:	f7f6 f969 	bl	8000628 <__aeabi_dmul>
 800a356:	4b37      	ldr	r3, [pc, #220]	; (800a434 <scalbn+0x104>)
 800a358:	429e      	cmp	r6, r3
 800a35a:	4604      	mov	r4, r0
 800a35c:	460d      	mov	r5, r1
 800a35e:	da10      	bge.n	800a382 <scalbn+0x52>
 800a360:	a32b      	add	r3, pc, #172	; (adr r3, 800a410 <scalbn+0xe0>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	e03a      	b.n	800a3de <scalbn+0xae>
 800a368:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a36c:	428a      	cmp	r2, r1
 800a36e:	d10c      	bne.n	800a38a <scalbn+0x5a>
 800a370:	ee10 2a10 	vmov	r2, s0
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	f7f5 ffa0 	bl	80002bc <__adddf3>
 800a37c:	4604      	mov	r4, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	e019      	b.n	800a3b6 <scalbn+0x86>
 800a382:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a386:	460b      	mov	r3, r1
 800a388:	3a36      	subs	r2, #54	; 0x36
 800a38a:	4432      	add	r2, r6
 800a38c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a390:	428a      	cmp	r2, r1
 800a392:	dd08      	ble.n	800a3a6 <scalbn+0x76>
 800a394:	2d00      	cmp	r5, #0
 800a396:	a120      	add	r1, pc, #128	; (adr r1, 800a418 <scalbn+0xe8>)
 800a398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39c:	da1c      	bge.n	800a3d8 <scalbn+0xa8>
 800a39e:	a120      	add	r1, pc, #128	; (adr r1, 800a420 <scalbn+0xf0>)
 800a3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a4:	e018      	b.n	800a3d8 <scalbn+0xa8>
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	dd08      	ble.n	800a3bc <scalbn+0x8c>
 800a3aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3b6:	ec45 4b10 	vmov	d0, r4, r5
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a3c0:	da19      	bge.n	800a3f6 <scalbn+0xc6>
 800a3c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a3c6:	429e      	cmp	r6, r3
 800a3c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a3cc:	dd0a      	ble.n	800a3e4 <scalbn+0xb4>
 800a3ce:	a112      	add	r1, pc, #72	; (adr r1, 800a418 <scalbn+0xe8>)
 800a3d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e2      	bne.n	800a39e <scalbn+0x6e>
 800a3d8:	a30f      	add	r3, pc, #60	; (adr r3, 800a418 <scalbn+0xe8>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f6 f923 	bl	8000628 <__aeabi_dmul>
 800a3e2:	e7cb      	b.n	800a37c <scalbn+0x4c>
 800a3e4:	a10a      	add	r1, pc, #40	; (adr r1, 800a410 <scalbn+0xe0>)
 800a3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0b8      	beq.n	800a360 <scalbn+0x30>
 800a3ee:	a10e      	add	r1, pc, #56	; (adr r1, 800a428 <scalbn+0xf8>)
 800a3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f4:	e7b4      	b.n	800a360 <scalbn+0x30>
 800a3f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3fa:	3236      	adds	r2, #54	; 0x36
 800a3fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a400:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a404:	4620      	mov	r0, r4
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <scalbn+0x108>)
 800a408:	2200      	movs	r2, #0
 800a40a:	e7e8      	b.n	800a3de <scalbn+0xae>
 800a40c:	f3af 8000 	nop.w
 800a410:	c2f8f359 	.word	0xc2f8f359
 800a414:	01a56e1f 	.word	0x01a56e1f
 800a418:	8800759c 	.word	0x8800759c
 800a41c:	7e37e43c 	.word	0x7e37e43c
 800a420:	8800759c 	.word	0x8800759c
 800a424:	fe37e43c 	.word	0xfe37e43c
 800a428:	c2f8f359 	.word	0xc2f8f359
 800a42c:	81a56e1f 	.word	0x81a56e1f
 800a430:	43500000 	.word	0x43500000
 800a434:	ffff3cb0 	.word	0xffff3cb0
 800a438:	3c900000 	.word	0x3c900000

0800a43c <__errno>:
 800a43c:	4b01      	ldr	r3, [pc, #4]	; (800a444 <__errno+0x8>)
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20000010 	.word	0x20000010

0800a448 <__libc_init_array>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	4d0d      	ldr	r5, [pc, #52]	; (800a480 <__libc_init_array+0x38>)
 800a44c:	4c0d      	ldr	r4, [pc, #52]	; (800a484 <__libc_init_array+0x3c>)
 800a44e:	1b64      	subs	r4, r4, r5
 800a450:	10a4      	asrs	r4, r4, #2
 800a452:	2600      	movs	r6, #0
 800a454:	42a6      	cmp	r6, r4
 800a456:	d109      	bne.n	800a46c <__libc_init_array+0x24>
 800a458:	4d0b      	ldr	r5, [pc, #44]	; (800a488 <__libc_init_array+0x40>)
 800a45a:	4c0c      	ldr	r4, [pc, #48]	; (800a48c <__libc_init_array+0x44>)
 800a45c:	f002 ff02 	bl	800d264 <_init>
 800a460:	1b64      	subs	r4, r4, r5
 800a462:	10a4      	asrs	r4, r4, #2
 800a464:	2600      	movs	r6, #0
 800a466:	42a6      	cmp	r6, r4
 800a468:	d105      	bne.n	800a476 <__libc_init_array+0x2e>
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a470:	4798      	blx	r3
 800a472:	3601      	adds	r6, #1
 800a474:	e7ee      	b.n	800a454 <__libc_init_array+0xc>
 800a476:	f855 3b04 	ldr.w	r3, [r5], #4
 800a47a:	4798      	blx	r3
 800a47c:	3601      	adds	r6, #1
 800a47e:	e7f2      	b.n	800a466 <__libc_init_array+0x1e>
 800a480:	0800d75c 	.word	0x0800d75c
 800a484:	0800d75c 	.word	0x0800d75c
 800a488:	0800d75c 	.word	0x0800d75c
 800a48c:	0800d760 	.word	0x0800d760

0800a490 <memcpy>:
 800a490:	440a      	add	r2, r1
 800a492:	4291      	cmp	r1, r2
 800a494:	f100 33ff 	add.w	r3, r0, #4294967295
 800a498:	d100      	bne.n	800a49c <memcpy+0xc>
 800a49a:	4770      	bx	lr
 800a49c:	b510      	push	{r4, lr}
 800a49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a6:	4291      	cmp	r1, r2
 800a4a8:	d1f9      	bne.n	800a49e <memcpy+0xe>
 800a4aa:	bd10      	pop	{r4, pc}

0800a4ac <memset>:
 800a4ac:	4402      	add	r2, r0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d100      	bne.n	800a4b6 <memset+0xa>
 800a4b4:	4770      	bx	lr
 800a4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ba:	e7f9      	b.n	800a4b0 <memset+0x4>

0800a4bc <__cvt>:
 800a4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c0:	ec55 4b10 	vmov	r4, r5, d0
 800a4c4:	2d00      	cmp	r5, #0
 800a4c6:	460e      	mov	r6, r1
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	bfbb      	ittet	lt
 800a4ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4d2:	461d      	movlt	r5, r3
 800a4d4:	2300      	movge	r3, #0
 800a4d6:	232d      	movlt	r3, #45	; 0x2d
 800a4d8:	700b      	strb	r3, [r1, #0]
 800a4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4e0:	4691      	mov	r9, r2
 800a4e2:	f023 0820 	bic.w	r8, r3, #32
 800a4e6:	bfbc      	itt	lt
 800a4e8:	4622      	movlt	r2, r4
 800a4ea:	4614      	movlt	r4, r2
 800a4ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4f0:	d005      	beq.n	800a4fe <__cvt+0x42>
 800a4f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4f6:	d100      	bne.n	800a4fa <__cvt+0x3e>
 800a4f8:	3601      	adds	r6, #1
 800a4fa:	2102      	movs	r1, #2
 800a4fc:	e000      	b.n	800a500 <__cvt+0x44>
 800a4fe:	2103      	movs	r1, #3
 800a500:	ab03      	add	r3, sp, #12
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	ab02      	add	r3, sp, #8
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	ec45 4b10 	vmov	d0, r4, r5
 800a50c:	4653      	mov	r3, sl
 800a50e:	4632      	mov	r2, r6
 800a510:	f000 fcea 	bl	800aee8 <_dtoa_r>
 800a514:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a518:	4607      	mov	r7, r0
 800a51a:	d102      	bne.n	800a522 <__cvt+0x66>
 800a51c:	f019 0f01 	tst.w	r9, #1
 800a520:	d022      	beq.n	800a568 <__cvt+0xac>
 800a522:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a526:	eb07 0906 	add.w	r9, r7, r6
 800a52a:	d110      	bne.n	800a54e <__cvt+0x92>
 800a52c:	783b      	ldrb	r3, [r7, #0]
 800a52e:	2b30      	cmp	r3, #48	; 0x30
 800a530:	d10a      	bne.n	800a548 <__cvt+0x8c>
 800a532:	2200      	movs	r2, #0
 800a534:	2300      	movs	r3, #0
 800a536:	4620      	mov	r0, r4
 800a538:	4629      	mov	r1, r5
 800a53a:	f7f6 fadd 	bl	8000af8 <__aeabi_dcmpeq>
 800a53e:	b918      	cbnz	r0, 800a548 <__cvt+0x8c>
 800a540:	f1c6 0601 	rsb	r6, r6, #1
 800a544:	f8ca 6000 	str.w	r6, [sl]
 800a548:	f8da 3000 	ldr.w	r3, [sl]
 800a54c:	4499      	add	r9, r3
 800a54e:	2200      	movs	r2, #0
 800a550:	2300      	movs	r3, #0
 800a552:	4620      	mov	r0, r4
 800a554:	4629      	mov	r1, r5
 800a556:	f7f6 facf 	bl	8000af8 <__aeabi_dcmpeq>
 800a55a:	b108      	cbz	r0, 800a560 <__cvt+0xa4>
 800a55c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a560:	2230      	movs	r2, #48	; 0x30
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	454b      	cmp	r3, r9
 800a566:	d307      	bcc.n	800a578 <__cvt+0xbc>
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a56c:	1bdb      	subs	r3, r3, r7
 800a56e:	4638      	mov	r0, r7
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	b004      	add	sp, #16
 800a574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a578:	1c59      	adds	r1, r3, #1
 800a57a:	9103      	str	r1, [sp, #12]
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e7f0      	b.n	800a562 <__cvt+0xa6>

0800a580 <__exponent>:
 800a580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a582:	4603      	mov	r3, r0
 800a584:	2900      	cmp	r1, #0
 800a586:	bfb8      	it	lt
 800a588:	4249      	neglt	r1, r1
 800a58a:	f803 2b02 	strb.w	r2, [r3], #2
 800a58e:	bfb4      	ite	lt
 800a590:	222d      	movlt	r2, #45	; 0x2d
 800a592:	222b      	movge	r2, #43	; 0x2b
 800a594:	2909      	cmp	r1, #9
 800a596:	7042      	strb	r2, [r0, #1]
 800a598:	dd2a      	ble.n	800a5f0 <__exponent+0x70>
 800a59a:	f10d 0407 	add.w	r4, sp, #7
 800a59e:	46a4      	mov	ip, r4
 800a5a0:	270a      	movs	r7, #10
 800a5a2:	46a6      	mov	lr, r4
 800a5a4:	460a      	mov	r2, r1
 800a5a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5aa:	fb07 1516 	mls	r5, r7, r6, r1
 800a5ae:	3530      	adds	r5, #48	; 0x30
 800a5b0:	2a63      	cmp	r2, #99	; 0x63
 800a5b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	dcf1      	bgt.n	800a5a2 <__exponent+0x22>
 800a5be:	3130      	adds	r1, #48	; 0x30
 800a5c0:	f1ae 0502 	sub.w	r5, lr, #2
 800a5c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5c8:	1c44      	adds	r4, r0, #1
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	4561      	cmp	r1, ip
 800a5ce:	d30a      	bcc.n	800a5e6 <__exponent+0x66>
 800a5d0:	f10d 0209 	add.w	r2, sp, #9
 800a5d4:	eba2 020e 	sub.w	r2, r2, lr
 800a5d8:	4565      	cmp	r5, ip
 800a5da:	bf88      	it	hi
 800a5dc:	2200      	movhi	r2, #0
 800a5de:	4413      	add	r3, r2
 800a5e0:	1a18      	subs	r0, r3, r0
 800a5e2:	b003      	add	sp, #12
 800a5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5ee:	e7ed      	b.n	800a5cc <__exponent+0x4c>
 800a5f0:	2330      	movs	r3, #48	; 0x30
 800a5f2:	3130      	adds	r1, #48	; 0x30
 800a5f4:	7083      	strb	r3, [r0, #2]
 800a5f6:	70c1      	strb	r1, [r0, #3]
 800a5f8:	1d03      	adds	r3, r0, #4
 800a5fa:	e7f1      	b.n	800a5e0 <__exponent+0x60>

0800a5fc <_printf_float>:
 800a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	ed2d 8b02 	vpush	{d8}
 800a604:	b08d      	sub	sp, #52	; 0x34
 800a606:	460c      	mov	r4, r1
 800a608:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a60c:	4616      	mov	r6, r2
 800a60e:	461f      	mov	r7, r3
 800a610:	4605      	mov	r5, r0
 800a612:	f001 fa57 	bl	800bac4 <_localeconv_r>
 800a616:	f8d0 a000 	ldr.w	sl, [r0]
 800a61a:	4650      	mov	r0, sl
 800a61c:	f7f5 fdf0 	bl	8000200 <strlen>
 800a620:	2300      	movs	r3, #0
 800a622:	930a      	str	r3, [sp, #40]	; 0x28
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	f8d8 3000 	ldr.w	r3, [r8]
 800a62c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a630:	3307      	adds	r3, #7
 800a632:	f023 0307 	bic.w	r3, r3, #7
 800a636:	f103 0208 	add.w	r2, r3, #8
 800a63a:	f8c8 2000 	str.w	r2, [r8]
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a646:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a64a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	f8cd 8018 	str.w	r8, [sp, #24]
 800a654:	ee08 0a10 	vmov	s16, r0
 800a658:	4b9f      	ldr	r3, [pc, #636]	; (800a8d8 <_printf_float+0x2dc>)
 800a65a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a65e:	f04f 32ff 	mov.w	r2, #4294967295
 800a662:	f7f6 fa7b 	bl	8000b5c <__aeabi_dcmpun>
 800a666:	bb88      	cbnz	r0, 800a6cc <_printf_float+0xd0>
 800a668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a66c:	4b9a      	ldr	r3, [pc, #616]	; (800a8d8 <_printf_float+0x2dc>)
 800a66e:	f04f 32ff 	mov.w	r2, #4294967295
 800a672:	f7f6 fa55 	bl	8000b20 <__aeabi_dcmple>
 800a676:	bb48      	cbnz	r0, 800a6cc <_printf_float+0xd0>
 800a678:	2200      	movs	r2, #0
 800a67a:	2300      	movs	r3, #0
 800a67c:	4640      	mov	r0, r8
 800a67e:	4649      	mov	r1, r9
 800a680:	f7f6 fa44 	bl	8000b0c <__aeabi_dcmplt>
 800a684:	b110      	cbz	r0, 800a68c <_printf_float+0x90>
 800a686:	232d      	movs	r3, #45	; 0x2d
 800a688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a68c:	4b93      	ldr	r3, [pc, #588]	; (800a8dc <_printf_float+0x2e0>)
 800a68e:	4894      	ldr	r0, [pc, #592]	; (800a8e0 <_printf_float+0x2e4>)
 800a690:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a694:	bf94      	ite	ls
 800a696:	4698      	movls	r8, r3
 800a698:	4680      	movhi	r8, r0
 800a69a:	2303      	movs	r3, #3
 800a69c:	6123      	str	r3, [r4, #16]
 800a69e:	9b05      	ldr	r3, [sp, #20]
 800a6a0:	f023 0204 	bic.w	r2, r3, #4
 800a6a4:	6022      	str	r2, [r4, #0]
 800a6a6:	f04f 0900 	mov.w	r9, #0
 800a6aa:	9700      	str	r7, [sp, #0]
 800a6ac:	4633      	mov	r3, r6
 800a6ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f000 f9d8 	bl	800aa68 <_printf_common>
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	f040 8090 	bne.w	800a7de <_printf_float+0x1e2>
 800a6be:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c2:	b00d      	add	sp, #52	; 0x34
 800a6c4:	ecbd 8b02 	vpop	{d8}
 800a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f7f6 fa42 	bl	8000b5c <__aeabi_dcmpun>
 800a6d8:	b140      	cbz	r0, 800a6ec <_printf_float+0xf0>
 800a6da:	464b      	mov	r3, r9
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bfbc      	itt	lt
 800a6e0:	232d      	movlt	r3, #45	; 0x2d
 800a6e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6e6:	487f      	ldr	r0, [pc, #508]	; (800a8e4 <_printf_float+0x2e8>)
 800a6e8:	4b7f      	ldr	r3, [pc, #508]	; (800a8e8 <_printf_float+0x2ec>)
 800a6ea:	e7d1      	b.n	800a690 <_printf_float+0x94>
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6f2:	9206      	str	r2, [sp, #24]
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	d13f      	bne.n	800a778 <_printf_float+0x17c>
 800a6f8:	2306      	movs	r3, #6
 800a6fa:	6063      	str	r3, [r4, #4]
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	6861      	ldr	r1, [r4, #4]
 800a700:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a704:	2300      	movs	r3, #0
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	ab0a      	add	r3, sp, #40	; 0x28
 800a70a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a70e:	ab09      	add	r3, sp, #36	; 0x24
 800a710:	ec49 8b10 	vmov	d0, r8, r9
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	6022      	str	r2, [r4, #0]
 800a718:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a71c:	4628      	mov	r0, r5
 800a71e:	f7ff fecd 	bl	800a4bc <__cvt>
 800a722:	9b06      	ldr	r3, [sp, #24]
 800a724:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a726:	2b47      	cmp	r3, #71	; 0x47
 800a728:	4680      	mov	r8, r0
 800a72a:	d108      	bne.n	800a73e <_printf_float+0x142>
 800a72c:	1cc8      	adds	r0, r1, #3
 800a72e:	db02      	blt.n	800a736 <_printf_float+0x13a>
 800a730:	6863      	ldr	r3, [r4, #4]
 800a732:	4299      	cmp	r1, r3
 800a734:	dd41      	ble.n	800a7ba <_printf_float+0x1be>
 800a736:	f1ab 0b02 	sub.w	fp, fp, #2
 800a73a:	fa5f fb8b 	uxtb.w	fp, fp
 800a73e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a742:	d820      	bhi.n	800a786 <_printf_float+0x18a>
 800a744:	3901      	subs	r1, #1
 800a746:	465a      	mov	r2, fp
 800a748:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a74c:	9109      	str	r1, [sp, #36]	; 0x24
 800a74e:	f7ff ff17 	bl	800a580 <__exponent>
 800a752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a754:	1813      	adds	r3, r2, r0
 800a756:	2a01      	cmp	r2, #1
 800a758:	4681      	mov	r9, r0
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	dc02      	bgt.n	800a764 <_printf_float+0x168>
 800a75e:	6822      	ldr	r2, [r4, #0]
 800a760:	07d2      	lsls	r2, r2, #31
 800a762:	d501      	bpl.n	800a768 <_printf_float+0x16c>
 800a764:	3301      	adds	r3, #1
 800a766:	6123      	str	r3, [r4, #16]
 800a768:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d09c      	beq.n	800a6aa <_printf_float+0xae>
 800a770:	232d      	movs	r3, #45	; 0x2d
 800a772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a776:	e798      	b.n	800a6aa <_printf_float+0xae>
 800a778:	9a06      	ldr	r2, [sp, #24]
 800a77a:	2a47      	cmp	r2, #71	; 0x47
 800a77c:	d1be      	bne.n	800a6fc <_printf_float+0x100>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1bc      	bne.n	800a6fc <_printf_float+0x100>
 800a782:	2301      	movs	r3, #1
 800a784:	e7b9      	b.n	800a6fa <_printf_float+0xfe>
 800a786:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a78a:	d118      	bne.n	800a7be <_printf_float+0x1c2>
 800a78c:	2900      	cmp	r1, #0
 800a78e:	6863      	ldr	r3, [r4, #4]
 800a790:	dd0b      	ble.n	800a7aa <_printf_float+0x1ae>
 800a792:	6121      	str	r1, [r4, #16]
 800a794:	b913      	cbnz	r3, 800a79c <_printf_float+0x1a0>
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	07d0      	lsls	r0, r2, #31
 800a79a:	d502      	bpl.n	800a7a2 <_printf_float+0x1a6>
 800a79c:	3301      	adds	r3, #1
 800a79e:	440b      	add	r3, r1
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7a4:	f04f 0900 	mov.w	r9, #0
 800a7a8:	e7de      	b.n	800a768 <_printf_float+0x16c>
 800a7aa:	b913      	cbnz	r3, 800a7b2 <_printf_float+0x1b6>
 800a7ac:	6822      	ldr	r2, [r4, #0]
 800a7ae:	07d2      	lsls	r2, r2, #31
 800a7b0:	d501      	bpl.n	800a7b6 <_printf_float+0x1ba>
 800a7b2:	3302      	adds	r3, #2
 800a7b4:	e7f4      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7f2      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7c0:	4299      	cmp	r1, r3
 800a7c2:	db05      	blt.n	800a7d0 <_printf_float+0x1d4>
 800a7c4:	6823      	ldr	r3, [r4, #0]
 800a7c6:	6121      	str	r1, [r4, #16]
 800a7c8:	07d8      	lsls	r0, r3, #31
 800a7ca:	d5ea      	bpl.n	800a7a2 <_printf_float+0x1a6>
 800a7cc:	1c4b      	adds	r3, r1, #1
 800a7ce:	e7e7      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	bfd4      	ite	le
 800a7d4:	f1c1 0202 	rsble	r2, r1, #2
 800a7d8:	2201      	movgt	r2, #1
 800a7da:	4413      	add	r3, r2
 800a7dc:	e7e0      	b.n	800a7a0 <_printf_float+0x1a4>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	055a      	lsls	r2, r3, #21
 800a7e2:	d407      	bmi.n	800a7f4 <_printf_float+0x1f8>
 800a7e4:	6923      	ldr	r3, [r4, #16]
 800a7e6:	4642      	mov	r2, r8
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	d12c      	bne.n	800a84c <_printf_float+0x250>
 800a7f2:	e764      	b.n	800a6be <_printf_float+0xc2>
 800a7f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7f8:	f240 80e0 	bls.w	800a9bc <_printf_float+0x3c0>
 800a7fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a800:	2200      	movs	r2, #0
 800a802:	2300      	movs	r3, #0
 800a804:	f7f6 f978 	bl	8000af8 <__aeabi_dcmpeq>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d034      	beq.n	800a876 <_printf_float+0x27a>
 800a80c:	4a37      	ldr	r2, [pc, #220]	; (800a8ec <_printf_float+0x2f0>)
 800a80e:	2301      	movs	r3, #1
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	f43f af51 	beq.w	800a6be <_printf_float+0xc2>
 800a81c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a820:	429a      	cmp	r2, r3
 800a822:	db02      	blt.n	800a82a <_printf_float+0x22e>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	07d8      	lsls	r0, r3, #31
 800a828:	d510      	bpl.n	800a84c <_printf_float+0x250>
 800a82a:	ee18 3a10 	vmov	r3, s16
 800a82e:	4652      	mov	r2, sl
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af41 	beq.w	800a6be <_printf_float+0xc2>
 800a83c:	f04f 0800 	mov.w	r8, #0
 800a840:	f104 091a 	add.w	r9, r4, #26
 800a844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a846:	3b01      	subs	r3, #1
 800a848:	4543      	cmp	r3, r8
 800a84a:	dc09      	bgt.n	800a860 <_printf_float+0x264>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	079b      	lsls	r3, r3, #30
 800a850:	f100 8105 	bmi.w	800aa5e <_printf_float+0x462>
 800a854:	68e0      	ldr	r0, [r4, #12]
 800a856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a858:	4298      	cmp	r0, r3
 800a85a:	bfb8      	it	lt
 800a85c:	4618      	movlt	r0, r3
 800a85e:	e730      	b.n	800a6c2 <_printf_float+0xc6>
 800a860:	2301      	movs	r3, #1
 800a862:	464a      	mov	r2, r9
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af27 	beq.w	800a6be <_printf_float+0xc2>
 800a870:	f108 0801 	add.w	r8, r8, #1
 800a874:	e7e6      	b.n	800a844 <_printf_float+0x248>
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dc39      	bgt.n	800a8f0 <_printf_float+0x2f4>
 800a87c:	4a1b      	ldr	r2, [pc, #108]	; (800a8ec <_printf_float+0x2f0>)
 800a87e:	2301      	movs	r3, #1
 800a880:	4631      	mov	r1, r6
 800a882:	4628      	mov	r0, r5
 800a884:	47b8      	blx	r7
 800a886:	3001      	adds	r0, #1
 800a888:	f43f af19 	beq.w	800a6be <_printf_float+0xc2>
 800a88c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a890:	4313      	orrs	r3, r2
 800a892:	d102      	bne.n	800a89a <_printf_float+0x29e>
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	07d9      	lsls	r1, r3, #31
 800a898:	d5d8      	bpl.n	800a84c <_printf_float+0x250>
 800a89a:	ee18 3a10 	vmov	r3, s16
 800a89e:	4652      	mov	r2, sl
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	47b8      	blx	r7
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f43f af09 	beq.w	800a6be <_printf_float+0xc2>
 800a8ac:	f04f 0900 	mov.w	r9, #0
 800a8b0:	f104 0a1a 	add.w	sl, r4, #26
 800a8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b6:	425b      	negs	r3, r3
 800a8b8:	454b      	cmp	r3, r9
 800a8ba:	dc01      	bgt.n	800a8c0 <_printf_float+0x2c4>
 800a8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8be:	e792      	b.n	800a7e6 <_printf_float+0x1ea>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	4652      	mov	r2, sl
 800a8c4:	4631      	mov	r1, r6
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f43f aef7 	beq.w	800a6be <_printf_float+0xc2>
 800a8d0:	f109 0901 	add.w	r9, r9, #1
 800a8d4:	e7ee      	b.n	800a8b4 <_printf_float+0x2b8>
 800a8d6:	bf00      	nop
 800a8d8:	7fefffff 	.word	0x7fefffff
 800a8dc:	0800d37c 	.word	0x0800d37c
 800a8e0:	0800d380 	.word	0x0800d380
 800a8e4:	0800d388 	.word	0x0800d388
 800a8e8:	0800d384 	.word	0x0800d384
 800a8ec:	0800d38c 	.word	0x0800d38c
 800a8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	bfa8      	it	ge
 800a8f8:	461a      	movge	r2, r3
 800a8fa:	2a00      	cmp	r2, #0
 800a8fc:	4691      	mov	r9, r2
 800a8fe:	dc37      	bgt.n	800a970 <_printf_float+0x374>
 800a900:	f04f 0b00 	mov.w	fp, #0
 800a904:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a908:	f104 021a 	add.w	r2, r4, #26
 800a90c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a90e:	9305      	str	r3, [sp, #20]
 800a910:	eba3 0309 	sub.w	r3, r3, r9
 800a914:	455b      	cmp	r3, fp
 800a916:	dc33      	bgt.n	800a980 <_printf_float+0x384>
 800a918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a91c:	429a      	cmp	r2, r3
 800a91e:	db3b      	blt.n	800a998 <_printf_float+0x39c>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	07da      	lsls	r2, r3, #31
 800a924:	d438      	bmi.n	800a998 <_printf_float+0x39c>
 800a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a928:	9a05      	ldr	r2, [sp, #20]
 800a92a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a92c:	1a9a      	subs	r2, r3, r2
 800a92e:	eba3 0901 	sub.w	r9, r3, r1
 800a932:	4591      	cmp	r9, r2
 800a934:	bfa8      	it	ge
 800a936:	4691      	movge	r9, r2
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	dc35      	bgt.n	800a9aa <_printf_float+0x3ae>
 800a93e:	f04f 0800 	mov.w	r8, #0
 800a942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a946:	f104 0a1a 	add.w	sl, r4, #26
 800a94a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a94e:	1a9b      	subs	r3, r3, r2
 800a950:	eba3 0309 	sub.w	r3, r3, r9
 800a954:	4543      	cmp	r3, r8
 800a956:	f77f af79 	ble.w	800a84c <_printf_float+0x250>
 800a95a:	2301      	movs	r3, #1
 800a95c:	4652      	mov	r2, sl
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	47b8      	blx	r7
 800a964:	3001      	adds	r0, #1
 800a966:	f43f aeaa 	beq.w	800a6be <_printf_float+0xc2>
 800a96a:	f108 0801 	add.w	r8, r8, #1
 800a96e:	e7ec      	b.n	800a94a <_printf_float+0x34e>
 800a970:	4613      	mov	r3, r2
 800a972:	4631      	mov	r1, r6
 800a974:	4642      	mov	r2, r8
 800a976:	4628      	mov	r0, r5
 800a978:	47b8      	blx	r7
 800a97a:	3001      	adds	r0, #1
 800a97c:	d1c0      	bne.n	800a900 <_printf_float+0x304>
 800a97e:	e69e      	b.n	800a6be <_printf_float+0xc2>
 800a980:	2301      	movs	r3, #1
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	9205      	str	r2, [sp, #20]
 800a988:	47b8      	blx	r7
 800a98a:	3001      	adds	r0, #1
 800a98c:	f43f ae97 	beq.w	800a6be <_printf_float+0xc2>
 800a990:	9a05      	ldr	r2, [sp, #20]
 800a992:	f10b 0b01 	add.w	fp, fp, #1
 800a996:	e7b9      	b.n	800a90c <_printf_float+0x310>
 800a998:	ee18 3a10 	vmov	r3, s16
 800a99c:	4652      	mov	r2, sl
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d1be      	bne.n	800a926 <_printf_float+0x32a>
 800a9a8:	e689      	b.n	800a6be <_printf_float+0xc2>
 800a9aa:	9a05      	ldr	r2, [sp, #20]
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	4442      	add	r2, r8
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	47b8      	blx	r7
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d1c1      	bne.n	800a93e <_printf_float+0x342>
 800a9ba:	e680      	b.n	800a6be <_printf_float+0xc2>
 800a9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9be:	2a01      	cmp	r2, #1
 800a9c0:	dc01      	bgt.n	800a9c6 <_printf_float+0x3ca>
 800a9c2:	07db      	lsls	r3, r3, #31
 800a9c4:	d538      	bpl.n	800aa38 <_printf_float+0x43c>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b8      	blx	r7
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	f43f ae74 	beq.w	800a6be <_printf_float+0xc2>
 800a9d6:	ee18 3a10 	vmov	r3, s16
 800a9da:	4652      	mov	r2, sl
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f ae6b 	beq.w	800a6be <_printf_float+0xc2>
 800a9e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f7f6 f882 	bl	8000af8 <__aeabi_dcmpeq>
 800a9f4:	b9d8      	cbnz	r0, 800aa2e <_printf_float+0x432>
 800a9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f8:	f108 0201 	add.w	r2, r8, #1
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b8      	blx	r7
 800aa04:	3001      	adds	r0, #1
 800aa06:	d10e      	bne.n	800aa26 <_printf_float+0x42a>
 800aa08:	e659      	b.n	800a6be <_printf_float+0xc2>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	4631      	mov	r1, r6
 800aa10:	4628      	mov	r0, r5
 800aa12:	47b8      	blx	r7
 800aa14:	3001      	adds	r0, #1
 800aa16:	f43f ae52 	beq.w	800a6be <_printf_float+0xc2>
 800aa1a:	f108 0801 	add.w	r8, r8, #1
 800aa1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa20:	3b01      	subs	r3, #1
 800aa22:	4543      	cmp	r3, r8
 800aa24:	dcf1      	bgt.n	800aa0a <_printf_float+0x40e>
 800aa26:	464b      	mov	r3, r9
 800aa28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa2c:	e6dc      	b.n	800a7e8 <_printf_float+0x1ec>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	f104 0a1a 	add.w	sl, r4, #26
 800aa36:	e7f2      	b.n	800aa1e <_printf_float+0x422>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	4642      	mov	r2, r8
 800aa3c:	e7df      	b.n	800a9fe <_printf_float+0x402>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	464a      	mov	r2, r9
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f ae38 	beq.w	800a6be <_printf_float+0xc2>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	68e3      	ldr	r3, [r4, #12]
 800aa54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa56:	1a5b      	subs	r3, r3, r1
 800aa58:	4543      	cmp	r3, r8
 800aa5a:	dcf0      	bgt.n	800aa3e <_printf_float+0x442>
 800aa5c:	e6fa      	b.n	800a854 <_printf_float+0x258>
 800aa5e:	f04f 0800 	mov.w	r8, #0
 800aa62:	f104 0919 	add.w	r9, r4, #25
 800aa66:	e7f4      	b.n	800aa52 <_printf_float+0x456>

0800aa68 <_printf_common>:
 800aa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6c:	4616      	mov	r6, r2
 800aa6e:	4699      	mov	r9, r3
 800aa70:	688a      	ldr	r2, [r1, #8]
 800aa72:	690b      	ldr	r3, [r1, #16]
 800aa74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	bfb8      	it	lt
 800aa7c:	4613      	movlt	r3, r2
 800aa7e:	6033      	str	r3, [r6, #0]
 800aa80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa84:	4607      	mov	r7, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	b10a      	cbz	r2, 800aa8e <_printf_common+0x26>
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	6033      	str	r3, [r6, #0]
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	0699      	lsls	r1, r3, #26
 800aa92:	bf42      	ittt	mi
 800aa94:	6833      	ldrmi	r3, [r6, #0]
 800aa96:	3302      	addmi	r3, #2
 800aa98:	6033      	strmi	r3, [r6, #0]
 800aa9a:	6825      	ldr	r5, [r4, #0]
 800aa9c:	f015 0506 	ands.w	r5, r5, #6
 800aaa0:	d106      	bne.n	800aab0 <_printf_common+0x48>
 800aaa2:	f104 0a19 	add.w	sl, r4, #25
 800aaa6:	68e3      	ldr	r3, [r4, #12]
 800aaa8:	6832      	ldr	r2, [r6, #0]
 800aaaa:	1a9b      	subs	r3, r3, r2
 800aaac:	42ab      	cmp	r3, r5
 800aaae:	dc26      	bgt.n	800aafe <_printf_common+0x96>
 800aab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aab4:	1e13      	subs	r3, r2, #0
 800aab6:	6822      	ldr	r2, [r4, #0]
 800aab8:	bf18      	it	ne
 800aaba:	2301      	movne	r3, #1
 800aabc:	0692      	lsls	r2, r2, #26
 800aabe:	d42b      	bmi.n	800ab18 <_printf_common+0xb0>
 800aac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aac4:	4649      	mov	r1, r9
 800aac6:	4638      	mov	r0, r7
 800aac8:	47c0      	blx	r8
 800aaca:	3001      	adds	r0, #1
 800aacc:	d01e      	beq.n	800ab0c <_printf_common+0xa4>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	68e5      	ldr	r5, [r4, #12]
 800aad2:	6832      	ldr	r2, [r6, #0]
 800aad4:	f003 0306 	and.w	r3, r3, #6
 800aad8:	2b04      	cmp	r3, #4
 800aada:	bf08      	it	eq
 800aadc:	1aad      	subeq	r5, r5, r2
 800aade:	68a3      	ldr	r3, [r4, #8]
 800aae0:	6922      	ldr	r2, [r4, #16]
 800aae2:	bf0c      	ite	eq
 800aae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aae8:	2500      	movne	r5, #0
 800aaea:	4293      	cmp	r3, r2
 800aaec:	bfc4      	itt	gt
 800aaee:	1a9b      	subgt	r3, r3, r2
 800aaf0:	18ed      	addgt	r5, r5, r3
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	341a      	adds	r4, #26
 800aaf6:	42b5      	cmp	r5, r6
 800aaf8:	d11a      	bne.n	800ab30 <_printf_common+0xc8>
 800aafa:	2000      	movs	r0, #0
 800aafc:	e008      	b.n	800ab10 <_printf_common+0xa8>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4652      	mov	r2, sl
 800ab02:	4649      	mov	r1, r9
 800ab04:	4638      	mov	r0, r7
 800ab06:	47c0      	blx	r8
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d103      	bne.n	800ab14 <_printf_common+0xac>
 800ab0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab14:	3501      	adds	r5, #1
 800ab16:	e7c6      	b.n	800aaa6 <_printf_common+0x3e>
 800ab18:	18e1      	adds	r1, r4, r3
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	2030      	movs	r0, #48	; 0x30
 800ab1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab22:	4422      	add	r2, r4
 800ab24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab2c:	3302      	adds	r3, #2
 800ab2e:	e7c7      	b.n	800aac0 <_printf_common+0x58>
 800ab30:	2301      	movs	r3, #1
 800ab32:	4622      	mov	r2, r4
 800ab34:	4649      	mov	r1, r9
 800ab36:	4638      	mov	r0, r7
 800ab38:	47c0      	blx	r8
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	d0e6      	beq.n	800ab0c <_printf_common+0xa4>
 800ab3e:	3601      	adds	r6, #1
 800ab40:	e7d9      	b.n	800aaf6 <_printf_common+0x8e>
	...

0800ab44 <_printf_i>:
 800ab44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab48:	7e0f      	ldrb	r7, [r1, #24]
 800ab4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab4c:	2f78      	cmp	r7, #120	; 0x78
 800ab4e:	4691      	mov	r9, r2
 800ab50:	4680      	mov	r8, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	469a      	mov	sl, r3
 800ab56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab5a:	d807      	bhi.n	800ab6c <_printf_i+0x28>
 800ab5c:	2f62      	cmp	r7, #98	; 0x62
 800ab5e:	d80a      	bhi.n	800ab76 <_printf_i+0x32>
 800ab60:	2f00      	cmp	r7, #0
 800ab62:	f000 80d8 	beq.w	800ad16 <_printf_i+0x1d2>
 800ab66:	2f58      	cmp	r7, #88	; 0x58
 800ab68:	f000 80a3 	beq.w	800acb2 <_printf_i+0x16e>
 800ab6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab74:	e03a      	b.n	800abec <_printf_i+0xa8>
 800ab76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab7a:	2b15      	cmp	r3, #21
 800ab7c:	d8f6      	bhi.n	800ab6c <_printf_i+0x28>
 800ab7e:	a101      	add	r1, pc, #4	; (adr r1, 800ab84 <_printf_i+0x40>)
 800ab80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab84:	0800abdd 	.word	0x0800abdd
 800ab88:	0800abf1 	.word	0x0800abf1
 800ab8c:	0800ab6d 	.word	0x0800ab6d
 800ab90:	0800ab6d 	.word	0x0800ab6d
 800ab94:	0800ab6d 	.word	0x0800ab6d
 800ab98:	0800ab6d 	.word	0x0800ab6d
 800ab9c:	0800abf1 	.word	0x0800abf1
 800aba0:	0800ab6d 	.word	0x0800ab6d
 800aba4:	0800ab6d 	.word	0x0800ab6d
 800aba8:	0800ab6d 	.word	0x0800ab6d
 800abac:	0800ab6d 	.word	0x0800ab6d
 800abb0:	0800acfd 	.word	0x0800acfd
 800abb4:	0800ac21 	.word	0x0800ac21
 800abb8:	0800acdf 	.word	0x0800acdf
 800abbc:	0800ab6d 	.word	0x0800ab6d
 800abc0:	0800ab6d 	.word	0x0800ab6d
 800abc4:	0800ad1f 	.word	0x0800ad1f
 800abc8:	0800ab6d 	.word	0x0800ab6d
 800abcc:	0800ac21 	.word	0x0800ac21
 800abd0:	0800ab6d 	.word	0x0800ab6d
 800abd4:	0800ab6d 	.word	0x0800ab6d
 800abd8:	0800ace7 	.word	0x0800ace7
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	1d1a      	adds	r2, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	602a      	str	r2, [r5, #0]
 800abe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abec:	2301      	movs	r3, #1
 800abee:	e0a3      	b.n	800ad38 <_printf_i+0x1f4>
 800abf0:	6820      	ldr	r0, [r4, #0]
 800abf2:	6829      	ldr	r1, [r5, #0]
 800abf4:	0606      	lsls	r6, r0, #24
 800abf6:	f101 0304 	add.w	r3, r1, #4
 800abfa:	d50a      	bpl.n	800ac12 <_printf_i+0xce>
 800abfc:	680e      	ldr	r6, [r1, #0]
 800abfe:	602b      	str	r3, [r5, #0]
 800ac00:	2e00      	cmp	r6, #0
 800ac02:	da03      	bge.n	800ac0c <_printf_i+0xc8>
 800ac04:	232d      	movs	r3, #45	; 0x2d
 800ac06:	4276      	negs	r6, r6
 800ac08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac0c:	485e      	ldr	r0, [pc, #376]	; (800ad88 <_printf_i+0x244>)
 800ac0e:	230a      	movs	r3, #10
 800ac10:	e019      	b.n	800ac46 <_printf_i+0x102>
 800ac12:	680e      	ldr	r6, [r1, #0]
 800ac14:	602b      	str	r3, [r5, #0]
 800ac16:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac1a:	bf18      	it	ne
 800ac1c:	b236      	sxthne	r6, r6
 800ac1e:	e7ef      	b.n	800ac00 <_printf_i+0xbc>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	6820      	ldr	r0, [r4, #0]
 800ac24:	1d19      	adds	r1, r3, #4
 800ac26:	6029      	str	r1, [r5, #0]
 800ac28:	0601      	lsls	r1, r0, #24
 800ac2a:	d501      	bpl.n	800ac30 <_printf_i+0xec>
 800ac2c:	681e      	ldr	r6, [r3, #0]
 800ac2e:	e002      	b.n	800ac36 <_printf_i+0xf2>
 800ac30:	0646      	lsls	r6, r0, #25
 800ac32:	d5fb      	bpl.n	800ac2c <_printf_i+0xe8>
 800ac34:	881e      	ldrh	r6, [r3, #0]
 800ac36:	4854      	ldr	r0, [pc, #336]	; (800ad88 <_printf_i+0x244>)
 800ac38:	2f6f      	cmp	r7, #111	; 0x6f
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2308      	moveq	r3, #8
 800ac3e:	230a      	movne	r3, #10
 800ac40:	2100      	movs	r1, #0
 800ac42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac46:	6865      	ldr	r5, [r4, #4]
 800ac48:	60a5      	str	r5, [r4, #8]
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	bfa2      	ittt	ge
 800ac4e:	6821      	ldrge	r1, [r4, #0]
 800ac50:	f021 0104 	bicge.w	r1, r1, #4
 800ac54:	6021      	strge	r1, [r4, #0]
 800ac56:	b90e      	cbnz	r6, 800ac5c <_printf_i+0x118>
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	d04d      	beq.n	800acf8 <_printf_i+0x1b4>
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac62:	fb03 6711 	mls	r7, r3, r1, r6
 800ac66:	5dc7      	ldrb	r7, [r0, r7]
 800ac68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac6c:	4637      	mov	r7, r6
 800ac6e:	42bb      	cmp	r3, r7
 800ac70:	460e      	mov	r6, r1
 800ac72:	d9f4      	bls.n	800ac5e <_printf_i+0x11a>
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d10b      	bne.n	800ac90 <_printf_i+0x14c>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	07de      	lsls	r6, r3, #31
 800ac7c:	d508      	bpl.n	800ac90 <_printf_i+0x14c>
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	6861      	ldr	r1, [r4, #4]
 800ac82:	4299      	cmp	r1, r3
 800ac84:	bfde      	ittt	le
 800ac86:	2330      	movle	r3, #48	; 0x30
 800ac88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac90:	1b52      	subs	r2, r2, r5
 800ac92:	6122      	str	r2, [r4, #16]
 800ac94:	f8cd a000 	str.w	sl, [sp]
 800ac98:	464b      	mov	r3, r9
 800ac9a:	aa03      	add	r2, sp, #12
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4640      	mov	r0, r8
 800aca0:	f7ff fee2 	bl	800aa68 <_printf_common>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d14c      	bne.n	800ad42 <_printf_i+0x1fe>
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	b004      	add	sp, #16
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	4835      	ldr	r0, [pc, #212]	; (800ad88 <_printf_i+0x244>)
 800acb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acb8:	6829      	ldr	r1, [r5, #0]
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	f851 6b04 	ldr.w	r6, [r1], #4
 800acc0:	6029      	str	r1, [r5, #0]
 800acc2:	061d      	lsls	r5, r3, #24
 800acc4:	d514      	bpl.n	800acf0 <_printf_i+0x1ac>
 800acc6:	07df      	lsls	r7, r3, #31
 800acc8:	bf44      	itt	mi
 800acca:	f043 0320 	orrmi.w	r3, r3, #32
 800acce:	6023      	strmi	r3, [r4, #0]
 800acd0:	b91e      	cbnz	r6, 800acda <_printf_i+0x196>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	f023 0320 	bic.w	r3, r3, #32
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	2310      	movs	r3, #16
 800acdc:	e7b0      	b.n	800ac40 <_printf_i+0xfc>
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	f043 0320 	orr.w	r3, r3, #32
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	2378      	movs	r3, #120	; 0x78
 800ace8:	4828      	ldr	r0, [pc, #160]	; (800ad8c <_printf_i+0x248>)
 800acea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acee:	e7e3      	b.n	800acb8 <_printf_i+0x174>
 800acf0:	0659      	lsls	r1, r3, #25
 800acf2:	bf48      	it	mi
 800acf4:	b2b6      	uxthmi	r6, r6
 800acf6:	e7e6      	b.n	800acc6 <_printf_i+0x182>
 800acf8:	4615      	mov	r5, r2
 800acfa:	e7bb      	b.n	800ac74 <_printf_i+0x130>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	6826      	ldr	r6, [r4, #0]
 800ad00:	6961      	ldr	r1, [r4, #20]
 800ad02:	1d18      	adds	r0, r3, #4
 800ad04:	6028      	str	r0, [r5, #0]
 800ad06:	0635      	lsls	r5, r6, #24
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	d501      	bpl.n	800ad10 <_printf_i+0x1cc>
 800ad0c:	6019      	str	r1, [r3, #0]
 800ad0e:	e002      	b.n	800ad16 <_printf_i+0x1d2>
 800ad10:	0670      	lsls	r0, r6, #25
 800ad12:	d5fb      	bpl.n	800ad0c <_printf_i+0x1c8>
 800ad14:	8019      	strh	r1, [r3, #0]
 800ad16:	2300      	movs	r3, #0
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	4615      	mov	r5, r2
 800ad1c:	e7ba      	b.n	800ac94 <_printf_i+0x150>
 800ad1e:	682b      	ldr	r3, [r5, #0]
 800ad20:	1d1a      	adds	r2, r3, #4
 800ad22:	602a      	str	r2, [r5, #0]
 800ad24:	681d      	ldr	r5, [r3, #0]
 800ad26:	6862      	ldr	r2, [r4, #4]
 800ad28:	2100      	movs	r1, #0
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f7f5 fa70 	bl	8000210 <memchr>
 800ad30:	b108      	cbz	r0, 800ad36 <_printf_i+0x1f2>
 800ad32:	1b40      	subs	r0, r0, r5
 800ad34:	6060      	str	r0, [r4, #4]
 800ad36:	6863      	ldr	r3, [r4, #4]
 800ad38:	6123      	str	r3, [r4, #16]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad40:	e7a8      	b.n	800ac94 <_printf_i+0x150>
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	462a      	mov	r2, r5
 800ad46:	4649      	mov	r1, r9
 800ad48:	4640      	mov	r0, r8
 800ad4a:	47d0      	blx	sl
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d0ab      	beq.n	800aca8 <_printf_i+0x164>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	079b      	lsls	r3, r3, #30
 800ad54:	d413      	bmi.n	800ad7e <_printf_i+0x23a>
 800ad56:	68e0      	ldr	r0, [r4, #12]
 800ad58:	9b03      	ldr	r3, [sp, #12]
 800ad5a:	4298      	cmp	r0, r3
 800ad5c:	bfb8      	it	lt
 800ad5e:	4618      	movlt	r0, r3
 800ad60:	e7a4      	b.n	800acac <_printf_i+0x168>
 800ad62:	2301      	movs	r3, #1
 800ad64:	4632      	mov	r2, r6
 800ad66:	4649      	mov	r1, r9
 800ad68:	4640      	mov	r0, r8
 800ad6a:	47d0      	blx	sl
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	d09b      	beq.n	800aca8 <_printf_i+0x164>
 800ad70:	3501      	adds	r5, #1
 800ad72:	68e3      	ldr	r3, [r4, #12]
 800ad74:	9903      	ldr	r1, [sp, #12]
 800ad76:	1a5b      	subs	r3, r3, r1
 800ad78:	42ab      	cmp	r3, r5
 800ad7a:	dcf2      	bgt.n	800ad62 <_printf_i+0x21e>
 800ad7c:	e7eb      	b.n	800ad56 <_printf_i+0x212>
 800ad7e:	2500      	movs	r5, #0
 800ad80:	f104 0619 	add.w	r6, r4, #25
 800ad84:	e7f5      	b.n	800ad72 <_printf_i+0x22e>
 800ad86:	bf00      	nop
 800ad88:	0800d38e 	.word	0x0800d38e
 800ad8c:	0800d39f 	.word	0x0800d39f

0800ad90 <siprintf>:
 800ad90:	b40e      	push	{r1, r2, r3}
 800ad92:	b500      	push	{lr}
 800ad94:	b09c      	sub	sp, #112	; 0x70
 800ad96:	ab1d      	add	r3, sp, #116	; 0x74
 800ad98:	9002      	str	r0, [sp, #8]
 800ad9a:	9006      	str	r0, [sp, #24]
 800ad9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ada0:	4809      	ldr	r0, [pc, #36]	; (800adc8 <siprintf+0x38>)
 800ada2:	9107      	str	r1, [sp, #28]
 800ada4:	9104      	str	r1, [sp, #16]
 800ada6:	4909      	ldr	r1, [pc, #36]	; (800adcc <siprintf+0x3c>)
 800ada8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adac:	9105      	str	r1, [sp, #20]
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	a902      	add	r1, sp, #8
 800adb4:	f001 fb68 	bl	800c488 <_svfiprintf_r>
 800adb8:	9b02      	ldr	r3, [sp, #8]
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	b01c      	add	sp, #112	; 0x70
 800adc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc4:	b003      	add	sp, #12
 800adc6:	4770      	bx	lr
 800adc8:	20000010 	.word	0x20000010
 800adcc:	ffff0208 	.word	0xffff0208

0800add0 <quorem>:
 800add0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	6903      	ldr	r3, [r0, #16]
 800add6:	690c      	ldr	r4, [r1, #16]
 800add8:	42a3      	cmp	r3, r4
 800adda:	4607      	mov	r7, r0
 800addc:	f2c0 8081 	blt.w	800aee2 <quorem+0x112>
 800ade0:	3c01      	subs	r4, #1
 800ade2:	f101 0814 	add.w	r8, r1, #20
 800ade6:	f100 0514 	add.w	r5, r0, #20
 800adea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adf8:	3301      	adds	r3, #1
 800adfa:	429a      	cmp	r2, r3
 800adfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae04:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae08:	d331      	bcc.n	800ae6e <quorem+0x9e>
 800ae0a:	f04f 0e00 	mov.w	lr, #0
 800ae0e:	4640      	mov	r0, r8
 800ae10:	46ac      	mov	ip, r5
 800ae12:	46f2      	mov	sl, lr
 800ae14:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae18:	b293      	uxth	r3, r2
 800ae1a:	fb06 e303 	mla	r3, r6, r3, lr
 800ae1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	ebaa 0303 	sub.w	r3, sl, r3
 800ae28:	f8dc a000 	ldr.w	sl, [ip]
 800ae2c:	0c12      	lsrs	r2, r2, #16
 800ae2e:	fa13 f38a 	uxtah	r3, r3, sl
 800ae32:	fb06 e202 	mla	r2, r6, r2, lr
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	9b00      	ldr	r3, [sp, #0]
 800ae3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae3e:	b292      	uxth	r2, r2
 800ae40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae48:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae4c:	4581      	cmp	r9, r0
 800ae4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae52:	f84c 3b04 	str.w	r3, [ip], #4
 800ae56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae5a:	d2db      	bcs.n	800ae14 <quorem+0x44>
 800ae5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae60:	b92b      	cbnz	r3, 800ae6e <quorem+0x9e>
 800ae62:	9b01      	ldr	r3, [sp, #4]
 800ae64:	3b04      	subs	r3, #4
 800ae66:	429d      	cmp	r5, r3
 800ae68:	461a      	mov	r2, r3
 800ae6a:	d32e      	bcc.n	800aeca <quorem+0xfa>
 800ae6c:	613c      	str	r4, [r7, #16]
 800ae6e:	4638      	mov	r0, r7
 800ae70:	f001 f8b6 	bl	800bfe0 <__mcmp>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	db24      	blt.n	800aec2 <quorem+0xf2>
 800ae78:	3601      	adds	r6, #1
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f04f 0c00 	mov.w	ip, #0
 800ae80:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae84:	f8d0 e000 	ldr.w	lr, [r0]
 800ae88:	b293      	uxth	r3, r2
 800ae8a:	ebac 0303 	sub.w	r3, ip, r3
 800ae8e:	0c12      	lsrs	r2, r2, #16
 800ae90:	fa13 f38e 	uxtah	r3, r3, lr
 800ae94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aea2:	45c1      	cmp	r9, r8
 800aea4:	f840 3b04 	str.w	r3, [r0], #4
 800aea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aeac:	d2e8      	bcs.n	800ae80 <quorem+0xb0>
 800aeae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeb6:	b922      	cbnz	r2, 800aec2 <quorem+0xf2>
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	429d      	cmp	r5, r3
 800aebc:	461a      	mov	r2, r3
 800aebe:	d30a      	bcc.n	800aed6 <quorem+0x106>
 800aec0:	613c      	str	r4, [r7, #16]
 800aec2:	4630      	mov	r0, r6
 800aec4:	b003      	add	sp, #12
 800aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeca:	6812      	ldr	r2, [r2, #0]
 800aecc:	3b04      	subs	r3, #4
 800aece:	2a00      	cmp	r2, #0
 800aed0:	d1cc      	bne.n	800ae6c <quorem+0x9c>
 800aed2:	3c01      	subs	r4, #1
 800aed4:	e7c7      	b.n	800ae66 <quorem+0x96>
 800aed6:	6812      	ldr	r2, [r2, #0]
 800aed8:	3b04      	subs	r3, #4
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	d1f0      	bne.n	800aec0 <quorem+0xf0>
 800aede:	3c01      	subs	r4, #1
 800aee0:	e7eb      	b.n	800aeba <quorem+0xea>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e7ee      	b.n	800aec4 <quorem+0xf4>
	...

0800aee8 <_dtoa_r>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	ed2d 8b04 	vpush	{d8-d9}
 800aef0:	ec57 6b10 	vmov	r6, r7, d0
 800aef4:	b093      	sub	sp, #76	; 0x4c
 800aef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aef8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aefc:	9106      	str	r1, [sp, #24]
 800aefe:	ee10 aa10 	vmov	sl, s0
 800af02:	4604      	mov	r4, r0
 800af04:	9209      	str	r2, [sp, #36]	; 0x24
 800af06:	930c      	str	r3, [sp, #48]	; 0x30
 800af08:	46bb      	mov	fp, r7
 800af0a:	b975      	cbnz	r5, 800af2a <_dtoa_r+0x42>
 800af0c:	2010      	movs	r0, #16
 800af0e:	f000 fddd 	bl	800bacc <malloc>
 800af12:	4602      	mov	r2, r0
 800af14:	6260      	str	r0, [r4, #36]	; 0x24
 800af16:	b920      	cbnz	r0, 800af22 <_dtoa_r+0x3a>
 800af18:	4ba7      	ldr	r3, [pc, #668]	; (800b1b8 <_dtoa_r+0x2d0>)
 800af1a:	21ea      	movs	r1, #234	; 0xea
 800af1c:	48a7      	ldr	r0, [pc, #668]	; (800b1bc <_dtoa_r+0x2d4>)
 800af1e:	f001 fbc3 	bl	800c6a8 <__assert_func>
 800af22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af26:	6005      	str	r5, [r0, #0]
 800af28:	60c5      	str	r5, [r0, #12]
 800af2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af2c:	6819      	ldr	r1, [r3, #0]
 800af2e:	b151      	cbz	r1, 800af46 <_dtoa_r+0x5e>
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	604a      	str	r2, [r1, #4]
 800af34:	2301      	movs	r3, #1
 800af36:	4093      	lsls	r3, r2
 800af38:	608b      	str	r3, [r1, #8]
 800af3a:	4620      	mov	r0, r4
 800af3c:	f000 fe0e 	bl	800bb5c <_Bfree>
 800af40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
 800af46:	1e3b      	subs	r3, r7, #0
 800af48:	bfaa      	itet	ge
 800af4a:	2300      	movge	r3, #0
 800af4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af50:	f8c8 3000 	strge.w	r3, [r8]
 800af54:	4b9a      	ldr	r3, [pc, #616]	; (800b1c0 <_dtoa_r+0x2d8>)
 800af56:	bfbc      	itt	lt
 800af58:	2201      	movlt	r2, #1
 800af5a:	f8c8 2000 	strlt.w	r2, [r8]
 800af5e:	ea33 030b 	bics.w	r3, r3, fp
 800af62:	d11b      	bne.n	800af9c <_dtoa_r+0xb4>
 800af64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af66:	f242 730f 	movw	r3, #9999	; 0x270f
 800af6a:	6013      	str	r3, [r2, #0]
 800af6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af70:	4333      	orrs	r3, r6
 800af72:	f000 8592 	beq.w	800ba9a <_dtoa_r+0xbb2>
 800af76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af78:	b963      	cbnz	r3, 800af94 <_dtoa_r+0xac>
 800af7a:	4b92      	ldr	r3, [pc, #584]	; (800b1c4 <_dtoa_r+0x2dc>)
 800af7c:	e022      	b.n	800afc4 <_dtoa_r+0xdc>
 800af7e:	4b92      	ldr	r3, [pc, #584]	; (800b1c8 <_dtoa_r+0x2e0>)
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	3308      	adds	r3, #8
 800af84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	9801      	ldr	r0, [sp, #4]
 800af8a:	b013      	add	sp, #76	; 0x4c
 800af8c:	ecbd 8b04 	vpop	{d8-d9}
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af94:	4b8b      	ldr	r3, [pc, #556]	; (800b1c4 <_dtoa_r+0x2dc>)
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	3303      	adds	r3, #3
 800af9a:	e7f3      	b.n	800af84 <_dtoa_r+0x9c>
 800af9c:	2200      	movs	r2, #0
 800af9e:	2300      	movs	r3, #0
 800afa0:	4650      	mov	r0, sl
 800afa2:	4659      	mov	r1, fp
 800afa4:	f7f5 fda8 	bl	8000af8 <__aeabi_dcmpeq>
 800afa8:	ec4b ab19 	vmov	d9, sl, fp
 800afac:	4680      	mov	r8, r0
 800afae:	b158      	cbz	r0, 800afc8 <_dtoa_r+0xe0>
 800afb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afb2:	2301      	movs	r3, #1
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 856b 	beq.w	800ba94 <_dtoa_r+0xbac>
 800afbe:	4883      	ldr	r0, [pc, #524]	; (800b1cc <_dtoa_r+0x2e4>)
 800afc0:	6018      	str	r0, [r3, #0]
 800afc2:	1e43      	subs	r3, r0, #1
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	e7df      	b.n	800af88 <_dtoa_r+0xa0>
 800afc8:	ec4b ab10 	vmov	d0, sl, fp
 800afcc:	aa10      	add	r2, sp, #64	; 0x40
 800afce:	a911      	add	r1, sp, #68	; 0x44
 800afd0:	4620      	mov	r0, r4
 800afd2:	f001 f8ab 	bl	800c12c <__d2b>
 800afd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800afda:	ee08 0a10 	vmov	s16, r0
 800afde:	2d00      	cmp	r5, #0
 800afe0:	f000 8084 	beq.w	800b0ec <_dtoa_r+0x204>
 800afe4:	ee19 3a90 	vmov	r3, s19
 800afe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aff0:	4656      	mov	r6, sl
 800aff2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800affa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800affe:	4b74      	ldr	r3, [pc, #464]	; (800b1d0 <_dtoa_r+0x2e8>)
 800b000:	2200      	movs	r2, #0
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 f957 	bl	80002b8 <__aeabi_dsub>
 800b00a:	a365      	add	r3, pc, #404	; (adr r3, 800b1a0 <_dtoa_r+0x2b8>)
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f7f5 fb0a 	bl	8000628 <__aeabi_dmul>
 800b014:	a364      	add	r3, pc, #400	; (adr r3, 800b1a8 <_dtoa_r+0x2c0>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 f94f 	bl	80002bc <__adddf3>
 800b01e:	4606      	mov	r6, r0
 800b020:	4628      	mov	r0, r5
 800b022:	460f      	mov	r7, r1
 800b024:	f7f5 fa96 	bl	8000554 <__aeabi_i2d>
 800b028:	a361      	add	r3, pc, #388	; (adr r3, 800b1b0 <_dtoa_r+0x2c8>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 fafb 	bl	8000628 <__aeabi_dmul>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4630      	mov	r0, r6
 800b038:	4639      	mov	r1, r7
 800b03a:	f7f5 f93f 	bl	80002bc <__adddf3>
 800b03e:	4606      	mov	r6, r0
 800b040:	460f      	mov	r7, r1
 800b042:	f7f5 fda1 	bl	8000b88 <__aeabi_d2iz>
 800b046:	2200      	movs	r2, #0
 800b048:	9000      	str	r0, [sp, #0]
 800b04a:	2300      	movs	r3, #0
 800b04c:	4630      	mov	r0, r6
 800b04e:	4639      	mov	r1, r7
 800b050:	f7f5 fd5c 	bl	8000b0c <__aeabi_dcmplt>
 800b054:	b150      	cbz	r0, 800b06c <_dtoa_r+0x184>
 800b056:	9800      	ldr	r0, [sp, #0]
 800b058:	f7f5 fa7c 	bl	8000554 <__aeabi_i2d>
 800b05c:	4632      	mov	r2, r6
 800b05e:	463b      	mov	r3, r7
 800b060:	f7f5 fd4a 	bl	8000af8 <__aeabi_dcmpeq>
 800b064:	b910      	cbnz	r0, 800b06c <_dtoa_r+0x184>
 800b066:	9b00      	ldr	r3, [sp, #0]
 800b068:	3b01      	subs	r3, #1
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	9b00      	ldr	r3, [sp, #0]
 800b06e:	2b16      	cmp	r3, #22
 800b070:	d85a      	bhi.n	800b128 <_dtoa_r+0x240>
 800b072:	9a00      	ldr	r2, [sp, #0]
 800b074:	4b57      	ldr	r3, [pc, #348]	; (800b1d4 <_dtoa_r+0x2ec>)
 800b076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	ec51 0b19 	vmov	r0, r1, d9
 800b082:	f7f5 fd43 	bl	8000b0c <__aeabi_dcmplt>
 800b086:	2800      	cmp	r0, #0
 800b088:	d050      	beq.n	800b12c <_dtoa_r+0x244>
 800b08a:	9b00      	ldr	r3, [sp, #0]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	2300      	movs	r3, #0
 800b092:	930b      	str	r3, [sp, #44]	; 0x2c
 800b094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b096:	1b5d      	subs	r5, r3, r5
 800b098:	1e6b      	subs	r3, r5, #1
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	bf45      	ittet	mi
 800b09e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b0a2:	9304      	strmi	r3, [sp, #16]
 800b0a4:	2300      	movpl	r3, #0
 800b0a6:	2300      	movmi	r3, #0
 800b0a8:	bf4c      	ite	mi
 800b0aa:	9305      	strmi	r3, [sp, #20]
 800b0ac:	9304      	strpl	r3, [sp, #16]
 800b0ae:	9b00      	ldr	r3, [sp, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	db3d      	blt.n	800b130 <_dtoa_r+0x248>
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	9a00      	ldr	r2, [sp, #0]
 800b0b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b0ba:	4413      	add	r3, r2
 800b0bc:	9305      	str	r3, [sp, #20]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	9307      	str	r3, [sp, #28]
 800b0c2:	9b06      	ldr	r3, [sp, #24]
 800b0c4:	2b09      	cmp	r3, #9
 800b0c6:	f200 8089 	bhi.w	800b1dc <_dtoa_r+0x2f4>
 800b0ca:	2b05      	cmp	r3, #5
 800b0cc:	bfc4      	itt	gt
 800b0ce:	3b04      	subgt	r3, #4
 800b0d0:	9306      	strgt	r3, [sp, #24]
 800b0d2:	9b06      	ldr	r3, [sp, #24]
 800b0d4:	f1a3 0302 	sub.w	r3, r3, #2
 800b0d8:	bfcc      	ite	gt
 800b0da:	2500      	movgt	r5, #0
 800b0dc:	2501      	movle	r5, #1
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	f200 8087 	bhi.w	800b1f2 <_dtoa_r+0x30a>
 800b0e4:	e8df f003 	tbb	[pc, r3]
 800b0e8:	59383a2d 	.word	0x59383a2d
 800b0ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0f0:	441d      	add	r5, r3
 800b0f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0f6:	2b20      	cmp	r3, #32
 800b0f8:	bfc1      	itttt	gt
 800b0fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b102:	fa0b f303 	lslgt.w	r3, fp, r3
 800b106:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b10a:	bfda      	itte	le
 800b10c:	f1c3 0320 	rsble	r3, r3, #32
 800b110:	fa06 f003 	lslle.w	r0, r6, r3
 800b114:	4318      	orrgt	r0, r3
 800b116:	f7f5 fa0d 	bl	8000534 <__aeabi_ui2d>
 800b11a:	2301      	movs	r3, #1
 800b11c:	4606      	mov	r6, r0
 800b11e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b122:	3d01      	subs	r5, #1
 800b124:	930e      	str	r3, [sp, #56]	; 0x38
 800b126:	e76a      	b.n	800affe <_dtoa_r+0x116>
 800b128:	2301      	movs	r3, #1
 800b12a:	e7b2      	b.n	800b092 <_dtoa_r+0x1aa>
 800b12c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b12e:	e7b1      	b.n	800b094 <_dtoa_r+0x1ac>
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	9a00      	ldr	r2, [sp, #0]
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	4253      	negs	r3, r2
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	2300      	movs	r3, #0
 800b13e:	930a      	str	r3, [sp, #40]	; 0x28
 800b140:	e7bf      	b.n	800b0c2 <_dtoa_r+0x1da>
 800b142:	2300      	movs	r3, #0
 800b144:	9308      	str	r3, [sp, #32]
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	2b00      	cmp	r3, #0
 800b14a:	dc55      	bgt.n	800b1f8 <_dtoa_r+0x310>
 800b14c:	2301      	movs	r3, #1
 800b14e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b152:	461a      	mov	r2, r3
 800b154:	9209      	str	r2, [sp, #36]	; 0x24
 800b156:	e00c      	b.n	800b172 <_dtoa_r+0x28a>
 800b158:	2301      	movs	r3, #1
 800b15a:	e7f3      	b.n	800b144 <_dtoa_r+0x25c>
 800b15c:	2300      	movs	r3, #0
 800b15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b160:	9308      	str	r3, [sp, #32]
 800b162:	9b00      	ldr	r3, [sp, #0]
 800b164:	4413      	add	r3, r2
 800b166:	9302      	str	r3, [sp, #8]
 800b168:	3301      	adds	r3, #1
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	9303      	str	r3, [sp, #12]
 800b16e:	bfb8      	it	lt
 800b170:	2301      	movlt	r3, #1
 800b172:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b174:	2200      	movs	r2, #0
 800b176:	6042      	str	r2, [r0, #4]
 800b178:	2204      	movs	r2, #4
 800b17a:	f102 0614 	add.w	r6, r2, #20
 800b17e:	429e      	cmp	r6, r3
 800b180:	6841      	ldr	r1, [r0, #4]
 800b182:	d93d      	bls.n	800b200 <_dtoa_r+0x318>
 800b184:	4620      	mov	r0, r4
 800b186:	f000 fca9 	bl	800badc <_Balloc>
 800b18a:	9001      	str	r0, [sp, #4]
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d13b      	bne.n	800b208 <_dtoa_r+0x320>
 800b190:	4b11      	ldr	r3, [pc, #68]	; (800b1d8 <_dtoa_r+0x2f0>)
 800b192:	4602      	mov	r2, r0
 800b194:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b198:	e6c0      	b.n	800af1c <_dtoa_r+0x34>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e7df      	b.n	800b15e <_dtoa_r+0x276>
 800b19e:	bf00      	nop
 800b1a0:	636f4361 	.word	0x636f4361
 800b1a4:	3fd287a7 	.word	0x3fd287a7
 800b1a8:	8b60c8b3 	.word	0x8b60c8b3
 800b1ac:	3fc68a28 	.word	0x3fc68a28
 800b1b0:	509f79fb 	.word	0x509f79fb
 800b1b4:	3fd34413 	.word	0x3fd34413
 800b1b8:	0800d3bd 	.word	0x0800d3bd
 800b1bc:	0800d3d4 	.word	0x0800d3d4
 800b1c0:	7ff00000 	.word	0x7ff00000
 800b1c4:	0800d3b9 	.word	0x0800d3b9
 800b1c8:	0800d3b0 	.word	0x0800d3b0
 800b1cc:	0800d38d 	.word	0x0800d38d
 800b1d0:	3ff80000 	.word	0x3ff80000
 800b1d4:	0800d4c8 	.word	0x0800d4c8
 800b1d8:	0800d42f 	.word	0x0800d42f
 800b1dc:	2501      	movs	r5, #1
 800b1de:	2300      	movs	r3, #0
 800b1e0:	9306      	str	r3, [sp, #24]
 800b1e2:	9508      	str	r5, [sp, #32]
 800b1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2312      	movs	r3, #18
 800b1f0:	e7b0      	b.n	800b154 <_dtoa_r+0x26c>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	9308      	str	r3, [sp, #32]
 800b1f6:	e7f5      	b.n	800b1e4 <_dtoa_r+0x2fc>
 800b1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1fe:	e7b8      	b.n	800b172 <_dtoa_r+0x28a>
 800b200:	3101      	adds	r1, #1
 800b202:	6041      	str	r1, [r0, #4]
 800b204:	0052      	lsls	r2, r2, #1
 800b206:	e7b8      	b.n	800b17a <_dtoa_r+0x292>
 800b208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b20a:	9a01      	ldr	r2, [sp, #4]
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	2b0e      	cmp	r3, #14
 800b212:	f200 809d 	bhi.w	800b350 <_dtoa_r+0x468>
 800b216:	2d00      	cmp	r5, #0
 800b218:	f000 809a 	beq.w	800b350 <_dtoa_r+0x468>
 800b21c:	9b00      	ldr	r3, [sp, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dd32      	ble.n	800b288 <_dtoa_r+0x3a0>
 800b222:	4ab7      	ldr	r2, [pc, #732]	; (800b500 <_dtoa_r+0x618>)
 800b224:	f003 030f 	and.w	r3, r3, #15
 800b228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b22c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	05d8      	lsls	r0, r3, #23
 800b234:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b238:	d516      	bpl.n	800b268 <_dtoa_r+0x380>
 800b23a:	4bb2      	ldr	r3, [pc, #712]	; (800b504 <_dtoa_r+0x61c>)
 800b23c:	ec51 0b19 	vmov	r0, r1, d9
 800b240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b244:	f7f5 fb1a 	bl	800087c <__aeabi_ddiv>
 800b248:	f007 070f 	and.w	r7, r7, #15
 800b24c:	4682      	mov	sl, r0
 800b24e:	468b      	mov	fp, r1
 800b250:	2503      	movs	r5, #3
 800b252:	4eac      	ldr	r6, [pc, #688]	; (800b504 <_dtoa_r+0x61c>)
 800b254:	b957      	cbnz	r7, 800b26c <_dtoa_r+0x384>
 800b256:	4642      	mov	r2, r8
 800b258:	464b      	mov	r3, r9
 800b25a:	4650      	mov	r0, sl
 800b25c:	4659      	mov	r1, fp
 800b25e:	f7f5 fb0d 	bl	800087c <__aeabi_ddiv>
 800b262:	4682      	mov	sl, r0
 800b264:	468b      	mov	fp, r1
 800b266:	e028      	b.n	800b2ba <_dtoa_r+0x3d2>
 800b268:	2502      	movs	r5, #2
 800b26a:	e7f2      	b.n	800b252 <_dtoa_r+0x36a>
 800b26c:	07f9      	lsls	r1, r7, #31
 800b26e:	d508      	bpl.n	800b282 <_dtoa_r+0x39a>
 800b270:	4640      	mov	r0, r8
 800b272:	4649      	mov	r1, r9
 800b274:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b278:	f7f5 f9d6 	bl	8000628 <__aeabi_dmul>
 800b27c:	3501      	adds	r5, #1
 800b27e:	4680      	mov	r8, r0
 800b280:	4689      	mov	r9, r1
 800b282:	107f      	asrs	r7, r7, #1
 800b284:	3608      	adds	r6, #8
 800b286:	e7e5      	b.n	800b254 <_dtoa_r+0x36c>
 800b288:	f000 809b 	beq.w	800b3c2 <_dtoa_r+0x4da>
 800b28c:	9b00      	ldr	r3, [sp, #0]
 800b28e:	4f9d      	ldr	r7, [pc, #628]	; (800b504 <_dtoa_r+0x61c>)
 800b290:	425e      	negs	r6, r3
 800b292:	4b9b      	ldr	r3, [pc, #620]	; (800b500 <_dtoa_r+0x618>)
 800b294:	f006 020f 	and.w	r2, r6, #15
 800b298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	ec51 0b19 	vmov	r0, r1, d9
 800b2a4:	f7f5 f9c0 	bl	8000628 <__aeabi_dmul>
 800b2a8:	1136      	asrs	r6, r6, #4
 800b2aa:	4682      	mov	sl, r0
 800b2ac:	468b      	mov	fp, r1
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	2502      	movs	r5, #2
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	d17a      	bne.n	800b3ac <_dtoa_r+0x4c4>
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1d3      	bne.n	800b262 <_dtoa_r+0x37a>
 800b2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 8082 	beq.w	800b3c6 <_dtoa_r+0x4de>
 800b2c2:	4b91      	ldr	r3, [pc, #580]	; (800b508 <_dtoa_r+0x620>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	4650      	mov	r0, sl
 800b2c8:	4659      	mov	r1, fp
 800b2ca:	f7f5 fc1f 	bl	8000b0c <__aeabi_dcmplt>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d079      	beq.n	800b3c6 <_dtoa_r+0x4de>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d076      	beq.n	800b3c6 <_dtoa_r+0x4de>
 800b2d8:	9b02      	ldr	r3, [sp, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dd36      	ble.n	800b34c <_dtoa_r+0x464>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	4659      	mov	r1, fp
 800b2e4:	1e5f      	subs	r7, r3, #1
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	4b88      	ldr	r3, [pc, #544]	; (800b50c <_dtoa_r+0x624>)
 800b2ea:	f7f5 f99d 	bl	8000628 <__aeabi_dmul>
 800b2ee:	9e02      	ldr	r6, [sp, #8]
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	468b      	mov	fp, r1
 800b2f4:	3501      	adds	r5, #1
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f7f5 f92c 	bl	8000554 <__aeabi_i2d>
 800b2fc:	4652      	mov	r2, sl
 800b2fe:	465b      	mov	r3, fp
 800b300:	f7f5 f992 	bl	8000628 <__aeabi_dmul>
 800b304:	4b82      	ldr	r3, [pc, #520]	; (800b510 <_dtoa_r+0x628>)
 800b306:	2200      	movs	r2, #0
 800b308:	f7f4 ffd8 	bl	80002bc <__adddf3>
 800b30c:	46d0      	mov	r8, sl
 800b30e:	46d9      	mov	r9, fp
 800b310:	4682      	mov	sl, r0
 800b312:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b316:	2e00      	cmp	r6, #0
 800b318:	d158      	bne.n	800b3cc <_dtoa_r+0x4e4>
 800b31a:	4b7e      	ldr	r3, [pc, #504]	; (800b514 <_dtoa_r+0x62c>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	4640      	mov	r0, r8
 800b320:	4649      	mov	r1, r9
 800b322:	f7f4 ffc9 	bl	80002b8 <__aeabi_dsub>
 800b326:	4652      	mov	r2, sl
 800b328:	465b      	mov	r3, fp
 800b32a:	4680      	mov	r8, r0
 800b32c:	4689      	mov	r9, r1
 800b32e:	f7f5 fc0b 	bl	8000b48 <__aeabi_dcmpgt>
 800b332:	2800      	cmp	r0, #0
 800b334:	f040 8295 	bne.w	800b862 <_dtoa_r+0x97a>
 800b338:	4652      	mov	r2, sl
 800b33a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b33e:	4640      	mov	r0, r8
 800b340:	4649      	mov	r1, r9
 800b342:	f7f5 fbe3 	bl	8000b0c <__aeabi_dcmplt>
 800b346:	2800      	cmp	r0, #0
 800b348:	f040 8289 	bne.w	800b85e <_dtoa_r+0x976>
 800b34c:	ec5b ab19 	vmov	sl, fp, d9
 800b350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b352:	2b00      	cmp	r3, #0
 800b354:	f2c0 8148 	blt.w	800b5e8 <_dtoa_r+0x700>
 800b358:	9a00      	ldr	r2, [sp, #0]
 800b35a:	2a0e      	cmp	r2, #14
 800b35c:	f300 8144 	bgt.w	800b5e8 <_dtoa_r+0x700>
 800b360:	4b67      	ldr	r3, [pc, #412]	; (800b500 <_dtoa_r+0x618>)
 800b362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b366:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f280 80d5 	bge.w	800b51c <_dtoa_r+0x634>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f300 80d1 	bgt.w	800b51c <_dtoa_r+0x634>
 800b37a:	f040 826f 	bne.w	800b85c <_dtoa_r+0x974>
 800b37e:	4b65      	ldr	r3, [pc, #404]	; (800b514 <_dtoa_r+0x62c>)
 800b380:	2200      	movs	r2, #0
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	f7f5 f94f 	bl	8000628 <__aeabi_dmul>
 800b38a:	4652      	mov	r2, sl
 800b38c:	465b      	mov	r3, fp
 800b38e:	f7f5 fbd1 	bl	8000b34 <__aeabi_dcmpge>
 800b392:	9e03      	ldr	r6, [sp, #12]
 800b394:	4637      	mov	r7, r6
 800b396:	2800      	cmp	r0, #0
 800b398:	f040 8245 	bne.w	800b826 <_dtoa_r+0x93e>
 800b39c:	9d01      	ldr	r5, [sp, #4]
 800b39e:	2331      	movs	r3, #49	; 0x31
 800b3a0:	f805 3b01 	strb.w	r3, [r5], #1
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	e240      	b.n	800b82e <_dtoa_r+0x946>
 800b3ac:	07f2      	lsls	r2, r6, #31
 800b3ae:	d505      	bpl.n	800b3bc <_dtoa_r+0x4d4>
 800b3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3b4:	f7f5 f938 	bl	8000628 <__aeabi_dmul>
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	1076      	asrs	r6, r6, #1
 800b3be:	3708      	adds	r7, #8
 800b3c0:	e777      	b.n	800b2b2 <_dtoa_r+0x3ca>
 800b3c2:	2502      	movs	r5, #2
 800b3c4:	e779      	b.n	800b2ba <_dtoa_r+0x3d2>
 800b3c6:	9f00      	ldr	r7, [sp, #0]
 800b3c8:	9e03      	ldr	r6, [sp, #12]
 800b3ca:	e794      	b.n	800b2f6 <_dtoa_r+0x40e>
 800b3cc:	9901      	ldr	r1, [sp, #4]
 800b3ce:	4b4c      	ldr	r3, [pc, #304]	; (800b500 <_dtoa_r+0x618>)
 800b3d0:	4431      	add	r1, r6
 800b3d2:	910d      	str	r1, [sp, #52]	; 0x34
 800b3d4:	9908      	ldr	r1, [sp, #32]
 800b3d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3de:	2900      	cmp	r1, #0
 800b3e0:	d043      	beq.n	800b46a <_dtoa_r+0x582>
 800b3e2:	494d      	ldr	r1, [pc, #308]	; (800b518 <_dtoa_r+0x630>)
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	f7f5 fa49 	bl	800087c <__aeabi_ddiv>
 800b3ea:	4652      	mov	r2, sl
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	f7f4 ff63 	bl	80002b8 <__aeabi_dsub>
 800b3f2:	9d01      	ldr	r5, [sp, #4]
 800b3f4:	4682      	mov	sl, r0
 800b3f6:	468b      	mov	fp, r1
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	f7f5 fbc4 	bl	8000b88 <__aeabi_d2iz>
 800b400:	4606      	mov	r6, r0
 800b402:	f7f5 f8a7 	bl	8000554 <__aeabi_i2d>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4640      	mov	r0, r8
 800b40c:	4649      	mov	r1, r9
 800b40e:	f7f4 ff53 	bl	80002b8 <__aeabi_dsub>
 800b412:	3630      	adds	r6, #48	; 0x30
 800b414:	f805 6b01 	strb.w	r6, [r5], #1
 800b418:	4652      	mov	r2, sl
 800b41a:	465b      	mov	r3, fp
 800b41c:	4680      	mov	r8, r0
 800b41e:	4689      	mov	r9, r1
 800b420:	f7f5 fb74 	bl	8000b0c <__aeabi_dcmplt>
 800b424:	2800      	cmp	r0, #0
 800b426:	d163      	bne.n	800b4f0 <_dtoa_r+0x608>
 800b428:	4642      	mov	r2, r8
 800b42a:	464b      	mov	r3, r9
 800b42c:	4936      	ldr	r1, [pc, #216]	; (800b508 <_dtoa_r+0x620>)
 800b42e:	2000      	movs	r0, #0
 800b430:	f7f4 ff42 	bl	80002b8 <__aeabi_dsub>
 800b434:	4652      	mov	r2, sl
 800b436:	465b      	mov	r3, fp
 800b438:	f7f5 fb68 	bl	8000b0c <__aeabi_dcmplt>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f040 80b5 	bne.w	800b5ac <_dtoa_r+0x6c4>
 800b442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b444:	429d      	cmp	r5, r3
 800b446:	d081      	beq.n	800b34c <_dtoa_r+0x464>
 800b448:	4b30      	ldr	r3, [pc, #192]	; (800b50c <_dtoa_r+0x624>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	4650      	mov	r0, sl
 800b44e:	4659      	mov	r1, fp
 800b450:	f7f5 f8ea 	bl	8000628 <__aeabi_dmul>
 800b454:	4b2d      	ldr	r3, [pc, #180]	; (800b50c <_dtoa_r+0x624>)
 800b456:	4682      	mov	sl, r0
 800b458:	468b      	mov	fp, r1
 800b45a:	4640      	mov	r0, r8
 800b45c:	4649      	mov	r1, r9
 800b45e:	2200      	movs	r2, #0
 800b460:	f7f5 f8e2 	bl	8000628 <__aeabi_dmul>
 800b464:	4680      	mov	r8, r0
 800b466:	4689      	mov	r9, r1
 800b468:	e7c6      	b.n	800b3f8 <_dtoa_r+0x510>
 800b46a:	4650      	mov	r0, sl
 800b46c:	4659      	mov	r1, fp
 800b46e:	f7f5 f8db 	bl	8000628 <__aeabi_dmul>
 800b472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b474:	9d01      	ldr	r5, [sp, #4]
 800b476:	930f      	str	r3, [sp, #60]	; 0x3c
 800b478:	4682      	mov	sl, r0
 800b47a:	468b      	mov	fp, r1
 800b47c:	4649      	mov	r1, r9
 800b47e:	4640      	mov	r0, r8
 800b480:	f7f5 fb82 	bl	8000b88 <__aeabi_d2iz>
 800b484:	4606      	mov	r6, r0
 800b486:	f7f5 f865 	bl	8000554 <__aeabi_i2d>
 800b48a:	3630      	adds	r6, #48	; 0x30
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4640      	mov	r0, r8
 800b492:	4649      	mov	r1, r9
 800b494:	f7f4 ff10 	bl	80002b8 <__aeabi_dsub>
 800b498:	f805 6b01 	strb.w	r6, [r5], #1
 800b49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b49e:	429d      	cmp	r5, r3
 800b4a0:	4680      	mov	r8, r0
 800b4a2:	4689      	mov	r9, r1
 800b4a4:	f04f 0200 	mov.w	r2, #0
 800b4a8:	d124      	bne.n	800b4f4 <_dtoa_r+0x60c>
 800b4aa:	4b1b      	ldr	r3, [pc, #108]	; (800b518 <_dtoa_r+0x630>)
 800b4ac:	4650      	mov	r0, sl
 800b4ae:	4659      	mov	r1, fp
 800b4b0:	f7f4 ff04 	bl	80002bc <__adddf3>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	f7f5 fb44 	bl	8000b48 <__aeabi_dcmpgt>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d173      	bne.n	800b5ac <_dtoa_r+0x6c4>
 800b4c4:	4652      	mov	r2, sl
 800b4c6:	465b      	mov	r3, fp
 800b4c8:	4913      	ldr	r1, [pc, #76]	; (800b518 <_dtoa_r+0x630>)
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	f7f4 fef4 	bl	80002b8 <__aeabi_dsub>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	f7f5 fb18 	bl	8000b0c <__aeabi_dcmplt>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f43f af35 	beq.w	800b34c <_dtoa_r+0x464>
 800b4e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4e4:	1e6b      	subs	r3, r5, #1
 800b4e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4ec:	2b30      	cmp	r3, #48	; 0x30
 800b4ee:	d0f8      	beq.n	800b4e2 <_dtoa_r+0x5fa>
 800b4f0:	9700      	str	r7, [sp, #0]
 800b4f2:	e049      	b.n	800b588 <_dtoa_r+0x6a0>
 800b4f4:	4b05      	ldr	r3, [pc, #20]	; (800b50c <_dtoa_r+0x624>)
 800b4f6:	f7f5 f897 	bl	8000628 <__aeabi_dmul>
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4689      	mov	r9, r1
 800b4fe:	e7bd      	b.n	800b47c <_dtoa_r+0x594>
 800b500:	0800d4c8 	.word	0x0800d4c8
 800b504:	0800d4a0 	.word	0x0800d4a0
 800b508:	3ff00000 	.word	0x3ff00000
 800b50c:	40240000 	.word	0x40240000
 800b510:	401c0000 	.word	0x401c0000
 800b514:	40140000 	.word	0x40140000
 800b518:	3fe00000 	.word	0x3fe00000
 800b51c:	9d01      	ldr	r5, [sp, #4]
 800b51e:	4656      	mov	r6, sl
 800b520:	465f      	mov	r7, fp
 800b522:	4642      	mov	r2, r8
 800b524:	464b      	mov	r3, r9
 800b526:	4630      	mov	r0, r6
 800b528:	4639      	mov	r1, r7
 800b52a:	f7f5 f9a7 	bl	800087c <__aeabi_ddiv>
 800b52e:	f7f5 fb2b 	bl	8000b88 <__aeabi_d2iz>
 800b532:	4682      	mov	sl, r0
 800b534:	f7f5 f80e 	bl	8000554 <__aeabi_i2d>
 800b538:	4642      	mov	r2, r8
 800b53a:	464b      	mov	r3, r9
 800b53c:	f7f5 f874 	bl	8000628 <__aeabi_dmul>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4630      	mov	r0, r6
 800b546:	4639      	mov	r1, r7
 800b548:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b54c:	f7f4 feb4 	bl	80002b8 <__aeabi_dsub>
 800b550:	f805 6b01 	strb.w	r6, [r5], #1
 800b554:	9e01      	ldr	r6, [sp, #4]
 800b556:	9f03      	ldr	r7, [sp, #12]
 800b558:	1bae      	subs	r6, r5, r6
 800b55a:	42b7      	cmp	r7, r6
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	d135      	bne.n	800b5ce <_dtoa_r+0x6e6>
 800b562:	f7f4 feab 	bl	80002bc <__adddf3>
 800b566:	4642      	mov	r2, r8
 800b568:	464b      	mov	r3, r9
 800b56a:	4606      	mov	r6, r0
 800b56c:	460f      	mov	r7, r1
 800b56e:	f7f5 faeb 	bl	8000b48 <__aeabi_dcmpgt>
 800b572:	b9d0      	cbnz	r0, 800b5aa <_dtoa_r+0x6c2>
 800b574:	4642      	mov	r2, r8
 800b576:	464b      	mov	r3, r9
 800b578:	4630      	mov	r0, r6
 800b57a:	4639      	mov	r1, r7
 800b57c:	f7f5 fabc 	bl	8000af8 <__aeabi_dcmpeq>
 800b580:	b110      	cbz	r0, 800b588 <_dtoa_r+0x6a0>
 800b582:	f01a 0f01 	tst.w	sl, #1
 800b586:	d110      	bne.n	800b5aa <_dtoa_r+0x6c2>
 800b588:	4620      	mov	r0, r4
 800b58a:	ee18 1a10 	vmov	r1, s16
 800b58e:	f000 fae5 	bl	800bb5c <_Bfree>
 800b592:	2300      	movs	r3, #0
 800b594:	9800      	ldr	r0, [sp, #0]
 800b596:	702b      	strb	r3, [r5, #0]
 800b598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b59a:	3001      	adds	r0, #1
 800b59c:	6018      	str	r0, [r3, #0]
 800b59e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f43f acf1 	beq.w	800af88 <_dtoa_r+0xa0>
 800b5a6:	601d      	str	r5, [r3, #0]
 800b5a8:	e4ee      	b.n	800af88 <_dtoa_r+0xa0>
 800b5aa:	9f00      	ldr	r7, [sp, #0]
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	461d      	mov	r5, r3
 800b5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5b4:	2a39      	cmp	r2, #57	; 0x39
 800b5b6:	d106      	bne.n	800b5c6 <_dtoa_r+0x6de>
 800b5b8:	9a01      	ldr	r2, [sp, #4]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d1f7      	bne.n	800b5ae <_dtoa_r+0x6c6>
 800b5be:	9901      	ldr	r1, [sp, #4]
 800b5c0:	2230      	movs	r2, #48	; 0x30
 800b5c2:	3701      	adds	r7, #1
 800b5c4:	700a      	strb	r2, [r1, #0]
 800b5c6:	781a      	ldrb	r2, [r3, #0]
 800b5c8:	3201      	adds	r2, #1
 800b5ca:	701a      	strb	r2, [r3, #0]
 800b5cc:	e790      	b.n	800b4f0 <_dtoa_r+0x608>
 800b5ce:	4ba6      	ldr	r3, [pc, #664]	; (800b868 <_dtoa_r+0x980>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f7f5 f829 	bl	8000628 <__aeabi_dmul>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4606      	mov	r6, r0
 800b5dc:	460f      	mov	r7, r1
 800b5de:	f7f5 fa8b 	bl	8000af8 <__aeabi_dcmpeq>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d09d      	beq.n	800b522 <_dtoa_r+0x63a>
 800b5e6:	e7cf      	b.n	800b588 <_dtoa_r+0x6a0>
 800b5e8:	9a08      	ldr	r2, [sp, #32]
 800b5ea:	2a00      	cmp	r2, #0
 800b5ec:	f000 80d7 	beq.w	800b79e <_dtoa_r+0x8b6>
 800b5f0:	9a06      	ldr	r2, [sp, #24]
 800b5f2:	2a01      	cmp	r2, #1
 800b5f4:	f300 80ba 	bgt.w	800b76c <_dtoa_r+0x884>
 800b5f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	f000 80b2 	beq.w	800b764 <_dtoa_r+0x87c>
 800b600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b604:	9e07      	ldr	r6, [sp, #28]
 800b606:	9d04      	ldr	r5, [sp, #16]
 800b608:	9a04      	ldr	r2, [sp, #16]
 800b60a:	441a      	add	r2, r3
 800b60c:	9204      	str	r2, [sp, #16]
 800b60e:	9a05      	ldr	r2, [sp, #20]
 800b610:	2101      	movs	r1, #1
 800b612:	441a      	add	r2, r3
 800b614:	4620      	mov	r0, r4
 800b616:	9205      	str	r2, [sp, #20]
 800b618:	f000 fb58 	bl	800bccc <__i2b>
 800b61c:	4607      	mov	r7, r0
 800b61e:	2d00      	cmp	r5, #0
 800b620:	dd0c      	ble.n	800b63c <_dtoa_r+0x754>
 800b622:	9b05      	ldr	r3, [sp, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	dd09      	ble.n	800b63c <_dtoa_r+0x754>
 800b628:	42ab      	cmp	r3, r5
 800b62a:	9a04      	ldr	r2, [sp, #16]
 800b62c:	bfa8      	it	ge
 800b62e:	462b      	movge	r3, r5
 800b630:	1ad2      	subs	r2, r2, r3
 800b632:	9204      	str	r2, [sp, #16]
 800b634:	9a05      	ldr	r2, [sp, #20]
 800b636:	1aed      	subs	r5, r5, r3
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	9305      	str	r3, [sp, #20]
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	b31b      	cbz	r3, 800b688 <_dtoa_r+0x7a0>
 800b640:	9b08      	ldr	r3, [sp, #32]
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 80af 	beq.w	800b7a6 <_dtoa_r+0x8be>
 800b648:	2e00      	cmp	r6, #0
 800b64a:	dd13      	ble.n	800b674 <_dtoa_r+0x78c>
 800b64c:	4639      	mov	r1, r7
 800b64e:	4632      	mov	r2, r6
 800b650:	4620      	mov	r0, r4
 800b652:	f000 fbfb 	bl	800be4c <__pow5mult>
 800b656:	ee18 2a10 	vmov	r2, s16
 800b65a:	4601      	mov	r1, r0
 800b65c:	4607      	mov	r7, r0
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 fb4a 	bl	800bcf8 <__multiply>
 800b664:	ee18 1a10 	vmov	r1, s16
 800b668:	4680      	mov	r8, r0
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 fa76 	bl	800bb5c <_Bfree>
 800b670:	ee08 8a10 	vmov	s16, r8
 800b674:	9b07      	ldr	r3, [sp, #28]
 800b676:	1b9a      	subs	r2, r3, r6
 800b678:	d006      	beq.n	800b688 <_dtoa_r+0x7a0>
 800b67a:	ee18 1a10 	vmov	r1, s16
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 fbe4 	bl	800be4c <__pow5mult>
 800b684:	ee08 0a10 	vmov	s16, r0
 800b688:	2101      	movs	r1, #1
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fb1e 	bl	800bccc <__i2b>
 800b690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b692:	2b00      	cmp	r3, #0
 800b694:	4606      	mov	r6, r0
 800b696:	f340 8088 	ble.w	800b7aa <_dtoa_r+0x8c2>
 800b69a:	461a      	mov	r2, r3
 800b69c:	4601      	mov	r1, r0
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 fbd4 	bl	800be4c <__pow5mult>
 800b6a4:	9b06      	ldr	r3, [sp, #24]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	f340 8081 	ble.w	800b7b0 <_dtoa_r+0x8c8>
 800b6ae:	f04f 0800 	mov.w	r8, #0
 800b6b2:	6933      	ldr	r3, [r6, #16]
 800b6b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6b8:	6918      	ldr	r0, [r3, #16]
 800b6ba:	f000 fab7 	bl	800bc2c <__hi0bits>
 800b6be:	f1c0 0020 	rsb	r0, r0, #32
 800b6c2:	9b05      	ldr	r3, [sp, #20]
 800b6c4:	4418      	add	r0, r3
 800b6c6:	f010 001f 	ands.w	r0, r0, #31
 800b6ca:	f000 8092 	beq.w	800b7f2 <_dtoa_r+0x90a>
 800b6ce:	f1c0 0320 	rsb	r3, r0, #32
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	f340 808a 	ble.w	800b7ec <_dtoa_r+0x904>
 800b6d8:	f1c0 001c 	rsb	r0, r0, #28
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	4403      	add	r3, r0
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	9b05      	ldr	r3, [sp, #20]
 800b6e4:	4403      	add	r3, r0
 800b6e6:	4405      	add	r5, r0
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	9b04      	ldr	r3, [sp, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	dd07      	ble.n	800b700 <_dtoa_r+0x818>
 800b6f0:	ee18 1a10 	vmov	r1, s16
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 fc02 	bl	800bf00 <__lshift>
 800b6fc:	ee08 0a10 	vmov	s16, r0
 800b700:	9b05      	ldr	r3, [sp, #20]
 800b702:	2b00      	cmp	r3, #0
 800b704:	dd05      	ble.n	800b712 <_dtoa_r+0x82a>
 800b706:	4631      	mov	r1, r6
 800b708:	461a      	mov	r2, r3
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 fbf8 	bl	800bf00 <__lshift>
 800b710:	4606      	mov	r6, r0
 800b712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b714:	2b00      	cmp	r3, #0
 800b716:	d06e      	beq.n	800b7f6 <_dtoa_r+0x90e>
 800b718:	ee18 0a10 	vmov	r0, s16
 800b71c:	4631      	mov	r1, r6
 800b71e:	f000 fc5f 	bl	800bfe0 <__mcmp>
 800b722:	2800      	cmp	r0, #0
 800b724:	da67      	bge.n	800b7f6 <_dtoa_r+0x90e>
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	3b01      	subs	r3, #1
 800b72a:	ee18 1a10 	vmov	r1, s16
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	220a      	movs	r2, #10
 800b732:	2300      	movs	r3, #0
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fa33 	bl	800bba0 <__multadd>
 800b73a:	9b08      	ldr	r3, [sp, #32]
 800b73c:	ee08 0a10 	vmov	s16, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 81b1 	beq.w	800baa8 <_dtoa_r+0xbc0>
 800b746:	2300      	movs	r3, #0
 800b748:	4639      	mov	r1, r7
 800b74a:	220a      	movs	r2, #10
 800b74c:	4620      	mov	r0, r4
 800b74e:	f000 fa27 	bl	800bba0 <__multadd>
 800b752:	9b02      	ldr	r3, [sp, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	4607      	mov	r7, r0
 800b758:	f300 808e 	bgt.w	800b878 <_dtoa_r+0x990>
 800b75c:	9b06      	ldr	r3, [sp, #24]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	dc51      	bgt.n	800b806 <_dtoa_r+0x91e>
 800b762:	e089      	b.n	800b878 <_dtoa_r+0x990>
 800b764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b76a:	e74b      	b.n	800b604 <_dtoa_r+0x71c>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	1e5e      	subs	r6, r3, #1
 800b770:	9b07      	ldr	r3, [sp, #28]
 800b772:	42b3      	cmp	r3, r6
 800b774:	bfbf      	itttt	lt
 800b776:	9b07      	ldrlt	r3, [sp, #28]
 800b778:	9607      	strlt	r6, [sp, #28]
 800b77a:	1af2      	sublt	r2, r6, r3
 800b77c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b77e:	bfb6      	itet	lt
 800b780:	189b      	addlt	r3, r3, r2
 800b782:	1b9e      	subge	r6, r3, r6
 800b784:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	bfb8      	it	lt
 800b78a:	2600      	movlt	r6, #0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfb7      	itett	lt
 800b790:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b794:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b798:	1a9d      	sublt	r5, r3, r2
 800b79a:	2300      	movlt	r3, #0
 800b79c:	e734      	b.n	800b608 <_dtoa_r+0x720>
 800b79e:	9e07      	ldr	r6, [sp, #28]
 800b7a0:	9d04      	ldr	r5, [sp, #16]
 800b7a2:	9f08      	ldr	r7, [sp, #32]
 800b7a4:	e73b      	b.n	800b61e <_dtoa_r+0x736>
 800b7a6:	9a07      	ldr	r2, [sp, #28]
 800b7a8:	e767      	b.n	800b67a <_dtoa_r+0x792>
 800b7aa:	9b06      	ldr	r3, [sp, #24]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	dc18      	bgt.n	800b7e2 <_dtoa_r+0x8fa>
 800b7b0:	f1ba 0f00 	cmp.w	sl, #0
 800b7b4:	d115      	bne.n	800b7e2 <_dtoa_r+0x8fa>
 800b7b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7ba:	b993      	cbnz	r3, 800b7e2 <_dtoa_r+0x8fa>
 800b7bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7c0:	0d1b      	lsrs	r3, r3, #20
 800b7c2:	051b      	lsls	r3, r3, #20
 800b7c4:	b183      	cbz	r3, 800b7e8 <_dtoa_r+0x900>
 800b7c6:	9b04      	ldr	r3, [sp, #16]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	9b05      	ldr	r3, [sp, #20]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	9305      	str	r3, [sp, #20]
 800b7d2:	f04f 0801 	mov.w	r8, #1
 800b7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f47f af6a 	bne.w	800b6b2 <_dtoa_r+0x7ca>
 800b7de:	2001      	movs	r0, #1
 800b7e0:	e76f      	b.n	800b6c2 <_dtoa_r+0x7da>
 800b7e2:	f04f 0800 	mov.w	r8, #0
 800b7e6:	e7f6      	b.n	800b7d6 <_dtoa_r+0x8ee>
 800b7e8:	4698      	mov	r8, r3
 800b7ea:	e7f4      	b.n	800b7d6 <_dtoa_r+0x8ee>
 800b7ec:	f43f af7d 	beq.w	800b6ea <_dtoa_r+0x802>
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	301c      	adds	r0, #28
 800b7f4:	e772      	b.n	800b6dc <_dtoa_r+0x7f4>
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dc37      	bgt.n	800b86c <_dtoa_r+0x984>
 800b7fc:	9b06      	ldr	r3, [sp, #24]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	dd34      	ble.n	800b86c <_dtoa_r+0x984>
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	9302      	str	r3, [sp, #8]
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	b96b      	cbnz	r3, 800b826 <_dtoa_r+0x93e>
 800b80a:	4631      	mov	r1, r6
 800b80c:	2205      	movs	r2, #5
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 f9c6 	bl	800bba0 <__multadd>
 800b814:	4601      	mov	r1, r0
 800b816:	4606      	mov	r6, r0
 800b818:	ee18 0a10 	vmov	r0, s16
 800b81c:	f000 fbe0 	bl	800bfe0 <__mcmp>
 800b820:	2800      	cmp	r0, #0
 800b822:	f73f adbb 	bgt.w	800b39c <_dtoa_r+0x4b4>
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	9d01      	ldr	r5, [sp, #4]
 800b82a:	43db      	mvns	r3, r3
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	f04f 0800 	mov.w	r8, #0
 800b832:	4631      	mov	r1, r6
 800b834:	4620      	mov	r0, r4
 800b836:	f000 f991 	bl	800bb5c <_Bfree>
 800b83a:	2f00      	cmp	r7, #0
 800b83c:	f43f aea4 	beq.w	800b588 <_dtoa_r+0x6a0>
 800b840:	f1b8 0f00 	cmp.w	r8, #0
 800b844:	d005      	beq.n	800b852 <_dtoa_r+0x96a>
 800b846:	45b8      	cmp	r8, r7
 800b848:	d003      	beq.n	800b852 <_dtoa_r+0x96a>
 800b84a:	4641      	mov	r1, r8
 800b84c:	4620      	mov	r0, r4
 800b84e:	f000 f985 	bl	800bb5c <_Bfree>
 800b852:	4639      	mov	r1, r7
 800b854:	4620      	mov	r0, r4
 800b856:	f000 f981 	bl	800bb5c <_Bfree>
 800b85a:	e695      	b.n	800b588 <_dtoa_r+0x6a0>
 800b85c:	2600      	movs	r6, #0
 800b85e:	4637      	mov	r7, r6
 800b860:	e7e1      	b.n	800b826 <_dtoa_r+0x93e>
 800b862:	9700      	str	r7, [sp, #0]
 800b864:	4637      	mov	r7, r6
 800b866:	e599      	b.n	800b39c <_dtoa_r+0x4b4>
 800b868:	40240000 	.word	0x40240000
 800b86c:	9b08      	ldr	r3, [sp, #32]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 80ca 	beq.w	800ba08 <_dtoa_r+0xb20>
 800b874:	9b03      	ldr	r3, [sp, #12]
 800b876:	9302      	str	r3, [sp, #8]
 800b878:	2d00      	cmp	r5, #0
 800b87a:	dd05      	ble.n	800b888 <_dtoa_r+0x9a0>
 800b87c:	4639      	mov	r1, r7
 800b87e:	462a      	mov	r2, r5
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fb3d 	bl	800bf00 <__lshift>
 800b886:	4607      	mov	r7, r0
 800b888:	f1b8 0f00 	cmp.w	r8, #0
 800b88c:	d05b      	beq.n	800b946 <_dtoa_r+0xa5e>
 800b88e:	6879      	ldr	r1, [r7, #4]
 800b890:	4620      	mov	r0, r4
 800b892:	f000 f923 	bl	800badc <_Balloc>
 800b896:	4605      	mov	r5, r0
 800b898:	b928      	cbnz	r0, 800b8a6 <_dtoa_r+0x9be>
 800b89a:	4b87      	ldr	r3, [pc, #540]	; (800bab8 <_dtoa_r+0xbd0>)
 800b89c:	4602      	mov	r2, r0
 800b89e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8a2:	f7ff bb3b 	b.w	800af1c <_dtoa_r+0x34>
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	3202      	adds	r2, #2
 800b8aa:	0092      	lsls	r2, r2, #2
 800b8ac:	f107 010c 	add.w	r1, r7, #12
 800b8b0:	300c      	adds	r0, #12
 800b8b2:	f7fe fded 	bl	800a490 <memcpy>
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 fb20 	bl	800bf00 <__lshift>
 800b8c0:	9b01      	ldr	r3, [sp, #4]
 800b8c2:	f103 0901 	add.w	r9, r3, #1
 800b8c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	f00a 0301 	and.w	r3, sl, #1
 800b8d2:	46b8      	mov	r8, r7
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	4631      	mov	r1, r6
 800b8da:	ee18 0a10 	vmov	r0, s16
 800b8de:	f7ff fa77 	bl	800add0 <quorem>
 800b8e2:	4641      	mov	r1, r8
 800b8e4:	9002      	str	r0, [sp, #8]
 800b8e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8ea:	ee18 0a10 	vmov	r0, s16
 800b8ee:	f000 fb77 	bl	800bfe0 <__mcmp>
 800b8f2:	463a      	mov	r2, r7
 800b8f4:	9003      	str	r0, [sp, #12]
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 fb8d 	bl	800c018 <__mdiff>
 800b8fe:	68c2      	ldr	r2, [r0, #12]
 800b900:	f109 3bff 	add.w	fp, r9, #4294967295
 800b904:	4605      	mov	r5, r0
 800b906:	bb02      	cbnz	r2, 800b94a <_dtoa_r+0xa62>
 800b908:	4601      	mov	r1, r0
 800b90a:	ee18 0a10 	vmov	r0, s16
 800b90e:	f000 fb67 	bl	800bfe0 <__mcmp>
 800b912:	4602      	mov	r2, r0
 800b914:	4629      	mov	r1, r5
 800b916:	4620      	mov	r0, r4
 800b918:	9207      	str	r2, [sp, #28]
 800b91a:	f000 f91f 	bl	800bb5c <_Bfree>
 800b91e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b922:	ea43 0102 	orr.w	r1, r3, r2
 800b926:	9b04      	ldr	r3, [sp, #16]
 800b928:	430b      	orrs	r3, r1
 800b92a:	464d      	mov	r5, r9
 800b92c:	d10f      	bne.n	800b94e <_dtoa_r+0xa66>
 800b92e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b932:	d02a      	beq.n	800b98a <_dtoa_r+0xaa2>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	dd02      	ble.n	800b940 <_dtoa_r+0xa58>
 800b93a:	9b02      	ldr	r3, [sp, #8]
 800b93c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b940:	f88b a000 	strb.w	sl, [fp]
 800b944:	e775      	b.n	800b832 <_dtoa_r+0x94a>
 800b946:	4638      	mov	r0, r7
 800b948:	e7ba      	b.n	800b8c0 <_dtoa_r+0x9d8>
 800b94a:	2201      	movs	r2, #1
 800b94c:	e7e2      	b.n	800b914 <_dtoa_r+0xa2c>
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	db04      	blt.n	800b95e <_dtoa_r+0xa76>
 800b954:	9906      	ldr	r1, [sp, #24]
 800b956:	430b      	orrs	r3, r1
 800b958:	9904      	ldr	r1, [sp, #16]
 800b95a:	430b      	orrs	r3, r1
 800b95c:	d122      	bne.n	800b9a4 <_dtoa_r+0xabc>
 800b95e:	2a00      	cmp	r2, #0
 800b960:	ddee      	ble.n	800b940 <_dtoa_r+0xa58>
 800b962:	ee18 1a10 	vmov	r1, s16
 800b966:	2201      	movs	r2, #1
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 fac9 	bl	800bf00 <__lshift>
 800b96e:	4631      	mov	r1, r6
 800b970:	ee08 0a10 	vmov	s16, r0
 800b974:	f000 fb34 	bl	800bfe0 <__mcmp>
 800b978:	2800      	cmp	r0, #0
 800b97a:	dc03      	bgt.n	800b984 <_dtoa_r+0xa9c>
 800b97c:	d1e0      	bne.n	800b940 <_dtoa_r+0xa58>
 800b97e:	f01a 0f01 	tst.w	sl, #1
 800b982:	d0dd      	beq.n	800b940 <_dtoa_r+0xa58>
 800b984:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b988:	d1d7      	bne.n	800b93a <_dtoa_r+0xa52>
 800b98a:	2339      	movs	r3, #57	; 0x39
 800b98c:	f88b 3000 	strb.w	r3, [fp]
 800b990:	462b      	mov	r3, r5
 800b992:	461d      	mov	r5, r3
 800b994:	3b01      	subs	r3, #1
 800b996:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b99a:	2a39      	cmp	r2, #57	; 0x39
 800b99c:	d071      	beq.n	800ba82 <_dtoa_r+0xb9a>
 800b99e:	3201      	adds	r2, #1
 800b9a0:	701a      	strb	r2, [r3, #0]
 800b9a2:	e746      	b.n	800b832 <_dtoa_r+0x94a>
 800b9a4:	2a00      	cmp	r2, #0
 800b9a6:	dd07      	ble.n	800b9b8 <_dtoa_r+0xad0>
 800b9a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9ac:	d0ed      	beq.n	800b98a <_dtoa_r+0xaa2>
 800b9ae:	f10a 0301 	add.w	r3, sl, #1
 800b9b2:	f88b 3000 	strb.w	r3, [fp]
 800b9b6:	e73c      	b.n	800b832 <_dtoa_r+0x94a>
 800b9b8:	9b05      	ldr	r3, [sp, #20]
 800b9ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b9be:	4599      	cmp	r9, r3
 800b9c0:	d047      	beq.n	800ba52 <_dtoa_r+0xb6a>
 800b9c2:	ee18 1a10 	vmov	r1, s16
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	220a      	movs	r2, #10
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f000 f8e8 	bl	800bba0 <__multadd>
 800b9d0:	45b8      	cmp	r8, r7
 800b9d2:	ee08 0a10 	vmov	s16, r0
 800b9d6:	f04f 0300 	mov.w	r3, #0
 800b9da:	f04f 020a 	mov.w	r2, #10
 800b9de:	4641      	mov	r1, r8
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	d106      	bne.n	800b9f2 <_dtoa_r+0xb0a>
 800b9e4:	f000 f8dc 	bl	800bba0 <__multadd>
 800b9e8:	4680      	mov	r8, r0
 800b9ea:	4607      	mov	r7, r0
 800b9ec:	f109 0901 	add.w	r9, r9, #1
 800b9f0:	e772      	b.n	800b8d8 <_dtoa_r+0x9f0>
 800b9f2:	f000 f8d5 	bl	800bba0 <__multadd>
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	220a      	movs	r2, #10
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f000 f8ce 	bl	800bba0 <__multadd>
 800ba04:	4607      	mov	r7, r0
 800ba06:	e7f1      	b.n	800b9ec <_dtoa_r+0xb04>
 800ba08:	9b03      	ldr	r3, [sp, #12]
 800ba0a:	9302      	str	r3, [sp, #8]
 800ba0c:	9d01      	ldr	r5, [sp, #4]
 800ba0e:	ee18 0a10 	vmov	r0, s16
 800ba12:	4631      	mov	r1, r6
 800ba14:	f7ff f9dc 	bl	800add0 <quorem>
 800ba18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	f805 ab01 	strb.w	sl, [r5], #1
 800ba22:	1aea      	subs	r2, r5, r3
 800ba24:	9b02      	ldr	r3, [sp, #8]
 800ba26:	4293      	cmp	r3, r2
 800ba28:	dd09      	ble.n	800ba3e <_dtoa_r+0xb56>
 800ba2a:	ee18 1a10 	vmov	r1, s16
 800ba2e:	2300      	movs	r3, #0
 800ba30:	220a      	movs	r2, #10
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 f8b4 	bl	800bba0 <__multadd>
 800ba38:	ee08 0a10 	vmov	s16, r0
 800ba3c:	e7e7      	b.n	800ba0e <_dtoa_r+0xb26>
 800ba3e:	9b02      	ldr	r3, [sp, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	bfc8      	it	gt
 800ba44:	461d      	movgt	r5, r3
 800ba46:	9b01      	ldr	r3, [sp, #4]
 800ba48:	bfd8      	it	le
 800ba4a:	2501      	movle	r5, #1
 800ba4c:	441d      	add	r5, r3
 800ba4e:	f04f 0800 	mov.w	r8, #0
 800ba52:	ee18 1a10 	vmov	r1, s16
 800ba56:	2201      	movs	r2, #1
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f000 fa51 	bl	800bf00 <__lshift>
 800ba5e:	4631      	mov	r1, r6
 800ba60:	ee08 0a10 	vmov	s16, r0
 800ba64:	f000 fabc 	bl	800bfe0 <__mcmp>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	dc91      	bgt.n	800b990 <_dtoa_r+0xaa8>
 800ba6c:	d102      	bne.n	800ba74 <_dtoa_r+0xb8c>
 800ba6e:	f01a 0f01 	tst.w	sl, #1
 800ba72:	d18d      	bne.n	800b990 <_dtoa_r+0xaa8>
 800ba74:	462b      	mov	r3, r5
 800ba76:	461d      	mov	r5, r3
 800ba78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba7c:	2a30      	cmp	r2, #48	; 0x30
 800ba7e:	d0fa      	beq.n	800ba76 <_dtoa_r+0xb8e>
 800ba80:	e6d7      	b.n	800b832 <_dtoa_r+0x94a>
 800ba82:	9a01      	ldr	r2, [sp, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d184      	bne.n	800b992 <_dtoa_r+0xaaa>
 800ba88:	9b00      	ldr	r3, [sp, #0]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	2331      	movs	r3, #49	; 0x31
 800ba90:	7013      	strb	r3, [r2, #0]
 800ba92:	e6ce      	b.n	800b832 <_dtoa_r+0x94a>
 800ba94:	4b09      	ldr	r3, [pc, #36]	; (800babc <_dtoa_r+0xbd4>)
 800ba96:	f7ff ba95 	b.w	800afc4 <_dtoa_r+0xdc>
 800ba9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f47f aa6e 	bne.w	800af7e <_dtoa_r+0x96>
 800baa2:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <_dtoa_r+0xbd8>)
 800baa4:	f7ff ba8e 	b.w	800afc4 <_dtoa_r+0xdc>
 800baa8:	9b02      	ldr	r3, [sp, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dcae      	bgt.n	800ba0c <_dtoa_r+0xb24>
 800baae:	9b06      	ldr	r3, [sp, #24]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	f73f aea8 	bgt.w	800b806 <_dtoa_r+0x91e>
 800bab6:	e7a9      	b.n	800ba0c <_dtoa_r+0xb24>
 800bab8:	0800d42f 	.word	0x0800d42f
 800babc:	0800d38c 	.word	0x0800d38c
 800bac0:	0800d3b0 	.word	0x0800d3b0

0800bac4 <_localeconv_r>:
 800bac4:	4800      	ldr	r0, [pc, #0]	; (800bac8 <_localeconv_r+0x4>)
 800bac6:	4770      	bx	lr
 800bac8:	20000164 	.word	0x20000164

0800bacc <malloc>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <malloc+0xc>)
 800bace:	4601      	mov	r1, r0
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f000 bc09 	b.w	800c2e8 <_malloc_r>
 800bad6:	bf00      	nop
 800bad8:	20000010 	.word	0x20000010

0800badc <_Balloc>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bae0:	4604      	mov	r4, r0
 800bae2:	460d      	mov	r5, r1
 800bae4:	b976      	cbnz	r6, 800bb04 <_Balloc+0x28>
 800bae6:	2010      	movs	r0, #16
 800bae8:	f7ff fff0 	bl	800bacc <malloc>
 800baec:	4602      	mov	r2, r0
 800baee:	6260      	str	r0, [r4, #36]	; 0x24
 800baf0:	b920      	cbnz	r0, 800bafc <_Balloc+0x20>
 800baf2:	4b18      	ldr	r3, [pc, #96]	; (800bb54 <_Balloc+0x78>)
 800baf4:	4818      	ldr	r0, [pc, #96]	; (800bb58 <_Balloc+0x7c>)
 800baf6:	2166      	movs	r1, #102	; 0x66
 800baf8:	f000 fdd6 	bl	800c6a8 <__assert_func>
 800bafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb00:	6006      	str	r6, [r0, #0]
 800bb02:	60c6      	str	r6, [r0, #12]
 800bb04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb06:	68f3      	ldr	r3, [r6, #12]
 800bb08:	b183      	cbz	r3, 800bb2c <_Balloc+0x50>
 800bb0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb12:	b9b8      	cbnz	r0, 800bb44 <_Balloc+0x68>
 800bb14:	2101      	movs	r1, #1
 800bb16:	fa01 f605 	lsl.w	r6, r1, r5
 800bb1a:	1d72      	adds	r2, r6, #5
 800bb1c:	0092      	lsls	r2, r2, #2
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 fb60 	bl	800c1e4 <_calloc_r>
 800bb24:	b160      	cbz	r0, 800bb40 <_Balloc+0x64>
 800bb26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb2a:	e00e      	b.n	800bb4a <_Balloc+0x6e>
 800bb2c:	2221      	movs	r2, #33	; 0x21
 800bb2e:	2104      	movs	r1, #4
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fb57 	bl	800c1e4 <_calloc_r>
 800bb36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb38:	60f0      	str	r0, [r6, #12]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1e4      	bne.n	800bb0a <_Balloc+0x2e>
 800bb40:	2000      	movs	r0, #0
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	6802      	ldr	r2, [r0, #0]
 800bb46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb50:	e7f7      	b.n	800bb42 <_Balloc+0x66>
 800bb52:	bf00      	nop
 800bb54:	0800d3bd 	.word	0x0800d3bd
 800bb58:	0800d440 	.word	0x0800d440

0800bb5c <_Bfree>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb60:	4605      	mov	r5, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	b976      	cbnz	r6, 800bb84 <_Bfree+0x28>
 800bb66:	2010      	movs	r0, #16
 800bb68:	f7ff ffb0 	bl	800bacc <malloc>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	6268      	str	r0, [r5, #36]	; 0x24
 800bb70:	b920      	cbnz	r0, 800bb7c <_Bfree+0x20>
 800bb72:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <_Bfree+0x3c>)
 800bb74:	4809      	ldr	r0, [pc, #36]	; (800bb9c <_Bfree+0x40>)
 800bb76:	218a      	movs	r1, #138	; 0x8a
 800bb78:	f000 fd96 	bl	800c6a8 <__assert_func>
 800bb7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb80:	6006      	str	r6, [r0, #0]
 800bb82:	60c6      	str	r6, [r0, #12]
 800bb84:	b13c      	cbz	r4, 800bb96 <_Bfree+0x3a>
 800bb86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb88:	6862      	ldr	r2, [r4, #4]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb90:	6021      	str	r1, [r4, #0]
 800bb92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	0800d3bd 	.word	0x0800d3bd
 800bb9c:	0800d440 	.word	0x0800d440

0800bba0 <__multadd>:
 800bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	690d      	ldr	r5, [r1, #16]
 800bba6:	4607      	mov	r7, r0
 800bba8:	460c      	mov	r4, r1
 800bbaa:	461e      	mov	r6, r3
 800bbac:	f101 0c14 	add.w	ip, r1, #20
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f8dc 3000 	ldr.w	r3, [ip]
 800bbb6:	b299      	uxth	r1, r3
 800bbb8:	fb02 6101 	mla	r1, r2, r1, r6
 800bbbc:	0c1e      	lsrs	r6, r3, #16
 800bbbe:	0c0b      	lsrs	r3, r1, #16
 800bbc0:	fb02 3306 	mla	r3, r2, r6, r3
 800bbc4:	b289      	uxth	r1, r1
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbcc:	4285      	cmp	r5, r0
 800bbce:	f84c 1b04 	str.w	r1, [ip], #4
 800bbd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbd6:	dcec      	bgt.n	800bbb2 <__multadd+0x12>
 800bbd8:	b30e      	cbz	r6, 800bc1e <__multadd+0x7e>
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	42ab      	cmp	r3, r5
 800bbde:	dc19      	bgt.n	800bc14 <__multadd+0x74>
 800bbe0:	6861      	ldr	r1, [r4, #4]
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	3101      	adds	r1, #1
 800bbe6:	f7ff ff79 	bl	800badc <_Balloc>
 800bbea:	4680      	mov	r8, r0
 800bbec:	b928      	cbnz	r0, 800bbfa <__multadd+0x5a>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <__multadd+0x84>)
 800bbf2:	480d      	ldr	r0, [pc, #52]	; (800bc28 <__multadd+0x88>)
 800bbf4:	21b5      	movs	r1, #181	; 0xb5
 800bbf6:	f000 fd57 	bl	800c6a8 <__assert_func>
 800bbfa:	6922      	ldr	r2, [r4, #16]
 800bbfc:	3202      	adds	r2, #2
 800bbfe:	f104 010c 	add.w	r1, r4, #12
 800bc02:	0092      	lsls	r2, r2, #2
 800bc04:	300c      	adds	r0, #12
 800bc06:	f7fe fc43 	bl	800a490 <memcpy>
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f7ff ffa5 	bl	800bb5c <_Bfree>
 800bc12:	4644      	mov	r4, r8
 800bc14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc18:	3501      	adds	r5, #1
 800bc1a:	615e      	str	r6, [r3, #20]
 800bc1c:	6125      	str	r5, [r4, #16]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc24:	0800d42f 	.word	0x0800d42f
 800bc28:	0800d440 	.word	0x0800d440

0800bc2c <__hi0bits>:
 800bc2c:	0c03      	lsrs	r3, r0, #16
 800bc2e:	041b      	lsls	r3, r3, #16
 800bc30:	b9d3      	cbnz	r3, 800bc68 <__hi0bits+0x3c>
 800bc32:	0400      	lsls	r0, r0, #16
 800bc34:	2310      	movs	r3, #16
 800bc36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc3a:	bf04      	itt	eq
 800bc3c:	0200      	lsleq	r0, r0, #8
 800bc3e:	3308      	addeq	r3, #8
 800bc40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc44:	bf04      	itt	eq
 800bc46:	0100      	lsleq	r0, r0, #4
 800bc48:	3304      	addeq	r3, #4
 800bc4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc4e:	bf04      	itt	eq
 800bc50:	0080      	lsleq	r0, r0, #2
 800bc52:	3302      	addeq	r3, #2
 800bc54:	2800      	cmp	r0, #0
 800bc56:	db05      	blt.n	800bc64 <__hi0bits+0x38>
 800bc58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc5c:	f103 0301 	add.w	r3, r3, #1
 800bc60:	bf08      	it	eq
 800bc62:	2320      	moveq	r3, #32
 800bc64:	4618      	mov	r0, r3
 800bc66:	4770      	bx	lr
 800bc68:	2300      	movs	r3, #0
 800bc6a:	e7e4      	b.n	800bc36 <__hi0bits+0xa>

0800bc6c <__lo0bits>:
 800bc6c:	6803      	ldr	r3, [r0, #0]
 800bc6e:	f013 0207 	ands.w	r2, r3, #7
 800bc72:	4601      	mov	r1, r0
 800bc74:	d00b      	beq.n	800bc8e <__lo0bits+0x22>
 800bc76:	07da      	lsls	r2, r3, #31
 800bc78:	d423      	bmi.n	800bcc2 <__lo0bits+0x56>
 800bc7a:	0798      	lsls	r0, r3, #30
 800bc7c:	bf49      	itett	mi
 800bc7e:	085b      	lsrmi	r3, r3, #1
 800bc80:	089b      	lsrpl	r3, r3, #2
 800bc82:	2001      	movmi	r0, #1
 800bc84:	600b      	strmi	r3, [r1, #0]
 800bc86:	bf5c      	itt	pl
 800bc88:	600b      	strpl	r3, [r1, #0]
 800bc8a:	2002      	movpl	r0, #2
 800bc8c:	4770      	bx	lr
 800bc8e:	b298      	uxth	r0, r3
 800bc90:	b9a8      	cbnz	r0, 800bcbe <__lo0bits+0x52>
 800bc92:	0c1b      	lsrs	r3, r3, #16
 800bc94:	2010      	movs	r0, #16
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	b90a      	cbnz	r2, 800bc9e <__lo0bits+0x32>
 800bc9a:	3008      	adds	r0, #8
 800bc9c:	0a1b      	lsrs	r3, r3, #8
 800bc9e:	071a      	lsls	r2, r3, #28
 800bca0:	bf04      	itt	eq
 800bca2:	091b      	lsreq	r3, r3, #4
 800bca4:	3004      	addeq	r0, #4
 800bca6:	079a      	lsls	r2, r3, #30
 800bca8:	bf04      	itt	eq
 800bcaa:	089b      	lsreq	r3, r3, #2
 800bcac:	3002      	addeq	r0, #2
 800bcae:	07da      	lsls	r2, r3, #31
 800bcb0:	d403      	bmi.n	800bcba <__lo0bits+0x4e>
 800bcb2:	085b      	lsrs	r3, r3, #1
 800bcb4:	f100 0001 	add.w	r0, r0, #1
 800bcb8:	d005      	beq.n	800bcc6 <__lo0bits+0x5a>
 800bcba:	600b      	str	r3, [r1, #0]
 800bcbc:	4770      	bx	lr
 800bcbe:	4610      	mov	r0, r2
 800bcc0:	e7e9      	b.n	800bc96 <__lo0bits+0x2a>
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	4770      	bx	lr
 800bcc6:	2020      	movs	r0, #32
 800bcc8:	4770      	bx	lr
	...

0800bccc <__i2b>:
 800bccc:	b510      	push	{r4, lr}
 800bcce:	460c      	mov	r4, r1
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	f7ff ff03 	bl	800badc <_Balloc>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	b928      	cbnz	r0, 800bce6 <__i2b+0x1a>
 800bcda:	4b05      	ldr	r3, [pc, #20]	; (800bcf0 <__i2b+0x24>)
 800bcdc:	4805      	ldr	r0, [pc, #20]	; (800bcf4 <__i2b+0x28>)
 800bcde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bce2:	f000 fce1 	bl	800c6a8 <__assert_func>
 800bce6:	2301      	movs	r3, #1
 800bce8:	6144      	str	r4, [r0, #20]
 800bcea:	6103      	str	r3, [r0, #16]
 800bcec:	bd10      	pop	{r4, pc}
 800bcee:	bf00      	nop
 800bcf0:	0800d42f 	.word	0x0800d42f
 800bcf4:	0800d440 	.word	0x0800d440

0800bcf8 <__multiply>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	4691      	mov	r9, r2
 800bcfe:	690a      	ldr	r2, [r1, #16]
 800bd00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	bfb8      	it	lt
 800bd08:	460b      	movlt	r3, r1
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	bfbc      	itt	lt
 800bd0e:	464c      	movlt	r4, r9
 800bd10:	4699      	movlt	r9, r3
 800bd12:	6927      	ldr	r7, [r4, #16]
 800bd14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd18:	68a3      	ldr	r3, [r4, #8]
 800bd1a:	6861      	ldr	r1, [r4, #4]
 800bd1c:	eb07 060a 	add.w	r6, r7, sl
 800bd20:	42b3      	cmp	r3, r6
 800bd22:	b085      	sub	sp, #20
 800bd24:	bfb8      	it	lt
 800bd26:	3101      	addlt	r1, #1
 800bd28:	f7ff fed8 	bl	800badc <_Balloc>
 800bd2c:	b930      	cbnz	r0, 800bd3c <__multiply+0x44>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	4b44      	ldr	r3, [pc, #272]	; (800be44 <__multiply+0x14c>)
 800bd32:	4845      	ldr	r0, [pc, #276]	; (800be48 <__multiply+0x150>)
 800bd34:	f240 115d 	movw	r1, #349	; 0x15d
 800bd38:	f000 fcb6 	bl	800c6a8 <__assert_func>
 800bd3c:	f100 0514 	add.w	r5, r0, #20
 800bd40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd44:	462b      	mov	r3, r5
 800bd46:	2200      	movs	r2, #0
 800bd48:	4543      	cmp	r3, r8
 800bd4a:	d321      	bcc.n	800bd90 <__multiply+0x98>
 800bd4c:	f104 0314 	add.w	r3, r4, #20
 800bd50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd54:	f109 0314 	add.w	r3, r9, #20
 800bd58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd5c:	9202      	str	r2, [sp, #8]
 800bd5e:	1b3a      	subs	r2, r7, r4
 800bd60:	3a15      	subs	r2, #21
 800bd62:	f022 0203 	bic.w	r2, r2, #3
 800bd66:	3204      	adds	r2, #4
 800bd68:	f104 0115 	add.w	r1, r4, #21
 800bd6c:	428f      	cmp	r7, r1
 800bd6e:	bf38      	it	cc
 800bd70:	2204      	movcc	r2, #4
 800bd72:	9201      	str	r2, [sp, #4]
 800bd74:	9a02      	ldr	r2, [sp, #8]
 800bd76:	9303      	str	r3, [sp, #12]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d80c      	bhi.n	800bd96 <__multiply+0x9e>
 800bd7c:	2e00      	cmp	r6, #0
 800bd7e:	dd03      	ble.n	800bd88 <__multiply+0x90>
 800bd80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d05a      	beq.n	800be3e <__multiply+0x146>
 800bd88:	6106      	str	r6, [r0, #16]
 800bd8a:	b005      	add	sp, #20
 800bd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd90:	f843 2b04 	str.w	r2, [r3], #4
 800bd94:	e7d8      	b.n	800bd48 <__multiply+0x50>
 800bd96:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd9a:	f1ba 0f00 	cmp.w	sl, #0
 800bd9e:	d024      	beq.n	800bdea <__multiply+0xf2>
 800bda0:	f104 0e14 	add.w	lr, r4, #20
 800bda4:	46a9      	mov	r9, r5
 800bda6:	f04f 0c00 	mov.w	ip, #0
 800bdaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdae:	f8d9 1000 	ldr.w	r1, [r9]
 800bdb2:	fa1f fb82 	uxth.w	fp, r2
 800bdb6:	b289      	uxth	r1, r1
 800bdb8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdc0:	f8d9 2000 	ldr.w	r2, [r9]
 800bdc4:	4461      	add	r1, ip
 800bdc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdca:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdd2:	b289      	uxth	r1, r1
 800bdd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdd8:	4577      	cmp	r7, lr
 800bdda:	f849 1b04 	str.w	r1, [r9], #4
 800bdde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bde2:	d8e2      	bhi.n	800bdaa <__multiply+0xb2>
 800bde4:	9a01      	ldr	r2, [sp, #4]
 800bde6:	f845 c002 	str.w	ip, [r5, r2]
 800bdea:	9a03      	ldr	r2, [sp, #12]
 800bdec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	f1b9 0f00 	cmp.w	r9, #0
 800bdf6:	d020      	beq.n	800be3a <__multiply+0x142>
 800bdf8:	6829      	ldr	r1, [r5, #0]
 800bdfa:	f104 0c14 	add.w	ip, r4, #20
 800bdfe:	46ae      	mov	lr, r5
 800be00:	f04f 0a00 	mov.w	sl, #0
 800be04:	f8bc b000 	ldrh.w	fp, [ip]
 800be08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be0c:	fb09 220b 	mla	r2, r9, fp, r2
 800be10:	4492      	add	sl, r2
 800be12:	b289      	uxth	r1, r1
 800be14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be18:	f84e 1b04 	str.w	r1, [lr], #4
 800be1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be20:	f8be 1000 	ldrh.w	r1, [lr]
 800be24:	0c12      	lsrs	r2, r2, #16
 800be26:	fb09 1102 	mla	r1, r9, r2, r1
 800be2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be2e:	4567      	cmp	r7, ip
 800be30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be34:	d8e6      	bhi.n	800be04 <__multiply+0x10c>
 800be36:	9a01      	ldr	r2, [sp, #4]
 800be38:	50a9      	str	r1, [r5, r2]
 800be3a:	3504      	adds	r5, #4
 800be3c:	e79a      	b.n	800bd74 <__multiply+0x7c>
 800be3e:	3e01      	subs	r6, #1
 800be40:	e79c      	b.n	800bd7c <__multiply+0x84>
 800be42:	bf00      	nop
 800be44:	0800d42f 	.word	0x0800d42f
 800be48:	0800d440 	.word	0x0800d440

0800be4c <__pow5mult>:
 800be4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be50:	4615      	mov	r5, r2
 800be52:	f012 0203 	ands.w	r2, r2, #3
 800be56:	4606      	mov	r6, r0
 800be58:	460f      	mov	r7, r1
 800be5a:	d007      	beq.n	800be6c <__pow5mult+0x20>
 800be5c:	4c25      	ldr	r4, [pc, #148]	; (800bef4 <__pow5mult+0xa8>)
 800be5e:	3a01      	subs	r2, #1
 800be60:	2300      	movs	r3, #0
 800be62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be66:	f7ff fe9b 	bl	800bba0 <__multadd>
 800be6a:	4607      	mov	r7, r0
 800be6c:	10ad      	asrs	r5, r5, #2
 800be6e:	d03d      	beq.n	800beec <__pow5mult+0xa0>
 800be70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be72:	b97c      	cbnz	r4, 800be94 <__pow5mult+0x48>
 800be74:	2010      	movs	r0, #16
 800be76:	f7ff fe29 	bl	800bacc <malloc>
 800be7a:	4602      	mov	r2, r0
 800be7c:	6270      	str	r0, [r6, #36]	; 0x24
 800be7e:	b928      	cbnz	r0, 800be8c <__pow5mult+0x40>
 800be80:	4b1d      	ldr	r3, [pc, #116]	; (800bef8 <__pow5mult+0xac>)
 800be82:	481e      	ldr	r0, [pc, #120]	; (800befc <__pow5mult+0xb0>)
 800be84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be88:	f000 fc0e 	bl	800c6a8 <__assert_func>
 800be8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be90:	6004      	str	r4, [r0, #0]
 800be92:	60c4      	str	r4, [r0, #12]
 800be94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be9c:	b94c      	cbnz	r4, 800beb2 <__pow5mult+0x66>
 800be9e:	f240 2171 	movw	r1, #625	; 0x271
 800bea2:	4630      	mov	r0, r6
 800bea4:	f7ff ff12 	bl	800bccc <__i2b>
 800bea8:	2300      	movs	r3, #0
 800beaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800beae:	4604      	mov	r4, r0
 800beb0:	6003      	str	r3, [r0, #0]
 800beb2:	f04f 0900 	mov.w	r9, #0
 800beb6:	07eb      	lsls	r3, r5, #31
 800beb8:	d50a      	bpl.n	800bed0 <__pow5mult+0x84>
 800beba:	4639      	mov	r1, r7
 800bebc:	4622      	mov	r2, r4
 800bebe:	4630      	mov	r0, r6
 800bec0:	f7ff ff1a 	bl	800bcf8 <__multiply>
 800bec4:	4639      	mov	r1, r7
 800bec6:	4680      	mov	r8, r0
 800bec8:	4630      	mov	r0, r6
 800beca:	f7ff fe47 	bl	800bb5c <_Bfree>
 800bece:	4647      	mov	r7, r8
 800bed0:	106d      	asrs	r5, r5, #1
 800bed2:	d00b      	beq.n	800beec <__pow5mult+0xa0>
 800bed4:	6820      	ldr	r0, [r4, #0]
 800bed6:	b938      	cbnz	r0, 800bee8 <__pow5mult+0x9c>
 800bed8:	4622      	mov	r2, r4
 800beda:	4621      	mov	r1, r4
 800bedc:	4630      	mov	r0, r6
 800bede:	f7ff ff0b 	bl	800bcf8 <__multiply>
 800bee2:	6020      	str	r0, [r4, #0]
 800bee4:	f8c0 9000 	str.w	r9, [r0]
 800bee8:	4604      	mov	r4, r0
 800beea:	e7e4      	b.n	800beb6 <__pow5mult+0x6a>
 800beec:	4638      	mov	r0, r7
 800beee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef2:	bf00      	nop
 800bef4:	0800d590 	.word	0x0800d590
 800bef8:	0800d3bd 	.word	0x0800d3bd
 800befc:	0800d440 	.word	0x0800d440

0800bf00 <__lshift>:
 800bf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	6849      	ldr	r1, [r1, #4]
 800bf08:	6923      	ldr	r3, [r4, #16]
 800bf0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	4607      	mov	r7, r0
 800bf12:	4691      	mov	r9, r2
 800bf14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf18:	f108 0601 	add.w	r6, r8, #1
 800bf1c:	42b3      	cmp	r3, r6
 800bf1e:	db0b      	blt.n	800bf38 <__lshift+0x38>
 800bf20:	4638      	mov	r0, r7
 800bf22:	f7ff fddb 	bl	800badc <_Balloc>
 800bf26:	4605      	mov	r5, r0
 800bf28:	b948      	cbnz	r0, 800bf3e <__lshift+0x3e>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	4b2a      	ldr	r3, [pc, #168]	; (800bfd8 <__lshift+0xd8>)
 800bf2e:	482b      	ldr	r0, [pc, #172]	; (800bfdc <__lshift+0xdc>)
 800bf30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf34:	f000 fbb8 	bl	800c6a8 <__assert_func>
 800bf38:	3101      	adds	r1, #1
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	e7ee      	b.n	800bf1c <__lshift+0x1c>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f100 0114 	add.w	r1, r0, #20
 800bf44:	f100 0210 	add.w	r2, r0, #16
 800bf48:	4618      	mov	r0, r3
 800bf4a:	4553      	cmp	r3, sl
 800bf4c:	db37      	blt.n	800bfbe <__lshift+0xbe>
 800bf4e:	6920      	ldr	r0, [r4, #16]
 800bf50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf54:	f104 0314 	add.w	r3, r4, #20
 800bf58:	f019 091f 	ands.w	r9, r9, #31
 800bf5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf64:	d02f      	beq.n	800bfc6 <__lshift+0xc6>
 800bf66:	f1c9 0e20 	rsb	lr, r9, #32
 800bf6a:	468a      	mov	sl, r1
 800bf6c:	f04f 0c00 	mov.w	ip, #0
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	fa02 f209 	lsl.w	r2, r2, r9
 800bf76:	ea42 020c 	orr.w	r2, r2, ip
 800bf7a:	f84a 2b04 	str.w	r2, [sl], #4
 800bf7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf82:	4298      	cmp	r0, r3
 800bf84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf88:	d8f2      	bhi.n	800bf70 <__lshift+0x70>
 800bf8a:	1b03      	subs	r3, r0, r4
 800bf8c:	3b15      	subs	r3, #21
 800bf8e:	f023 0303 	bic.w	r3, r3, #3
 800bf92:	3304      	adds	r3, #4
 800bf94:	f104 0215 	add.w	r2, r4, #21
 800bf98:	4290      	cmp	r0, r2
 800bf9a:	bf38      	it	cc
 800bf9c:	2304      	movcc	r3, #4
 800bf9e:	f841 c003 	str.w	ip, [r1, r3]
 800bfa2:	f1bc 0f00 	cmp.w	ip, #0
 800bfa6:	d001      	beq.n	800bfac <__lshift+0xac>
 800bfa8:	f108 0602 	add.w	r6, r8, #2
 800bfac:	3e01      	subs	r6, #1
 800bfae:	4638      	mov	r0, r7
 800bfb0:	612e      	str	r6, [r5, #16]
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	f7ff fdd2 	bl	800bb5c <_Bfree>
 800bfb8:	4628      	mov	r0, r5
 800bfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfbe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	e7c1      	b.n	800bf4a <__lshift+0x4a>
 800bfc6:	3904      	subs	r1, #4
 800bfc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfcc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfd0:	4298      	cmp	r0, r3
 800bfd2:	d8f9      	bhi.n	800bfc8 <__lshift+0xc8>
 800bfd4:	e7ea      	b.n	800bfac <__lshift+0xac>
 800bfd6:	bf00      	nop
 800bfd8:	0800d42f 	.word	0x0800d42f
 800bfdc:	0800d440 	.word	0x0800d440

0800bfe0 <__mcmp>:
 800bfe0:	b530      	push	{r4, r5, lr}
 800bfe2:	6902      	ldr	r2, [r0, #16]
 800bfe4:	690c      	ldr	r4, [r1, #16]
 800bfe6:	1b12      	subs	r2, r2, r4
 800bfe8:	d10e      	bne.n	800c008 <__mcmp+0x28>
 800bfea:	f100 0314 	add.w	r3, r0, #20
 800bfee:	3114      	adds	r1, #20
 800bff0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bff4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bff8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bffc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c000:	42a5      	cmp	r5, r4
 800c002:	d003      	beq.n	800c00c <__mcmp+0x2c>
 800c004:	d305      	bcc.n	800c012 <__mcmp+0x32>
 800c006:	2201      	movs	r2, #1
 800c008:	4610      	mov	r0, r2
 800c00a:	bd30      	pop	{r4, r5, pc}
 800c00c:	4283      	cmp	r3, r0
 800c00e:	d3f3      	bcc.n	800bff8 <__mcmp+0x18>
 800c010:	e7fa      	b.n	800c008 <__mcmp+0x28>
 800c012:	f04f 32ff 	mov.w	r2, #4294967295
 800c016:	e7f7      	b.n	800c008 <__mcmp+0x28>

0800c018 <__mdiff>:
 800c018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	460c      	mov	r4, r1
 800c01e:	4606      	mov	r6, r0
 800c020:	4611      	mov	r1, r2
 800c022:	4620      	mov	r0, r4
 800c024:	4690      	mov	r8, r2
 800c026:	f7ff ffdb 	bl	800bfe0 <__mcmp>
 800c02a:	1e05      	subs	r5, r0, #0
 800c02c:	d110      	bne.n	800c050 <__mdiff+0x38>
 800c02e:	4629      	mov	r1, r5
 800c030:	4630      	mov	r0, r6
 800c032:	f7ff fd53 	bl	800badc <_Balloc>
 800c036:	b930      	cbnz	r0, 800c046 <__mdiff+0x2e>
 800c038:	4b3a      	ldr	r3, [pc, #232]	; (800c124 <__mdiff+0x10c>)
 800c03a:	4602      	mov	r2, r0
 800c03c:	f240 2132 	movw	r1, #562	; 0x232
 800c040:	4839      	ldr	r0, [pc, #228]	; (800c128 <__mdiff+0x110>)
 800c042:	f000 fb31 	bl	800c6a8 <__assert_func>
 800c046:	2301      	movs	r3, #1
 800c048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c04c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c050:	bfa4      	itt	ge
 800c052:	4643      	movge	r3, r8
 800c054:	46a0      	movge	r8, r4
 800c056:	4630      	mov	r0, r6
 800c058:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c05c:	bfa6      	itte	ge
 800c05e:	461c      	movge	r4, r3
 800c060:	2500      	movge	r5, #0
 800c062:	2501      	movlt	r5, #1
 800c064:	f7ff fd3a 	bl	800badc <_Balloc>
 800c068:	b920      	cbnz	r0, 800c074 <__mdiff+0x5c>
 800c06a:	4b2e      	ldr	r3, [pc, #184]	; (800c124 <__mdiff+0x10c>)
 800c06c:	4602      	mov	r2, r0
 800c06e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c072:	e7e5      	b.n	800c040 <__mdiff+0x28>
 800c074:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c078:	6926      	ldr	r6, [r4, #16]
 800c07a:	60c5      	str	r5, [r0, #12]
 800c07c:	f104 0914 	add.w	r9, r4, #20
 800c080:	f108 0514 	add.w	r5, r8, #20
 800c084:	f100 0e14 	add.w	lr, r0, #20
 800c088:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c08c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c090:	f108 0210 	add.w	r2, r8, #16
 800c094:	46f2      	mov	sl, lr
 800c096:	2100      	movs	r1, #0
 800c098:	f859 3b04 	ldr.w	r3, [r9], #4
 800c09c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0a0:	fa1f f883 	uxth.w	r8, r3
 800c0a4:	fa11 f18b 	uxtah	r1, r1, fp
 800c0a8:	0c1b      	lsrs	r3, r3, #16
 800c0aa:	eba1 0808 	sub.w	r8, r1, r8
 800c0ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0b6:	fa1f f888 	uxth.w	r8, r8
 800c0ba:	1419      	asrs	r1, r3, #16
 800c0bc:	454e      	cmp	r6, r9
 800c0be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0c2:	f84a 3b04 	str.w	r3, [sl], #4
 800c0c6:	d8e7      	bhi.n	800c098 <__mdiff+0x80>
 800c0c8:	1b33      	subs	r3, r6, r4
 800c0ca:	3b15      	subs	r3, #21
 800c0cc:	f023 0303 	bic.w	r3, r3, #3
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	3415      	adds	r4, #21
 800c0d4:	42a6      	cmp	r6, r4
 800c0d6:	bf38      	it	cc
 800c0d8:	2304      	movcc	r3, #4
 800c0da:	441d      	add	r5, r3
 800c0dc:	4473      	add	r3, lr
 800c0de:	469e      	mov	lr, r3
 800c0e0:	462e      	mov	r6, r5
 800c0e2:	4566      	cmp	r6, ip
 800c0e4:	d30e      	bcc.n	800c104 <__mdiff+0xec>
 800c0e6:	f10c 0203 	add.w	r2, ip, #3
 800c0ea:	1b52      	subs	r2, r2, r5
 800c0ec:	f022 0203 	bic.w	r2, r2, #3
 800c0f0:	3d03      	subs	r5, #3
 800c0f2:	45ac      	cmp	ip, r5
 800c0f4:	bf38      	it	cc
 800c0f6:	2200      	movcc	r2, #0
 800c0f8:	441a      	add	r2, r3
 800c0fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0fe:	b17b      	cbz	r3, 800c120 <__mdiff+0x108>
 800c100:	6107      	str	r7, [r0, #16]
 800c102:	e7a3      	b.n	800c04c <__mdiff+0x34>
 800c104:	f856 8b04 	ldr.w	r8, [r6], #4
 800c108:	fa11 f288 	uxtah	r2, r1, r8
 800c10c:	1414      	asrs	r4, r2, #16
 800c10e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c112:	b292      	uxth	r2, r2
 800c114:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c118:	f84e 2b04 	str.w	r2, [lr], #4
 800c11c:	1421      	asrs	r1, r4, #16
 800c11e:	e7e0      	b.n	800c0e2 <__mdiff+0xca>
 800c120:	3f01      	subs	r7, #1
 800c122:	e7ea      	b.n	800c0fa <__mdiff+0xe2>
 800c124:	0800d42f 	.word	0x0800d42f
 800c128:	0800d440 	.word	0x0800d440

0800c12c <__d2b>:
 800c12c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c130:	4689      	mov	r9, r1
 800c132:	2101      	movs	r1, #1
 800c134:	ec57 6b10 	vmov	r6, r7, d0
 800c138:	4690      	mov	r8, r2
 800c13a:	f7ff fccf 	bl	800badc <_Balloc>
 800c13e:	4604      	mov	r4, r0
 800c140:	b930      	cbnz	r0, 800c150 <__d2b+0x24>
 800c142:	4602      	mov	r2, r0
 800c144:	4b25      	ldr	r3, [pc, #148]	; (800c1dc <__d2b+0xb0>)
 800c146:	4826      	ldr	r0, [pc, #152]	; (800c1e0 <__d2b+0xb4>)
 800c148:	f240 310a 	movw	r1, #778	; 0x30a
 800c14c:	f000 faac 	bl	800c6a8 <__assert_func>
 800c150:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c154:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c158:	bb35      	cbnz	r5, 800c1a8 <__d2b+0x7c>
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	d028      	beq.n	800c1b2 <__d2b+0x86>
 800c160:	4668      	mov	r0, sp
 800c162:	9600      	str	r6, [sp, #0]
 800c164:	f7ff fd82 	bl	800bc6c <__lo0bits>
 800c168:	9900      	ldr	r1, [sp, #0]
 800c16a:	b300      	cbz	r0, 800c1ae <__d2b+0x82>
 800c16c:	9a01      	ldr	r2, [sp, #4]
 800c16e:	f1c0 0320 	rsb	r3, r0, #32
 800c172:	fa02 f303 	lsl.w	r3, r2, r3
 800c176:	430b      	orrs	r3, r1
 800c178:	40c2      	lsrs	r2, r0
 800c17a:	6163      	str	r3, [r4, #20]
 800c17c:	9201      	str	r2, [sp, #4]
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	61a3      	str	r3, [r4, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	bf14      	ite	ne
 800c186:	2202      	movne	r2, #2
 800c188:	2201      	moveq	r2, #1
 800c18a:	6122      	str	r2, [r4, #16]
 800c18c:	b1d5      	cbz	r5, 800c1c4 <__d2b+0x98>
 800c18e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c192:	4405      	add	r5, r0
 800c194:	f8c9 5000 	str.w	r5, [r9]
 800c198:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c19c:	f8c8 0000 	str.w	r0, [r8]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	b003      	add	sp, #12
 800c1a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1ac:	e7d5      	b.n	800c15a <__d2b+0x2e>
 800c1ae:	6161      	str	r1, [r4, #20]
 800c1b0:	e7e5      	b.n	800c17e <__d2b+0x52>
 800c1b2:	a801      	add	r0, sp, #4
 800c1b4:	f7ff fd5a 	bl	800bc6c <__lo0bits>
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	6163      	str	r3, [r4, #20]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	6122      	str	r2, [r4, #16]
 800c1c0:	3020      	adds	r0, #32
 800c1c2:	e7e3      	b.n	800c18c <__d2b+0x60>
 800c1c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1cc:	f8c9 0000 	str.w	r0, [r9]
 800c1d0:	6918      	ldr	r0, [r3, #16]
 800c1d2:	f7ff fd2b 	bl	800bc2c <__hi0bits>
 800c1d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1da:	e7df      	b.n	800c19c <__d2b+0x70>
 800c1dc:	0800d42f 	.word	0x0800d42f
 800c1e0:	0800d440 	.word	0x0800d440

0800c1e4 <_calloc_r>:
 800c1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1e6:	fba1 2402 	umull	r2, r4, r1, r2
 800c1ea:	b94c      	cbnz	r4, 800c200 <_calloc_r+0x1c>
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	9201      	str	r2, [sp, #4]
 800c1f0:	f000 f87a 	bl	800c2e8 <_malloc_r>
 800c1f4:	9a01      	ldr	r2, [sp, #4]
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	b930      	cbnz	r0, 800c208 <_calloc_r+0x24>
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	b003      	add	sp, #12
 800c1fe:	bd30      	pop	{r4, r5, pc}
 800c200:	220c      	movs	r2, #12
 800c202:	6002      	str	r2, [r0, #0]
 800c204:	2500      	movs	r5, #0
 800c206:	e7f8      	b.n	800c1fa <_calloc_r+0x16>
 800c208:	4621      	mov	r1, r4
 800c20a:	f7fe f94f 	bl	800a4ac <memset>
 800c20e:	e7f4      	b.n	800c1fa <_calloc_r+0x16>

0800c210 <_free_r>:
 800c210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c212:	2900      	cmp	r1, #0
 800c214:	d044      	beq.n	800c2a0 <_free_r+0x90>
 800c216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c21a:	9001      	str	r0, [sp, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f1a1 0404 	sub.w	r4, r1, #4
 800c222:	bfb8      	it	lt
 800c224:	18e4      	addlt	r4, r4, r3
 800c226:	f000 fa9b 	bl	800c760 <__malloc_lock>
 800c22a:	4a1e      	ldr	r2, [pc, #120]	; (800c2a4 <_free_r+0x94>)
 800c22c:	9801      	ldr	r0, [sp, #4]
 800c22e:	6813      	ldr	r3, [r2, #0]
 800c230:	b933      	cbnz	r3, 800c240 <_free_r+0x30>
 800c232:	6063      	str	r3, [r4, #4]
 800c234:	6014      	str	r4, [r2, #0]
 800c236:	b003      	add	sp, #12
 800c238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c23c:	f000 ba96 	b.w	800c76c <__malloc_unlock>
 800c240:	42a3      	cmp	r3, r4
 800c242:	d908      	bls.n	800c256 <_free_r+0x46>
 800c244:	6825      	ldr	r5, [r4, #0]
 800c246:	1961      	adds	r1, r4, r5
 800c248:	428b      	cmp	r3, r1
 800c24a:	bf01      	itttt	eq
 800c24c:	6819      	ldreq	r1, [r3, #0]
 800c24e:	685b      	ldreq	r3, [r3, #4]
 800c250:	1949      	addeq	r1, r1, r5
 800c252:	6021      	streq	r1, [r4, #0]
 800c254:	e7ed      	b.n	800c232 <_free_r+0x22>
 800c256:	461a      	mov	r2, r3
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	b10b      	cbz	r3, 800c260 <_free_r+0x50>
 800c25c:	42a3      	cmp	r3, r4
 800c25e:	d9fa      	bls.n	800c256 <_free_r+0x46>
 800c260:	6811      	ldr	r1, [r2, #0]
 800c262:	1855      	adds	r5, r2, r1
 800c264:	42a5      	cmp	r5, r4
 800c266:	d10b      	bne.n	800c280 <_free_r+0x70>
 800c268:	6824      	ldr	r4, [r4, #0]
 800c26a:	4421      	add	r1, r4
 800c26c:	1854      	adds	r4, r2, r1
 800c26e:	42a3      	cmp	r3, r4
 800c270:	6011      	str	r1, [r2, #0]
 800c272:	d1e0      	bne.n	800c236 <_free_r+0x26>
 800c274:	681c      	ldr	r4, [r3, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	6053      	str	r3, [r2, #4]
 800c27a:	4421      	add	r1, r4
 800c27c:	6011      	str	r1, [r2, #0]
 800c27e:	e7da      	b.n	800c236 <_free_r+0x26>
 800c280:	d902      	bls.n	800c288 <_free_r+0x78>
 800c282:	230c      	movs	r3, #12
 800c284:	6003      	str	r3, [r0, #0]
 800c286:	e7d6      	b.n	800c236 <_free_r+0x26>
 800c288:	6825      	ldr	r5, [r4, #0]
 800c28a:	1961      	adds	r1, r4, r5
 800c28c:	428b      	cmp	r3, r1
 800c28e:	bf04      	itt	eq
 800c290:	6819      	ldreq	r1, [r3, #0]
 800c292:	685b      	ldreq	r3, [r3, #4]
 800c294:	6063      	str	r3, [r4, #4]
 800c296:	bf04      	itt	eq
 800c298:	1949      	addeq	r1, r1, r5
 800c29a:	6021      	streq	r1, [r4, #0]
 800c29c:	6054      	str	r4, [r2, #4]
 800c29e:	e7ca      	b.n	800c236 <_free_r+0x26>
 800c2a0:	b003      	add	sp, #12
 800c2a2:	bd30      	pop	{r4, r5, pc}
 800c2a4:	200021b0 	.word	0x200021b0

0800c2a8 <sbrk_aligned>:
 800c2a8:	b570      	push	{r4, r5, r6, lr}
 800c2aa:	4e0e      	ldr	r6, [pc, #56]	; (800c2e4 <sbrk_aligned+0x3c>)
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	6831      	ldr	r1, [r6, #0]
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	b911      	cbnz	r1, 800c2ba <sbrk_aligned+0x12>
 800c2b4:	f000 f9e8 	bl	800c688 <_sbrk_r>
 800c2b8:	6030      	str	r0, [r6, #0]
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f000 f9e3 	bl	800c688 <_sbrk_r>
 800c2c2:	1c43      	adds	r3, r0, #1
 800c2c4:	d00a      	beq.n	800c2dc <sbrk_aligned+0x34>
 800c2c6:	1cc4      	adds	r4, r0, #3
 800c2c8:	f024 0403 	bic.w	r4, r4, #3
 800c2cc:	42a0      	cmp	r0, r4
 800c2ce:	d007      	beq.n	800c2e0 <sbrk_aligned+0x38>
 800c2d0:	1a21      	subs	r1, r4, r0
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f000 f9d8 	bl	800c688 <_sbrk_r>
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d101      	bne.n	800c2e0 <sbrk_aligned+0x38>
 800c2dc:	f04f 34ff 	mov.w	r4, #4294967295
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	200021b4 	.word	0x200021b4

0800c2e8 <_malloc_r>:
 800c2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ec:	1ccd      	adds	r5, r1, #3
 800c2ee:	f025 0503 	bic.w	r5, r5, #3
 800c2f2:	3508      	adds	r5, #8
 800c2f4:	2d0c      	cmp	r5, #12
 800c2f6:	bf38      	it	cc
 800c2f8:	250c      	movcc	r5, #12
 800c2fa:	2d00      	cmp	r5, #0
 800c2fc:	4607      	mov	r7, r0
 800c2fe:	db01      	blt.n	800c304 <_malloc_r+0x1c>
 800c300:	42a9      	cmp	r1, r5
 800c302:	d905      	bls.n	800c310 <_malloc_r+0x28>
 800c304:	230c      	movs	r3, #12
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	2600      	movs	r6, #0
 800c30a:	4630      	mov	r0, r6
 800c30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c310:	4e2e      	ldr	r6, [pc, #184]	; (800c3cc <_malloc_r+0xe4>)
 800c312:	f000 fa25 	bl	800c760 <__malloc_lock>
 800c316:	6833      	ldr	r3, [r6, #0]
 800c318:	461c      	mov	r4, r3
 800c31a:	bb34      	cbnz	r4, 800c36a <_malloc_r+0x82>
 800c31c:	4629      	mov	r1, r5
 800c31e:	4638      	mov	r0, r7
 800c320:	f7ff ffc2 	bl	800c2a8 <sbrk_aligned>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	4604      	mov	r4, r0
 800c328:	d14d      	bne.n	800c3c6 <_malloc_r+0xde>
 800c32a:	6834      	ldr	r4, [r6, #0]
 800c32c:	4626      	mov	r6, r4
 800c32e:	2e00      	cmp	r6, #0
 800c330:	d140      	bne.n	800c3b4 <_malloc_r+0xcc>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	4631      	mov	r1, r6
 800c336:	4638      	mov	r0, r7
 800c338:	eb04 0803 	add.w	r8, r4, r3
 800c33c:	f000 f9a4 	bl	800c688 <_sbrk_r>
 800c340:	4580      	cmp	r8, r0
 800c342:	d13a      	bne.n	800c3ba <_malloc_r+0xd2>
 800c344:	6821      	ldr	r1, [r4, #0]
 800c346:	3503      	adds	r5, #3
 800c348:	1a6d      	subs	r5, r5, r1
 800c34a:	f025 0503 	bic.w	r5, r5, #3
 800c34e:	3508      	adds	r5, #8
 800c350:	2d0c      	cmp	r5, #12
 800c352:	bf38      	it	cc
 800c354:	250c      	movcc	r5, #12
 800c356:	4629      	mov	r1, r5
 800c358:	4638      	mov	r0, r7
 800c35a:	f7ff ffa5 	bl	800c2a8 <sbrk_aligned>
 800c35e:	3001      	adds	r0, #1
 800c360:	d02b      	beq.n	800c3ba <_malloc_r+0xd2>
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	442b      	add	r3, r5
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	e00e      	b.n	800c388 <_malloc_r+0xa0>
 800c36a:	6822      	ldr	r2, [r4, #0]
 800c36c:	1b52      	subs	r2, r2, r5
 800c36e:	d41e      	bmi.n	800c3ae <_malloc_r+0xc6>
 800c370:	2a0b      	cmp	r2, #11
 800c372:	d916      	bls.n	800c3a2 <_malloc_r+0xba>
 800c374:	1961      	adds	r1, r4, r5
 800c376:	42a3      	cmp	r3, r4
 800c378:	6025      	str	r5, [r4, #0]
 800c37a:	bf18      	it	ne
 800c37c:	6059      	strne	r1, [r3, #4]
 800c37e:	6863      	ldr	r3, [r4, #4]
 800c380:	bf08      	it	eq
 800c382:	6031      	streq	r1, [r6, #0]
 800c384:	5162      	str	r2, [r4, r5]
 800c386:	604b      	str	r3, [r1, #4]
 800c388:	4638      	mov	r0, r7
 800c38a:	f104 060b 	add.w	r6, r4, #11
 800c38e:	f000 f9ed 	bl	800c76c <__malloc_unlock>
 800c392:	f026 0607 	bic.w	r6, r6, #7
 800c396:	1d23      	adds	r3, r4, #4
 800c398:	1af2      	subs	r2, r6, r3
 800c39a:	d0b6      	beq.n	800c30a <_malloc_r+0x22>
 800c39c:	1b9b      	subs	r3, r3, r6
 800c39e:	50a3      	str	r3, [r4, r2]
 800c3a0:	e7b3      	b.n	800c30a <_malloc_r+0x22>
 800c3a2:	6862      	ldr	r2, [r4, #4]
 800c3a4:	42a3      	cmp	r3, r4
 800c3a6:	bf0c      	ite	eq
 800c3a8:	6032      	streq	r2, [r6, #0]
 800c3aa:	605a      	strne	r2, [r3, #4]
 800c3ac:	e7ec      	b.n	800c388 <_malloc_r+0xa0>
 800c3ae:	4623      	mov	r3, r4
 800c3b0:	6864      	ldr	r4, [r4, #4]
 800c3b2:	e7b2      	b.n	800c31a <_malloc_r+0x32>
 800c3b4:	4634      	mov	r4, r6
 800c3b6:	6876      	ldr	r6, [r6, #4]
 800c3b8:	e7b9      	b.n	800c32e <_malloc_r+0x46>
 800c3ba:	230c      	movs	r3, #12
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	4638      	mov	r0, r7
 800c3c0:	f000 f9d4 	bl	800c76c <__malloc_unlock>
 800c3c4:	e7a1      	b.n	800c30a <_malloc_r+0x22>
 800c3c6:	6025      	str	r5, [r4, #0]
 800c3c8:	e7de      	b.n	800c388 <_malloc_r+0xa0>
 800c3ca:	bf00      	nop
 800c3cc:	200021b0 	.word	0x200021b0

0800c3d0 <__ssputs_r>:
 800c3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d4:	688e      	ldr	r6, [r1, #8]
 800c3d6:	429e      	cmp	r6, r3
 800c3d8:	4682      	mov	sl, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	4690      	mov	r8, r2
 800c3de:	461f      	mov	r7, r3
 800c3e0:	d838      	bhi.n	800c454 <__ssputs_r+0x84>
 800c3e2:	898a      	ldrh	r2, [r1, #12]
 800c3e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3e8:	d032      	beq.n	800c450 <__ssputs_r+0x80>
 800c3ea:	6825      	ldr	r5, [r4, #0]
 800c3ec:	6909      	ldr	r1, [r1, #16]
 800c3ee:	eba5 0901 	sub.w	r9, r5, r1
 800c3f2:	6965      	ldr	r5, [r4, #20]
 800c3f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	444b      	add	r3, r9
 800c400:	106d      	asrs	r5, r5, #1
 800c402:	429d      	cmp	r5, r3
 800c404:	bf38      	it	cc
 800c406:	461d      	movcc	r5, r3
 800c408:	0553      	lsls	r3, r2, #21
 800c40a:	d531      	bpl.n	800c470 <__ssputs_r+0xa0>
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7ff ff6b 	bl	800c2e8 <_malloc_r>
 800c412:	4606      	mov	r6, r0
 800c414:	b950      	cbnz	r0, 800c42c <__ssputs_r+0x5c>
 800c416:	230c      	movs	r3, #12
 800c418:	f8ca 3000 	str.w	r3, [sl]
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c422:	81a3      	strh	r3, [r4, #12]
 800c424:	f04f 30ff 	mov.w	r0, #4294967295
 800c428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42c:	6921      	ldr	r1, [r4, #16]
 800c42e:	464a      	mov	r2, r9
 800c430:	f7fe f82e 	bl	800a490 <memcpy>
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43e:	81a3      	strh	r3, [r4, #12]
 800c440:	6126      	str	r6, [r4, #16]
 800c442:	6165      	str	r5, [r4, #20]
 800c444:	444e      	add	r6, r9
 800c446:	eba5 0509 	sub.w	r5, r5, r9
 800c44a:	6026      	str	r6, [r4, #0]
 800c44c:	60a5      	str	r5, [r4, #8]
 800c44e:	463e      	mov	r6, r7
 800c450:	42be      	cmp	r6, r7
 800c452:	d900      	bls.n	800c456 <__ssputs_r+0x86>
 800c454:	463e      	mov	r6, r7
 800c456:	6820      	ldr	r0, [r4, #0]
 800c458:	4632      	mov	r2, r6
 800c45a:	4641      	mov	r1, r8
 800c45c:	f000 f966 	bl	800c72c <memmove>
 800c460:	68a3      	ldr	r3, [r4, #8]
 800c462:	1b9b      	subs	r3, r3, r6
 800c464:	60a3      	str	r3, [r4, #8]
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	4433      	add	r3, r6
 800c46a:	6023      	str	r3, [r4, #0]
 800c46c:	2000      	movs	r0, #0
 800c46e:	e7db      	b.n	800c428 <__ssputs_r+0x58>
 800c470:	462a      	mov	r2, r5
 800c472:	f000 f981 	bl	800c778 <_realloc_r>
 800c476:	4606      	mov	r6, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d1e1      	bne.n	800c440 <__ssputs_r+0x70>
 800c47c:	6921      	ldr	r1, [r4, #16]
 800c47e:	4650      	mov	r0, sl
 800c480:	f7ff fec6 	bl	800c210 <_free_r>
 800c484:	e7c7      	b.n	800c416 <__ssputs_r+0x46>
	...

0800c488 <_svfiprintf_r>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	4698      	mov	r8, r3
 800c48e:	898b      	ldrh	r3, [r1, #12]
 800c490:	061b      	lsls	r3, r3, #24
 800c492:	b09d      	sub	sp, #116	; 0x74
 800c494:	4607      	mov	r7, r0
 800c496:	460d      	mov	r5, r1
 800c498:	4614      	mov	r4, r2
 800c49a:	d50e      	bpl.n	800c4ba <_svfiprintf_r+0x32>
 800c49c:	690b      	ldr	r3, [r1, #16]
 800c49e:	b963      	cbnz	r3, 800c4ba <_svfiprintf_r+0x32>
 800c4a0:	2140      	movs	r1, #64	; 0x40
 800c4a2:	f7ff ff21 	bl	800c2e8 <_malloc_r>
 800c4a6:	6028      	str	r0, [r5, #0]
 800c4a8:	6128      	str	r0, [r5, #16]
 800c4aa:	b920      	cbnz	r0, 800c4b6 <_svfiprintf_r+0x2e>
 800c4ac:	230c      	movs	r3, #12
 800c4ae:	603b      	str	r3, [r7, #0]
 800c4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b4:	e0d1      	b.n	800c65a <_svfiprintf_r+0x1d2>
 800c4b6:	2340      	movs	r3, #64	; 0x40
 800c4b8:	616b      	str	r3, [r5, #20]
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c4be:	2320      	movs	r3, #32
 800c4c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4c8:	2330      	movs	r3, #48	; 0x30
 800c4ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c674 <_svfiprintf_r+0x1ec>
 800c4ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4d2:	f04f 0901 	mov.w	r9, #1
 800c4d6:	4623      	mov	r3, r4
 800c4d8:	469a      	mov	sl, r3
 800c4da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4de:	b10a      	cbz	r2, 800c4e4 <_svfiprintf_r+0x5c>
 800c4e0:	2a25      	cmp	r2, #37	; 0x25
 800c4e2:	d1f9      	bne.n	800c4d8 <_svfiprintf_r+0x50>
 800c4e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4e8:	d00b      	beq.n	800c502 <_svfiprintf_r+0x7a>
 800c4ea:	465b      	mov	r3, fp
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	f7ff ff6d 	bl	800c3d0 <__ssputs_r>
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	f000 80aa 	beq.w	800c650 <_svfiprintf_r+0x1c8>
 800c4fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4fe:	445a      	add	r2, fp
 800c500:	9209      	str	r2, [sp, #36]	; 0x24
 800c502:	f89a 3000 	ldrb.w	r3, [sl]
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 80a2 	beq.w	800c650 <_svfiprintf_r+0x1c8>
 800c50c:	2300      	movs	r3, #0
 800c50e:	f04f 32ff 	mov.w	r2, #4294967295
 800c512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c516:	f10a 0a01 	add.w	sl, sl, #1
 800c51a:	9304      	str	r3, [sp, #16]
 800c51c:	9307      	str	r3, [sp, #28]
 800c51e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c522:	931a      	str	r3, [sp, #104]	; 0x68
 800c524:	4654      	mov	r4, sl
 800c526:	2205      	movs	r2, #5
 800c528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c52c:	4851      	ldr	r0, [pc, #324]	; (800c674 <_svfiprintf_r+0x1ec>)
 800c52e:	f7f3 fe6f 	bl	8000210 <memchr>
 800c532:	9a04      	ldr	r2, [sp, #16]
 800c534:	b9d8      	cbnz	r0, 800c56e <_svfiprintf_r+0xe6>
 800c536:	06d0      	lsls	r0, r2, #27
 800c538:	bf44      	itt	mi
 800c53a:	2320      	movmi	r3, #32
 800c53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c540:	0711      	lsls	r1, r2, #28
 800c542:	bf44      	itt	mi
 800c544:	232b      	movmi	r3, #43	; 0x2b
 800c546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c54a:	f89a 3000 	ldrb.w	r3, [sl]
 800c54e:	2b2a      	cmp	r3, #42	; 0x2a
 800c550:	d015      	beq.n	800c57e <_svfiprintf_r+0xf6>
 800c552:	9a07      	ldr	r2, [sp, #28]
 800c554:	4654      	mov	r4, sl
 800c556:	2000      	movs	r0, #0
 800c558:	f04f 0c0a 	mov.w	ip, #10
 800c55c:	4621      	mov	r1, r4
 800c55e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c562:	3b30      	subs	r3, #48	; 0x30
 800c564:	2b09      	cmp	r3, #9
 800c566:	d94e      	bls.n	800c606 <_svfiprintf_r+0x17e>
 800c568:	b1b0      	cbz	r0, 800c598 <_svfiprintf_r+0x110>
 800c56a:	9207      	str	r2, [sp, #28]
 800c56c:	e014      	b.n	800c598 <_svfiprintf_r+0x110>
 800c56e:	eba0 0308 	sub.w	r3, r0, r8
 800c572:	fa09 f303 	lsl.w	r3, r9, r3
 800c576:	4313      	orrs	r3, r2
 800c578:	9304      	str	r3, [sp, #16]
 800c57a:	46a2      	mov	sl, r4
 800c57c:	e7d2      	b.n	800c524 <_svfiprintf_r+0x9c>
 800c57e:	9b03      	ldr	r3, [sp, #12]
 800c580:	1d19      	adds	r1, r3, #4
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	9103      	str	r1, [sp, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	bfbb      	ittet	lt
 800c58a:	425b      	neglt	r3, r3
 800c58c:	f042 0202 	orrlt.w	r2, r2, #2
 800c590:	9307      	strge	r3, [sp, #28]
 800c592:	9307      	strlt	r3, [sp, #28]
 800c594:	bfb8      	it	lt
 800c596:	9204      	strlt	r2, [sp, #16]
 800c598:	7823      	ldrb	r3, [r4, #0]
 800c59a:	2b2e      	cmp	r3, #46	; 0x2e
 800c59c:	d10c      	bne.n	800c5b8 <_svfiprintf_r+0x130>
 800c59e:	7863      	ldrb	r3, [r4, #1]
 800c5a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5a2:	d135      	bne.n	800c610 <_svfiprintf_r+0x188>
 800c5a4:	9b03      	ldr	r3, [sp, #12]
 800c5a6:	1d1a      	adds	r2, r3, #4
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	9203      	str	r2, [sp, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	bfb8      	it	lt
 800c5b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5b4:	3402      	adds	r4, #2
 800c5b6:	9305      	str	r3, [sp, #20]
 800c5b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c684 <_svfiprintf_r+0x1fc>
 800c5bc:	7821      	ldrb	r1, [r4, #0]
 800c5be:	2203      	movs	r2, #3
 800c5c0:	4650      	mov	r0, sl
 800c5c2:	f7f3 fe25 	bl	8000210 <memchr>
 800c5c6:	b140      	cbz	r0, 800c5da <_svfiprintf_r+0x152>
 800c5c8:	2340      	movs	r3, #64	; 0x40
 800c5ca:	eba0 000a 	sub.w	r0, r0, sl
 800c5ce:	fa03 f000 	lsl.w	r0, r3, r0
 800c5d2:	9b04      	ldr	r3, [sp, #16]
 800c5d4:	4303      	orrs	r3, r0
 800c5d6:	3401      	adds	r4, #1
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5de:	4826      	ldr	r0, [pc, #152]	; (800c678 <_svfiprintf_r+0x1f0>)
 800c5e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5e4:	2206      	movs	r2, #6
 800c5e6:	f7f3 fe13 	bl	8000210 <memchr>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d038      	beq.n	800c660 <_svfiprintf_r+0x1d8>
 800c5ee:	4b23      	ldr	r3, [pc, #140]	; (800c67c <_svfiprintf_r+0x1f4>)
 800c5f0:	bb1b      	cbnz	r3, 800c63a <_svfiprintf_r+0x1b2>
 800c5f2:	9b03      	ldr	r3, [sp, #12]
 800c5f4:	3307      	adds	r3, #7
 800c5f6:	f023 0307 	bic.w	r3, r3, #7
 800c5fa:	3308      	adds	r3, #8
 800c5fc:	9303      	str	r3, [sp, #12]
 800c5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c600:	4433      	add	r3, r6
 800c602:	9309      	str	r3, [sp, #36]	; 0x24
 800c604:	e767      	b.n	800c4d6 <_svfiprintf_r+0x4e>
 800c606:	fb0c 3202 	mla	r2, ip, r2, r3
 800c60a:	460c      	mov	r4, r1
 800c60c:	2001      	movs	r0, #1
 800c60e:	e7a5      	b.n	800c55c <_svfiprintf_r+0xd4>
 800c610:	2300      	movs	r3, #0
 800c612:	3401      	adds	r4, #1
 800c614:	9305      	str	r3, [sp, #20]
 800c616:	4619      	mov	r1, r3
 800c618:	f04f 0c0a 	mov.w	ip, #10
 800c61c:	4620      	mov	r0, r4
 800c61e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c622:	3a30      	subs	r2, #48	; 0x30
 800c624:	2a09      	cmp	r2, #9
 800c626:	d903      	bls.n	800c630 <_svfiprintf_r+0x1a8>
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d0c5      	beq.n	800c5b8 <_svfiprintf_r+0x130>
 800c62c:	9105      	str	r1, [sp, #20]
 800c62e:	e7c3      	b.n	800c5b8 <_svfiprintf_r+0x130>
 800c630:	fb0c 2101 	mla	r1, ip, r1, r2
 800c634:	4604      	mov	r4, r0
 800c636:	2301      	movs	r3, #1
 800c638:	e7f0      	b.n	800c61c <_svfiprintf_r+0x194>
 800c63a:	ab03      	add	r3, sp, #12
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	462a      	mov	r2, r5
 800c640:	4b0f      	ldr	r3, [pc, #60]	; (800c680 <_svfiprintf_r+0x1f8>)
 800c642:	a904      	add	r1, sp, #16
 800c644:	4638      	mov	r0, r7
 800c646:	f7fd ffd9 	bl	800a5fc <_printf_float>
 800c64a:	1c42      	adds	r2, r0, #1
 800c64c:	4606      	mov	r6, r0
 800c64e:	d1d6      	bne.n	800c5fe <_svfiprintf_r+0x176>
 800c650:	89ab      	ldrh	r3, [r5, #12]
 800c652:	065b      	lsls	r3, r3, #25
 800c654:	f53f af2c 	bmi.w	800c4b0 <_svfiprintf_r+0x28>
 800c658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c65a:	b01d      	add	sp, #116	; 0x74
 800c65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c660:	ab03      	add	r3, sp, #12
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	462a      	mov	r2, r5
 800c666:	4b06      	ldr	r3, [pc, #24]	; (800c680 <_svfiprintf_r+0x1f8>)
 800c668:	a904      	add	r1, sp, #16
 800c66a:	4638      	mov	r0, r7
 800c66c:	f7fe fa6a 	bl	800ab44 <_printf_i>
 800c670:	e7eb      	b.n	800c64a <_svfiprintf_r+0x1c2>
 800c672:	bf00      	nop
 800c674:	0800d59c 	.word	0x0800d59c
 800c678:	0800d5a6 	.word	0x0800d5a6
 800c67c:	0800a5fd 	.word	0x0800a5fd
 800c680:	0800c3d1 	.word	0x0800c3d1
 800c684:	0800d5a2 	.word	0x0800d5a2

0800c688 <_sbrk_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d06      	ldr	r5, [pc, #24]	; (800c6a4 <_sbrk_r+0x1c>)
 800c68c:	2300      	movs	r3, #0
 800c68e:	4604      	mov	r4, r0
 800c690:	4608      	mov	r0, r1
 800c692:	602b      	str	r3, [r5, #0]
 800c694:	f7f5 fa1c 	bl	8001ad0 <_sbrk>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d102      	bne.n	800c6a2 <_sbrk_r+0x1a>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	b103      	cbz	r3, 800c6a2 <_sbrk_r+0x1a>
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	bd38      	pop	{r3, r4, r5, pc}
 800c6a4:	200021b8 	.word	0x200021b8

0800c6a8 <__assert_func>:
 800c6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6aa:	4614      	mov	r4, r2
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	4b09      	ldr	r3, [pc, #36]	; (800c6d4 <__assert_func+0x2c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	68d8      	ldr	r0, [r3, #12]
 800c6b6:	b14c      	cbz	r4, 800c6cc <__assert_func+0x24>
 800c6b8:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <__assert_func+0x30>)
 800c6ba:	9100      	str	r1, [sp, #0]
 800c6bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6c0:	4906      	ldr	r1, [pc, #24]	; (800c6dc <__assert_func+0x34>)
 800c6c2:	462b      	mov	r3, r5
 800c6c4:	f000 f80e 	bl	800c6e4 <fiprintf>
 800c6c8:	f000 faac 	bl	800cc24 <abort>
 800c6cc:	4b04      	ldr	r3, [pc, #16]	; (800c6e0 <__assert_func+0x38>)
 800c6ce:	461c      	mov	r4, r3
 800c6d0:	e7f3      	b.n	800c6ba <__assert_func+0x12>
 800c6d2:	bf00      	nop
 800c6d4:	20000010 	.word	0x20000010
 800c6d8:	0800d5ad 	.word	0x0800d5ad
 800c6dc:	0800d5ba 	.word	0x0800d5ba
 800c6e0:	0800d5e8 	.word	0x0800d5e8

0800c6e4 <fiprintf>:
 800c6e4:	b40e      	push	{r1, r2, r3}
 800c6e6:	b503      	push	{r0, r1, lr}
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	ab03      	add	r3, sp, #12
 800c6ec:	4805      	ldr	r0, [pc, #20]	; (800c704 <fiprintf+0x20>)
 800c6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f2:	6800      	ldr	r0, [r0, #0]
 800c6f4:	9301      	str	r3, [sp, #4]
 800c6f6:	f000 f897 	bl	800c828 <_vfiprintf_r>
 800c6fa:	b002      	add	sp, #8
 800c6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c700:	b003      	add	sp, #12
 800c702:	4770      	bx	lr
 800c704:	20000010 	.word	0x20000010

0800c708 <__ascii_mbtowc>:
 800c708:	b082      	sub	sp, #8
 800c70a:	b901      	cbnz	r1, 800c70e <__ascii_mbtowc+0x6>
 800c70c:	a901      	add	r1, sp, #4
 800c70e:	b142      	cbz	r2, 800c722 <__ascii_mbtowc+0x1a>
 800c710:	b14b      	cbz	r3, 800c726 <__ascii_mbtowc+0x1e>
 800c712:	7813      	ldrb	r3, [r2, #0]
 800c714:	600b      	str	r3, [r1, #0]
 800c716:	7812      	ldrb	r2, [r2, #0]
 800c718:	1e10      	subs	r0, r2, #0
 800c71a:	bf18      	it	ne
 800c71c:	2001      	movne	r0, #1
 800c71e:	b002      	add	sp, #8
 800c720:	4770      	bx	lr
 800c722:	4610      	mov	r0, r2
 800c724:	e7fb      	b.n	800c71e <__ascii_mbtowc+0x16>
 800c726:	f06f 0001 	mvn.w	r0, #1
 800c72a:	e7f8      	b.n	800c71e <__ascii_mbtowc+0x16>

0800c72c <memmove>:
 800c72c:	4288      	cmp	r0, r1
 800c72e:	b510      	push	{r4, lr}
 800c730:	eb01 0402 	add.w	r4, r1, r2
 800c734:	d902      	bls.n	800c73c <memmove+0x10>
 800c736:	4284      	cmp	r4, r0
 800c738:	4623      	mov	r3, r4
 800c73a:	d807      	bhi.n	800c74c <memmove+0x20>
 800c73c:	1e43      	subs	r3, r0, #1
 800c73e:	42a1      	cmp	r1, r4
 800c740:	d008      	beq.n	800c754 <memmove+0x28>
 800c742:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c74a:	e7f8      	b.n	800c73e <memmove+0x12>
 800c74c:	4402      	add	r2, r0
 800c74e:	4601      	mov	r1, r0
 800c750:	428a      	cmp	r2, r1
 800c752:	d100      	bne.n	800c756 <memmove+0x2a>
 800c754:	bd10      	pop	{r4, pc}
 800c756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c75a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c75e:	e7f7      	b.n	800c750 <memmove+0x24>

0800c760 <__malloc_lock>:
 800c760:	4801      	ldr	r0, [pc, #4]	; (800c768 <__malloc_lock+0x8>)
 800c762:	f000 bc1f 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800c766:	bf00      	nop
 800c768:	200021bc 	.word	0x200021bc

0800c76c <__malloc_unlock>:
 800c76c:	4801      	ldr	r0, [pc, #4]	; (800c774 <__malloc_unlock+0x8>)
 800c76e:	f000 bc1a 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800c772:	bf00      	nop
 800c774:	200021bc 	.word	0x200021bc

0800c778 <_realloc_r>:
 800c778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77c:	4680      	mov	r8, r0
 800c77e:	4614      	mov	r4, r2
 800c780:	460e      	mov	r6, r1
 800c782:	b921      	cbnz	r1, 800c78e <_realloc_r+0x16>
 800c784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c788:	4611      	mov	r1, r2
 800c78a:	f7ff bdad 	b.w	800c2e8 <_malloc_r>
 800c78e:	b92a      	cbnz	r2, 800c79c <_realloc_r+0x24>
 800c790:	f7ff fd3e 	bl	800c210 <_free_r>
 800c794:	4625      	mov	r5, r4
 800c796:	4628      	mov	r0, r5
 800c798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79c:	f000 fc6a 	bl	800d074 <_malloc_usable_size_r>
 800c7a0:	4284      	cmp	r4, r0
 800c7a2:	4607      	mov	r7, r0
 800c7a4:	d802      	bhi.n	800c7ac <_realloc_r+0x34>
 800c7a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7aa:	d812      	bhi.n	800c7d2 <_realloc_r+0x5a>
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	f7ff fd9a 	bl	800c2e8 <_malloc_r>
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d0ed      	beq.n	800c796 <_realloc_r+0x1e>
 800c7ba:	42bc      	cmp	r4, r7
 800c7bc:	4622      	mov	r2, r4
 800c7be:	4631      	mov	r1, r6
 800c7c0:	bf28      	it	cs
 800c7c2:	463a      	movcs	r2, r7
 800c7c4:	f7fd fe64 	bl	800a490 <memcpy>
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4640      	mov	r0, r8
 800c7cc:	f7ff fd20 	bl	800c210 <_free_r>
 800c7d0:	e7e1      	b.n	800c796 <_realloc_r+0x1e>
 800c7d2:	4635      	mov	r5, r6
 800c7d4:	e7df      	b.n	800c796 <_realloc_r+0x1e>

0800c7d6 <__sfputc_r>:
 800c7d6:	6893      	ldr	r3, [r2, #8]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	b410      	push	{r4}
 800c7de:	6093      	str	r3, [r2, #8]
 800c7e0:	da08      	bge.n	800c7f4 <__sfputc_r+0x1e>
 800c7e2:	6994      	ldr	r4, [r2, #24]
 800c7e4:	42a3      	cmp	r3, r4
 800c7e6:	db01      	blt.n	800c7ec <__sfputc_r+0x16>
 800c7e8:	290a      	cmp	r1, #10
 800c7ea:	d103      	bne.n	800c7f4 <__sfputc_r+0x1e>
 800c7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7f0:	f000 b94a 	b.w	800ca88 <__swbuf_r>
 800c7f4:	6813      	ldr	r3, [r2, #0]
 800c7f6:	1c58      	adds	r0, r3, #1
 800c7f8:	6010      	str	r0, [r2, #0]
 800c7fa:	7019      	strb	r1, [r3, #0]
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <__sfputs_r>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	4606      	mov	r6, r0
 800c808:	460f      	mov	r7, r1
 800c80a:	4614      	mov	r4, r2
 800c80c:	18d5      	adds	r5, r2, r3
 800c80e:	42ac      	cmp	r4, r5
 800c810:	d101      	bne.n	800c816 <__sfputs_r+0x12>
 800c812:	2000      	movs	r0, #0
 800c814:	e007      	b.n	800c826 <__sfputs_r+0x22>
 800c816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81a:	463a      	mov	r2, r7
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7ff ffda 	bl	800c7d6 <__sfputc_r>
 800c822:	1c43      	adds	r3, r0, #1
 800c824:	d1f3      	bne.n	800c80e <__sfputs_r+0xa>
 800c826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c828 <_vfiprintf_r>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	460d      	mov	r5, r1
 800c82e:	b09d      	sub	sp, #116	; 0x74
 800c830:	4614      	mov	r4, r2
 800c832:	4698      	mov	r8, r3
 800c834:	4606      	mov	r6, r0
 800c836:	b118      	cbz	r0, 800c840 <_vfiprintf_r+0x18>
 800c838:	6983      	ldr	r3, [r0, #24]
 800c83a:	b90b      	cbnz	r3, 800c840 <_vfiprintf_r+0x18>
 800c83c:	f000 fb14 	bl	800ce68 <__sinit>
 800c840:	4b89      	ldr	r3, [pc, #548]	; (800ca68 <_vfiprintf_r+0x240>)
 800c842:	429d      	cmp	r5, r3
 800c844:	d11b      	bne.n	800c87e <_vfiprintf_r+0x56>
 800c846:	6875      	ldr	r5, [r6, #4]
 800c848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c84a:	07d9      	lsls	r1, r3, #31
 800c84c:	d405      	bmi.n	800c85a <_vfiprintf_r+0x32>
 800c84e:	89ab      	ldrh	r3, [r5, #12]
 800c850:	059a      	lsls	r2, r3, #22
 800c852:	d402      	bmi.n	800c85a <_vfiprintf_r+0x32>
 800c854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c856:	f000 fba5 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	071b      	lsls	r3, r3, #28
 800c85e:	d501      	bpl.n	800c864 <_vfiprintf_r+0x3c>
 800c860:	692b      	ldr	r3, [r5, #16]
 800c862:	b9eb      	cbnz	r3, 800c8a0 <_vfiprintf_r+0x78>
 800c864:	4629      	mov	r1, r5
 800c866:	4630      	mov	r0, r6
 800c868:	f000 f96e 	bl	800cb48 <__swsetup_r>
 800c86c:	b1c0      	cbz	r0, 800c8a0 <_vfiprintf_r+0x78>
 800c86e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c870:	07dc      	lsls	r4, r3, #31
 800c872:	d50e      	bpl.n	800c892 <_vfiprintf_r+0x6a>
 800c874:	f04f 30ff 	mov.w	r0, #4294967295
 800c878:	b01d      	add	sp, #116	; 0x74
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	4b7b      	ldr	r3, [pc, #492]	; (800ca6c <_vfiprintf_r+0x244>)
 800c880:	429d      	cmp	r5, r3
 800c882:	d101      	bne.n	800c888 <_vfiprintf_r+0x60>
 800c884:	68b5      	ldr	r5, [r6, #8]
 800c886:	e7df      	b.n	800c848 <_vfiprintf_r+0x20>
 800c888:	4b79      	ldr	r3, [pc, #484]	; (800ca70 <_vfiprintf_r+0x248>)
 800c88a:	429d      	cmp	r5, r3
 800c88c:	bf08      	it	eq
 800c88e:	68f5      	ldreq	r5, [r6, #12]
 800c890:	e7da      	b.n	800c848 <_vfiprintf_r+0x20>
 800c892:	89ab      	ldrh	r3, [r5, #12]
 800c894:	0598      	lsls	r0, r3, #22
 800c896:	d4ed      	bmi.n	800c874 <_vfiprintf_r+0x4c>
 800c898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c89a:	f000 fb84 	bl	800cfa6 <__retarget_lock_release_recursive>
 800c89e:	e7e9      	b.n	800c874 <_vfiprintf_r+0x4c>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8a4:	2320      	movs	r3, #32
 800c8a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ae:	2330      	movs	r3, #48	; 0x30
 800c8b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca74 <_vfiprintf_r+0x24c>
 800c8b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8b8:	f04f 0901 	mov.w	r9, #1
 800c8bc:	4623      	mov	r3, r4
 800c8be:	469a      	mov	sl, r3
 800c8c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8c4:	b10a      	cbz	r2, 800c8ca <_vfiprintf_r+0xa2>
 800c8c6:	2a25      	cmp	r2, #37	; 0x25
 800c8c8:	d1f9      	bne.n	800c8be <_vfiprintf_r+0x96>
 800c8ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c8ce:	d00b      	beq.n	800c8e8 <_vfiprintf_r+0xc0>
 800c8d0:	465b      	mov	r3, fp
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f7ff ff94 	bl	800c804 <__sfputs_r>
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f000 80aa 	beq.w	800ca36 <_vfiprintf_r+0x20e>
 800c8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8e4:	445a      	add	r2, fp
 800c8e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c8e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 80a2 	beq.w	800ca36 <_vfiprintf_r+0x20e>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8fc:	f10a 0a01 	add.w	sl, sl, #1
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	9307      	str	r3, [sp, #28]
 800c904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c908:	931a      	str	r3, [sp, #104]	; 0x68
 800c90a:	4654      	mov	r4, sl
 800c90c:	2205      	movs	r2, #5
 800c90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c912:	4858      	ldr	r0, [pc, #352]	; (800ca74 <_vfiprintf_r+0x24c>)
 800c914:	f7f3 fc7c 	bl	8000210 <memchr>
 800c918:	9a04      	ldr	r2, [sp, #16]
 800c91a:	b9d8      	cbnz	r0, 800c954 <_vfiprintf_r+0x12c>
 800c91c:	06d1      	lsls	r1, r2, #27
 800c91e:	bf44      	itt	mi
 800c920:	2320      	movmi	r3, #32
 800c922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c926:	0713      	lsls	r3, r2, #28
 800c928:	bf44      	itt	mi
 800c92a:	232b      	movmi	r3, #43	; 0x2b
 800c92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c930:	f89a 3000 	ldrb.w	r3, [sl]
 800c934:	2b2a      	cmp	r3, #42	; 0x2a
 800c936:	d015      	beq.n	800c964 <_vfiprintf_r+0x13c>
 800c938:	9a07      	ldr	r2, [sp, #28]
 800c93a:	4654      	mov	r4, sl
 800c93c:	2000      	movs	r0, #0
 800c93e:	f04f 0c0a 	mov.w	ip, #10
 800c942:	4621      	mov	r1, r4
 800c944:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c948:	3b30      	subs	r3, #48	; 0x30
 800c94a:	2b09      	cmp	r3, #9
 800c94c:	d94e      	bls.n	800c9ec <_vfiprintf_r+0x1c4>
 800c94e:	b1b0      	cbz	r0, 800c97e <_vfiprintf_r+0x156>
 800c950:	9207      	str	r2, [sp, #28]
 800c952:	e014      	b.n	800c97e <_vfiprintf_r+0x156>
 800c954:	eba0 0308 	sub.w	r3, r0, r8
 800c958:	fa09 f303 	lsl.w	r3, r9, r3
 800c95c:	4313      	orrs	r3, r2
 800c95e:	9304      	str	r3, [sp, #16]
 800c960:	46a2      	mov	sl, r4
 800c962:	e7d2      	b.n	800c90a <_vfiprintf_r+0xe2>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	1d19      	adds	r1, r3, #4
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	9103      	str	r1, [sp, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfbb      	ittet	lt
 800c970:	425b      	neglt	r3, r3
 800c972:	f042 0202 	orrlt.w	r2, r2, #2
 800c976:	9307      	strge	r3, [sp, #28]
 800c978:	9307      	strlt	r3, [sp, #28]
 800c97a:	bfb8      	it	lt
 800c97c:	9204      	strlt	r2, [sp, #16]
 800c97e:	7823      	ldrb	r3, [r4, #0]
 800c980:	2b2e      	cmp	r3, #46	; 0x2e
 800c982:	d10c      	bne.n	800c99e <_vfiprintf_r+0x176>
 800c984:	7863      	ldrb	r3, [r4, #1]
 800c986:	2b2a      	cmp	r3, #42	; 0x2a
 800c988:	d135      	bne.n	800c9f6 <_vfiprintf_r+0x1ce>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	1d1a      	adds	r2, r3, #4
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	9203      	str	r2, [sp, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	bfb8      	it	lt
 800c996:	f04f 33ff 	movlt.w	r3, #4294967295
 800c99a:	3402      	adds	r4, #2
 800c99c:	9305      	str	r3, [sp, #20]
 800c99e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca84 <_vfiprintf_r+0x25c>
 800c9a2:	7821      	ldrb	r1, [r4, #0]
 800c9a4:	2203      	movs	r2, #3
 800c9a6:	4650      	mov	r0, sl
 800c9a8:	f7f3 fc32 	bl	8000210 <memchr>
 800c9ac:	b140      	cbz	r0, 800c9c0 <_vfiprintf_r+0x198>
 800c9ae:	2340      	movs	r3, #64	; 0x40
 800c9b0:	eba0 000a 	sub.w	r0, r0, sl
 800c9b4:	fa03 f000 	lsl.w	r0, r3, r0
 800c9b8:	9b04      	ldr	r3, [sp, #16]
 800c9ba:	4303      	orrs	r3, r0
 800c9bc:	3401      	adds	r4, #1
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c4:	482c      	ldr	r0, [pc, #176]	; (800ca78 <_vfiprintf_r+0x250>)
 800c9c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9ca:	2206      	movs	r2, #6
 800c9cc:	f7f3 fc20 	bl	8000210 <memchr>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d03f      	beq.n	800ca54 <_vfiprintf_r+0x22c>
 800c9d4:	4b29      	ldr	r3, [pc, #164]	; (800ca7c <_vfiprintf_r+0x254>)
 800c9d6:	bb1b      	cbnz	r3, 800ca20 <_vfiprintf_r+0x1f8>
 800c9d8:	9b03      	ldr	r3, [sp, #12]
 800c9da:	3307      	adds	r3, #7
 800c9dc:	f023 0307 	bic.w	r3, r3, #7
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	9303      	str	r3, [sp, #12]
 800c9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e6:	443b      	add	r3, r7
 800c9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ea:	e767      	b.n	800c8bc <_vfiprintf_r+0x94>
 800c9ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	2001      	movs	r0, #1
 800c9f4:	e7a5      	b.n	800c942 <_vfiprintf_r+0x11a>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	3401      	adds	r4, #1
 800c9fa:	9305      	str	r3, [sp, #20]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	f04f 0c0a 	mov.w	ip, #10
 800ca02:	4620      	mov	r0, r4
 800ca04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca08:	3a30      	subs	r2, #48	; 0x30
 800ca0a:	2a09      	cmp	r2, #9
 800ca0c:	d903      	bls.n	800ca16 <_vfiprintf_r+0x1ee>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0c5      	beq.n	800c99e <_vfiprintf_r+0x176>
 800ca12:	9105      	str	r1, [sp, #20]
 800ca14:	e7c3      	b.n	800c99e <_vfiprintf_r+0x176>
 800ca16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e7f0      	b.n	800ca02 <_vfiprintf_r+0x1da>
 800ca20:	ab03      	add	r3, sp, #12
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	462a      	mov	r2, r5
 800ca26:	4b16      	ldr	r3, [pc, #88]	; (800ca80 <_vfiprintf_r+0x258>)
 800ca28:	a904      	add	r1, sp, #16
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7fd fde6 	bl	800a5fc <_printf_float>
 800ca30:	4607      	mov	r7, r0
 800ca32:	1c78      	adds	r0, r7, #1
 800ca34:	d1d6      	bne.n	800c9e4 <_vfiprintf_r+0x1bc>
 800ca36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca38:	07d9      	lsls	r1, r3, #31
 800ca3a:	d405      	bmi.n	800ca48 <_vfiprintf_r+0x220>
 800ca3c:	89ab      	ldrh	r3, [r5, #12]
 800ca3e:	059a      	lsls	r2, r3, #22
 800ca40:	d402      	bmi.n	800ca48 <_vfiprintf_r+0x220>
 800ca42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca44:	f000 faaf 	bl	800cfa6 <__retarget_lock_release_recursive>
 800ca48:	89ab      	ldrh	r3, [r5, #12]
 800ca4a:	065b      	lsls	r3, r3, #25
 800ca4c:	f53f af12 	bmi.w	800c874 <_vfiprintf_r+0x4c>
 800ca50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca52:	e711      	b.n	800c878 <_vfiprintf_r+0x50>
 800ca54:	ab03      	add	r3, sp, #12
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4b09      	ldr	r3, [pc, #36]	; (800ca80 <_vfiprintf_r+0x258>)
 800ca5c:	a904      	add	r1, sp, #16
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7fe f870 	bl	800ab44 <_printf_i>
 800ca64:	e7e4      	b.n	800ca30 <_vfiprintf_r+0x208>
 800ca66:	bf00      	nop
 800ca68:	0800d714 	.word	0x0800d714
 800ca6c:	0800d734 	.word	0x0800d734
 800ca70:	0800d6f4 	.word	0x0800d6f4
 800ca74:	0800d59c 	.word	0x0800d59c
 800ca78:	0800d5a6 	.word	0x0800d5a6
 800ca7c:	0800a5fd 	.word	0x0800a5fd
 800ca80:	0800c805 	.word	0x0800c805
 800ca84:	0800d5a2 	.word	0x0800d5a2

0800ca88 <__swbuf_r>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	460e      	mov	r6, r1
 800ca8c:	4614      	mov	r4, r2
 800ca8e:	4605      	mov	r5, r0
 800ca90:	b118      	cbz	r0, 800ca9a <__swbuf_r+0x12>
 800ca92:	6983      	ldr	r3, [r0, #24]
 800ca94:	b90b      	cbnz	r3, 800ca9a <__swbuf_r+0x12>
 800ca96:	f000 f9e7 	bl	800ce68 <__sinit>
 800ca9a:	4b21      	ldr	r3, [pc, #132]	; (800cb20 <__swbuf_r+0x98>)
 800ca9c:	429c      	cmp	r4, r3
 800ca9e:	d12b      	bne.n	800caf8 <__swbuf_r+0x70>
 800caa0:	686c      	ldr	r4, [r5, #4]
 800caa2:	69a3      	ldr	r3, [r4, #24]
 800caa4:	60a3      	str	r3, [r4, #8]
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	071a      	lsls	r2, r3, #28
 800caaa:	d52f      	bpl.n	800cb0c <__swbuf_r+0x84>
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	b36b      	cbz	r3, 800cb0c <__swbuf_r+0x84>
 800cab0:	6923      	ldr	r3, [r4, #16]
 800cab2:	6820      	ldr	r0, [r4, #0]
 800cab4:	1ac0      	subs	r0, r0, r3
 800cab6:	6963      	ldr	r3, [r4, #20]
 800cab8:	b2f6      	uxtb	r6, r6
 800caba:	4283      	cmp	r3, r0
 800cabc:	4637      	mov	r7, r6
 800cabe:	dc04      	bgt.n	800caca <__swbuf_r+0x42>
 800cac0:	4621      	mov	r1, r4
 800cac2:	4628      	mov	r0, r5
 800cac4:	f000 f93c 	bl	800cd40 <_fflush_r>
 800cac8:	bb30      	cbnz	r0, 800cb18 <__swbuf_r+0x90>
 800caca:	68a3      	ldr	r3, [r4, #8]
 800cacc:	3b01      	subs	r3, #1
 800cace:	60a3      	str	r3, [r4, #8]
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	6022      	str	r2, [r4, #0]
 800cad6:	701e      	strb	r6, [r3, #0]
 800cad8:	6963      	ldr	r3, [r4, #20]
 800cada:	3001      	adds	r0, #1
 800cadc:	4283      	cmp	r3, r0
 800cade:	d004      	beq.n	800caea <__swbuf_r+0x62>
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	07db      	lsls	r3, r3, #31
 800cae4:	d506      	bpl.n	800caf4 <__swbuf_r+0x6c>
 800cae6:	2e0a      	cmp	r6, #10
 800cae8:	d104      	bne.n	800caf4 <__swbuf_r+0x6c>
 800caea:	4621      	mov	r1, r4
 800caec:	4628      	mov	r0, r5
 800caee:	f000 f927 	bl	800cd40 <_fflush_r>
 800caf2:	b988      	cbnz	r0, 800cb18 <__swbuf_r+0x90>
 800caf4:	4638      	mov	r0, r7
 800caf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf8:	4b0a      	ldr	r3, [pc, #40]	; (800cb24 <__swbuf_r+0x9c>)
 800cafa:	429c      	cmp	r4, r3
 800cafc:	d101      	bne.n	800cb02 <__swbuf_r+0x7a>
 800cafe:	68ac      	ldr	r4, [r5, #8]
 800cb00:	e7cf      	b.n	800caa2 <__swbuf_r+0x1a>
 800cb02:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <__swbuf_r+0xa0>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	bf08      	it	eq
 800cb08:	68ec      	ldreq	r4, [r5, #12]
 800cb0a:	e7ca      	b.n	800caa2 <__swbuf_r+0x1a>
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4628      	mov	r0, r5
 800cb10:	f000 f81a 	bl	800cb48 <__swsetup_r>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d0cb      	beq.n	800cab0 <__swbuf_r+0x28>
 800cb18:	f04f 37ff 	mov.w	r7, #4294967295
 800cb1c:	e7ea      	b.n	800caf4 <__swbuf_r+0x6c>
 800cb1e:	bf00      	nop
 800cb20:	0800d714 	.word	0x0800d714
 800cb24:	0800d734 	.word	0x0800d734
 800cb28:	0800d6f4 	.word	0x0800d6f4

0800cb2c <__ascii_wctomb>:
 800cb2c:	b149      	cbz	r1, 800cb42 <__ascii_wctomb+0x16>
 800cb2e:	2aff      	cmp	r2, #255	; 0xff
 800cb30:	bf85      	ittet	hi
 800cb32:	238a      	movhi	r3, #138	; 0x8a
 800cb34:	6003      	strhi	r3, [r0, #0]
 800cb36:	700a      	strbls	r2, [r1, #0]
 800cb38:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb3c:	bf98      	it	ls
 800cb3e:	2001      	movls	r0, #1
 800cb40:	4770      	bx	lr
 800cb42:	4608      	mov	r0, r1
 800cb44:	4770      	bx	lr
	...

0800cb48 <__swsetup_r>:
 800cb48:	4b32      	ldr	r3, [pc, #200]	; (800cc14 <__swsetup_r+0xcc>)
 800cb4a:	b570      	push	{r4, r5, r6, lr}
 800cb4c:	681d      	ldr	r5, [r3, #0]
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460c      	mov	r4, r1
 800cb52:	b125      	cbz	r5, 800cb5e <__swsetup_r+0x16>
 800cb54:	69ab      	ldr	r3, [r5, #24]
 800cb56:	b913      	cbnz	r3, 800cb5e <__swsetup_r+0x16>
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 f985 	bl	800ce68 <__sinit>
 800cb5e:	4b2e      	ldr	r3, [pc, #184]	; (800cc18 <__swsetup_r+0xd0>)
 800cb60:	429c      	cmp	r4, r3
 800cb62:	d10f      	bne.n	800cb84 <__swsetup_r+0x3c>
 800cb64:	686c      	ldr	r4, [r5, #4]
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb6c:	0719      	lsls	r1, r3, #28
 800cb6e:	d42c      	bmi.n	800cbca <__swsetup_r+0x82>
 800cb70:	06dd      	lsls	r5, r3, #27
 800cb72:	d411      	bmi.n	800cb98 <__swsetup_r+0x50>
 800cb74:	2309      	movs	r3, #9
 800cb76:	6033      	str	r3, [r6, #0]
 800cb78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb7c:	81a3      	strh	r3, [r4, #12]
 800cb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb82:	e03e      	b.n	800cc02 <__swsetup_r+0xba>
 800cb84:	4b25      	ldr	r3, [pc, #148]	; (800cc1c <__swsetup_r+0xd4>)
 800cb86:	429c      	cmp	r4, r3
 800cb88:	d101      	bne.n	800cb8e <__swsetup_r+0x46>
 800cb8a:	68ac      	ldr	r4, [r5, #8]
 800cb8c:	e7eb      	b.n	800cb66 <__swsetup_r+0x1e>
 800cb8e:	4b24      	ldr	r3, [pc, #144]	; (800cc20 <__swsetup_r+0xd8>)
 800cb90:	429c      	cmp	r4, r3
 800cb92:	bf08      	it	eq
 800cb94:	68ec      	ldreq	r4, [r5, #12]
 800cb96:	e7e6      	b.n	800cb66 <__swsetup_r+0x1e>
 800cb98:	0758      	lsls	r0, r3, #29
 800cb9a:	d512      	bpl.n	800cbc2 <__swsetup_r+0x7a>
 800cb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb9e:	b141      	cbz	r1, 800cbb2 <__swsetup_r+0x6a>
 800cba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cba4:	4299      	cmp	r1, r3
 800cba6:	d002      	beq.n	800cbae <__swsetup_r+0x66>
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f7ff fb31 	bl	800c210 <_free_r>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	6363      	str	r3, [r4, #52]	; 0x34
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	6063      	str	r3, [r4, #4]
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f043 0308 	orr.w	r3, r3, #8
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	6923      	ldr	r3, [r4, #16]
 800cbcc:	b94b      	cbnz	r3, 800cbe2 <__swsetup_r+0x9a>
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd8:	d003      	beq.n	800cbe2 <__swsetup_r+0x9a>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f000 fa09 	bl	800cff4 <__smakebuf_r>
 800cbe2:	89a0      	ldrh	r0, [r4, #12]
 800cbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbe8:	f010 0301 	ands.w	r3, r0, #1
 800cbec:	d00a      	beq.n	800cc04 <__swsetup_r+0xbc>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60a3      	str	r3, [r4, #8]
 800cbf2:	6963      	ldr	r3, [r4, #20]
 800cbf4:	425b      	negs	r3, r3
 800cbf6:	61a3      	str	r3, [r4, #24]
 800cbf8:	6923      	ldr	r3, [r4, #16]
 800cbfa:	b943      	cbnz	r3, 800cc0e <__swsetup_r+0xc6>
 800cbfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc00:	d1ba      	bne.n	800cb78 <__swsetup_r+0x30>
 800cc02:	bd70      	pop	{r4, r5, r6, pc}
 800cc04:	0781      	lsls	r1, r0, #30
 800cc06:	bf58      	it	pl
 800cc08:	6963      	ldrpl	r3, [r4, #20]
 800cc0a:	60a3      	str	r3, [r4, #8]
 800cc0c:	e7f4      	b.n	800cbf8 <__swsetup_r+0xb0>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e7f7      	b.n	800cc02 <__swsetup_r+0xba>
 800cc12:	bf00      	nop
 800cc14:	20000010 	.word	0x20000010
 800cc18:	0800d714 	.word	0x0800d714
 800cc1c:	0800d734 	.word	0x0800d734
 800cc20:	0800d6f4 	.word	0x0800d6f4

0800cc24 <abort>:
 800cc24:	b508      	push	{r3, lr}
 800cc26:	2006      	movs	r0, #6
 800cc28:	f000 fa54 	bl	800d0d4 <raise>
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	f7f4 fed8 	bl	80019e2 <_exit>
	...

0800cc34 <__sflush_r>:
 800cc34:	898a      	ldrh	r2, [r1, #12]
 800cc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	0710      	lsls	r0, r2, #28
 800cc3e:	460c      	mov	r4, r1
 800cc40:	d458      	bmi.n	800ccf4 <__sflush_r+0xc0>
 800cc42:	684b      	ldr	r3, [r1, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	dc05      	bgt.n	800cc54 <__sflush_r+0x20>
 800cc48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	dc02      	bgt.n	800cc54 <__sflush_r+0x20>
 800cc4e:	2000      	movs	r0, #0
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc56:	2e00      	cmp	r6, #0
 800cc58:	d0f9      	beq.n	800cc4e <__sflush_r+0x1a>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc60:	682f      	ldr	r7, [r5, #0]
 800cc62:	602b      	str	r3, [r5, #0]
 800cc64:	d032      	beq.n	800cccc <__sflush_r+0x98>
 800cc66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	075a      	lsls	r2, r3, #29
 800cc6c:	d505      	bpl.n	800cc7a <__sflush_r+0x46>
 800cc6e:	6863      	ldr	r3, [r4, #4]
 800cc70:	1ac0      	subs	r0, r0, r3
 800cc72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc74:	b10b      	cbz	r3, 800cc7a <__sflush_r+0x46>
 800cc76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc78:	1ac0      	subs	r0, r0, r3
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc80:	6a21      	ldr	r1, [r4, #32]
 800cc82:	4628      	mov	r0, r5
 800cc84:	47b0      	blx	r6
 800cc86:	1c43      	adds	r3, r0, #1
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	d106      	bne.n	800cc9a <__sflush_r+0x66>
 800cc8c:	6829      	ldr	r1, [r5, #0]
 800cc8e:	291d      	cmp	r1, #29
 800cc90:	d82c      	bhi.n	800ccec <__sflush_r+0xb8>
 800cc92:	4a2a      	ldr	r2, [pc, #168]	; (800cd3c <__sflush_r+0x108>)
 800cc94:	40ca      	lsrs	r2, r1
 800cc96:	07d6      	lsls	r6, r2, #31
 800cc98:	d528      	bpl.n	800ccec <__sflush_r+0xb8>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	6062      	str	r2, [r4, #4]
 800cc9e:	04d9      	lsls	r1, r3, #19
 800cca0:	6922      	ldr	r2, [r4, #16]
 800cca2:	6022      	str	r2, [r4, #0]
 800cca4:	d504      	bpl.n	800ccb0 <__sflush_r+0x7c>
 800cca6:	1c42      	adds	r2, r0, #1
 800cca8:	d101      	bne.n	800ccae <__sflush_r+0x7a>
 800ccaa:	682b      	ldr	r3, [r5, #0]
 800ccac:	b903      	cbnz	r3, 800ccb0 <__sflush_r+0x7c>
 800ccae:	6560      	str	r0, [r4, #84]	; 0x54
 800ccb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccb2:	602f      	str	r7, [r5, #0]
 800ccb4:	2900      	cmp	r1, #0
 800ccb6:	d0ca      	beq.n	800cc4e <__sflush_r+0x1a>
 800ccb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccbc:	4299      	cmp	r1, r3
 800ccbe:	d002      	beq.n	800ccc6 <__sflush_r+0x92>
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f7ff faa5 	bl	800c210 <_free_r>
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	6360      	str	r0, [r4, #52]	; 0x34
 800ccca:	e7c1      	b.n	800cc50 <__sflush_r+0x1c>
 800cccc:	6a21      	ldr	r1, [r4, #32]
 800ccce:	2301      	movs	r3, #1
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	47b0      	blx	r6
 800ccd4:	1c41      	adds	r1, r0, #1
 800ccd6:	d1c7      	bne.n	800cc68 <__sflush_r+0x34>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d0c4      	beq.n	800cc68 <__sflush_r+0x34>
 800ccde:	2b1d      	cmp	r3, #29
 800cce0:	d001      	beq.n	800cce6 <__sflush_r+0xb2>
 800cce2:	2b16      	cmp	r3, #22
 800cce4:	d101      	bne.n	800ccea <__sflush_r+0xb6>
 800cce6:	602f      	str	r7, [r5, #0]
 800cce8:	e7b1      	b.n	800cc4e <__sflush_r+0x1a>
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	e7ad      	b.n	800cc50 <__sflush_r+0x1c>
 800ccf4:	690f      	ldr	r7, [r1, #16]
 800ccf6:	2f00      	cmp	r7, #0
 800ccf8:	d0a9      	beq.n	800cc4e <__sflush_r+0x1a>
 800ccfa:	0793      	lsls	r3, r2, #30
 800ccfc:	680e      	ldr	r6, [r1, #0]
 800ccfe:	bf08      	it	eq
 800cd00:	694b      	ldreq	r3, [r1, #20]
 800cd02:	600f      	str	r7, [r1, #0]
 800cd04:	bf18      	it	ne
 800cd06:	2300      	movne	r3, #0
 800cd08:	eba6 0807 	sub.w	r8, r6, r7
 800cd0c:	608b      	str	r3, [r1, #8]
 800cd0e:	f1b8 0f00 	cmp.w	r8, #0
 800cd12:	dd9c      	ble.n	800cc4e <__sflush_r+0x1a>
 800cd14:	6a21      	ldr	r1, [r4, #32]
 800cd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd18:	4643      	mov	r3, r8
 800cd1a:	463a      	mov	r2, r7
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	47b0      	blx	r6
 800cd20:	2800      	cmp	r0, #0
 800cd22:	dc06      	bgt.n	800cd32 <__sflush_r+0xfe>
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd2a:	81a3      	strh	r3, [r4, #12]
 800cd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd30:	e78e      	b.n	800cc50 <__sflush_r+0x1c>
 800cd32:	4407      	add	r7, r0
 800cd34:	eba8 0800 	sub.w	r8, r8, r0
 800cd38:	e7e9      	b.n	800cd0e <__sflush_r+0xda>
 800cd3a:	bf00      	nop
 800cd3c:	20400001 	.word	0x20400001

0800cd40 <_fflush_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	690b      	ldr	r3, [r1, #16]
 800cd44:	4605      	mov	r5, r0
 800cd46:	460c      	mov	r4, r1
 800cd48:	b913      	cbnz	r3, 800cd50 <_fflush_r+0x10>
 800cd4a:	2500      	movs	r5, #0
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
 800cd50:	b118      	cbz	r0, 800cd5a <_fflush_r+0x1a>
 800cd52:	6983      	ldr	r3, [r0, #24]
 800cd54:	b90b      	cbnz	r3, 800cd5a <_fflush_r+0x1a>
 800cd56:	f000 f887 	bl	800ce68 <__sinit>
 800cd5a:	4b14      	ldr	r3, [pc, #80]	; (800cdac <_fflush_r+0x6c>)
 800cd5c:	429c      	cmp	r4, r3
 800cd5e:	d11b      	bne.n	800cd98 <_fflush_r+0x58>
 800cd60:	686c      	ldr	r4, [r5, #4]
 800cd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0ef      	beq.n	800cd4a <_fflush_r+0xa>
 800cd6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd6c:	07d0      	lsls	r0, r2, #31
 800cd6e:	d404      	bmi.n	800cd7a <_fflush_r+0x3a>
 800cd70:	0599      	lsls	r1, r3, #22
 800cd72:	d402      	bmi.n	800cd7a <_fflush_r+0x3a>
 800cd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd76:	f000 f915 	bl	800cfa4 <__retarget_lock_acquire_recursive>
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f7ff ff59 	bl	800cc34 <__sflush_r>
 800cd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd84:	07da      	lsls	r2, r3, #31
 800cd86:	4605      	mov	r5, r0
 800cd88:	d4e0      	bmi.n	800cd4c <_fflush_r+0xc>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	059b      	lsls	r3, r3, #22
 800cd8e:	d4dd      	bmi.n	800cd4c <_fflush_r+0xc>
 800cd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd92:	f000 f908 	bl	800cfa6 <__retarget_lock_release_recursive>
 800cd96:	e7d9      	b.n	800cd4c <_fflush_r+0xc>
 800cd98:	4b05      	ldr	r3, [pc, #20]	; (800cdb0 <_fflush_r+0x70>)
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	d101      	bne.n	800cda2 <_fflush_r+0x62>
 800cd9e:	68ac      	ldr	r4, [r5, #8]
 800cda0:	e7df      	b.n	800cd62 <_fflush_r+0x22>
 800cda2:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <_fflush_r+0x74>)
 800cda4:	429c      	cmp	r4, r3
 800cda6:	bf08      	it	eq
 800cda8:	68ec      	ldreq	r4, [r5, #12]
 800cdaa:	e7da      	b.n	800cd62 <_fflush_r+0x22>
 800cdac:	0800d714 	.word	0x0800d714
 800cdb0:	0800d734 	.word	0x0800d734
 800cdb4:	0800d6f4 	.word	0x0800d6f4

0800cdb8 <std>:
 800cdb8:	2300      	movs	r3, #0
 800cdba:	b510      	push	{r4, lr}
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	e9c0 3300 	strd	r3, r3, [r0]
 800cdc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdc6:	6083      	str	r3, [r0, #8]
 800cdc8:	8181      	strh	r1, [r0, #12]
 800cdca:	6643      	str	r3, [r0, #100]	; 0x64
 800cdcc:	81c2      	strh	r2, [r0, #14]
 800cdce:	6183      	str	r3, [r0, #24]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	2208      	movs	r2, #8
 800cdd4:	305c      	adds	r0, #92	; 0x5c
 800cdd6:	f7fd fb69 	bl	800a4ac <memset>
 800cdda:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <std+0x38>)
 800cddc:	6263      	str	r3, [r4, #36]	; 0x24
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <std+0x3c>)
 800cde0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cde2:	4b05      	ldr	r3, [pc, #20]	; (800cdf8 <std+0x40>)
 800cde4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cde6:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <std+0x44>)
 800cde8:	6224      	str	r4, [r4, #32]
 800cdea:	6323      	str	r3, [r4, #48]	; 0x30
 800cdec:	bd10      	pop	{r4, pc}
 800cdee:	bf00      	nop
 800cdf0:	0800d10d 	.word	0x0800d10d
 800cdf4:	0800d12f 	.word	0x0800d12f
 800cdf8:	0800d167 	.word	0x0800d167
 800cdfc:	0800d18b 	.word	0x0800d18b

0800ce00 <_cleanup_r>:
 800ce00:	4901      	ldr	r1, [pc, #4]	; (800ce08 <_cleanup_r+0x8>)
 800ce02:	f000 b8af 	b.w	800cf64 <_fwalk_reent>
 800ce06:	bf00      	nop
 800ce08:	0800cd41 	.word	0x0800cd41

0800ce0c <__sfmoreglue>:
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	2268      	movs	r2, #104	; 0x68
 800ce10:	1e4d      	subs	r5, r1, #1
 800ce12:	4355      	muls	r5, r2
 800ce14:	460e      	mov	r6, r1
 800ce16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce1a:	f7ff fa65 	bl	800c2e8 <_malloc_r>
 800ce1e:	4604      	mov	r4, r0
 800ce20:	b140      	cbz	r0, 800ce34 <__sfmoreglue+0x28>
 800ce22:	2100      	movs	r1, #0
 800ce24:	e9c0 1600 	strd	r1, r6, [r0]
 800ce28:	300c      	adds	r0, #12
 800ce2a:	60a0      	str	r0, [r4, #8]
 800ce2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce30:	f7fd fb3c 	bl	800a4ac <memset>
 800ce34:	4620      	mov	r0, r4
 800ce36:	bd70      	pop	{r4, r5, r6, pc}

0800ce38 <__sfp_lock_acquire>:
 800ce38:	4801      	ldr	r0, [pc, #4]	; (800ce40 <__sfp_lock_acquire+0x8>)
 800ce3a:	f000 b8b3 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	200021bd 	.word	0x200021bd

0800ce44 <__sfp_lock_release>:
 800ce44:	4801      	ldr	r0, [pc, #4]	; (800ce4c <__sfp_lock_release+0x8>)
 800ce46:	f000 b8ae 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	200021bd 	.word	0x200021bd

0800ce50 <__sinit_lock_acquire>:
 800ce50:	4801      	ldr	r0, [pc, #4]	; (800ce58 <__sinit_lock_acquire+0x8>)
 800ce52:	f000 b8a7 	b.w	800cfa4 <__retarget_lock_acquire_recursive>
 800ce56:	bf00      	nop
 800ce58:	200021be 	.word	0x200021be

0800ce5c <__sinit_lock_release>:
 800ce5c:	4801      	ldr	r0, [pc, #4]	; (800ce64 <__sinit_lock_release+0x8>)
 800ce5e:	f000 b8a2 	b.w	800cfa6 <__retarget_lock_release_recursive>
 800ce62:	bf00      	nop
 800ce64:	200021be 	.word	0x200021be

0800ce68 <__sinit>:
 800ce68:	b510      	push	{r4, lr}
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	f7ff fff0 	bl	800ce50 <__sinit_lock_acquire>
 800ce70:	69a3      	ldr	r3, [r4, #24]
 800ce72:	b11b      	cbz	r3, 800ce7c <__sinit+0x14>
 800ce74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce78:	f7ff bff0 	b.w	800ce5c <__sinit_lock_release>
 800ce7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce80:	6523      	str	r3, [r4, #80]	; 0x50
 800ce82:	4b13      	ldr	r3, [pc, #76]	; (800ced0 <__sinit+0x68>)
 800ce84:	4a13      	ldr	r2, [pc, #76]	; (800ced4 <__sinit+0x6c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce8a:	42a3      	cmp	r3, r4
 800ce8c:	bf04      	itt	eq
 800ce8e:	2301      	moveq	r3, #1
 800ce90:	61a3      	streq	r3, [r4, #24]
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 f820 	bl	800ced8 <__sfp>
 800ce98:	6060      	str	r0, [r4, #4]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 f81c 	bl	800ced8 <__sfp>
 800cea0:	60a0      	str	r0, [r4, #8]
 800cea2:	4620      	mov	r0, r4
 800cea4:	f000 f818 	bl	800ced8 <__sfp>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	60e0      	str	r0, [r4, #12]
 800ceac:	2104      	movs	r1, #4
 800ceae:	6860      	ldr	r0, [r4, #4]
 800ceb0:	f7ff ff82 	bl	800cdb8 <std>
 800ceb4:	68a0      	ldr	r0, [r4, #8]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	2109      	movs	r1, #9
 800ceba:	f7ff ff7d 	bl	800cdb8 <std>
 800cebe:	68e0      	ldr	r0, [r4, #12]
 800cec0:	2202      	movs	r2, #2
 800cec2:	2112      	movs	r1, #18
 800cec4:	f7ff ff78 	bl	800cdb8 <std>
 800cec8:	2301      	movs	r3, #1
 800ceca:	61a3      	str	r3, [r4, #24]
 800cecc:	e7d2      	b.n	800ce74 <__sinit+0xc>
 800cece:	bf00      	nop
 800ced0:	0800d378 	.word	0x0800d378
 800ced4:	0800ce01 	.word	0x0800ce01

0800ced8 <__sfp>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	4607      	mov	r7, r0
 800cedc:	f7ff ffac 	bl	800ce38 <__sfp_lock_acquire>
 800cee0:	4b1e      	ldr	r3, [pc, #120]	; (800cf5c <__sfp+0x84>)
 800cee2:	681e      	ldr	r6, [r3, #0]
 800cee4:	69b3      	ldr	r3, [r6, #24]
 800cee6:	b913      	cbnz	r3, 800ceee <__sfp+0x16>
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7ff ffbd 	bl	800ce68 <__sinit>
 800ceee:	3648      	adds	r6, #72	; 0x48
 800cef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	d503      	bpl.n	800cf00 <__sfp+0x28>
 800cef8:	6833      	ldr	r3, [r6, #0]
 800cefa:	b30b      	cbz	r3, 800cf40 <__sfp+0x68>
 800cefc:	6836      	ldr	r6, [r6, #0]
 800cefe:	e7f7      	b.n	800cef0 <__sfp+0x18>
 800cf00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf04:	b9d5      	cbnz	r5, 800cf3c <__sfp+0x64>
 800cf06:	4b16      	ldr	r3, [pc, #88]	; (800cf60 <__sfp+0x88>)
 800cf08:	60e3      	str	r3, [r4, #12]
 800cf0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf0e:	6665      	str	r5, [r4, #100]	; 0x64
 800cf10:	f000 f847 	bl	800cfa2 <__retarget_lock_init_recursive>
 800cf14:	f7ff ff96 	bl	800ce44 <__sfp_lock_release>
 800cf18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf20:	6025      	str	r5, [r4, #0]
 800cf22:	61a5      	str	r5, [r4, #24]
 800cf24:	2208      	movs	r2, #8
 800cf26:	4629      	mov	r1, r5
 800cf28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf2c:	f7fd fabe 	bl	800a4ac <memset>
 800cf30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf38:	4620      	mov	r0, r4
 800cf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf3c:	3468      	adds	r4, #104	; 0x68
 800cf3e:	e7d9      	b.n	800cef4 <__sfp+0x1c>
 800cf40:	2104      	movs	r1, #4
 800cf42:	4638      	mov	r0, r7
 800cf44:	f7ff ff62 	bl	800ce0c <__sfmoreglue>
 800cf48:	4604      	mov	r4, r0
 800cf4a:	6030      	str	r0, [r6, #0]
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d1d5      	bne.n	800cefc <__sfp+0x24>
 800cf50:	f7ff ff78 	bl	800ce44 <__sfp_lock_release>
 800cf54:	230c      	movs	r3, #12
 800cf56:	603b      	str	r3, [r7, #0]
 800cf58:	e7ee      	b.n	800cf38 <__sfp+0x60>
 800cf5a:	bf00      	nop
 800cf5c:	0800d378 	.word	0x0800d378
 800cf60:	ffff0001 	.word	0xffff0001

0800cf64 <_fwalk_reent>:
 800cf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf68:	4606      	mov	r6, r0
 800cf6a:	4688      	mov	r8, r1
 800cf6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf70:	2700      	movs	r7, #0
 800cf72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf76:	f1b9 0901 	subs.w	r9, r9, #1
 800cf7a:	d505      	bpl.n	800cf88 <_fwalk_reent+0x24>
 800cf7c:	6824      	ldr	r4, [r4, #0]
 800cf7e:	2c00      	cmp	r4, #0
 800cf80:	d1f7      	bne.n	800cf72 <_fwalk_reent+0xe>
 800cf82:	4638      	mov	r0, r7
 800cf84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf88:	89ab      	ldrh	r3, [r5, #12]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d907      	bls.n	800cf9e <_fwalk_reent+0x3a>
 800cf8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf92:	3301      	adds	r3, #1
 800cf94:	d003      	beq.n	800cf9e <_fwalk_reent+0x3a>
 800cf96:	4629      	mov	r1, r5
 800cf98:	4630      	mov	r0, r6
 800cf9a:	47c0      	blx	r8
 800cf9c:	4307      	orrs	r7, r0
 800cf9e:	3568      	adds	r5, #104	; 0x68
 800cfa0:	e7e9      	b.n	800cf76 <_fwalk_reent+0x12>

0800cfa2 <__retarget_lock_init_recursive>:
 800cfa2:	4770      	bx	lr

0800cfa4 <__retarget_lock_acquire_recursive>:
 800cfa4:	4770      	bx	lr

0800cfa6 <__retarget_lock_release_recursive>:
 800cfa6:	4770      	bx	lr

0800cfa8 <__swhatbuf_r>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	460e      	mov	r6, r1
 800cfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb0:	2900      	cmp	r1, #0
 800cfb2:	b096      	sub	sp, #88	; 0x58
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	461d      	mov	r5, r3
 800cfb8:	da08      	bge.n	800cfcc <__swhatbuf_r+0x24>
 800cfba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	602a      	str	r2, [r5, #0]
 800cfc2:	061a      	lsls	r2, r3, #24
 800cfc4:	d410      	bmi.n	800cfe8 <__swhatbuf_r+0x40>
 800cfc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfca:	e00e      	b.n	800cfea <__swhatbuf_r+0x42>
 800cfcc:	466a      	mov	r2, sp
 800cfce:	f000 f903 	bl	800d1d8 <_fstat_r>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	dbf1      	blt.n	800cfba <__swhatbuf_r+0x12>
 800cfd6:	9a01      	ldr	r2, [sp, #4]
 800cfd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfe0:	425a      	negs	r2, r3
 800cfe2:	415a      	adcs	r2, r3
 800cfe4:	602a      	str	r2, [r5, #0]
 800cfe6:	e7ee      	b.n	800cfc6 <__swhatbuf_r+0x1e>
 800cfe8:	2340      	movs	r3, #64	; 0x40
 800cfea:	2000      	movs	r0, #0
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	b016      	add	sp, #88	; 0x58
 800cff0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cff4 <__smakebuf_r>:
 800cff4:	898b      	ldrh	r3, [r1, #12]
 800cff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cff8:	079d      	lsls	r5, r3, #30
 800cffa:	4606      	mov	r6, r0
 800cffc:	460c      	mov	r4, r1
 800cffe:	d507      	bpl.n	800d010 <__smakebuf_r+0x1c>
 800d000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	6123      	str	r3, [r4, #16]
 800d008:	2301      	movs	r3, #1
 800d00a:	6163      	str	r3, [r4, #20]
 800d00c:	b002      	add	sp, #8
 800d00e:	bd70      	pop	{r4, r5, r6, pc}
 800d010:	ab01      	add	r3, sp, #4
 800d012:	466a      	mov	r2, sp
 800d014:	f7ff ffc8 	bl	800cfa8 <__swhatbuf_r>
 800d018:	9900      	ldr	r1, [sp, #0]
 800d01a:	4605      	mov	r5, r0
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7ff f963 	bl	800c2e8 <_malloc_r>
 800d022:	b948      	cbnz	r0, 800d038 <__smakebuf_r+0x44>
 800d024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d028:	059a      	lsls	r2, r3, #22
 800d02a:	d4ef      	bmi.n	800d00c <__smakebuf_r+0x18>
 800d02c:	f023 0303 	bic.w	r3, r3, #3
 800d030:	f043 0302 	orr.w	r3, r3, #2
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	e7e3      	b.n	800d000 <__smakebuf_r+0xc>
 800d038:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <__smakebuf_r+0x7c>)
 800d03a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	6020      	str	r0, [r4, #0]
 800d040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d044:	81a3      	strh	r3, [r4, #12]
 800d046:	9b00      	ldr	r3, [sp, #0]
 800d048:	6163      	str	r3, [r4, #20]
 800d04a:	9b01      	ldr	r3, [sp, #4]
 800d04c:	6120      	str	r0, [r4, #16]
 800d04e:	b15b      	cbz	r3, 800d068 <__smakebuf_r+0x74>
 800d050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d054:	4630      	mov	r0, r6
 800d056:	f000 f8d1 	bl	800d1fc <_isatty_r>
 800d05a:	b128      	cbz	r0, 800d068 <__smakebuf_r+0x74>
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	f023 0303 	bic.w	r3, r3, #3
 800d062:	f043 0301 	orr.w	r3, r3, #1
 800d066:	81a3      	strh	r3, [r4, #12]
 800d068:	89a0      	ldrh	r0, [r4, #12]
 800d06a:	4305      	orrs	r5, r0
 800d06c:	81a5      	strh	r5, [r4, #12]
 800d06e:	e7cd      	b.n	800d00c <__smakebuf_r+0x18>
 800d070:	0800ce01 	.word	0x0800ce01

0800d074 <_malloc_usable_size_r>:
 800d074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d078:	1f18      	subs	r0, r3, #4
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bfbc      	itt	lt
 800d07e:	580b      	ldrlt	r3, [r1, r0]
 800d080:	18c0      	addlt	r0, r0, r3
 800d082:	4770      	bx	lr

0800d084 <_raise_r>:
 800d084:	291f      	cmp	r1, #31
 800d086:	b538      	push	{r3, r4, r5, lr}
 800d088:	4604      	mov	r4, r0
 800d08a:	460d      	mov	r5, r1
 800d08c:	d904      	bls.n	800d098 <_raise_r+0x14>
 800d08e:	2316      	movs	r3, #22
 800d090:	6003      	str	r3, [r0, #0]
 800d092:	f04f 30ff 	mov.w	r0, #4294967295
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d09a:	b112      	cbz	r2, 800d0a2 <_raise_r+0x1e>
 800d09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0a0:	b94b      	cbnz	r3, 800d0b6 <_raise_r+0x32>
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 f830 	bl	800d108 <_getpid_r>
 800d0a8:	462a      	mov	r2, r5
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0b2:	f000 b817 	b.w	800d0e4 <_kill_r>
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d00a      	beq.n	800d0d0 <_raise_r+0x4c>
 800d0ba:	1c59      	adds	r1, r3, #1
 800d0bc:	d103      	bne.n	800d0c6 <_raise_r+0x42>
 800d0be:	2316      	movs	r3, #22
 800d0c0:	6003      	str	r3, [r0, #0]
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	e7e7      	b.n	800d096 <_raise_r+0x12>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	4798      	blx	r3
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e7e0      	b.n	800d096 <_raise_r+0x12>

0800d0d4 <raise>:
 800d0d4:	4b02      	ldr	r3, [pc, #8]	; (800d0e0 <raise+0xc>)
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	f7ff bfd3 	b.w	800d084 <_raise_r>
 800d0de:	bf00      	nop
 800d0e0:	20000010 	.word	0x20000010

0800d0e4 <_kill_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4d07      	ldr	r5, [pc, #28]	; (800d104 <_kill_r+0x20>)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	602b      	str	r3, [r5, #0]
 800d0f2:	f7f4 fc66 	bl	80019c2 <_kill>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	d102      	bne.n	800d100 <_kill_r+0x1c>
 800d0fa:	682b      	ldr	r3, [r5, #0]
 800d0fc:	b103      	cbz	r3, 800d100 <_kill_r+0x1c>
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	bd38      	pop	{r3, r4, r5, pc}
 800d102:	bf00      	nop
 800d104:	200021b8 	.word	0x200021b8

0800d108 <_getpid_r>:
 800d108:	f7f4 bc53 	b.w	80019b2 <_getpid>

0800d10c <__sread>:
 800d10c:	b510      	push	{r4, lr}
 800d10e:	460c      	mov	r4, r1
 800d110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d114:	f000 f894 	bl	800d240 <_read_r>
 800d118:	2800      	cmp	r0, #0
 800d11a:	bfab      	itete	ge
 800d11c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d11e:	89a3      	ldrhlt	r3, [r4, #12]
 800d120:	181b      	addge	r3, r3, r0
 800d122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d126:	bfac      	ite	ge
 800d128:	6563      	strge	r3, [r4, #84]	; 0x54
 800d12a:	81a3      	strhlt	r3, [r4, #12]
 800d12c:	bd10      	pop	{r4, pc}

0800d12e <__swrite>:
 800d12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d132:	461f      	mov	r7, r3
 800d134:	898b      	ldrh	r3, [r1, #12]
 800d136:	05db      	lsls	r3, r3, #23
 800d138:	4605      	mov	r5, r0
 800d13a:	460c      	mov	r4, r1
 800d13c:	4616      	mov	r6, r2
 800d13e:	d505      	bpl.n	800d14c <__swrite+0x1e>
 800d140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d144:	2302      	movs	r3, #2
 800d146:	2200      	movs	r2, #0
 800d148:	f000 f868 	bl	800d21c <_lseek_r>
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d156:	81a3      	strh	r3, [r4, #12]
 800d158:	4632      	mov	r2, r6
 800d15a:	463b      	mov	r3, r7
 800d15c:	4628      	mov	r0, r5
 800d15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d162:	f000 b817 	b.w	800d194 <_write_r>

0800d166 <__sseek>:
 800d166:	b510      	push	{r4, lr}
 800d168:	460c      	mov	r4, r1
 800d16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16e:	f000 f855 	bl	800d21c <_lseek_r>
 800d172:	1c43      	adds	r3, r0, #1
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	bf15      	itete	ne
 800d178:	6560      	strne	r0, [r4, #84]	; 0x54
 800d17a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d17e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d182:	81a3      	strheq	r3, [r4, #12]
 800d184:	bf18      	it	ne
 800d186:	81a3      	strhne	r3, [r4, #12]
 800d188:	bd10      	pop	{r4, pc}

0800d18a <__sclose>:
 800d18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18e:	f000 b813 	b.w	800d1b8 <_close_r>
	...

0800d194 <_write_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4d07      	ldr	r5, [pc, #28]	; (800d1b4 <_write_r+0x20>)
 800d198:	4604      	mov	r4, r0
 800d19a:	4608      	mov	r0, r1
 800d19c:	4611      	mov	r1, r2
 800d19e:	2200      	movs	r2, #0
 800d1a0:	602a      	str	r2, [r5, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f7f4 fc44 	bl	8001a30 <_write>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d102      	bne.n	800d1b2 <_write_r+0x1e>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	b103      	cbz	r3, 800d1b2 <_write_r+0x1e>
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	200021b8 	.word	0x200021b8

0800d1b8 <_close_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4d06      	ldr	r5, [pc, #24]	; (800d1d4 <_close_r+0x1c>)
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4604      	mov	r4, r0
 800d1c0:	4608      	mov	r0, r1
 800d1c2:	602b      	str	r3, [r5, #0]
 800d1c4:	f7f4 fc50 	bl	8001a68 <_close>
 800d1c8:	1c43      	adds	r3, r0, #1
 800d1ca:	d102      	bne.n	800d1d2 <_close_r+0x1a>
 800d1cc:	682b      	ldr	r3, [r5, #0]
 800d1ce:	b103      	cbz	r3, 800d1d2 <_close_r+0x1a>
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	bd38      	pop	{r3, r4, r5, pc}
 800d1d4:	200021b8 	.word	0x200021b8

0800d1d8 <_fstat_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d07      	ldr	r5, [pc, #28]	; (800d1f8 <_fstat_r+0x20>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	602b      	str	r3, [r5, #0]
 800d1e6:	f7f4 fc4b 	bl	8001a80 <_fstat>
 800d1ea:	1c43      	adds	r3, r0, #1
 800d1ec:	d102      	bne.n	800d1f4 <_fstat_r+0x1c>
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	b103      	cbz	r3, 800d1f4 <_fstat_r+0x1c>
 800d1f2:	6023      	str	r3, [r4, #0]
 800d1f4:	bd38      	pop	{r3, r4, r5, pc}
 800d1f6:	bf00      	nop
 800d1f8:	200021b8 	.word	0x200021b8

0800d1fc <_isatty_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4d06      	ldr	r5, [pc, #24]	; (800d218 <_isatty_r+0x1c>)
 800d200:	2300      	movs	r3, #0
 800d202:	4604      	mov	r4, r0
 800d204:	4608      	mov	r0, r1
 800d206:	602b      	str	r3, [r5, #0]
 800d208:	f7f4 fc4a 	bl	8001aa0 <_isatty>
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d102      	bne.n	800d216 <_isatty_r+0x1a>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	b103      	cbz	r3, 800d216 <_isatty_r+0x1a>
 800d214:	6023      	str	r3, [r4, #0]
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	200021b8 	.word	0x200021b8

0800d21c <_lseek_r>:
 800d21c:	b538      	push	{r3, r4, r5, lr}
 800d21e:	4d07      	ldr	r5, [pc, #28]	; (800d23c <_lseek_r+0x20>)
 800d220:	4604      	mov	r4, r0
 800d222:	4608      	mov	r0, r1
 800d224:	4611      	mov	r1, r2
 800d226:	2200      	movs	r2, #0
 800d228:	602a      	str	r2, [r5, #0]
 800d22a:	461a      	mov	r2, r3
 800d22c:	f7f4 fc43 	bl	8001ab6 <_lseek>
 800d230:	1c43      	adds	r3, r0, #1
 800d232:	d102      	bne.n	800d23a <_lseek_r+0x1e>
 800d234:	682b      	ldr	r3, [r5, #0]
 800d236:	b103      	cbz	r3, 800d23a <_lseek_r+0x1e>
 800d238:	6023      	str	r3, [r4, #0]
 800d23a:	bd38      	pop	{r3, r4, r5, pc}
 800d23c:	200021b8 	.word	0x200021b8

0800d240 <_read_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4d07      	ldr	r5, [pc, #28]	; (800d260 <_read_r+0x20>)
 800d244:	4604      	mov	r4, r0
 800d246:	4608      	mov	r0, r1
 800d248:	4611      	mov	r1, r2
 800d24a:	2200      	movs	r2, #0
 800d24c:	602a      	str	r2, [r5, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	f7f4 fbd1 	bl	80019f6 <_read>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_read_r+0x1e>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_read_r+0x1e>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	200021b8 	.word	0x200021b8

0800d264 <_init>:
 800d264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d266:	bf00      	nop
 800d268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d26a:	bc08      	pop	{r3}
 800d26c:	469e      	mov	lr, r3
 800d26e:	4770      	bx	lr

0800d270 <_fini>:
 800d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d272:	bf00      	nop
 800d274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d276:	bc08      	pop	{r3}
 800d278:	469e      	mov	lr, r3
 800d27a:	4770      	bx	lr
