
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e8  080069e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f0  080069f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  20000074  08006a6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b48  08006a6c  00021b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df06  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003524  00000000  00000000  0003dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  000414d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  00042bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000374d  00000000  00000000  00044188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c7c  00000000  00000000  000478d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d24d  00000000  00000000  00061551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e79e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006450  00000000  00000000  0017e7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080068e8 	.word	0x080068e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	080068e8 	.word	0x080068e8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b092      	sub	sp, #72	; 0x48
 8000508:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fae6 	bl	8000ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f841 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8e5 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8b3 	bl	8000680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800051a:	f003 fb69 	bl	8003bf0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  const osThreadAttr_t blink01_attributes = {
 800051e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000522:	2224      	movs	r2, #36	; 0x24
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 f914 	bl	8006754 <memset>
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0x78>)
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	63bb      	str	r3, [r7, #56]	; 0x38
 8000534:	2318      	movs	r3, #24
 8000536:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "blink01",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053c:	461a      	mov	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0x7c>)
 8000542:	f003 fb9f 	bl	8003c84 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <main+0x80>)
 800054a:	6013      	str	r3, [r2, #0]

  /* definition and creation of blink02 */
  const osThreadAttr_t blink02_attributes = {
 800054c:	463b      	mov	r3, r7
 800054e:	2224      	movs	r2, #36	; 0x24
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f006 f8fe 	bl	8006754 <memset>
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x84>)
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	2310      	movs	r3, #16
 8000562:	61bb      	str	r3, [r7, #24]
    .name = "blink02",
    .priority = (osPriority_t) osPriorityBelowNormal,
    .stack_size = 128
  };
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000564:	463b      	mov	r3, r7
 8000566:	461a      	mov	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	4808      	ldr	r0, [pc, #32]	; (800058c <main+0x88>)
 800056c:	f003 fb8a 	bl	8003c84 <osThreadNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <main+0x8c>)
 8000574:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000576:	f003 fb5f 	bl	8003c38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057a:	e7fe      	b.n	800057a <main+0x76>
 800057c:	08006900 	.word	0x08006900
 8000580:	080007ad 	.word	0x080007ad
 8000584:	20000120 	.word	0x20000120
 8000588:	08006908 	.word	0x08006908
 800058c:	080007cd 	.word	0x080007cd
 8000590:	20000124 	.word	0x20000124

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b0be      	sub	sp, #248	; 0xf8
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800059e:	2248      	movs	r2, #72	; 0x48
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 f8d6 	bl	8006754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2298      	movs	r2, #152	; 0x98
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 f8c8 	bl	8006754 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	2340      	movs	r3, #64	; 0x40
 80005d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ea:	230a      	movs	r3, #10
 80005ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fe1a 	bl	8001240 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000612:	f000 f8fd 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2303      	movs	r3, #3
 800061e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000634:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fa7c 	bl	8001b38 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000646:	f000 f8e3 	bl	8000810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800064a:	2302      	movs	r3, #2
 800064c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800064e:	2300      	movs	r3, #0
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fd5f 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000660:	f000 f8d6 	bl	8000810 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f000 fd36 	bl	80010d8 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000672:	f000 f8cd 	bl	8000810 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	37f8      	adds	r7, #248	; 0xf8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f002 fd4e 	bl	8003164 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f89f 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000090 	.word	0x20000090
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <MX_GPIO_Init+0xc0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <MX_GPIO_Init+0xc0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a23      	ldr	r2, [pc, #140]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_GPIO_Init+0xc0>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <MX_GPIO_Init+0xc0>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_GPIO_Init+0xc0>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_GPIO_Init+0xc0>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800075c:	f000 fc6a 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000766:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_GPIO_Init+0xc8>)
 8000778:	f000 faca 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000794:	f000 fabc 	bl	8000d10 <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400
 80007a8:	48000800 	.word	0x48000800

080007ac <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80007b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <StartBlink01+0x1c>)
 80007ba:	f000 fc53 	bl	8001064 <HAL_GPIO_TogglePin>
    osDelay(500);
 80007be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c2:	f003 faf1 	bl	8003da8 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80007c6:	e7f5      	b.n	80007b4 <StartBlink01+0x8>
 80007c8:	48000400 	.word	0x48000400

080007cc <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80007d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <StartBlink02+0x1c>)
 80007da:	f000 fc43 	bl	8001064 <HAL_GPIO_TogglePin>
    osDelay(600);
 80007de:	f44f 7016 	mov.w	r0, #600	; 0x258
 80007e2:	f003 fae1 	bl	8003da8 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80007e6:	e7f5      	b.n	80007d4 <StartBlink02+0x8>
 80007e8:	48000400 	.word	0x48000400

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fe:	f000 f985 	bl	8000b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40001000 	.word	0x40001000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_MspInit+0x4c>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	; 0x60
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_MspInit+0x4c>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x4c>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x4c>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 fa2d 	bl	8000cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0b0      	sub	sp, #192	; 0xc0
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2298      	movs	r2, #152	; 0x98
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f005 ff5f 	bl	8006754 <memset>
  if(huart->Instance==LPUART1)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a22      	ldr	r2, [pc, #136]	; (8000924 <HAL_UART_MspInit+0xb4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d13d      	bne.n	800091c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fc33 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b8:	f7ff ffaa 	bl	8000810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80008ec:	f000 fc98 	bl	8001220 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80008f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800090a:	2308      	movs	r3, #8
 800090c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000910:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_UART_MspInit+0xbc>)
 8000918:	f000 f9fa 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	37c0      	adds	r7, #192	; 0xc0
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40008000 	.word	0x40008000
 8000928:	40021000 	.word	0x40021000
 800092c:	48001800 	.word	0x48001800

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	; 0x38
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_InitTick+0xe0>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <HAL_InitTick+0xe0>)
 8000944:	f043 0310 	orr.w	r3, r3, #16
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_InitTick+0xe0>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000956:	f107 0210 	add.w	r2, r7, #16
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fae7 	bl	8001f34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d103      	bne.n	8000978 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000970:	f001 fab4 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8000974:	6378      	str	r0, [r7, #52]	; 0x34
 8000976:	e004      	b.n	8000982 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000978:	f001 fab0 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 800097c:	4603      	mov	r3, r0
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000984:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <HAL_InitTick+0xe4>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0c9b      	lsrs	r3, r3, #18
 800098c:	3b01      	subs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_InitTick+0xe8>)
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <HAL_InitTick+0xec>)
 8000994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_InitTick+0xe8>)
 8000998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <HAL_InitTick+0xe8>)
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_InitTick+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_InitTick+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_InitTick+0xe8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009b6:	4818      	ldr	r0, [pc, #96]	; (8000a18 <HAL_InitTick+0xe8>)
 80009b8:	f002 f902 	bl	8002bc0 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d11b      	bne.n	8000a02 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <HAL_InitTick+0xe8>)
 80009cc:	f002 f95a 	bl	8002c84 <HAL_TIM_Base_Start_IT>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d111      	bne.n	8000a02 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009de:	2036      	movs	r0, #54	; 0x36
 80009e0:	f000 f988 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b0f      	cmp	r3, #15
 80009e8:	d808      	bhi.n	80009fc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009ea:	2200      	movs	r2, #0
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	2036      	movs	r0, #54	; 0x36
 80009f0:	f000 f964 	bl	8000cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_InitTick+0xf0>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	e002      	b.n	8000a02 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	40001000 	.word	0x40001000
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM6_DAC_IRQHandler+0x10>)
 8000a56:	f002 f985 	bl	8002d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000128 	.word	0x20000128

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a8c:	f7ff ffea 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a92:	490d      	ldr	r1, [pc, #52]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa8:	4c0a      	ldr	r4, [pc, #40]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f005 fe19 	bl	80066ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aba:	f7ff fd23 	bl	8000504 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000acc:	080069f8 	.word	0x080069f8
  ldr r2, =_sbss
 8000ad0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ad4:	20001b48 	.word	0x20001b48

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>

08000ada <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f8de 	bl	8000ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aea:	200f      	movs	r0, #15
 8000aec:	f7ff ff20 	bl	8000930 <HAL_InitTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
 8000afa:	e001      	b.n	8000b00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afc:	f7ff fe90 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b00:	79fb      	ldrb	r3, [r7, #7]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000174 	.word	0x20000174

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000174 	.word	0x20000174

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff4c 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff61 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ffb1 	bl	8000c40 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff80 	bl	8000bec <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff54 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e166      	b.n	8000fee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8158 	beq.w	8000fe8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d017      	beq.n	8000dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	6939      	ldr	r1, [r7, #16]
 8000e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0203 	and.w	r2, r3, #3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80b2 	beq.w	8000fe8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e84:	4b61      	ldr	r3, [pc, #388]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e88:	4a60      	ldr	r2, [pc, #384]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e90:	4b5e      	ldr	r3, [pc, #376]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e9c:	4a5c      	ldr	r2, [pc, #368]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ec6:	d02b      	beq.n	8000f20 <HAL_GPIO_Init+0x210>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a52      	ldr	r2, [pc, #328]	; (8001014 <HAL_GPIO_Init+0x304>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d025      	beq.n	8000f1c <HAL_GPIO_Init+0x20c>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a51      	ldr	r2, [pc, #324]	; (8001018 <HAL_GPIO_Init+0x308>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d01f      	beq.n	8000f18 <HAL_GPIO_Init+0x208>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d019      	beq.n	8000f14 <HAL_GPIO_Init+0x204>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d013      	beq.n	8000f10 <HAL_GPIO_Init+0x200>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x314>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d00d      	beq.n	8000f0c <HAL_GPIO_Init+0x1fc>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x318>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_Init+0x1f8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_Init+0x31c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d101      	bne.n	8000f04 <HAL_GPIO_Init+0x1f4>
 8000f00:	2307      	movs	r3, #7
 8000f02:	e00e      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f04:	2308      	movs	r3, #8
 8000f06:	e00c      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f08:	2306      	movs	r3, #6
 8000f0a:	e00a      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f0c:	2305      	movs	r3, #5
 8000f0e:	e008      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f14:	2303      	movs	r3, #3
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f20:	2300      	movs	r3, #0
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f32:	4937      	ldr	r1, [pc, #220]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f64:	4a32      	ldr	r2, [pc, #200]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f47f ae91 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	48000400 	.word	0x48000400
 8001018:	48000800 	.word	0x48000800
 800101c:	48000c00 	.word	0x48000c00
 8001020:	48001000 	.word	0x48001000
 8001024:	48001400 	.word	0x48001400
 8001028:	48001800 	.word	0x48001800
 800102c:	48001c00 	.word	0x48001c00
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001050:	e002      	b.n	8001058 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4013      	ands	r3, r2
 800107c:	041a      	lsls	r2, r3, #16
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43d9      	mvns	r1, r3
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	400b      	ands	r3, r1
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a8:	d102      	bne.n	80010b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80010aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ae:	e00b      	b.n	80010c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80010b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010be:	d102      	bne.n	80010c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80010c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c4:	e000      	b.n	80010c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80010c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40007000 	.word	0x40007000

080010d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d141      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f2:	d131      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f4:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fa:	4a46      	ldr	r2, [pc, #280]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110c:	4a41      	ldr	r2, [pc, #260]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001114:	4b40      	ldr	r3, [pc, #256]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2232      	movs	r2, #50	; 0x32
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	4a3f      	ldr	r2, [pc, #252]	; (800121c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0c9b      	lsrs	r3, r3, #18
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112a:	e002      	b.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3b01      	subs	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113e:	d102      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f2      	bne.n	800112c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001152:	d158      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e057      	b.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800115e:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001168:	e04d      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001170:	d141      	bne.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800117a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117e:	d131      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2232      	movs	r2, #50	; 0x32
 80011a6:	fb02 f303 	mul.w	r3, r2, r3
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	0c9b      	lsrs	r3, r3, #18
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b6:	e002      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ca:	d102      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f2      	bne.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011de:	d112      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e011      	b.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011f4:	e007      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001204:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40007000 	.word	0x40007000
 8001218:	20000000 	.word	0x20000000
 800121c:	431bde83 	.word	0x431bde83

08001220 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_PWREx_EnableVddIO2+0x1c>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122e:	6053      	str	r3, [r2, #4]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f000 bc68 	b.w	8001b24 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001254:	4b97      	ldr	r3, [pc, #604]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125e:	4b95      	ldr	r3, [pc, #596]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80e6 	beq.w	8001442 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <HAL_RCC_OscConfig+0x4c>
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	f040 808d 	bne.w	800139e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 8089 	bne.w	800139e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128c:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_RCC_OscConfig+0x66>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f000 bc3f 	b.w	8001b24 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_RCC_OscConfig+0x80>
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012be:	e005      	b.n	80012cc <HAL_RCC_OscConfig+0x8c>
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d224      	bcs.n	800131a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fe5f 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f000 bc1f 	b.w	8001b24 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e6:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a72      	ldr	r2, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	496d      	ldr	r1, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4968      	ldr	r1, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e025      	b.n	8001366 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	4960      	ldr	r1, [pc, #384]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	495b      	ldr	r1, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fe1e 	bl	8001f98 <RCC_SetFlashLatencyFromMSIRange>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e3de      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001366:	f000 fd21 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4950      	ldr	r1, [pc, #320]	; (80014b8 <HAL_RCC_OscConfig+0x278>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x27c>)
 8001384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fad0 	bl	8000930 <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d052      	beq.n	8001440 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	e3c2      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d032      	beq.n	800140c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a42      	ldr	r2, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fbbf 	bl	8000b34 <HAL_GetTick>
 80013b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff fbbb 	bl	8000b34 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e3ab      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a35      	ldr	r2, [pc, #212]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	4930      	ldr	r1, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	492b      	ldr	r1, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
 800140a:	e01a      	b.n	8001442 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb8c 	bl	8000b34 <HAL_GetTick>
 800141c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001420:	f7ff fb88 	bl	8000b34 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e378      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1e0>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d073      	beq.n	8001536 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x220>
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d10e      	bne.n	8001478 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d063      	beq.n	8001534 <HAL_RCC_OscConfig+0x2f4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d15f      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e355      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x250>
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e025      	b.n	80014dc <HAL_RCC_OscConfig+0x29c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d114      	bne.n	80014c4 <HAL_RCC_OscConfig+0x284>
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a02      	ldr	r2, [pc, #8]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e013      	b.n	80014dc <HAL_RCC_OscConfig+0x29c>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	08006928 	.word	0x08006928
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004
 80014c4:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a8e      	ldr	r2, [pc, #568]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a8b      	ldr	r2, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb26 	bl	8000b34 <HAL_GetTick>
 80014e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb22 	bl	8000b34 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e312      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x2ac>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fb12 	bl	8000b34 <HAL_GetTick>
 8001510:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fb0e 	bl	8000b34 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e2fe      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	4b77      	ldr	r3, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d4>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d060      	beq.n	8001604 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x314>
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d119      	bne.n	8001582 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d116      	bne.n	8001582 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x32c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e2db      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b65      	ldr	r3, [pc, #404]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4962      	ldr	r1, [pc, #392]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e040      	b.n	8001604 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d023      	beq.n	80015d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a5d      	ldr	r2, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff facd 	bl	8000b34 <HAL_GetTick>
 800159a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fac9 	bl	8000b34 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e2b9      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b51      	ldr	r3, [pc, #324]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	494e      	ldr	r1, [pc, #312]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff faa9 	bl	8000b34 <HAL_GetTick>
 80015e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff faa5 	bl	8000b34 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e295      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8082 	beq.w	8001716 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d05f      	beq.n	80016da <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001620:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	429a      	cmp	r2, r3
 800162e:	d037      	beq.n	80016a0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e26d      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01b      	beq.n	800168a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001658:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001662:	f7ff fa67 	bl	8000b34 <HAL_GetTick>
 8001666:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fa63 	bl	8000b34 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b11      	cmp	r3, #17
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e253      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ef      	bne.n	800166a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001690:	f023 0210 	bic.w	r2, r3, #16
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	491a      	ldr	r1, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	4313      	orrs	r3, r2
 800169c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa40 	bl	8000b34 <HAL_GetTick>
 80016b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fa3c 	bl	8000b34 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b11      	cmp	r3, #17
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e22c      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x478>
 80016d8:	e01d      	b.n	8001716 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff fa23 	bl	8000b34 <HAL_GetTick>
 80016ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fa1f 	bl	8000b34 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b11      	cmp	r3, #17
 80016fe:	d903      	bls.n	8001708 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e20f      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
 8001704:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	4b83      	ldr	r3, [pc, #524]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ed      	bne.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80bd 	beq.w	800189e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800172a:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10e      	bne.n	8001754 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b78      	ldr	r3, [pc, #480]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	4a77      	ldr	r2, [pc, #476]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	; 0x58
 8001742:	4b75      	ldr	r3, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b71      	ldr	r3, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x6dc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d118      	bne.n	8001792 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001760:	4b6e      	ldr	r3, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x6dc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6d      	ldr	r2, [pc, #436]	; (800191c <HAL_RCC_OscConfig+0x6dc>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff f9e2 	bl	8000b34 <HAL_GetTick>
 8001770:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001774:	f7ff f9de 	bl	8000b34 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1ce      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_OscConfig+0x6dc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d02c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800179e:	4b5e      	ldr	r3, [pc, #376]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b0:	4959      	ldr	r1, [pc, #356]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017c4:	4b54      	ldr	r3, [pc, #336]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a53      	ldr	r2, [pc, #332]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	e018      	b.n	8001818 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017e6:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a4a      	ldr	r2, [pc, #296]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017f8:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	4a46      	ldr	r2, [pc, #280]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	4a42      	ldr	r2, [pc, #264]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d016      	beq.n	800184e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff f988 	bl	8000b34 <HAL_GetTick>
 8001824:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff f984 	bl	8000b34 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e172      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ed      	beq.n	8001828 <HAL_RCC_OscConfig+0x5e8>
 800184c:	e01d      	b.n	800188a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff f971 	bl	8000b34 <HAL_GetTick>
 8001852:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff f96d 	bl	8000b34 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e15b      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ed      	bne.n	8001856 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a25      	ldr	r2, [pc, #148]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 8001898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d041      	beq.n	800192e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01c      	beq.n	80018ec <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80018b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff f937 	bl	8000b34 <HAL_GetTick>
 80018c6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ca:	f7ff f933 	bl	8000b34 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e123      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80018de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ef      	beq.n	80018ca <HAL_RCC_OscConfig+0x68a>
 80018ea:	e020      	b.n	800192e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80018ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <HAL_RCC_OscConfig+0x6d8>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f91a 	bl	8000b34 <HAL_GetTick>
 8001900:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001902:	e00d      	b.n	8001920 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001904:	f7ff f916 	bl	8000b34 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d906      	bls.n	8001920 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e106      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001920:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ea      	bne.n	8001904 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80f5 	beq.w	8001b22 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	2b02      	cmp	r3, #2
 800193e:	f040 80cb 	bne.w	8001ad8 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001942:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0203 	and.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	429a      	cmp	r2, r3
 8001954:	d12c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	3b01      	subs	r3, #1
 8001962:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d123      	bne.n	80019b0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d11b      	bne.n	80019b0 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d113      	bne.n	80019b0 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	3b01      	subs	r3, #1
 8001996:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d109      	bne.n	80019b0 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	085b      	lsrs	r3, r3, #1
 80019a8:	3b01      	subs	r3, #1
 80019aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d06d      	beq.n	8001a8c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d068      	beq.n	8001a88 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019b6:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019c2:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0a8      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a55      	ldr	r2, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 80019d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019de:	f7ff f8a9 	bl	8000b34 <HAL_GetTick>
 80019e2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f8a5 	bl	8000b34 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e095      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <HAL_RCC_OscConfig+0x8f0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a14:	3a01      	subs	r2, #1
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a1e:	0212      	lsls	r2, r2, #8
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0552      	lsls	r2, r2, #21
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a32:	0852      	lsrs	r2, r2, #1
 8001a34:	3a01      	subs	r2, #1
 8001a36:	0652      	lsls	r2, r2, #25
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a3e:	06d2      	lsls	r2, r2, #27
 8001a40:	430a      	orrs	r2, r1
 8001a42:	493a      	ldr	r1, [pc, #232]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a48:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a37      	ldr	r2, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a54:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a34      	ldr	r2, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a60:	f7ff f868 	bl	8000b34 <HAL_GetTick>
 8001a64:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff f864 	bl	8000b34 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e054      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a86:	e04c      	b.n	8001b22 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e04b      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d144      	bne.n	8001b22 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab0:	f7ff f840 	bl	8000b34 <HAL_GetTick>
 8001ab4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f83c 	bl	8000b34 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e02c      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x878>
 8001ad6:	e024      	b.n	8001b22 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d01f      	beq.n	8001b1e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f823 	bl	8000b34 <HAL_GetTick>
 8001aee:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff f81f 	bl	8000b34 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e00f      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4905      	ldr	r1, [pc, #20]	; (8001b2c <HAL_RCC_OscConfig+0x8ec>)
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_RCC_OscConfig+0x8f4>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e001      	b.n	8001b22 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	019d800c 	.word	0x019d800c
 8001b34:	feeefffc 	.word	0xfeeefffc

08001b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e11d      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b90      	ldr	r3, [pc, #576]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b8d      	ldr	r3, [pc, #564]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	498b      	ldr	r1, [pc, #556]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e105      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d908      	bls.n	8001bae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	497b      	ldr	r1, [pc, #492]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d079      	beq.n	8001cae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d11e      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0dc      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001bd2:	f000 fa3b 	bl	800204c <RCC_GetSysClockFreqFromPLLSource>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a70      	ldr	r2, [pc, #448]	; (8001d9c <HAL_RCC_ClockConfig+0x264>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d946      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001bde:	4b6e      	ldr	r3, [pc, #440]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d140      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bea:	4b6b      	ldr	r3, [pc, #428]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bf2:	4a69      	ldr	r2, [pc, #420]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e035      	b.n	8001c6c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c08:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d115      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b9      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c20:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0ad      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0a5      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001c40:	f000 f8b4 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_RCC_ClockConfig+0x264>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d90f      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c4c:	4b52      	ldr	r3, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c6c:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 0203 	bic.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4947      	ldr	r1, [pc, #284]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7e:	f7fe ff59 	bl	8000b34 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c86:	f7fe ff55 	bl	8000b34 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e077      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9c:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 020c 	and.w	r2, r3, #12
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d1eb      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a37      	ldr	r2, [pc, #220]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cbe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d208      	bcs.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d210      	bcs.n	8001d1e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 020f 	bic.w	r2, r3, #15
 8001d04:	4923      	ldr	r1, [pc, #140]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e036      	b.n	8001d8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4918      	ldr	r1, [pc, #96]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4910      	ldr	r1, [pc, #64]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5c:	f000 f826 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <HAL_RCC_ClockConfig+0x268>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_RCC_ClockConfig+0x26c>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_ClockConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fdd5 	bl	8000930 <HAL_InitTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	73fb      	strb	r3, [r7, #15]

  return status;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	04c4b400 	.word	0x04c4b400
 8001da0:	08006928 	.word	0x08006928
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dba:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d121      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d11e      	bne.n	8001e1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de0:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e005      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e08:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10d      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d102      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e004      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d134      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d003      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0xac>
 8001e50:	e005      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e54:	617b      	str	r3, [r7, #20]
      break;
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5a:	617b      	str	r3, [r7, #20]
      break;
 8001e5c:	e002      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	617b      	str	r3, [r7, #20]
      break;
 8001e62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3301      	adds	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	0e5b      	lsrs	r3, r3, #25
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	3301      	adds	r3, #1
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08006940 	.word	0x08006940
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4904      	ldr	r1, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08006938 	.word	0x08006938

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f0c:	f7ff ffda 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4904      	ldr	r1, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08006938 	.word	0x08006938

08001f34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	220f      	movs	r2, #15
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_RCC_GetClockConfig+0x60>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40022000 	.word	0x40022000

08001f98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fb0:	f7ff f872 	bl	8001098 <HAL_PWREx_GetVoltageRange>
 8001fb4:	6178      	str	r0, [r7, #20]
 8001fb6:	e014      	b.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	4a21      	ldr	r2, [pc, #132]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fd0:	f7ff f862 	bl	8001098 <HAL_PWREx_GetVoltageRange>
 8001fd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe8:	d10b      	bne.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d913      	bls.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ff4:	d902      	bls.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e00d      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e00a      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b7f      	cmp	r3, #127	; 0x7f
 8002006:	d902      	bls.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e004      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b70      	cmp	r3, #112	; 0x70
 8002012:	d101      	bne.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002014:	2301      	movs	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 020f 	bic.w	r2, r3, #15
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	40022000 	.word	0x40022000

0800204c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d00b      	beq.n	800207a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d825      	bhi.n	80020b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d008      	beq.n	8002080 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d11f      	bne.n	80020b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002076:	613b      	str	r3, [r7, #16]
    break;
 8002078:	e01f      	b.n	80020ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800207c:	613b      	str	r3, [r7, #16]
    break;
 800207e:	e01c      	b.n	80020ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e005      	b.n	80020a8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	613b      	str	r3, [r7, #16]
    break;
 80020b2:	e002      	b.n	80020ba <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
    break;
 80020b8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	3301      	adds	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	fb03 f202 	mul.w	r2, r3, r2
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0e5b      	lsrs	r3, r3, #25
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80020fa:	683b      	ldr	r3, [r7, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000
 800210c:	00f42400 	.word	0x00f42400
 8002110:	007a1200 	.word	0x007a1200
 8002114:	08006940 	.word	0x08006940

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002120:	2300      	movs	r3, #0
 8002122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002124:	2300      	movs	r3, #0
 8002126:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002130:	2b00      	cmp	r3, #0
 8002132:	d040      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d02a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d825      	bhi.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002140:	2b60      	cmp	r3, #96	; 0x60
 8002142:	d026      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d821      	bhi.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d006      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800214c:	2b40      	cmp	r3, #64	; 0x40
 800214e:	d81d      	bhi.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d009      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002154:	2b20      	cmp	r3, #32
 8002156:	d010      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002158:	e018      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a88      	ldr	r2, [pc, #544]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002166:	e015      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fb3e 	bl	80027f0 <RCCEx_PLLSAI1_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002178:	e00c      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3320      	adds	r3, #32
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fc29 	bl	80029d8 <RCCEx_PLLSAI2_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218a:	e003      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	74fb      	strb	r3, [r7, #19]
      break;
 8002190:	e000      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10b      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800219a:	4b79      	ldr	r3, [pc, #484]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800219c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021a0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a8:	4975      	ldr	r1, [pc, #468]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80021b0:	e001      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d047      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	d030      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d82a      	bhi.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80021d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021d6:	d02a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80021d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021dc:	d824      	bhi.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80021de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e2:	d008      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80021e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e8:	d81e      	bhi.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80021ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f2:	d010      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80021f4:	e018      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021f6:	4b62      	ldr	r3, [pc, #392]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a61      	ldr	r2, [pc, #388]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002202:	e015      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f000 faf0 	bl	80027f0 <RCCEx_PLLSAI1_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002214:	e00c      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3320      	adds	r3, #32
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fbdb 	bl	80029d8 <RCCEx_PLLSAI2_Config>
 8002222:	4603      	mov	r3, r0
 8002224:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002226:	e003      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	74fb      	strb	r3, [r7, #19]
      break;
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800222e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10b      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002236:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	494e      	ldr	r1, [pc, #312]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800224c:	e001      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 809f 	beq.w	800239e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002274:	2300      	movs	r3, #0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a40      	ldr	r2, [pc, #256]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
 8002286:	4b3e      	ldr	r3, [pc, #248]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3a      	ldr	r2, [pc, #232]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022a2:	f7fe fc47 	bl	8000b34 <HAL_GetTick>
 80022a6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022a8:	e009      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7fe fc43 	bl	8000b34 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d902      	bls.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	74fb      	strb	r3, [r7, #19]
        break;
 80022bc:	e005      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ef      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d15b      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022da:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01f      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d019      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800231a:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d016      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fc02 	bl	8000b34 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002332:	e00b      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fbfe 	bl	8000b34 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d902      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	74fb      	strb	r3, [r7, #19]
            break;
 800234a:	e006      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0ec      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10c      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002378:	e008      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	74bb      	strb	r3, [r7, #18]
 800237e:	e005      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238c:	7c7b      	ldrb	r3, [r7, #17]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002392:	4ba0      	ldr	r3, [pc, #640]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	4a9f      	ldr	r2, [pc, #636]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023aa:	4b9a      	ldr	r3, [pc, #616]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f023 0203 	bic.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	4996      	ldr	r1, [pc, #600]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023cc:	4b91      	ldr	r3, [pc, #580]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 020c 	bic.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	498e      	ldr	r1, [pc, #568]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ee:	4b89      	ldr	r3, [pc, #548]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	4985      	ldr	r1, [pc, #532]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002410:	4b80      	ldr	r3, [pc, #512]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	497d      	ldr	r1, [pc, #500]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002432:	4b78      	ldr	r3, [pc, #480]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	4974      	ldr	r1, [pc, #464]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002454:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002462:	496c      	ldr	r1, [pc, #432]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002476:	4b67      	ldr	r3, [pc, #412]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002484:	4963      	ldr	r1, [pc, #396]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002498:	4b5e      	ldr	r3, [pc, #376]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a6:	495b      	ldr	r1, [pc, #364]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	4952      	ldr	r1, [pc, #328]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024dc:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	494a      	ldr	r1, [pc, #296]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024fe:	4b45      	ldr	r3, [pc, #276]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	4941      	ldr	r1, [pc, #260]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002520:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	4939      	ldr	r1, [pc, #228]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d028      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002542:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	4930      	ldr	r1, [pc, #192]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002560:	d106      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002562:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256c:	60d3      	str	r3, [r2, #12]
 800256e:	e011      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002578:	d10c      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	2101      	movs	r1, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f935 	bl	80027f0 <RCCEx_PLLSAI1_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d04d      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a8:	d108      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025b0:	4a18      	ldr	r2, [pc, #96]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80025ba:	e012      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025c2:	4a14      	ldr	r2, [pc, #80]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025da:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ea:	d106      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f6:	60d3      	str	r3, [r2, #12]
 80025f8:	e020      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002602:	d109      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a02      	ldr	r2, [pc, #8]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	60d3      	str	r3, [r2, #12]
 8002610:	e014      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002620:	d10c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2101      	movs	r1, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f8e1 	bl	80027f0 <RCCEx_PLLSAI1_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d028      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002656:	4965      	ldr	r1, [pc, #404]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002666:	d106      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002668:	4b60      	ldr	r3, [pc, #384]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a5f      	ldr	r2, [pc, #380]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002672:	60d3      	str	r3, [r2, #12]
 8002674:	e011      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800267a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800267e:	d10c      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f8b2 	bl	80027f0 <RCCEx_PLLSAI1_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01e      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b6:	494d      	ldr	r1, [pc, #308]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2102      	movs	r1, #2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 f88d 	bl	80027f0 <RCCEx_PLLSAI1_Config>
 80026d6:	4603      	mov	r3, r0
 80026d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026f0:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80026f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026f6:	f023 0204 	bic.w	r2, r3, #4
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002700:	493a      	ldr	r1, [pc, #232]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002714:	4b35      	ldr	r3, [pc, #212]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800271a:	f023 0218 	bic.w	r2, r3, #24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	4931      	ldr	r1, [pc, #196]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d035      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002738:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002744:	f7fe f9f6 	bl	8000b34 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800274a:	e009      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800274c:	f7fe f9f2 	bl	8000b34 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	74fb      	strb	r3, [r7, #19]
        break;
 800275e:	e005      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ef      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d113      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002782:	491a      	ldr	r1, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3320      	adds	r3, #32
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f921 	bl	80029d8 <RCCEx_PLLSAI2_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d017      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	490a      	ldr	r1, [pc, #40]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027d2:	d105      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80027da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000

080027f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027fe:	4b72      	ldr	r3, [pc, #456]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00e      	beq.n	8002828 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800280a:	4b6f      	ldr	r3, [pc, #444]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d103      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
       ||
 800281e:	2b00      	cmp	r3, #0
 8002820:	d142      	bne.n	80028a8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e03f      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d018      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x72>
 8002830:	2b03      	cmp	r3, #3
 8002832:	d825      	bhi.n	8002880 <RCCEx_PLLSAI1_Config+0x90>
 8002834:	2b01      	cmp	r3, #1
 8002836:	d002      	beq.n	800283e <RCCEx_PLLSAI1_Config+0x4e>
 8002838:	2b02      	cmp	r3, #2
 800283a:	d009      	beq.n	8002850 <RCCEx_PLLSAI1_Config+0x60>
 800283c:	e020      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11d      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284e:	e01a      	b.n	8002886 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002850:	4b5d      	ldr	r3, [pc, #372]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e013      	b.n	800288a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002862:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800287e:	e006      	b.n	800288e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e004      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800288e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002896:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4949      	ldr	r1, [pc, #292]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 8086 	bne.w	80029bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028b0:	4b45      	ldr	r3, [pc, #276]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a44      	ldr	r2, [pc, #272]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fe f93a 	bl	8000b34 <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028c2:	e009      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c4:	f7fe f936 	bl	8000b34 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d902      	bls.n	80028d8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
        break;
 80028d6:	e005      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ef      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d168      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d113      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	4b35      	ldr	r3, [pc, #212]	; (80029cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	0211      	lsls	r1, r2, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68d2      	ldr	r2, [r2, #12]
 8002902:	06d2      	lsls	r2, r2, #27
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6852      	ldr	r2, [r2, #4]
 800290a:	3a01      	subs	r2, #1
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	430a      	orrs	r2, r1
 8002910:	492d      	ldr	r1, [pc, #180]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]
 8002916:	e02d      	b.n	8002974 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d115      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6892      	ldr	r2, [r2, #8]
 800292a:	0211      	lsls	r1, r2, #8
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6912      	ldr	r2, [r2, #16]
 8002930:	0852      	lsrs	r2, r2, #1
 8002932:	3a01      	subs	r2, #1
 8002934:	0552      	lsls	r2, r2, #21
 8002936:	4311      	orrs	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6852      	ldr	r2, [r2, #4]
 800293c:	3a01      	subs	r2, #1
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	430a      	orrs	r2, r1
 8002942:	4921      	ldr	r1, [pc, #132]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	610b      	str	r3, [r1, #16]
 8002948:	e014      	b.n	8002974 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6892      	ldr	r2, [r2, #8]
 8002956:	0211      	lsls	r1, r2, #8
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6952      	ldr	r2, [r2, #20]
 800295c:	0852      	lsrs	r2, r2, #1
 800295e:	3a01      	subs	r2, #1
 8002960:	0652      	lsls	r2, r2, #25
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6852      	ldr	r2, [r2, #4]
 8002968:	3a01      	subs	r2, #1
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	430a      	orrs	r2, r1
 800296e:	4916      	ldr	r1, [pc, #88]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002970:	4313      	orrs	r3, r2
 8002972:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800297a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800297e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe f8d8 	bl	8000b34 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002986:	e009      	b.n	800299c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002988:	f7fe f8d4 	bl	8000b34 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	73fb      	strb	r3, [r7, #15]
          break;
 800299a:	e005      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ef      	beq.n	8002988 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4904      	ldr	r1, [pc, #16]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	07ff800f 	.word	0x07ff800f
 80029d0:	ff9f800f 	.word	0xff9f800f
 80029d4:	f9ff800f 	.word	0xf9ff800f

080029d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029e6:	4b72      	ldr	r3, [pc, #456]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00e      	beq.n	8002a10 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029f2:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0203 	and.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d103      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
       ||
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d142      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e03f      	b.n	8002a90 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d018      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0x72>
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d825      	bhi.n	8002a68 <RCCEx_PLLSAI2_Config+0x90>
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d002      	beq.n	8002a26 <RCCEx_PLLSAI2_Config+0x4e>
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d009      	beq.n	8002a38 <RCCEx_PLLSAI2_Config+0x60>
 8002a24:	e020      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a26:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11d      	bne.n	8002a6e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e01a      	b.n	8002a6e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a38:	4b5d      	ldr	r3, [pc, #372]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d116      	bne.n	8002a72 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e013      	b.n	8002a72 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a4a:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a56:	4b56      	ldr	r3, [pc, #344]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a66:	e006      	b.n	8002a76 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e004      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002a76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d108      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002a7e:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4949      	ldr	r1, [pc, #292]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 8086 	bne.w	8002ba4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a98:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a44      	ldr	r2, [pc, #272]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa4:	f7fe f846 	bl	8000b34 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aaa:	e009      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aac:	f7fe f842 	bl	8000b34 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	73fb      	strb	r3, [r7, #15]
        break;
 8002abe:	e005      	b.n	8002acc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ef      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d168      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d113      	bne.n	8002b00 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad8:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	06d2      	lsls	r2, r2, #27
 8002aec:	4311      	orrs	r1, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6852      	ldr	r2, [r2, #4]
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	430a      	orrs	r2, r1
 8002af8:	492d      	ldr	r1, [pc, #180]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	614b      	str	r3, [r1, #20]
 8002afe:	e02d      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d115      	bne.n	8002b32 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6892      	ldr	r2, [r2, #8]
 8002b12:	0211      	lsls	r1, r2, #8
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6912      	ldr	r2, [r2, #16]
 8002b18:	0852      	lsrs	r2, r2, #1
 8002b1a:	3a01      	subs	r2, #1
 8002b1c:	0552      	lsls	r2, r2, #21
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6852      	ldr	r2, [r2, #4]
 8002b24:	3a01      	subs	r2, #1
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	4921      	ldr	r1, [pc, #132]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	614b      	str	r3, [r1, #20]
 8002b30:	e014      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b32:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <RCCEx_PLLSAI2_Config+0x1e4>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6892      	ldr	r2, [r2, #8]
 8002b3e:	0211      	lsls	r1, r2, #8
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6952      	ldr	r2, [r2, #20]
 8002b44:	0852      	lsrs	r2, r2, #1
 8002b46:	3a01      	subs	r2, #1
 8002b48:	0652      	lsls	r2, r2, #25
 8002b4a:	4311      	orrs	r1, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6852      	ldr	r2, [r2, #4]
 8002b50:	3a01      	subs	r2, #1
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	430a      	orrs	r2, r1
 8002b56:	4916      	ldr	r1, [pc, #88]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fd ffe4 	bl	8000b34 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b6e:	e009      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b70:	f7fd ffe0 	bl	8000b34 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d902      	bls.n	8002b84 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	73fb      	strb	r3, [r7, #15]
          break;
 8002b82:	e005      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ef      	beq.n	8002b70 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	07ff800f 	.word	0x07ff800f
 8002bb8:	ff9f800f 	.word	0xff9f800f
 8002bbc:	f9ff800f 	.word	0xf9ff800f

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e049      	b.n	8002c66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f841 	bl	8002c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 f9f8 	bl	8002ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d001      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e04f      	b.n	8002d3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a23      	ldr	r2, [pc, #140]	; (8002d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01d      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x76>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d018      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x76>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x76>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x76>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d009      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x76>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_TIM_Base_Start_IT+0x76>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d115      	bne.n	8002d26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	d015      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0xb4>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d12:	d011      	beq.n	8002d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d24:	e008      	b.n	8002d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e000      	b.n	8002d3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40013400 	.word	0x40013400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	00010007 	.word	0x00010007

08002d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0202 	mvn.w	r2, #2
 8002d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f905 	bl	8002fb6 <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8f7 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f908 	bl	8002fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d122      	bne.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d11b      	bne.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0204 	mvn.w	r2, #4
 8002de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8db 	bl	8002fb6 <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f8cd 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f8de 	bl	8002fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0208 	mvn.w	r2, #8
 8002e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8b1 	bl	8002fb6 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8a3 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f8b4 	bl	8002fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0210 	mvn.w	r2, #16
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2208      	movs	r2, #8
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f887 	bl	8002fb6 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f879 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f88a 	bl	8002fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0201 	mvn.w	r2, #1
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fc82 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b80      	cmp	r3, #128	; 0x80
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f914 	bl	800313c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	d10e      	bne.n	8002f42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b80      	cmp	r3, #128	; 0x80
 8002f30:	d107      	bne.n	8002f42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f907 	bl	8003150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d10e      	bne.n	8002f6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d107      	bne.n	8002f6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f838 	bl	8002fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d10e      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d107      	bne.n	8002f9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f06f 0220 	mvn.w	r2, #32
 8002f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8c7 	bl	8003128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a40      	ldr	r2, [pc, #256]	; (8003108 <TIM_Base_SetConfig+0x114>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d00f      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a3d      	ldr	r2, [pc, #244]	; (800310c <TIM_Base_SetConfig+0x118>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00b      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <TIM_Base_SetConfig+0x11c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d007      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3b      	ldr	r2, [pc, #236]	; (8003114 <TIM_Base_SetConfig+0x120>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <TIM_Base_SetConfig+0x124>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d108      	bne.n	8003046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <TIM_Base_SetConfig+0x114>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01f      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d01b      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2c      	ldr	r2, [pc, #176]	; (800310c <TIM_Base_SetConfig+0x118>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d017      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <TIM_Base_SetConfig+0x11c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <TIM_Base_SetConfig+0x120>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00f      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a29      	ldr	r2, [pc, #164]	; (8003118 <TIM_Base_SetConfig+0x124>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00b      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a28      	ldr	r2, [pc, #160]	; (800311c <TIM_Base_SetConfig+0x128>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <TIM_Base_SetConfig+0x12c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_Base_SetConfig+0x9a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a26      	ldr	r2, [pc, #152]	; (8003124 <TIM_Base_SetConfig+0x130>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d108      	bne.n	80030a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <TIM_Base_SetConfig+0x114>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00f      	beq.n	80030ec <TIM_Base_SetConfig+0xf8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <TIM_Base_SetConfig+0x124>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00b      	beq.n	80030ec <TIM_Base_SetConfig+0xf8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a11      	ldr	r2, [pc, #68]	; (800311c <TIM_Base_SetConfig+0x128>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0xf8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <TIM_Base_SetConfig+0x12c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0xf8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <TIM_Base_SetConfig+0x130>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	615a      	str	r2, [r3, #20]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800
 8003114:	40000c00 	.word	0x40000c00
 8003118:	40013400 	.word	0x40013400
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	40014800 	.word	0x40014800

08003128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e042      	b.n	80031fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7fd fb71 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2224      	movs	r2, #36	; 0x24
 8003192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f82c 	bl	8003204 <UART_SetConfig>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e022      	b.n	80031fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fb1c 	bl	80037fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fba3 	bl	8003940 <UART_CheckIdleState>
 80031fa:	4603      	mov	r3, r0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003208:	b08c      	sub	sp, #48	; 0x30
 800320a:	af00      	add	r7, sp, #0
 800320c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	431a      	orrs	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4313      	orrs	r3, r2
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4baa      	ldr	r3, [pc, #680]	; (80034dc <UART_SetConfig+0x2d8>)
 8003234:	4013      	ands	r3, r2
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800323c:	430b      	orrs	r3, r1
 800323e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a9f      	ldr	r2, [pc, #636]	; (80034e0 <UART_SetConfig+0x2dc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	4313      	orrs	r3, r2
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800327a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	f023 010f 	bic.w	r1, r3, #15
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a90      	ldr	r2, [pc, #576]	; (80034e4 <UART_SetConfig+0x2e0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d125      	bne.n	80032f4 <UART_SetConfig+0xf0>
 80032a8:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <UART_SetConfig+0x2e4>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d81a      	bhi.n	80032ec <UART_SetConfig+0xe8>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <UART_SetConfig+0xb8>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032dd 	.word	0x080032dd
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032d2:	e116      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032d4:	2302      	movs	r3, #2
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032da:	e112      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032dc:	2304      	movs	r3, #4
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032e2:	e10e      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032e4:	2308      	movs	r3, #8
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ea:	e10a      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032ec:	2310      	movs	r3, #16
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f2:	e106      	b.n	8003502 <UART_SetConfig+0x2fe>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <UART_SetConfig+0x2e8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d138      	bne.n	8003370 <UART_SetConfig+0x16c>
 80032fe:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <UART_SetConfig+0x2e4>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d82d      	bhi.n	8003368 <UART_SetConfig+0x164>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <UART_SetConfig+0x110>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003349 	.word	0x08003349
 8003318:	08003369 	.word	0x08003369
 800331c:	08003369 	.word	0x08003369
 8003320:	08003369 	.word	0x08003369
 8003324:	08003359 	.word	0x08003359
 8003328:	08003369 	.word	0x08003369
 800332c:	08003369 	.word	0x08003369
 8003330:	08003369 	.word	0x08003369
 8003334:	08003351 	.word	0x08003351
 8003338:	08003369 	.word	0x08003369
 800333c:	08003369 	.word	0x08003369
 8003340:	08003369 	.word	0x08003369
 8003344:	08003361 	.word	0x08003361
 8003348:	2300      	movs	r3, #0
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334e:	e0d8      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003350:	2302      	movs	r3, #2
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003356:	e0d4      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003358:	2304      	movs	r3, #4
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800335e:	e0d0      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003360:	2308      	movs	r3, #8
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003366:	e0cc      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003368:	2310      	movs	r3, #16
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800336e:	e0c8      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <UART_SetConfig+0x2ec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d125      	bne.n	80033c6 <UART_SetConfig+0x1c2>
 800337a:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <UART_SetConfig+0x2e4>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	d016      	beq.n	80033b6 <UART_SetConfig+0x1b2>
 8003388:	2b30      	cmp	r3, #48	; 0x30
 800338a:	d818      	bhi.n	80033be <UART_SetConfig+0x1ba>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d00a      	beq.n	80033a6 <UART_SetConfig+0x1a2>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d814      	bhi.n	80033be <UART_SetConfig+0x1ba>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <UART_SetConfig+0x19a>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d008      	beq.n	80033ae <UART_SetConfig+0x1aa>
 800339c:	e00f      	b.n	80033be <UART_SetConfig+0x1ba>
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a4:	e0ad      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033a6:	2302      	movs	r3, #2
 80033a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ac:	e0a9      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033ae:	2304      	movs	r3, #4
 80033b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033b4:	e0a5      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033b6:	2308      	movs	r3, #8
 80033b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033bc:	e0a1      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033be:	2310      	movs	r3, #16
 80033c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033c4:	e09d      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <UART_SetConfig+0x2f0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d125      	bne.n	800341c <UART_SetConfig+0x218>
 80033d0:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <UART_SetConfig+0x2e4>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033da:	2bc0      	cmp	r3, #192	; 0xc0
 80033dc:	d016      	beq.n	800340c <UART_SetConfig+0x208>
 80033de:	2bc0      	cmp	r3, #192	; 0xc0
 80033e0:	d818      	bhi.n	8003414 <UART_SetConfig+0x210>
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d00a      	beq.n	80033fc <UART_SetConfig+0x1f8>
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d814      	bhi.n	8003414 <UART_SetConfig+0x210>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <UART_SetConfig+0x1f0>
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d008      	beq.n	8003404 <UART_SetConfig+0x200>
 80033f2:	e00f      	b.n	8003414 <UART_SetConfig+0x210>
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fa:	e082      	b.n	8003502 <UART_SetConfig+0x2fe>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003402:	e07e      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800340a:	e07a      	b.n	8003502 <UART_SetConfig+0x2fe>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003412:	e076      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800341a:	e072      	b.n	8003502 <UART_SetConfig+0x2fe>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a35      	ldr	r2, [pc, #212]	; (80034f8 <UART_SetConfig+0x2f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12a      	bne.n	800347c <UART_SetConfig+0x278>
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <UART_SetConfig+0x2e4>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003434:	d01a      	beq.n	800346c <UART_SetConfig+0x268>
 8003436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343a:	d81b      	bhi.n	8003474 <UART_SetConfig+0x270>
 800343c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003440:	d00c      	beq.n	800345c <UART_SetConfig+0x258>
 8003442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003446:	d815      	bhi.n	8003474 <UART_SetConfig+0x270>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <UART_SetConfig+0x250>
 800344c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003450:	d008      	beq.n	8003464 <UART_SetConfig+0x260>
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x270>
 8003454:	2300      	movs	r3, #0
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345a:	e052      	b.n	8003502 <UART_SetConfig+0x2fe>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003462:	e04e      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800346a:	e04a      	b.n	8003502 <UART_SetConfig+0x2fe>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003472:	e046      	b.n	8003502 <UART_SetConfig+0x2fe>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347a:	e042      	b.n	8003502 <UART_SetConfig+0x2fe>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <UART_SetConfig+0x2dc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d13a      	bne.n	80034fc <UART_SetConfig+0x2f8>
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <UART_SetConfig+0x2e4>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003494:	d01a      	beq.n	80034cc <UART_SetConfig+0x2c8>
 8003496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800349a:	d81b      	bhi.n	80034d4 <UART_SetConfig+0x2d0>
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a0:	d00c      	beq.n	80034bc <UART_SetConfig+0x2b8>
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	d815      	bhi.n	80034d4 <UART_SetConfig+0x2d0>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <UART_SetConfig+0x2b0>
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d008      	beq.n	80034c4 <UART_SetConfig+0x2c0>
 80034b2:	e00f      	b.n	80034d4 <UART_SetConfig+0x2d0>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ba:	e022      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034bc:	2302      	movs	r3, #2
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c2:	e01e      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034c4:	2304      	movs	r3, #4
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ca:	e01a      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034cc:	2308      	movs	r3, #8
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d2:	e016      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034d4:	2310      	movs	r3, #16
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034da:	e012      	b.n	8003502 <UART_SetConfig+0x2fe>
 80034dc:	cfff69f3 	.word	0xcfff69f3
 80034e0:	40008000 	.word	0x40008000
 80034e4:	40013800 	.word	0x40013800
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40004800 	.word	0x40004800
 80034f4:	40004c00 	.word	0x40004c00
 80034f8:	40005000 	.word	0x40005000
 80034fc:	2310      	movs	r3, #16
 80034fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4aae      	ldr	r2, [pc, #696]	; (80037c0 <UART_SetConfig+0x5bc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	f040 8097 	bne.w	800363c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800350e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003512:	2b08      	cmp	r3, #8
 8003514:	d823      	bhi.n	800355e <UART_SetConfig+0x35a>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x318>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003541 	.word	0x08003541
 8003520:	0800355f 	.word	0x0800355f
 8003524:	08003549 	.word	0x08003549
 8003528:	0800355f 	.word	0x0800355f
 800352c:	0800354f 	.word	0x0800354f
 8003530:	0800355f 	.word	0x0800355f
 8003534:	0800355f 	.word	0x0800355f
 8003538:	0800355f 	.word	0x0800355f
 800353c:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7fe fccc 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003546:	e010      	b.n	800356a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003548:	4b9e      	ldr	r3, [pc, #632]	; (80037c4 <UART_SetConfig+0x5c0>)
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800354c:	e00d      	b.n	800356a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354e:	f7fe fc2d 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8003552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003554:	e009      	b.n	800356a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800355c:	e005      	b.n	800356a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8130 	beq.w	80037d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	4a94      	ldr	r2, [pc, #592]	; (80037c8 <UART_SetConfig+0x5c4>)
 8003578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357c:	461a      	mov	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	fbb3 f3f2 	udiv	r3, r3, r2
 8003584:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d305      	bcc.n	80035a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d903      	bls.n	80035aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035a8:	e113      	b.n	80037d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2200      	movs	r2, #0
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	60fa      	str	r2, [r7, #12]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	4a84      	ldr	r2, [pc, #528]	; (80037c8 <UART_SetConfig+0x5c4>)
 80035b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2200      	movs	r2, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035cc:	f7fc fe18 	bl	8000200 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	020b      	lsls	r3, r1, #8
 80035e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035e6:	0202      	lsls	r2, r0, #8
 80035e8:	6979      	ldr	r1, [r7, #20]
 80035ea:	6849      	ldr	r1, [r1, #4]
 80035ec:	0849      	lsrs	r1, r1, #1
 80035ee:	2000      	movs	r0, #0
 80035f0:	460c      	mov	r4, r1
 80035f2:	4605      	mov	r5, r0
 80035f4:	eb12 0804 	adds.w	r8, r2, r4
 80035f8:	eb43 0905 	adc.w	r9, r3, r5
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	469a      	mov	sl, r3
 8003604:	4693      	mov	fp, r2
 8003606:	4652      	mov	r2, sl
 8003608:	465b      	mov	r3, fp
 800360a:	4640      	mov	r0, r8
 800360c:	4649      	mov	r1, r9
 800360e:	f7fc fdf7 	bl	8000200 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4613      	mov	r3, r2
 8003618:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003620:	d308      	bcc.n	8003634 <UART_SetConfig+0x430>
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d204      	bcs.n	8003634 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	e0ce      	b.n	80037d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800363a:	e0ca      	b.n	80037d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d166      	bne.n	8003714 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800364a:	2b08      	cmp	r3, #8
 800364c:	d827      	bhi.n	800369e <UART_SetConfig+0x49a>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x450>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003679 	.word	0x08003679
 8003658:	08003681 	.word	0x08003681
 800365c:	08003689 	.word	0x08003689
 8003660:	0800369f 	.word	0x0800369f
 8003664:	0800368f 	.word	0x0800368f
 8003668:	0800369f 	.word	0x0800369f
 800366c:	0800369f 	.word	0x0800369f
 8003670:	0800369f 	.word	0x0800369f
 8003674:	08003697 	.word	0x08003697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fc30 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 800367c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800367e:	e014      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe fc42 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8003684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003686:	e010      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003688:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <UART_SetConfig+0x5c0>)
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800368c:	e00d      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368e:	f7fe fb8d 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003694:	e009      	b.n	80036aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800369c:	e005      	b.n	80036aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8090 	beq.w	80037d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	4a44      	ldr	r2, [pc, #272]	; (80037c8 <UART_SetConfig+0x5c4>)
 80036b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036bc:	461a      	mov	r2, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036c4:	005a      	lsls	r2, r3, #1
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	441a      	add	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d916      	bls.n	800370c <UART_SetConfig+0x508>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d212      	bcs.n	800370c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f023 030f 	bic.w	r3, r3, #15
 80036ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	8bfb      	ldrh	r3, [r7, #30]
 80036fe:	4313      	orrs	r3, r2
 8003700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	8bfa      	ldrh	r2, [r7, #30]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e062      	b.n	80037d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003712:	e05e      	b.n	80037d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003714:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003718:	2b08      	cmp	r3, #8
 800371a:	d828      	bhi.n	800376e <UART_SetConfig+0x56a>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <UART_SetConfig+0x520>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003749 	.word	0x08003749
 8003728:	08003751 	.word	0x08003751
 800372c:	08003759 	.word	0x08003759
 8003730:	0800376f 	.word	0x0800376f
 8003734:	0800375f 	.word	0x0800375f
 8003738:	0800376f 	.word	0x0800376f
 800373c:	0800376f 	.word	0x0800376f
 8003740:	0800376f 	.word	0x0800376f
 8003744:	08003767 	.word	0x08003767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fbc8 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800374e:	e014      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003750:	f7fe fbda 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003756:	e010      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <UART_SetConfig+0x5c0>)
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800375c:	e00d      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375e:	f7fe fb25 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003764:	e009      	b.n	800377a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800376c:	e005      	b.n	800377a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003778:	bf00      	nop
    }

    if (pclk != 0U)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d028      	beq.n	80037d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <UART_SetConfig+0x5c4>)
 8003786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800378a:	461a      	mov	r2, r3
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	441a      	add	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d910      	bls.n	80037cc <UART_SetConfig+0x5c8>
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d20c      	bcs.n	80037cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e009      	b.n	80037d2 <UART_SetConfig+0x5ce>
 80037be:	bf00      	nop
 80037c0:	40008000 	.word	0x40008000
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	08006970 	.word	0x08006970
      }
      else
      {
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2201      	movs	r2, #1
 80037de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2200      	movs	r2, #0
 80037ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3730      	adds	r7, #48	; 0x30
 80037f6:	46bd      	mov	sp, r7
 80037f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01a      	beq.n	8003912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038fa:	d10a      	bne.n	8003912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003950:	f7fd f8f0 	bl	8000b34 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d10e      	bne.n	8003982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f82f 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e025      	b.n	80039ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d10e      	bne.n	80039ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f819 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e00f      	b.n	80039ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b09c      	sub	sp, #112	; 0x70
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e6:	e0a9      	b.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	f000 80a5 	beq.w	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fd f89f 	bl	8000b34 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d140      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e6      	bne.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	663b      	str	r3, [r7, #96]	; 0x60
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e069      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d051      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa6:	d149      	bne.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e6      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	613b      	str	r3, [r7, #16]
   return(result);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b04:	623a      	str	r2, [r7, #32]
 8003b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	69f9      	ldr	r1, [r7, #28]
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e010      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	f43f af46 	beq.w	80039e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3770      	adds	r7, #112	; 0x70
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <__NVIC_SetPriority>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0a      	blt.n	8003b92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <__NVIC_SetPriority+0x4c>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b90:	e00a      	b.n	8003ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <__NVIC_SetPriority+0x50>)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	761a      	strb	r2, [r3, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <SysTick_Handler+0x1c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003bc4:	f001 fd28 	bl	8005618 <xTaskGetSchedulerState>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003bce:	f002 fb13 	bl	80061f8 <xPortSysTickHandler>
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000e010 	.word	0xe000e010

08003bdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003be0:	2100      	movs	r1, #0
 8003be2:	f06f 0004 	mvn.w	r0, #4
 8003be6:	f7ff ffbf 	bl	8003b68 <__NVIC_SetPriority>
#endif
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bf6:	f3ef 8305 	mrs	r3, IPSR
 8003bfa:	603b      	str	r3, [r7, #0]
  return(result);
 8003bfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c02:	f06f 0305 	mvn.w	r3, #5
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	e00c      	b.n	8003c24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <osKernelInitialize+0x44>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <osKernelInitialize+0x44>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	607b      	str	r3, [r7, #4]
 8003c1c:	e002      	b.n	8003c24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c24:	687b      	ldr	r3, [r7, #4]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000178 	.word	0x20000178

08003c38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c3e:	f3ef 8305 	mrs	r3, IPSR
 8003c42:	603b      	str	r3, [r7, #0]
  return(result);
 8003c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c4a:	f06f 0305 	mvn.w	r3, #5
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	e010      	b.n	8003c74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <osKernelStart+0x48>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d109      	bne.n	8003c6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c5a:	f7ff ffbf 	bl	8003bdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <osKernelStart+0x48>)
 8003c60:	2202      	movs	r2, #2
 8003c62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c64:	f001 f87c 	bl	8004d60 <vTaskStartScheduler>
      stat = osOK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	e002      	b.n	8003c74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c74:	687b      	ldr	r3, [r7, #4]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000178 	.word	0x20000178

08003c84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	; 0x38
 8003c88:	af04      	add	r7, sp, #16
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c94:	f3ef 8305 	mrs	r3, IPSR
 8003c98:	617b      	str	r3, [r7, #20]
  return(result);
 8003c9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d17e      	bne.n	8003d9e <osThreadNew+0x11a>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d07b      	beq.n	8003d9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003caa:	2318      	movs	r3, #24
 8003cac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d045      	beq.n	8003d4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <osThreadNew+0x48>
        name = attr->name;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <osThreadNew+0x6e>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	2b38      	cmp	r3, #56	; 0x38
 8003ce4:	d805      	bhi.n	8003cf2 <osThreadNew+0x6e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <osThreadNew+0x72>
        return (NULL);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e054      	b.n	8003da0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <osThreadNew+0xa8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2bbb      	cmp	r3, #187	; 0xbb
 8003d14:	d90a      	bls.n	8003d2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <osThreadNew+0xa8>
        mem = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e010      	b.n	8003d4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10c      	bne.n	8003d4e <osThreadNew+0xca>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d108      	bne.n	8003d4e <osThreadNew+0xca>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <osThreadNew+0xca>
          mem = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e001      	b.n	8003d4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d110      	bne.n	8003d76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d5c:	9202      	str	r2, [sp, #8]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6a3a      	ldr	r2, [r7, #32]
 8003d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fe0c 	bl	8004988 <xTaskCreateStatic>
 8003d70:	4603      	mov	r3, r0
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	e013      	b.n	8003d9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d110      	bne.n	8003d9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	f107 0310 	add.w	r3, r7, #16
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fe57 	bl	8004a42 <xTaskCreate>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <osThreadNew+0x11a>
            hTask = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d9e:	693b      	ldr	r3, [r7, #16]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3728      	adds	r7, #40	; 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db0:	f3ef 8305 	mrs	r3, IPSR
 8003db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <osDelay+0x1c>
    stat = osErrorISR;
 8003dbc:	f06f 0305 	mvn.w	r3, #5
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e007      	b.n	8003dd4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 ff92 	bl	8004cf8 <vTaskDelay>
    }
  }

  return (stat);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a07      	ldr	r2, [pc, #28]	; (8003e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8003df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <vApplicationGetIdleTaskMemory+0x30>)
 8003df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	601a      	str	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	2000017c 	.word	0x2000017c
 8003e10:	20000238 	.word	0x20000238

08003e14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4a06      	ldr	r2, [pc, #24]	; (8003e44 <vApplicationGetTimerTaskMemory+0x30>)
 8003e2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e32:	601a      	str	r2, [r3, #0]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	20000438 	.word	0x20000438
 8003e44:	200004f4 	.word	0x200004f4

08003e48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f103 0208 	add.w	r2, r3, #8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f103 0208 	add.w	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f103 0208 	add.w	r2, r3, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d103      	bne.n	8003f0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	e00c      	b.n	8003f24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e002      	b.n	8003f18 <vListInsert+0x2e>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d2f6      	bcs.n	8003f12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	601a      	str	r2, [r3, #0]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6892      	ldr	r2, [r2, #8]
 8003f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6852      	ldr	r2, [r2, #4]
 8003f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d103      	bne.n	8003f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fda:	f002 f87b 	bl	80060d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	441a      	add	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	3b01      	subs	r3, #1
 800400c:	68f9      	ldr	r1, [r7, #12]
 800400e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	22ff      	movs	r2, #255	; 0xff
 8004026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d114      	bne.n	800405a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3310      	adds	r3, #16
 800403c:	4618      	mov	r0, r3
 800403e:	f001 f929 	bl	8005294 <xTaskRemoveFromEventList>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d012      	beq.n	800406e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <xQueueGenericReset+0xcc>)
 800404a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	e009      	b.n	800406e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3310      	adds	r3, #16
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fef2 	bl	8003e48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3324      	adds	r3, #36	; 0x24
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff feed 	bl	8003e48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800406e:	f002 f861 	bl	8006134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004072:	2301      	movs	r3, #1
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	; 0x38
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <xQueueGenericCreateStatic+0x52>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <xQueueGenericCreateStatic+0x56>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <xQueueGenericCreateStatic+0x58>
 80040d6:	2300      	movs	r3, #0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	623b      	str	r3, [r7, #32]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <xQueueGenericCreateStatic+0x7e>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <xQueueGenericCreateStatic+0x82>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <xQueueGenericCreateStatic+0x84>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	61fb      	str	r3, [r7, #28]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800411e:	2350      	movs	r3, #80	; 0x50
 8004120:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b50      	cmp	r3, #80	; 0x50
 8004126:	d00a      	beq.n	800413e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	61bb      	str	r3, [r7, #24]
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800413e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004152:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f805 	bl	8004170 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004168:	4618      	mov	r0, r3
 800416a:	3730      	adds	r7, #48	; 0x30
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e002      	b.n	8004192 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800419e:	2101      	movs	r1, #1
 80041a0:	69b8      	ldr	r0, [r7, #24]
 80041a2:	f7ff ff05 	bl	8003fb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08e      	sub	sp, #56	; 0x38
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041c6:	2300      	movs	r3, #0
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericSend+0x32>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <xQueueGenericSend+0x40>
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <xQueueGenericSend+0x44>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <xQueueGenericSend+0x46>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <xQueueGenericSend+0x60>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d103      	bne.n	8004226 <xQueueGenericSend+0x6e>
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <xQueueGenericSend+0x72>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <xQueueGenericSend+0x74>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xQueueGenericSend+0x8e>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	623b      	str	r3, [r7, #32]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004246:	f001 f9e7 	bl	8005618 <xTaskGetSchedulerState>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <xQueueGenericSend+0x9e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <xQueueGenericSend+0xa2>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <xQueueGenericSend+0xa4>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <xQueueGenericSend+0xbe>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	61fb      	str	r3, [r7, #28]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004276:	f001 ff2d 	bl	80060d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <xQueueGenericSend+0xd4>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d129      	bne.n	80042e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004292:	f000 fa0b 	bl	80046ac <prvCopyDataToQueue>
 8004296:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	3324      	adds	r3, #36	; 0x24
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fff5 	bl	8005294 <xTaskRemoveFromEventList>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d013      	beq.n	80042d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042b0:	4b3f      	ldr	r3, [pc, #252]	; (80043b0 <xQueueGenericSend+0x1f8>)
 80042b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	e00a      	b.n	80042d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042c8:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <xQueueGenericSend+0x1f8>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042d8:	f001 ff2c 	bl	8006134 <vPortExitCritical>
				return pdPASS;
 80042dc:	2301      	movs	r3, #1
 80042de:	e063      	b.n	80043a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042e6:	f001 ff25 	bl	8006134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e05c      	b.n	80043a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 f82f 	bl	800535c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004302:	f001 ff17 	bl	8006134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004306:	f000 fd9b 	bl	8004e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800430a:	f001 fee3 	bl	80060d4 <vPortEnterCritical>
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004314:	b25b      	sxtb	r3, r3
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d103      	bne.n	8004324 <xQueueGenericSend+0x16c>
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800432a:	b25b      	sxtb	r3, r3
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d103      	bne.n	800433a <xQueueGenericSend+0x182>
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800433a:	f001 fefb 	bl	8006134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800433e:	1d3a      	adds	r2, r7, #4
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f001 f81e 	bl	8005388 <xTaskCheckForTimeOut>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d124      	bne.n	800439c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004354:	f000 faa2 	bl	800489c <prvIsQueueFull>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	3310      	adds	r3, #16
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 ff44 	bl	80051f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800436c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800436e:	f000 fa2d 	bl	80047cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004372:	f000 fd73 	bl	8004e5c <xTaskResumeAll>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f af7c 	bne.w	8004276 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <xQueueGenericSend+0x1f8>)
 8004380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	e772      	b.n	8004276 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004392:	f000 fa1b 	bl	80047cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004396:	f000 fd61 	bl	8004e5c <xTaskResumeAll>
 800439a:	e76c      	b.n	8004276 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800439c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439e:	f000 fa15 	bl	80047cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043a2:	f000 fd5b 	bl	8004e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3738      	adds	r7, #56	; 0x38
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b090      	sub	sp, #64	; 0x40
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <xQueueGenericSendFromISR+0x3c>
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <xQueueGenericSendFromISR+0x40>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <xQueueGenericSendFromISR+0x42>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800440c:	bf00      	nop
 800440e:	e7fe      	b.n	800440e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d103      	bne.n	800441e <xQueueGenericSendFromISR+0x6a>
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <xQueueGenericSendFromISR+0x6e>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <xQueueGenericSendFromISR+0x70>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	623b      	str	r3, [r7, #32]
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800443e:	f001 ff2b 	bl	8006298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004442:	f3ef 8211 	mrs	r2, BASEPRI
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800445a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <xQueueGenericSendFromISR+0xbc>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d12f      	bne.n	80044d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004486:	f000 f911 	bl	80046ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800448a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d112      	bne.n	80044ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d016      	beq.n	80044ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	3324      	adds	r3, #36	; 0x24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fef7 	bl	8005294 <xTaskRemoveFromEventList>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e007      	b.n	80044ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044be:	3301      	adds	r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	b25a      	sxtb	r2, r3
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044ca:	2301      	movs	r3, #1
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044ce:	e001      	b.n	80044d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3740      	adds	r7, #64	; 0x40
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08c      	sub	sp, #48	; 0x30
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xQueueReceive+0x30>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	623b      	str	r3, [r7, #32]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <xQueueReceive+0x3e>
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <xQueueReceive+0x42>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueReceive+0x44>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xQueueReceive+0x5e>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61fb      	str	r3, [r7, #28]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800454a:	f001 f865 	bl	8005618 <xTaskGetSchedulerState>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <xQueueReceive+0x6e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <xQueueReceive+0x72>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <xQueueReceive+0x74>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueReceive+0x8e>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	61bb      	str	r3, [r7, #24]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800457a:	f001 fdab 	bl	80060d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01f      	beq.n	80045ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458e:	f000 f8f7 	bl	8004780 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00f      	beq.n	80045c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	3310      	adds	r3, #16
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fe74 	bl	8005294 <xTaskRemoveFromEventList>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045b2:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <xQueueReceive+0x1bc>)
 80045b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045c2:	f001 fdb7 	bl	8006134 <vPortExitCritical>
				return pdPASS;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e069      	b.n	800469e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045d0:	f001 fdb0 	bl	8006134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e062      	b.n	800469e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045de:	f107 0310 	add.w	r3, r7, #16
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 feba 	bl	800535c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045ec:	f001 fda2 	bl	8006134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045f0:	f000 fc26 	bl	8004e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045f4:	f001 fd6e 	bl	80060d4 <vPortEnterCritical>
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fe:	b25b      	sxtb	r3, r3
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d103      	bne.n	800460e <xQueueReceive+0x122>
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004614:	b25b      	sxtb	r3, r3
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d103      	bne.n	8004624 <xQueueReceive+0x138>
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004624:	f001 fd86 	bl	8006134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004628:	1d3a      	adds	r2, r7, #4
 800462a:	f107 0310 	add.w	r3, r7, #16
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fea9 	bl	8005388 <xTaskCheckForTimeOut>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d123      	bne.n	8004684 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800463c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463e:	f000 f917 	bl	8004870 <prvIsQueueEmpty>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d017      	beq.n	8004678 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	3324      	adds	r3, #36	; 0x24
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fdcf 	bl	80051f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004658:	f000 f8b8 	bl	80047cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800465c:	f000 fbfe 	bl	8004e5c <xTaskResumeAll>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d189      	bne.n	800457a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <xQueueReceive+0x1bc>)
 8004668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	e780      	b.n	800457a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800467a:	f000 f8a7 	bl	80047cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800467e:	f000 fbed 	bl	8004e5c <xTaskResumeAll>
 8004682:	e77a      	b.n	800457a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004686:	f000 f8a1 	bl	80047cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800468a:	f000 fbe7 	bl	8004e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800468e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004690:	f000 f8ee 	bl	8004870 <prvIsQueueEmpty>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	f43f af6f 	beq.w	800457a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800469c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3730      	adds	r7, #48	; 0x30
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d14d      	bne.n	800476e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 ffbc 	bl	8005654 <xTaskPriorityDisinherit>
 80046dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	e043      	b.n	800476e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d119      	bne.n	8004720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6858      	ldr	r0, [r3, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	461a      	mov	r2, r3
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	f002 f81e 	bl	8006738 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	441a      	add	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d32b      	bcc.n	800476e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	e026      	b.n	800476e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	68d8      	ldr	r0, [r3, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	461a      	mov	r2, r3
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	f002 f804 	bl	8006738 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	425b      	negs	r3, r3
 800473a:	441a      	add	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d207      	bcs.n	800475c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	425b      	negs	r3, r3
 8004756:	441a      	add	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d105      	bne.n	800476e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	3b01      	subs	r3, #1
 800476c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004776:	697b      	ldr	r3, [r7, #20]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	441a      	add	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d303      	bcc.n	80047b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68d9      	ldr	r1, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	461a      	mov	r2, r3
 80047be:	6838      	ldr	r0, [r7, #0]
 80047c0:	f001 ffba 	bl	8006738 <memcpy>
	}
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047d4:	f001 fc7e 	bl	80060d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047e0:	e011      	b.n	8004806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d012      	beq.n	8004810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3324      	adds	r3, #36	; 0x24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fd50 	bl	8005294 <xTaskRemoveFromEventList>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047fa:	f000 fe27 	bl	800544c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	3b01      	subs	r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	dce9      	bgt.n	80047e2 <prvUnlockQueue+0x16>
 800480e:	e000      	b.n	8004812 <prvUnlockQueue+0x46>
					break;
 8004810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	22ff      	movs	r2, #255	; 0xff
 8004816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800481a:	f001 fc8b 	bl	8006134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800481e:	f001 fc59 	bl	80060d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800482a:	e011      	b.n	8004850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3310      	adds	r3, #16
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fd2b 	bl	8005294 <xTaskRemoveFromEventList>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004844:	f000 fe02 	bl	800544c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004848:	7bbb      	ldrb	r3, [r7, #14]
 800484a:	3b01      	subs	r3, #1
 800484c:	b2db      	uxtb	r3, r3
 800484e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004854:	2b00      	cmp	r3, #0
 8004856:	dce9      	bgt.n	800482c <prvUnlockQueue+0x60>
 8004858:	e000      	b.n	800485c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800485a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	22ff      	movs	r2, #255	; 0xff
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004864:	f001 fc66 	bl	8006134 <vPortExitCritical>
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004878:	f001 fc2c 	bl	80060d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e001      	b.n	800488e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800488e:	f001 fc51 	bl	8006134 <vPortExitCritical>

	return xReturn;
 8004892:	68fb      	ldr	r3, [r7, #12]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048a4:	f001 fc16 	bl	80060d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d102      	bne.n	80048ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e001      	b.n	80048be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048be:	f001 fc39 	bl	8006134 <vPortExitCritical>

	return xReturn;
 80048c2:	68fb      	ldr	r3, [r7, #12]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e014      	b.n	8004906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048dc:	4a0f      	ldr	r2, [pc, #60]	; (800491c <vQueueAddToRegistry+0x50>)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048e8:	490c      	ldr	r1, [pc, #48]	; (800491c <vQueueAddToRegistry+0x50>)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <vQueueAddToRegistry+0x50>)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048fe:	e006      	b.n	800490e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b07      	cmp	r3, #7
 800490a:	d9e7      	bls.n	80048dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	200008f4 	.word	0x200008f4

08004920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004930:	f001 fbd0 	bl	80060d4 <vPortEnterCritical>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800493a:	b25b      	sxtb	r3, r3
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d103      	bne.n	800494a <vQueueWaitForMessageRestricted+0x2a>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004950:	b25b      	sxtb	r3, r3
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d103      	bne.n	8004960 <vQueueWaitForMessageRestricted+0x40>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004960:	f001 fbe8 	bl	8006134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3324      	adds	r3, #36	; 0x24
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fc61 	bl	800523c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f7ff ff26 	bl	80047cc <prvUnlockQueue>
	}
 8004980:	bf00      	nop
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	; 0x38
 800498c:	af04      	add	r7, sp, #16
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	623b      	str	r3, [r7, #32]
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <xTaskCreateStatic+0x46>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	61fb      	str	r3, [r7, #28]
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049ce:	23bc      	movs	r3, #188	; 0xbc
 80049d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2bbc      	cmp	r3, #188	; 0xbc
 80049d6:	d00a      	beq.n	80049ee <xTaskCreateStatic+0x66>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	61bb      	str	r3, [r7, #24]
}
 80049ea:	bf00      	nop
 80049ec:	e7fe      	b.n	80049ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01e      	beq.n	8004a34 <xTaskCreateStatic+0xac>
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a0e:	2300      	movs	r3, #0
 8004a10:	9303      	str	r3, [sp, #12]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	9302      	str	r3, [sp, #8]
 8004a16:	f107 0314 	add.w	r3, r7, #20
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f850 	bl	8004acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a2e:	f000 f8f3 	bl	8004c18 <prvAddNewTaskToReadyList>
 8004a32:	e001      	b.n	8004a38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a38:	697b      	ldr	r3, [r7, #20]
	}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3728      	adds	r7, #40	; 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b08c      	sub	sp, #48	; 0x30
 8004a46:	af04      	add	r7, sp, #16
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fc5e 	bl	8006318 <pvPortMalloc>
 8004a5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a64:	20bc      	movs	r0, #188	; 0xbc
 8004a66:	f001 fc57 	bl	8006318 <pvPortMalloc>
 8004a6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
 8004a78:	e005      	b.n	8004a86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f001 fd18 	bl	80064b0 <vPortFree>
 8004a80:	e001      	b.n	8004a86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d017      	beq.n	8004abc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	9302      	str	r3, [sp, #8]
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f80e 	bl	8004acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ab0:	69f8      	ldr	r0, [r7, #28]
 8004ab2:	f000 f8b1 	bl	8004c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	e002      	b.n	8004ac2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004abc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	21a5      	movs	r1, #165	; 0xa5
 8004ae6:	f001 fe35 	bl	8006754 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004af4:	3b01      	subs	r3, #1
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	617b      	str	r3, [r7, #20]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01f      	beq.n	8004b6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	e012      	b.n	8004b56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	7819      	ldrb	r1, [r3, #0]
 8004b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3334      	adds	r3, #52	; 0x34
 8004b40:	460a      	mov	r2, r1
 8004b42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d9e9      	bls.n	8004b30 <prvInitialiseNewTask+0x64>
 8004b5c:	e000      	b.n	8004b60 <prvInitialiseNewTask+0x94>
			{
				break;
 8004b5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b68:	e003      	b.n	8004b72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	2b37      	cmp	r3, #55	; 0x37
 8004b76:	d901      	bls.n	8004b7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b78:	2337      	movs	r3, #55	; 0x37
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	3304      	adds	r3, #4
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff f978 	bl	8003e88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	3318      	adds	r3, #24
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff f973 	bl	8003e88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	3354      	adds	r3, #84	; 0x54
 8004bcc:	2260      	movs	r2, #96	; 0x60
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 fdbf 	bl	8006754 <memset>
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <prvInitialiseNewTask+0x140>)
 8004bda:	659a      	str	r2, [r3, #88]	; 0x58
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <prvInitialiseNewTask+0x144>)
 8004be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <prvInitialiseNewTask+0x148>)
 8004be6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	69b8      	ldr	r0, [r7, #24]
 8004bee:	f001 f941 	bl	8005e74 <pxPortInitialiseStack>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c04:	bf00      	nop
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	080069a8 	.word	0x080069a8
 8004c10:	080069c8 	.word	0x080069c8
 8004c14:	08006988 	.word	0x08006988

08004c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c20:	f001 fa58 	bl	80060d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <prvAddNewTaskToReadyList+0xc4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <prvAddNewTaskToReadyList+0xc4>)
 8004c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <prvAddNewTaskToReadyList+0xc8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c36:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <prvAddNewTaskToReadyList+0xc8>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <prvAddNewTaskToReadyList+0xc4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d110      	bne.n	8004c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c44:	f000 fc26 	bl	8005494 <prvInitialiseTaskLists>
 8004c48:	e00d      	b.n	8004c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <prvAddNewTaskToReadyList+0xcc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c52:	4b23      	ldr	r3, [pc, #140]	; (8004ce0 <prvAddNewTaskToReadyList+0xc8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d802      	bhi.n	8004c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <prvAddNewTaskToReadyList+0xc8>)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <prvAddNewTaskToReadyList+0xd0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <prvAddNewTaskToReadyList+0xd0>)
 8004c6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c70:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <prvAddNewTaskToReadyList+0xd0>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <prvAddNewTaskToReadyList+0xd4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d903      	bls.n	8004c8c <prvAddNewTaskToReadyList+0x74>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <prvAddNewTaskToReadyList+0xd4>)
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <prvAddNewTaskToReadyList+0xd8>)
 8004c9a:	441a      	add	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7ff f8fd 	bl	8003ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ca8:	f001 fa44 	bl	8006134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <prvAddNewTaskToReadyList+0xcc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00e      	beq.n	8004cd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <prvAddNewTaskToReadyList+0xc8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d207      	bcs.n	8004cd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <prvAddNewTaskToReadyList+0xdc>)
 8004cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000e08 	.word	0x20000e08
 8004ce0:	20000934 	.word	0x20000934
 8004ce4:	20000e14 	.word	0x20000e14
 8004ce8:	20000e24 	.word	0x20000e24
 8004cec:	20000e10 	.word	0x20000e10
 8004cf0:	20000938 	.word	0x20000938
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <vTaskDelay+0x60>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <vTaskDelay+0x30>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60bb      	str	r3, [r7, #8]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d28:	f000 f88a 	bl	8004e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fcfe 	bl	8005730 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d34:	f000 f892 	bl	8004e5c <xTaskResumeAll>
 8004d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <vTaskDelay+0x64>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000e30 	.word	0x20000e30
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d6e:	463a      	mov	r2, r7
 8004d70:	1d39      	adds	r1, r7, #4
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f832 	bl	8003de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	9202      	str	r2, [sp, #8]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	4924      	ldr	r1, [pc, #144]	; (8004e20 <vTaskStartScheduler+0xc0>)
 8004d90:	4824      	ldr	r0, [pc, #144]	; (8004e24 <vTaskStartScheduler+0xc4>)
 8004d92:	f7ff fdf9 	bl	8004988 <xTaskCreateStatic>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <vTaskStartScheduler+0xc8>)
 8004d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d9c:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <vTaskStartScheduler+0xc8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e001      	b.n	8004dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d102      	bne.n	8004dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004db4:	f000 fd10 	bl	80057d8 <xTimerCreateTimerTask>
 8004db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d11b      	bne.n	8004df8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	613b      	str	r3, [r7, #16]
}
 8004dd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dd4:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <vTaskStartScheduler+0xcc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3354      	adds	r3, #84	; 0x54
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <vTaskStartScheduler+0xd0>)
 8004ddc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <vTaskStartScheduler+0xd4>)
 8004de0:	f04f 32ff 	mov.w	r2, #4294967295
 8004de4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <vTaskStartScheduler+0xd8>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dec:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <vTaskStartScheduler+0xdc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004df2:	f001 f8cd 	bl	8005f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004df6:	e00e      	b.n	8004e16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d10a      	bne.n	8004e16 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60fb      	str	r3, [r7, #12]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <vTaskStartScheduler+0xb4>
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	08006910 	.word	0x08006910
 8004e24:	08005465 	.word	0x08005465
 8004e28:	20000e2c 	.word	0x20000e2c
 8004e2c:	20000934 	.word	0x20000934
 8004e30:	20000010 	.word	0x20000010
 8004e34:	20000e28 	.word	0x20000e28
 8004e38:	20000e14 	.word	0x20000e14
 8004e3c:	20000e0c 	.word	0x20000e0c

08004e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <vTaskSuspendAll+0x18>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <vTaskSuspendAll+0x18>)
 8004e4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e4e:	bf00      	nop
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20000e30 	.word	0x20000e30

08004e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e6a:	4b42      	ldr	r3, [pc, #264]	; (8004f74 <xTaskResumeAll+0x118>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	603b      	str	r3, [r7, #0]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e88:	f001 f924 	bl	80060d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e8c:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <xTaskResumeAll+0x118>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	4a38      	ldr	r2, [pc, #224]	; (8004f74 <xTaskResumeAll+0x118>)
 8004e94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e96:	4b37      	ldr	r3, [pc, #220]	; (8004f74 <xTaskResumeAll+0x118>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d162      	bne.n	8004f64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e9e:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <xTaskResumeAll+0x11c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d05e      	beq.n	8004f64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea6:	e02f      	b.n	8004f08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea8:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <xTaskResumeAll+0x120>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3318      	adds	r3, #24
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f851 	bl	8003f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff f84c 	bl	8003f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <xTaskResumeAll+0x124>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d903      	bls.n	8004ed8 <xTaskResumeAll+0x7c>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	4a2a      	ldr	r2, [pc, #168]	; (8004f80 <xTaskResumeAll+0x124>)
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <xTaskResumeAll+0x128>)
 8004ee6:	441a      	add	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f7fe ffd7 	bl	8003ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <xTaskResumeAll+0x12c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f02:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <xTaskResumeAll+0x130>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <xTaskResumeAll+0x120>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1cb      	bne.n	8004ea8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f16:	f000 fb5f 	bl	80055d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <xTaskResumeAll+0x134>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f26:	f000 f847 	bl	8004fb8 <xTaskIncrementTick>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f30:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <xTaskResumeAll+0x130>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f1      	bne.n	8004f26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <xTaskResumeAll+0x134>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f48:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <xTaskResumeAll+0x130>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f50:	2301      	movs	r3, #1
 8004f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <xTaskResumeAll+0x138>)
 8004f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f64:	f001 f8e6 	bl	8006134 <vPortExitCritical>

	return xAlreadyYielded;
 8004f68:	68bb      	ldr	r3, [r7, #8]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000e30 	.word	0x20000e30
 8004f78:	20000e08 	.word	0x20000e08
 8004f7c:	20000dc8 	.word	0x20000dc8
 8004f80:	20000e10 	.word	0x20000e10
 8004f84:	20000938 	.word	0x20000938
 8004f88:	20000934 	.word	0x20000934
 8004f8c:	20000e1c 	.word	0x20000e1c
 8004f90:	20000e18 	.word	0x20000e18
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f9e:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <xTaskGetTickCount+0x1c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fa4:	687b      	ldr	r3, [r7, #4]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000e0c 	.word	0x20000e0c

08004fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc2:	4b4f      	ldr	r3, [pc, #316]	; (8005100 <xTaskIncrementTick+0x148>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 808f 	bne.w	80050ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fcc:	4b4d      	ldr	r3, [pc, #308]	; (8005104 <xTaskIncrementTick+0x14c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fd4:	4a4b      	ldr	r2, [pc, #300]	; (8005104 <xTaskIncrementTick+0x14c>)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d120      	bne.n	8005022 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fe0:	4b49      	ldr	r3, [pc, #292]	; (8005108 <xTaskIncrementTick+0x150>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <xTaskIncrementTick+0x48>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	603b      	str	r3, [r7, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <xTaskIncrementTick+0x46>
 8005000:	4b41      	ldr	r3, [pc, #260]	; (8005108 <xTaskIncrementTick+0x150>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	4b41      	ldr	r3, [pc, #260]	; (800510c <xTaskIncrementTick+0x154>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <xTaskIncrementTick+0x150>)
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4a3f      	ldr	r2, [pc, #252]	; (800510c <xTaskIncrementTick+0x154>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	4b3e      	ldr	r3, [pc, #248]	; (8005110 <xTaskIncrementTick+0x158>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	4a3d      	ldr	r2, [pc, #244]	; (8005110 <xTaskIncrementTick+0x158>)
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	f000 fadb 	bl	80055d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005022:	4b3c      	ldr	r3, [pc, #240]	; (8005114 <xTaskIncrementTick+0x15c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	429a      	cmp	r2, r3
 800502a:	d349      	bcc.n	80050c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800502c:	4b36      	ldr	r3, [pc, #216]	; (8005108 <xTaskIncrementTick+0x150>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005036:	4b37      	ldr	r3, [pc, #220]	; (8005114 <xTaskIncrementTick+0x15c>)
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	601a      	str	r2, [r3, #0]
					break;
 800503e:	e03f      	b.n	80050c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005040:	4b31      	ldr	r3, [pc, #196]	; (8005108 <xTaskIncrementTick+0x150>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d203      	bcs.n	8005060 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005058:	4a2e      	ldr	r2, [pc, #184]	; (8005114 <xTaskIncrementTick+0x15c>)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800505e:	e02f      	b.n	80050c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe ff79 	bl	8003f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3318      	adds	r3, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe ff70 	bl	8003f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	4b25      	ldr	r3, [pc, #148]	; (8005118 <xTaskIncrementTick+0x160>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d903      	bls.n	8005090 <xTaskIncrementTick+0xd8>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a22      	ldr	r2, [pc, #136]	; (8005118 <xTaskIncrementTick+0x160>)
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <xTaskIncrementTick+0x164>)
 800509e:	441a      	add	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f7fe fefb 	bl	8003ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <xTaskIncrementTick+0x168>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d3b8      	bcc.n	800502c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050ba:	2301      	movs	r3, #1
 80050bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050be:	e7b5      	b.n	800502c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050c0:	4b17      	ldr	r3, [pc, #92]	; (8005120 <xTaskIncrementTick+0x168>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4915      	ldr	r1, [pc, #84]	; (800511c <xTaskIncrementTick+0x164>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d901      	bls.n	80050dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050dc:	4b11      	ldr	r3, [pc, #68]	; (8005124 <xTaskIncrementTick+0x16c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e004      	b.n	80050f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <xTaskIncrementTick+0x170>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3301      	adds	r3, #1
 80050f0:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <xTaskIncrementTick+0x170>)
 80050f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050f4:	697b      	ldr	r3, [r7, #20]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000e30 	.word	0x20000e30
 8005104:	20000e0c 	.word	0x20000e0c
 8005108:	20000dc0 	.word	0x20000dc0
 800510c:	20000dc4 	.word	0x20000dc4
 8005110:	20000e20 	.word	0x20000e20
 8005114:	20000e28 	.word	0x20000e28
 8005118:	20000e10 	.word	0x20000e10
 800511c:	20000938 	.word	0x20000938
 8005120:	20000934 	.word	0x20000934
 8005124:	20000e1c 	.word	0x20000e1c
 8005128:	20000e18 	.word	0x20000e18

0800512c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <vTaskSwitchContext+0xb0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800513a:	4b29      	ldr	r3, [pc, #164]	; (80051e0 <vTaskSwitchContext+0xb4>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005140:	e046      	b.n	80051d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005142:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <vTaskSwitchContext+0xb4>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005148:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <vTaskSwitchContext+0xb8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e010      	b.n	8005172 <vTaskSwitchContext+0x46>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <vTaskSwitchContext+0x40>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	607b      	str	r3, [r7, #4]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <vTaskSwitchContext+0x3e>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b01      	subs	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	491d      	ldr	r1, [pc, #116]	; (80051e8 <vTaskSwitchContext+0xbc>)
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0e4      	beq.n	8005150 <vTaskSwitchContext+0x24>
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <vTaskSwitchContext+0xbc>)
 8005192:	4413      	add	r3, r2
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	3308      	adds	r3, #8
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d104      	bne.n	80051b6 <vTaskSwitchContext+0x8a>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a0b      	ldr	r2, [pc, #44]	; (80051ec <vTaskSwitchContext+0xc0>)
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <vTaskSwitchContext+0xb8>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <vTaskSwitchContext+0xc0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3354      	adds	r3, #84	; 0x54
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <vTaskSwitchContext+0xc4>)
 80051ce:	6013      	str	r3, [r2, #0]
}
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000e30 	.word	0x20000e30
 80051e0:	20000e1c 	.word	0x20000e1c
 80051e4:	20000e10 	.word	0x20000e10
 80051e8:	20000938 	.word	0x20000938
 80051ec:	20000934 	.word	0x20000934
 80051f0:	20000010 	.word	0x20000010

080051f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <vTaskPlaceOnEventList+0x44>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3318      	adds	r3, #24
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fe fe61 	bl	8003eea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005228:	2101      	movs	r1, #1
 800522a:	6838      	ldr	r0, [r7, #0]
 800522c:	f000 fa80 	bl	8005730 <prvAddCurrentTaskToDelayedList>
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000934 	.word	0x20000934

0800523c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	617b      	str	r3, [r7, #20]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005264:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <vTaskPlaceOnEventListRestricted+0x54>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3318      	adds	r3, #24
 800526a:	4619      	mov	r1, r3
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7fe fe18 	bl	8003ea2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	68b8      	ldr	r0, [r7, #8]
 8005282:	f000 fa55 	bl	8005730 <prvAddCurrentTaskToDelayedList>
	}
 8005286:	bf00      	nop
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000934 	.word	0x20000934

08005294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	60fb      	str	r3, [r7, #12]
}
 80052bc:	bf00      	nop
 80052be:	e7fe      	b.n	80052be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	3318      	adds	r3, #24
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe fe49 	bl	8003f5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ca:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <xTaskRemoveFromEventList+0xb0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d11d      	bne.n	800530e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe fe40 	bl	8003f5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <xTaskRemoveFromEventList+0xb4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d903      	bls.n	80052f0 <xTaskRemoveFromEventList+0x5c>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	4a16      	ldr	r2, [pc, #88]	; (8005348 <xTaskRemoveFromEventList+0xb4>)
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4a13      	ldr	r2, [pc, #76]	; (800534c <xTaskRemoveFromEventList+0xb8>)
 80052fe:	441a      	add	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f7fe fdcb 	bl	8003ea2 <vListInsertEnd>
 800530c:	e005      	b.n	800531a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3318      	adds	r3, #24
 8005312:	4619      	mov	r1, r3
 8005314:	480e      	ldr	r0, [pc, #56]	; (8005350 <xTaskRemoveFromEventList+0xbc>)
 8005316:	f7fe fdc4 	bl	8003ea2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <xTaskRemoveFromEventList+0xc0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	429a      	cmp	r2, r3
 8005326:	d905      	bls.n	8005334 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <xTaskRemoveFromEventList+0xc4>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e001      	b.n	8005338 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005338:	697b      	ldr	r3, [r7, #20]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	20000e30 	.word	0x20000e30
 8005348:	20000e10 	.word	0x20000e10
 800534c:	20000938 	.word	0x20000938
 8005350:	20000dc8 	.word	0x20000dc8
 8005354:	20000934 	.word	0x20000934
 8005358:	20000e1c 	.word	0x20000e1c

0800535c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <vTaskInternalSetTimeOutState+0x24>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <vTaskInternalSetTimeOutState+0x28>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000e20 	.word	0x20000e20
 8005384:	20000e0c 	.word	0x20000e0c

08005388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	613b      	str	r3, [r7, #16]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60fb      	str	r3, [r7, #12]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80053ca:	f000 fe83 	bl	80060d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053ce:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <xTaskCheckForTimeOut+0xbc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d102      	bne.n	80053ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	e023      	b.n	8005436 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <xTaskCheckForTimeOut+0xc0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d007      	beq.n	800540a <xTaskCheckForTimeOut+0x82>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	e015      	b.n	8005436 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	429a      	cmp	r2, r3
 8005412:	d20b      	bcs.n	800542c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ff9b 	bl	800535c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	e004      	b.n	8005436 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005432:	2301      	movs	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005436:	f000 fe7d 	bl	8006134 <vPortExitCritical>

	return xReturn;
 800543a:	69fb      	ldr	r3, [r7, #28]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20000e0c 	.word	0x20000e0c
 8005448:	20000e20 	.word	0x20000e20

0800544c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <vTaskMissedYield+0x14>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	20000e1c 	.word	0x20000e1c

08005464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800546c:	f000 f852 	bl	8005514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <prvIdleTask+0x28>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d9f9      	bls.n	800546c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <prvIdleTask+0x2c>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005488:	e7f0      	b.n	800546c <prvIdleTask+0x8>
 800548a:	bf00      	nop
 800548c:	20000938 	.word	0x20000938
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	e00c      	b.n	80054ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <prvInitialiseTaskLists+0x60>)
 80054ac:	4413      	add	r3, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe fcca 	bl	8003e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b37      	cmp	r3, #55	; 0x37
 80054be:	d9ef      	bls.n	80054a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054c0:	480d      	ldr	r0, [pc, #52]	; (80054f8 <prvInitialiseTaskLists+0x64>)
 80054c2:	f7fe fcc1 	bl	8003e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054c6:	480d      	ldr	r0, [pc, #52]	; (80054fc <prvInitialiseTaskLists+0x68>)
 80054c8:	f7fe fcbe 	bl	8003e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054cc:	480c      	ldr	r0, [pc, #48]	; (8005500 <prvInitialiseTaskLists+0x6c>)
 80054ce:	f7fe fcbb 	bl	8003e48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054d2:	480c      	ldr	r0, [pc, #48]	; (8005504 <prvInitialiseTaskLists+0x70>)
 80054d4:	f7fe fcb8 	bl	8003e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054d8:	480b      	ldr	r0, [pc, #44]	; (8005508 <prvInitialiseTaskLists+0x74>)
 80054da:	f7fe fcb5 	bl	8003e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <prvInitialiseTaskLists+0x78>)
 80054e0:	4a05      	ldr	r2, [pc, #20]	; (80054f8 <prvInitialiseTaskLists+0x64>)
 80054e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <prvInitialiseTaskLists+0x7c>)
 80054e6:	4a05      	ldr	r2, [pc, #20]	; (80054fc <prvInitialiseTaskLists+0x68>)
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000938 	.word	0x20000938
 80054f8:	20000d98 	.word	0x20000d98
 80054fc:	20000dac 	.word	0x20000dac
 8005500:	20000dc8 	.word	0x20000dc8
 8005504:	20000ddc 	.word	0x20000ddc
 8005508:	20000df4 	.word	0x20000df4
 800550c:	20000dc0 	.word	0x20000dc0
 8005510:	20000dc4 	.word	0x20000dc4

08005514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800551a:	e019      	b.n	8005550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800551c:	f000 fdda 	bl	80060d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005520:	4b10      	ldr	r3, [pc, #64]	; (8005564 <prvCheckTasksWaitingTermination+0x50>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe fd15 	bl	8003f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <prvCheckTasksWaitingTermination+0x54>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3b01      	subs	r3, #1
 8005538:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <prvCheckTasksWaitingTermination+0x54>)
 800553a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <prvCheckTasksWaitingTermination+0x58>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3b01      	subs	r3, #1
 8005542:	4a0a      	ldr	r2, [pc, #40]	; (800556c <prvCheckTasksWaitingTermination+0x58>)
 8005544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005546:	f000 fdf5 	bl	8006134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f810 	bl	8005570 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <prvCheckTasksWaitingTermination+0x58>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e1      	bne.n	800551c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000ddc 	.word	0x20000ddc
 8005568:	20000e08 	.word	0x20000e08
 800556c:	20000df0 	.word	0x20000df0

08005570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3354      	adds	r3, #84	; 0x54
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f8ff 	bl	8006780 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	4618      	mov	r0, r3
 8005592:	f000 ff8d 	bl	80064b0 <vPortFree>
				vPortFree( pxTCB );
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 ff8a 	bl	80064b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800559c:	e018      	b.n	80055d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d103      	bne.n	80055b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 ff81 	bl	80064b0 <vPortFree>
	}
 80055ae:	e00f      	b.n	80055d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d00a      	beq.n	80055d0 <prvDeleteTCB+0x60>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	60fb      	str	r3, [r7, #12]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <prvDeleteTCB+0x5e>
	}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <prvResetNextTaskUnblockTime+0x38>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055e8:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <prvResetNextTaskUnblockTime+0x3c>)
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295
 80055ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055f0:	e008      	b.n	8005604 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f2:	4b07      	ldr	r3, [pc, #28]	; (8005610 <prvResetNextTaskUnblockTime+0x38>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a04      	ldr	r2, [pc, #16]	; (8005614 <prvResetNextTaskUnblockTime+0x3c>)
 8005602:	6013      	str	r3, [r2, #0]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20000dc0 	.word	0x20000dc0
 8005614:	20000e28 	.word	0x20000e28

08005618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <xTaskGetSchedulerState+0x34>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005626:	2301      	movs	r3, #1
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	e008      	b.n	800563e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <xTaskGetSchedulerState+0x38>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005634:	2302      	movs	r3, #2
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	e001      	b.n	800563e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800563e:	687b      	ldr	r3, [r7, #4]
	}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20000e14 	.word	0x20000e14
 8005650:	20000e30 	.word	0x20000e30

08005654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d056      	beq.n	8005718 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800566a:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <xTaskPriorityDisinherit+0xd0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d00a      	beq.n	800568a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60fb      	str	r3, [r7, #12]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60bb      	str	r3, [r7, #8]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	1e5a      	subs	r2, r3, #1
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d02c      	beq.n	8005718 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d128      	bne.n	8005718 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3304      	adds	r3, #4
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe fc46 	bl	8003f5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <xTaskPriorityDisinherit+0xd4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d903      	bls.n	80056f8 <xTaskPriorityDisinherit+0xa4>
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <xTaskPriorityDisinherit+0xd4>)
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4a09      	ldr	r2, [pc, #36]	; (800572c <xTaskPriorityDisinherit+0xd8>)
 8005706:	441a      	add	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f7fe fbc7 	bl	8003ea2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005718:	697b      	ldr	r3, [r7, #20]
	}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000934 	.word	0x20000934
 8005728:	20000e10 	.word	0x20000e10
 800572c:	20000938 	.word	0x20000938

08005730 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800573a:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005740:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3304      	adds	r3, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fc08 	bl	8003f5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d10a      	bne.n	800576a <prvAddCurrentTaskToDelayedList+0x3a>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800575a:	4b1a      	ldr	r3, [pc, #104]	; (80057c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4819      	ldr	r0, [pc, #100]	; (80057c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005764:	f7fe fb9d 	bl	8003ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005768:	e026      	b.n	80057b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005772:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	429a      	cmp	r2, r3
 8005780:	d209      	bcs.n	8005796 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7fe fbab 	bl	8003eea <vListInsert>
}
 8005794:	e010      	b.n	80057b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe fba1 	bl	8003eea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d202      	bcs.n	80057b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057b2:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6013      	str	r3, [r2, #0]
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000e0c 	.word	0x20000e0c
 80057c4:	20000934 	.word	0x20000934
 80057c8:	20000df4 	.word	0x20000df4
 80057cc:	20000dc4 	.word	0x20000dc4
 80057d0:	20000dc0 	.word	0x20000dc0
 80057d4:	20000e28 	.word	0x20000e28

080057d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057e2:	f000 fb07 	bl	8005df4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <xTimerCreateTimerTask+0x80>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d021      	beq.n	8005832 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057f6:	1d3a      	adds	r2, r7, #4
 80057f8:	f107 0108 	add.w	r1, r7, #8
 80057fc:	f107 030c 	add.w	r3, r7, #12
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe fb07 	bl	8003e14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	9202      	str	r2, [sp, #8]
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	2302      	movs	r3, #2
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	460a      	mov	r2, r1
 8005818:	4910      	ldr	r1, [pc, #64]	; (800585c <xTimerCreateTimerTask+0x84>)
 800581a:	4811      	ldr	r0, [pc, #68]	; (8005860 <xTimerCreateTimerTask+0x88>)
 800581c:	f7ff f8b4 	bl	8004988 <xTaskCreateStatic>
 8005820:	4603      	mov	r3, r0
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <xTimerCreateTimerTask+0x8c>)
 8005824:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005826:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <xTimerCreateTimerTask+0x8c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800582e:	2301      	movs	r3, #1
 8005830:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	613b      	str	r3, [r7, #16]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800584e:	697b      	ldr	r3, [r7, #20]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000e64 	.word	0x20000e64
 800585c:	08006918 	.word	0x08006918
 8005860:	0800599d 	.word	0x0800599d
 8005864:	20000e68 	.word	0x20000e68

08005868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	; 0x28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005876:	2300      	movs	r3, #0
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	623b      	str	r3, [r7, #32]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <xTimerGenericCommand+0x98>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d02a      	beq.n	80058f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	dc18      	bgt.n	80058e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058b0:	f7ff feb2 	bl	8005618 <xTaskGetSchedulerState>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d109      	bne.n	80058ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058ba:	4b11      	ldr	r3, [pc, #68]	; (8005900 <xTimerGenericCommand+0x98>)
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f107 0110 	add.w	r1, r7, #16
 80058c2:	2300      	movs	r3, #0
 80058c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c6:	f7fe fc77 	bl	80041b8 <xQueueGenericSend>
 80058ca:	6278      	str	r0, [r7, #36]	; 0x24
 80058cc:	e012      	b.n	80058f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <xTimerGenericCommand+0x98>)
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	f107 0110 	add.w	r1, r7, #16
 80058d6:	2300      	movs	r3, #0
 80058d8:	2200      	movs	r2, #0
 80058da:	f7fe fc6d 	bl	80041b8 <xQueueGenericSend>
 80058de:	6278      	str	r0, [r7, #36]	; 0x24
 80058e0:	e008      	b.n	80058f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <xTimerGenericCommand+0x98>)
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	f107 0110 	add.w	r1, r7, #16
 80058ea:	2300      	movs	r3, #0
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	f7fe fd61 	bl	80043b4 <xQueueGenericSendFromISR>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3728      	adds	r7, #40	; 0x28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000e64 	.word	0x20000e64

08005904 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af02      	add	r7, sp, #8
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <prvProcessExpiredTimer+0x94>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	3304      	adds	r3, #4
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fb1d 	bl	8003f5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d022      	beq.n	8005976 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	18d1      	adds	r1, r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	6978      	ldr	r0, [r7, #20]
 800593e:	f000 f8d1 	bl	8005ae4 <prvInsertTimerInActiveList>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01f      	beq.n	8005988 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005948:	2300      	movs	r3, #0
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2300      	movs	r3, #0
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	2100      	movs	r1, #0
 8005952:	6978      	ldr	r0, [r7, #20]
 8005954:	f7ff ff88 	bl	8005868 <xTimerGenericCommand>
 8005958:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d113      	bne.n	8005988 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60fb      	str	r3, [r7, #12]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	6978      	ldr	r0, [r7, #20]
 800598e:	4798      	blx	r3
}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000e5c 	.word	0x20000e5c

0800599c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f857 	bl	8005a5c <prvGetNextExpireTime>
 80059ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4619      	mov	r1, r3
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f803 	bl	80059c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059ba:	f000 f8d5 	bl	8005b68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059be:	e7f1      	b.n	80059a4 <prvTimerTask+0x8>

080059c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059ca:	f7ff fa39 	bl	8004e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f866 	bl	8005aa4 <prvSampleTimeNow>
 80059d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d130      	bne.n	8005a42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <prvProcessTimerOrBlockTask+0x3c>
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d806      	bhi.n	80059fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059ee:	f7ff fa35 	bl	8004e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff85 	bl	8005904 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059fa:	e024      	b.n	8005a46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <prvProcessTimerOrBlockTask+0x90>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <prvProcessTimerOrBlockTask+0x50>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <prvProcessTimerOrBlockTask+0x52>
 8005a10:	2300      	movs	r3, #0
 8005a12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a14:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <prvProcessTimerOrBlockTask+0x94>)
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	4619      	mov	r1, r3
 8005a22:	f7fe ff7d 	bl	8004920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a26:	f7ff fa19 	bl	8004e5c <xTaskResumeAll>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a30:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <prvProcessTimerOrBlockTask+0x98>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
}
 8005a40:	e001      	b.n	8005a46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a42:	f7ff fa0b 	bl	8004e5c <xTaskResumeAll>
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000e60 	.word	0x20000e60
 8005a54:	20000e64 	.word	0x20000e64
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <prvGetNextExpireTime+0x44>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <prvGetNextExpireTime+0x16>
 8005a6e:	2201      	movs	r2, #1
 8005a70:	e000      	b.n	8005a74 <prvGetNextExpireTime+0x18>
 8005a72:	2200      	movs	r2, #0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <prvGetNextExpireTime+0x44>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e001      	b.n	8005a90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a90:	68fb      	ldr	r3, [r7, #12]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20000e5c 	.word	0x20000e5c

08005aa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005aac:	f7ff fa74 	bl	8004f98 <xTaskGetTickCount>
 8005ab0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ab2:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <prvSampleTimeNow+0x3c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d205      	bcs.n	8005ac8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005abc:	f000 f936 	bl	8005d2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e002      	b.n	8005ace <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ace:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <prvSampleTimeNow+0x3c>)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000e6c 	.word	0x20000e6c

08005ae4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d812      	bhi.n	8005b30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	e01b      	b.n	8005b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <prvInsertTimerInActiveList+0x7c>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7fe f9de 	bl	8003eea <vListInsert>
 8005b2e:	e012      	b.n	8005b56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d206      	bcs.n	8005b46 <prvInsertTimerInActiveList+0x62>
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e007      	b.n	8005b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b46:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <prvInsertTimerInActiveList+0x80>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7fe f9ca 	bl	8003eea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b56:	697b      	ldr	r3, [r7, #20]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000e60 	.word	0x20000e60
 8005b64:	20000e5c 	.word	0x20000e5c

08005b68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b6e:	e0ca      	b.n	8005d06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da18      	bge.n	8005ba8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b76:	1d3b      	adds	r3, r7, #4
 8005b78:	3304      	adds	r3, #4
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	61fb      	str	r3, [r7, #28]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9e:	6850      	ldr	r0, [r2, #4]
 8005ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f2c0 80aa 	blt.w	8005d04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe f9cb 	bl	8003f5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff ff6b 	bl	8005aa4 <prvSampleTimeNow>
 8005bce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	f200 8097 	bhi.w	8005d06 <prvProcessReceivedCommands+0x19e>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <prvProcessReceivedCommands+0x78>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c09 	.word	0x08005c09
 8005bec:	08005c7d 	.word	0x08005c7d
 8005bf0:	08005c91 	.word	0x08005c91
 8005bf4:	08005cdb 	.word	0x08005cdb
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c09 	.word	0x08005c09
 8005c00:	08005c7d 	.word	0x08005c7d
 8005c04:	08005c91 	.word	0x08005c91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	18d1      	adds	r1, r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c28:	f7ff ff5c 	bl	8005ae4 <prvInsertTimerInActiveList>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d069      	beq.n	8005d06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d05e      	beq.n	8005d06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	441a      	add	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c5a:	f7ff fe05 	bl	8005868 <xTimerGenericCommand>
 8005c5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d14f      	bne.n	8005d06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	61bb      	str	r3, [r7, #24]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c8e:	e03a      	b.n	8005d06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	617b      	str	r3, [r7, #20]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	18d1      	adds	r1, r2, r3
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd4:	f7ff ff06 	bl	8005ae4 <prvInsertTimerInActiveList>
					break;
 8005cd8:	e015      	b.n	8005d06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cea:	f000 fbe1 	bl	80064b0 <vPortFree>
 8005cee:	e00a      	b.n	8005d06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d02:	e000      	b.n	8005d06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <prvProcessReceivedCommands+0x1c0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	1d39      	adds	r1, r7, #4
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fbec 	bl	80044ec <xQueueReceive>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f47f af2a 	bne.w	8005b70 <prvProcessReceivedCommands+0x8>
	}
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	3730      	adds	r7, #48	; 0x30
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000e64 	.word	0x20000e64

08005d2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d32:	e048      	b.n	8005dc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d34:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d3e:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe f905 	bl	8003f5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d02e      	beq.n	8005dc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d90e      	bls.n	8005d98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d86:	4b19      	ldr	r3, [pc, #100]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fe f8aa 	bl	8003eea <vListInsert>
 8005d96:	e016      	b.n	8005dc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	2100      	movs	r1, #0
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7ff fd60 	bl	8005868 <xTimerGenericCommand>
 8005da8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	603b      	str	r3, [r7, #0]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1b1      	bne.n	8005d34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005dd0:	4b06      	ldr	r3, [pc, #24]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <prvSwitchTimerLists+0xc4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a04      	ldr	r2, [pc, #16]	; (8005dec <prvSwitchTimerLists+0xc0>)
 8005ddc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005dde:	4a04      	ldr	r2, [pc, #16]	; (8005df0 <prvSwitchTimerLists+0xc4>)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	6013      	str	r3, [r2, #0]
}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000e5c 	.word	0x20000e5c
 8005df0:	20000e60 	.word	0x20000e60

08005df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dfa:	f000 f96b 	bl	80060d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <prvCheckForValidListAndQueue+0x60>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d120      	bne.n	8005e48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e06:	4814      	ldr	r0, [pc, #80]	; (8005e58 <prvCheckForValidListAndQueue+0x64>)
 8005e08:	f7fe f81e 	bl	8003e48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e0c:	4813      	ldr	r0, [pc, #76]	; (8005e5c <prvCheckForValidListAndQueue+0x68>)
 8005e0e:	f7fe f81b 	bl	8003e48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <prvCheckForValidListAndQueue+0x6c>)
 8005e14:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <prvCheckForValidListAndQueue+0x64>)
 8005e16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e18:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <prvCheckForValidListAndQueue+0x70>)
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <prvCheckForValidListAndQueue+0x68>)
 8005e1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <prvCheckForValidListAndQueue+0x74>)
 8005e24:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <prvCheckForValidListAndQueue+0x78>)
 8005e26:	2110      	movs	r1, #16
 8005e28:	200a      	movs	r0, #10
 8005e2a:	f7fe f929 	bl	8004080 <xQueueGenericCreateStatic>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <prvCheckForValidListAndQueue+0x60>)
 8005e32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <prvCheckForValidListAndQueue+0x60>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <prvCheckForValidListAndQueue+0x60>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	490b      	ldr	r1, [pc, #44]	; (8005e70 <prvCheckForValidListAndQueue+0x7c>)
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fd42 	bl	80048cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e48:	f000 f974 	bl	8006134 <vPortExitCritical>
}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000e64 	.word	0x20000e64
 8005e58:	20000e34 	.word	0x20000e34
 8005e5c:	20000e48 	.word	0x20000e48
 8005e60:	20000e5c 	.word	0x20000e5c
 8005e64:	20000e60 	.word	0x20000e60
 8005e68:	20000f10 	.word	0x20000f10
 8005e6c:	20000e70 	.word	0x20000e70
 8005e70:	08006920 	.word	0x08006920

08005e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b04      	subs	r3, #4
 8005e84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3b04      	subs	r3, #4
 8005e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3b04      	subs	r3, #4
 8005ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <pxPortInitialiseStack+0x64>)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3b14      	subs	r3, #20
 8005eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b04      	subs	r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f06f 0202 	mvn.w	r2, #2
 8005ec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b20      	subs	r3, #32
 8005ec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005eca:	68fb      	ldr	r3, [r7, #12]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	08005edd 	.word	0x08005edd

08005edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ee6:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <prvTaskExitError+0x54>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d00a      	beq.n	8005f06 <prvTaskExitError+0x2a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60fb      	str	r3, [r7, #12]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <prvTaskExitError+0x28>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60bb      	str	r3, [r7, #8]
}
 8005f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f1a:	bf00      	nop
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0fc      	beq.n	8005f1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	2000000c 	.word	0x2000000c
	...

08005f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <pxCurrentTCBConst2>)
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	f380 8809 	msr	PSP, r0
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8811 	msr	BASEPRI, r0
 8005f5a:	4770      	bx	lr
 8005f5c:	f3af 8000 	nop.w

08005f60 <pxCurrentTCBConst2>:
 8005f60:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f68:	4808      	ldr	r0, [pc, #32]	; (8005f8c <prvPortStartFirstTask+0x24>)
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f380 8808 	msr	MSP, r0
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8814 	msr	CONTROL, r0
 8005f7a:	b662      	cpsie	i
 8005f7c:	b661      	cpsie	f
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	df00      	svc	0
 8005f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f8a:	bf00      	nop
 8005f8c:	e000ed08 	.word	0xe000ed08

08005f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f96:	4b46      	ldr	r3, [pc, #280]	; (80060b0 <xPortStartScheduler+0x120>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a46      	ldr	r2, [pc, #280]	; (80060b4 <xPortStartScheduler+0x124>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10a      	bne.n	8005fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	613b      	str	r3, [r7, #16]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <xPortStartScheduler+0x120>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3f      	ldr	r2, [pc, #252]	; (80060b8 <xPortStartScheduler+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10a      	bne.n	8005fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fd6:	4b39      	ldr	r3, [pc, #228]	; (80060bc <xPortStartScheduler+0x12c>)
 8005fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <xPortStartScheduler+0x130>)
 8005ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ffe:	4b31      	ldr	r3, [pc, #196]	; (80060c4 <xPortStartScheduler+0x134>)
 8006000:	2207      	movs	r2, #7
 8006002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006004:	e009      	b.n	800601a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006006:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <xPortStartScheduler+0x134>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3b01      	subs	r3, #1
 800600c:	4a2d      	ldr	r2, [pc, #180]	; (80060c4 <xPortStartScheduler+0x134>)
 800600e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	b2db      	uxtb	r3, r3
 8006018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b80      	cmp	r3, #128	; 0x80
 8006024:	d0ef      	beq.n	8006006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006026:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <xPortStartScheduler+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1c3 0307 	rsb	r3, r3, #7
 800602e:	2b04      	cmp	r3, #4
 8006030:	d00a      	beq.n	8006048 <xPortStartScheduler+0xb8>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60bb      	str	r3, [r7, #8]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006048:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <xPortStartScheduler+0x134>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <xPortStartScheduler+0x134>)
 8006050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <xPortStartScheduler+0x134>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800605a:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <xPortStartScheduler+0x134>)
 800605c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006066:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <xPortStartScheduler+0x138>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <xPortStartScheduler+0x138>)
 800606c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006072:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <xPortStartScheduler+0x138>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <xPortStartScheduler+0x138>)
 8006078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800607c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800607e:	f000 f8dd 	bl	800623c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <xPortStartScheduler+0x13c>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006088:	f000 f8fc 	bl	8006284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <xPortStartScheduler+0x140>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <xPortStartScheduler+0x140>)
 8006092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006098:	f7ff ff66 	bl	8005f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800609c:	f7ff f846 	bl	800512c <vTaskSwitchContext>
	prvTaskExitError();
 80060a0:	f7ff ff1c 	bl	8005edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	e000ed00 	.word	0xe000ed00
 80060b4:	410fc271 	.word	0x410fc271
 80060b8:	410fc270 	.word	0x410fc270
 80060bc:	e000e400 	.word	0xe000e400
 80060c0:	20000f60 	.word	0x20000f60
 80060c4:	20000f64 	.word	0x20000f64
 80060c8:	e000ed20 	.word	0xe000ed20
 80060cc:	2000000c 	.word	0x2000000c
 80060d0:	e000ef34 	.word	0xe000ef34

080060d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	607b      	str	r3, [r7, #4]
}
 80060ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <vPortEnterCritical+0x58>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a0d      	ldr	r2, [pc, #52]	; (800612c <vPortEnterCritical+0x58>)
 80060f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <vPortEnterCritical+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10f      	bne.n	8006120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <vPortEnterCritical+0x5c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <vPortEnterCritical+0x4c>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	603b      	str	r3, [r7, #0]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <vPortEnterCritical+0x4a>
	}
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	2000000c 	.word	0x2000000c
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <vPortExitCritical+0x50>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <vPortExitCritical+0x24>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	607b      	str	r3, [r7, #4]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <vPortExitCritical+0x50>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <vPortExitCritical+0x50>)
 8006160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <vPortExitCritical+0x50>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d105      	bne.n	8006176 <vPortExitCritical+0x42>
 800616a:	2300      	movs	r3, #0
 800616c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f383 8811 	msr	BASEPRI, r3
}
 8006174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	2000000c 	.word	0x2000000c
	...

08006190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006190:	f3ef 8009 	mrs	r0, PSP
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <pxCurrentTCBConst>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f01e 0f10 	tst.w	lr, #16
 80061a0:	bf08      	it	eq
 80061a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	6010      	str	r0, [r2, #0]
 80061ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061b4:	f380 8811 	msr	BASEPRI, r0
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f7fe ffb4 	bl	800512c <vTaskSwitchContext>
 80061c4:	f04f 0000 	mov.w	r0, #0
 80061c8:	f380 8811 	msr	BASEPRI, r0
 80061cc:	bc09      	pop	{r0, r3}
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	6808      	ldr	r0, [r1, #0]
 80061d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d6:	f01e 0f10 	tst.w	lr, #16
 80061da:	bf08      	it	eq
 80061dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061e0:	f380 8809 	msr	PSP, r0
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst>:
 80061f0:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop

080061f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	607b      	str	r3, [r7, #4]
}
 8006210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006212:	f7fe fed1 	bl	8004fb8 <xTaskIncrementTick>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <xPortSysTickHandler+0x40>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f383 8811 	msr	BASEPRI, r3
}
 800622e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <vPortSetupTimerInterrupt+0x34>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <vPortSetupTimerInterrupt+0x38>)
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <vPortSetupTimerInterrupt+0x3c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a0a      	ldr	r2, [pc, #40]	; (800627c <vPortSetupTimerInterrupt+0x40>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	099b      	lsrs	r3, r3, #6
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <vPortSetupTimerInterrupt+0x44>)
 800625a:	3b01      	subs	r3, #1
 800625c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800625e:	4b04      	ldr	r3, [pc, #16]	; (8006270 <vPortSetupTimerInterrupt+0x34>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	e000e010 	.word	0xe000e010
 8006274:	e000e018 	.word	0xe000e018
 8006278:	20000000 	.word	0x20000000
 800627c:	10624dd3 	.word	0x10624dd3
 8006280:	e000e014 	.word	0xe000e014

08006284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006294 <vPortEnableVFP+0x10>
 8006288:	6801      	ldr	r1, [r0, #0]
 800628a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800628e:	6001      	str	r1, [r0, #0]
 8006290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006292:	bf00      	nop
 8006294:	e000ed88 	.word	0xe000ed88

08006298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800629e:	f3ef 8305 	mrs	r3, IPSR
 80062a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	d914      	bls.n	80062d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062aa:	4a17      	ldr	r2, [pc, #92]	; (8006308 <vPortValidateInterruptPriority+0x70>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062b4:	4b15      	ldr	r3, [pc, #84]	; (800630c <vPortValidateInterruptPriority+0x74>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	7afa      	ldrb	r2, [r7, #11]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d20a      	bcs.n	80062d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <vPortValidateInterruptPriority+0x78>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062dc:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <vPortValidateInterruptPriority+0x7c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d90a      	bls.n	80062fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	603b      	str	r3, [r7, #0]
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <vPortValidateInterruptPriority+0x60>
	}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	e000e3f0 	.word	0xe000e3f0
 800630c:	20000f60 	.word	0x20000f60
 8006310:	e000ed0c 	.word	0xe000ed0c
 8006314:	20000f64 	.word	0x20000f64

08006318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08a      	sub	sp, #40	; 0x28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006324:	f7fe fd8c 	bl	8004e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006328:	4b5b      	ldr	r3, [pc, #364]	; (8006498 <pvPortMalloc+0x180>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006330:	f000 f920 	bl	8006574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006334:	4b59      	ldr	r3, [pc, #356]	; (800649c <pvPortMalloc+0x184>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 8093 	bne.w	8006468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01d      	beq.n	8006384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006348:	2208      	movs	r2, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	2b00      	cmp	r3, #0
 8006358:	d014      	beq.n	8006384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f023 0307 	bic.w	r3, r3, #7
 8006360:	3308      	adds	r3, #8
 8006362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <pvPortMalloc+0x6c>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	617b      	str	r3, [r7, #20]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06e      	beq.n	8006468 <pvPortMalloc+0x150>
 800638a:	4b45      	ldr	r3, [pc, #276]	; (80064a0 <pvPortMalloc+0x188>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d869      	bhi.n	8006468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006394:	4b43      	ldr	r3, [pc, #268]	; (80064a4 <pvPortMalloc+0x18c>)
 8006396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006398:	4b42      	ldr	r3, [pc, #264]	; (80064a4 <pvPortMalloc+0x18c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800639e:	e004      	b.n	80063aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d903      	bls.n	80063bc <pvPortMalloc+0xa4>
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1f1      	bne.n	80063a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063bc:	4b36      	ldr	r3, [pc, #216]	; (8006498 <pvPortMalloc+0x180>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d050      	beq.n	8006468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2208      	movs	r2, #8
 80063cc:	4413      	add	r3, r2
 80063ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1ad2      	subs	r2, r2, r3
 80063e0:	2308      	movs	r3, #8
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d91f      	bls.n	8006428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <pvPortMalloc+0xf8>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	613b      	str	r3, [r7, #16]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	1ad2      	subs	r2, r2, r3
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006422:	69b8      	ldr	r0, [r7, #24]
 8006424:	f000 f908 	bl	8006638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006428:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <pvPortMalloc+0x188>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	4a1b      	ldr	r2, [pc, #108]	; (80064a0 <pvPortMalloc+0x188>)
 8006434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006436:	4b1a      	ldr	r3, [pc, #104]	; (80064a0 <pvPortMalloc+0x188>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <pvPortMalloc+0x190>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d203      	bcs.n	800644a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006442:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <pvPortMalloc+0x188>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <pvPortMalloc+0x190>)
 8006448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <pvPortMalloc+0x184>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	431a      	orrs	r2, r3
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <pvPortMalloc+0x194>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a11      	ldr	r2, [pc, #68]	; (80064ac <pvPortMalloc+0x194>)
 8006466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006468:	f7fe fcf8 	bl	8004e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <pvPortMalloc+0x174>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	60fb      	str	r3, [r7, #12]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <pvPortMalloc+0x172>
	return pvReturn;
 800648c:	69fb      	ldr	r3, [r7, #28]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3728      	adds	r7, #40	; 0x28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20001b28 	.word	0x20001b28
 800649c:	20001b3c 	.word	0x20001b3c
 80064a0:	20001b2c 	.word	0x20001b2c
 80064a4:	20001b20 	.word	0x20001b20
 80064a8:	20001b30 	.word	0x20001b30
 80064ac:	20001b34 	.word	0x20001b34

080064b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d04d      	beq.n	800655e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064c2:	2308      	movs	r3, #8
 80064c4:	425b      	negs	r3, r3
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4413      	add	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	4b24      	ldr	r3, [pc, #144]	; (8006568 <vPortFree+0xb8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <vPortFree+0x44>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	60fb      	str	r3, [r7, #12]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <vPortFree+0x62>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	60bb      	str	r3, [r7, #8]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <vPortFree+0xb8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01e      	beq.n	800655e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11a      	bne.n	800655e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <vPortFree+0xb8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	43db      	mvns	r3, r3
 8006532:	401a      	ands	r2, r3
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006538:	f7fe fc82 	bl	8004e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <vPortFree+0xbc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4413      	add	r3, r2
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <vPortFree+0xbc>)
 8006548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800654a:	6938      	ldr	r0, [r7, #16]
 800654c:	f000 f874 	bl	8006638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <vPortFree+0xc0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a06      	ldr	r2, [pc, #24]	; (8006570 <vPortFree+0xc0>)
 8006558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800655a:	f7fe fc7f 	bl	8004e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800655e:	bf00      	nop
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20001b3c 	.word	0x20001b3c
 800656c:	20001b2c 	.word	0x20001b2c
 8006570:	20001b38 	.word	0x20001b38

08006574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800657a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800657e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006580:	4b27      	ldr	r3, [pc, #156]	; (8006620 <prvHeapInit+0xac>)
 8006582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3307      	adds	r3, #7
 8006592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <prvHeapInit+0xac>)
 80065a4:	4413      	add	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065ac:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <prvHeapInit+0xb0>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065b2:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <prvHeapInit+0xb0>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	4413      	add	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065c0:	2208      	movs	r2, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0307 	bic.w	r3, r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a15      	ldr	r2, [pc, #84]	; (8006628 <prvHeapInit+0xb4>)
 80065d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <prvHeapInit+0xb4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <prvHeapInit+0xb4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065f4:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <prvHeapInit+0xb4>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4a0a      	ldr	r2, [pc, #40]	; (800662c <prvHeapInit+0xb8>)
 8006602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <prvHeapInit+0xbc>)
 800660a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <prvHeapInit+0xc0>)
 800660e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	20000f68 	.word	0x20000f68
 8006624:	20001b20 	.word	0x20001b20
 8006628:	20001b28 	.word	0x20001b28
 800662c:	20001b30 	.word	0x20001b30
 8006630:	20001b2c 	.word	0x20001b2c
 8006634:	20001b3c 	.word	0x20001b3c

08006638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006640:	4b28      	ldr	r3, [pc, #160]	; (80066e4 <prvInsertBlockIntoFreeList+0xac>)
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e002      	b.n	800664c <prvInsertBlockIntoFreeList+0x14>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d8f7      	bhi.n	8006646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	4413      	add	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	d108      	bne.n	800667a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	441a      	add	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d118      	bne.n	80066c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d00d      	beq.n	80066b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	441a      	add	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	e008      	b.n	80066c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <prvInsertBlockIntoFreeList+0xb0>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e003      	b.n	80066c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d002      	beq.n	80066d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20001b20 	.word	0x20001b20
 80066e8:	20001b28 	.word	0x20001b28

080066ec <__libc_init_array>:
 80066ec:	b570      	push	{r4, r5, r6, lr}
 80066ee:	4d0d      	ldr	r5, [pc, #52]	; (8006724 <__libc_init_array+0x38>)
 80066f0:	4c0d      	ldr	r4, [pc, #52]	; (8006728 <__libc_init_array+0x3c>)
 80066f2:	1b64      	subs	r4, r4, r5
 80066f4:	10a4      	asrs	r4, r4, #2
 80066f6:	2600      	movs	r6, #0
 80066f8:	42a6      	cmp	r6, r4
 80066fa:	d109      	bne.n	8006710 <__libc_init_array+0x24>
 80066fc:	4d0b      	ldr	r5, [pc, #44]	; (800672c <__libc_init_array+0x40>)
 80066fe:	4c0c      	ldr	r4, [pc, #48]	; (8006730 <__libc_init_array+0x44>)
 8006700:	f000 f8f2 	bl	80068e8 <_init>
 8006704:	1b64      	subs	r4, r4, r5
 8006706:	10a4      	asrs	r4, r4, #2
 8006708:	2600      	movs	r6, #0
 800670a:	42a6      	cmp	r6, r4
 800670c:	d105      	bne.n	800671a <__libc_init_array+0x2e>
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	f855 3b04 	ldr.w	r3, [r5], #4
 8006714:	4798      	blx	r3
 8006716:	3601      	adds	r6, #1
 8006718:	e7ee      	b.n	80066f8 <__libc_init_array+0xc>
 800671a:	f855 3b04 	ldr.w	r3, [r5], #4
 800671e:	4798      	blx	r3
 8006720:	3601      	adds	r6, #1
 8006722:	e7f2      	b.n	800670a <__libc_init_array+0x1e>
 8006724:	080069f0 	.word	0x080069f0
 8006728:	080069f0 	.word	0x080069f0
 800672c:	080069f0 	.word	0x080069f0
 8006730:	080069f4 	.word	0x080069f4

08006734 <__retarget_lock_acquire_recursive>:
 8006734:	4770      	bx	lr

08006736 <__retarget_lock_release_recursive>:
 8006736:	4770      	bx	lr

08006738 <memcpy>:
 8006738:	440a      	add	r2, r1
 800673a:	4291      	cmp	r1, r2
 800673c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006740:	d100      	bne.n	8006744 <memcpy+0xc>
 8006742:	4770      	bx	lr
 8006744:	b510      	push	{r4, lr}
 8006746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800674a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800674e:	4291      	cmp	r1, r2
 8006750:	d1f9      	bne.n	8006746 <memcpy+0xe>
 8006752:	bd10      	pop	{r4, pc}

08006754 <memset>:
 8006754:	4402      	add	r2, r0
 8006756:	4603      	mov	r3, r0
 8006758:	4293      	cmp	r3, r2
 800675a:	d100      	bne.n	800675e <memset+0xa>
 800675c:	4770      	bx	lr
 800675e:	f803 1b01 	strb.w	r1, [r3], #1
 8006762:	e7f9      	b.n	8006758 <memset+0x4>

08006764 <cleanup_glue>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	460c      	mov	r4, r1
 8006768:	6809      	ldr	r1, [r1, #0]
 800676a:	4605      	mov	r5, r0
 800676c:	b109      	cbz	r1, 8006772 <cleanup_glue+0xe>
 800676e:	f7ff fff9 	bl	8006764 <cleanup_glue>
 8006772:	4621      	mov	r1, r4
 8006774:	4628      	mov	r0, r5
 8006776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800677a:	f000 b869 	b.w	8006850 <_free_r>
	...

08006780 <_reclaim_reent>:
 8006780:	4b2c      	ldr	r3, [pc, #176]	; (8006834 <_reclaim_reent+0xb4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4283      	cmp	r3, r0
 8006786:	b570      	push	{r4, r5, r6, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	d051      	beq.n	8006830 <_reclaim_reent+0xb0>
 800678c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800678e:	b143      	cbz	r3, 80067a2 <_reclaim_reent+0x22>
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d14a      	bne.n	800682c <_reclaim_reent+0xac>
 8006796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006798:	6819      	ldr	r1, [r3, #0]
 800679a:	b111      	cbz	r1, 80067a2 <_reclaim_reent+0x22>
 800679c:	4620      	mov	r0, r4
 800679e:	f000 f857 	bl	8006850 <_free_r>
 80067a2:	6961      	ldr	r1, [r4, #20]
 80067a4:	b111      	cbz	r1, 80067ac <_reclaim_reent+0x2c>
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f852 	bl	8006850 <_free_r>
 80067ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067ae:	b111      	cbz	r1, 80067b6 <_reclaim_reent+0x36>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 f84d 	bl	8006850 <_free_r>
 80067b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067b8:	b111      	cbz	r1, 80067c0 <_reclaim_reent+0x40>
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f848 	bl	8006850 <_free_r>
 80067c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80067c2:	b111      	cbz	r1, 80067ca <_reclaim_reent+0x4a>
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 f843 	bl	8006850 <_free_r>
 80067ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80067cc:	b111      	cbz	r1, 80067d4 <_reclaim_reent+0x54>
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f83e 	bl	8006850 <_free_r>
 80067d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80067d6:	b111      	cbz	r1, 80067de <_reclaim_reent+0x5e>
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 f839 	bl	8006850 <_free_r>
 80067de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80067e0:	b111      	cbz	r1, 80067e8 <_reclaim_reent+0x68>
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 f834 	bl	8006850 <_free_r>
 80067e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ea:	b111      	cbz	r1, 80067f2 <_reclaim_reent+0x72>
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 f82f 	bl	8006850 <_free_r>
 80067f2:	69a3      	ldr	r3, [r4, #24]
 80067f4:	b1e3      	cbz	r3, 8006830 <_reclaim_reent+0xb0>
 80067f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067f8:	4620      	mov	r0, r4
 80067fa:	4798      	blx	r3
 80067fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067fe:	b1b9      	cbz	r1, 8006830 <_reclaim_reent+0xb0>
 8006800:	4620      	mov	r0, r4
 8006802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006806:	f7ff bfad 	b.w	8006764 <cleanup_glue>
 800680a:	5949      	ldr	r1, [r1, r5]
 800680c:	b941      	cbnz	r1, 8006820 <_reclaim_reent+0xa0>
 800680e:	3504      	adds	r5, #4
 8006810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006812:	2d80      	cmp	r5, #128	; 0x80
 8006814:	68d9      	ldr	r1, [r3, #12]
 8006816:	d1f8      	bne.n	800680a <_reclaim_reent+0x8a>
 8006818:	4620      	mov	r0, r4
 800681a:	f000 f819 	bl	8006850 <_free_r>
 800681e:	e7ba      	b.n	8006796 <_reclaim_reent+0x16>
 8006820:	680e      	ldr	r6, [r1, #0]
 8006822:	4620      	mov	r0, r4
 8006824:	f000 f814 	bl	8006850 <_free_r>
 8006828:	4631      	mov	r1, r6
 800682a:	e7ef      	b.n	800680c <_reclaim_reent+0x8c>
 800682c:	2500      	movs	r5, #0
 800682e:	e7ef      	b.n	8006810 <_reclaim_reent+0x90>
 8006830:	bd70      	pop	{r4, r5, r6, pc}
 8006832:	bf00      	nop
 8006834:	20000010 	.word	0x20000010

08006838 <__malloc_lock>:
 8006838:	4801      	ldr	r0, [pc, #4]	; (8006840 <__malloc_lock+0x8>)
 800683a:	f7ff bf7b 	b.w	8006734 <__retarget_lock_acquire_recursive>
 800683e:	bf00      	nop
 8006840:	20001b40 	.word	0x20001b40

08006844 <__malloc_unlock>:
 8006844:	4801      	ldr	r0, [pc, #4]	; (800684c <__malloc_unlock+0x8>)
 8006846:	f7ff bf76 	b.w	8006736 <__retarget_lock_release_recursive>
 800684a:	bf00      	nop
 800684c:	20001b40 	.word	0x20001b40

08006850 <_free_r>:
 8006850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006852:	2900      	cmp	r1, #0
 8006854:	d044      	beq.n	80068e0 <_free_r+0x90>
 8006856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685a:	9001      	str	r0, [sp, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f1a1 0404 	sub.w	r4, r1, #4
 8006862:	bfb8      	it	lt
 8006864:	18e4      	addlt	r4, r4, r3
 8006866:	f7ff ffe7 	bl	8006838 <__malloc_lock>
 800686a:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <_free_r+0x94>)
 800686c:	9801      	ldr	r0, [sp, #4]
 800686e:	6813      	ldr	r3, [r2, #0]
 8006870:	b933      	cbnz	r3, 8006880 <_free_r+0x30>
 8006872:	6063      	str	r3, [r4, #4]
 8006874:	6014      	str	r4, [r2, #0]
 8006876:	b003      	add	sp, #12
 8006878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800687c:	f7ff bfe2 	b.w	8006844 <__malloc_unlock>
 8006880:	42a3      	cmp	r3, r4
 8006882:	d908      	bls.n	8006896 <_free_r+0x46>
 8006884:	6825      	ldr	r5, [r4, #0]
 8006886:	1961      	adds	r1, r4, r5
 8006888:	428b      	cmp	r3, r1
 800688a:	bf01      	itttt	eq
 800688c:	6819      	ldreq	r1, [r3, #0]
 800688e:	685b      	ldreq	r3, [r3, #4]
 8006890:	1949      	addeq	r1, r1, r5
 8006892:	6021      	streq	r1, [r4, #0]
 8006894:	e7ed      	b.n	8006872 <_free_r+0x22>
 8006896:	461a      	mov	r2, r3
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	b10b      	cbz	r3, 80068a0 <_free_r+0x50>
 800689c:	42a3      	cmp	r3, r4
 800689e:	d9fa      	bls.n	8006896 <_free_r+0x46>
 80068a0:	6811      	ldr	r1, [r2, #0]
 80068a2:	1855      	adds	r5, r2, r1
 80068a4:	42a5      	cmp	r5, r4
 80068a6:	d10b      	bne.n	80068c0 <_free_r+0x70>
 80068a8:	6824      	ldr	r4, [r4, #0]
 80068aa:	4421      	add	r1, r4
 80068ac:	1854      	adds	r4, r2, r1
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	6011      	str	r1, [r2, #0]
 80068b2:	d1e0      	bne.n	8006876 <_free_r+0x26>
 80068b4:	681c      	ldr	r4, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	6053      	str	r3, [r2, #4]
 80068ba:	4421      	add	r1, r4
 80068bc:	6011      	str	r1, [r2, #0]
 80068be:	e7da      	b.n	8006876 <_free_r+0x26>
 80068c0:	d902      	bls.n	80068c8 <_free_r+0x78>
 80068c2:	230c      	movs	r3, #12
 80068c4:	6003      	str	r3, [r0, #0]
 80068c6:	e7d6      	b.n	8006876 <_free_r+0x26>
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	1961      	adds	r1, r4, r5
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf04      	itt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	bf04      	itt	eq
 80068d8:	1949      	addeq	r1, r1, r5
 80068da:	6021      	streq	r1, [r4, #0]
 80068dc:	6054      	str	r4, [r2, #4]
 80068de:	e7ca      	b.n	8006876 <_free_r+0x26>
 80068e0:	b003      	add	sp, #12
 80068e2:	bd30      	pop	{r4, r5, pc}
 80068e4:	20001b44 	.word	0x20001b44

080068e8 <_init>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr

080068f4 <_fini>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr
