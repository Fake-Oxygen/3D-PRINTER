/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "usb_device.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "Temperature.h"
#include "string.h"
#include "usbd_cdc_if.h"
#include "TMC2208.h"
#include "MiniPID.h"
#include "types.h"
#include "reader.h"
#include "GCodes.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t ADC_value[ADC_CHANNELS];
MiniPID pidbed = MiniPID(16.7, 0.3119, -23.99, 0.696); // zajebiste na bed
MiniPID pidhe0 = MiniPID(5.238, 0.0072, 3.979);
MiniPID pidhe1 = MiniPID(5.238, 0.0072, 3.979); //180 - git (1.238, 0.0041, 2.979)
const size_t INPUT_SIZE = 8;
int8_t usb_flag = -1;
uint8_t buffer[64];
/* USER CODE END PV */

/* Private function prototypes -------------------------- ---------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
/* USER CODE BEGIN PFP */

int GetTicks() {
	return __HAL_TIM_GET_COUNTER(&htim16);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART1) {
		transEnd = 1;
		HAL_UART_Receive_IT(&huart1, commData, 12);
	}
}

int read_gcode(char input, gc_reader *reader, int *iter) {
	int done = 0;
	int error_code = read_code(reader, input, &done);
	if (error_code != GC_READER_ERROR_NOT_OCCURED) {
		printf("ERROR OCCURED!\n");
		return 1;
	} else {
		(*iter)++;
	}
	if (done) {
		printf("%c %lu -> X=%f Y=%f Z=%f E=%f S=%f F=%f rc=%lu c=%lu fc=%d\n",
				reader->code_type, reader->code_id, reader->X, reader->Y,
				reader->Z, reader->E, reader->S, reader->F,
				reader->read_checksum, reader->checksum,
				reader->found_checksum);
//        memcpy(reader, rd, sizeof(gc_reader));
		execute(reader);
		usb_flag = -1;
		memset(buffer, 0, sizeof(buffer));
	}
	return 0;
}

void SetTMCSettings(uint8_t Axis, uint16_t rms) {
	selectAxis(Axis);
	initTMC2208Registers(&huart1);

	uint32_t val = getRegVal(&huart1, GCONF_ADDR);
	val = setPDNDisable(val, 1);
	val = setIScaleAnalog(val, 0);
	val = setMstepRegSelect(val, 1);
	setRegValSafe(&huart1, GCONF_ADDR, val);
	getRMSCurrent(&huart1, 0.15);
	setRMSCurrent(&huart1, rms, 0.5, 0.15);
	getRMSCurrent(&huart1, 0.15);
	val = getRegVal(&huart1, CHOPCONF_ADDR);
	val = setTOFF(val, 2);
	setRegValSafe(&huart1, CHOPCONF_ADDR, val);
	getMRES(val);
	val = setMRES(val, 1);
	setRegValSafe(&huart1, CHOPCONF_ADDR, val);
	val = getRegVal(&huart1, CHOPCONF_ADDR);
	getMRES(val);
	val = getRegVal(&huart1, FACTORY_CONF_ADDR);
	setBit(val, 8, 0);
	setBit(val, 9, 1);
}

void DelayMicrosecond(uint16_t time) {
	__HAL_TIM_SET_COUNTER(&htim16, 0);
	while (__HAL_TIM_GET_COUNTER(&htim16) < time)
		;
}

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char msg[60] = { '\0' };
int outb = 0;
int outhe0 = 0;
int outhe1 = 0;
char xyz[256];
float bed;
float he1;
gc_reader reader;
header head;
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_USB_Device_Init();
	MX_ADC1_Init();
	MX_TIM15_Init();
	MX_USART1_UART_Init();
	MX_TIM1_Init();
	MX_TIM2_Init();
	MX_TIM3_Init();
	MX_TIM16_Init();
	MX_TIM17_Init();
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
	TIM17->CCR1 = 0;
	HAL_TIM_Base_Start(&htim16);
	HAL_ADC_Start_DMA(&hadc1, ADC_value, ADC_CHANNELS);
	HAL_Delay(2000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	pidbed.setOutputLimits(0, 100);
	pidbed.setOutputRampRate(10);
	pidhe0.setOutputLimits(0, 255);
	pidhe0.setOutputRampRate(10);
	pidhe1.setOutputLimits(0, 255);
	pidhe1.setOutputRampRate(10);

	HAL_UART_Receive_IT(&huart1, commData, 12);
	HAL_GPIO_WritePin(TMC_ENN_GPIO_Port, TMC_ENN_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(DIR_Z_GPIO_Port, DIR_Z_Pin, GPIO_PIN_RESET);
	SetTMCSettings(X_AXIS, 400);
	SetTMCSettings(Z_AXIS, 800);
	SetTMCSettings(E0_AXIS, 400);
	SetTMCSettings(E1_AXIS, 400);

	memset(&reader, 0, sizeof(reader));
	memset(&head, 0, sizeof(head));
	int iter = 0;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		bed = GetTemperature(BED, ADC_value[BED]);
		he1 = GetTemperature(HE1, ADC_value[HE1]);
		outb = (int) (pidbed.getOutput((double) bed, head.temp_bed));
		outhe1 = (int) (pidhe1.getOutput((double) he1, head.temp_he1));
		TIM15->CCR2 = outb;
		TIM1->CCR3 = outhe1;
		switch (head.isrunning) {
		case RUNNING:
			G0(&reader);
			break;
		case WAIT_FOR_BED_TEMP:
			if (bed >= head.temp_bed)
				head.isrunning = FREE;
			break;
		case WAIT_FOR_HE1_TEMP:
			if (he1 >= head.temp_he1)
				head.isrunning = FREE;
			break;
		case FREE:
			while (usb_flag != 0) {
				if (usb_flag - iter <= 0) {
					iter = 0;
					break;
				}
				read_gcode(buffer[iter], &reader, &iter);
			}
			break;
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0)
			!= HAL_OK) {
		Error_Handler();
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 55;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
		Error_Handler();
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
}

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };

	/** Initializes the common periph clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK
			| RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
