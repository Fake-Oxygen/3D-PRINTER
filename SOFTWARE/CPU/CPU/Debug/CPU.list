
CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe10  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08010004  08010004  00020004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100cc  080100cc  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  080100cc  080100cc  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100d4  080100d4  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100d4  080100d4  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100d8  080100d8  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080100dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020b4  20000100  080101dc  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200021b4  080101dc  000321b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c58f  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f0d  00000000  00000000  0005c6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  000615d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002178  00000000  00000000  00063938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031788  00000000  00000000  00065ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c41c  00000000  00000000  00097238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130246  00000000  00000000  000c3654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f389a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000990c  00000000  00000000  001f38ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000100 	.word	0x20000100
 8000210:	00000000 	.word	0x00000000
 8000214:	0800ffec 	.word	0x0800ffec

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000104 	.word	0x20000104
 8000230:	0800ffec 	.word	0x0800ffec

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f001 faab 	bl	8001ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f821 	bl	80005a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 fcf4 	bl	8000f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000564:	f000 fcc8 	bl	8000ef8 <MX_DMA_Init>
  MX_I2C2_Init();
 8000568:	f000 f942 	bl	80007f0 <MX_I2C2_Init>
  MX_SDMMC1_MMC_Init();
 800056c:	f000 f980 	bl	8000870 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 8000570:	f000 f9a2 	bl	80008b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000574:	f000 f9de 	bl	8000934 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000578:	f000 fa7c 	bl	8000a74 <MX_TIM2_Init>
  MX_TIM3_Init();
 800057c:	f000 fade 	bl	8000b3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000580:	f000 fb42 	bl	8000c08 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000584:	f000 fb9a 	bl	8000cbc <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000588:	f000 fc1e 	bl	8000dc8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800058c:	f000 fc68 	bl	8000e60 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000590:	f000 f85a 	bl	8000648 <MX_ADC1_Init>
  MX_USB_Device_Init();
 8000594:	f00e ffda 	bl	800f54c <MX_USB_Device_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
//	  HAL_UART_Transmit(&huart3,value[0],sizeof(value[0]),10);// Sending in normal mode
	  HAL_Delay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f001 fb00 	bl	8001ba0 <HAL_Delay>
 80005a0:	e7fa      	b.n	8000598 <main+0x44>

080005a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b098      	sub	sp, #96	; 0x60
 80005a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	2248      	movs	r2, #72	; 0x48
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f00f fd13 	bl	800ffdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f005 fd2b 	bl	8006020 <HAL_PWREx_ControlVoltageScaling>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005d0:	f000 fd88 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005d4:	2303      	movs	r3, #3
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2340      	movs	r3, #64	; 0x40
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80005f2:	2337      	movs	r3, #55	; 0x37
 80005f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fdaa 	bl	8006160 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000612:	f000 fd67 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f006 fa6c 	bl	8006b0c <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800063a:	f000 fd53 	bl	80010e4 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3760      	adds	r7, #96	; 0x60
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800066a:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <MX_ADC1_Init+0x188>)
 800066c:	4a59      	ldr	r2, [pc, #356]	; (80007d4 <MX_ADC1_Init+0x18c>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000670:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <MX_ADC1_Init+0x188>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <MX_ADC1_Init+0x188>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <MX_ADC1_Init+0x188>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <MX_ADC1_Init+0x188>)
 8000684:	2201      	movs	r2, #1
 8000686:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <MX_ADC1_Init+0x188>)
 800068a:	2204      	movs	r2, #4
 800068c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <MX_ADC1_Init+0x188>)
 8000690:	2200      	movs	r2, #0
 8000692:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000694:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <MX_ADC1_Init+0x188>)
 8000696:	2201      	movs	r2, #1
 8000698:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 800069a:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <MX_ADC1_Init+0x188>)
 800069c:	2206      	movs	r2, #6
 800069e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ae:	4b48      	ldr	r3, [pc, #288]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006b4:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006bc:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006be:	2200      	movs	r2, #0
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80006c2:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80006ca:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006cc:	220c      	movs	r2, #12
 80006ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80006d0:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006d8:	2200      	movs	r2, #0
 80006da:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80006dc:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006de:	2201      	movs	r2, #1
 80006e0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e2:	483b      	ldr	r0, [pc, #236]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006e4:	f001 fc20 	bl	8001f28 <HAL_ADC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006ee:	f000 fcf9 	bl	80010e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4834      	ldr	r0, [pc, #208]	; (80007d0 <MX_ADC1_Init+0x188>)
 80006fe:	f002 f96f 	bl	80029e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000708:	f000 fcec 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_ADC1_Init+0x190>)
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000710:	2306      	movs	r3, #6
 8000712:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000714:	2307      	movs	r3, #7
 8000716:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000718:	237f      	movs	r3, #127	; 0x7f
 800071a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071c:	2304      	movs	r3, #4
 800071e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	4829      	ldr	r0, [pc, #164]	; (80007d0 <MX_ADC1_Init+0x188>)
 800072a:	f001 fd49 	bl	80021c0 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000734:	f000 fcd6 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_ADC1_Init+0x194>)
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800073c:	230c      	movs	r3, #12
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4822      	ldr	r0, [pc, #136]	; (80007d0 <MX_ADC1_Init+0x188>)
 8000746:	f001 fd3b 	bl	80021c0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000750:	f000 fcc8 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_ADC1_Init+0x198>)
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000758:	2312      	movs	r3, #18
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	481b      	ldr	r0, [pc, #108]	; (80007d0 <MX_ADC1_Init+0x188>)
 8000762:	f001 fd2d 	bl	80021c0 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 800076c:	f000 fcba 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC1_Init+0x19c>)
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000774:	2318      	movs	r3, #24
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4814      	ldr	r0, [pc, #80]	; (80007d0 <MX_ADC1_Init+0x188>)
 800077e:	f001 fd1f 	bl	80021c0 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000788:	f000 fcac 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_ADC1_Init+0x1a0>)
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_ADC1_Init+0x188>)
 800079c:	f001 fd10 	bl	80021c0 <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80007a6:	f000 fc9d 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_ADC1_Init+0x1a4>)
 80007ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007ae:	f44f 7383 	mov.w	r3, #262	; 0x106
 80007b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_ADC1_Init+0x188>)
 80007ba:	f001 fd01 	bl	80021c0 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 80007c4:	f000 fc8e 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000011c 	.word	0x2000011c
 80007d4:	42028000 	.word	0x42028000
 80007d8:	14f00020 	.word	0x14f00020
 80007dc:	19200040 	.word	0x19200040
 80007e0:	1d500080 	.word	0x1d500080
 80007e4:	c7520000 	.word	0xc7520000
 80007e8:	cb840000 	.word	0xcb840000
 80007ec:	80000001 	.word	0x80000001

080007f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C2_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_I2C2_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40505681;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_I2C2_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_I2C2_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C2_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_I2C2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_I2C2_Init+0x74>)
 800082c:	f002 fe5e 	bl	80034ec <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 fc55 	bl	80010e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <MX_I2C2_Init+0x74>)
 800083e:	f002 fee4 	bl	800360a <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 fc4c 	bl	80010e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2C2_Init+0x74>)
 8000850:	f002 ff26 	bl	80036a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 fc43 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001ec 	.word	0x200001ec
 8000868:	40005800 	.word	0x40005800
 800086c:	40505681 	.word	0x40505681

08000870 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SDMMC1_MMC_Init+0x40>)
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <MX_SDMMC1_MMC_Init+0x44>)
 8000878:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_SDMMC1_MMC_Init+0x40>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_SDMMC1_MMC_Init+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SDMMC1_MMC_Init+0x40>)
 8000888:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800088c:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_SDMMC1_MMC_Init+0x40>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SDMMC1_MMC_Init+0x40>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_SDMMC1_MMC_Init+0x40>)
 800089c:	f002 ff4c 	bl	8003738 <HAL_MMC_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 80008a6:	f000 fc1d 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000240 	.word	0x20000240
 80008b4:	420c8000 	.word	0x420c8000

080008b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_SPI1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_SPI1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_SPI1_Init+0x74>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_SPI1_Init+0x74>)
 80008d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_SPI1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_SPI1_Init+0x74>)
 80008e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_SPI1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_SPI1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_SPI1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_SPI1_Init+0x74>)
 8000906:	2207      	movs	r2, #7
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_SPI1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_SPI1_Init+0x74>)
 8000912:	2208      	movs	r2, #8
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_SPI1_Init+0x74>)
 8000918:	f008 fa48 	bl	8008dac <HAL_SPI_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 fbdf 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200004b4 	.word	0x200004b4
 8000930:	40013000 	.word	0x40013000

08000934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b098      	sub	sp, #96	; 0x60
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2234      	movs	r2, #52	; 0x34
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f00f fb3b 	bl	800ffdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000968:	4a41      	ldr	r2, [pc, #260]	; (8000a70 <MX_TIM1_Init+0x13c>)
 800096a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800096c:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <MX_TIM1_Init+0x138>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000978:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <MX_TIM1_Init+0x138>)
 800097a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000986:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <MX_TIM1_Init+0x138>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000992:	4836      	ldr	r0, [pc, #216]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000994:	f008 faad 	bl	8008ef2 <HAL_TIM_PWM_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 fba1 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009b2:	4619      	mov	r1, r3
 80009b4:	482d      	ldr	r0, [pc, #180]	; (8000a6c <MX_TIM1_Init+0x138>)
 80009b6:	f008 ff77 	bl	80098a8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009c0:	f000 fb90 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4820      	ldr	r0, [pc, #128]	; (8000a6c <MX_TIM1_Init+0x138>)
 80009ea:	f008 fad9 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009f4:	f000 fb76 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009fc:	2208      	movs	r2, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	481a      	ldr	r0, [pc, #104]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000a02:	f008 facd 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a0c:	f000 fb6a 	bl	80010e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000a4e:	f008 ffb3 	bl	80099b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a58:	f000 fb44 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM1_Init+0x138>)
 8000a5e:	f000 fd91 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3760      	adds	r7, #96	; 0x60
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000518 	.word	0x20000518
 8000a70:	40012c00 	.word	0x40012c00

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a86:	463b      	mov	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	615a      	str	r2, [r3, #20]
 8000a96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000aae:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac0:	481d      	ldr	r0, [pc, #116]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000ac2:	f008 fa16 	bl	8008ef2 <HAL_TIM_PWM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000acc:	f000 fb0a 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000ae0:	f008 fee2 	bl	80098a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aea:	f000 fafb 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	2208      	movs	r2, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000b06:	f008 fa4b 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b10:	f000 fae8 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	220c      	movs	r2, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000b1c:	f008 fa40 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b26:	f000 fadd 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM2_Init+0xc4>)
 8000b2c:	f000 fd2a 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000564 	.word	0x20000564

08000b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000b62:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <MX_TIM3_Init+0xc8>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b86:	481e      	ldr	r0, [pc, #120]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000b88:	f008 f9b3 	bl	8008ef2 <HAL_TIM_PWM_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b92:	f000 faa7 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4816      	ldr	r0, [pc, #88]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000ba6:	f008 fe7f 	bl	80098a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000bb0:	f000 fa98 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb4:	2360      	movs	r3, #96	; 0x60
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000bcc:	f008 f9e8 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bd6:	f000 fa85 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	220c      	movs	r2, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000be2:	f008 f9dd 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f000 fa7a 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM3_Init+0xc4>)
 8000bf2:	f000 fcc7 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200005b0 	.word	0x200005b0
 8000c04:	40000400 	.word	0x40000400

08000c08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
 8000c2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <MX_TIM4_Init+0xb0>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c54:	f008 f94d 	bl	8008ef2 <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000c5e:	f000 fa41 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c72:	f008 fe19 	bl	80098a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c7c:	f000 fa32 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	; 0x60
 8000c82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	220c      	movs	r2, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000c98:	f008 f982 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ca2:	f000 fa1f 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ca6:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <MX_TIM4_Init+0xac>)
 8000ca8:	f000 fc6c 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200005fc 	.word	0x200005fc
 8000cb8:	40000800 	.word	0x40000800

08000cbc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b098      	sub	sp, #96	; 0x60
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2234      	movs	r2, #52	; 0x34
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00f f977 	bl	800ffdc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000cf0:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <MX_TIM15_Init+0x108>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d06:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d1a:	4829      	ldr	r0, [pc, #164]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000d1c:	f008 f8e9 	bl	8008ef2 <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 f9dd 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d36:	4619      	mov	r1, r3
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000d3a:	f008 fdb5 	bl	80098a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f9ce 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d48:	2360      	movs	r3, #96	; 0x60
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d50:	2300      	movs	r3, #0
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d54:	2300      	movs	r3, #0
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d68:	2204      	movs	r2, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000d6e:	f008 f917 	bl	8008fa0 <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000d78:	f000 f9b4 	bl	80010e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000da4:	f008 fe08 	bl	80099b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000dae:	f000 f999 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM15_Init+0x104>)
 8000db4:	f000 fbe6 	bl	8001584 <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3760      	adds	r7, #96	; 0x60
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000648 	.word	0x20000648
 8000dc4:	40014000 	.word	0x40014000

08000dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <MX_USART1_UART_Init+0x94>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000e12:	f008 fec1 	bl	8009b98 <HAL_HalfDuplex_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f000 f962 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000e24:	f009 fc62 	bl	800a6ec <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 f959 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000e36:	f009 fc97 	bl	800a768 <HAL_UARTEx_SetRxFifoThreshold>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 f950 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_USART1_UART_Init+0x90>)
 8000e46:	f009 fc18 	bl	800a67a <HAL_UARTEx_DisableFifoMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f000 f948 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000694 	.word	0x20000694
 8000e5c:	40013800 	.word	0x40013800

08000e60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <MX_USART3_UART_Init+0x94>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000eaa:	f008 fe25 	bl	8009af8 <HAL_UART_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000eb4:	f000 f916 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ebc:	f009 fc16 	bl	800a6ec <HAL_UARTEx_SetTxFifoThreshold>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec6:	f000 f90d 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ece:	f009 fc4b 	bl	800a768 <HAL_UARTEx_SetRxFifoThreshold>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed8:	f000 f904 	bl	80010e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_USART3_UART_Init+0x90>)
 8000ede:	f009 fbcc 	bl	800a67a <HAL_UARTEx_DisableFifoMode>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f8fc 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000728 	.word	0x20000728
 8000ef4:	40004800 	.word	0x40004800

08000ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_DMA_Init+0x50>)
 8000f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <MX_DMA_Init+0x50>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6493      	str	r3, [r2, #72]	; 0x48
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_DMA_Init+0x50>)
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_DMA_Init+0x50>)
 8000f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <MX_DMA_Init+0x50>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6493      	str	r3, [r2, #72]	; 0x48
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_DMA_Init+0x50>)
 8000f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201d      	movs	r0, #29
 8000f34:	f001 fed3 	bl	8002cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f38:	201d      	movs	r0, #29
 8000f3a:	f001 feea 	bl	8002d12 <HAL_NVIC_EnableIRQ>

}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a5a      	ldr	r2, [pc, #360]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a54      	ldr	r2, [pc, #336]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a42      	ldr	r2, [pc, #264]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <MX_GPIO_Init+0x184>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP5_Pin|DIR4_Pin|STEP4_Pin|DIR3_Pin
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f24e 0107 	movw	r1, #57351	; 0xe007
 8000fe0:	483c      	ldr	r0, [pc, #240]	; (80010d4 <MX_GPIO_Init+0x188>)
 8000fe2:	f002 fa6b 	bl	80034bc <HAL_GPIO_WritePin>
                          |STEP3_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP1_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2118      	movs	r1, #24
 8000fea:	483b      	ldr	r0, [pc, #236]	; (80010d8 <MX_GPIO_Init+0x18c>)
 8000fec:	f002 fa66 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP2_Pin|TMC_ENN_Pin|TMC_S1_Pin|TMC_S2_Pin
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8000ff6:	4839      	ldr	r0, [pc, #228]	; (80010dc <MX_GPIO_Init+0x190>)
 8000ff8:	f002 fa60 	bl	80034bc <HAL_GPIO_WritePin>
                          |DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMC_S3_GPIO_Port, TMC_S3_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2108      	movs	r1, #8
 8001000:	4837      	ldr	r0, [pc, #220]	; (80010e0 <MX_GPIO_Init+0x194>)
 8001002:	f002 fa5b 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP5_Pin DIR4_Pin STEP4_Pin DIR3_Pin
                           STEP3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = STEP5_Pin|DIR4_Pin|STEP4_Pin|DIR3_Pin
 8001006:	f24e 0307 	movw	r3, #57351	; 0xe007
 800100a:	617b      	str	r3, [r7, #20]
                          |STEP3_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	482d      	ldr	r0, [pc, #180]	; (80010d4 <MX_GPIO_Init+0x188>)
 8001020:	f002 f8cc 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Z__Pin E0_Pin E1_Pin */
  GPIO_InitStruct.Pin = Z__Pin|E0_Pin|E1_Pin;
 8001024:	23c8      	movs	r3, #200	; 0xc8
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4827      	ldr	r0, [pc, #156]	; (80010d4 <MX_GPIO_Init+0x188>)
 8001038:	f002 f8c0 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = STEP1_Pin|DIR1_Pin;
 800103c:	2318      	movs	r3, #24
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4821      	ldr	r0, [pc, #132]	; (80010d8 <MX_GPIO_Init+0x18c>)
 8001054:	f002 f8b2 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP2_Pin TMC_ENN_Pin TMC_S1_Pin TMC_S2_Pin
                           DIR5_Pin */
  GPIO_InitStruct.Pin = STEP2_Pin|TMC_ENN_Pin|TMC_S1_Pin|TMC_S2_Pin
 8001058:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 800105c:	617b      	str	r3, [r7, #20]
                          |DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <MX_GPIO_Init+0x190>)
 8001072:	f002 f8a3 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : X_STOP_Pin TMC_DIAG_Pin */
  GPIO_InitStruct.Pin = X_STOP_Pin|TMC_DIAG_Pin;
 8001076:	f241 0310 	movw	r3, #4112	; 0x1010
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4814      	ldr	r0, [pc, #80]	; (80010dc <MX_GPIO_Init+0x190>)
 800108c:	f002 f896 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Y_STOP_Pin */
  GPIO_InitStruct.Pin = Y_STOP_Pin;
 8001090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Y_STOP_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_GPIO_Init+0x18c>)
 80010a6:	f002 f889 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_S3_Pin */
  GPIO_InitStruct.Pin = TMC_S3_Pin;
 80010aa:	2308      	movs	r3, #8
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TMC_S3_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_GPIO_Init+0x194>)
 80010c2:	f002 f87b 	bl	80031bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	42020800 	.word	0x42020800
 80010d8:	42020000 	.word	0x42020000
 80010dc:	42020400 	.word	0x42020400
 80010e0:	42021c00 	.word	0x42021c00

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x44>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_MspInit+0x44>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6613      	str	r3, [r2, #96]	; 0x60
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x44>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x44>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x44>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	6593      	str	r3, [r2, #88]	; 0x58
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x44>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001126:	f004 ffe7 	bl	80060f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ae      	sub	sp, #184	; 0xb8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2294      	movs	r2, #148	; 0x94
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00e ff3f 	bl	800ffdc <memset>
  if(hadc->Instance==ADC1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a39      	ldr	r2, [pc, #228]	; (8001248 <HAL_ADC_MspInit+0x110>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d16b      	bne.n	8001240 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800116c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800116e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4618      	mov	r0, r3
 800117c:	f005 ffaa 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001186:	f7ff ffad 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_ADC_MspInit+0x114>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_ADC_MspInit+0x114>)
 8001190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_ADC_MspInit+0x114>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_ADC_MspInit+0x114>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a29      	ldr	r2, [pc, #164]	; (800124c <HAL_ADC_MspInit+0x114>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_ADC_MspInit+0x114>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = HE0_T_Pin|HE1_T_Pin|BED_T_Pin;
 80011ba:	2307      	movs	r3, #7
 80011bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d0:	4619      	mov	r1, r3
 80011d2:	481f      	ldr	r0, [pc, #124]	; (8001250 <HAL_ADC_MspInit+0x118>)
 80011d4:	f001 fff2 	bl	80031bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_ADC_MspInit+0x120>)
 80011dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 80011e0:	2205      	movs	r2, #5
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 8001200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001204:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 8001208:	2220      	movs	r2, #32
 800120a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 8001214:	f001 fd98 	bl	8002d48 <HAL_DMA_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_ADC_MspInit+0xea>
    {
      Error_Handler();
 800121e:	f7ff ff61 	bl	80010e4 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001222:	2110      	movs	r1, #16
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 8001226:	f001 ff37 	bl	8003098 <HAL_DMA_ConfigChannelAttributes>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001230:	f7ff ff58 	bl	80010e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 8001238:	651a      	str	r2, [r3, #80]	; 0x50
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_ADC_MspInit+0x11c>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	37b8      	adds	r7, #184	; 0xb8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	42028000 	.word	0x42028000
 800124c:	40021000 	.word	0x40021000
 8001250:	42020000 	.word	0x42020000
 8001254:	20000184 	.word	0x20000184
 8001258:	40020008 	.word	0x40020008

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0ae      	sub	sp, #184	; 0xb8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	2294      	movs	r2, #148	; 0x94
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f00e fead 	bl	800ffdc <memset>
  if(hi2c->Instance==I2C2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <HAL_I2C_MspInit+0xb0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d13b      	bne.n	8001304 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4618      	mov	r0, r3
 800129a:	f005 ff1b 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012a4:	f7ff ff1e 	bl	80010e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_I2C_MspInit+0xb4>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4a18      	ldr	r2, [pc, #96]	; (8001310 <HAL_I2C_MspInit+0xb4>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_I2C_MspInit+0xb4>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012c0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012da:	2304      	movs	r3, #4
 80012dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e4:	4619      	mov	r1, r3
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <HAL_I2C_MspInit+0xb8>)
 80012e8:	f001 ff68 	bl	80031bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_I2C_MspInit+0xb4>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_I2C_MspInit+0xb4>)
 80012f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f6:	6593      	str	r3, [r2, #88]	; 0x58
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_I2C_MspInit+0xb4>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	37b8      	adds	r7, #184	; 0xb8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005800 	.word	0x40005800
 8001310:	40021000 	.word	0x40021000
 8001314:	42020400 	.word	0x42020400

08001318 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0b0      	sub	sp, #192	; 0xc0
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	2294      	movs	r2, #148	; 0x94
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00e fe4f 	bl	800ffdc <memset>
  if(hmmc->Instance==SDMMC1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a33      	ldr	r2, [pc, #204]	; (8001410 <HAL_MMC_MspInit+0xf8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d15f      	bne.n	8001408 <HAL_MMC_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001348:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800134c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800134e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4618      	mov	r0, r3
 800135c:	f005 feba 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_MMC_MspInit+0x52>
    {
      Error_Handler();
 8001366:	f7ff febd 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 8001370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_MMC_MspInit+0xfc>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = SD0_Pin|SD1_Pin|SD2_Pin|SD3_Pin
 80013b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80013b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013cc:	230c      	movs	r3, #12
 80013ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_MMC_MspInit+0x100>)
 80013da:	f001 feef 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80013de:	2304      	movs	r3, #4
 80013e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013f6:	230c      	movs	r3, #12
 80013f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <HAL_MMC_MspInit+0x104>)
 8001404:	f001 feda 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	37c0      	adds	r7, #192	; 0xc0
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	420c8000 	.word	0x420c8000
 8001414:	40021000 	.word	0x40021000
 8001418:	42020800 	.word	0x42020800
 800141c:	42020c00 	.word	0x42020c00

08001420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_SPI_MspInit+0x7c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d127      	bne.n	8001492 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800144c:	6613      	str	r3, [r2, #96]	; 0x60
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPU_SCK_Pin|GPU_MISO_Pin|GPU_MOSI_Pin;
 8001472:	23e0      	movs	r3, #224	; 0xe0
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001482:	2305      	movs	r3, #5
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_SPI_MspInit+0x84>)
 800148e:	f001 fe95 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40013000 	.word	0x40013000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	42020000 	.word	0x42020000

080014a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <HAL_TIM_PWM_MspInit+0xc8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10c      	bne.n	80014d4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 80014c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c4:	6613      	str	r3, [r2, #96]	; 0x60
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80014d2:	e046      	b.n	8001562 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d10c      	bne.n	80014f8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
}
 80014f6:	e034      	b.n	8001562 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <HAL_TIM_PWM_MspInit+0xd0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10c      	bne.n	800151c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6593      	str	r3, [r2, #88]	; 0x58
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
}
 800151a:	e022      	b.n	8001562 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_TIM_PWM_MspInit+0xd4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10c      	bne.n	8001540 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
}
 800153e:	e010      	b.n	8001562 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM15)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_TIM_PWM_MspInit+0xd8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10b      	bne.n	8001562 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <HAL_TIM_PWM_MspInit+0xcc>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
}
 8001562:	bf00      	nop
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40012c00 	.word	0x40012c00
 8001574:	40021000 	.word	0x40021000
 8001578:	40000400 	.word	0x40000400
 800157c:	40000800 	.word	0x40000800
 8001580:	40014000 	.word	0x40014000

08001584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	; 0x30
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_TIM_MspPostInit+0x17c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11d      	bne.n	80015e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HE0_Pin|HE1_Pin;
 80015be:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	484b      	ldr	r0, [pc, #300]	; (8001708 <HAL_TIM_MspPostInit+0x184>)
 80015dc:	f001 fdee 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80015e0:	e089      	b.n	80016f6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ea:	d11d      	bne.n	8001628 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FHE0_Pin|FHE1_Pin;
 8001604:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001616:	2301      	movs	r3, #1
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	483a      	ldr	r0, [pc, #232]	; (800170c <HAL_TIM_MspPostInit+0x188>)
 8001622:	f001 fdcb 	bl	80031bc <HAL_GPIO_Init>
}
 8001626:	e066      	b.n	80016f6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a38      	ldr	r2, [pc, #224]	; (8001710 <HAL_TIM_MspPostInit+0x18c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11c      	bne.n	800166c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a33      	ldr	r2, [pc, #204]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = NZLF_Pin|FAN_Pin;
 800164a:	2303      	movs	r3, #3
 800164c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165a:	2302      	movs	r3, #2
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4829      	ldr	r0, [pc, #164]	; (800170c <HAL_TIM_MspPostInit+0x188>)
 8001666:	f001 fda9 	bl	80031bc <HAL_GPIO_Init>
}
 800166a:	e044      	b.n	80016f6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a28      	ldr	r2, [pc, #160]	; (8001714 <HAL_TIM_MspPostInit+0x190>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d11d      	bne.n	80016b2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016a0:	2302      	movs	r3, #2
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4818      	ldr	r0, [pc, #96]	; (800170c <HAL_TIM_MspPostInit+0x188>)
 80016ac:	f001 fd86 	bl	80031bc <HAL_GPIO_Init>
}
 80016b0:	e021      	b.n	80016f6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM15)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_TIM_MspPostInit+0x194>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d11c      	bne.n	80016f6 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0x180>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BED_Pin;
 80016d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80016e6:	230e      	movs	r3, #14
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BED_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <HAL_TIM_MspPostInit+0x188>)
 80016f2:	f001 fd63 	bl	80031bc <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	; 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40012c00 	.word	0x40012c00
 8001704:	40021000 	.word	0x40021000
 8001708:	42020000 	.word	0x42020000
 800170c:	42020400 	.word	0x42020400
 8001710:	40000400 	.word	0x40000400
 8001714:	40000800 	.word	0x40000800
 8001718:	40014000 	.word	0x40014000

0800171c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0b0      	sub	sp, #192	; 0xc0
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	2294      	movs	r2, #148	; 0x94
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00e fc4d 	bl	800ffdc <memset>
  if(huart->Instance==USART1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_UART_MspInit+0x134>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d13c      	bne.n	80017c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001750:	2300      	movs	r3, #0
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fcbb 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001764:	f7ff fcbe 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001768:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <HAL_UART_MspInit+0x138>)
 800176a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176c:	4a39      	ldr	r2, [pc, #228]	; (8001854 <HAL_UART_MspInit+0x138>)
 800176e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001772:	6613      	str	r3, [r2, #96]	; 0x60
 8001774:	4b37      	ldr	r3, [pc, #220]	; (8001854 <HAL_UART_MspInit+0x138>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_UART_MspInit+0x138>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	4a33      	ldr	r2, [pc, #204]	; (8001854 <HAL_UART_MspInit+0x138>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_UART_MspInit+0x138>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = TMC_UART_Pin;
 8001798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b2:	2307      	movs	r3, #7
 80017b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(TMC_UART_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017bc:	4619      	mov	r1, r3
 80017be:	4826      	ldr	r0, [pc, #152]	; (8001858 <HAL_UART_MspInit+0x13c>)
 80017c0:	f001 fcfc 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017c4:	e03f      	b.n	8001846 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a24      	ldr	r2, [pc, #144]	; (800185c <HAL_UART_MspInit+0x140>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d13a      	bne.n	8001846 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017d0:	2304      	movs	r3, #4
 80017d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 fc79 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80017e8:	f7ff fc7c 	bl	80010e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_UART_MspInit+0x138>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a18      	ldr	r2, [pc, #96]	; (8001854 <HAL_UART_MspInit+0x138>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_UART_MspInit+0x138>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_UART_MspInit+0x138>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <HAL_UART_MspInit+0x138>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_UART_MspInit+0x138>)
 8001812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 800181c:	2330      	movs	r3, #48	; 0x30
 800181e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001834:	2307      	movs	r3, #7
 8001836:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <HAL_UART_MspInit+0x144>)
 8001842:	f001 fcbb 	bl	80031bc <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	37c0      	adds	r7, #192	; 0xc0
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40013800 	.word	0x40013800
 8001854:	40021000 	.word	0x40021000
 8001858:	42020000 	.word	0x42020000
 800185c:	40004800 	.word	0x40004800
 8001860:	42020800 	.word	0x42020800

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler+0x4>

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 f956 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA1_Channel1_IRQHandler+0x10>)
 80018be:	f001 faeb 	bl	8002e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000184 	.word	0x20000184

080018cc <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <USB_FS_IRQHandler+0x10>)
 80018d2:	f002 ff4e 	bl	8004772 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20001ca0 	.word	0x20001ca0

080018e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800190a:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e005      	b.n	8001932 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001932:	4a46      	ldr	r2, [pc, #280]	; (8001a4c <SystemCoreClockUpdate+0x148>)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d866      	bhi.n	8001a16 <SystemCoreClockUpdate+0x112>
 8001948:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <SystemCoreClockUpdate+0x4c>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	08001985 	.word	0x08001985
 8001954:	08001a17 	.word	0x08001a17
 8001958:	08001a17 	.word	0x08001a17
 800195c:	08001a17 	.word	0x08001a17
 8001960:	0800198d 	.word	0x0800198d
 8001964:	08001a17 	.word	0x08001a17
 8001968:	08001a17 	.word	0x08001a17
 800196c:	08001a17 	.word	0x08001a17
 8001970:	08001995 	.word	0x08001995
 8001974:	08001a17 	.word	0x08001a17
 8001978:	08001a17 	.word	0x08001a17
 800197c:	08001a17 	.word	0x08001a17
 8001980:	0800199d 	.word	0x0800199d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001984:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <SystemCoreClockUpdate+0x14c>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	6013      	str	r3, [r2, #0]
      break;
 800198a:	e048      	b.n	8001a1e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <SystemCoreClockUpdate+0x14c>)
 800198e:	4a31      	ldr	r2, [pc, #196]	; (8001a54 <SystemCoreClockUpdate+0x150>)
 8001990:	601a      	str	r2, [r3, #0]
      break;
 8001992:	e044      	b.n	8001a1e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <SystemCoreClockUpdate+0x14c>)
 8001996:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <SystemCoreClockUpdate+0x154>)
 8001998:	601a      	str	r2, [r3, #0]
      break;
 800199a:	e040      	b.n	8001a1e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	3301      	adds	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d003      	beq.n	80019c2 <SystemCoreClockUpdate+0xbe>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d006      	beq.n	80019ce <SystemCoreClockUpdate+0xca>
 80019c0:	e00b      	b.n	80019da <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <SystemCoreClockUpdate+0x150>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	613b      	str	r3, [r7, #16]
          break;
 80019cc:	e00b      	b.n	80019e6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80019ce:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <SystemCoreClockUpdate+0x154>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	613b      	str	r3, [r7, #16]
          break;
 80019d8:	e005      	b.n	80019e6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	613b      	str	r3, [r7, #16]
          break;
 80019e4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0e5b      	lsrs	r3, r3, #25
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <SystemCoreClockUpdate+0x14c>)
 8001a12:	6013      	str	r3, [r2, #0]
      break;
 8001a14:	e003      	b.n	8001a1e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <SystemCoreClockUpdate+0x14c>)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	6013      	str	r3, [r2, #0]
      break;
 8001a1c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <SystemCoreClockUpdate+0x144>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <SystemCoreClockUpdate+0x158>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <SystemCoreClockUpdate+0x14c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <SystemCoreClockUpdate+0x14c>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	08010064 	.word	0x08010064
 8001a50:	20000000 	.word	0x20000000
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	02dc6c00 	.word	0x02dc6c00
 8001a5c:	0801004c 	.word	0x0801004c

08001a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a64:	f7ff ff3c 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a6a:	e003      	b.n	8001a74 <LoopCopyDataInit>

08001a6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a72:	3104      	adds	r1, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a74:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a7c:	d3f6      	bcc.n	8001a6c <CopyDataInit>
	ldr	r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a80:	e002      	b.n	8001a88 <LoopFillZerobss>

08001a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a84:	f842 3b04 	str.w	r3, [r2], #4

08001a88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <LoopForever+0x16>)
	cmp	r2, r3
 8001a8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a8c:	d3f9      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a8e:	f00e fa81 	bl	800ff94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a92:	f7fe fd5f 	bl	8000554 <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a98:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001a9c:	080100dc 	.word	0x080100dc
	ldr	r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001aa4:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 8001aa8:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8001aac:	200021b4 	.word	0x200021b4

08001ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_2_IRQHandler>

08001ab2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001abc:	2004      	movs	r0, #4
 8001abe:	f001 f903 	bl	8002cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001ac2:	f7ff ff1f 	bl	8001904 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac6:	2007      	movs	r0, #7
 8001ac8:	f000 f80e 	bl	8001ae8 <HAL_InitTick>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	e001      	b.n	8001adc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad8:	f7ff fb0a 	bl	80010f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001adc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_InitTick+0x6c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d023      	beq.n	8001b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_InitTick+0x70>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_InitTick+0x6c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 f90b 	bl	8002d2e <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b07      	cmp	r3, #7
 8001b22:	d809      	bhi.n	8001b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f001 f8d7 	bl	8002cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_InitTick+0x74>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e004      	b.n	8001b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e001      	b.n	8001b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000008 	.word	0x20000008
 8001b84:	200007bc 	.word	0x200007bc

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	200007bc 	.word	0x200007bc

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000008 	.word	0x20000008

08001be8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	609a      	str	r2, [r3, #8]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3360      	adds	r3, #96	; 0x60
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <LL_ADC_SetOffset+0x44>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	03fff000 	.word	0x03fff000

08001c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3360      	adds	r3, #96	; 0x60
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	615a      	str	r2, [r3, #20]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3330      	adds	r3, #48	; 0x30
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	211f      	movs	r1, #31
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 011f 	and.w	r1, r3, #31
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3314      	adds	r3, #20
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0e5b      	lsrs	r3, r3, #25
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0d1b      	lsrs	r3, r3, #20
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	2107      	movs	r1, #7
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0d1b      	lsrs	r3, r3, #20
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0318 	and.w	r3, r3, #24
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df4:	40d9      	lsrs	r1, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	0007ffff 	.word	0x0007ffff

08001e18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <LL_ADC_IsEnabled+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_ADC_IsEnabled+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d101      	bne.n	8001ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e12e      	b.n	80021a0 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff f8f1 	bl	8001138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff67 	bl	8001e3c <LL_ADC_IsDeepPowerDownEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff4d 	bl	8001e18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff82 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff66 	bl	8001e64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f98:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <HAL_ADC_Init+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	4a83      	ldr	r2, [pc, #524]	; (80021ac <HAL_ADC_Init+0x284>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff64 	bl	8001e8c <LL_ADC_IsInternalRegulatorEnabled>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff75 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 80c7 	bne.w	800218e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 80c3 	bne.w	800218e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002010:	f043 0202 	orr.w	r2, r3, #2
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff49 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d110      	bne.n	800204a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002028:	4861      	ldr	r0, [pc, #388]	; (80021b0 <HAL_ADC_Init+0x288>)
 800202a:	f7ff ff43 	bl	8001eb4 <LL_ADC_IsEnabled>
 800202e:	4604      	mov	r4, r0
 8002030:	4860      	ldr	r0, [pc, #384]	; (80021b4 <HAL_ADC_Init+0x28c>)
 8002032:	f7ff ff3f 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002036:	4603      	mov	r3, r0
 8002038:	4323      	orrs	r3, r4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4619      	mov	r1, r3
 8002044:	485c      	ldr	r0, [pc, #368]	; (80021b8 <HAL_ADC_Init+0x290>)
 8002046:	f7ff fdcf 	bl	8001be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7e5b      	ldrb	r3, [r3, #25]
 800204e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002054:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800205a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002060:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002068:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	3b01      	subs	r3, #1
 800207e:	045b      	lsls	r3, r3, #17
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	4b44      	ldr	r3, [pc, #272]	; (80021bc <HAL_ADC_Init+0x294>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	69b9      	ldr	r1, [r7, #24]
 80020b2:	430b      	orrs	r3, r1
 80020b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff20 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 80020c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d140      	bne.n	800214a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13d      	bne.n	800214a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7e1b      	ldrb	r3, [r3, #24]
 80020d6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f0:	f023 0306 	bic.w	r3, r3, #6
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	430b      	orrs	r3, r1
 80020fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002104:	2b01      	cmp	r3, #1
 8002106:	d118      	bne.n	800213a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212a:	430a      	orrs	r2, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	611a      	str	r2, [r3, #16]
 8002138:	e007      	b.n	800214a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10c      	bne.n	800216c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f023 010f 	bic.w	r1, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
 800216a:	e007      	b.n	800217c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020f 	bic.w	r2, r2, #15
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f023 0303 	bic.w	r3, r3, #3
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	659a      	str	r2, [r3, #88]	; 0x58
 800218c:	e007      	b.n	800219e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800219e:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3724      	adds	r7, #36	; 0x24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	053e2d63 	.word	0x053e2d63
 80021b0:	42028000 	.word	0x42028000
 80021b4:	42028100 	.word	0x42028100
 80021b8:	42028300 	.word	0x42028300
 80021bc:	fff0c007 	.word	0xfff0c007

080021c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b0b7      	sub	sp, #220	; 0xdc
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x22>
 80021de:	2302      	movs	r3, #2
 80021e0:	e3c1      	b.n	8002966 <HAL_ADC_ConfigChannel+0x7a6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fe73 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 83a6 	bne.w	8002948 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f7ff fd89 	bl	8001d20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fe61 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 8002218:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe6d 	bl	8001f00 <LL_ADC_INJ_IsConversionOngoing>
 8002226:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800222a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 81c1 	bne.w	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 81bc 	bne.w	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002246:	d10f      	bne.n	8002268 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	f7ff fd90 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fd4a 	bl	8001cfa <LL_ADC_SetSamplingTimeCommonConfig>
 8002266:	e00e      	b.n	8002286 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	461a      	mov	r2, r3
 8002276:	f7ff fd7f 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fd3a 	bl	8001cfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d00a      	beq.n	80022be <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6919      	ldr	r1, [r3, #16]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022b8:	f7ff fcca 	bl	8001c50 <LL_ADC_SetOffset>
 80022bc:	e17b      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fce7 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x12a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fcdc 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	e01e      	b.n	8002328 <HAL_ADC_ConfigChannel+0x168>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fcd1 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800230c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e004      	b.n	8002326 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800231c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x180>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	e018      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1b2>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800235c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e004      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002372:	429a      	cmp	r2, r3
 8002374:	d106      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fca0 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fc84 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1f0>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fc79 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 021f 	and.w	r2, r3, #31
 80023ae:	e01e      	b.n	80023ee <HAL_ADC_ConfigChannel+0x22e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fc6e 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80023e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x246>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	e018      	b.n	8002438 <HAL_ADC_ConfigChannel+0x278>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800241a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800241e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e004      	b.n	8002438 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800242e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc3d 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fc21 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x2b6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2102      	movs	r1, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fc16 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	e01e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x2f4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2102      	movs	r1, #2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fc0b 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800249c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e004      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80024a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x30c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	e016      	b.n	80024fa <HAL_ADC_ConfigChannel+0x33a>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80024f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	2102      	movs	r1, #2
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fbdc 	bl	8001cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2103      	movs	r1, #3
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fbc0 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x378>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2103      	movs	r1, #3
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fbb5 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e017      	b.n	8002568 <HAL_ADC_ConfigChannel+0x3a8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2103      	movs	r1, #3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fbaa 	bl	8001c98 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002552:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800255a:	2320      	movs	r3, #32
 800255c:	e003      	b.n	8002566 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800255e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x3c0>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	e011      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x3e4>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800258e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d106      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2103      	movs	r1, #3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fb87 	bl	8001cc4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fc7a 	bl	8001eb4 <LL_ADC_IsEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 81c9 	bne.w	800295a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff fbfb 	bl	8001dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4a8f      	ldr	r2, [pc, #572]	; (800281c <HAL_ADC_ConfigChannel+0x65c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f040 8131 	bne.w	8002848 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_ADC_ConfigChannel+0x44e>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0e9b      	lsrs	r3, r3, #26
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2b09      	cmp	r3, #9
 8002604:	bf94      	ite	ls
 8002606:	2301      	movls	r3, #1
 8002608:	2300      	movhi	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	e019      	b.n	8002642 <HAL_ADC_ConfigChannel+0x482>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800261c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e003      	b.n	8002632 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2b09      	cmp	r3, #9
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002642:	2b00      	cmp	r3, #0
 8002644:	d079      	beq.n	800273a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x4a2>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002660:	e015      	b.n	800268e <HAL_ADC_ConfigChannel+0x4ce>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e003      	b.n	8002686 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3301      	adds	r3, #1
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x4ee>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	e017      	b.n	80026de <HAL_ADC_ConfigChannel+0x51e>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e003      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	ea42 0103 	orr.w	r1, r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x544>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	e018      	b.n	8002736 <HAL_ADC_ConfigChannel+0x576>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002736:	430b      	orrs	r3, r1
 8002738:	e081      	b.n	800283e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x596>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002754:	e015      	b.n	8002782 <HAL_ADC_ConfigChannel+0x5c2>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	069b      	lsls	r3, r3, #26
 800277e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x5e2>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	e017      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x612>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	61fb      	str	r3, [r7, #28]
  return result;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	ea42 0103 	orr.w	r1, r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x63e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	051b      	lsls	r3, r3, #20
 80027f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fc:	e01e      	b.n	800283c <HAL_ADC_ConfigChannel+0x67c>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	613b      	str	r3, [r7, #16]
  return result;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e006      	b.n	8002828 <HAL_ADC_ConfigChannel+0x668>
 800281a:	bf00      	nop
 800281c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	3301      	adds	r3, #1
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	3b1e      	subs	r3, #30
 8002836:	051b      	lsls	r3, r3, #20
 8002838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800283c:	430b      	orrs	r3, r1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	4619      	mov	r1, r3
 8002844:	f7ff fa98 	bl	8001d78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_ADC_ConfigChannel+0x7b0>)
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8082 	beq.w	800295a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002856:	4847      	ldr	r0, [pc, #284]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 8002858:	f7ff f9ec 	bl	8001c34 <LL_ADC_GetCommonPathInternalCh>
 800285c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002860:	4845      	ldr	r0, [pc, #276]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 8002862:	f7ff fb27 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002866:	4604      	mov	r4, r0
 8002868:	4844      	ldr	r0, [pc, #272]	; (800297c <HAL_ADC_ConfigChannel+0x7bc>)
 800286a:	f7ff fb23 	bl	8001eb4 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	4323      	orrs	r3, r4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d15e      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a41      	ldr	r2, [pc, #260]	; (8002980 <HAL_ADC_ConfigChannel+0x7c0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d127      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d121      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a39      	ldr	r2, [pc, #228]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d161      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800289a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289e:	4619      	mov	r1, r3
 80028a0:	4834      	ldr	r0, [pc, #208]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 80028a2:	f7ff f9b4 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_ADC_ConfigChannel+0x7c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	4a36      	ldr	r2, [pc, #216]	; (8002988 <HAL_ADC_ConfigChannel+0x7c8>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80028be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ce:	e044      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2d      	ldr	r2, [pc, #180]	; (800298c <HAL_ADC_ConfigChannel+0x7cc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d113      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d134      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f8:	4619      	mov	r1, r3
 80028fa:	481e      	ldr	r0, [pc, #120]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 80028fc:	f7ff f987 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002900:	e02b      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <HAL_ADC_ConfigChannel+0x7d0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d126      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800290c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d120      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_ADC_ConfigChannel+0x7b8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d11b      	bne.n	800295a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800292a:	4619      	mov	r1, r3
 800292c:	4811      	ldr	r0, [pc, #68]	; (8002974 <HAL_ADC_ConfigChannel+0x7b4>)
 800292e:	f7ff f96e 	bl	8001c0e <LL_ADC_SetCommonPathInternalCh>
 8002932:	e012      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002946:	e008      	b.n	800295a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002962:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002966:	4618      	mov	r0, r3
 8002968:	37dc      	adds	r7, #220	; 0xdc
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	80080000 	.word	0x80080000
 8002974:	42028300 	.word	0x42028300
 8002978:	42028000 	.word	0x42028000
 800297c:	42028100 	.word	0x42028100
 8002980:	c7520000 	.word	0xc7520000
 8002984:	20000000 	.word	0x20000000
 8002988:	053e2d63 	.word	0x053e2d63
 800298c:	cb840000 	.word	0xcb840000
 8002990:	80000001 	.word	0x80000001

08002994 <LL_ADC_IsEnabled>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <LL_ADC_IsEnabled+0x18>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <LL_ADC_IsEnabled+0x1a>
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_REG_IsConversionOngoing>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d101      	bne.n	80029d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b0a1      	sub	sp, #132	; 0x84
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e089      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a06:	2300      	movs	r3, #0
 8002a08:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d102      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e001      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e068      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ffb9 	bl	80029ba <LL_ADC_REG_IsConversionOngoing>
 8002a48:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ffb3 	bl	80029ba <LL_ADC_REG_IsConversionOngoing>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d14a      	bne.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d147      	bne.n	8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d027      	beq.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a7e:	035b      	lsls	r3, r3, #13
 8002a80:	430b      	orrs	r3, r1
 8002a82:	431a      	orrs	r2, r3
 8002a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a88:	4824      	ldr	r0, [pc, #144]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a8a:	f7ff ff83 	bl	8002994 <LL_ADC_IsEnabled>
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4823      	ldr	r0, [pc, #140]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a92:	f7ff ff7f 	bl	8002994 <LL_ADC_IsEnabled>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4323      	orrs	r3, r4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d132      	bne.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aa6:	f023 030f 	bic.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	6892      	ldr	r2, [r2, #8]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ab8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aba:	e023      	b.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac8:	4814      	ldr	r0, [pc, #80]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002aca:	f7ff ff63 	bl	8002994 <LL_ADC_IsEnabled>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4813      	ldr	r0, [pc, #76]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ad2:	f7ff ff5f 	bl	8002994 <LL_ADC_IsEnabled>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4323      	orrs	r3, r4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d112      	bne.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ae6:	f023 030f 	bic.w	r3, r3, #15
 8002aea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002aec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aee:	e009      	b.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b02:	e000      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3784      	adds	r7, #132	; 0x84
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	42028000 	.word	0x42028000
 8002b20:	42028100 	.word	0x42028100
 8002b24:	42028300 	.word	0x42028300

08002b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b44:	4013      	ands	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5a:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	60d3      	str	r3, [r2, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <__NVIC_GetPriorityGrouping+0x18>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 0307 	and.w	r3, r3, #7
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db0b      	blt.n	8002bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <__NVIC_EnableIRQ+0x38>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2001      	movs	r0, #1
 8002bae:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000e100 	.word	0xe000e100

08002bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db0a      	blt.n	8002bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	490c      	ldr	r1, [pc, #48]	; (8002c14 <__NVIC_SetPriority+0x4c>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	0152      	lsls	r2, r2, #5
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf0:	e00a      	b.n	8002c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4908      	ldr	r1, [pc, #32]	; (8002c18 <__NVIC_SetPriority+0x50>)
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	0152      	lsls	r2, r2, #5
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	440b      	add	r3, r1
 8002c06:	761a      	strb	r2, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f1c3 0307 	rsb	r3, r3, #7
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	bf28      	it	cs
 8002c3a:	2303      	movcs	r3, #3
 8002c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3303      	adds	r3, #3
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d902      	bls.n	8002c4c <NVIC_EncodePriority+0x30>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3b04      	subs	r3, #4
 8002c4a:	e000      	b.n	8002c4e <NVIC_EncodePriority+0x32>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	f04f 32ff 	mov.w	r2, #4294967295
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	401a      	ands	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43d9      	mvns	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	4313      	orrs	r3, r2
         );
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3724      	adds	r7, #36	; 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c94:	d301      	bcc.n	8002c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <SysTick_Config+0x40>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca2:	2107      	movs	r1, #7
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f7ff ff8e 	bl	8002bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <SysTick_Config+0x40>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb2:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <SysTick_Config+0x40>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	e000e010 	.word	0xe000e010

08002cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff29 	bl	8002b28 <__NVIC_SetPriorityGrouping>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cec:	f7ff ff40 	bl	8002b70 <__NVIC_GetPriorityGrouping>
 8002cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f7ff ff90 	bl	8002c1c <NVIC_EncodePriority>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff5f 	bl	8002bc8 <__NVIC_SetPriority>
}
 8002d0a:	bf00      	nop
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff33 	bl	8002b8c <__NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ffa4 	bl	8002c84 <SysTick_Config>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e08d      	b.n	8002e76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_DMA_Init+0x138>)
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d80f      	bhi.n	8002d86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <HAL_DMA_Init+0x13c>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a45      	ldr	r2, [pc, #276]	; (8002e88 <HAL_DMA_Init+0x140>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	009a      	lsls	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a42      	ldr	r2, [pc, #264]	; (8002e8c <HAL_DMA_Init+0x144>)
 8002d82:	649a      	str	r2, [r3, #72]	; 0x48
 8002d84:	e00e      	b.n	8002da4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_DMA_Init+0x148>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a3d      	ldr	r2, [pc, #244]	; (8002e88 <HAL_DMA_Init+0x140>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	009a      	lsls	r2, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a3c      	ldr	r2, [pc, #240]	; (8002e94 <HAL_DMA_Init+0x14c>)
 8002da2:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002dba:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002dbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f97e 	bl	80030f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e04:	d102      	bne.n	8002e0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e20:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_DMA_Init+0x104>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d80c      	bhi.n	8002e4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f99e 	bl	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	e008      	b.n	8002e5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40020407 	.word	0x40020407
 8002e84:	bffdfff8 	.word	0xbffdfff8
 8002e88:	cccccccd 	.word	0xcccccccd
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	bffdfbf8 	.word	0xbffdfbf8
 8002e94:	40020400 	.word	0x40020400

08002e98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb4:	f003 031c 	and.w	r3, r3, #28
 8002eb8:	2204      	movs	r2, #4
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d053      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xd4>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d04e      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d024      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee0:	f003 021c 	and.w	r2, r3, #28
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee8:	2104      	movs	r1, #4
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80c0 	beq.w	8003088 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f10:	e0ba      	b.n	8003088 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80b6 	beq.w	8003088 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f24:	e0b0      	b.n	8003088 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f48:	f003 021c 	and.w	r2, r3, #28
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	2104      	movs	r1, #4
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8093 	beq.w	8003088 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f6a:	e08d      	b.n	8003088 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f70:	f003 031c 	and.w	r3, r3, #28
 8002f74:	2202      	movs	r2, #2
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d04e      	beq.n	800301e <HAL_DMA_IRQHandler+0x186>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d049      	beq.n	800301e <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d06e      	beq.n	800308c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002fb6:	e069      	b.n	800308c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d065      	beq.n	800308c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002fc8:	e060      	b.n	800308c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 020a 	bic.w	r2, r2, #10
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	f003 021c 	and.w	r2, r3, #28
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8003002:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d03b      	beq.n	800308c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800301c:	e036      	b.n	800308c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	f003 031c 	and.w	r3, r3, #28
 8003026:	2208      	movs	r2, #8
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d02e      	beq.n	8003090 <HAL_DMA_IRQHandler+0x1f8>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d029      	beq.n	8003090 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 020e 	bic.w	r2, r2, #14
 800304a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003050:	f003 021c 	and.w	r2, r3, #28
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f202 	lsl.w	r2, r1, r2
 800305e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003086:	e002      	b.n	800308e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800308c:	bf00      	nop
  return;
 800308e:	bf00      	nop
 8003090:	bf00      	nop
}
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	72fb      	strb	r3, [r7, #11]
    return status;
 80030b0:	7afb      	ldrb	r3, [r7, #11]
 80030b2:	e01b      	b.n	80030ec <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e003      	b.n	80030e2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030e0:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	601a      	str	r2, [r3, #0]

  return status;
 80030ea:	7afb      	ldrb	r3, [r7, #11]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003108:	429a      	cmp	r2, r3
 800310a:	d80a      	bhi.n	8003122 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003118:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6513      	str	r3, [r2, #80]	; 0x50
 8003120:	e007      	b.n	8003132 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	009a      	lsls	r2, r3, #2
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800312c:	4413      	add	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3b08      	subs	r3, #8
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40020407 	.word	0x40020407
 8003168:	40020820 	.word	0x40020820
 800316c:	cccccccd 	.word	0xcccccccd
 8003170:	40020880 	.word	0x40020880

08003174 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003196:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3b01      	subs	r3, #1
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2201      	movs	r2, #1
 80031a2:	409a      	lsls	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	1000823f 	.word	0x1000823f
 80031b8:	40020940 	.word	0x40020940

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031ca:	e158      	b.n	800347e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 814a 	beq.w	8003478 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d005      	beq.n	80031fc <HAL_GPIO_Init+0x40>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d130      	bne.n	800325e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003232:	2201      	movs	r2, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 0201 	and.w	r2, r3, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b03      	cmp	r3, #3
 8003268:	d017      	beq.n	800329a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d123      	bne.n	80032ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	6939      	ldr	r1, [r7, #16]
 80032ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0203 	and.w	r2, r3, #3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80a4 	beq.w	8003478 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003330:	4a5a      	ldr	r2, [pc, #360]	; (800349c <HAL_GPIO_Init+0x2e0>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3318      	adds	r3, #24
 8003338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	220f      	movs	r2, #15
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_GPIO_Init+0x2e4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d025      	beq.n	80033a8 <HAL_GPIO_Init+0x1ec>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a51      	ldr	r2, [pc, #324]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01f      	beq.n	80033a4 <HAL_GPIO_Init+0x1e8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d019      	beq.n	80033a0 <HAL_GPIO_Init+0x1e4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a4f      	ldr	r2, [pc, #316]	; (80034ac <HAL_GPIO_Init+0x2f0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_GPIO_Init+0x1e0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_GPIO_Init+0x2f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00d      	beq.n	8003398 <HAL_GPIO_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_GPIO_Init+0x2f8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <HAL_GPIO_Init+0x1d8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a4c      	ldr	r2, [pc, #304]	; (80034b8 <HAL_GPIO_Init+0x2fc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_GPIO_Init+0x1d4>
 800338c:	2306      	movs	r3, #6
 800338e:	e00c      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 8003390:	2307      	movs	r3, #7
 8003392:	e00a      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 8003394:	2305      	movs	r3, #5
 8003396:	e008      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 8003398:	2304      	movs	r3, #4
 800339a:	e006      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 800339c:	2303      	movs	r3, #3
 800339e:	e004      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e002      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 80033a8:	2300      	movs	r3, #0
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	f002 0203 	and.w	r2, r2, #3
 80033b0:	00d2      	lsls	r2, r2, #3
 80033b2:	4093      	lsls	r3, r2
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80033ba:	4938      	ldr	r1, [pc, #224]	; (800349c <HAL_GPIO_Init+0x2e0>)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3318      	adds	r3, #24
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_GPIO_Init+0x2e0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033ec:	4a2b      	ldr	r2, [pc, #172]	; (800349c <HAL_GPIO_Init+0x2e0>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_GPIO_Init+0x2e0>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003416:	4a21      	ldr	r2, [pc, #132]	; (800349c <HAL_GPIO_Init+0x2e0>)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <HAL_GPIO_Init+0x2e0>)
 800341e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003442:	4a16      	ldr	r2, [pc, #88]	; (800349c <HAL_GPIO_Init+0x2e0>)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_GPIO_Init+0x2e0>)
 800344c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <HAL_GPIO_Init+0x2e0>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3301      	adds	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	f47f ae9f 	bne.w	80031cc <HAL_GPIO_Init+0x10>
  }
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	4002f400 	.word	0x4002f400
 80034a0:	42020000 	.word	0x42020000
 80034a4:	42020400 	.word	0x42020400
 80034a8:	42020800 	.word	0x42020800
 80034ac:	42020c00 	.word	0x42020c00
 80034b0:	42021000 	.word	0x42021000
 80034b4:	42021400 	.word	0x42021400
 80034b8:	42021800 	.word	0x42021800

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e081      	b.n	8003602 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fea2 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	; 0x24
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800353c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e006      	b.n	8003574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d104      	bne.n	8003586 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69d9      	ldr	r1, [r3, #28]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b20      	cmp	r3, #32
 800361e:	d138      	bne.n	8003692 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800362a:	2302      	movs	r3, #2
 800362c:	e032      	b.n	8003694 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2224      	movs	r2, #36	; 0x24
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800365c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
  }
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d139      	bne.n	800372a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e033      	b.n	800372c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e031      	b.n	80037ae <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fd fddb 	bl	8001318 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2203      	movs	r2, #3
 8003766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f824 	bl	80037b8 <HAL_MMC_InitCard>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e019      	b.n	80037ae <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fb3f 	bl	8003e20 <HAL_MMC_ConfigWideBusOperation>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b08d      	sub	sp, #52	; 0x34
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80037d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037d4:	f004 f802 	bl	80077dc <HAL_RCCEx_GetPeriphCLKFreq>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_MMC_InitCard+0x3c>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e06a      	b.n	80038ca <HAL_MMC_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	4a36      	ldr	r2, [pc, #216]	; (80038d4 <HAL_MMC_InitCard+0x11c>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681c      	ldr	r4, [r3, #0]
 8003806:	466a      	mov	r2, sp
 8003808:	f107 0318 	add.w	r3, r7, #24
 800380c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003810:	e882 0003 	stmia.w	r2, {r0, r1}
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800381a:	4620      	mov	r0, r4
 800381c:	f007 f830 	bl	800a880 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f007 f862 	bl	800a8ee <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8003836:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <HAL_MMC_InitCard+0x120>)
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	3301      	adds	r3, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe f9ad 	bl	8001ba0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fcb4 	bl	80041b4 <MMC_PowerON>
 800384c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <HAL_MMC_InitCard+0xb4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e02e      	b.n	80038ca <HAL_MMC_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fba3 	bl	8003fb8 <MMC_InitCard>
 8003872:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_MMC_InitCard+0xda>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e01b      	b.n	80038ca <HAL_MMC_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800389a:	4618      	mov	r0, r3
 800389c:	f007 f8bc 	bl	800aa18 <SDMMC_CmdBlockLength>
 80038a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00f      	beq.n	80038c8 <HAL_MMC_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <HAL_MMC_InitCard+0x124>)
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_MMC_InitCard+0x112>
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	372c      	adds	r7, #44	; 0x2c
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}
 80038d2:	bf00      	nop
 80038d4:	014f8b59 	.word	0x014f8b59
 80038d8:	00012110 	.word	0x00012110
 80038dc:	1fe00fff 	.word	0x1fe00fff

080038e0 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	0f9b      	lsrs	r3, r3, #30
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	b2da      	uxtb	r2, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	b2da      	uxtb	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b2da      	uxtb	r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b2da      	uxtb	r2, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	b2da      	uxtb	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	0d1b      	lsrs	r3, r3, #20
 8003946:	b29a      	uxth	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b2da      	uxtb	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	0bdb      	lsrs	r3, r3, #15
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	0b9b      	lsrs	r3, r3, #14
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	0b5b      	lsrs	r3, r3, #13
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	0b1b      	lsrs	r3, r3, #12
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 80039ac:	f107 010c 	add.w	r1, r7, #12
 80039b0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80039b4:	22d4      	movs	r2, #212	; 0xd4
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fc4c 	bl	8004254 <MMC_ReadExtCSD>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e129      	b.n	8003c1a <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d163      	bne.n	8003a96 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	009a      	lsls	r2, r3, #2
 80039d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039de:	0f92      	lsrs	r2, r2, #30
 80039e0:	431a      	orrs	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	0edb      	lsrs	r3, r3, #27
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	0d5b      	lsrs	r3, r3, #21
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	0c9b      	lsrs	r3, r3, #18
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	0bdb      	lsrs	r3, r3, #15
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	7e1b      	ldrb	r3, [r3, #24]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	3302      	adds	r3, #2
 8003a56:	2201      	movs	r2, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a60:	fb03 f202 	mul.w	r2, r3, r2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	7a1b      	ldrb	r3, [r3, #8]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a82:	0a52      	lsrs	r2, r2, #9
 8003a84:	fb03 f202 	mul.w	r2, r3, r2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	651a      	str	r2, [r3, #80]	; 0x50
 8003a94:	e023      	b.n	8003ade <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10f      	bne.n	8003abe <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab2:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	651a      	str	r2, [r3, #80]	; 0x50
 8003abc:	e00f      	b.n	8003ade <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <HAL_MMC_GetCardCSD+0x344>)
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e09d      	b.n	8003c1a <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	0b9b      	lsrs	r3, r3, #14
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	09db      	lsrs	r3, r3, #7
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	0fdb      	lsrs	r3, r3, #31
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	0f5b      	lsrs	r3, r3, #29
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	0d9b      	lsrs	r3, r3, #22
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b58:	0d5b      	lsrs	r3, r3, #21
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b88:	0bdb      	lsrs	r3, r3, #15
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	0b9b      	lsrs	r3, r3, #14
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	0b5b      	lsrs	r3, r3, #13
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	0b1b      	lsrs	r3, r3, #12
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd8:	0a9b      	lsrs	r3, r3, #10
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	1fe00fff 	.word	0x1fe00fff

08003c28 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08e      	sub	sp, #56	; 0x38
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7fd ffa8 	bl	8001b88 <HAL_GetTick>
 8003c38:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0de      	b.n	8003e0e <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	f040 80d7 	bne.w	8003e0c <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2203      	movs	r2, #3
 8003c68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7c:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8003c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c82:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003c84:	2390      	movs	r3, #144	; 0x90
 8003c86:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f107 0210 	add.w	r2, r7, #16
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f006 fe8e 	bl	800a9c0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 ffda 	bl	800ac74 <SDMMC_CmdSendEXTCSD>
 8003cc0:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d045      	beq.n	8003d54 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e092      	b.n	8003e0e <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d013      	beq.n	8003d1e <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cfa:	e00d      	b.n	8003d18 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f006 fde7 	bl	800a8d4 <SDMMC_ReadFIFO>
 8003d06:	4602      	mov	r2, r0
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	3304      	adds	r3, #4
 8003d10:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 8003d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d14:	3301      	adds	r3, #1
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	2b07      	cmp	r3, #7
 8003d1c:	d9ee      	bls.n	8003cfc <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8003d1e:	f7fd ff33 	bl	8001b88 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d902      	bls.n	8003d34 <HAL_MMC_GetCardExtCSD+0x10c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10f      	bne.n	8003d54 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a37      	ldr	r2, [pc, #220]	; (8003e18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e05c      	b.n	8003e0e <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0c2      	beq.n	8003ce8 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d70:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00f      	beq.n	8003da0 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a24      	ldr	r2, [pc, #144]	; (8003e18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	f043 0208 	orr.w	r2, r3, #8
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e036      	b.n	8003e0e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00f      	beq.n	8003dce <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e01f      	b.n	8003e0e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00f      	beq.n	8003dfc <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e008      	b.n	8003e0e <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <HAL_MMC_GetCardExtCSD+0x1f4>)
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3738      	adds	r7, #56	; 0x38
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	1fe00fff 	.word	0x1fe00fff
 8003e1c:	18000f3a 	.word	0x18000f3a

08003e20 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8003e20:	b5b0      	push	{r4, r5, r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2203      	movs	r2, #3
 8003e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d014      	beq.n	8003e6e <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8003e52:	2204      	movs	r2, #4
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 faf0 	bl	800443c <MMC_PwrClassUpdate>
 8003e5c:	6238      	str	r0, [r7, #32]
 8003e5e:	e00c      	b.n	8003e7a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8003e60:	2202      	movs	r2, #2
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fae9 	bl	800443c <MMC_PwrClassUpdate>
 8003e6a:	6238      	str	r0, [r7, #32]
 8003e6c:	e005      	b.n	8003e7a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8003e6e:	2201      	movs	r2, #1
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fae2 	bl	800443c <MMC_PwrClassUpdate>
 8003e78:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d17b      	bne.n	8003f78 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d107      	bne.n	8003e98 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4946      	ldr	r1, [pc, #280]	; (8003fa8 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f006 fecd 	bl	800ac2e <SDMMC_CmdSwitch>
 8003e94:	6238      	str	r0, [r7, #32]
 8003e96:	e019      	b.n	8003ecc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9e:	d107      	bne.n	8003eb0 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4941      	ldr	r1, [pc, #260]	; (8003fac <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f006 fec1 	bl	800ac2e <SDMMC_CmdSwitch>
 8003eac:	6238      	str	r0, [r7, #32]
 8003eae:	e00d      	b.n	8003ecc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d107      	bne.n	8003ec6 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	493d      	ldr	r1, [pc, #244]	; (8003fb0 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f006 feb6 	bl	800ac2e <SDMMC_CmdSwitch>
 8003ec2:	6238      	str	r0, [r7, #32]
 8003ec4:	e002      	b.n	8003ecc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8003ec6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eca:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d152      	bne.n	8003f78 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8003ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f006 fe5f 	bl	800aba8 <SDMMC_CmdSendStatus>
 8003eea:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d112      	bne.n	8003f18 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f006 fd4e 	bl	800a99a <SDMMC_GetResponse>
 8003efe:	61f8      	str	r0, [r7, #28]
        count--;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	3b01      	subs	r3, #1
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <HAL_MMC_ConfigWideBusOperation+0xfa>
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e0      	bne.n	8003ed8 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8003f16:	e000      	b.n	8003f1a <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8003f18:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d025      	beq.n	8003f6c <HAL_MMC_ConfigWideBusOperation+0x14c>
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d122      	bne.n	8003f6c <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f34:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8003f36:	e01f      	b.n	8003f78 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f107 0408 	add.w	r4, r7, #8
 8003f3e:	1d1d      	adds	r5, r3, #4
 8003f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681c      	ldr	r4, [r3, #0]
 8003f50:	466a      	mov	r2, sp
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003f5a:	e882 0003 	stmia.w	r2, {r0, r1}
 8003f5e:	f107 0308 	add.w	r3, r7, #8
 8003f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f64:	4620      	mov	r0, r4
 8003f66:	f006 fc8b 	bl	800a880 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8003f6a:	e005      	b.n	8003f78 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8003f72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f76:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa8:	03b70200 	.word	0x03b70200
 8003fac:	03b70100 	.word	0x03b70100
 8003fb0:	03b70000 	.word	0x03b70000
 8003fb4:	1fe00fff 	.word	0x1fe00fff

08003fb8 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8003fb8:	b5b0      	push	{r4, r5, r7, lr}
 8003fba:	b096      	sub	sp, #88	; 0x58
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f006 fca0 	bl	800a910 <SDMMC_GetPowerState>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8003fd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fda:	e0e6      	b.n	80041aa <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f006 fd7d 	bl	800aae0 <SDMMC_CmdSendCID>
 8003fe6:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8003fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8003fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff0:	e0db      	b.n	80041aa <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f006 fcce 	bl	800a99a <SDMMC_GetResponse>
 8003ffe:	4602      	mov	r2, r0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2104      	movs	r1, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f006 fcc5 	bl	800a99a <SDMMC_GetResponse>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2108      	movs	r1, #8
 800401c:	4618      	mov	r0, r3
 800401e:	f006 fcbc 	bl	800a99a <SDMMC_GetResponse>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	210c      	movs	r1, #12
 800402e:	4618      	mov	r0, r3
 8004030:	f006 fcb3 	bl	800a99a <SDMMC_GetResponse>
 8004034:	4602      	mov	r2, r0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f006 fd8a 	bl	800ab5e <SDMMC_CmdSetRelAddMmc>
 800404a:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800404c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8004052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004054:	e0a9      	b.n	80041aa <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8004056:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	041b      	lsls	r3, r3, #16
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f006 fd57 	bl	800ab1e <SDMMC_CmdSendCSD>
 8004070:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MMC_InitCard+0xc4>
  {
    return errorstate;
 8004078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407a:	e096      	b.n	80041aa <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f006 fc89 	bl	800a99a <SDMMC_GetResponse>
 8004088:	4602      	mov	r2, r0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2104      	movs	r1, #4
 8004094:	4618      	mov	r0, r3
 8004096:	f006 fc80 	bl	800a99a <SDMMC_GetResponse>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2108      	movs	r1, #8
 80040a6:	4618      	mov	r0, r3
 80040a8:	f006 fc77 	bl	800a99a <SDMMC_GetResponse>
 80040ac:	4602      	mov	r2, r0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	210c      	movs	r1, #12
 80040b8:	4618      	mov	r0, r3
 80040ba:	f006 fc6e 	bl	800a99a <SDMMC_GetResponse>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2104      	movs	r1, #4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f006 fc65 	bl	800a99a <SDMMC_GetResponse>
 80040d0:	4603      	mov	r3, r0
 80040d2:	0d1a      	lsrs	r2, r3, #20
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f006 fcba 	bl	800aa5e <SDMMC_CmdSelDesel>
 80040ea:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80040ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MMC_InitCard+0x13e>
  {
    return errorstate;
 80040f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f4:	e059      	b.n	80041aa <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 80040f6:	f107 031c 	add.w	r3, r7, #28
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff fbef 	bl	80038e0 <HAL_MMC_GetCardCSD>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	e04d      	b.n	80041aa <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f006 fd44 	bl	800aba8 <SDMMC_CmdSendStatus>
 8004120:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3374      	adds	r3, #116	; 0x74
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fd72 	bl	8003c28 <HAL_MMC_GetCardExtCSD>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414e:	e02c      	b.n	80041aa <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f006 fd23 	bl	800aba8 <SDMMC_CmdSendStatus>
 8004162:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f107 0408 	add.w	r4, r7, #8
 800417c:	1d1d      	adds	r5, r3, #4
 800417e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004182:	682b      	ldr	r3, [r5, #0]
 8004184:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681c      	ldr	r4, [r3, #0]
 800418e:	466a      	mov	r2, sp
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004198:	e882 0003 	stmia.w	r2, {r0, r1}
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a2:	4620      	mov	r0, r4
 80041a4:	f006 fb6c 	bl	800a880 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3750      	adds	r7, #80	; 0x50
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080041b4 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f006 fc69 	bl	800aaa4 <SDMMC_CmdGoIdleState>
 80041d2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d027      	beq.n	800422a <MMC_PowerON+0x76>
  {
    return errorstate;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	e034      	b.n	8004248 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	60ba      	str	r2, [r7, #8]
 80041e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d102      	bne.n	80041f2 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 80041ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f0:	e02a      	b.n	8004248 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4916      	ldr	r1, [pc, #88]	; (8004250 <MMC_PowerON+0x9c>)
 80041f8:	4618      	mov	r0, r3
 80041fa:	f006 fcf8 	bl	800abee <SDMMC_CmdOpCondition>
 80041fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8004206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800420a:	e01d      	b.n	8004248 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f006 fbc1 	bl	800a99a <SDMMC_GetResponse>
 8004218:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	0fdb      	lsrs	r3, r3, #31
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <MMC_PowerON+0x72>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <MMC_PowerON+0x74>
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0d6      	beq.n	80041de <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	0e1b      	lsrs	r3, r3, #24
 8004234:	2bc0      	cmp	r3, #192	; 0xc0
 8004236:	d103      	bne.n	8004240 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
 800423e:	e002      	b.n	8004246 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	c0ff8000 	.word	0xc0ff8000

08004254 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b090      	sub	sp, #64	; 0x40
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7fd fc90 	bl	8001b88 <HAL_GetTick>
 8004268:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2200      	movs	r2, #0
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8004282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004286:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004288:	2390      	movs	r3, #144	; 0x90
 800428a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800428c:	2302      	movs	r3, #2
 800428e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004294:	2301      	movs	r3, #1
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f107 0214 	add.w	r2, r7, #20
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f006 fb8c 	bl	800a9c0 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f006 fce0 	bl	800ac74 <SDMMC_CmdSendEXTCSD>
 80042b4:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d04e      	beq.n	800435a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5c      	ldr	r2, [pc, #368]	; (8004434 <MMC_ReadExtCSD+0x1e0>)
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0a6      	b.n	800442a <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01c      	beq.n	8004324 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ee:	e013      	b.n	8004318 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f006 faed 	bl	800a8d4 <SDMMC_ReadFIFO>
 80042fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 80042fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	4413      	add	r3, r2
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	0892      	lsrs	r2, r2, #2
 8004306:	b292      	uxth	r2, r2
 8004308:	4293      	cmp	r3, r2
 800430a:	d102      	bne.n	8004312 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004310:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8004312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004314:	3301      	adds	r3, #1
 8004316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431a:	2b07      	cmp	r3, #7
 800431c:	d9e8      	bls.n	80042f0 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	3308      	adds	r3, #8
 8004322:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004324:	f7fd fc30 	bl	8001b88 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d902      	bls.n	800433a <MMC_ReadExtCSD+0xe6>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a3d      	ldr	r2, [pc, #244]	; (8004434 <MMC_ReadExtCSD+0x1e0>)
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e067      	b.n	800442a <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0b9      	beq.n	80042dc <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00f      	beq.n	8004396 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2e      	ldr	r2, [pc, #184]	; (8004434 <MMC_ReadExtCSD+0x1e0>)
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	f043 0208 	orr.w	r2, r3, #8
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e049      	b.n	800442a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00f      	beq.n	80043c4 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <MMC_ReadExtCSD+0x1e0>)
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	f043 0202 	orr.w	r2, r3, #2
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00f      	beq.n	80043f2 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <MMC_ReadExtCSD+0x1e0>)
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e01b      	b.n	800442a <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f006 fbd2 	bl	800aba8 <SDMMC_CmdSendStatus>
 8004404:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	431a      	orrs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a06      	ldr	r2, [pc, #24]	; (8004438 <MMC_ReadExtCSD+0x1e4>)
 800441e:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3740      	adds	r7, #64	; 0x40
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	1fe00fff 	.word	0x1fe00fff
 8004438:	18000f3a 	.word	0x18000f3a

0800443c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004456:	d004      	beq.n	8004462 <MMC_PwrClassUpdate+0x26>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800445e:	f040 8088 	bne.w	8004572 <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8004466:	f107 0114 	add.w	r1, r7, #20
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	22bb      	movs	r2, #187	; 0xbb
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff feef 	bl	8004254 <MMC_ReadExtCSD>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800447c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e002      	b.n	800448a <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	0e1b      	lsrs	r3, r3, #24
 8004488:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d105      	bne.n	800449c <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004496:	0e1b      	lsrs	r3, r3, #24
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	e00e      	b.n	80044ba <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d106      	bne.n	80044b0 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e004      	b.n	80044ba <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80044b6:	0e1b      	lsrs	r3, r3, #24
 80044b8:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d158      	bne.n	8004572 <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c6:	d102      	bne.n	80044ce <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	4053      	eors	r3, r2
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d04a      	beq.n	8004572 <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044e8:	f043 736e 	orr.w	r3, r3, #62390272	; 0x3b80000
 80044ec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f006 fb9b 	bl	800ac2e <SDMMC_CmdSwitch>
 80044f8:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d138      	bne.n	8004572 <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8004500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	041b      	lsls	r3, r3, #16
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f006 fb48 	bl	800aba8 <SDMMC_CmdSendStatus>
 8004518:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d112      	bne.n	8004546 <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f006 fa37 	bl	800a99a <SDMMC_GetResponse>
 800452c:	6238      	str	r0, [r7, #32]
            count--;
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	3b01      	subs	r3, #1
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <MMC_PwrClassUpdate+0x10c>
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e0      	bne.n	8004506 <MMC_PwrClassUpdate+0xca>
 8004544:	e000      	b.n	8004548 <MMC_PwrClassUpdate+0x10c>
              break;
 8004546:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <MMC_PwrClassUpdate+0x12a>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800455e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004562:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8004564:	e005      	b.n	8004572 <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 800456c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004570:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8004572:	69fb      	ldr	r3, [r7, #28]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3728      	adds	r7, #40	; 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	b08b      	sub	sp, #44	; 0x2c
 8004580:	af06      	add	r7, sp, #24
 8004582:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0cb      	b.n	8004726 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f00b f9b2 	bl	800f90c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2203      	movs	r2, #3
 80045ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f006 fd42 	bl	800b03e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e040      	b.n	8004642 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	440b      	add	r3, r1
 80045d0:	3301      	adds	r3, #1
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	440b      	add	r3, r1
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	3303      	adds	r3, #3
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	3338      	adds	r3, #56	; 0x38
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	333c      	adds	r3, #60	; 0x3c
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	440b      	add	r3, r1
 8004636:	3340      	adds	r3, #64	; 0x40
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	3301      	adds	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	7bfa      	ldrb	r2, [r7, #15]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d3b9      	bcc.n	80045c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]
 8004650:	e044      	b.n	80046dc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004652:	7bfa      	ldrb	r2, [r7, #15]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800467e:	7bfa      	ldrb	r2, [r7, #15]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	440b      	add	r3, r1
 800468c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004694:	7bfa      	ldrb	r2, [r7, #15]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	440b      	add	r3, r1
 80046a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	440b      	add	r3, r1
 80046b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046c0:	7bfa      	ldrb	r2, [r7, #15]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	3301      	adds	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d3b5      	bcc.n	8004652 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	687e      	ldr	r6, [r7, #4]
 80046ee:	466d      	mov	r5, sp
 80046f0:	f106 0410 	add.w	r4, r6, #16
 80046f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	1d33      	adds	r3, r6, #4
 80046fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004700:	6838      	ldr	r0, [r7, #0]
 8004702:	f006 fcb7 	bl	800b074 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d102      	bne.n	8004724 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f001 fc45 	bl	8005fae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800472e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_PCD_Start+0x16>
 8004740:	2302      	movs	r3, #2
 8004742:	e012      	b.n	800476a <HAL_PCD_Start+0x3c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f006 fc5d 	bl	800b010 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f008 ff21 	bl	800d5a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f008 ff26 	bl	800d5d0 <USB_ReadInterrupts>
 8004784:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fb05 	bl	8004da0 <PCD_EP_ISR_Handler>

    return;
 8004796:	e110      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b4:	b292      	uxth	r2, r2
 80047b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f00b f973 	bl	800faa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047c0:	2100      	movs	r1, #0
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8fc 	bl	80049c0 <HAL_PCD_SetAddress>

    return;
 80047c8:	e0f7      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00c      	beq.n	80047ee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047e6:	b292      	uxth	r2, r2
 80047e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80047ec:	e0e5      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004800:	b29a      	uxth	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800480a:	b292      	uxth	r2, r2
 800480c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004810:	e0d3      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d034      	beq.n	8004886 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0204 	bic.w	r2, r2, #4
 800482e:	b292      	uxth	r2, r2
 8004830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800483c:	b29a      	uxth	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0208 	bic.w	r2, r2, #8
 8004846:	b292      	uxth	r2, r2
 8004848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004852:	2b01      	cmp	r3, #1
 8004854:	d107      	bne.n	8004866 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800485e:	2100      	movs	r1, #0
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f00b fb17 	bl	800fe94 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f00b f956 	bl	800fb18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800487e:	b292      	uxth	r2, r2
 8004880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004884:	e099      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488c:	2b00      	cmp	r3, #0
 800488e:	d027      	beq.n	80048e0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	b292      	uxth	r2, r2
 80048a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ba:	b292      	uxth	r2, r2
 80048bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0204 	orr.w	r2, r2, #4
 80048d2:	b292      	uxth	r2, r2
 80048d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f00b f903 	bl	800fae4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048de:	e06c      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d040      	beq.n	800496c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fc:	b292      	uxth	r2, r2
 80048fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d12b      	bne.n	8004964 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0204 	orr.w	r2, r2, #4
 800491e:	b292      	uxth	r2, r2
 8004920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0208 	orr.w	r2, r2, #8
 8004936:	b292      	uxth	r2, r2
 8004938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800494c:	b29b      	uxth	r3, r3
 800494e:	089b      	lsrs	r3, r3, #2
 8004950:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800495a:	2101      	movs	r1, #1
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f00b fa99 	bl	800fe94 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004962:	e02a      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f00b f8bd 	bl	800fae4 <HAL_PCD_SuspendCallback>
    return;
 800496a:	e026      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00f      	beq.n	8004996 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004988:	b292      	uxth	r2, r2
 800498a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f00b f87b 	bl	800fa8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004994:	e011      	b.n	80049ba <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b2:	b292      	uxth	r2, r2
 80049b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80049b8:	bf00      	nop
  }
}
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_PCD_SetAddress+0x1a>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e013      	b.n	8004a02 <HAL_PCD_SetAddress+0x42>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f008 fdc1 	bl	800d57a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	4608      	mov	r0, r1
 8004a14:	4611      	mov	r1, r2
 8004a16:	461a      	mov	r2, r3
 8004a18:	4603      	mov	r3, r0
 8004a1a:	70fb      	strb	r3, [r7, #3]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	803b      	strh	r3, [r7, #0]
 8004a20:	4613      	mov	r3, r2
 8004a22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	da0e      	bge.n	8004a4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	705a      	strb	r2, [r3, #1]
 8004a4c:	e00e      	b.n	8004a6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	f003 0207 	and.w	r2, r3, #7
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4413      	add	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a78:	883a      	ldrh	r2, [r7, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	78ba      	ldrb	r2, [r7, #2]
 8004a82:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a84:	78bb      	ldrb	r3, [r7, #2]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d102      	bne.n	8004a90 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_PCD_EP_Open+0x94>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e00e      	b.n	8004abc <HAL_PCD_EP_Open+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f006 fb03 	bl	800b0b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004aba:	7afb      	ldrb	r3, [r7, #11]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	da0e      	bge.n	8004af6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	4413      	add	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	705a      	strb	r2, [r3, #1]
 8004af4:	e00e      	b.n	8004b14 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 0207 	and.w	r2, r3, #7
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_PCD_EP_Close+0x6a>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e00e      	b.n	8004b4c <HAL_PCD_EP_Close+0x88>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f006 fe7f 	bl	800b840 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	607a      	str	r2, [r7, #4]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	460b      	mov	r3, r1
 8004b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b64:	7afb      	ldrb	r3, [r7, #11]
 8004b66:	f003 0207 	and.w	r2, r3, #7
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b94:	7afb      	ldrb	r3, [r7, #11]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f007 f837 	bl	800bc1a <USB_EPStartXfer>

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 0207 	and.w	r2, r3, #7
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004bd8:	681b      	ldr	r3, [r3, #0]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf6:	7afb      	ldrb	r3, [r7, #11]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f006 ffe8 	bl	800bc1a <USB_EPStartXfer>

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d901      	bls.n	8004c72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e03e      	b.n	8004cf0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da0e      	bge.n	8004c98 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	705a      	strb	r2, [r3, #1]
 8004c96:	e00c      	b.n	8004cb2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_PCD_EP_SetStall+0x7e>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e00e      	b.n	8004cf0 <HAL_PCD_EP_SetStall+0x9c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f008 fb4b 	bl	800d37c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 020f 	and.w	r2, r3, #15
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d901      	bls.n	8004d16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e040      	b.n	8004d98 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da0e      	bge.n	8004d3c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	705a      	strb	r2, [r3, #1]
 8004d3a:	e00e      	b.n	8004d5a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_PCD_EP_ClrStall+0x82>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e00e      	b.n	8004d98 <HAL_PCD_EP_ClrStall+0xa0>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f008 fb48 	bl	800d41e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b096      	sub	sp, #88	; 0x58
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004da8:	e3b1      	b.n	800550e <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004db2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004db6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004dc4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 8173 	bne.w	80050b4 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004dce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d150      	bne.n	8004e7c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	81fb      	strh	r3, [r7, #14]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	89fb      	ldrh	r3, [r7, #14]
 8004df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3328      	adds	r3, #40	; 0x28
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	441a      	add	r2, r3
 8004e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f00a fe0a 	bl	800fa56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 835f 	beq.w	800550e <PCD_EP_ISR_Handler+0x76e>
 8004e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 835a 	bne.w	800550e <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e7a:	e348      	b.n	800550e <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e82:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d032      	beq.n	8004f00 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ece:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f008 fbcd 	bl	800d674 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	823b      	strh	r3, [r7, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	8a3a      	ldrh	r2, [r7, #16]
 8004ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f00a fd7f 	bl	800f9fc <HAL_PCD_SetupStageCallback>
 8004efe:	e306      	b.n	800550e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f00:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f280 8302 	bge.w	800550e <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f16:	4013      	ands	r3, r2
 8004f18:	83fb      	strh	r3, [r7, #30]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	8bfa      	ldrh	r2, [r7, #30]
 8004f20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f24:	b292      	uxth	r2, r2
 8004f26:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d019      	beq.n	8004f8c <PCD_EP_ISR_Handler+0x1ec>
 8004f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d015      	beq.n	8004f8c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f66:	6959      	ldr	r1, [r3, #20]
 8004f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f008 fb7f 	bl	800d674 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	441a      	add	r2, r3
 8004f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f84:	2100      	movs	r1, #0
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f00a fd4a 	bl	800fa20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004f96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 82b5 	bne.w	800550e <PCD_EP_ISR_Handler+0x76e>
 8004fa4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004fa8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fb0:	f000 82ad 	beq.w	800550e <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4413      	add	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8004fea:	d91d      	bls.n	8005028 <PCD_EP_ISR_Handler+0x288>
 8004fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <PCD_EP_ISR_Handler+0x266>
 8005000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005002:	3b01      	subs	r3, #1
 8005004:	647b      	str	r3, [r7, #68]	; 0x44
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29a      	uxth	r2, r3
 800500c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500e:	b29b      	uxth	r3, r3
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	b29b      	uxth	r3, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	b29b      	uxth	r3, r3
 8005018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005020:	b29a      	uxth	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	801a      	strh	r2, [r3, #0]
 8005026:	e026      	b.n	8005076 <PCD_EP_ISR_Handler+0x2d6>
 8005028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <PCD_EP_ISR_Handler+0x2a6>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e017      	b.n	8005076 <PCD_EP_ISR_Handler+0x2d6>
 8005046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	647b      	str	r3, [r7, #68]	; 0x44
 800504e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <PCD_EP_ISR_Handler+0x2c0>
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	3301      	adds	r3, #1
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005068:	b29b      	uxth	r3, r3
 800506a:	029b      	lsls	r3, r3, #10
 800506c:	b29b      	uxth	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	b29a      	uxth	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	827b      	strh	r3, [r7, #18]
 8005088:	8a7b      	ldrh	r3, [r7, #18]
 800508a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800508e:	827b      	strh	r3, [r7, #18]
 8005090:	8a7b      	ldrh	r3, [r7, #18]
 8005092:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005096:	827b      	strh	r3, [r7, #18]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	8a7b      	ldrh	r3, [r7, #18]
 800509e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
 80050b2:	e22c      	b.n	800550e <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f280 80f6 	bge.w	80052be <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80050e8:	4013      	ands	r3, r2
 80050ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005104:	b292      	uxth	r2, r2
 8005106:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005108:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4413      	add	r3, r2
 800511c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800511e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005120:	7b1b      	ldrb	r3, [r3, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d123      	bne.n	800516e <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	4413      	add	r3, r2
 8005140:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800514a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800514e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 808e 	beq.w	8005274 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515e:	6959      	ldr	r1, [r3, #20]
 8005160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005162:	88da      	ldrh	r2, [r3, #6]
 8005164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005168:	f008 fa84 	bl	800d674 <USB_ReadPMA>
 800516c:	e082      	b.n	8005274 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800516e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005170:	78db      	ldrb	r3, [r3, #3]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d10a      	bne.n	800518c <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005176:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800517a:	461a      	mov	r2, r3
 800517c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9d3 	bl	800552a <HAL_PCD_EP_DB_Receive>
 8005184:	4603      	mov	r3, r0
 8005186:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800518a:	e073      	b.n	8005274 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80051bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d022      	beq.n	8005230 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	4413      	add	r3, r2
 8005204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800520e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005212:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02c      	beq.n	8005274 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005220:	6959      	ldr	r1, [r3, #20]
 8005222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005224:	891a      	ldrh	r2, [r3, #8]
 8005226:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800522a:	f008 fa23 	bl	800d674 <USB_ReadPMA>
 800522e:	e021      	b.n	8005274 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	4413      	add	r3, r2
 800524a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005254:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005258:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800525c:	2b00      	cmp	r3, #0
 800525e:	d009      	beq.n	8005274 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005266:	6959      	ldr	r1, [r3, #20]
 8005268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526a:	895a      	ldrh	r2, [r3, #10]
 800526c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005270:	f008 fa00 	bl	800d674 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800527c:	441a      	add	r2, r3
 800527e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005280:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005284:	695a      	ldr	r2, [r3, #20]
 8005286:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800528a:	441a      	add	r2, r3
 800528c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <PCD_EP_ISR_Handler+0x504>
 8005298:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800529c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d206      	bcs.n	80052b2 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80052a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f00a fbb8 	bl	800fa20 <HAL_PCD_DataOutStageCallback>
 80052b0:	e005      	b.n	80052be <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052b8:	4618      	mov	r0, r3
 80052ba:	f006 fcae 	bl	800bc1a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80052be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 8121 	beq.w	800550e <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80052cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	441a      	add	r2, r3
 800530c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800531c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b01      	cmp	r3, #1
 8005322:	f040 80a2 	bne.w	800546a <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8005326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005328:	2200      	movs	r2, #0
 800532a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800532c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532e:	7b1b      	ldrb	r3, [r3, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8093 	beq.w	800545c <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005336:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d046      	beq.n	80053d0 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d126      	bne.n	8005398 <PCD_EP_ISR_Handler+0x5f8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	4413      	add	r3, r2
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	00da      	lsls	r2, r3, #3
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	4413      	add	r3, r2
 800536c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537c:	b29a      	uxth	r2, r3
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005390:	b29a      	uxth	r2, r3
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	e061      	b.n	800545c <PCD_EP_ISR_Handler+0x6bc>
 8005398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d15d      	bne.n	800545c <PCD_EP_ISR_Handler+0x6bc>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b4:	4413      	add	r3, r2
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	00da      	lsls	r2, r3, #3
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2200      	movs	r2, #0
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e045      	b.n	800545c <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d126      	bne.n	800542c <PCD_EP_ISR_Handler+0x68c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	637b      	str	r3, [r7, #52]	; 0x34
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	4413      	add	r3, r2
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
 80053f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	00da      	lsls	r2, r3, #3
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	4413      	add	r3, r2
 8005400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005410:	b29a      	uxth	r2, r3
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005424:	b29a      	uxth	r2, r3
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	e017      	b.n	800545c <PCD_EP_ISR_Handler+0x6bc>
 800542c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d113      	bne.n	800545c <PCD_EP_ISR_Handler+0x6bc>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543c:	b29b      	uxth	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005442:	4413      	add	r3, r2
 8005444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	00da      	lsls	r2, r3, #3
 800544c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544e:	4413      	add	r3, r2
 8005450:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	2200      	movs	r2, #0
 800545a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800545c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f00a faf7 	bl	800fa56 <HAL_PCD_DataInStageCallback>
 8005468:	e051      	b.n	800550e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800546a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d144      	bne.n	8005500 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4413      	add	r3, r2
 8005490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800549e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d907      	bls.n	80054ba <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80054aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b6:	619a      	str	r2, [r3, #24]
 80054b8:	e002      	b.n	80054c0 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80054ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054bc:	2200      	movs	r2, #0
 80054be:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80054c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f00a fac1 	bl	800fa56 <HAL_PCD_DataInStageCallback>
 80054d4:	e01b      	b.n	800550e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80054d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054de:	441a      	add	r2, r3
 80054e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80054e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054ec:	441a      	add	r2, r3
 80054ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054f8:	4618      	mov	r0, r3
 80054fa:	f006 fb8e 	bl	800bc1a <USB_EPStartXfer>
 80054fe:	e006      	b.n	800550e <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005500:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005504:	461a      	mov	r2, r3
 8005506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f917 	bl	800573c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005516:	b29b      	uxth	r3, r3
 8005518:	b21b      	sxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	f6ff ac45 	blt.w	8004daa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3758      	adds	r7, #88	; 0x58
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b088      	sub	sp, #32
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	4613      	mov	r3, r2
 8005536:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d07c      	beq.n	800563c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	4413      	add	r3, r2
 800555c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005566:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	8b7b      	ldrh	r3, [r7, #26]
 800556e:	429a      	cmp	r2, r3
 8005570:	d306      	bcc.n	8005580 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	8b7b      	ldrh	r3, [r7, #26]
 8005578:	1ad2      	subs	r2, r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	619a      	str	r2, [r3, #24]
 800557e:	e002      	b.n	8005586 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d123      	bne.n	80055d6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	833b      	strh	r3, [r7, #24]
 80055aa:	8b3b      	ldrh	r3, [r7, #24]
 80055ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055b0:	833b      	strh	r3, [r7, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	8b3b      	ldrh	r3, [r7, #24]
 80055c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01f      	beq.n	8005620 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	82fb      	strh	r3, [r7, #22]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	441a      	add	r2, r3
 800560a:	8afb      	ldrh	r3, [r7, #22]
 800560c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800561c:	b29b      	uxth	r3, r3
 800561e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005620:	8b7b      	ldrh	r3, [r7, #26]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8085 	beq.w	8005732 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6959      	ldr	r1, [r3, #20]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	891a      	ldrh	r2, [r3, #8]
 8005634:	8b7b      	ldrh	r3, [r7, #26]
 8005636:	f008 f81d 	bl	800d674 <USB_ReadPMA>
 800563a:	e07a      	b.n	8005732 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	4413      	add	r3, r2
 8005656:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005660:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	8b7b      	ldrh	r3, [r7, #26]
 8005668:	429a      	cmp	r2, r3
 800566a:	d306      	bcc.n	800567a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	8b7b      	ldrh	r3, [r7, #26]
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	619a      	str	r2, [r3, #24]
 8005678:	e002      	b.n	8005680 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d123      	bne.n	80056d0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	83fb      	strh	r3, [r7, #30]
 80056a4:	8bfb      	ldrh	r3, [r7, #30]
 80056a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056aa:	83fb      	strh	r3, [r7, #30]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	8bfb      	ldrh	r3, [r7, #30]
 80056bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80056d0:	88fb      	ldrh	r3, [r7, #6]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11f      	bne.n	800571a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	83bb      	strh	r3, [r7, #28]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	8bbb      	ldrh	r3, [r7, #28]
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005712:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800571a:	8b7b      	ldrh	r3, [r7, #26]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6959      	ldr	r1, [r3, #20]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	895a      	ldrh	r2, [r3, #10]
 800572c:	8b7b      	ldrh	r3, [r7, #26]
 800572e:	f007 ffa1 	bl	800d674 <USB_ReadPMA>
    }
  }

  return count;
 8005732:	8b7b      	ldrh	r3, [r7, #26]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b0a4      	sub	sp, #144	; 0x90
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 81db 	beq.w	8005b0c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	4413      	add	r3, r2
 8005770:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005786:	429a      	cmp	r2, r3
 8005788:	d907      	bls.n	800579a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005792:	1ad2      	subs	r2, r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	619a      	str	r2, [r3, #24]
 8005798:	e002      	b.n	80057a0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 80b9 	bne.w	800591c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d126      	bne.n	8005800 <HAL_PCD_EP_DB_Transmit+0xc4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	4413      	add	r3, r2
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	00da      	lsls	r2, r3, #3
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e01a      	b.n	8005836 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d116      	bne.n	8005836 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005816:	b29b      	uxth	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	4413      	add	r3, r2
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	00da      	lsls	r2, r3, #3
 8005826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005828:	4413      	add	r3, r2
 800582a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	2200      	movs	r2, #0
 8005834:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d126      	bne.n	8005892 <HAL_PCD_EP_DB_Transmit+0x156>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	00da      	lsls	r2, r3, #3
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	4413      	add	r3, r2
 8005866:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005876:	b29a      	uxth	r2, r3
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e017      	b.n	80058c2 <HAL_PCD_EP_DB_Transmit+0x186>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d113      	bne.n	80058c2 <HAL_PCD_EP_DB_Transmit+0x186>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	4413      	add	r3, r2
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00da      	lsls	r2, r3, #3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	4413      	add	r3, r2
 80058b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2200      	movs	r2, #0
 80058c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	4619      	mov	r1, r3
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f00a f8c4 	bl	800fa56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 82fa 	beq.w	8005ece <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f4:	82fb      	strh	r3, [r7, #22]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	441a      	add	r2, r3
 8005904:	8afb      	ldrh	r3, [r7, #22]
 8005906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005916:	b29b      	uxth	r3, r3
 8005918:	8013      	strh	r3, [r2, #0]
 800591a:	e2d8      	b.n	8005ece <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d021      	beq.n	800596a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	441a      	add	r2, r3
 8005952:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005970:	2b01      	cmp	r3, #1
 8005972:	f040 82ac 	bne.w	8005ece <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800597e:	441a      	add	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800598c:	441a      	add	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	429a      	cmp	r2, r3
 800599c:	d30b      	bcc.n	80059b6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6a1a      	ldr	r2, [r3, #32]
 80059aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	621a      	str	r2, [r3, #32]
 80059b4:	e017      	b.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d108      	bne.n	80059d0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80059be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80059ce:	e00a      	b.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d165      	bne.n	8005aba <HAL_PCD_EP_DB_Transmit+0x37e>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	4413      	add	r3, r2
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	00da      	lsls	r2, r3, #3
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	4413      	add	r3, r2
 8005a10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2c:	d91d      	bls.n	8005a6a <HAL_PCD_EP_DB_Transmit+0x32e>
 8005a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a44:	3b01      	subs	r3, #1
 8005a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4313      	orrs	r3, r2
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e044      	b.n	8005af4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x34c>
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e035      	b.n	8005af4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_PCD_EP_DB_Transmit+0x366>
 8005a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	e01c      	b.n	8005af4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d118      	bne.n	8005af4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad6:	4413      	add	r3, r2
 8005ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	00da      	lsls	r2, r3, #3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6959      	ldr	r1, [r3, #20]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	891a      	ldrh	r2, [r3, #8]
 8005b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f007 fd73 	bl	800d5f0 <USB_WritePMA>
 8005b0a:	e1e0      	b.n	8005ece <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b30:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d307      	bcc.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	619a      	str	r2, [r3, #24]
 8005b4e:	e002      	b.n	8005b56 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f040 80c0 	bne.w	8005ce0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d126      	bne.n	8005bb6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b7c:	4413      	add	r3, r2
 8005b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00da      	lsls	r2, r3, #3
 8005b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e01a      	b.n	8005bec <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d116      	bne.n	8005bec <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd2:	4413      	add	r3, r2
 8005bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	00da      	lsls	r2, r3, #3
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005be4:	663b      	str	r3, [r7, #96]	; 0x60
 8005be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be8:	2200      	movs	r2, #0
 8005bea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	677b      	str	r3, [r7, #116]	; 0x74
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d12b      	bne.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x516>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	4413      	add	r3, r2
 8005c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	00da      	lsls	r2, r3, #3
 8005c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e017      	b.n	8005c82 <HAL_PCD_EP_DB_Transmit+0x546>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d113      	bne.n	8005c82 <HAL_PCD_EP_DB_Transmit+0x546>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c68:	4413      	add	r3, r2
 8005c6a:	677b      	str	r3, [r7, #116]	; 0x74
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c74:	4413      	add	r3, r2
 8005c76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7e:	2200      	movs	r2, #0
 8005c80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f009 fee4 	bl	800fa56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 811a 	bne.w	8005ece <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	8013      	strh	r3, [r2, #0]
 8005cde:	e0f6      	b.n	8005ece <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d121      	bne.n	8005d2e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	441a      	add	r2, r3
 8005d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	f040 80ca 	bne.w	8005ece <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d42:	441a      	add	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d50:	441a      	add	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d30b      	bcc.n	8005d7a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a1a      	ldr	r2, [r3, #32]
 8005d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	621a      	str	r2, [r3, #32]
 8005d78:	e017      	b.n	8005daa <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005d82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d92:	e00a      	b.n	8005daa <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	657b      	str	r3, [r7, #84]	; 0x54
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d165      	bne.n	8005e84 <HAL_PCD_EP_DB_Transmit+0x748>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dcc:	4413      	add	r3, r2
 8005dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	00da      	lsls	r2, r3, #3
 8005dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8005de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005df4:	2b3e      	cmp	r3, #62	; 0x3e
 8005df6:	d91d      	bls.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e04:	f003 031f 	and.w	r3, r3, #31
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e041      	b.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <HAL_PCD_EP_DB_Transmit+0x716>
 8005e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	e032      	b.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_PCD_EP_DB_Transmit+0x730>
 8005e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e68:	3301      	adds	r3, #1
 8005e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e019      	b.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d115      	bne.n	8005eb8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9a:	4413      	add	r3, r2
 8005e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00da      	lsls	r2, r3, #3
 8005ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005eac:	653b      	str	r3, [r7, #80]	; 0x50
 8005eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	6959      	ldr	r1, [r3, #20]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	895a      	ldrh	r2, [r3, #10]
 8005ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f007 fb91 	bl	800d5f0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee8:	82bb      	strh	r3, [r7, #20]
 8005eea:	8abb      	ldrh	r3, [r7, #20]
 8005eec:	f083 0310 	eor.w	r3, r3, #16
 8005ef0:	82bb      	strh	r3, [r7, #20]
 8005ef2:	8abb      	ldrh	r3, [r7, #20]
 8005ef4:	f083 0320 	eor.w	r3, r3, #32
 8005ef8:	82bb      	strh	r3, [r7, #20]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	441a      	add	r2, r3
 8005f08:	8abb      	ldrh	r3, [r7, #20]
 8005f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3790      	adds	r7, #144	; 0x90
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	607b      	str	r3, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	817b      	strh	r3, [r7, #10]
 8005f36:	4613      	mov	r3, r2
 8005f38:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f46:	897b      	ldrh	r3, [r7, #10]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e009      	b.n	8005f72 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f5e:	897a      	ldrh	r2, [r7, #10]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005f72:	893b      	ldrh	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d107      	bne.n	8005f88 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	80da      	strh	r2, [r3, #6]
 8005f86:	e00b      	b.n	8005fa0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f043 0301 	orr.w	r3, r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <HAL_PWREx_GetVoltageRange+0x18>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40007000 	.word	0x40007000

08006020 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8006028:	4b27      	ldr	r3, [pc, #156]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006030:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8006032:	f000 f871 	bl	8006118 <HAL_PWREx_SMPS_GetEffectiveMode>
 8006036:	4603      	mov	r3, r0
 8006038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603c:	d101      	bne.n	8006042 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e03e      	b.n	80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8006042:	4b21      	ldr	r3, [pc, #132]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604e:	d101      	bne.n	8006054 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e035      	b.n	80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d101      	bne.n	8006060 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	e02f      	b.n	80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006060:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006068:	4917      	ldr	r1, [pc, #92]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4313      	orrs	r3, r2
 800606e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8006070:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	09db      	lsrs	r3, r3, #7
 800607e:	2232      	movs	r2, #50	; 0x32
 8006080:	fb02 f303 	mul.w	r3, r2, r3
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	08db      	lsrs	r3, r3, #3
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006090:	e002      	b.n	8006098 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3b01      	subs	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a4:	d102      	bne.n	80060ac <HAL_PWREx_ControlVoltageScaling+0x8c>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f2      	bne.n	8006092 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060ac:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d101      	bne.n	80060be <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e000      	b.n	80060c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40007000 	.word	0x40007000
 80060cc:	20000000 	.word	0x20000000
 80060d0:	0a7c5ac5 	.word	0x0a7c5ac5
 80060d4:	cccccccd 	.word	0xcccccccd

080060d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060e6:	6053      	str	r3, [r2, #4]
}
 80060e8:	bf00      	nop
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40007000 	.word	0x40007000

080060f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006106:	6093      	str	r3, [r2, #8]
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40007000 	.word	0x40007000

08006118 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800612e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	e00a      	b.n	800614c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8006140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	e001      	b.n	800614c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8006148:	2300      	movs	r3, #0
 800614a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800614c:	687b      	ldr	r3, [r7, #4]
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40007000 	.word	0x40007000

08006160 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f000 bcc2 	b.w	8006af8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006174:	4b99      	ldr	r3, [pc, #612]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 030c 	and.w	r3, r3, #12
 800617c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800617e:	4b97      	ldr	r3, [pc, #604]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80e9 	beq.w	8006368 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <HAL_RCC_OscConfig+0x4a>
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b0c      	cmp	r3, #12
 80061a0:	f040 8083 	bne.w	80062aa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d17f      	bne.n	80062aa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061aa:	4b8c      	ldr	r3, [pc, #560]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d006      	beq.n	80061c4 <HAL_RCC_OscConfig+0x64>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f000 bc9a 	b.w	8006af8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c8:	4b84      	ldr	r3, [pc, #528]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <HAL_RCC_OscConfig+0x7e>
 80061d4:	4b81      	ldr	r3, [pc, #516]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061dc:	e005      	b.n	80061ea <HAL_RCC_OscConfig+0x8a>
 80061de:	4b7f      	ldr	r3, [pc, #508]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80061e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d224      	bcs.n	8006238 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fe9c 	bl	8006f30 <RCC_SetFlashLatencyFromMSIRange>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f000 bc7a 	b.w	8006af8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006204:	4b75      	ldr	r3, [pc, #468]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a74      	ldr	r2, [pc, #464]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800620a:	f043 0308 	orr.w	r3, r3, #8
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	4b72      	ldr	r3, [pc, #456]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	496f      	ldr	r1, [pc, #444]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006222:	4b6e      	ldr	r3, [pc, #440]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	496a      	ldr	r1, [pc, #424]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	604b      	str	r3, [r1, #4]
 8006236:	e026      	b.n	8006286 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006238:	4b68      	ldr	r3, [pc, #416]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a67      	ldr	r2, [pc, #412]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800623e:	f043 0308 	orr.w	r3, r3, #8
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	4b65      	ldr	r3, [pc, #404]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	4962      	ldr	r1, [pc, #392]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006256:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	495d      	ldr	r1, [pc, #372]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006266:	4313      	orrs	r3, r2
 8006268:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fe5b 	bl	8006f30 <RCC_SetFlashLatencyFromMSIRange>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f000 bc39 	b.w	8006af8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006286:	f000 fe17 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 800628a:	4603      	mov	r3, r0
 800628c:	4a54      	ldr	r2, [pc, #336]	; (80063e0 <HAL_RCC_OscConfig+0x280>)
 800628e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006290:	4b54      	ldr	r3, [pc, #336]	; (80063e4 <HAL_RCC_OscConfig+0x284>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f7fb fc27 	bl	8001ae8 <HAL_InitTick>
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d060      	beq.n	8006366 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	f000 bc27 	b.w	8006af8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d039      	beq.n	8006326 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062b2:	4b4a      	ldr	r3, [pc, #296]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a49      	ldr	r2, [pc, #292]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062be:	f7fb fc63 	bl	8001b88 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062c4:	e00f      	b.n	80062e6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062c6:	f7fb fc5f 	bl	8001b88 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d908      	bls.n	80062e6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062d4:	4b41      	ldr	r3, [pc, #260]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	f000 bc09 	b.w	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062e6:	4b3d      	ldr	r3, [pc, #244]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0e9      	beq.n	80062c6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062f2:	4b3a      	ldr	r3, [pc, #232]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a39      	ldr	r2, [pc, #228]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80062f8:	f043 0308 	orr.w	r3, r3, #8
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4b37      	ldr	r3, [pc, #220]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	4934      	ldr	r1, [pc, #208]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006310:	4b32      	ldr	r3, [pc, #200]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	492f      	ldr	r1, [pc, #188]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006320:	4313      	orrs	r3, r2
 8006322:	604b      	str	r3, [r1, #4]
 8006324:	e020      	b.n	8006368 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006326:	4b2d      	ldr	r3, [pc, #180]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a2c      	ldr	r2, [pc, #176]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006332:	f7fb fc29 	bl	8001b88 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006338:	e00e      	b.n	8006358 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800633a:	f7fb fc25 	bl	8001b88 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d907      	bls.n	8006358 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e3cf      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006358:	4b20      	ldr	r3, [pc, #128]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1ea      	bne.n	800633a <HAL_RCC_OscConfig+0x1da>
 8006364:	e000      	b.n	8006368 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006366:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d07e      	beq.n	8006472 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d005      	beq.n	8006386 <HAL_RCC_OscConfig+0x226>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b0c      	cmp	r3, #12
 800637e:	d10e      	bne.n	800639e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b03      	cmp	r3, #3
 8006384:	d10b      	bne.n	800639e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006386:	4b15      	ldr	r3, [pc, #84]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d06e      	beq.n	8006470 <HAL_RCC_OscConfig+0x310>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d16a      	bne.n	8006470 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e3ac      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a6:	d106      	bne.n	80063b6 <HAL_RCC_OscConfig+0x256>
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a0b      	ldr	r2, [pc, #44]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80063ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	e024      	b.n	8006400 <HAL_RCC_OscConfig+0x2a0>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063be:	d113      	bne.n	80063e8 <HAL_RCC_OscConfig+0x288>
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a05      	ldr	r2, [pc, #20]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80063c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a02      	ldr	r2, [pc, #8]	; (80063dc <HAL_RCC_OscConfig+0x27c>)
 80063d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e012      	b.n	8006400 <HAL_RCC_OscConfig+0x2a0>
 80063da:	bf00      	nop
 80063dc:	40021000 	.word	0x40021000
 80063e0:	20000000 	.word	0x20000000
 80063e4:	20000004 	.word	0x20000004
 80063e8:	4b8b      	ldr	r3, [pc, #556]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a8a      	ldr	r2, [pc, #552]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4b88      	ldr	r3, [pc, #544]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a87      	ldr	r2, [pc, #540]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80063fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d019      	beq.n	800643c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fb fbbe 	bl	8001b88 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800640e:	e00e      	b.n	800642e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006410:	f7fb fbba 	bl	8001b88 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b64      	cmp	r3, #100	; 0x64
 800641c:	d907      	bls.n	800642e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800641e:	4b7e      	ldr	r3, [pc, #504]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e364      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800642e:	4b7a      	ldr	r3, [pc, #488]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0ea      	beq.n	8006410 <HAL_RCC_OscConfig+0x2b0>
 800643a:	e01a      	b.n	8006472 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fb fba4 	bl	8001b88 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006442:	e00e      	b.n	8006462 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fb fba0 	bl	8001b88 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	; 0x64
 8006450:	d907      	bls.n	8006462 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006452:	4b71      	ldr	r3, [pc, #452]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e34a      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006462:	4b6d      	ldr	r3, [pc, #436]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ea      	bne.n	8006444 <HAL_RCC_OscConfig+0x2e4>
 800646e:	e000      	b.n	8006472 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d06c      	beq.n	8006558 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b04      	cmp	r3, #4
 8006482:	d005      	beq.n	8006490 <HAL_RCC_OscConfig+0x330>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d119      	bne.n	80064be <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d116      	bne.n	80064be <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006490:	4b61      	ldr	r3, [pc, #388]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_RCC_OscConfig+0x348>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e327      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a8:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	061b      	lsls	r3, r3, #24
 80064b6:	4958      	ldr	r1, [pc, #352]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064bc:	e04c      	b.n	8006558 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d029      	beq.n	800651a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c6:	4b54      	ldr	r3, [pc, #336]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a53      	ldr	r2, [pc, #332]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80064cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fb fb59 	bl	8001b88 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064d8:	e00e      	b.n	80064f8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064da:	f7fb fb55 	bl	8001b88 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d907      	bls.n	80064f8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064e8:	4b4b      	ldr	r3, [pc, #300]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e2ff      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f8:	4b47      	ldr	r3, [pc, #284]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ea      	beq.n	80064da <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006504:	4b44      	ldr	r3, [pc, #272]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	061b      	lsls	r3, r3, #24
 8006512:	4941      	ldr	r1, [pc, #260]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006514:	4313      	orrs	r3, r2
 8006516:	604b      	str	r3, [r1, #4]
 8006518:	e01e      	b.n	8006558 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651a:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a3e      	ldr	r2, [pc, #248]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006526:	f7fb fb2f 	bl	8001b88 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800652c:	e00e      	b.n	800654c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800652e:	f7fb fb2b 	bl	8001b88 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d907      	bls.n	800654c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800653c:	4b36      	ldr	r3, [pc, #216]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e2d5      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800654c:	4b32      	ldr	r3, [pc, #200]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ea      	bne.n	800652e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d062      	beq.n	800662a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d038      	beq.n	80065de <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d108      	bne.n	8006586 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8006574:	4b28      	ldr	r3, [pc, #160]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800657a:	4a27      	ldr	r2, [pc, #156]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 800657c:	f023 0310 	bic.w	r3, r3, #16
 8006580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006584:	e007      	b.n	8006596 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800658c:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 800658e:	f043 0310 	orr.w	r3, r3, #16
 8006592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800659c:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a6:	f7fb faef 	bl	8001b88 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065ac:	e00f      	b.n	80065ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065ae:	f7fb faeb 	bl	8001b88 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b07      	cmp	r3, #7
 80065ba:	d908      	bls.n	80065ce <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065bc:	4b16      	ldr	r3, [pc, #88]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80065be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e294      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80065d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0e8      	beq.n	80065ae <HAL_RCC_OscConfig+0x44e>
 80065dc:	e025      	b.n	800662a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065de:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065e4:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ee:	f7fb facb 	bl	8001b88 <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065f4:	e012      	b.n	800661c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065f6:	f7fb fac7 	bl	8001b88 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b07      	cmp	r3, #7
 8006602:	d90b      	bls.n	800661c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <HAL_RCC_OscConfig+0x4b8>)
 8006606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e270      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800661c:	4ba8      	ldr	r3, [pc, #672]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800661e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 812d 	beq.w	8006892 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006638:	2300      	movs	r3, #0
 800663a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800663c:	4ba0      	ldr	r3, [pc, #640]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800663e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10d      	bne.n	8006664 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006648:	4b9d      	ldr	r3, [pc, #628]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800664a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664c:	4a9c      	ldr	r2, [pc, #624]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800664e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006652:	6593      	str	r3, [r2, #88]	; 0x58
 8006654:	4b9a      	ldr	r3, [pc, #616]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006660:	2301      	movs	r3, #1
 8006662:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006664:	4b97      	ldr	r3, [pc, #604]	; (80068c4 <HAL_RCC_OscConfig+0x764>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11e      	bne.n	80066ae <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006670:	4b94      	ldr	r3, [pc, #592]	; (80068c4 <HAL_RCC_OscConfig+0x764>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a93      	ldr	r2, [pc, #588]	; (80068c4 <HAL_RCC_OscConfig+0x764>)
 8006676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667c:	f7fb fa84 	bl	8001b88 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006682:	e00e      	b.n	80066a2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006684:	f7fb fa80 	bl	8001b88 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d907      	bls.n	80066a2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006692:	4b8c      	ldr	r3, [pc, #560]	; (80068c4 <HAL_RCC_OscConfig+0x764>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e22a      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066a2:	4b88      	ldr	r3, [pc, #544]	; (80068c4 <HAL_RCC_OscConfig+0x764>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ea      	beq.n	8006684 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01f      	beq.n	80066fa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d010      	beq.n	80066e8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066c6:	4b7e      	ldr	r3, [pc, #504]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80066c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066cc:	4a7c      	ldr	r2, [pc, #496]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80066ce:	f043 0304 	orr.w	r3, r3, #4
 80066d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066d6:	4b7a      	ldr	r3, [pc, #488]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80066d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066dc:	4a78      	ldr	r2, [pc, #480]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066e6:	e018      	b.n	800671a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066e8:	4b75      	ldr	r3, [pc, #468]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	4a74      	ldr	r2, [pc, #464]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80066f8:	e00f      	b.n	800671a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066fa:	4b71      	ldr	r3, [pc, #452]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	4a6f      	ldr	r2, [pc, #444]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800670a:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006710:	4a6b      	ldr	r2, [pc, #428]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006712:	f023 0304 	bic.w	r3, r3, #4
 8006716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d068      	beq.n	80067f4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006722:	f7fb fa31 	bl	8001b88 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006728:	e011      	b.n	800674e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672a:	f7fb fa2d 	bl	8001b88 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f241 3288 	movw	r2, #5000	; 0x1388
 8006738:	4293      	cmp	r3, r2
 800673a:	d908      	bls.n	800674e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800673c:	4b60      	ldr	r3, [pc, #384]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e1d4      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800674e:	4b5c      	ldr	r3, [pc, #368]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0e6      	beq.n	800672a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006764:	2b00      	cmp	r3, #0
 8006766:	d022      	beq.n	80067ae <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006768:	4b55      	ldr	r3, [pc, #340]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676e:	4a54      	ldr	r2, [pc, #336]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006778:	e011      	b.n	800679e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677a:	f7fb fa05 	bl	8001b88 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	4293      	cmp	r3, r2
 800678a:	d908      	bls.n	800679e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800678c:	4b4c      	ldr	r3, [pc, #304]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e1ac      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800679e:	4b48      	ldr	r3, [pc, #288]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0e6      	beq.n	800677a <HAL_RCC_OscConfig+0x61a>
 80067ac:	e068      	b.n	8006880 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80067ae:	4b44      	ldr	r3, [pc, #272]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b4:	4a42      	ldr	r2, [pc, #264]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80067b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067be:	e011      	b.n	80067e4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c0:	f7fb f9e2 	bl	8001b88 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d908      	bls.n	80067e4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067d2:	4b3b      	ldr	r3, [pc, #236]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80067d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e189      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e6      	bne.n	80067c0 <HAL_RCC_OscConfig+0x660>
 80067f2:	e045      	b.n	8006880 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f4:	f7fb f9c8 	bl	8001b88 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067fa:	e011      	b.n	8006820 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fc:	f7fb f9c4 	bl	8001b88 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	f241 3288 	movw	r2, #5000	; 0x1388
 800680a:	4293      	cmp	r3, r2
 800680c:	d908      	bls.n	8006820 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800680e:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e16b      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006820:	4b27      	ldr	r3, [pc, #156]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e6      	bne.n	80067fc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800682e:	4b24      	ldr	r3, [pc, #144]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b00      	cmp	r3, #0
 800683a:	d021      	beq.n	8006880 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006842:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800684c:	e011      	b.n	8006872 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fb f99b 	bl	8001b88 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f241 3288 	movw	r2, #5000	; 0x1388
 800685c:	4293      	cmp	r3, r2
 800685e:	d908      	bls.n	8006872 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e142      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006872:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e6      	bne.n	800684e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006880:	7ffb      	ldrb	r3, [r7, #31]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d105      	bne.n	8006892 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688a:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 800688c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d04f      	beq.n	800693e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d028      	beq.n	80068f8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068a6:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80068a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ac:	4a04      	ldr	r2, [pc, #16]	; (80068c0 <HAL_RCC_OscConfig+0x760>)
 80068ae:	f043 0301 	orr.w	r3, r3, #1
 80068b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b6:	f7fb f967 	bl	8001b88 <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068bc:	e014      	b.n	80068e8 <HAL_RCC_OscConfig+0x788>
 80068be:	bf00      	nop
 80068c0:	40021000 	.word	0x40021000
 80068c4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c8:	f7fb f95e 	bl	8001b88 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d908      	bls.n	80068e8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068d6:	4b8a      	ldr	r3, [pc, #552]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80068d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e107      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068e8:	4b85      	ldr	r3, [pc, #532]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80068ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0e8      	beq.n	80068c8 <HAL_RCC_OscConfig+0x768>
 80068f6:	e022      	b.n	800693e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068f8:	4b81      	ldr	r3, [pc, #516]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80068fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068fe:	4a80      	ldr	r2, [pc, #512]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006908:	f7fb f93e 	bl	8001b88 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800690e:	e00f      	b.n	8006930 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006910:	f7fb f93a 	bl	8001b88 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d908      	bls.n	8006930 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800691e:	4b78      	ldr	r3, [pc, #480]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e0e3      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006930:	4b73      	ldr	r3, [pc, #460]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e8      	bne.n	8006910 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 80d7 	beq.w	8006af6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006948:	4b6d      	ldr	r3, [pc, #436]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 030c 	and.w	r3, r3, #12
 8006950:	2b0c      	cmp	r3, #12
 8006952:	f000 8091 	beq.w	8006a78 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	2b02      	cmp	r3, #2
 800695c:	d166      	bne.n	8006a2c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	4b68      	ldr	r3, [pc, #416]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a67      	ldr	r2, [pc, #412]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fb f90d 	bl	8001b88 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006970:	e00e      	b.n	8006990 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006972:	f7fb f909 	bl	8001b88 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d907      	bls.n	8006990 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006980:	4b5f      	ldr	r3, [pc, #380]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e0b3      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006990:	4b5b      	ldr	r3, [pc, #364]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1ea      	bne.n	8006972 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800699c:	4b58      	ldr	r3, [pc, #352]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	4b58      	ldr	r3, [pc, #352]	; (8006b04 <HAL_RCC_OscConfig+0x9a4>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069ac:	3a01      	subs	r2, #1
 80069ae:	0112      	lsls	r2, r2, #4
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069b6:	0212      	lsls	r2, r2, #8
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069be:	0852      	lsrs	r2, r2, #1
 80069c0:	3a01      	subs	r2, #1
 80069c2:	0552      	lsls	r2, r2, #21
 80069c4:	4311      	orrs	r1, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80069ca:	0852      	lsrs	r2, r2, #1
 80069cc:	3a01      	subs	r2, #1
 80069ce:	0652      	lsls	r2, r2, #25
 80069d0:	4311      	orrs	r1, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069d6:	06d2      	lsls	r2, r2, #27
 80069d8:	430a      	orrs	r2, r1
 80069da:	4949      	ldr	r1, [pc, #292]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e0:	4b47      	ldr	r3, [pc, #284]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a46      	ldr	r2, [pc, #280]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80069e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069ec:	4b44      	ldr	r3, [pc, #272]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a43      	ldr	r2, [pc, #268]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fb f8c6 	bl	8001b88 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fe:	e00e      	b.n	8006a1e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fb f8c2 	bl	8001b88 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d907      	bls.n	8006a1e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0e:	4b3c      	ldr	r3, [pc, #240]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e06c      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1e:	4b38      	ldr	r3, [pc, #224]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0ea      	beq.n	8006a00 <HAL_RCC_OscConfig+0x8a0>
 8006a2a:	e064      	b.n	8006af6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2c:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a33      	ldr	r2, [pc, #204]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fb f8a6 	bl	8001b88 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3e:	e00e      	b.n	8006a5e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fb f8a2 	bl	8001b88 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d907      	bls.n	8006a5e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a4e:	4b2c      	ldr	r3, [pc, #176]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e04c      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a5e:	4b28      	ldr	r3, [pc, #160]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1ea      	bne.n	8006a40 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006a6a:	4b25      	ldr	r3, [pc, #148]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	4924      	ldr	r1, [pc, #144]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a70:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <HAL_RCC_OscConfig+0x9a8>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	60cb      	str	r3, [r1, #12]
 8006a76:	e03e      	b.n	8006af6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e039      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8006a84:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_RCC_OscConfig+0x9a0>)
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f003 0203 	and.w	r2, r3, #3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d12c      	bne.n	8006af2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d123      	bne.n	8006af2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d11b      	bne.n	8006af2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d113      	bne.n	8006af2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	085b      	lsrs	r3, r3, #1
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d109      	bne.n	8006af2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	3b01      	subs	r3, #1
 8006aec:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d001      	beq.n	8006af6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40021000 	.word	0x40021000
 8006b04:	019f800c 	.word	0x019f800c
 8006b08:	feeefffc 	.word	0xfeeefffc

08006b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e11c      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b24:	4b90      	ldr	r3, [pc, #576]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d910      	bls.n	8006b54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b32:	4b8d      	ldr	r3, [pc, #564]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f023 020f 	bic.w	r2, r3, #15
 8006b3a:	498b      	ldr	r1, [pc, #556]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b42:	4b89      	ldr	r3, [pc, #548]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d001      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e104      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d010      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	4b81      	ldr	r3, [pc, #516]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d908      	bls.n	8006b82 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b70:	4b7e      	ldr	r3, [pc, #504]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	497b      	ldr	r1, [pc, #492]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8085 	beq.w	8006c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d11f      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b98:	4b74      	ldr	r3, [pc, #464]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0da      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ba8:	f000 fa26 	bl	8006ff8 <RCC_GetSysClockFreqFromPLLSource>
 8006bac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4a6f      	ldr	r2, [pc, #444]	; (8006d70 <HAL_RCC_ClockConfig+0x264>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d947      	bls.n	8006c46 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006bb6:	4b6d      	ldr	r3, [pc, #436]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d141      	bne.n	8006c46 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bc2:	4b6a      	ldr	r3, [pc, #424]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bca:	4a68      	ldr	r2, [pc, #416]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006bd2:	2380      	movs	r3, #128	; 0x80
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e036      	b.n	8006c46 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006be0:	4b62      	ldr	r3, [pc, #392]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d115      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e0b6      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bf8:	4b5c      	ldr	r3, [pc, #368]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0aa      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c08:	4b58      	ldr	r3, [pc, #352]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0a2      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006c18:	f000 f8b0 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4a53      	ldr	r2, [pc, #332]	; (8006d70 <HAL_RCC_ClockConfig+0x264>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d90f      	bls.n	8006c46 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006c26:	4b51      	ldr	r3, [pc, #324]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c32:	4b4e      	ldr	r3, [pc, #312]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3a:	4a4c      	ldr	r2, [pc, #304]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c46:	4b49      	ldr	r3, [pc, #292]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 0203 	bic.w	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4946      	ldr	r1, [pc, #280]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c58:	f7fa ff96 	bl	8001b88 <HAL_GetTick>
 8006c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5e:	e013      	b.n	8006c88 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c60:	f7fa ff92 	bl	8001b88 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d90a      	bls.n	8006c88 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c72:	4b3e      	ldr	r3, [pc, #248]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 020c 	and.w	r2, r3, #12
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d001      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e06a      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c88:	4b38      	ldr	r3, [pc, #224]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 020c 	and.w	r2, r3, #12
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d1e2      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d105      	bne.n	8006cac <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ca0:	4b32      	ldr	r3, [pc, #200]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	4a31      	ldr	r2, [pc, #196]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006caa:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d010      	beq.n	8006cda <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d208      	bcs.n	8006cda <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cc8:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	4925      	ldr	r1, [pc, #148]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d210      	bcs.n	8006d0a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce8:	4b1f      	ldr	r3, [pc, #124]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f023 020f 	bic.w	r2, r3, #15
 8006cf0:	491d      	ldr	r1, [pc, #116]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <HAL_RCC_ClockConfig+0x25c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d001      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e029      	b.n	8006d5e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d16:	4b15      	ldr	r3, [pc, #84]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	4912      	ldr	r1, [pc, #72]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	490a      	ldr	r1, [pc, #40]	; (8006d6c <HAL_RCC_ClockConfig+0x260>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006d48:	f000 f8b6 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	4a09      	ldr	r2, [pc, #36]	; (8006d74 <HAL_RCC_ClockConfig+0x268>)
 8006d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <HAL_RCC_ClockConfig+0x26c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fec6 	bl	8001ae8 <HAL_InitTick>
 8006d5c:	4603      	mov	r3, r0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40022000 	.word	0x40022000
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	04c4b400 	.word	0x04c4b400
 8006d74:	20000000 	.word	0x20000000
 8006d78:	20000004 	.word	0x20000004

08006d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	; 0x24
 8006d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d8a:	4b47      	ldr	r3, [pc, #284]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 030c 	and.w	r3, r3, #12
 8006d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d94:	4b44      	ldr	r3, [pc, #272]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_RCC_GetSysClockFreq+0x34>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b0c      	cmp	r3, #12
 8006da8:	d121      	bne.n	8006dee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d11e      	bne.n	8006dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006db0:	4b3d      	ldr	r3, [pc, #244]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006dbc:	4b3a      	ldr	r3, [pc, #232]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	e005      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006dcc:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	091b      	lsrs	r3, r3, #4
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8006dd8:	4a34      	ldr	r2, [pc, #208]	; (8006eac <HAL_RCC_GetSysClockFreq+0x130>)
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10d      	bne.n	8006e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006dec:	e00a      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d102      	bne.n	8006dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006df4:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	e004      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e00:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8006e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b0c      	cmp	r3, #12
 8006e08:	d146      	bne.n	8006e98 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006e0a:	4b27      	ldr	r3, [pc, #156]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e14:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	3301      	adds	r3, #1
 8006e20:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d003      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0xb4>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d00d      	beq.n	8006e4a <HAL_RCC_GetSysClockFreq+0xce>
 8006e2e:	e019      	b.n	8006e64 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e30:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006e3a:	68d2      	ldr	r2, [r2, #12]
 8006e3c:	0a12      	lsrs	r2, r2, #8
 8006e3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	617b      	str	r3, [r7, #20]
        break;
 8006e48:	e019      	b.n	8006e7e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e4a:	4a1a      	ldr	r2, [pc, #104]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006e54:	68d2      	ldr	r2, [r2, #12]
 8006e56:	0a12      	lsrs	r2, r2, #8
 8006e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e5c:	fb02 f303 	mul.w	r3, r2, r3
 8006e60:	617b      	str	r3, [r7, #20]
        break;
 8006e62:	e00c      	b.n	8006e7e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6c:	4a0e      	ldr	r2, [pc, #56]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006e6e:	68d2      	ldr	r2, [r2, #12]
 8006e70:	0a12      	lsrs	r2, r2, #8
 8006e72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	617b      	str	r3, [r7, #20]
        break;
 8006e7c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	0e5b      	lsrs	r3, r3, #25
 8006e84:	f003 0303 	and.w	r3, r3, #3
 8006e88:	3301      	adds	r3, #1
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e98:	69bb      	ldr	r3, [r7, #24]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3724      	adds	r7, #36	; 0x24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	08010064 	.word	0x08010064
 8006eb0:	00f42400 	.word	0x00f42400
 8006eb4:	02dc6c00 	.word	0x02dc6c00

08006eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8006ebc:	f7ff ff5e 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RCC_GetHCLKFreq+0x20>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	091b      	lsrs	r3, r3, #4
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	4903      	ldr	r1, [pc, #12]	; (8006edc <HAL_RCC_GetHCLKFreq+0x24>)
 8006ece:	5ccb      	ldrb	r3, [r1, r3]
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	0801004c 	.word	0x0801004c

08006ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ee4:	f7ff ffe8 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	4903      	ldr	r1, [pc, #12]	; (8006f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ef6:	5ccb      	ldrb	r3, [r1, r3]
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000
 8006f04:	0801005c 	.word	0x0801005c

08006f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f0c:	f7ff ffd4 	bl	8006eb8 <HAL_RCC_GetHCLKFreq>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	0adb      	lsrs	r3, r3, #11
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	4903      	ldr	r1, [pc, #12]	; (8006f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f1e:	5ccb      	ldrb	r3, [r1, r3]
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	0801005c 	.word	0x0801005c

08006f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f48:	f7ff f85c 	bl	8006004 <HAL_PWREx_GetVoltageRange>
 8006f4c:	6138      	str	r0, [r7, #16]
 8006f4e:	e014      	b.n	8006f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f50:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f54:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f5c:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f68:	f7ff f84c 	bl	8006004 <HAL_PWREx_GetVoltageRange>
 8006f6c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f6e:	4b20      	ldr	r3, [pc, #128]	; (8006ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f72:	4a1f      	ldr	r2, [pc, #124]	; (8006ff0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f86:	d10b      	bne.n	8006fa0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d919      	bls.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2ba0      	cmp	r3, #160	; 0xa0
 8006f92:	d902      	bls.n	8006f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f94:	2302      	movs	r3, #2
 8006f96:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006f98:	e013      	b.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006f9e:	e010      	b.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b80      	cmp	r3, #128	; 0x80
 8006fa4:	d902      	bls.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e00a      	b.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d102      	bne.n	8006fb8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e004      	b.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b70      	cmp	r3, #112	; 0x70
 8006fbc:	d101      	bne.n	8006fc2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f023 020f 	bic.w	r2, r3, #15
 8006fca:	490a      	ldr	r1, [pc, #40]	; (8006ff4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	40022000 	.word	0x40022000

08006ff8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ffe:	4b31      	ldr	r3, [pc, #196]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007008:	4b2e      	ldr	r3, [pc, #184]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	091b      	lsrs	r3, r3, #4
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	3301      	adds	r3, #1
 8007014:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b03      	cmp	r3, #3
 800701a:	d015      	beq.n	8007048 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b03      	cmp	r3, #3
 8007020:	d839      	bhi.n	8007096 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d01c      	beq.n	8007062 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d133      	bne.n	8007096 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800702e:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	fbb2 f3f3 	udiv	r3, r2, r3
 8007036:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007038:	68d2      	ldr	r2, [r2, #12]
 800703a:	0a12      	lsrs	r2, r2, #8
 800703c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007040:	fb02 f303 	mul.w	r3, r2, r3
 8007044:	613b      	str	r3, [r7, #16]
      break;
 8007046:	e029      	b.n	800709c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007048:	4a20      	ldr	r2, [pc, #128]	; (80070cc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007052:	68d2      	ldr	r2, [r2, #12]
 8007054:	0a12      	lsrs	r2, r2, #8
 8007056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	613b      	str	r3, [r7, #16]
      break;
 8007060:	e01c      	b.n	800709c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007062:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d107      	bne.n	800707e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e005      	b.n	800708a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800707e:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	091b      	lsrs	r3, r3, #4
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007092:	613b      	str	r3, [r7, #16]
        break;
 8007094:	e002      	b.n	800709c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
      break;
 800709a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	0e5b      	lsrs	r3, r3, #25
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	3301      	adds	r3, #1
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80070b6:	683b      	ldr	r3, [r7, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	40021000 	.word	0x40021000
 80070c8:	00f42400 	.word	0x00f42400
 80070cc:	02dc6c00 	.word	0x02dc6c00
 80070d0:	08010064 	.word	0x08010064

080070d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070dc:	2300      	movs	r3, #0
 80070de:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070e0:	2300      	movs	r3, #0
 80070e2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d040      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d02a      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070f8:	2b80      	cmp	r3, #128	; 0x80
 80070fa:	d825      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80070fc:	2b60      	cmp	r3, #96	; 0x60
 80070fe:	d026      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007100:	2b60      	cmp	r3, #96	; 0x60
 8007102:	d821      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d006      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007108:	2b40      	cmp	r3, #64	; 0x40
 800710a:	d81d      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007110:	2b20      	cmp	r3, #32
 8007112:	d010      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007114:	e018      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007116:	4b8f      	ldr	r3, [pc, #572]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	4a8e      	ldr	r2, [pc, #568]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007120:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007122:	e015      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3304      	adds	r3, #4
 8007128:	2100      	movs	r1, #0
 800712a:	4618      	mov	r0, r3
 800712c:	f001 faf8 	bl	8008720 <RCCEx_PLLSAI1_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007134:	e00c      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3320      	adds	r3, #32
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f001 fbd5 	bl	80088ec <RCCEx_PLLSAI2_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007146:	e003      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	77fb      	strb	r3, [r7, #31]
        break;
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800714e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007150:	7ffb      	ldrb	r3, [r7, #31]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007156:	4b7f      	ldr	r3, [pc, #508]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800715c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007164:	497b      	ldr	r1, [pc, #492]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800716c:	e001      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716e:	7ffb      	ldrb	r3, [r7, #31]
 8007170:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d047      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007186:	d030      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718c:	d82a      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800718e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007192:	d02a      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007198:	d824      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800719a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800719e:	d008      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d81e      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80071aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ae:	d010      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80071b0:	e018      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80071b2:	4b68      	ldr	r3, [pc, #416]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	4a67      	ldr	r2, [pc, #412]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071bc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80071be:	e015      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 faaa 	bl	8008720 <RCCEx_PLLSAI1_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80071d0:	e00c      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3320      	adds	r3, #32
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fb87 	bl	80088ec <RCCEx_PLLSAI2_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80071e2:	e003      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	77fb      	strb	r3, [r7, #31]
        break;
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80071ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ec:	7ffb      	ldrb	r3, [r7, #31]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071f2:	4b58      	ldr	r3, [pc, #352]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007200:	4954      	ldr	r1, [pc, #336]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007208:	e001      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720a:	7ffb      	ldrb	r3, [r7, #31]
 800720c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80ab 	beq.w	8007372 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800721c:	2300      	movs	r3, #0
 800721e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007220:	4b4c      	ldr	r3, [pc, #304]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10d      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722c:	4b49      	ldr	r3, [pc, #292]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	4a48      	ldr	r2, [pc, #288]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007236:	6593      	str	r3, [r2, #88]	; 0x58
 8007238:	4b46      	ldr	r3, [pc, #280]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007248:	4b43      	ldr	r3, [pc, #268]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a42      	ldr	r2, [pc, #264]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800724e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007254:	f7fa fc98 	bl	8001b88 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800725a:	e00f      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800725c:	f7fa fc94 	bl	8001b88 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d908      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800726a:	4b3b      	ldr	r3, [pc, #236]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800727a:	e006      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800727c:	4b36      	ldr	r3, [pc, #216]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0e9      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800728a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800728c:	7ffb      	ldrb	r3, [r7, #31]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d164      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007292:	4b30      	ldr	r3, [pc, #192]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01f      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d019      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072b0:	4b28      	ldr	r3, [pc, #160]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ba:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072bc:	4b25      	ldr	r3, [pc, #148]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c2:	4a24      	ldr	r2, [pc, #144]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072cc:	4b21      	ldr	r3, [pc, #132]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	4a20      	ldr	r2, [pc, #128]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01f      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ee:	f7fa fc4b 	bl	8001b88 <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f4:	e012      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f6:	f7fa fc47 	bl	8001b88 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f241 3288 	movw	r2, #5000	; 0x1388
 8007304:	4293      	cmp	r3, r2
 8007306:	d909      	bls.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007308:	4b12      	ldr	r3, [pc, #72]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800730a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800731a:	e007      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0e5      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800732a:	e000      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800732c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800732e:	7ffb      	ldrb	r3, [r7, #31]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10c      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007344:	4903      	ldr	r1, [pc, #12]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800734c:	e008      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800734e:	7ffb      	ldrb	r3, [r7, #31]
 8007350:	77bb      	strb	r3, [r7, #30]
 8007352:	e005      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007354:	40021000 	.word	0x40021000
 8007358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	7ffb      	ldrb	r3, [r7, #31]
 800735e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d105      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007366:	4b9c      	ldr	r3, [pc, #624]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736a:	4a9b      	ldr	r2, [pc, #620]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800736c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800737e:	4b96      	ldr	r3, [pc, #600]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007384:	f023 0203 	bic.w	r2, r3, #3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738c:	4992      	ldr	r1, [pc, #584]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073a0:	4b8d      	ldr	r3, [pc, #564]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a6:	f023 020c 	bic.w	r2, r3, #12
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	498a      	ldr	r1, [pc, #552]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073c2:	4b85      	ldr	r3, [pc, #532]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d0:	4981      	ldr	r1, [pc, #516]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073e4:	4b7c      	ldr	r3, [pc, #496]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80073e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	4979      	ldr	r1, [pc, #484]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0310 	and.w	r3, r3, #16
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007406:	4b74      	ldr	r3, [pc, #464]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007414:	4970      	ldr	r1, [pc, #448]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007428:	4b6b      	ldr	r3, [pc, #428]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007436:	4968      	ldr	r1, [pc, #416]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800744a:	4b63      	ldr	r3, [pc, #396]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800744c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007458:	495f      	ldr	r1, [pc, #380]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800745a:	4313      	orrs	r3, r2
 800745c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800746c:	4b5a      	ldr	r3, [pc, #360]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800746e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747a:	4957      	ldr	r1, [pc, #348]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800747c:	4313      	orrs	r3, r2
 800747e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800748e:	4b52      	ldr	r3, [pc, #328]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800749c:	494e      	ldr	r1, [pc, #312]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d031      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074b8:	d00e      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80074ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074be:	d814      	bhi.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d015      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80074c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074c8:	d10f      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074ca:	4b43      	ldr	r3, [pc, #268]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	4a42      	ldr	r2, [pc, #264]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80074d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074d4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80074d6:	e00c      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 f91e 	bl	8008720 <RCCEx_PLLSAI1_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80074e8:	e003      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	77fb      	strb	r3, [r7, #31]
        break;
 80074ee:	e000      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80074f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074f8:	4b37      	ldr	r3, [pc, #220]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007506:	4934      	ldr	r1, [pc, #208]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800750e:	e001      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007510:	7ffb      	ldrb	r3, [r7, #31]
 8007512:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007520:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007526:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	492a      	ldr	r1, [pc, #168]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007542:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007550:	4921      	ldr	r1, [pc, #132]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007564:	4b1c      	ldr	r3, [pc, #112]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	4919      	ldr	r1, [pc, #100]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007574:	4313      	orrs	r3, r2
 8007576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007588:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800758c:	f023 0203 	bic.w	r2, r3, #3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007594:	4910      	ldr	r1, [pc, #64]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007596:	4313      	orrs	r3, r2
 8007598:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d02b      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b6:	4908      	ldr	r1, [pc, #32]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075c6:	d109      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075c8:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4a02      	ldr	r2, [pc, #8]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80075ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075d2:	60d3      	str	r3, [r2, #12]
 80075d4:	e014      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80075d6:	bf00      	nop
 80075d8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075e4:	d10c      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3304      	adds	r3, #4
 80075ea:	2101      	movs	r1, #1
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 f897 	bl	8008720 <RCCEx_PLLSAI1_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80075f6:	7ffb      	ldrb	r3, [r7, #31]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80075fc:	7ffb      	ldrb	r3, [r7, #31]
 80075fe:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d04a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007614:	d108      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8007616:	4b70      	ldr	r3, [pc, #448]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800761c:	4a6e      	ldr	r2, [pc, #440]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800761e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007622:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007626:	e012      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007628:	4b6b      	ldr	r3, [pc, #428]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007636:	4968      	ldr	r1, [pc, #416]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800763e:	4b66      	ldr	r3, [pc, #408]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007640:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007644:	4a64      	ldr	r2, [pc, #400]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800764a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007656:	d10d      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3304      	adds	r3, #4
 800765c:	2101      	movs	r1, #1
 800765e:	4618      	mov	r0, r3
 8007660:	f001 f85e 	bl	8008720 <RCCEx_PLLSAI1_Config>
 8007664:	4603      	mov	r3, r0
 8007666:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007668:	7ffb      	ldrb	r3, [r7, #31]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d019      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800766e:	7ffb      	ldrb	r3, [r7, #31]
 8007670:	77bb      	strb	r3, [r7, #30]
 8007672:	e016      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800767c:	d106      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800767e:	4b56      	ldr	r3, [pc, #344]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	4a55      	ldr	r2, [pc, #340]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007688:	60d3      	str	r3, [r2, #12]
 800768a:	e00a      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007694:	d105      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007696:	4b50      	ldr	r3, [pc, #320]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	4a4f      	ldr	r2, [pc, #316]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800769c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d028      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076ae:	4b4a      	ldr	r3, [pc, #296]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076bc:	4946      	ldr	r1, [pc, #280]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076cc:	d106      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076ce:	4b42      	ldr	r3, [pc, #264]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	4a41      	ldr	r2, [pc, #260]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80076d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d8:	60d3      	str	r3, [r2, #12]
 80076da:	e011      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076e4:	d10c      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3304      	adds	r3, #4
 80076ea:	2101      	movs	r1, #1
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 f817 	bl	8008720 <RCCEx_PLLSAI1_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80076fc:	7ffb      	ldrb	r3, [r7, #31]
 80076fe:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01e      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800770c:	4b32      	ldr	r3, [pc, #200]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007712:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800771c:	492e      	ldr	r1, [pc, #184]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800771e:	4313      	orrs	r3, r2
 8007720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800772e:	d10c      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	2102      	movs	r1, #2
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fff2 	bl	8008720 <RCCEx_PLLSAI1_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007740:	7ffb      	ldrb	r3, [r7, #31]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8007746:	7ffb      	ldrb	r3, [r7, #31]
 8007748:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00b      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007756:	4b20      	ldr	r3, [pc, #128]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800775c:	f023 0204 	bic.w	r2, r3, #4
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007766:	491c      	ldr	r1, [pc, #112]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00b      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800777a:	4b17      	ldr	r3, [pc, #92]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800777c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007780:	f023 0218 	bic.w	r2, r3, #24
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800778a:	4913      	ldr	r1, [pc, #76]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800779e:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80077a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ae:	490a      	ldr	r1, [pc, #40]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077c0:	d105      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	4a04      	ldr	r2, [pc, #16]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80077c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077cc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80077ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000

080077dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ee:	d13e      	bne.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80077f0:	4b45      	ldr	r3, [pc, #276]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80077f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fa:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007802:	d028      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780a:	f200 8773 	bhi.w	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d005      	beq.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d00e      	beq.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800781e:	f000 bf69 	b.w	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007822:	4b39      	ldr	r3, [pc, #228]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b02      	cmp	r3, #2
 800782e:	f040 8763 	bne.w	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	61fb      	str	r3, [r7, #28]
        break;
 8007838:	f000 bf5e 	b.w	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800783c:	4b32      	ldr	r3, [pc, #200]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800783e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b02      	cmp	r3, #2
 8007848:	f040 8758 	bne.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 800784c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007850:	61fb      	str	r3, [r7, #28]
        break;
 8007852:	f000 bf53 	b.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007856:	4b2c      	ldr	r3, [pc, #176]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007862:	f040 874d 	bne.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 8007866:	4b29      	ldr	r3, [pc, #164]	; (800790c <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8007868:	61fb      	str	r3, [r7, #28]
        break;
 800786a:	f000 bf49 	b.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800786e:	4b26      	ldr	r3, [pc, #152]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b03      	cmp	r3, #3
 800787c:	d036      	beq.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b03      	cmp	r3, #3
 8007882:	d84b      	bhi.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d003      	beq.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d020      	beq.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007890:	e044      	b.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007892:	4b1d      	ldr	r3, [pc, #116]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d116      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800789e:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80078aa:	4b17      	ldr	r3, [pc, #92]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	e005      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80078b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	4a13      	ldr	r2, [pc, #76]	; (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 80078c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c8:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80078ca:	e02a      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
        break;
 80078d0:	e027      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078d2:	4b0d      	ldr	r3, [pc, #52]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078de:	d102      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 80078e0:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 80078e2:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80078e4:	e01d      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
        break;
 80078ea:	e01a      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078ec:	4b06      	ldr	r3, [pc, #24]	; (8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f8:	d102      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80078fa:	4b07      	ldr	r3, [pc, #28]	; (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 80078fc:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80078fe:	e010      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	61bb      	str	r3, [r7, #24]
        break;
 8007904:	e00d      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007906:	bf00      	nop
 8007908:	40021000 	.word	0x40021000
 800790c:	0016e360 	.word	0x0016e360
 8007910:	08010064 	.word	0x08010064
 8007914:	00f42400 	.word	0x00f42400
 8007918:	02dc6c00 	.word	0x02dc6c00
      default:
        /* No source */
        pllvco = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	61bb      	str	r3, [r7, #24]
        break;
 8007920:	bf00      	nop
    }

    switch (PeriphClk)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007928:	f000 8659 	beq.w	80085de <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007932:	f200 86e7 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800793c:	f000 8605 	beq.w	800854a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007946:	f200 86dd 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007950:	f000 8468 	beq.w	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800795a:	f200 86d3 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007964:	f000 8530 	beq.w	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800796e:	f200 86c9 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007978:	f000 8180 	beq.w	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007982:	f200 86bf 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800798c:	f000 80c2 	beq.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007996:	f200 86b5 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a0:	f000 842f 	beq.w	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079aa:	f200 86ab 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079b4:	f000 83e7 	beq.w	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079be:	f200 86a1 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c8:	f000 80a4 	beq.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d2:	f200 8697 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079dc:	f000 8092 	beq.w	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e6:	f200 868d 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f0:	f000 8080 	beq.w	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fa:	f200 8683 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a04:	f000 8553 	beq.w	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0e:	f200 8679 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	f000 84ff 	beq.w	800841a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a22:	f200 866f 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2c:	f000 84a0 	beq.w	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a36:	f200 8665 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	f000 846b 	beq.w	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b80      	cmp	r3, #128	; 0x80
 8007a46:	f200 865d 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d84b      	bhi.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8656 	beq.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	2b1f      	cmp	r3, #31
 8007a5e:	f200 8651 	bhi.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007e81 	.word	0x08007e81
 8007a6c:	08007ef5 	.word	0x08007ef5
 8007a70:	08008705 	.word	0x08008705
 8007a74:	08007f87 	.word	0x08007f87
 8007a78:	08008705 	.word	0x08008705
 8007a7c:	08008705 	.word	0x08008705
 8007a80:	08008705 	.word	0x08008705
 8007a84:	08007fff 	.word	0x08007fff
 8007a88:	08008705 	.word	0x08008705
 8007a8c:	08008705 	.word	0x08008705
 8007a90:	08008705 	.word	0x08008705
 8007a94:	08008705 	.word	0x08008705
 8007a98:	08008705 	.word	0x08008705
 8007a9c:	08008705 	.word	0x08008705
 8007aa0:	08008705 	.word	0x08008705
 8007aa4:	08008083 	.word	0x08008083
 8007aa8:	08008705 	.word	0x08008705
 8007aac:	08008705 	.word	0x08008705
 8007ab0:	08008705 	.word	0x08008705
 8007ab4:	08008705 	.word	0x08008705
 8007ab8:	08008705 	.word	0x08008705
 8007abc:	08008705 	.word	0x08008705
 8007ac0:	08008705 	.word	0x08008705
 8007ac4:	08008705 	.word	0x08008705
 8007ac8:	08008705 	.word	0x08008705
 8007acc:	08008705 	.word	0x08008705
 8007ad0:	08008705 	.word	0x08008705
 8007ad4:	08008705 	.word	0x08008705
 8007ad8:	08008705 	.word	0x08008705
 8007adc:	08008705 	.word	0x08008705
 8007ae0:	08008705 	.word	0x08008705
 8007ae4:	08008105 	.word	0x08008105
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	f000 83e8 	beq.w	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 8007af0:	f000 be08 	b.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007afa:	f001 f857 	bl	8008bac <RCCEx_GetSAIxPeriphCLKFreq>
 8007afe:	61f8      	str	r0, [r7, #28]
        break;
 8007b00:	f000 be03 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b0a:	f001 f84f 	bl	8008bac <RCCEx_GetSAIxPeriphCLKFreq>
 8007b0e:	61f8      	str	r0, [r7, #28]
        break;
 8007b10:	f000 bdfb 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8007b14:	4b9c      	ldr	r3, [pc, #624]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b26:	d015      	beq.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b2e:	f200 8096 	bhi.w	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b38:	d02a      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b40:	f200 808d 	bhi.w	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d07f      	beq.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b50:	d04b      	beq.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8007b52:	e084      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007b54:	4b8c      	ldr	r3, [pc, #560]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	f040 8081 	bne.w	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007b62:	4b89      	ldr	r3, [pc, #548]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8007b6e:	4b86      	ldr	r3, [pc, #536]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	091b      	lsrs	r3, r3, #4
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	e005      	b.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007b7a:	4b83      	ldr	r3, [pc, #524]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b80:	0a1b      	lsrs	r3, r3, #8
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	4a81      	ldr	r2, [pc, #516]	; (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8007b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b8c:	61fb      	str	r3, [r7, #28]
            break;
 8007b8e:	e069      	b.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007b90:	4b7d      	ldr	r3, [pc, #500]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b9c:	d165      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007b9e:	4b7a      	ldr	r3, [pc, #488]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007baa:	d15e      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007bac:	4b76      	ldr	r3, [pc, #472]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	091b      	lsrs	r3, r3, #4
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bbe:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007bc0:	4b71      	ldr	r3, [pc, #452]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	0a1b      	lsrs	r3, r3, #8
 8007bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bca:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	fb03 f202 	mul.w	r2, r3, r2
 8007bd4:	4b6c      	ldr	r3, [pc, #432]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	0d5b      	lsrs	r3, r3, #21
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	3301      	adds	r3, #1
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be6:	61fb      	str	r3, [r7, #28]
            break;
 8007be8:	e03f      	b.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007bea:	4b67      	ldr	r3, [pc, #412]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf6:	d13b      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007bf8:	4b63      	ldr	r3, [pc, #396]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c04:	d134      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8007c06:	f000 ff1d 	bl	8008a44 <RCCEx_PLLSAI1_GetVCOFreq>
 8007c0a:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007c0c:	4b5e      	ldr	r3, [pc, #376]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	3301      	adds	r3, #1
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1e:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007c20:	4b59      	ldr	r3, [pc, #356]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	0a1b      	lsrs	r3, r3, #8
 8007c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2a:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	fb03 f202 	mul.w	r2, r3, r2
 8007c34:	4b54      	ldr	r3, [pc, #336]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	0d5b      	lsrs	r3, r3, #21
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	3301      	adds	r3, #1
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c46:	61fb      	str	r3, [r7, #28]
            break;
 8007c48:	e012      	b.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007c4a:	4b4f      	ldr	r3, [pc, #316]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d10e      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8007c58:	4b4d      	ldr	r3, [pc, #308]	; (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8007c5a:	61fb      	str	r3, [r7, #28]
            break;
 8007c5c:	e00b      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 8007c5e:	bf00      	nop
 8007c60:	f000 bd53 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007c64:	bf00      	nop
 8007c66:	f000 bd50 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007c6a:	bf00      	nop
 8007c6c:	f000 bd4d 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007c70:	bf00      	nop
 8007c72:	f000 bd4a 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007c76:	bf00      	nop
        break;
 8007c78:	f000 bd47 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 8007c7c:	4b42      	ldr	r3, [pc, #264]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c8a:	d13d      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007c8c:	4b3e      	ldr	r3, [pc, #248]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c98:	f040 8536 	bne.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007c9c:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca8:	f040 852e 	bne.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	091b      	lsrs	r3, r3, #4
 8007cb2:	f003 030f 	and.w	r3, r3, #15
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007cc0:	4b31      	ldr	r3, [pc, #196]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	0a1b      	lsrs	r3, r3, #8
 8007cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cca:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007ccc:	4b2e      	ldr	r3, [pc, #184]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	0edb      	lsrs	r3, r3, #27
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007cde:	4b2a      	ldr	r3, [pc, #168]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 8007cea:	2311      	movs	r3, #17
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	e001      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 8007cf0:	2307      	movs	r3, #7
 8007cf2:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	fb03 f202 	mul.w	r2, r3, r2
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d02:	61fb      	str	r3, [r7, #28]
        break;
 8007d04:	f000 bd00 	b.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8007d08:	4b1f      	ldr	r3, [pc, #124]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007d1a:	d016      	beq.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007d22:	f200 809e 	bhi.w	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d2c:	d032      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d34:	f200 8095 	bhi.w	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8087 	beq.w	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d46:	d052      	beq.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8007d48:	e08b      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	f040 8088 	bne.w	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007d58:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8007d64:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	e005      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8007d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d76:	0a1b      	lsrs	r3, r3, #8
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	4a03      	ldr	r2, [pc, #12]	; (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8007d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d82:	61fb      	str	r3, [r7, #28]
              break;
 8007d84:	e070      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007d86:	bf00      	nop
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	08010064 	.word	0x08010064
 8007d90:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007d94:	4baa      	ldr	r3, [pc, #680]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007da0:	d165      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007da2:	4ba7      	ldr	r3, [pc, #668]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dae:	d15e      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007db0:	4ba3      	ldr	r3, [pc, #652]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	091b      	lsrs	r3, r3, #4
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	3301      	adds	r3, #1
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc2:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007dc4:	4b9e      	ldr	r3, [pc, #632]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	0a1b      	lsrs	r3, r3, #8
 8007dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dce:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	fb03 f202 	mul.w	r2, r3, r2
 8007dd8:	4b99      	ldr	r3, [pc, #612]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	0d5b      	lsrs	r3, r3, #21
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	3301      	adds	r3, #1
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dea:	61fb      	str	r3, [r7, #28]
              break;
 8007dec:	e03f      	b.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007dee:	4b94      	ldr	r3, [pc, #592]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dfa:	d13b      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007dfc:	4b90      	ldr	r3, [pc, #576]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e08:	d134      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8007e0a:	f000 fe1b 	bl	8008a44 <RCCEx_PLLSAI1_GetVCOFreq>
 8007e0e:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007e10:	4b8b      	ldr	r3, [pc, #556]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	091b      	lsrs	r3, r3, #4
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007e24:	4b86      	ldr	r3, [pc, #536]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	0a1b      	lsrs	r3, r3, #8
 8007e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2e:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	fb03 f202 	mul.w	r2, r3, r2
 8007e38:	4b81      	ldr	r3, [pc, #516]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	0d5b      	lsrs	r3, r3, #21
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	3301      	adds	r3, #1
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4a:	61fb      	str	r3, [r7, #28]
              break;
 8007e4c:	e012      	b.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007e4e:	4b7c      	ldr	r3, [pc, #496]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d10e      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8007e5c:	4b79      	ldr	r3, [pc, #484]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8007e5e:	61fb      	str	r3, [r7, #28]
              break;
 8007e60:	e00b      	b.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8007e62:	bf00      	nop
 8007e64:	f000 bc50 	b.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8007e68:	bf00      	nop
 8007e6a:	f000 bc4d 	b.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8007e6e:	bf00      	nop
 8007e70:	f000 bc4a 	b.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8007e74:	bf00      	nop
 8007e76:	f000 bc47 	b.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8007e7a:	bf00      	nop
        break;
 8007e7c:	f000 bc44 	b.w	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007e80:	4b6f      	ldr	r3, [pc, #444]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d827      	bhi.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ea9 	.word	0x08007ea9
 8007e9c:	08007eb1 	.word	0x08007eb1
 8007ea0:	08007eb9 	.word	0x08007eb9
 8007ea4:	08007ecd 	.word	0x08007ecd
            frequency = HAL_RCC_GetPCLK2Freq();
 8007ea8:	f7ff f82e 	bl	8006f08 <HAL_RCC_GetPCLK2Freq>
 8007eac:	61f8      	str	r0, [r7, #28]
            break;
 8007eae:	e01f      	b.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8007eb0:	f7fe ff64 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8007eb4:	61f8      	str	r0, [r7, #28]
            break;
 8007eb6:	e01b      	b.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eb8:	4b61      	ldr	r3, [pc, #388]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec4:	d110      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8007ec6:	4b60      	ldr	r3, [pc, #384]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007ec8:	61fb      	str	r3, [r7, #28]
            break;
 8007eca:	e00d      	b.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ecc:	4b5c      	ldr	r3, [pc, #368]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d109      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8007eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ede:	61fb      	str	r3, [r7, #28]
            break;
 8007ee0:	e005      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8007ee2:	bf00      	nop
 8007ee4:	f000 bc11 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007ee8:	bf00      	nop
 8007eea:	f000 bc0e 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007eee:	bf00      	nop
        break;
 8007ef0:	f000 bc0b 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007ef4:	4b52      	ldr	r3, [pc, #328]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efa:	f003 030c 	and.w	r3, r3, #12
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b0c      	cmp	r3, #12
 8007f04:	d839      	bhi.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8007f06:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f41 	.word	0x08007f41
 8007f10:	08007f7b 	.word	0x08007f7b
 8007f14:	08007f7b 	.word	0x08007f7b
 8007f18:	08007f7b 	.word	0x08007f7b
 8007f1c:	08007f49 	.word	0x08007f49
 8007f20:	08007f7b 	.word	0x08007f7b
 8007f24:	08007f7b 	.word	0x08007f7b
 8007f28:	08007f7b 	.word	0x08007f7b
 8007f2c:	08007f51 	.word	0x08007f51
 8007f30:	08007f7b 	.word	0x08007f7b
 8007f34:	08007f7b 	.word	0x08007f7b
 8007f38:	08007f7b 	.word	0x08007f7b
 8007f3c:	08007f65 	.word	0x08007f65
            frequency = HAL_RCC_GetPCLK1Freq();
 8007f40:	f7fe ffce 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 8007f44:	61f8      	str	r0, [r7, #28]
            break;
 8007f46:	e01d      	b.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8007f48:	f7fe ff18 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8007f4c:	61f8      	str	r0, [r7, #28]
            break;
 8007f4e:	e019      	b.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f50:	4b3b      	ldr	r3, [pc, #236]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f5c:	d10f      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8007f5e:	4b3a      	ldr	r3, [pc, #232]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007f60:	61fb      	str	r3, [r7, #28]
            break;
 8007f62:	e00c      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f64:	4b36      	ldr	r3, [pc, #216]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d107      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8007f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f76:	61fb      	str	r3, [r7, #28]
            break;
 8007f78:	e003      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8007f7a:	bf00      	nop
 8007f7c:	e3c5      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007f7e:	bf00      	nop
 8007f80:	e3c3      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007f82:	bf00      	nop
        break;
 8007f84:	e3c1      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007f86:	4b2e      	ldr	r3, [pc, #184]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b30      	cmp	r3, #48	; 0x30
 8007f96:	d021      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b30      	cmp	r3, #48	; 0x30
 8007f9c:	d829      	bhi.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d011      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d823      	bhi.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b10      	cmp	r3, #16
 8007fb4:	d004      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8007fb6:	e01c      	b.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007fb8:	f7fe ff92 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 8007fbc:	61f8      	str	r0, [r7, #28]
            break;
 8007fbe:	e01d      	b.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8007fc0:	f7fe fedc 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8007fc4:	61f8      	str	r0, [r7, #28]
            break;
 8007fc6:	e019      	b.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fc8:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd4:	d10f      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8007fd6:	4b1c      	ldr	r3, [pc, #112]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007fd8:	61fb      	str	r3, [r7, #28]
            break;
 8007fda:	e00c      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fdc:	4b18      	ldr	r3, [pc, #96]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8007fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d107      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	61fb      	str	r3, [r7, #28]
            break;
 8007ff0:	e003      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8007ff2:	bf00      	nop
 8007ff4:	e389      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007ff6:	bf00      	nop
 8007ff8:	e387      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007ffa:	bf00      	nop
        break;
 8007ffc:	e385      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ffe:	4b10      	ldr	r3, [pc, #64]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8008000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008004:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2bc0      	cmp	r3, #192	; 0xc0
 800800e:	d027      	beq.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2bc0      	cmp	r3, #192	; 0xc0
 8008014:	d82f      	bhi.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b80      	cmp	r3, #128	; 0x80
 800801a:	d017      	beq.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d829      	bhi.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b40      	cmp	r3, #64	; 0x40
 800802c:	d004      	beq.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 800802e:	e022      	b.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008030:	f7fe ff56 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 8008034:	61f8      	str	r0, [r7, #28]
            break;
 8008036:	e023      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8008038:	f7fe fea0 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 800803c:	61f8      	str	r0, [r7, #28]
            break;
 800803e:	e01f      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8008040:	40021000 	.word	0x40021000
 8008044:	02dc6c00 	.word	0x02dc6c00
 8008048:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800804c:	4b99      	ldr	r3, [pc, #612]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008058:	d10f      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 800805a:	4b97      	ldr	r3, [pc, #604]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800805c:	61fb      	str	r3, [r7, #28]
            break;
 800805e:	e00c      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008060:	4b94      	ldr	r3, [pc, #592]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b02      	cmp	r3, #2
 800806c:	d107      	bne.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 800806e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008072:	61fb      	str	r3, [r7, #28]
            break;
 8008074:	e003      	b.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8008076:	bf00      	nop
 8008078:	e347      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800807a:	bf00      	nop
 800807c:	e345      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800807e:	bf00      	nop
        break;
 8008080:	e343      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008082:	4b8c      	ldr	r3, [pc, #560]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008094:	d025      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800809c:	d82c      	bhi.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a4:	d013      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ac:	d824      	bhi.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ba:	d004      	beq.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 80080bc:	e01c      	b.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 80080be:	f7fe ff0f 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 80080c2:	61f8      	str	r0, [r7, #28]
            break;
 80080c4:	e01d      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 80080c6:	f7fe fe59 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 80080ca:	61f8      	str	r0, [r7, #28]
            break;
 80080cc:	e019      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080ce:	4b79      	ldr	r3, [pc, #484]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080da:	d10f      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 80080dc:	4b76      	ldr	r3, [pc, #472]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80080de:	61fb      	str	r3, [r7, #28]
            break;
 80080e0:	e00c      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080e2:	4b74      	ldr	r3, [pc, #464]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80080e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d107      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 80080f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f4:	61fb      	str	r3, [r7, #28]
            break;
 80080f6:	e003      	b.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 80080f8:	bf00      	nop
 80080fa:	e306      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80080fc:	bf00      	nop
 80080fe:	e304      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8008100:	bf00      	nop
        break;
 8008102:	e302      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008104:	4b6b      	ldr	r3, [pc, #428]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008116:	d025      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800811e:	d82c      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008126:	d013      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800812e:	d824      	bhi.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d004      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813c:	d004      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 800813e:	e01c      	b.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008140:	f7fe fece 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 8008144:	61f8      	str	r0, [r7, #28]
            break;
 8008146:	e01d      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8008148:	f7fe fe18 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 800814c:	61f8      	str	r0, [r7, #28]
            break;
 800814e:	e019      	b.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008150:	4b58      	ldr	r3, [pc, #352]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815c:	d10f      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 800815e:	4b56      	ldr	r3, [pc, #344]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8008160:	61fb      	str	r3, [r7, #28]
            break;
 8008162:	e00c      	b.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008164:	4b53      	ldr	r3, [pc, #332]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b02      	cmp	r3, #2
 8008170:	d107      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8008172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008176:	61fb      	str	r3, [r7, #28]
            break;
 8008178:	e003      	b.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 800817a:	bf00      	nop
 800817c:	e2c5      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800817e:	bf00      	nop
 8008180:	e2c3      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8008182:	bf00      	nop
        break;
 8008184:	e2c1      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008186:	4b4b      	ldr	r3, [pc, #300]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008198:	d007      	beq.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081a0:	d12b      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 80081a2:	f7fe fdeb 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 80081a6:	61f8      	str	r0, [r7, #28]
            break;
 80081a8:	e02a      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80081aa:	4b42      	ldr	r3, [pc, #264]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d023      	beq.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80081b6:	f000 fc45 	bl	8008a44 <RCCEx_PLLSAI1_GetVCOFreq>
 80081ba:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80081bc:	4b3d      	ldr	r3, [pc, #244]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	091b      	lsrs	r3, r3, #4
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	3301      	adds	r3, #1
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80081d0:	4b38      	ldr	r3, [pc, #224]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081da:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	fb03 f202 	mul.w	r2, r3, r2
 80081e4:	4b33      	ldr	r3, [pc, #204]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	0e5b      	lsrs	r3, r3, #25
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	3301      	adds	r3, #1
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	61fb      	str	r3, [r7, #28]
            break;
 80081f8:	e001      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 80081fa:	bf00      	nop
 80081fc:	e285      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80081fe:	bf00      	nop
        break;
 8008200:	e283      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008202:	4b2c      	ldr	r3, [pc, #176]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008204:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d103      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008214:	f7fe fe78 	bl	8006f08 <HAL_RCC_GetPCLK2Freq>
 8008218:	61f8      	str	r0, [r7, #28]
        break;
 800821a:	e276      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 800821c:	f7fe fdae 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8008220:	61f8      	str	r0, [r7, #28]
        break;
 8008222:	e272      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8008224:	4b23      	ldr	r3, [pc, #140]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800822a:	f003 0318 	and.w	r3, r3, #24
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b10      	cmp	r3, #16
 8008234:	d010      	beq.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b10      	cmp	r3, #16
 800823a:	d834      	bhi.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d024      	beq.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8008248:	e02d      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800824a:	69b9      	ldr	r1, [r7, #24]
 800824c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008250:	f000 fcac 	bl	8008bac <RCCEx_GetSAIxPeriphCLKFreq>
 8008254:	61f8      	str	r0, [r7, #28]
            break;
 8008256:	e02b      	b.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b02      	cmp	r3, #2
 8008262:	d122      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008264:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	091b      	lsrs	r3, r3, #4
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	e005      	b.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800827e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008282:	0a1b      	lsrs	r3, r3, #8
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	4a0c      	ldr	r2, [pc, #48]	; (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 800828a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800828e:	61fb      	str	r3, [r7, #28]
            break;
 8008290:	e00b      	b.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008292:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800829a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829e:	d106      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80082a2:	61fb      	str	r3, [r7, #28]
            break;
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 80082a6:	bf00      	nop
 80082a8:	e22f      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80082aa:	bf00      	nop
 80082ac:	e22d      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80082ae:	bf00      	nop
        break;
 80082b0:	e22b      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 80082b2:	bf00      	nop
 80082b4:	40021000 	.word	0x40021000
 80082b8:	00f42400 	.word	0x00f42400
 80082bc:	08010064 	.word	0x08010064
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80082c0:	4b96      	ldr	r3, [pc, #600]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80082c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d2:	d013      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082da:	d819      	bhi.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082e8:	d004      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 80082ea:	e011      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 80082ec:	f7fe fdf8 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 80082f0:	61f8      	str	r0, [r7, #28]
            break;
 80082f2:	e010      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 80082f4:	f7fe fd42 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 80082f8:	61f8      	str	r0, [r7, #28]
            break;
 80082fa:	e00c      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082fc:	4b87      	ldr	r3, [pc, #540]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008308:	d104      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 800830a:	4b85      	ldr	r3, [pc, #532]	; (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800830c:	61fb      	str	r3, [r7, #28]
            break;
 800830e:	e001      	b.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8008310:	bf00      	nop
 8008312:	e1fa      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8008314:	bf00      	nop
        break;
 8008316:	e1f8      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008318:	4b80      	ldr	r3, [pc, #512]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800831a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800832a:	d013      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008332:	d819      	bhi.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008340:	d004      	beq.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8008342:	e011      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008344:	f7fe fdcc 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 8008348:	61f8      	str	r0, [r7, #28]
            break;
 800834a:	e010      	b.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 800834c:	f7fe fd16 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8008350:	61f8      	str	r0, [r7, #28]
            break;
 8008352:	e00c      	b.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008354:	4b71      	ldr	r3, [pc, #452]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800835c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008360:	d104      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8008362:	4b6f      	ldr	r3, [pc, #444]	; (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8008364:	61fb      	str	r3, [r7, #28]
            break;
 8008366:	e001      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8008368:	bf00      	nop
 800836a:	e1ce      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800836c:	bf00      	nop
        break;
 800836e:	e1cc      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008370:	4b6a      	ldr	r3, [pc, #424]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008382:	d013      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800838a:	d819      	bhi.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d004      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008398:	d004      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 800839a:	e011      	b.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 800839c:	f7fe fda0 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 80083a0:	61f8      	str	r0, [r7, #28]
            break;
 80083a2:	e010      	b.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 80083a4:	f7fe fcea 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 80083a8:	61f8      	str	r0, [r7, #28]
            break;
 80083aa:	e00c      	b.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083ac:	4b5b      	ldr	r3, [pc, #364]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b8:	d104      	bne.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 80083ba:	4b59      	ldr	r3, [pc, #356]	; (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80083bc:	61fb      	str	r3, [r7, #28]
            break;
 80083be:	e001      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 80083c0:	bf00      	nop
 80083c2:	e1a2      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80083c4:	bf00      	nop
        break;
 80083c6:	e1a0      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80083c8:	4b54      	ldr	r3, [pc, #336]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80083ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d011      	beq.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d818      	bhi.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d004      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 80083ec:	e011      	b.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 80083ee:	f7fe fd77 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 80083f2:	61f8      	str	r0, [r7, #28]
            break;
 80083f4:	e010      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 80083f6:	f7fe fcc1 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 80083fa:	61f8      	str	r0, [r7, #28]
            break;
 80083fc:	e00c      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083fe:	4b47      	ldr	r3, [pc, #284]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840a:	d104      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 800840c:	4b44      	ldr	r3, [pc, #272]	; (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800840e:	61fb      	str	r3, [r7, #28]
            break;
 8008410:	e001      	b.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8008412:	bf00      	nop
 8008414:	e179      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8008416:	bf00      	nop
        break;
 8008418:	e177      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800841a:	4b40      	ldr	r3, [pc, #256]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800841c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008420:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800842c:	d02c      	beq.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008434:	d833      	bhi.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800843c:	d01a      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008444:	d82b      	bhi.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008452:	d004      	beq.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 8008454:	e023      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008456:	f7fe fd43 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 800845a:	61f8      	str	r0, [r7, #28]
            break;
 800845c:	e026      	b.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800845e:	4b2f      	ldr	r3, [pc, #188]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b02      	cmp	r3, #2
 800846a:	d11a      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 800846c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008470:	61fb      	str	r3, [r7, #28]
            break;
 8008472:	e016      	b.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008474:	4b29      	ldr	r3, [pc, #164]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800847c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008480:	d111      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 8008482:	4b27      	ldr	r3, [pc, #156]	; (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8008484:	61fb      	str	r3, [r7, #28]
            break;
 8008486:	e00e      	b.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008488:	4b24      	ldr	r3, [pc, #144]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800848a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b02      	cmp	r3, #2
 8008494:	d109      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 8008496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800849a:	61fb      	str	r3, [r7, #28]
            break;
 800849c:	e005      	b.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 800849e:	bf00      	nop
 80084a0:	e133      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80084a2:	bf00      	nop
 80084a4:	e131      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80084a6:	bf00      	nop
 80084a8:	e12f      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80084aa:	bf00      	nop
        break;
 80084ac:	e12d      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80084ae:	4b1b      	ldr	r3, [pc, #108]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084c0:	d030      	beq.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084c8:	d837      	bhi.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084d0:	d01a      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084d8:	d82f      	bhi.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084e6:	d004      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 80084e8:	e027      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80084ea:	f7fe fcf9 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 80084ee:	61f8      	str	r0, [r7, #28]
            break;
 80084f0:	e02a      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80084f2:	4b0a      	ldr	r3, [pc, #40]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80084f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d11e      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8008500:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008504:	61fb      	str	r3, [r7, #28]
            break;
 8008506:	e01a      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008514:	d115      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8008516:	4b02      	ldr	r3, [pc, #8]	; (8008520 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8008518:	61fb      	str	r3, [r7, #28]
            break;
 800851a:	e012      	b.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 800851c:	40021000 	.word	0x40021000
 8008520:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008524:	4b7b      	ldr	r3, [pc, #492]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8008526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d109      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8008532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008536:	61fb      	str	r3, [r7, #28]
            break;
 8008538:	e005      	b.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 800853a:	bf00      	nop
 800853c:	e0e5      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800853e:	bf00      	nop
 8008540:	e0e3      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8008542:	bf00      	nop
 8008544:	e0e1      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8008546:	bf00      	nop
        break;
 8008548:	e0df      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800854a:	4b72      	ldr	r3, [pc, #456]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008550:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800855c:	d02c      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008564:	d833      	bhi.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800856c:	d01a      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008574:	d82b      	bhi.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008582:	d004      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 8008584:	e023      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008586:	f7fe fcab 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 800858a:	61f8      	str	r0, [r7, #28]
            break;
 800858c:	e026      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800858e:	4b61      	ldr	r3, [pc, #388]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8008590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b02      	cmp	r3, #2
 800859a:	d11a      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 800859c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085a0:	61fb      	str	r3, [r7, #28]
            break;
 80085a2:	e016      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085a4:	4b5b      	ldr	r3, [pc, #364]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b0:	d111      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 80085b2:	4b59      	ldr	r3, [pc, #356]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 80085b4:	61fb      	str	r3, [r7, #28]
            break;
 80085b6:	e00e      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085b8:	4b56      	ldr	r3, [pc, #344]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d109      	bne.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 80085c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ca:	61fb      	str	r3, [r7, #28]
            break;
 80085cc:	e005      	b.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 80085ce:	bf00      	nop
 80085d0:	e09b      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80085d2:	bf00      	nop
 80085d4:	e099      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80085d6:	bf00      	nop
 80085d8:	e097      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80085da:	bf00      	nop
        break;
 80085dc:	e095      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80085de:	4b4d      	ldr	r3, [pc, #308]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80085e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f0:	d042      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f8:	d874      	bhi.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008606:	d00a      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8008608:	e06c      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800860a:	4b42      	ldr	r3, [pc, #264]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008616:	d167      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8008618:	4b40      	ldr	r3, [pc, #256]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 800861a:	61fb      	str	r3, [r7, #28]
            break;
 800861c:	e064      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800861e:	4b3d      	ldr	r3, [pc, #244]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800862a:	d15f      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800862c:	4b39      	ldr	r3, [pc, #228]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008638:	d158      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800863a:	4b36      	ldr	r3, [pc, #216]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	091b      	lsrs	r3, r3, #4
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	3301      	adds	r3, #1
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	fbb2 f3f3 	udiv	r3, r2, r3
 800864c:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800864e:	4b31      	ldr	r3, [pc, #196]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	0a1b      	lsrs	r3, r3, #8
 8008654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008658:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	fb03 f202 	mul.w	r2, r3, r2
 8008662:	4b2c      	ldr	r3, [pc, #176]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	0d5b      	lsrs	r3, r3, #21
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	3301      	adds	r3, #1
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	fbb2 f3f3 	udiv	r3, r2, r3
 8008674:	61fb      	str	r3, [r7, #28]
            break;
 8008676:	e039      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8008678:	4b26      	ldr	r3, [pc, #152]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d035      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8008684:	f000 f9de 	bl	8008a44 <RCCEx_PLLSAI1_GetVCOFreq>
 8008688:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	091b      	lsrs	r3, r3, #4
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	3301      	adds	r3, #1
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	fbb2 f3f3 	udiv	r3, r2, r3
 800869c:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800869e:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	0a1b      	lsrs	r3, r3, #8
 80086a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a8:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	0edb      	lsrs	r3, r3, #27
 80086b0:	f003 031f 	and.w	r3, r3, #31
 80086b4:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80086bc:	4b15      	ldr	r3, [pc, #84]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 80086c8:	2311      	movs	r3, #17
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	e001      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 80086ce:	2307      	movs	r3, #7
 80086d0:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	fb03 f202 	mul.w	r2, r3, r2
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e0:	61fb      	str	r3, [r7, #28]
            break;
 80086e2:	e005      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 80086e4:	bf00      	nop
 80086e6:	e010      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80086e8:	bf00      	nop
 80086ea:	e00e      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80086ec:	bf00      	nop
 80086ee:	e00c      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80086f0:	bf00      	nop
        break;
 80086f2:	e00a      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80086f4:	bf00      	nop
 80086f6:	e008      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80086f8:	bf00      	nop
 80086fa:	e006      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80086fc:	bf00      	nop
 80086fe:	e004      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8008700:	bf00      	nop
 8008702:	e002      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8008708:	bf00      	nop
    }
  }

  return (frequency);
 800870a:	69fb      	ldr	r3, [r7, #28]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40021000 	.word	0x40021000
 8008718:	00f42400 	.word	0x00f42400
 800871c:	02dc6c00 	.word	0x02dc6c00

08008720 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d018      	beq.n	8008768 <RCCEx_PLLSAI1_Config+0x48>
 8008736:	2b03      	cmp	r3, #3
 8008738:	d81f      	bhi.n	800877a <RCCEx_PLLSAI1_Config+0x5a>
 800873a:	2b01      	cmp	r3, #1
 800873c:	d002      	beq.n	8008744 <RCCEx_PLLSAI1_Config+0x24>
 800873e:	2b02      	cmp	r3, #2
 8008740:	d009      	beq.n	8008756 <RCCEx_PLLSAI1_Config+0x36>
 8008742:	e01a      	b.n	800877a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008744:	4b65      	ldr	r3, [pc, #404]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d117      	bne.n	8008780 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008754:	e014      	b.n	8008780 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008756:	4b61      	ldr	r3, [pc, #388]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800875e:	2b00      	cmp	r3, #0
 8008760:	d110      	bne.n	8008784 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008766:	e00d      	b.n	8008784 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008768:	4b5c      	ldr	r3, [pc, #368]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008778:	e006      	b.n	8008788 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
      break;
 800877e:	e004      	b.n	800878a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008780:	bf00      	nop
 8008782:	e002      	b.n	800878a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008784:	bf00      	nop
 8008786:	e000      	b.n	800878a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008788:	bf00      	nop
  }

  if (status == HAL_OK)
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 809f 	bne.w	80088d0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008792:	4b52      	ldr	r3, [pc, #328]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a51      	ldr	r2, [pc, #324]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800879c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800879e:	f7f9 f9f3 	bl	8001b88 <HAL_GetTick>
 80087a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087a4:	e00f      	b.n	80087c6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087a6:	f7f9 f9ef 	bl	8001b88 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d908      	bls.n	80087c6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087b4:	4b49      	ldr	r3, [pc, #292]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d009      	beq.n	80087d4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80087c4:	e006      	b.n	80087d4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087c6:	4b45      	ldr	r3, [pc, #276]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e9      	bne.n	80087a6 <RCCEx_PLLSAI1_Config+0x86>
 80087d2:	e000      	b.n	80087d6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80087d4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d179      	bne.n	80088d0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d116      	bne.n	8008810 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087e2:	4b3e      	ldr	r3, [pc, #248]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80087e4:	691a      	ldr	r2, [r3, #16]
 80087e6:	4b3e      	ldr	r3, [pc, #248]	; (80088e0 <RCCEx_PLLSAI1_Config+0x1c0>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6892      	ldr	r2, [r2, #8]
 80087ee:	0211      	lsls	r1, r2, #8
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68d2      	ldr	r2, [r2, #12]
 80087f4:	06d2      	lsls	r2, r2, #27
 80087f6:	4311      	orrs	r1, r2
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6852      	ldr	r2, [r2, #4]
 80087fc:	3a01      	subs	r2, #1
 80087fe:	0112      	lsls	r2, r2, #4
 8008800:	4311      	orrs	r1, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	4934      	ldr	r1, [pc, #208]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800880a:	4313      	orrs	r3, r2
 800880c:	610b      	str	r3, [r1, #16]
 800880e:	e033      	b.n	8008878 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d118      	bne.n	8008848 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008816:	4b31      	ldr	r3, [pc, #196]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	4b32      	ldr	r3, [pc, #200]	; (80088e4 <RCCEx_PLLSAI1_Config+0x1c4>)
 800881c:	4013      	ands	r3, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6892      	ldr	r2, [r2, #8]
 8008822:	0211      	lsls	r1, r2, #8
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6912      	ldr	r2, [r2, #16]
 8008828:	0852      	lsrs	r2, r2, #1
 800882a:	3a01      	subs	r2, #1
 800882c:	0552      	lsls	r2, r2, #21
 800882e:	4311      	orrs	r1, r2
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6852      	ldr	r2, [r2, #4]
 8008834:	3a01      	subs	r2, #1
 8008836:	0112      	lsls	r2, r2, #4
 8008838:	4311      	orrs	r1, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6812      	ldr	r2, [r2, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	4926      	ldr	r1, [pc, #152]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008842:	4313      	orrs	r3, r2
 8008844:	610b      	str	r3, [r1, #16]
 8008846:	e017      	b.n	8008878 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008848:	4b24      	ldr	r3, [pc, #144]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	4b26      	ldr	r3, [pc, #152]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1c8>)
 800884e:	4013      	ands	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6892      	ldr	r2, [r2, #8]
 8008854:	0211      	lsls	r1, r2, #8
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6952      	ldr	r2, [r2, #20]
 800885a:	0852      	lsrs	r2, r2, #1
 800885c:	3a01      	subs	r2, #1
 800885e:	0652      	lsls	r2, r2, #25
 8008860:	4311      	orrs	r1, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6852      	ldr	r2, [r2, #4]
 8008866:	3a01      	subs	r2, #1
 8008868:	0112      	lsls	r2, r2, #4
 800886a:	4311      	orrs	r1, r2
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	491a      	ldr	r1, [pc, #104]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 8008874:	4313      	orrs	r3, r2
 8008876:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008878:	4b18      	ldr	r3, [pc, #96]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a17      	ldr	r2, [pc, #92]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800887e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008882:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008884:	f7f9 f980 	bl	8001b88 <HAL_GetTick>
 8008888:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800888a:	e00f      	b.n	80088ac <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800888c:	f7f9 f97c 	bl	8001b88 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d908      	bls.n	80088ac <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800889a:	4b10      	ldr	r3, [pc, #64]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80088aa:	e006      	b.n	80088ba <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0e9      	beq.n	800888c <RCCEx_PLLSAI1_Config+0x16c>
 80088b8:	e000      	b.n	80088bc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80088ba:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80088c2:	4b06      	ldr	r3, [pc, #24]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	4904      	ldr	r1, [pc, #16]	; (80088dc <RCCEx_PLLSAI1_Config+0x1bc>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	40021000 	.word	0x40021000
 80088e0:	07ff800c 	.word	0x07ff800c
 80088e4:	ff9f800c 	.word	0xff9f800c
 80088e8:	f9ff800c 	.word	0xf9ff800c

080088ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d018      	beq.n	8008934 <RCCEx_PLLSAI2_Config+0x48>
 8008902:	2b03      	cmp	r3, #3
 8008904:	d81f      	bhi.n	8008946 <RCCEx_PLLSAI2_Config+0x5a>
 8008906:	2b01      	cmp	r3, #1
 8008908:	d002      	beq.n	8008910 <RCCEx_PLLSAI2_Config+0x24>
 800890a:	2b02      	cmp	r3, #2
 800890c:	d009      	beq.n	8008922 <RCCEx_PLLSAI2_Config+0x36>
 800890e:	e01a      	b.n	8008946 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008910:	4b4a      	ldr	r3, [pc, #296]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d117      	bne.n	800894c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008920:	e014      	b.n	800894c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008922:	4b46      	ldr	r3, [pc, #280]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800892a:	2b00      	cmp	r3, #0
 800892c:	d110      	bne.n	8008950 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008932:	e00d      	b.n	8008950 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008934:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d109      	bne.n	8008954 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008944:	e006      	b.n	8008954 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
      break;
 800894a:	e004      	b.n	8008956 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800894c:	bf00      	nop
 800894e:	e002      	b.n	8008956 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008950:	bf00      	nop
 8008952:	e000      	b.n	8008956 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008954:	bf00      	nop
  }

  if (status == HAL_OK)
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d169      	bne.n	8008a30 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800895c:	4b37      	ldr	r3, [pc, #220]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a36      	ldr	r2, [pc, #216]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008968:	f7f9 f90e 	bl	8001b88 <HAL_GetTick>
 800896c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800896e:	e00f      	b.n	8008990 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008970:	f7f9 f90a 	bl	8001b88 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d908      	bls.n	8008990 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800897e:	4b2f      	ldr	r3, [pc, #188]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800898e:	e006      	b.n	800899e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008990:	4b2a      	ldr	r3, [pc, #168]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e9      	bne.n	8008970 <RCCEx_PLLSAI2_Config+0x84>
 800899c:	e000      	b.n	80089a0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800899e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d144      	bne.n	8008a30 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d115      	bne.n	80089d8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089ac:	4b23      	ldr	r3, [pc, #140]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 80089ae:	695a      	ldr	r2, [r3, #20]
 80089b0:	4b23      	ldr	r3, [pc, #140]	; (8008a40 <RCCEx_PLLSAI2_Config+0x154>)
 80089b2:	4013      	ands	r3, r2
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6892      	ldr	r2, [r2, #8]
 80089b8:	0211      	lsls	r1, r2, #8
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	68d2      	ldr	r2, [r2, #12]
 80089be:	06d2      	lsls	r2, r2, #27
 80089c0:	4311      	orrs	r1, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	6852      	ldr	r2, [r2, #4]
 80089c6:	3a01      	subs	r2, #1
 80089c8:	0112      	lsls	r2, r2, #4
 80089ca:	4311      	orrs	r1, r2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	491a      	ldr	r1, [pc, #104]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80089d8:	4b18      	ldr	r3, [pc, #96]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a17      	ldr	r2, [pc, #92]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 80089de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e4:	f7f9 f8d0 	bl	8001b88 <HAL_GetTick>
 80089e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089ea:	e00f      	b.n	8008a0c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089ec:	f7f9 f8cc 	bl	8001b88 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d908      	bls.n	8008a0c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80089fa:	4b10      	ldr	r3, [pc, #64]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d109      	bne.n	8008a1a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008a0a:	e006      	b.n	8008a1a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0e9      	beq.n	80089ec <RCCEx_PLLSAI2_Config+0x100>
 8008a18:	e000      	b.n	8008a1c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8008a1a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8008a22:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008a24:	695a      	ldr	r2, [r3, #20]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	4904      	ldr	r1, [pc, #16]	; (8008a3c <RCCEx_PLLSAI2_Config+0x150>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40021000 	.word	0x40021000
 8008a40:	07ff800c 	.word	0x07ff800c

08008a44 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 8008a4e:	4b26      	ldr	r3, [pc, #152]	; (8008ae8 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d02d      	beq.n	8008ab6 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d835      	bhi.n	8008aca <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d002      	beq.n	8008a68 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d01d      	beq.n	8008aa2 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8008a66:	e030      	b.n	8008aca <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008a68:	4b1f      	ldr	r3, [pc, #124]	; (8008ae8 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d12c      	bne.n	8008ace <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008a74:	4b1c      	ldr	r3, [pc, #112]	; (8008ae8 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 8008a80:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	091b      	lsrs	r3, r3, #4
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	e005      	b.n	8008a98 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8008a8c:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8008a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	f003 030f 	and.w	r3, r3, #15
 8008a98:	4a14      	ldr	r2, [pc, #80]	; (8008aec <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8008a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9e:	607b      	str	r3, [r7, #4]
      break;
 8008aa0:	e015      	b.n	8008ace <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008aa2:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aae:	d110      	bne.n	8008ad2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 8008ab2:	607b      	str	r3, [r7, #4]
      break;
 8008ab4:	e00d      	b.n	8008ad2 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac2:	d108      	bne.n	8008ad6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 8008ac6:	607b      	str	r3, [r7, #4]
      break;
 8008ac8:	e005      	b.n	8008ad6 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8008aca:	bf00      	nop
 8008acc:	e004      	b.n	8008ad8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8008ace:	bf00      	nop
 8008ad0:	e002      	b.n	8008ad8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8008ad2:	bf00      	nop
 8008ad4:	e000      	b.n	8008ad8 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8008ad6:	bf00      	nop
  }

  return pllvco;
 8008ad8:	687b      	ldr	r3, [r7, #4]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40021000 	.word	0x40021000
 8008aec:	08010064 	.word	0x08010064
 8008af0:	00f42400 	.word	0x00f42400
 8008af4:	02dc6c00 	.word	0x02dc6c00

08008af8 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8008b02:	4b26      	ldr	r3, [pc, #152]	; (8008b9c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d02d      	beq.n	8008b6a <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d835      	bhi.n	8008b7e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d002      	beq.n	8008b1c <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d01d      	beq.n	8008b56 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8008b1a:	e030      	b.n	8008b7e <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008b1c:	4b1f      	ldr	r3, [pc, #124]	; (8008b9c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d12c      	bne.n	8008b82 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008b28:	4b1c      	ldr	r3, [pc, #112]	; (8008b9c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 8008b34:	4b19      	ldr	r3, [pc, #100]	; (8008b9c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	091b      	lsrs	r3, r3, #4
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	e005      	b.n	8008b4c <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 8008b40:	4b16      	ldr	r3, [pc, #88]	; (8008b9c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8008b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	4a14      	ldr	r2, [pc, #80]	; (8008ba0 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 8008b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b52:	607b      	str	r3, [r7, #4]
      break;
 8008b54:	e015      	b.n	8008b82 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b62:	d110      	bne.n	8008b86 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8008b66:	607b      	str	r3, [r7, #4]
      break;
 8008b68:	e00d      	b.n	8008b86 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b76:	d108      	bne.n	8008b8a <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8008b78:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 8008b7a:	607b      	str	r3, [r7, #4]
      break;
 8008b7c:	e005      	b.n	8008b8a <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 8008b7e:	bf00      	nop
 8008b80:	e004      	b.n	8008b8c <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8008b82:	bf00      	nop
 8008b84:	e002      	b.n	8008b8c <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8008b8a:	bf00      	nop
  }

  return pllvco;
 8008b8c:	687b      	ldr	r3, [r7, #4]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40021000 	.word	0x40021000
 8008ba0:	08010064 	.word	0x08010064
 8008ba4:	00f42400 	.word	0x00f42400
 8008ba8:	02dc6c00 	.word	0x02dc6c00

08008bac <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc0:	d10c      	bne.n	8008bdc <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008bc2:	4b78      	ldr	r3, [pc, #480]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bc8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008bcc:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b60      	cmp	r3, #96	; 0x60
 8008bd2:	d110      	bne.n	8008bf6 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008bd4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	e00c      	b.n	8008bf6 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008bdc:	4b71      	ldr	r3, [pc, #452]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008be2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008be6:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bee:	d102      	bne.n	8008bf6 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008bf0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 80cd 	bne.w	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b40      	cmp	r3, #64	; 0x40
 8008c06:	d003      	beq.n	8008c10 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c0e:	d13b      	bne.n	8008c88 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008c10:	4b64      	ldr	r3, [pc, #400]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c1c:	f040 80bb 	bne.w	8008d96 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8008c20:	4b60      	ldr	r3, [pc, #384]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 80b4 	beq.w	8008d96 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c2e:	4b5d      	ldr	r3, [pc, #372]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	091b      	lsrs	r3, r3, #4
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	3301      	adds	r3, #1
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c40:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c42:	4b58      	ldr	r3, [pc, #352]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c4c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008c4e:	4b55      	ldr	r3, [pc, #340]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	0edb      	lsrs	r3, r3, #27
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008c60:	4b50      	ldr	r3, [pc, #320]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 8008c6c:	2311      	movs	r3, #17
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e001      	b.n	8008c76 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8008c72:	2307      	movs	r3, #7
 8008c74:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	fb03 f202 	mul.w	r2, r3, r2
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c84:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008c86:	e086      	b.n	8008d96 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2b80      	cmp	r3, #128	; 0x80
 8008c8c:	d003      	beq.n	8008c96 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c94:	d109      	bne.n	8008caa <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c96:	4b43      	ldr	r3, [pc, #268]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca2:	d179      	bne.n	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8008ca4:	4b40      	ldr	r3, [pc, #256]	; (8008da8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8008ca6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ca8:	e076      	b.n	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d135      	bne.n	8008d1c <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8008cb0:	4b3c      	ldr	r3, [pc, #240]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d06d      	beq.n	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8008cbc:	f7ff fec2 	bl	8008a44 <RCCEx_PLLSAI1_GetVCOFreq>
 8008cc0:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008cc2:	4b38      	ldr	r3, [pc, #224]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	091b      	lsrs	r3, r3, #4
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	3301      	adds	r3, #1
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008cd6:	4b33      	ldr	r3, [pc, #204]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	0a1b      	lsrs	r3, r3, #8
 8008cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce0:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008ce2:	4b30      	ldr	r3, [pc, #192]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	0edb      	lsrs	r3, r3, #27
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008cf4:	4b2b      	ldr	r3, [pc, #172]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8008d00:	2311      	movs	r3, #17
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	e001      	b.n	8008d0a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8008d06:	2307      	movs	r3, #7
 8008d08:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	fb03 f202 	mul.w	r2, r3, r2
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	e03d      	b.n	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	2b20      	cmp	r3, #32
 8008d20:	d003      	beq.n	8008d2a <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d28:	d136      	bne.n	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8008d2a:	4b1e      	ldr	r3, [pc, #120]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d030      	beq.n	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 8008d36:	f7ff fedf 	bl	8008af8 <RCCEx_PLLSAI2_GetVCOFreq>
 8008d3a:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8008d3c:	4b19      	ldr	r3, [pc, #100]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	091b      	lsrs	r3, r3, #4
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	3301      	adds	r3, #1
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008d50:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	0a1b      	lsrs	r3, r3, #8
 8008d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d5a:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	0edb      	lsrs	r3, r3, #27
 8008d62:	f003 031f 	and.w	r3, r3, #31
 8008d66:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10a      	bne.n	8008d84 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008d6e:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8008d7a:	2311      	movs	r3, #17
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	e001      	b.n	8008d84 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8008d80:	2307      	movs	r3, #7
 8008d82:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	fb03 f202 	mul.w	r2, r3, r2
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e000      	b.n	8008d98 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008d96:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8008d98:	69fb      	ldr	r3, [r7, #28]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40021000 	.word	0x40021000
 8008da8:	00f42400 	.word	0x00f42400

08008dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e095      	b.n	8008eea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d108      	bne.n	8008dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dce:	d009      	beq.n	8008de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	61da      	str	r2, [r3, #28]
 8008dd6:	e005      	b.n	8008de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7f8 fb0e 	bl	8001420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e24:	d902      	bls.n	8008e2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	e002      	b.n	8008e32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e3a:	d007      	beq.n	8008e4c <HAL_SPI_Init+0xa0>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e44:	d002      	beq.n	8008e4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	431a      	orrs	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8e:	ea42 0103 	orr.w	r1, r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	f003 0204 	and.w	r2, r3, #4
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	f003 0310 	and.w	r3, r3, #16
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ec8:	ea42 0103 	orr.w	r1, r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e049      	b.n	8008f98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7f8 fac5 	bl	80014a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4610      	mov	r0, r2
 8008f32:	f000 f949 	bl	80091c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d101      	bne.n	8008fbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e0ff      	b.n	80091be <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b14      	cmp	r3, #20
 8008fca:	f200 80f0 	bhi.w	80091ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008fce:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08009029 	.word	0x08009029
 8008fd8:	080091af 	.word	0x080091af
 8008fdc:	080091af 	.word	0x080091af
 8008fe0:	080091af 	.word	0x080091af
 8008fe4:	08009069 	.word	0x08009069
 8008fe8:	080091af 	.word	0x080091af
 8008fec:	080091af 	.word	0x080091af
 8008ff0:	080091af 	.word	0x080091af
 8008ff4:	080090ab 	.word	0x080090ab
 8008ff8:	080091af 	.word	0x080091af
 8008ffc:	080091af 	.word	0x080091af
 8009000:	080091af 	.word	0x080091af
 8009004:	080090eb 	.word	0x080090eb
 8009008:	080091af 	.word	0x080091af
 800900c:	080091af 	.word	0x080091af
 8009010:	080091af 	.word	0x080091af
 8009014:	0800912d 	.word	0x0800912d
 8009018:	080091af 	.word	0x080091af
 800901c:	080091af 	.word	0x080091af
 8009020:	080091af 	.word	0x080091af
 8009024:	0800916d 	.word	0x0800916d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68b9      	ldr	r1, [r7, #8]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 f964 	bl	80092fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0208 	orr.w	r2, r2, #8
 8009042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699a      	ldr	r2, [r3, #24]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0204 	bic.w	r2, r2, #4
 8009052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6999      	ldr	r1, [r3, #24]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	691a      	ldr	r2, [r3, #16]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	619a      	str	r2, [r3, #24]
      break;
 8009066:	e0a5      	b.n	80091b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f9d4 	bl	800941c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699a      	ldr	r2, [r3, #24]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6999      	ldr	r1, [r3, #24]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	021a      	lsls	r2, r3, #8
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	619a      	str	r2, [r3, #24]
      break;
 80090a8:	e084      	b.n	80091b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fa3d 	bl	8009530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69da      	ldr	r2, [r3, #28]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0208 	orr.w	r2, r2, #8
 80090c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69da      	ldr	r2, [r3, #28]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0204 	bic.w	r2, r2, #4
 80090d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69d9      	ldr	r1, [r3, #28]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	61da      	str	r2, [r3, #28]
      break;
 80090e8:	e064      	b.n	80091b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 faa5 	bl	8009640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	69d9      	ldr	r1, [r3, #28]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	021a      	lsls	r2, r3, #8
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	61da      	str	r2, [r3, #28]
      break;
 800912a:	e043      	b.n	80091b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 faee 	bl	8009714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0208 	orr.w	r2, r2, #8
 8009146:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 0204 	bic.w	r2, r2, #4
 8009156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800916a:	e023      	b.n	80091b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68b9      	ldr	r1, [r7, #8]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fb32 	bl	80097dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	021a      	lsls	r2, r3, #8
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091ac:	e002      	b.n	80091b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	75fb      	strb	r3, [r7, #23]
      break;
 80091b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop

080091c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a40      	ldr	r2, [pc, #256]	; (80092dc <TIM_Base_SetConfig+0x114>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d013      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e6:	d00f      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3d      	ldr	r2, [pc, #244]	; (80092e0 <TIM_Base_SetConfig+0x118>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d00b      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3c      	ldr	r2, [pc, #240]	; (80092e4 <TIM_Base_SetConfig+0x11c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d007      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a3b      	ldr	r2, [pc, #236]	; (80092e8 <TIM_Base_SetConfig+0x120>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d003      	beq.n	8009208 <TIM_Base_SetConfig+0x40>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a3a      	ldr	r2, [pc, #232]	; (80092ec <TIM_Base_SetConfig+0x124>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d108      	bne.n	800921a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a2f      	ldr	r2, [pc, #188]	; (80092dc <TIM_Base_SetConfig+0x114>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d01f      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009228:	d01b      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2c      	ldr	r2, [pc, #176]	; (80092e0 <TIM_Base_SetConfig+0x118>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d017      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2b      	ldr	r2, [pc, #172]	; (80092e4 <TIM_Base_SetConfig+0x11c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d013      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <TIM_Base_SetConfig+0x120>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00f      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a29      	ldr	r2, [pc, #164]	; (80092ec <TIM_Base_SetConfig+0x124>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00b      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a28      	ldr	r2, [pc, #160]	; (80092f0 <TIM_Base_SetConfig+0x128>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d007      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a27      	ldr	r2, [pc, #156]	; (80092f4 <TIM_Base_SetConfig+0x12c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d003      	beq.n	8009262 <TIM_Base_SetConfig+0x9a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a26      	ldr	r2, [pc, #152]	; (80092f8 <TIM_Base_SetConfig+0x130>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d108      	bne.n	8009274 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a10      	ldr	r2, [pc, #64]	; (80092dc <TIM_Base_SetConfig+0x114>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00f      	beq.n	80092c0 <TIM_Base_SetConfig+0xf8>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a12      	ldr	r2, [pc, #72]	; (80092ec <TIM_Base_SetConfig+0x124>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00b      	beq.n	80092c0 <TIM_Base_SetConfig+0xf8>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a11      	ldr	r2, [pc, #68]	; (80092f0 <TIM_Base_SetConfig+0x128>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d007      	beq.n	80092c0 <TIM_Base_SetConfig+0xf8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <TIM_Base_SetConfig+0x12c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d003      	beq.n	80092c0 <TIM_Base_SetConfig+0xf8>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a0f      	ldr	r2, [pc, #60]	; (80092f8 <TIM_Base_SetConfig+0x130>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d103      	bne.n	80092c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	615a      	str	r2, [r3, #20]
}
 80092ce:	bf00      	nop
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40000400 	.word	0x40000400
 80092e4:	40000800 	.word	0x40000800
 80092e8:	40000c00 	.word	0x40000c00
 80092ec:	40013400 	.word	0x40013400
 80092f0:	40014000 	.word	0x40014000
 80092f4:	40014400 	.word	0x40014400
 80092f8:	40014800 	.word	0x40014800

080092fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	f023 0201 	bic.w	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800932a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f023 0302 	bic.w	r3, r3, #2
 8009348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a2c      	ldr	r2, [pc, #176]	; (8009408 <TIM_OC1_SetConfig+0x10c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d00f      	beq.n	800937c <TIM_OC1_SetConfig+0x80>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a2b      	ldr	r2, [pc, #172]	; (800940c <TIM_OC1_SetConfig+0x110>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00b      	beq.n	800937c <TIM_OC1_SetConfig+0x80>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a2a      	ldr	r2, [pc, #168]	; (8009410 <TIM_OC1_SetConfig+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d007      	beq.n	800937c <TIM_OC1_SetConfig+0x80>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a29      	ldr	r2, [pc, #164]	; (8009414 <TIM_OC1_SetConfig+0x118>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d003      	beq.n	800937c <TIM_OC1_SetConfig+0x80>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a28      	ldr	r2, [pc, #160]	; (8009418 <TIM_OC1_SetConfig+0x11c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d10c      	bne.n	8009396 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f023 0308 	bic.w	r3, r3, #8
 8009382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4313      	orrs	r3, r2
 800938c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f023 0304 	bic.w	r3, r3, #4
 8009394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <TIM_OC1_SetConfig+0x10c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00f      	beq.n	80093be <TIM_OC1_SetConfig+0xc2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a1a      	ldr	r2, [pc, #104]	; (800940c <TIM_OC1_SetConfig+0x110>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00b      	beq.n	80093be <TIM_OC1_SetConfig+0xc2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a19      	ldr	r2, [pc, #100]	; (8009410 <TIM_OC1_SetConfig+0x114>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d007      	beq.n	80093be <TIM_OC1_SetConfig+0xc2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a18      	ldr	r2, [pc, #96]	; (8009414 <TIM_OC1_SetConfig+0x118>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d003      	beq.n	80093be <TIM_OC1_SetConfig+0xc2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a17      	ldr	r2, [pc, #92]	; (8009418 <TIM_OC1_SetConfig+0x11c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d111      	bne.n	80093e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	621a      	str	r2, [r3, #32]
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	40012c00 	.word	0x40012c00
 800940c:	40013400 	.word	0x40013400
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400
 8009418:	40014800 	.word	0x40014800

0800941c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	f023 0210 	bic.w	r2, r3, #16
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	4313      	orrs	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f023 0320 	bic.w	r3, r3, #32
 800946a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	4313      	orrs	r3, r2
 8009476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a28      	ldr	r2, [pc, #160]	; (800951c <TIM_OC2_SetConfig+0x100>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d003      	beq.n	8009488 <TIM_OC2_SetConfig+0x6c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a27      	ldr	r2, [pc, #156]	; (8009520 <TIM_OC2_SetConfig+0x104>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d10d      	bne.n	80094a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800948e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a1d      	ldr	r2, [pc, #116]	; (800951c <TIM_OC2_SetConfig+0x100>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00f      	beq.n	80094cc <TIM_OC2_SetConfig+0xb0>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a1c      	ldr	r2, [pc, #112]	; (8009520 <TIM_OC2_SetConfig+0x104>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00b      	beq.n	80094cc <TIM_OC2_SetConfig+0xb0>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1b      	ldr	r2, [pc, #108]	; (8009524 <TIM_OC2_SetConfig+0x108>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d007      	beq.n	80094cc <TIM_OC2_SetConfig+0xb0>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a1a      	ldr	r2, [pc, #104]	; (8009528 <TIM_OC2_SetConfig+0x10c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_OC2_SetConfig+0xb0>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a19      	ldr	r2, [pc, #100]	; (800952c <TIM_OC2_SetConfig+0x110>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d113      	bne.n	80094f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	621a      	str	r2, [r3, #32]
}
 800950e:	bf00      	nop
 8009510:	371c      	adds	r7, #28
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40012c00 	.word	0x40012c00
 8009520:	40013400 	.word	0x40013400
 8009524:	40014000 	.word	0x40014000
 8009528:	40014400 	.word	0x40014400
 800952c:	40014800 	.word	0x40014800

08009530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800955e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800957c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a27      	ldr	r2, [pc, #156]	; (800962c <TIM_OC3_SetConfig+0xfc>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_OC3_SetConfig+0x6a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a26      	ldr	r2, [pc, #152]	; (8009630 <TIM_OC3_SetConfig+0x100>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d10d      	bne.n	80095b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a1c      	ldr	r2, [pc, #112]	; (800962c <TIM_OC3_SetConfig+0xfc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d00f      	beq.n	80095de <TIM_OC3_SetConfig+0xae>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a1b      	ldr	r2, [pc, #108]	; (8009630 <TIM_OC3_SetConfig+0x100>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00b      	beq.n	80095de <TIM_OC3_SetConfig+0xae>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a1a      	ldr	r2, [pc, #104]	; (8009634 <TIM_OC3_SetConfig+0x104>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d007      	beq.n	80095de <TIM_OC3_SetConfig+0xae>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a19      	ldr	r2, [pc, #100]	; (8009638 <TIM_OC3_SetConfig+0x108>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d003      	beq.n	80095de <TIM_OC3_SetConfig+0xae>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a18      	ldr	r2, [pc, #96]	; (800963c <TIM_OC3_SetConfig+0x10c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d113      	bne.n	8009606 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	621a      	str	r2, [r3, #32]
}
 8009620:	bf00      	nop
 8009622:	371c      	adds	r7, #28
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	40012c00 	.word	0x40012c00
 8009630:	40013400 	.word	0x40013400
 8009634:	40014000 	.word	0x40014000
 8009638:	40014400 	.word	0x40014400
 800963c:	40014800 	.word	0x40014800

08009640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800966e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800967a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	021b      	lsls	r3, r3, #8
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	4313      	orrs	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800968e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	031b      	lsls	r3, r3, #12
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a18      	ldr	r2, [pc, #96]	; (8009700 <TIM_OC4_SetConfig+0xc0>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d00f      	beq.n	80096c4 <TIM_OC4_SetConfig+0x84>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a17      	ldr	r2, [pc, #92]	; (8009704 <TIM_OC4_SetConfig+0xc4>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <TIM_OC4_SetConfig+0x84>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a16      	ldr	r2, [pc, #88]	; (8009708 <TIM_OC4_SetConfig+0xc8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_OC4_SetConfig+0x84>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a15      	ldr	r2, [pc, #84]	; (800970c <TIM_OC4_SetConfig+0xcc>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_OC4_SetConfig+0x84>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a14      	ldr	r2, [pc, #80]	; (8009710 <TIM_OC4_SetConfig+0xd0>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d109      	bne.n	80096d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	019b      	lsls	r3, r3, #6
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	621a      	str	r2, [r3, #32]
}
 80096f2:	bf00      	nop
 80096f4:	371c      	adds	r7, #28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40012c00 	.word	0x40012c00
 8009704:	40013400 	.word	0x40013400
 8009708:	40014000 	.word	0x40014000
 800970c:	40014400 	.word	0x40014400
 8009710:	40014800 	.word	0x40014800

08009714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	041b      	lsls	r3, r3, #16
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a17      	ldr	r2, [pc, #92]	; (80097c8 <TIM_OC5_SetConfig+0xb4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_OC5_SetConfig+0x7a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a16      	ldr	r2, [pc, #88]	; (80097cc <TIM_OC5_SetConfig+0xb8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_OC5_SetConfig+0x7a>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a15      	ldr	r2, [pc, #84]	; (80097d0 <TIM_OC5_SetConfig+0xbc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_OC5_SetConfig+0x7a>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <TIM_OC5_SetConfig+0xc0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_OC5_SetConfig+0x7a>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a13      	ldr	r2, [pc, #76]	; (80097d8 <TIM_OC5_SetConfig+0xc4>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d109      	bne.n	80097a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	621a      	str	r2, [r3, #32]
}
 80097bc:	bf00      	nop
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	40012c00 	.word	0x40012c00
 80097cc:	40013400 	.word	0x40013400
 80097d0:	40014000 	.word	0x40014000
 80097d4:	40014400 	.word	0x40014400
 80097d8:	40014800 	.word	0x40014800

080097dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800980a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800980e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4313      	orrs	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	051b      	lsls	r3, r3, #20
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4313      	orrs	r3, r2
 800982e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a18      	ldr	r2, [pc, #96]	; (8009894 <TIM_OC6_SetConfig+0xb8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00f      	beq.n	8009858 <TIM_OC6_SetConfig+0x7c>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a17      	ldr	r2, [pc, #92]	; (8009898 <TIM_OC6_SetConfig+0xbc>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d00b      	beq.n	8009858 <TIM_OC6_SetConfig+0x7c>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a16      	ldr	r2, [pc, #88]	; (800989c <TIM_OC6_SetConfig+0xc0>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d007      	beq.n	8009858 <TIM_OC6_SetConfig+0x7c>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a15      	ldr	r2, [pc, #84]	; (80098a0 <TIM_OC6_SetConfig+0xc4>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d003      	beq.n	8009858 <TIM_OC6_SetConfig+0x7c>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a14      	ldr	r2, [pc, #80]	; (80098a4 <TIM_OC6_SetConfig+0xc8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d109      	bne.n	800986c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800985e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	029b      	lsls	r3, r3, #10
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	4313      	orrs	r3, r2
 800986a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	621a      	str	r2, [r3, #32]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40013400 	.word	0x40013400
 800989c:	40014000 	.word	0x40014000
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800

080098a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d101      	bne.n	80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098bc:	2302      	movs	r3, #2
 80098be:	e068      	b.n	8009992 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a2e      	ldr	r2, [pc, #184]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d004      	beq.n	80098f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a2d      	ldr	r2, [pc, #180]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d108      	bne.n	8009906 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a1e      	ldr	r2, [pc, #120]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01d      	beq.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009932:	d018      	beq.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a1b      	ldr	r2, [pc, #108]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d013      	beq.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a1a      	ldr	r2, [pc, #104]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00e      	beq.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a18      	ldr	r2, [pc, #96]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d009      	beq.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a13      	ldr	r2, [pc, #76]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d004      	beq.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a14      	ldr	r2, [pc, #80]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d10c      	bne.n	8009980 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800996c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	4313      	orrs	r3, r2
 8009976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	40012c00 	.word	0x40012c00
 80099a4:	40013400 	.word	0x40013400
 80099a8:	40000400 	.word	0x40000400
 80099ac:	40000800 	.word	0x40000800
 80099b0:	40000c00 	.word	0x40000c00
 80099b4:	40014000 	.word	0x40014000

080099b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d101      	bne.n	80099d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80099d0:	2302      	movs	r3, #2
 80099d2:	e087      	b.n	8009ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	041b      	lsls	r3, r3, #16
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a27      	ldr	r2, [pc, #156]	; (8009af0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d004      	beq.n	8009a62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a25      	ldr	r2, [pc, #148]	; (8009af4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d106      	bne.n	8009a70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1e      	ldr	r2, [pc, #120]	; (8009af0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d004      	beq.n	8009a84 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a1d      	ldr	r2, [pc, #116]	; (8009af4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d126      	bne.n	8009ad2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8e:	051b      	lsls	r3, r3, #20
 8009a90:	4313      	orrs	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a0e      	ldr	r2, [pc, #56]	; (8009af0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d004      	beq.n	8009ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a0d      	ldr	r2, [pc, #52]	; (8009af4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d106      	bne.n	8009ad2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	40012c00 	.word	0x40012c00
 8009af4:	40013400 	.word	0x40013400

08009af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e042      	b.n	8009b90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d106      	bne.n	8009b22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7f7 fdfd 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2224      	movs	r2, #36	; 0x24
 8009b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0201 	bic.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f884 	bl	8009c48 <UART_SetConfig>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e022      	b.n	8009b90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fb78 	bl	800a248 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0201 	orr.w	r2, r2, #1
 8009b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fbff 	bl	800a38c <UART_CheckIdleState>
 8009b8e:	4603      	mov	r3, r0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e04a      	b.n	8009c40 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d106      	bne.n	8009bc2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7f7 fdad 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2224      	movs	r2, #36	; 0x24
 8009bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f022 0201 	bic.w	r2, r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f834 	bl	8009c48 <UART_SetConfig>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e02a      	b.n	8009c40 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fb28 	bl	800a248 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689a      	ldr	r2, [r3, #8]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009c16:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0208 	orr.w	r2, r2, #8
 8009c26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fba7 	bl	800a38c <UART_CheckIdleState>
 8009c3e:	4603      	mov	r3, r0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c4c:	b08c      	sub	sp, #48	; 0x30
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	431a      	orrs	r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	431a      	orrs	r2, r3
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	4baa      	ldr	r3, [pc, #680]	; (8009f20 <UART_SetConfig+0x2d8>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	6812      	ldr	r2, [r2, #0]
 8009c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a9f      	ldr	r2, [pc, #636]	; (8009f24 <UART_SetConfig+0x2dc>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d004      	beq.n	8009cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009cbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	6812      	ldr	r2, [r2, #0]
 8009cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cc8:	430b      	orrs	r3, r1
 8009cca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd2:	f023 010f 	bic.w	r1, r3, #15
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a90      	ldr	r2, [pc, #576]	; (8009f28 <UART_SetConfig+0x2e0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d125      	bne.n	8009d38 <UART_SetConfig+0xf0>
 8009cec:	4b8f      	ldr	r3, [pc, #572]	; (8009f2c <UART_SetConfig+0x2e4>)
 8009cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d81a      	bhi.n	8009d30 <UART_SetConfig+0xe8>
 8009cfa:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <UART_SetConfig+0xb8>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009d11 	.word	0x08009d11
 8009d04:	08009d21 	.word	0x08009d21
 8009d08:	08009d19 	.word	0x08009d19
 8009d0c:	08009d29 	.word	0x08009d29
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d16:	e116      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d1e:	e112      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009d20:	2304      	movs	r3, #4
 8009d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d26:	e10e      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009d28:	2308      	movs	r3, #8
 8009d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d2e:	e10a      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009d30:	2310      	movs	r3, #16
 8009d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d36:	e106      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a7c      	ldr	r2, [pc, #496]	; (8009f30 <UART_SetConfig+0x2e8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d138      	bne.n	8009db4 <UART_SetConfig+0x16c>
 8009d42:	4b7a      	ldr	r3, [pc, #488]	; (8009f2c <UART_SetConfig+0x2e4>)
 8009d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d48:	f003 030c 	and.w	r3, r3, #12
 8009d4c:	2b0c      	cmp	r3, #12
 8009d4e:	d82d      	bhi.n	8009dac <UART_SetConfig+0x164>
 8009d50:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <UART_SetConfig+0x110>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009d8d 	.word	0x08009d8d
 8009d5c:	08009dad 	.word	0x08009dad
 8009d60:	08009dad 	.word	0x08009dad
 8009d64:	08009dad 	.word	0x08009dad
 8009d68:	08009d9d 	.word	0x08009d9d
 8009d6c:	08009dad 	.word	0x08009dad
 8009d70:	08009dad 	.word	0x08009dad
 8009d74:	08009dad 	.word	0x08009dad
 8009d78:	08009d95 	.word	0x08009d95
 8009d7c:	08009dad 	.word	0x08009dad
 8009d80:	08009dad 	.word	0x08009dad
 8009d84:	08009dad 	.word	0x08009dad
 8009d88:	08009da5 	.word	0x08009da5
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d92:	e0d8      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009d94:	2302      	movs	r3, #2
 8009d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d9a:	e0d4      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009da2:	e0d0      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009daa:	e0cc      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db2:	e0c8      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a5e      	ldr	r2, [pc, #376]	; (8009f34 <UART_SetConfig+0x2ec>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d125      	bne.n	8009e0a <UART_SetConfig+0x1c2>
 8009dbe:	4b5b      	ldr	r3, [pc, #364]	; (8009f2c <UART_SetConfig+0x2e4>)
 8009dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009dc8:	2b30      	cmp	r3, #48	; 0x30
 8009dca:	d016      	beq.n	8009dfa <UART_SetConfig+0x1b2>
 8009dcc:	2b30      	cmp	r3, #48	; 0x30
 8009dce:	d818      	bhi.n	8009e02 <UART_SetConfig+0x1ba>
 8009dd0:	2b20      	cmp	r3, #32
 8009dd2:	d00a      	beq.n	8009dea <UART_SetConfig+0x1a2>
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	d814      	bhi.n	8009e02 <UART_SetConfig+0x1ba>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <UART_SetConfig+0x19a>
 8009ddc:	2b10      	cmp	r3, #16
 8009dde:	d008      	beq.n	8009df2 <UART_SetConfig+0x1aa>
 8009de0:	e00f      	b.n	8009e02 <UART_SetConfig+0x1ba>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009de8:	e0ad      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009dea:	2302      	movs	r3, #2
 8009dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009df0:	e0a9      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009df2:	2304      	movs	r3, #4
 8009df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009df8:	e0a5      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009dfa:	2308      	movs	r3, #8
 8009dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e00:	e0a1      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009e02:	2310      	movs	r3, #16
 8009e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e08:	e09d      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a4a      	ldr	r2, [pc, #296]	; (8009f38 <UART_SetConfig+0x2f0>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d125      	bne.n	8009e60 <UART_SetConfig+0x218>
 8009e14:	4b45      	ldr	r3, [pc, #276]	; (8009f2c <UART_SetConfig+0x2e4>)
 8009e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8009e20:	d016      	beq.n	8009e50 <UART_SetConfig+0x208>
 8009e22:	2bc0      	cmp	r3, #192	; 0xc0
 8009e24:	d818      	bhi.n	8009e58 <UART_SetConfig+0x210>
 8009e26:	2b80      	cmp	r3, #128	; 0x80
 8009e28:	d00a      	beq.n	8009e40 <UART_SetConfig+0x1f8>
 8009e2a:	2b80      	cmp	r3, #128	; 0x80
 8009e2c:	d814      	bhi.n	8009e58 <UART_SetConfig+0x210>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <UART_SetConfig+0x1f0>
 8009e32:	2b40      	cmp	r3, #64	; 0x40
 8009e34:	d008      	beq.n	8009e48 <UART_SetConfig+0x200>
 8009e36:	e00f      	b.n	8009e58 <UART_SetConfig+0x210>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e3e:	e082      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009e40:	2302      	movs	r3, #2
 8009e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e46:	e07e      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e4e:	e07a      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009e50:	2308      	movs	r3, #8
 8009e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e56:	e076      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e5e:	e072      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a35      	ldr	r2, [pc, #212]	; (8009f3c <UART_SetConfig+0x2f4>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d12a      	bne.n	8009ec0 <UART_SetConfig+0x278>
 8009e6a:	4b30      	ldr	r3, [pc, #192]	; (8009f2c <UART_SetConfig+0x2e4>)
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e78:	d01a      	beq.n	8009eb0 <UART_SetConfig+0x268>
 8009e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e7e:	d81b      	bhi.n	8009eb8 <UART_SetConfig+0x270>
 8009e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e84:	d00c      	beq.n	8009ea0 <UART_SetConfig+0x258>
 8009e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e8a:	d815      	bhi.n	8009eb8 <UART_SetConfig+0x270>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <UART_SetConfig+0x250>
 8009e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e94:	d008      	beq.n	8009ea8 <UART_SetConfig+0x260>
 8009e96:	e00f      	b.n	8009eb8 <UART_SetConfig+0x270>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9e:	e052      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ea6:	e04e      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eae:	e04a      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eb6:	e046      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ebe:	e042      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a17      	ldr	r2, [pc, #92]	; (8009f24 <UART_SetConfig+0x2dc>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d13a      	bne.n	8009f40 <UART_SetConfig+0x2f8>
 8009eca:	4b18      	ldr	r3, [pc, #96]	; (8009f2c <UART_SetConfig+0x2e4>)
 8009ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ed8:	d01a      	beq.n	8009f10 <UART_SetConfig+0x2c8>
 8009eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ede:	d81b      	bhi.n	8009f18 <UART_SetConfig+0x2d0>
 8009ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ee4:	d00c      	beq.n	8009f00 <UART_SetConfig+0x2b8>
 8009ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eea:	d815      	bhi.n	8009f18 <UART_SetConfig+0x2d0>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <UART_SetConfig+0x2b0>
 8009ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ef4:	d008      	beq.n	8009f08 <UART_SetConfig+0x2c0>
 8009ef6:	e00f      	b.n	8009f18 <UART_SetConfig+0x2d0>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009efe:	e022      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009f00:	2302      	movs	r3, #2
 8009f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f06:	e01e      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f0e:	e01a      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f16:	e016      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f1e:	e012      	b.n	8009f46 <UART_SetConfig+0x2fe>
 8009f20:	cfff69f3 	.word	0xcfff69f3
 8009f24:	40008000 	.word	0x40008000
 8009f28:	40013800 	.word	0x40013800
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	40004400 	.word	0x40004400
 8009f34:	40004800 	.word	0x40004800
 8009f38:	40004c00 	.word	0x40004c00
 8009f3c:	40005000 	.word	0x40005000
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4ab0      	ldr	r2, [pc, #704]	; (800a20c <UART_SetConfig+0x5c4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	f040 809b 	bne.w	800a088 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d827      	bhi.n	8009faa <UART_SetConfig+0x362>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <UART_SetConfig+0x318>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f85 	.word	0x08009f85
 8009f64:	08009f8d 	.word	0x08009f8d
 8009f68:	08009f95 	.word	0x08009f95
 8009f6c:	08009fab 	.word	0x08009fab
 8009f70:	08009f9b 	.word	0x08009f9b
 8009f74:	08009fab 	.word	0x08009fab
 8009f78:	08009fab 	.word	0x08009fab
 8009f7c:	08009fab 	.word	0x08009fab
 8009f80:	08009fa3 	.word	0x08009fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f84:	f7fc ffac 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 8009f88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f8a:	e014      	b.n	8009fb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f8c:	f7fc ffbc 	bl	8006f08 <HAL_RCC_GetPCLK2Freq>
 8009f90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f92:	e010      	b.n	8009fb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f94:	4b9e      	ldr	r3, [pc, #632]	; (800a210 <UART_SetConfig+0x5c8>)
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f98:	e00d      	b.n	8009fb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f9a:	f7fc feef 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8009f9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fa0:	e009      	b.n	8009fb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fa8:	e005      	b.n	8009fb6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009fb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 8130 	beq.w	800a21e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	4a94      	ldr	r2, [pc, #592]	; (800a214 <UART_SetConfig+0x5cc>)
 8009fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	4413      	add	r3, r2
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d305      	bcc.n	8009fee <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d903      	bls.n	8009ff6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ff4:	e113      	b.n	800a21e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	60bb      	str	r3, [r7, #8]
 8009ffc:	60fa      	str	r2, [r7, #12]
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	4a84      	ldr	r2, [pc, #528]	; (800a214 <UART_SetConfig+0x5cc>)
 800a004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	2200      	movs	r2, #0
 800a00c:	603b      	str	r3, [r7, #0]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a018:	f7f6 f90c 	bl	8000234 <__aeabi_uldivmod>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4610      	mov	r0, r2
 800a022:	4619      	mov	r1, r3
 800a024:	f04f 0200 	mov.w	r2, #0
 800a028:	f04f 0300 	mov.w	r3, #0
 800a02c:	020b      	lsls	r3, r1, #8
 800a02e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a032:	0202      	lsls	r2, r0, #8
 800a034:	6979      	ldr	r1, [r7, #20]
 800a036:	6849      	ldr	r1, [r1, #4]
 800a038:	0849      	lsrs	r1, r1, #1
 800a03a:	2000      	movs	r0, #0
 800a03c:	460c      	mov	r4, r1
 800a03e:	4605      	mov	r5, r0
 800a040:	eb12 0804 	adds.w	r8, r2, r4
 800a044:	eb43 0905 	adc.w	r9, r3, r5
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	469a      	mov	sl, r3
 800a050:	4693      	mov	fp, r2
 800a052:	4652      	mov	r2, sl
 800a054:	465b      	mov	r3, fp
 800a056:	4640      	mov	r0, r8
 800a058:	4649      	mov	r1, r9
 800a05a:	f7f6 f8eb 	bl	8000234 <__aeabi_uldivmod>
 800a05e:	4602      	mov	r2, r0
 800a060:	460b      	mov	r3, r1
 800a062:	4613      	mov	r3, r2
 800a064:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a06c:	d308      	bcc.n	800a080 <UART_SetConfig+0x438>
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a074:	d204      	bcs.n	800a080 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6a3a      	ldr	r2, [r7, #32]
 800a07c:	60da      	str	r2, [r3, #12]
 800a07e:	e0ce      	b.n	800a21e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a086:	e0ca      	b.n	800a21e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a090:	d166      	bne.n	800a160 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800a092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a096:	2b08      	cmp	r3, #8
 800a098:	d827      	bhi.n	800a0ea <UART_SetConfig+0x4a2>
 800a09a:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <UART_SetConfig+0x458>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0cd 	.word	0x0800a0cd
 800a0a8:	0800a0d5 	.word	0x0800a0d5
 800a0ac:	0800a0eb 	.word	0x0800a0eb
 800a0b0:	0800a0db 	.word	0x0800a0db
 800a0b4:	0800a0eb 	.word	0x0800a0eb
 800a0b8:	0800a0eb 	.word	0x0800a0eb
 800a0bc:	0800a0eb 	.word	0x0800a0eb
 800a0c0:	0800a0e3 	.word	0x0800a0e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0c4:	f7fc ff0c 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 800a0c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0ca:	e014      	b.n	800a0f6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0cc:	f7fc ff1c 	bl	8006f08 <HAL_RCC_GetPCLK2Freq>
 800a0d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0d2:	e010      	b.n	800a0f6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d4:	4b4e      	ldr	r3, [pc, #312]	; (800a210 <UART_SetConfig+0x5c8>)
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0d8:	e00d      	b.n	800a0f6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0da:	f7fc fe4f 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 800a0de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0e0:	e009      	b.n	800a0f6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0e8:	e005      	b.n	800a0f6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8090 	beq.w	800a21e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	4a44      	ldr	r2, [pc, #272]	; (800a214 <UART_SetConfig+0x5cc>)
 800a104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a108:	461a      	mov	r2, r3
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a110:	005a      	lsls	r2, r3, #1
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	085b      	lsrs	r3, r3, #1
 800a118:	441a      	add	r2, r3
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a122:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	2b0f      	cmp	r3, #15
 800a128:	d916      	bls.n	800a158 <UART_SetConfig+0x510>
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a130:	d212      	bcs.n	800a158 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f023 030f 	bic.w	r3, r3, #15
 800a13a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	b29b      	uxth	r3, r3
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	b29a      	uxth	r2, r3
 800a148:	8bfb      	ldrh	r3, [r7, #30]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	8bfa      	ldrh	r2, [r7, #30]
 800a154:	60da      	str	r2, [r3, #12]
 800a156:	e062      	b.n	800a21e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a15e:	e05e      	b.n	800a21e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a164:	2b08      	cmp	r3, #8
 800a166:	d828      	bhi.n	800a1ba <UART_SetConfig+0x572>
 800a168:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <UART_SetConfig+0x528>)
 800a16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16e:	bf00      	nop
 800a170:	0800a195 	.word	0x0800a195
 800a174:	0800a19d 	.word	0x0800a19d
 800a178:	0800a1a5 	.word	0x0800a1a5
 800a17c:	0800a1bb 	.word	0x0800a1bb
 800a180:	0800a1ab 	.word	0x0800a1ab
 800a184:	0800a1bb 	.word	0x0800a1bb
 800a188:	0800a1bb 	.word	0x0800a1bb
 800a18c:	0800a1bb 	.word	0x0800a1bb
 800a190:	0800a1b3 	.word	0x0800a1b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a194:	f7fc fea4 	bl	8006ee0 <HAL_RCC_GetPCLK1Freq>
 800a198:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a19a:	e014      	b.n	800a1c6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a19c:	f7fc feb4 	bl	8006f08 <HAL_RCC_GetPCLK2Freq>
 800a1a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1a2:	e010      	b.n	800a1c6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1a4:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <UART_SetConfig+0x5c8>)
 800a1a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1a8:	e00d      	b.n	800a1c6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1aa:	f7fc fde7 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 800a1ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1b0:	e009      	b.n	800a1c6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1b8:	e005      	b.n	800a1c6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a1c4:	bf00      	nop
    }

    if (pclk != 0U)
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d028      	beq.n	800a21e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	4a10      	ldr	r2, [pc, #64]	; (800a214 <UART_SetConfig+0x5cc>)
 800a1d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	085b      	lsrs	r3, r3, #1
 800a1e4:	441a      	add	r2, r3
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	2b0f      	cmp	r3, #15
 800a1f4:	d910      	bls.n	800a218 <UART_SetConfig+0x5d0>
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1fc:	d20c      	bcs.n	800a218 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	b29a      	uxth	r2, r3
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60da      	str	r2, [r3, #12]
 800a208:	e009      	b.n	800a21e <UART_SetConfig+0x5d6>
 800a20a:	bf00      	nop
 800a20c:	40008000 	.word	0x40008000
 800a210:	00f42400 	.word	0x00f42400
 800a214:	080100a4 	.word	0x080100a4
      }
      else
      {
        ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2201      	movs	r2, #1
 800a222:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2201      	movs	r2, #1
 800a22a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2200      	movs	r2, #0
 800a232:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2200      	movs	r2, #0
 800a238:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a23a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3730      	adds	r7, #48	; 0x30
 800a242:	46bd      	mov	sp, r7
 800a244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a254:	f003 0301 	and.w	r3, r3, #1
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00a      	beq.n	800a2b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ba:	f003 0308 	and.w	r3, r3, #8
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00a      	beq.n	800a2fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fe:	f003 0320 	and.w	r3, r3, #32
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00a      	beq.n	800a31c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01a      	beq.n	800a35e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a346:	d10a      	bne.n	800a35e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	605a      	str	r2, [r3, #4]
  }
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b098      	sub	sp, #96	; 0x60
 800a390:	af02      	add	r7, sp, #8
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a39c:	f7f7 fbf4 	bl	8001b88 <HAL_GetTick>
 800a3a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0308 	and.w	r3, r3, #8
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d12f      	bne.n	800a410 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f88e 	bl	800a4e0 <UART_WaitOnFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d022      	beq.n	800a410 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	e853 3f00 	ldrex	r3, [r3]
 800a3d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3de:	653b      	str	r3, [r7, #80]	; 0x50
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3f0:	e841 2300 	strex	r3, r2, [r1]
 800a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e6      	bne.n	800a3ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e063      	b.n	800a4d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0304 	and.w	r3, r3, #4
 800a41a:	2b04      	cmp	r3, #4
 800a41c:	d149      	bne.n	800a4b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a41e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a426:	2200      	movs	r2, #0
 800a428:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f857 	bl	800a4e0 <UART_WaitOnFlagUntilTimeout>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d03c      	beq.n	800a4b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	e853 3f00 	ldrex	r3, [r3]
 800a444:	623b      	str	r3, [r7, #32]
   return(result);
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a44c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a456:	633b      	str	r3, [r7, #48]	; 0x30
 800a458:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e6      	bne.n	800a438 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3308      	adds	r3, #8
 800a470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	e853 3f00 	ldrex	r3, [r3]
 800a478:	60fb      	str	r3, [r7, #12]
   return(result);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f023 0301 	bic.w	r3, r3, #1
 800a480:	64bb      	str	r3, [r7, #72]	; 0x48
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3308      	adds	r3, #8
 800a488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a48a:	61fa      	str	r2, [r7, #28]
 800a48c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48e:	69b9      	ldr	r1, [r7, #24]
 800a490:	69fa      	ldr	r2, [r7, #28]
 800a492:	e841 2300 	strex	r3, r2, [r1]
 800a496:	617b      	str	r3, [r7, #20]
   return(result);
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1e5      	bne.n	800a46a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e012      	b.n	800a4d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3758      	adds	r7, #88	; 0x58
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4f0:	e049      	b.n	800a586 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f8:	d045      	beq.n	800a586 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4fa:	f7f7 fb45 	bl	8001b88 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	69ba      	ldr	r2, [r7, #24]
 800a506:	429a      	cmp	r2, r3
 800a508:	d302      	bcc.n	800a510 <UART_WaitOnFlagUntilTimeout+0x30>
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e048      	b.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d031      	beq.n	800a586 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	f003 0308 	and.w	r3, r3, #8
 800a52c:	2b08      	cmp	r3, #8
 800a52e:	d110      	bne.n	800a552 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2208      	movs	r2, #8
 800a536:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f838 	bl	800a5ae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2208      	movs	r2, #8
 800a542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e029      	b.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a55c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a560:	d111      	bne.n	800a586 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a56a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 f81e 	bl	800a5ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2220      	movs	r2, #32
 800a576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e00f      	b.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	4013      	ands	r3, r2
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	429a      	cmp	r2, r3
 800a594:	bf0c      	ite	eq
 800a596:	2301      	moveq	r3, #1
 800a598:	2300      	movne	r3, #0
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	461a      	mov	r2, r3
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d0a6      	beq.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b095      	sub	sp, #84	; 0x54
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a5d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e6      	bne.n	800a5b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5fe:	f023 0301 	bic.w	r3, r3, #1
 800a602:	64bb      	str	r3, [r7, #72]	; 0x48
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3308      	adds	r3, #8
 800a60a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a60c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a60e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a614:	e841 2300 	strex	r3, r2, [r1]
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1e3      	bne.n	800a5e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a624:	2b01      	cmp	r3, #1
 800a626:	d118      	bne.n	800a65a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	60bb      	str	r3, [r7, #8]
   return(result);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f023 0310 	bic.w	r3, r3, #16
 800a63c:	647b      	str	r3, [r7, #68]	; 0x44
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	6979      	ldr	r1, [r7, #20]
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	613b      	str	r3, [r7, #16]
   return(result);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e6      	bne.n	800a628 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a66e:	bf00      	nop
 800a670:	3754      	adds	r7, #84	; 0x54
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_UARTEx_DisableFifoMode+0x16>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e027      	b.n	800a6e0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2224      	movs	r2, #36	; 0x24
 800a69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f022 0201 	bic.w	r2, r2, #1
 800a6b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a700:	2302      	movs	r3, #2
 800a702:	e02d      	b.n	800a760 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2224      	movs	r2, #36	; 0x24
 800a710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 0201 	bic.w	r2, r2, #1
 800a72a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f84f 	bl	800a7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d101      	bne.n	800a780 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a77c:	2302      	movs	r3, #2
 800a77e:	e02d      	b.n	800a7dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2224      	movs	r2, #36	; 0x24
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0201 	bic.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f811 	bl	800a7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d108      	bne.n	800a806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a804:	e031      	b.n	800a86a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a806:	2308      	movs	r3, #8
 800a808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a80a:	2308      	movs	r3, #8
 800a80c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	0e5b      	lsrs	r3, r3, #25
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	0f5b      	lsrs	r3, r3, #29
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	7b3a      	ldrb	r2, [r7, #12]
 800a832:	4911      	ldr	r1, [pc, #68]	; (800a878 <UARTEx_SetNbDataToProcess+0x94>)
 800a834:	5c8a      	ldrb	r2, [r1, r2]
 800a836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a83a:	7b3a      	ldrb	r2, [r7, #12]
 800a83c:	490f      	ldr	r1, [pc, #60]	; (800a87c <UARTEx_SetNbDataToProcess+0x98>)
 800a83e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a840:	fb93 f3f2 	sdiv	r3, r3, r2
 800a844:	b29a      	uxth	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	7b7a      	ldrb	r2, [r7, #13]
 800a850:	4909      	ldr	r1, [pc, #36]	; (800a878 <UARTEx_SetNbDataToProcess+0x94>)
 800a852:	5c8a      	ldrb	r2, [r1, r2]
 800a854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a858:	7b7a      	ldrb	r2, [r7, #13]
 800a85a:	4908      	ldr	r1, [pc, #32]	; (800a87c <UARTEx_SetNbDataToProcess+0x98>)
 800a85c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a85e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a862:	b29a      	uxth	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a86a:	bf00      	nop
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	080100bc 	.word	0x080100bc
 800a87c:	080100c4 	.word	0x080100c4

0800a880 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a880:	b084      	sub	sp, #16
 800a882:	b480      	push	{r7}
 800a884:	b085      	sub	sp, #20
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	f107 001c 	add.w	r0, r7, #28
 800a88e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a896:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a898:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a89a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a89e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a8a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a8a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <SDMMC_Init+0x50>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	b004      	add	sp, #16
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	ffc02c00 	.word	0xffc02c00

0800a8d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f043 0203 	orr.w	r2, r3, #3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0303 	and.w	r3, r3, #3
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a94a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a950:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a956:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68da      	ldr	r2, [r3, #12]
 800a962:	4b06      	ldr	r3, [pc, #24]	; (800a97c <SDMMC_SendCommand+0x50>)
 800a964:	4013      	ands	r3, r2
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	431a      	orrs	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	fffee0c0 	.word	0xfffee0c0

0800a980 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	b2db      	uxtb	r3, r3
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3314      	adds	r3, #20
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	685a      	ldr	r2, [r3, #4]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a9e6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a9ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a9f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	431a      	orrs	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0

}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b088      	sub	sp, #32
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa26:	2310      	movs	r3, #16
 800aa28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa30:	2300      	movs	r3, #0
 800aa32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa3a:	f107 0308 	add.w	r3, r7, #8
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff ff73 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa46:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa4a:	2110      	movs	r1, #16
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f935 	bl	800acbc <SDMMC_GetCmdResp1>
 800aa52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa54:	69fb      	ldr	r3, [r7, #28]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b088      	sub	sp, #32
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aa6c:	2307      	movs	r3, #7
 800aa6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa80:	f107 0308 	add.w	r3, r7, #8
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ff50 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aa8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa90:	2107      	movs	r1, #7
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f912 	bl	800acbc <SDMMC_GetCmdResp1>
 800aa98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aab4:	2300      	movs	r3, #0
 800aab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aab8:	2300      	movs	r3, #0
 800aaba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aabc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aac2:	f107 0308 	add.w	r3, r7, #8
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff ff2f 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fa70 	bl	800afb4 <SDMMC_GetCmdError>
 800aad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad6:	69fb      	ldr	r3, [r7, #28]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3720      	adds	r7, #32
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aaec:	2302      	movs	r3, #2
 800aaee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aaf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aaf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aafa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aafe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff ff10 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f9c7 	bl	800aea0 <SDMMC_GetCmdResp2>
 800ab12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab14:	69fb      	ldr	r3, [r7, #28]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3720      	adds	r7, #32
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b088      	sub	sp, #32
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ab2c:	2309      	movs	r3, #9
 800ab2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab30:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab36:	2300      	movs	r3, #0
 800ab38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab40:	f107 0308 	add.w	r3, r7, #8
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff fef0 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f9a7 	bl	800aea0 <SDMMC_GetCmdResp2>
 800ab52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab54:	69fb      	ldr	r3, [r7, #28]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3720      	adds	r7, #32
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b088      	sub	sp, #32
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800ab6a:	887b      	ldrh	r3, [r7, #2]
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ab70:	2303      	movs	r3, #3
 800ab72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fece 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800ab90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab94:	2103      	movs	r1, #3
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f890 	bl	800acbc <SDMMC_GetCmdResp1>
 800ab9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab9e:	69fb      	ldr	r3, [r7, #28]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3720      	adds	r7, #32
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800abb6:	230d      	movs	r3, #13
 800abb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abc0:	2300      	movs	r3, #0
 800abc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abca:	f107 0308 	add.w	r3, r7, #8
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff feab 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800abd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800abda:	210d      	movs	r1, #13
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f86d 	bl	800acbc <SDMMC_GetCmdResp1>
 800abe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abe4:	69fb      	ldr	r3, [r7, #28]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3720      	adds	r7, #32
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b088      	sub	sp, #32
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800abfc:	2301      	movs	r3, #1
 800abfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac10:	f107 0308 	add.w	r3, r7, #8
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff fe88 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f989 	bl	800af34 <SDMMC_GetCmdResp3>
 800ac22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac24:	69fb      	ldr	r3, [r7, #28]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3720      	adds	r7, #32
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b088      	sub	sp, #32
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800ac3c:	2306      	movs	r3, #6
 800ac3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac46:	2300      	movs	r3, #0
 800ac48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac50:	f107 0308 	add.w	r3, r7, #8
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff fe68 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800ac5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac60:	2106      	movs	r1, #6
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f82a 	bl	800acbc <SDMMC_GetCmdResp1>
 800ac68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac6a:	69fb      	ldr	r3, [r7, #28]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3720      	adds	r7, #32
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac82:	2308      	movs	r3, #8
 800ac84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac96:	f107 0308 	add.w	r3, r7, #8
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff fe45 	bl	800a92c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800aca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca6:	2108      	movs	r1, #8
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f807 	bl	800acbc <SDMMC_GetCmdResp1>
 800acae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acb0:	69fb      	ldr	r3, [r7, #28]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3720      	adds	r7, #32
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
	...

0800acbc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b088      	sub	sp, #32
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	460b      	mov	r3, r1
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800acca:	4b70      	ldr	r3, [pc, #448]	; (800ae8c <SDMMC_GetCmdResp1+0x1d0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a70      	ldr	r2, [pc, #448]	; (800ae90 <SDMMC_GetCmdResp1+0x1d4>)
 800acd0:	fba2 2303 	umull	r2, r3, r2, r3
 800acd4:	0a5a      	lsrs	r2, r3, #9
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	fb02 f303 	mul.w	r3, r2, r3
 800acdc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	1e5a      	subs	r2, r3, #1
 800ace2:	61fa      	str	r2, [r7, #28]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ace8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acec:	e0c9      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	4b67      	ldr	r3, [pc, #412]	; (800ae94 <SDMMC_GetCmdResp1+0x1d8>)
 800acf8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0ef      	beq.n	800acde <SDMMC_GetCmdResp1+0x22>
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1ea      	bne.n	800acde <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2204      	movs	r2, #4
 800ad18:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad1a:	2304      	movs	r3, #4
 800ad1c:	e0b1      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0a6      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4a58      	ldr	r2, [pc, #352]	; (800ae98 <SDMMC_GetCmdResp1+0x1dc>)
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff fe20 	bl	800a980 <SDMMC_GetCommandResponse>
 800ad40:	4603      	mov	r3, r0
 800ad42:	461a      	mov	r2, r3
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d001      	beq.n	800ad4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e099      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad4e:	2100      	movs	r1, #0
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff fe22 	bl	800a99a <SDMMC_GetResponse>
 800ad56:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	4b50      	ldr	r3, [pc, #320]	; (800ae9c <SDMMC_GetCmdResp1+0x1e0>)
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	e08d      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da02      	bge.n	800ad72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ad6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad70:	e087      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ad7c:	2340      	movs	r3, #64	; 0x40
 800ad7e:	e080      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ad8a:	2380      	movs	r3, #128	; 0x80
 800ad8c:	e079      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ad98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad9c:	e071      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ada8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adac:	e069      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800adb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adbc:	e061      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800adc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adcc:	e059      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800add8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800addc:	e051      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ade8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800adec:	e049      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800adf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800adfc:	e041      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ae08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae0c:	e039      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae1c:	e031      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae2c:	e029      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae3c:	e021      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae4c:	e019      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ae5c:	e011      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ae68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae6c:	e009      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f003 0308 	and.w	r3, r3, #8
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ae78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ae7c:	e001      	b.n	800ae82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3720      	adds	r7, #32
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000000 	.word	0x20000000
 800ae90:	10624dd3 	.word	0x10624dd3
 800ae94:	00200045 	.word	0x00200045
 800ae98:	002000c5 	.word	0x002000c5
 800ae9c:	fdffe008 	.word	0xfdffe008

0800aea0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aea8:	4b1f      	ldr	r3, [pc, #124]	; (800af28 <SDMMC_GetCmdResp2+0x88>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a1f      	ldr	r2, [pc, #124]	; (800af2c <SDMMC_GetCmdResp2+0x8c>)
 800aeae:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb2:	0a5b      	lsrs	r3, r3, #9
 800aeb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb8:	fb02 f303 	mul.w	r3, r2, r3
 800aebc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	1e5a      	subs	r2, r3, #1
 800aec2:	60fa      	str	r2, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aec8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aecc:	e026      	b.n	800af1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0ef      	beq.n	800aebe <SDMMC_GetCmdResp2+0x1e>
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1ea      	bne.n	800aebe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d004      	beq.n	800aefe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2204      	movs	r2, #4
 800aef8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aefa:	2304      	movs	r3, #4
 800aefc:	e00e      	b.n	800af1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af10:	2301      	movs	r3, #1
 800af12:	e003      	b.n	800af1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a06      	ldr	r2, [pc, #24]	; (800af30 <SDMMC_GetCmdResp2+0x90>)
 800af18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr
 800af28:	20000000 	.word	0x20000000
 800af2c:	10624dd3 	.word	0x10624dd3
 800af30:	002000c5 	.word	0x002000c5

0800af34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af3c:	4b1a      	ldr	r3, [pc, #104]	; (800afa8 <SDMMC_GetCmdResp3+0x74>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a1a      	ldr	r2, [pc, #104]	; (800afac <SDMMC_GetCmdResp3+0x78>)
 800af42:	fba2 2303 	umull	r2, r3, r2, r3
 800af46:	0a5b      	lsrs	r3, r3, #9
 800af48:	f241 3288 	movw	r2, #5000	; 0x1388
 800af4c:	fb02 f303 	mul.w	r3, r2, r3
 800af50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	1e5a      	subs	r2, r3, #1
 800af56:	60fa      	str	r2, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d102      	bne.n	800af62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af60:	e01b      	b.n	800af9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af66:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0ef      	beq.n	800af52 <SDMMC_GetCmdResp3+0x1e>
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1ea      	bne.n	800af52 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	2b00      	cmp	r3, #0
 800af86:	d004      	beq.n	800af92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2204      	movs	r2, #4
 800af8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af8e:	2304      	movs	r3, #4
 800af90:	e003      	b.n	800af9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a06      	ldr	r2, [pc, #24]	; (800afb0 <SDMMC_GetCmdResp3+0x7c>)
 800af96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000000 	.word	0x20000000
 800afac:	10624dd3 	.word	0x10624dd3
 800afb0:	002000c5 	.word	0x002000c5

0800afb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800afbc:	4b11      	ldr	r3, [pc, #68]	; (800b004 <SDMMC_GetCmdError+0x50>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a11      	ldr	r2, [pc, #68]	; (800b008 <SDMMC_GetCmdError+0x54>)
 800afc2:	fba2 2303 	umull	r2, r3, r2, r3
 800afc6:	0a5b      	lsrs	r3, r3, #9
 800afc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afcc:	fb02 f303 	mul.w	r3, r2, r3
 800afd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	1e5a      	subs	r2, r3, #1
 800afd6:	60fa      	str	r2, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afe0:	e009      	b.n	800aff6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0f1      	beq.n	800afd2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a06      	ldr	r2, [pc, #24]	; (800b00c <SDMMC_GetCmdError+0x58>)
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000000 	.word	0x20000000
 800b008:	10624dd3 	.word	0x10624dd3
 800b00c:	002000c5 	.word	0x002000c5

0800b010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b020:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b024:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b03e:	b480      	push	{r7}
 800b040:	b085      	sub	sp, #20
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b046:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b04a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b052:	b29a      	uxth	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	b29b      	uxth	r3, r3
 800b058:	43db      	mvns	r3, r3
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	4013      	ands	r3, r2
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b074:	b084      	sub	sp, #16
 800b076:	b480      	push	{r7}
 800b078:	b083      	sub	sp, #12
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	f107 0014 	add.w	r0, r7, #20
 800b082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	b004      	add	sp, #16
 800b0b4:	4770      	bx	lr
	...

0800b0b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b09d      	sub	sp, #116	; 0x74
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	78db      	ldrb	r3, [r3, #3]
 800b0e6:	2b03      	cmp	r3, #3
 800b0e8:	d81f      	bhi.n	800b12a <USB_ActivateEndpoint+0x72>
 800b0ea:	a201      	add	r2, pc, #4	; (adr r2, 800b0f0 <USB_ActivateEndpoint+0x38>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b101 	.word	0x0800b101
 800b0f4:	0800b11d 	.word	0x0800b11d
 800b0f8:	0800b133 	.word	0x0800b133
 800b0fc:	0800b10f 	.word	0x0800b10f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b100:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b108:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b10c:	e012      	b.n	800b134 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b10e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b112:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b116:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b11a:	e00b      	b.n	800b134 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b11c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b120:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b124:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b128:	e004      	b.n	800b134 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b130:	e000      	b.n	800b134 <USB_ActivateEndpoint+0x7c>
      break;
 800b132:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	441a      	add	r2, r3
 800b13e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b152:	b29b      	uxth	r3, r3
 800b154:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	b21b      	sxth	r3, r3
 800b166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16e:	b21a      	sxth	r2, r3
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b21b      	sxth	r3, r3
 800b176:	4313      	orrs	r3, r2
 800b178:	b21b      	sxth	r3, r3
 800b17a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	441a      	add	r2, r3
 800b188:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b18c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	7b1b      	ldrb	r3, [r3, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f040 8178 	bne.w	800b49a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	785b      	ldrb	r3, [r3, #1]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 8084 	beq.w	800b2bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	61bb      	str	r3, [r7, #24]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	61bb      	str	r3, [r7, #24]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	00da      	lsls	r2, r3, #3
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	88db      	ldrh	r3, [r3, #6]
 800b1dc:	085b      	lsrs	r3, r3, #1
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	827b      	strh	r3, [r7, #18]
 800b1f6:	8a7b      	ldrh	r3, [r7, #18]
 800b1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d01b      	beq.n	800b238 <USB_ActivateEndpoint+0x180>
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b216:	823b      	strh	r3, [r7, #16]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	441a      	add	r2, r3
 800b222:	8a3b      	ldrh	r3, [r7, #16]
 800b224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b22c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b234:	b29b      	uxth	r3, r3
 800b236:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	78db      	ldrb	r3, [r3, #3]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d020      	beq.n	800b282 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b256:	81bb      	strh	r3, [r7, #12]
 800b258:	89bb      	ldrh	r3, [r7, #12]
 800b25a:	f083 0320 	eor.w	r3, r3, #32
 800b25e:	81bb      	strh	r3, [r7, #12]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	441a      	add	r2, r3
 800b26a:	89bb      	ldrh	r3, [r7, #12]
 800b26c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	8013      	strh	r3, [r2, #0]
 800b280:	e2d5      	b.n	800b82e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b298:	81fb      	strh	r3, [r7, #14]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	441a      	add	r2, r3
 800b2a4:	89fb      	ldrh	r3, [r7, #14]
 800b2a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	8013      	strh	r3, [r2, #0]
 800b2ba:	e2b8      	b.n	800b82e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	633b      	str	r3, [r7, #48]	; 0x30
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	4413      	add	r3, r2
 800b2ce:	633b      	str	r3, [r7, #48]	; 0x30
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	00da      	lsls	r2, r3, #3
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	4413      	add	r3, r2
 800b2da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b2de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	88db      	ldrh	r3, [r3, #6]
 800b2e4:	085b      	lsrs	r3, r3, #1
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	4413      	add	r3, r2
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	00da      	lsls	r2, r3, #3
 800b30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30c:	4413      	add	r3, r2
 800b30e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b312:	627b      	str	r3, [r7, #36]	; 0x24
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	881b      	ldrh	r3, [r3, #0]
 800b318:	b29b      	uxth	r3, r3
 800b31a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b31e:	b29a      	uxth	r2, r3
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	801a      	strh	r2, [r3, #0]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	2b3e      	cmp	r3, #62	; 0x3e
 800b32a:	d91d      	bls.n	800b368 <USB_ActivateEndpoint+0x2b0>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	095b      	lsrs	r3, r3, #5
 800b332:	66bb      	str	r3, [r7, #104]	; 0x68
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	f003 031f 	and.w	r3, r3, #31
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <USB_ActivateEndpoint+0x28e>
 800b340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b342:	3b01      	subs	r3, #1
 800b344:	66bb      	str	r3, [r7, #104]	; 0x68
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b34e:	b29b      	uxth	r3, r3
 800b350:	029b      	lsls	r3, r3, #10
 800b352:	b29b      	uxth	r3, r3
 800b354:	4313      	orrs	r3, r2
 800b356:	b29b      	uxth	r3, r3
 800b358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b35c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b360:	b29a      	uxth	r2, r3
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	801a      	strh	r2, [r3, #0]
 800b366:	e026      	b.n	800b3b6 <USB_ActivateEndpoint+0x2fe>
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10a      	bne.n	800b386 <USB_ActivateEndpoint+0x2ce>
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	b29b      	uxth	r3, r3
 800b376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b37a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b37e:	b29a      	uxth	r2, r3
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	801a      	strh	r2, [r3, #0]
 800b384:	e017      	b.n	800b3b6 <USB_ActivateEndpoint+0x2fe>
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	085b      	lsrs	r3, r3, #1
 800b38c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <USB_ActivateEndpoint+0x2e8>
 800b39a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b39c:	3301      	adds	r3, #1
 800b39e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	029b      	lsls	r3, r3, #10
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	847b      	strh	r3, [r7, #34]	; 0x22
 800b3c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d01b      	beq.n	800b406 <USB_ActivateEndpoint+0x34e>
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3e4:	843b      	strh	r3, [r7, #32]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	441a      	add	r2, r3
 800b3f0:	8c3b      	ldrh	r3, [r7, #32]
 800b3f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b402:	b29b      	uxth	r3, r3
 800b404:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d124      	bne.n	800b458 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4413      	add	r3, r2
 800b418:	881b      	ldrh	r3, [r3, #0]
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b424:	83bb      	strh	r3, [r7, #28]
 800b426:	8bbb      	ldrh	r3, [r7, #28]
 800b428:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b42c:	83bb      	strh	r3, [r7, #28]
 800b42e:	8bbb      	ldrh	r3, [r7, #28]
 800b430:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b434:	83bb      	strh	r3, [r7, #28]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	441a      	add	r2, r3
 800b440:	8bbb      	ldrh	r3, [r7, #28]
 800b442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b44a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b452:	b29b      	uxth	r3, r3
 800b454:	8013      	strh	r3, [r2, #0]
 800b456:	e1ea      	b.n	800b82e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	b29b      	uxth	r3, r3
 800b466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b46e:	83fb      	strh	r3, [r7, #30]
 800b470:	8bfb      	ldrh	r3, [r7, #30]
 800b472:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b476:	83fb      	strh	r3, [r7, #30]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	441a      	add	r2, r3
 800b482:	8bfb      	ldrh	r3, [r7, #30]
 800b484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b48c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b494:	b29b      	uxth	r3, r3
 800b496:	8013      	strh	r3, [r2, #0]
 800b498:	e1c9      	b.n	800b82e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	78db      	ldrb	r3, [r3, #3]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d11e      	bne.n	800b4e0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	441a      	add	r2, r3
 800b4c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b4ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	8013      	strh	r3, [r2, #0]
 800b4de:	e01d      	b.n	800b51c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	441a      	add	r2, r3
 800b504:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b50c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b518:	b29b      	uxth	r3, r3
 800b51a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b526:	b29b      	uxth	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b52c:	4413      	add	r3, r2
 800b52e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	00da      	lsls	r2, r3, #3
 800b536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b53e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	891b      	ldrh	r3, [r3, #8]
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	b29b      	uxth	r3, r3
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b54e:	801a      	strh	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	657b      	str	r3, [r7, #84]	; 0x54
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	461a      	mov	r2, r3
 800b55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b560:	4413      	add	r3, r2
 800b562:	657b      	str	r3, [r7, #84]	; 0x54
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	00da      	lsls	r2, r3, #3
 800b56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b56c:	4413      	add	r3, r2
 800b56e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b572:	653b      	str	r3, [r7, #80]	; 0x50
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	895b      	ldrh	r3, [r3, #10]
 800b578:	085b      	lsrs	r3, r3, #1
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	005b      	lsls	r3, r3, #1
 800b57e:	b29a      	uxth	r2, r3
 800b580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b582:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	785b      	ldrb	r3, [r3, #1]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f040 8093 	bne.w	800b6b4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b59e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d01b      	beq.n	800b5e2 <USB_ActivateEndpoint+0x52a>
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	441a      	add	r2, r3
 800b5cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b5ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b5f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d01b      	beq.n	800b632 <USB_ActivateEndpoint+0x57a>
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	b29b      	uxth	r3, r3
 800b608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b60c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b610:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	441a      	add	r2, r3
 800b61c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b61e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b62a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b62e:	b29b      	uxth	r3, r3
 800b630:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b648:	873b      	strh	r3, [r7, #56]	; 0x38
 800b64a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b64c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b650:	873b      	strh	r3, [r7, #56]	; 0x38
 800b652:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b654:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b658:	873b      	strh	r3, [r7, #56]	; 0x38
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	441a      	add	r2, r3
 800b664:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b66a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b66e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b676:	b29b      	uxth	r3, r3
 800b678:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	b29b      	uxth	r3, r3
 800b688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b68c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b690:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	441a      	add	r2, r3
 800b69c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b69e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	8013      	strh	r3, [r2, #0]
 800b6b2:	e0bc      	b.n	800b82e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4413      	add	r3, r2
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b6c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b6c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d01d      	beq.n	800b70c <USB_ActivateEndpoint+0x654>
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	441a      	add	r2, r3
 800b6f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b6f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b708:	b29b      	uxth	r3, r3
 800b70a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4413      	add	r3, r2
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b71c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d01d      	beq.n	800b764 <USB_ActivateEndpoint+0x6ac>
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	b29b      	uxth	r3, r3
 800b736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b73e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	441a      	add	r2, r3
 800b74c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b75c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b760:	b29b      	uxth	r3, r3
 800b762:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	78db      	ldrb	r3, [r3, #3]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d024      	beq.n	800b7b6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	b29b      	uxth	r3, r3
 800b77a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b77e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b782:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b786:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b78a:	f083 0320 	eor.w	r3, r3, #32
 800b78e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	441a      	add	r2, r3
 800b79c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b7a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	8013      	strh	r3, [r2, #0]
 800b7b4:	e01d      	b.n	800b7f2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4413      	add	r3, r2
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	441a      	add	r2, r3
 800b7da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b7de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	4413      	add	r3, r2
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b808:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	441a      	add	r2, r3
 800b816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b81a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b81e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b82e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b832:	4618      	mov	r0, r3
 800b834:	3774      	adds	r7, #116	; 0x74
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop

0800b840 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b840:	b480      	push	{r7}
 800b842:	b08d      	sub	sp, #52	; 0x34
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	7b1b      	ldrb	r3, [r3, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f040 808e 	bne.w	800b970 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	785b      	ldrb	r3, [r3, #1]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d044      	beq.n	800b8e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	881b      	ldrh	r3, [r3, #0]
 800b868:	81bb      	strh	r3, [r7, #12]
 800b86a:	89bb      	ldrh	r3, [r7, #12]
 800b86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d01b      	beq.n	800b8ac <USB_DeactivateEndpoint+0x6c>
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	b29b      	uxth	r3, r3
 800b882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b88a:	817b      	strh	r3, [r7, #10]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	441a      	add	r2, r3
 800b896:	897b      	ldrh	r3, [r7, #10]
 800b898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b89c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c2:	813b      	strh	r3, [r7, #8]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	441a      	add	r2, r3
 800b8ce:	893b      	ldrh	r3, [r7, #8]
 800b8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	8013      	strh	r3, [r2, #0]
 800b8e4:	e192      	b.n	800bc0c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	827b      	strh	r3, [r7, #18]
 800b8f4:	8a7b      	ldrh	r3, [r7, #18]
 800b8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d01b      	beq.n	800b936 <USB_DeactivateEndpoint+0xf6>
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	881b      	ldrh	r3, [r3, #0]
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b914:	823b      	strh	r3, [r7, #16]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	441a      	add	r2, r3
 800b920:	8a3b      	ldrh	r3, [r7, #16]
 800b922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b92a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b932:	b29b      	uxth	r3, r3
 800b934:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	b29b      	uxth	r3, r3
 800b944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b94c:	81fb      	strh	r3, [r7, #14]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	441a      	add	r2, r3
 800b958:	89fb      	ldrh	r3, [r7, #14]
 800b95a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b95e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	8013      	strh	r3, [r2, #0]
 800b96e:	e14d      	b.n	800bc0c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	785b      	ldrb	r3, [r3, #1]
 800b974:	2b00      	cmp	r3, #0
 800b976:	f040 80a5 	bne.w	800bac4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	843b      	strh	r3, [r7, #32]
 800b988:	8c3b      	ldrh	r3, [r7, #32]
 800b98a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d01b      	beq.n	800b9ca <USB_DeactivateEndpoint+0x18a>
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a8:	83fb      	strh	r3, [r7, #30]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	441a      	add	r2, r3
 800b9b4:	8bfb      	ldrh	r3, [r7, #30]
 800b9b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	83bb      	strh	r3, [r7, #28]
 800b9d8:	8bbb      	ldrh	r3, [r7, #28]
 800b9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01b      	beq.n	800ba1a <USB_DeactivateEndpoint+0x1da>
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f8:	837b      	strh	r3, [r7, #26]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	441a      	add	r2, r3
 800ba04:	8b7b      	ldrh	r3, [r7, #26]
 800ba06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba30:	833b      	strh	r3, [r7, #24]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	441a      	add	r2, r3
 800ba3c:	8b3b      	ldrh	r3, [r7, #24]
 800ba3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba68:	82fb      	strh	r3, [r7, #22]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	441a      	add	r2, r3
 800ba74:	8afb      	ldrh	r3, [r7, #22]
 800ba76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	881b      	ldrh	r3, [r3, #0]
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baa0:	82bb      	strh	r3, [r7, #20]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	441a      	add	r2, r3
 800baac:	8abb      	ldrh	r3, [r7, #20]
 800baae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800babe:	b29b      	uxth	r3, r3
 800bac0:	8013      	strh	r3, [r2, #0]
 800bac2:	e0a3      	b.n	800bc0c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d01b      	beq.n	800bb14 <USB_DeactivateEndpoint+0x2d4>
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	b29b      	uxth	r3, r3
 800baea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	441a      	add	r2, r3
 800bafe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bb00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bb22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01b      	beq.n	800bb64 <USB_DeactivateEndpoint+0x324>
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb42:	853b      	strh	r3, [r7, #40]	; 0x28
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	441a      	add	r2, r3
 800bb4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	441a      	add	r2, r3
 800bb86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	881b      	ldrh	r3, [r3, #0]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	441a      	add	r2, r3
 800bbbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbea:	847b      	strh	r3, [r7, #34]	; 0x22
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	441a      	add	r2, r3
 800bbf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3734      	adds	r7, #52	; 0x34
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b0c2      	sub	sp, #264	; 0x108
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc28:	6018      	str	r0, [r3, #0]
 800bc2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc32:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	785b      	ldrb	r3, [r3, #1]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	f040 86b7 	bne.w	800c9b4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bc46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d908      	bls.n	800bc74 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bc62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bc72:	e007      	b.n	800bc84 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800bc74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bc84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	7b1b      	ldrb	r3, [r3, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d13a      	bne.n	800bd0a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6959      	ldr	r1, [r3, #20]
 800bca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	88da      	ldrh	r2, [r3, #6]
 800bcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bcb6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	f001 fc98 	bl	800d5f0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bcc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	461a      	mov	r2, r3
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	4413      	add	r3, r2
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	00da      	lsls	r2, r3, #3
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcfa:	60fb      	str	r3, [r7, #12]
 800bcfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	801a      	strh	r2, [r3, #0]
 800bd06:	f000 be1f 	b.w	800c948 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800bd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	78db      	ldrb	r3, [r3, #3]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	f040 8462 	bne.w	800c5e0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800bd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	6a1a      	ldr	r2, [r3, #32]
 800bd28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f240 83df 	bls.w	800c4f8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800bd64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	441a      	add	r2, r3
 800bd7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bd82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd8a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800bd96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6a1a      	ldr	r2, [r3, #32]
 800bda2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda6:	1ad2      	subs	r2, r2, r3
 800bda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bdb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	4413      	add	r3, r2
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f000 81c7 	beq.w	800c16a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	633b      	str	r3, [r7, #48]	; 0x30
 800bde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	785b      	ldrb	r3, [r3, #1]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d177      	bne.n	800bee8 <USB_EPStartXfer+0x2ce>
 800bdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	62bb      	str	r3, [r7, #40]	; 0x28
 800be04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be12:	b29b      	uxth	r3, r3
 800be14:	461a      	mov	r2, r3
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	4413      	add	r3, r2
 800be1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800be1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	00da      	lsls	r2, r3, #3
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	4413      	add	r3, r2
 800be2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be3e:	b29a      	uxth	r2, r3
 800be40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be42:	801a      	strh	r2, [r3, #0]
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be48:	2b3e      	cmp	r3, #62	; 0x3e
 800be4a:	d921      	bls.n	800be90 <USB_EPStartXfer+0x276>
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be50:	095b      	lsrs	r3, r3, #5
 800be52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800be56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5a:	f003 031f 	and.w	r3, r3, #31
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d104      	bne.n	800be6c <USB_EPStartXfer+0x252>
 800be62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be66:	3b01      	subs	r3, #1
 800be68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	b29a      	uxth	r2, r3
 800be72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be76:	b29b      	uxth	r3, r3
 800be78:	029b      	lsls	r3, r3, #10
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	4313      	orrs	r3, r2
 800be7e:	b29b      	uxth	r3, r3
 800be80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be88:	b29a      	uxth	r2, r3
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	801a      	strh	r2, [r3, #0]
 800be8e:	e050      	b.n	800bf32 <USB_EPStartXfer+0x318>
 800be90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <USB_EPStartXfer+0x294>
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	801a      	strh	r2, [r3, #0]
 800beac:	e041      	b.n	800bf32 <USB_EPStartXfer+0x318>
 800beae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb2:	085b      	lsrs	r3, r3, #1
 800beb4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800beb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <USB_EPStartXfer+0x2b4>
 800bec4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bec8:	3301      	adds	r3, #1
 800beca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bed8:	b29b      	uxth	r3, r3
 800beda:	029b      	lsls	r3, r3, #10
 800bedc:	b29b      	uxth	r3, r3
 800bede:	4313      	orrs	r3, r2
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee4:	801a      	strh	r2, [r3, #0]
 800bee6:	e024      	b.n	800bf32 <USB_EPStartXfer+0x318>
 800bee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d11c      	bne.n	800bf32 <USB_EPStartXfer+0x318>
 800bef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800befc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	461a      	mov	r2, r3
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	4413      	add	r3, r2
 800bf0e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	00da      	lsls	r2, r3, #3
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	4413      	add	r3, r2
 800bf22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bf32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	895b      	ldrh	r3, [r3, #10]
 800bf3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6959      	ldr	r1, [r3, #20]
 800bf4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bf5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bf60:	6800      	ldr	r0, [r0, #0]
 800bf62:	f001 fb45 	bl	800d5f0 <USB_WritePMA>
            ep->xfer_buff += len;
 800bf66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	695a      	ldr	r2, [r3, #20]
 800bf72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf76:	441a      	add	r2, r3
 800bf78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6a1a      	ldr	r2, [r3, #32]
 800bf90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d90f      	bls.n	800bfc0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800bfa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	6a1a      	ldr	r2, [r3, #32]
 800bfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfb0:	1ad2      	subs	r2, r2, r3
 800bfb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	621a      	str	r2, [r3, #32]
 800bfbe:	e00e      	b.n	800bfde <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800bfc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bfd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d177      	bne.n	800c0de <USB_EPStartXfer+0x4c4>
 800bfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	61bb      	str	r3, [r7, #24]
 800bffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c008:	b29b      	uxth	r3, r3
 800c00a:	461a      	mov	r2, r3
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	4413      	add	r3, r2
 800c010:	61bb      	str	r3, [r7, #24]
 800c012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	00da      	lsls	r2, r3, #3
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	4413      	add	r3, r2
 800c024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c028:	617b      	str	r3, [r7, #20]
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	881b      	ldrh	r3, [r3, #0]
 800c02e:	b29b      	uxth	r3, r3
 800c030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c034:	b29a      	uxth	r2, r3
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	801a      	strh	r2, [r3, #0]
 800c03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c03e:	2b3e      	cmp	r3, #62	; 0x3e
 800c040:	d921      	bls.n	800c086 <USB_EPStartXfer+0x46c>
 800c042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c046:	095b      	lsrs	r3, r3, #5
 800c048:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c050:	f003 031f 	and.w	r3, r3, #31
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <USB_EPStartXfer+0x448>
 800c058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c05c:	3b01      	subs	r3, #1
 800c05e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	b29a      	uxth	r2, r3
 800c068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	029b      	lsls	r3, r3, #10
 800c070:	b29b      	uxth	r3, r3
 800c072:	4313      	orrs	r3, r2
 800c074:	b29b      	uxth	r3, r3
 800c076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c07a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c07e:	b29a      	uxth	r2, r3
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	801a      	strh	r2, [r3, #0]
 800c084:	e056      	b.n	800c134 <USB_EPStartXfer+0x51a>
 800c086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <USB_EPStartXfer+0x48a>
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	b29b      	uxth	r3, r3
 800c094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	801a      	strh	r2, [r3, #0]
 800c0a2:	e047      	b.n	800c134 <USB_EPStartXfer+0x51a>
 800c0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a8:	085b      	lsrs	r3, r3, #1
 800c0aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d004      	beq.n	800c0c4 <USB_EPStartXfer+0x4aa>
 800c0ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0be:	3301      	adds	r3, #1
 800c0c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	029b      	lsls	r3, r3, #10
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	801a      	strh	r2, [r3, #0]
 800c0dc:	e02a      	b.n	800c134 <USB_EPStartXfer+0x51a>
 800c0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	785b      	ldrb	r3, [r3, #1]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d122      	bne.n	800c134 <USB_EPStartXfer+0x51a>
 800c0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	623b      	str	r3, [r7, #32]
 800c0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c108:	b29b      	uxth	r3, r3
 800c10a:	461a      	mov	r2, r3
 800c10c:	6a3b      	ldr	r3, [r7, #32]
 800c10e:	4413      	add	r3, r2
 800c110:	623b      	str	r3, [r7, #32]
 800c112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	00da      	lsls	r2, r3, #3
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	4413      	add	r3, r2
 800c124:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c128:	61fb      	str	r3, [r7, #28]
 800c12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c12e:	b29a      	uxth	r2, r3
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	891b      	ldrh	r3, [r3, #8]
 800c140:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6959      	ldr	r1, [r3, #20]
 800c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c154:	b29b      	uxth	r3, r3
 800c156:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c15a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c15e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c162:	6800      	ldr	r0, [r0, #0]
 800c164:	f001 fa44 	bl	800d5f0 <USB_WritePMA>
 800c168:	e3ee      	b.n	800c948 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d177      	bne.n	800c26a <USB_EPStartXfer+0x650>
 800c17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c17e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	64bb      	str	r3, [r7, #72]	; 0x48
 800c186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c18a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c194:	b29b      	uxth	r3, r3
 800c196:	461a      	mov	r2, r3
 800c198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c19a:	4413      	add	r3, r2
 800c19c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	00da      	lsls	r2, r3, #3
 800c1ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ae:	4413      	add	r3, r2
 800c1b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c1b4:	647b      	str	r3, [r7, #68]	; 0x44
 800c1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1c4:	801a      	strh	r2, [r3, #0]
 800c1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ca:	2b3e      	cmp	r3, #62	; 0x3e
 800c1cc:	d921      	bls.n	800c212 <USB_EPStartXfer+0x5f8>
 800c1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d2:	095b      	lsrs	r3, r3, #5
 800c1d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1dc:	f003 031f 	and.w	r3, r3, #31
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d104      	bne.n	800c1ee <USB_EPStartXfer+0x5d4>
 800c1e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	029b      	lsls	r3, r3, #10
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	4313      	orrs	r3, r2
 800c200:	b29b      	uxth	r3, r3
 800c202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c20e:	801a      	strh	r2, [r3, #0]
 800c210:	e056      	b.n	800c2c0 <USB_EPStartXfer+0x6a6>
 800c212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10a      	bne.n	800c230 <USB_EPStartXfer+0x616>
 800c21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	b29b      	uxth	r3, r3
 800c220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c228:	b29a      	uxth	r2, r3
 800c22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c22c:	801a      	strh	r2, [r3, #0]
 800c22e:	e047      	b.n	800c2c0 <USB_EPStartXfer+0x6a6>
 800c230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c234:	085b      	lsrs	r3, r3, #1
 800c236:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <USB_EPStartXfer+0x636>
 800c246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c24a:	3301      	adds	r3, #1
 800c24c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	b29a      	uxth	r2, r3
 800c256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	029b      	lsls	r3, r3, #10
 800c25e:	b29b      	uxth	r3, r3
 800c260:	4313      	orrs	r3, r2
 800c262:	b29a      	uxth	r2, r3
 800c264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c266:	801a      	strh	r2, [r3, #0]
 800c268:	e02a      	b.n	800c2c0 <USB_EPStartXfer+0x6a6>
 800c26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	785b      	ldrb	r3, [r3, #1]
 800c276:	2b01      	cmp	r3, #1
 800c278:	d122      	bne.n	800c2c0 <USB_EPStartXfer+0x6a6>
 800c27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	653b      	str	r3, [r7, #80]	; 0x50
 800c286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c294:	b29b      	uxth	r3, r3
 800c296:	461a      	mov	r2, r3
 800c298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c29a:	4413      	add	r3, r2
 800c29c:	653b      	str	r3, [r7, #80]	; 0x50
 800c29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	00da      	lsls	r2, r3, #3
 800c2ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	891b      	ldrh	r3, [r3, #8]
 800c2cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	6959      	ldr	r1, [r3, #20]
 800c2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c2e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c2ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c2ee:	6800      	ldr	r0, [r0, #0]
 800c2f0:	f001 f97e 	bl	800d5f0 <USB_WritePMA>
            ep->xfer_buff += len;
 800c2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	695a      	ldr	r2, [r3, #20]
 800c300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c304:	441a      	add	r2, r3
 800c306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6a1a      	ldr	r2, [r3, #32]
 800c31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d90f      	bls.n	800c34e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	6a1a      	ldr	r2, [r3, #32]
 800c33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	621a      	str	r2, [r3, #32]
 800c34c:	e00e      	b.n	800c36c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2200      	movs	r2, #0
 800c36a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	643b      	str	r3, [r7, #64]	; 0x40
 800c378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c37c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	785b      	ldrb	r3, [r3, #1]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d177      	bne.n	800c478 <USB_EPStartXfer+0x85e>
 800c388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c38c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	63bb      	str	r3, [r7, #56]	; 0x38
 800c394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	4413      	add	r3, r2
 800c3aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	00da      	lsls	r2, r3, #3
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3bc:	4413      	add	r3, r2
 800c3be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d2:	801a      	strh	r2, [r3, #0]
 800c3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d8:	2b3e      	cmp	r3, #62	; 0x3e
 800c3da:	d921      	bls.n	800c420 <USB_EPStartXfer+0x806>
 800c3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e0:	095b      	lsrs	r3, r3, #5
 800c3e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ea:	f003 031f 	and.w	r3, r3, #31
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d104      	bne.n	800c3fc <USB_EPStartXfer+0x7e2>
 800c3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	b29a      	uxth	r2, r3
 800c402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c406:	b29b      	uxth	r3, r3
 800c408:	029b      	lsls	r3, r3, #10
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	4313      	orrs	r3, r2
 800c40e:	b29b      	uxth	r3, r3
 800c410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c418:	b29a      	uxth	r2, r3
 800c41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41c:	801a      	strh	r2, [r3, #0]
 800c41e:	e050      	b.n	800c4c2 <USB_EPStartXfer+0x8a8>
 800c420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10a      	bne.n	800c43e <USB_EPStartXfer+0x824>
 800c428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42a:	881b      	ldrh	r3, [r3, #0]
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c436:	b29a      	uxth	r2, r3
 800c438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43a:	801a      	strh	r2, [r3, #0]
 800c43c:	e041      	b.n	800c4c2 <USB_EPStartXfer+0x8a8>
 800c43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c442:	085b      	lsrs	r3, r3, #1
 800c444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	d004      	beq.n	800c45e <USB_EPStartXfer+0x844>
 800c454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c458:	3301      	adds	r3, #1
 800c45a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	b29a      	uxth	r2, r3
 800c464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c468:	b29b      	uxth	r3, r3
 800c46a:	029b      	lsls	r3, r3, #10
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	4313      	orrs	r3, r2
 800c470:	b29a      	uxth	r2, r3
 800c472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c474:	801a      	strh	r2, [r3, #0]
 800c476:	e024      	b.n	800c4c2 <USB_EPStartXfer+0x8a8>
 800c478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c47c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	785b      	ldrb	r3, [r3, #1]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d11c      	bne.n	800c4c2 <USB_EPStartXfer+0x8a8>
 800c488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c48c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c496:	b29b      	uxth	r3, r3
 800c498:	461a      	mov	r2, r3
 800c49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c49c:	4413      	add	r3, r2
 800c49e:	643b      	str	r3, [r7, #64]	; 0x40
 800c4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	00da      	lsls	r2, r3, #3
 800c4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	895b      	ldrh	r3, [r3, #10]
 800c4ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6959      	ldr	r1, [r3, #20]
 800c4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c4e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c4ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c4f0:	6800      	ldr	r0, [r0, #0]
 800c4f2:	f001 f87d 	bl	800d5f0 <USB_WritePMA>
 800c4f6:	e227      	b.n	800c948 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6a1b      	ldr	r3, [r3, #32]
 800c504:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c50c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	4413      	add	r3, r2
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	b29b      	uxth	r3, r3
 800c526:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c52a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c52e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	441a      	add	r2, r3
 800c54c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c560:	b29b      	uxth	r3, r3
 800c562:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c57e:	b29b      	uxth	r3, r3
 800c580:	461a      	mov	r2, r3
 800c582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c584:	4413      	add	r3, r2
 800c586:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c58c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	00da      	lsls	r2, r3, #3
 800c596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c598:	4413      	add	r3, r2
 800c59a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c59e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	891b      	ldrh	r3, [r3, #8]
 800c5b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6959      	ldr	r1, [r3, #20]
 800c5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c5d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c5d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c5d8:	6800      	ldr	r0, [r0, #0]
 800c5da:	f001 f809 	bl	800d5f0 <USB_WritePMA>
 800c5de:	e1b3      	b.n	800c948 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6a1a      	ldr	r2, [r3, #32]
 800c5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f0:	1ad2      	subs	r2, r2, r3
 800c5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	4413      	add	r3, r2
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 80c6 	beq.w	800c7b2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c62a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	673b      	str	r3, [r7, #112]	; 0x70
 800c632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	785b      	ldrb	r3, [r3, #1]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d177      	bne.n	800c732 <USB_EPStartXfer+0xb18>
 800c642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	461a      	mov	r2, r3
 800c660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c662:	4413      	add	r3, r2
 800c664:	66bb      	str	r3, [r7, #104]	; 0x68
 800c666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	00da      	lsls	r2, r3, #3
 800c674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c676:	4413      	add	r3, r2
 800c678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c67c:	667b      	str	r3, [r7, #100]	; 0x64
 800c67e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	b29b      	uxth	r3, r3
 800c684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c688:	b29a      	uxth	r2, r3
 800c68a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c68c:	801a      	strh	r2, [r3, #0]
 800c68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c692:	2b3e      	cmp	r3, #62	; 0x3e
 800c694:	d921      	bls.n	800c6da <USB_EPStartXfer+0xac0>
 800c696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a4:	f003 031f 	and.w	r3, r3, #31
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d104      	bne.n	800c6b6 <USB_EPStartXfer+0xa9c>
 800c6ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c6b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	029b      	lsls	r3, r3, #10
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6d6:	801a      	strh	r2, [r3, #0]
 800c6d8:	e050      	b.n	800c77c <USB_EPStartXfer+0xb62>
 800c6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10a      	bne.n	800c6f8 <USB_EPStartXfer+0xade>
 800c6e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6f4:	801a      	strh	r2, [r3, #0]
 800c6f6:	e041      	b.n	800c77c <USB_EPStartXfer+0xb62>
 800c6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6fc:	085b      	lsrs	r3, r3, #1
 800c6fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d004      	beq.n	800c718 <USB_EPStartXfer+0xafe>
 800c70e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c712:	3301      	adds	r3, #1
 800c714:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c722:	b29b      	uxth	r3, r3
 800c724:	029b      	lsls	r3, r3, #10
 800c726:	b29b      	uxth	r3, r3
 800c728:	4313      	orrs	r3, r2
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c72e:	801a      	strh	r2, [r3, #0]
 800c730:	e024      	b.n	800c77c <USB_EPStartXfer+0xb62>
 800c732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	785b      	ldrb	r3, [r3, #1]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d11c      	bne.n	800c77c <USB_EPStartXfer+0xb62>
 800c742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c750:	b29b      	uxth	r3, r3
 800c752:	461a      	mov	r2, r3
 800c754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c756:	4413      	add	r3, r2
 800c758:	673b      	str	r3, [r7, #112]	; 0x70
 800c75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	00da      	lsls	r2, r3, #3
 800c768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c76a:	4413      	add	r3, r2
 800c76c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c770:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c776:	b29a      	uxth	r2, r3
 800c778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c77a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	895b      	ldrh	r3, [r3, #10]
 800c788:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6959      	ldr	r1, [r3, #20]
 800c798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c7a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c7a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c7aa:	6800      	ldr	r0, [r0, #0]
 800c7ac:	f000 ff20 	bl	800d5f0 <USB_WritePMA>
 800c7b0:	e0ca      	b.n	800c948 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	785b      	ldrb	r3, [r3, #1]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d177      	bne.n	800c8b2 <USB_EPStartXfer+0xc98>
 800c7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	461a      	mov	r2, r3
 800c7e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7e2:	4413      	add	r3, r2
 800c7e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	00da      	lsls	r2, r3, #3
 800c7f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c7fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c7fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	b29b      	uxth	r3, r3
 800c804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c808:	b29a      	uxth	r2, r3
 800c80a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c80c:	801a      	strh	r2, [r3, #0]
 800c80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c812:	2b3e      	cmp	r3, #62	; 0x3e
 800c814:	d921      	bls.n	800c85a <USB_EPStartXfer+0xc40>
 800c816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81a:	095b      	lsrs	r3, r3, #5
 800c81c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c824:	f003 031f 	and.w	r3, r3, #31
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <USB_EPStartXfer+0xc1c>
 800c82c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c830:	3b01      	subs	r3, #1
 800c832:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c840:	b29b      	uxth	r3, r3
 800c842:	029b      	lsls	r3, r3, #10
 800c844:	b29b      	uxth	r3, r3
 800c846:	4313      	orrs	r3, r2
 800c848:	b29b      	uxth	r3, r3
 800c84a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c84e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c852:	b29a      	uxth	r2, r3
 800c854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c856:	801a      	strh	r2, [r3, #0]
 800c858:	e05c      	b.n	800c914 <USB_EPStartXfer+0xcfa>
 800c85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10a      	bne.n	800c878 <USB_EPStartXfer+0xc5e>
 800c862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	b29b      	uxth	r3, r3
 800c868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c86c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c870:	b29a      	uxth	r2, r3
 800c872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c874:	801a      	strh	r2, [r3, #0]
 800c876:	e04d      	b.n	800c914 <USB_EPStartXfer+0xcfa>
 800c878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c87c:	085b      	lsrs	r3, r3, #1
 800c87e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <USB_EPStartXfer+0xc7e>
 800c88e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c892:	3301      	adds	r3, #1
 800c894:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	029b      	lsls	r3, r3, #10
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8ae:	801a      	strh	r2, [r3, #0]
 800c8b0:	e030      	b.n	800c914 <USB_EPStartXfer+0xcfa>
 800c8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	785b      	ldrb	r3, [r3, #1]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d128      	bne.n	800c914 <USB_EPStartXfer+0xcfa>
 800c8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	00da      	lsls	r2, r3, #3
 800c8fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c8fe:	4413      	add	r3, r2
 800c900:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c912:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	891b      	ldrh	r3, [r3, #8]
 800c920:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6959      	ldr	r1, [r3, #20]
 800c930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c934:	b29b      	uxth	r3, r3
 800c936:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c93a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c93e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c942:	6800      	ldr	r0, [r0, #0]
 800c944:	f000 fe54 	bl	800d5f0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c94c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4413      	add	r3, r2
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	b29b      	uxth	r3, r3
 800c966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c96a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c96e:	817b      	strh	r3, [r7, #10]
 800c970:	897b      	ldrh	r3, [r7, #10]
 800c972:	f083 0310 	eor.w	r3, r3, #16
 800c976:	817b      	strh	r3, [r7, #10]
 800c978:	897b      	ldrh	r3, [r7, #10]
 800c97a:	f083 0320 	eor.w	r3, r3, #32
 800c97e:	817b      	strh	r3, [r7, #10]
 800c980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	441a      	add	r2, r3
 800c99a:	897b      	ldrh	r3, [r7, #10]
 800c99c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	8013      	strh	r3, [r2, #0]
 800c9b0:	f000 bcde 	b.w	800d370 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	7b1b      	ldrb	r3, [r3, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f040 80bb 	bne.w	800cb3c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	699a      	ldr	r2, [r3, #24]
 800c9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	691b      	ldr	r3, [r3, #16]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d917      	bls.n	800ca12 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	699a      	ldr	r2, [r3, #24]
 800c9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca02:	1ad2      	subs	r2, r2, r3
 800ca04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	619a      	str	r2, [r3, #24]
 800ca10:	e00e      	b.n	800ca30 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ca12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ca22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ca30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca54:	4413      	add	r3, r2
 800ca56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	00da      	lsls	r2, r3, #3
 800ca68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca6c:	4413      	add	r3, r2
 800ca6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ca76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca88:	801a      	strh	r2, [r3, #0]
 800ca8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca8e:	2b3e      	cmp	r3, #62	; 0x3e
 800ca90:	d924      	bls.n	800cadc <USB_EPStartXfer+0xec2>
 800ca92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca96:	095b      	lsrs	r3, r3, #5
 800ca98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caa0:	f003 031f 	and.w	r3, r3, #31
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d104      	bne.n	800cab2 <USB_EPStartXfer+0xe98>
 800caa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800caac:	3b01      	subs	r3, #1
 800caae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	b29a      	uxth	r2, r3
 800caba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	029b      	lsls	r3, r3, #10
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	4313      	orrs	r3, r2
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cacc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cad6:	801a      	strh	r2, [r3, #0]
 800cad8:	f000 bc10 	b.w	800d2fc <USB_EPStartXfer+0x16e2>
 800cadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10c      	bne.n	800cafe <USB_EPStartXfer+0xee4>
 800cae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	b29b      	uxth	r3, r3
 800caec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cafa:	801a      	strh	r2, [r3, #0]
 800cafc:	e3fe      	b.n	800d2fc <USB_EPStartXfer+0x16e2>
 800cafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb02:	085b      	lsrs	r3, r3, #1
 800cb04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d004      	beq.n	800cb1e <USB_EPStartXfer+0xf04>
 800cb14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb18:	3301      	adds	r3, #1
 800cb1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb22:	881b      	ldrh	r3, [r3, #0]
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	029b      	lsls	r3, r3, #10
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	4313      	orrs	r3, r2
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb38:	801a      	strh	r2, [r3, #0]
 800cb3a:	e3df      	b.n	800d2fc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cb3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	78db      	ldrb	r3, [r3, #3]
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	f040 8218 	bne.w	800cf7e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	f040 809d 	bne.w	800cc9a <USB_EPStartXfer+0x1080>
 800cb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb84:	4413      	add	r3, r2
 800cb86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cb8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	00da      	lsls	r2, r3, #3
 800cb98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cbaa:	881b      	ldrh	r3, [r3, #0]
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cbb8:	801a      	strh	r2, [r3, #0]
 800cbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	2b3e      	cmp	r3, #62	; 0x3e
 800cbc8:	d92b      	bls.n	800cc22 <USB_EPStartXfer+0x1008>
 800cbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	095b      	lsrs	r3, r3, #5
 800cbd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cbdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	691b      	ldr	r3, [r3, #16]
 800cbe8:	f003 031f 	and.w	r3, r3, #31
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <USB_EPStartXfer+0xfe0>
 800cbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cbfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	029b      	lsls	r3, r3, #10
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cc1e:	801a      	strh	r2, [r3, #0]
 800cc20:	e070      	b.n	800cd04 <USB_EPStartXfer+0x10ea>
 800cc22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10c      	bne.n	800cc4c <USB_EPStartXfer+0x1032>
 800cc32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cc48:	801a      	strh	r2, [r3, #0]
 800cc4a:	e05b      	b.n	800cd04 <USB_EPStartXfer+0x10ea>
 800cc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	085b      	lsrs	r3, r3, #1
 800cc5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <USB_EPStartXfer+0x1062>
 800cc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc76:	3301      	adds	r3, #1
 800cc78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	029b      	lsls	r3, r3, #10
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cc96:	801a      	strh	r2, [r3, #0]
 800cc98:	e034      	b.n	800cd04 <USB_EPStartXfer+0x10ea>
 800cc9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	785b      	ldrb	r3, [r3, #1]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d12c      	bne.n	800cd04 <USB_EPStartXfer+0x10ea>
 800ccaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ccb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	461a      	mov	r2, r3
 800ccca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccce:	4413      	add	r3, r2
 800ccd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ccd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	00da      	lsls	r2, r3, #3
 800cce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cce6:	4413      	add	r3, r2
 800cce8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ccec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ccf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cd02:	801a      	strh	r2, [r3, #0]
 800cd04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	785b      	ldrb	r3, [r3, #1]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f040 809d 	bne.w	800ce5e <USB_EPStartXfer+0x1244>
 800cd24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	461a      	mov	r2, r3
 800cd44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd48:	4413      	add	r3, r2
 800cd4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	00da      	lsls	r2, r3, #3
 800cd5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd60:	4413      	add	r3, r2
 800cd62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd7c:	801a      	strh	r2, [r3, #0]
 800cd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	2b3e      	cmp	r3, #62	; 0x3e
 800cd8c:	d92b      	bls.n	800cde6 <USB_EPStartXfer+0x11cc>
 800cd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cda0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cda4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	f003 031f 	and.w	r3, r3, #31
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d104      	bne.n	800cdbe <USB_EPStartXfer+0x11a4>
 800cdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cdbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	029b      	lsls	r3, r3, #10
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cde2:	801a      	strh	r2, [r3, #0]
 800cde4:	e069      	b.n	800ceba <USB_EPStartXfer+0x12a0>
 800cde6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	691b      	ldr	r3, [r3, #16]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d10c      	bne.n	800ce10 <USB_EPStartXfer+0x11f6>
 800cdf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cdfa:	881b      	ldrh	r3, [r3, #0]
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce0c:	801a      	strh	r2, [r3, #0]
 800ce0e:	e054      	b.n	800ceba <USB_EPStartXfer+0x12a0>
 800ce10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	085b      	lsrs	r3, r3, #1
 800ce1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d004      	beq.n	800ce40 <USB_EPStartXfer+0x1226>
 800ce36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	029b      	lsls	r3, r3, #10
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	4313      	orrs	r3, r2
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce5a:	801a      	strh	r2, [r3, #0]
 800ce5c:	e02d      	b.n	800ceba <USB_EPStartXfer+0x12a0>
 800ce5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	785b      	ldrb	r3, [r3, #1]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d125      	bne.n	800ceba <USB_EPStartXfer+0x12a0>
 800ce6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ce84:	4413      	add	r3, r2
 800ce86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ce8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	00da      	lsls	r2, r3, #3
 800ce98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ceb8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ceba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	69db      	ldr	r3, [r3, #28]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f000 8218 	beq.w	800d2fc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	4413      	add	r3, r2
 800cee6:	881b      	ldrh	r3, [r3, #0]
 800cee8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ceec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d005      	beq.n	800cf04 <USB_EPStartXfer+0x12ea>
 800cef8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cefc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10d      	bne.n	800cf20 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cf04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cf08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f040 81f5 	bne.w	800d2fc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cf12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cf16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f040 81ee 	bne.w	800d2fc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cf20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf46:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800cf4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	441a      	add	r2, r3
 800cf64:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800cf68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	8013      	strh	r3, [r2, #0]
 800cf7c:	e1be      	b.n	800d2fc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cf7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	78db      	ldrb	r3, [r3, #3]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	f040 81b4 	bne.w	800d2f8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cf90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	699a      	ldr	r2, [r3, #24]
 800cf9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d917      	bls.n	800cfdc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800cfac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800cfbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	699a      	ldr	r2, [r3, #24]
 800cfc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfcc:	1ad2      	subs	r2, r2, r3
 800cfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	619a      	str	r2, [r3, #24]
 800cfda:	e00e      	b.n	800cffa <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800cfdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800cfec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2200      	movs	r2, #0
 800cff8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	785b      	ldrb	r3, [r3, #1]
 800d006:	2b00      	cmp	r3, #0
 800d008:	f040 8085 	bne.w	800d116 <USB_EPStartXfer+0x14fc>
 800d00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d01e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d028:	b29b      	uxth	r3, r3
 800d02a:	461a      	mov	r2, r3
 800d02c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d030:	4413      	add	r3, r2
 800d032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d03a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	00da      	lsls	r2, r3, #3
 800d044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d048:	4413      	add	r3, r2
 800d04a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d04e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d05e:	b29a      	uxth	r2, r3
 800d060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d064:	801a      	strh	r2, [r3, #0]
 800d066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d06a:	2b3e      	cmp	r3, #62	; 0x3e
 800d06c:	d923      	bls.n	800d0b6 <USB_EPStartXfer+0x149c>
 800d06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d072:	095b      	lsrs	r3, r3, #5
 800d074:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d07c:	f003 031f 	and.w	r3, r3, #31
 800d080:	2b00      	cmp	r3, #0
 800d082:	d104      	bne.n	800d08e <USB_EPStartXfer+0x1474>
 800d084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d088:	3b01      	subs	r3, #1
 800d08a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d08e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d092:	881b      	ldrh	r3, [r3, #0]
 800d094:	b29a      	uxth	r2, r3
 800d096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	029b      	lsls	r3, r3, #10
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d0b2:	801a      	strh	r2, [r3, #0]
 800d0b4:	e060      	b.n	800d178 <USB_EPStartXfer+0x155e>
 800d0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10c      	bne.n	800d0d8 <USB_EPStartXfer+0x14be>
 800d0be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d0d4:	801a      	strh	r2, [r3, #0]
 800d0d6:	e04f      	b.n	800d178 <USB_EPStartXfer+0x155e>
 800d0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0dc:	085b      	lsrs	r3, r3, #1
 800d0de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d004      	beq.n	800d0f8 <USB_EPStartXfer+0x14de>
 800d0ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d0f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d0fc:	881b      	ldrh	r3, [r3, #0]
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d104:	b29b      	uxth	r3, r3
 800d106:	029b      	lsls	r3, r3, #10
 800d108:	b29b      	uxth	r3, r3
 800d10a:	4313      	orrs	r3, r2
 800d10c:	b29a      	uxth	r2, r3
 800d10e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d112:	801a      	strh	r2, [r3, #0]
 800d114:	e030      	b.n	800d178 <USB_EPStartXfer+0x155e>
 800d116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	785b      	ldrb	r3, [r3, #1]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d128      	bne.n	800d178 <USB_EPStartXfer+0x155e>
 800d126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d12a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d142:	b29b      	uxth	r3, r3
 800d144:	461a      	mov	r2, r3
 800d146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d14a:	4413      	add	r3, r2
 800d14c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	00da      	lsls	r2, r3, #3
 800d15e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d162:	4413      	add	r3, r2
 800d164:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d170:	b29a      	uxth	r2, r3
 800d172:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d176:	801a      	strh	r2, [r3, #0]
 800d178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d17c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	785b      	ldrb	r3, [r3, #1]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 8085 	bne.w	800d2a2 <USB_EPStartXfer+0x1688>
 800d198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d19c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d1bc:	4413      	add	r3, r2
 800d1be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	00da      	lsls	r2, r3, #3
 800d1d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d1da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1f0:	801a      	strh	r2, [r3, #0]
 800d1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1f6:	2b3e      	cmp	r3, #62	; 0x3e
 800d1f8:	d923      	bls.n	800d242 <USB_EPStartXfer+0x1628>
 800d1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1fe:	095b      	lsrs	r3, r3, #5
 800d200:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d208:	f003 031f 	and.w	r3, r3, #31
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d104      	bne.n	800d21a <USB_EPStartXfer+0x1600>
 800d210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d214:	3b01      	subs	r3, #1
 800d216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d21a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	b29a      	uxth	r2, r3
 800d222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d226:	b29b      	uxth	r3, r3
 800d228:	029b      	lsls	r3, r3, #10
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	4313      	orrs	r3, r2
 800d22e:	b29b      	uxth	r3, r3
 800d230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d238:	b29a      	uxth	r2, r3
 800d23a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d23e:	801a      	strh	r2, [r3, #0]
 800d240:	e05c      	b.n	800d2fc <USB_EPStartXfer+0x16e2>
 800d242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10c      	bne.n	800d264 <USB_EPStartXfer+0x164a>
 800d24a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	b29b      	uxth	r3, r3
 800d252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d260:	801a      	strh	r2, [r3, #0]
 800d262:	e04b      	b.n	800d2fc <USB_EPStartXfer+0x16e2>
 800d264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d268:	085b      	lsrs	r3, r3, #1
 800d26a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	2b00      	cmp	r3, #0
 800d278:	d004      	beq.n	800d284 <USB_EPStartXfer+0x166a>
 800d27a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d27e:	3301      	adds	r3, #1
 800d280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d284:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d290:	b29b      	uxth	r3, r3
 800d292:	029b      	lsls	r3, r3, #10
 800d294:	b29b      	uxth	r3, r3
 800d296:	4313      	orrs	r3, r2
 800d298:	b29a      	uxth	r2, r3
 800d29a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d29e:	801a      	strh	r2, [r3, #0]
 800d2a0:	e02c      	b.n	800d2fc <USB_EPStartXfer+0x16e2>
 800d2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d124      	bne.n	800d2fc <USB_EPStartXfer+0x16e2>
 800d2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d2ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	00da      	lsls	r2, r3, #3
 800d2dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d2e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d2f4:	801a      	strh	r2, [r3, #0]
 800d2f6:	e001      	b.n	800d2fc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e03a      	b.n	800d372 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d322:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d326:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d32a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d32e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d332:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d336:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d33a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	441a      	add	r2, r3
 800d358:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d35c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	785b      	ldrb	r3, [r3, #1]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d020      	beq.n	800d3d0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3a4:	81bb      	strh	r3, [r7, #12]
 800d3a6:	89bb      	ldrh	r3, [r7, #12]
 800d3a8:	f083 0310 	eor.w	r3, r3, #16
 800d3ac:	81bb      	strh	r3, [r7, #12]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	441a      	add	r2, r3
 800d3b8:	89bb      	ldrh	r3, [r7, #12]
 800d3ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	8013      	strh	r3, [r2, #0]
 800d3ce:	e01f      	b.n	800d410 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	881b      	ldrh	r3, [r3, #0]
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3e6:	81fb      	strh	r3, [r7, #14]
 800d3e8:	89fb      	ldrh	r3, [r7, #14]
 800d3ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d3ee:	81fb      	strh	r3, [r7, #14]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	441a      	add	r2, r3
 800d3fa:	89fb      	ldrh	r3, [r7, #14]
 800d3fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3714      	adds	r7, #20
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d41e:	b480      	push	{r7}
 800d420:	b087      	sub	sp, #28
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	7b1b      	ldrb	r3, [r3, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f040 809d 	bne.w	800d56c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	785b      	ldrb	r3, [r3, #1]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d04c      	beq.n	800d4d4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4413      	add	r3, r2
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	823b      	strh	r3, [r7, #16]
 800d448:	8a3b      	ldrh	r3, [r7, #16]
 800d44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d01b      	beq.n	800d48a <USB_EPClearStall+0x6c>
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	4413      	add	r3, r2
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d468:	81fb      	strh	r3, [r7, #14]
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	441a      	add	r2, r3
 800d474:	89fb      	ldrh	r3, [r7, #14]
 800d476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d47a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d47e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d486:	b29b      	uxth	r3, r3
 800d488:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	78db      	ldrb	r3, [r3, #3]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d06c      	beq.n	800d56c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	4413      	add	r3, r2
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4a8:	81bb      	strh	r3, [r7, #12]
 800d4aa:	89bb      	ldrh	r3, [r7, #12]
 800d4ac:	f083 0320 	eor.w	r3, r3, #32
 800d4b0:	81bb      	strh	r3, [r7, #12]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	441a      	add	r2, r3
 800d4bc:	89bb      	ldrh	r3, [r7, #12]
 800d4be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	8013      	strh	r3, [r2, #0]
 800d4d2:	e04b      	b.n	800d56c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	82fb      	strh	r3, [r7, #22]
 800d4e2:	8afb      	ldrh	r3, [r7, #22]
 800d4e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d01b      	beq.n	800d524 <USB_EPClearStall+0x106>
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4413      	add	r3, r2
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d502:	82bb      	strh	r3, [r7, #20]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	441a      	add	r2, r3
 800d50e:	8abb      	ldrh	r3, [r7, #20]
 800d510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d520:	b29b      	uxth	r3, r3
 800d522:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	b29b      	uxth	r3, r3
 800d532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d53a:	827b      	strh	r3, [r7, #18]
 800d53c:	8a7b      	ldrh	r3, [r7, #18]
 800d53e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d542:	827b      	strh	r3, [r7, #18]
 800d544:	8a7b      	ldrh	r3, [r7, #18]
 800d546:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d54a:	827b      	strh	r3, [r7, #18]
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	441a      	add	r2, r3
 800d556:	8a7b      	ldrh	r3, [r7, #18]
 800d558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d55c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d568:	b29b      	uxth	r3, r3
 800d56a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	371c      	adds	r7, #28
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b083      	sub	sp, #12
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	460b      	mov	r3, r1
 800d584:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d586:	78fb      	ldrb	r3, [r7, #3]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d103      	bne.n	800d594 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2280      	movs	r2, #128	; 0x80
 800d590:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b08b      	sub	sp, #44	; 0x2c
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	460b      	mov	r3, r1
 800d600:	80fb      	strh	r3, [r7, #6]
 800d602:	4613      	mov	r3, r2
 800d604:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d606:	88bb      	ldrh	r3, [r7, #4]
 800d608:	3301      	adds	r3, #1
 800d60a:	085b      	lsrs	r3, r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d616:	88fa      	ldrh	r2, [r7, #6]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	4413      	add	r3, r2
 800d61c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d620:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	627b      	str	r3, [r7, #36]	; 0x24
 800d626:	e01b      	b.n	800d660 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	3301      	adds	r3, #1
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	021b      	lsls	r3, r3, #8
 800d636:	b21a      	sxth	r2, r3
 800d638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	b21b      	sxth	r3, r3
 800d640:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	8a7a      	ldrh	r2, [r7, #18]
 800d646:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	3302      	adds	r3, #2
 800d64c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	3301      	adds	r3, #1
 800d652:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	3301      	adds	r3, #1
 800d658:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65c:	3b01      	subs	r3, #1
 800d65e:	627b      	str	r3, [r7, #36]	; 0x24
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1e0      	bne.n	800d628 <USB_WritePMA+0x38>
  }
}
 800d666:	bf00      	nop
 800d668:	bf00      	nop
 800d66a:	372c      	adds	r7, #44	; 0x2c
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d674:	b480      	push	{r7}
 800d676:	b08b      	sub	sp, #44	; 0x2c
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	4611      	mov	r1, r2
 800d680:	461a      	mov	r2, r3
 800d682:	460b      	mov	r3, r1
 800d684:	80fb      	strh	r3, [r7, #6]
 800d686:	4613      	mov	r3, r2
 800d688:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d68a:	88bb      	ldrh	r3, [r7, #4]
 800d68c:	085b      	lsrs	r3, r3, #1
 800d68e:	b29b      	uxth	r3, r3
 800d690:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d69a:	88fa      	ldrh	r2, [r7, #6]
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	4413      	add	r3, r2
 800d6a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800d6aa:	e018      	b.n	800d6de <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	3302      	adds	r3, #2
 800d6b8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	0a1b      	lsrs	r3, r3, #8
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1e3      	bne.n	800d6ac <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d6e4:	88bb      	ldrh	r3, [r7, #4]
 800d6e6:	f003 0301 	and.w	r3, r3, #1
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d007      	beq.n	800d700 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d6f0:	6a3b      	ldr	r3, [r7, #32]
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	701a      	strb	r2, [r3, #0]
  }
}
 800d700:	bf00      	nop
 800d702:	372c      	adds	r7, #44	; 0x2c
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	460b      	mov	r3, r1
 800d716:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d718:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d71c:	f002 fbf0 	bl	800ff00 <USBD_static_malloc>
 800d720:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d109      	bne.n	800d73c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	32b0      	adds	r2, #176	; 0xb0
 800d732:	2100      	movs	r1, #0
 800d734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d738:	2302      	movs	r3, #2
 800d73a:	e0d4      	b.n	800d8e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d73c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d740:	2100      	movs	r1, #0
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f002 fc4a 	bl	800ffdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	32b0      	adds	r2, #176	; 0xb0
 800d752:	68f9      	ldr	r1, [r7, #12]
 800d754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	32b0      	adds	r2, #176	; 0xb0
 800d762:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	7c1b      	ldrb	r3, [r3, #16]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d138      	bne.n	800d7e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d774:	4b5e      	ldr	r3, [pc, #376]	; (800d8f0 <USBD_CDC_Init+0x1e4>)
 800d776:	7819      	ldrb	r1, [r3, #0]
 800d778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d77c:	2202      	movs	r2, #2
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f002 fa63 	bl	800fc4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d784:	4b5a      	ldr	r3, [pc, #360]	; (800d8f0 <USBD_CDC_Init+0x1e4>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	f003 020f 	and.w	r2, r3, #15
 800d78c:	6879      	ldr	r1, [r7, #4]
 800d78e:	4613      	mov	r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	440b      	add	r3, r1
 800d798:	3324      	adds	r3, #36	; 0x24
 800d79a:	2201      	movs	r2, #1
 800d79c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d79e:	4b55      	ldr	r3, [pc, #340]	; (800d8f4 <USBD_CDC_Init+0x1e8>)
 800d7a0:	7819      	ldrb	r1, [r3, #0]
 800d7a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f002 fa4e 	bl	800fc4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d7ae:	4b51      	ldr	r3, [pc, #324]	; (800d8f4 <USBD_CDC_Init+0x1e8>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	f003 020f 	and.w	r2, r3, #15
 800d7b6:	6879      	ldr	r1, [r7, #4]
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	440b      	add	r3, r1
 800d7c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d7ca:	4b4b      	ldr	r3, [pc, #300]	; (800d8f8 <USBD_CDC_Init+0x1ec>)
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	f003 020f 	and.w	r2, r3, #15
 800d7d2:	6879      	ldr	r1, [r7, #4]
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	440b      	add	r3, r1
 800d7de:	3326      	adds	r3, #38	; 0x26
 800d7e0:	2210      	movs	r2, #16
 800d7e2:	801a      	strh	r2, [r3, #0]
 800d7e4:	e035      	b.n	800d852 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d7e6:	4b42      	ldr	r3, [pc, #264]	; (800d8f0 <USBD_CDC_Init+0x1e4>)
 800d7e8:	7819      	ldrb	r1, [r3, #0]
 800d7ea:	2340      	movs	r3, #64	; 0x40
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f002 fa2b 	bl	800fc4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d7f4:	4b3e      	ldr	r3, [pc, #248]	; (800d8f0 <USBD_CDC_Init+0x1e4>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	f003 020f 	and.w	r2, r3, #15
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	3324      	adds	r3, #36	; 0x24
 800d80a:	2201      	movs	r2, #1
 800d80c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d80e:	4b39      	ldr	r3, [pc, #228]	; (800d8f4 <USBD_CDC_Init+0x1e8>)
 800d810:	7819      	ldrb	r1, [r3, #0]
 800d812:	2340      	movs	r3, #64	; 0x40
 800d814:	2202      	movs	r2, #2
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f002 fa17 	bl	800fc4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d81c:	4b35      	ldr	r3, [pc, #212]	; (800d8f4 <USBD_CDC_Init+0x1e8>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	f003 020f 	and.w	r2, r3, #15
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	440b      	add	r3, r1
 800d830:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d834:	2201      	movs	r2, #1
 800d836:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d838:	4b2f      	ldr	r3, [pc, #188]	; (800d8f8 <USBD_CDC_Init+0x1ec>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	f003 020f 	and.w	r2, r3, #15
 800d840:	6879      	ldr	r1, [r7, #4]
 800d842:	4613      	mov	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4413      	add	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	440b      	add	r3, r1
 800d84c:	3326      	adds	r3, #38	; 0x26
 800d84e:	2210      	movs	r2, #16
 800d850:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d852:	4b29      	ldr	r3, [pc, #164]	; (800d8f8 <USBD_CDC_Init+0x1ec>)
 800d854:	7819      	ldrb	r1, [r3, #0]
 800d856:	2308      	movs	r3, #8
 800d858:	2203      	movs	r2, #3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f002 f9f5 	bl	800fc4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d860:	4b25      	ldr	r3, [pc, #148]	; (800d8f8 <USBD_CDC_Init+0x1ec>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	f003 020f 	and.w	r2, r3, #15
 800d868:	6879      	ldr	r1, [r7, #4]
 800d86a:	4613      	mov	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4413      	add	r3, r2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	440b      	add	r3, r1
 800d874:	3324      	adds	r3, #36	; 0x24
 800d876:	2201      	movs	r2, #1
 800d878:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	33b0      	adds	r3, #176	; 0xb0
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4413      	add	r3, r2
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d101      	bne.n	800d8b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	e018      	b.n	800d8e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7c1b      	ldrb	r3, [r3, #16]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10a      	bne.n	800d8d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d8bc:	4b0d      	ldr	r3, [pc, #52]	; (800d8f4 <USBD_CDC_Init+0x1e8>)
 800d8be:	7819      	ldrb	r1, [r3, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f002 faad 	bl	800fe2a <USBD_LL_PrepareReceive>
 800d8d0:	e008      	b.n	800d8e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d8d2:	4b08      	ldr	r3, [pc, #32]	; (800d8f4 <USBD_CDC_Init+0x1e8>)
 800d8d4:	7819      	ldrb	r1, [r3, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8dc:	2340      	movs	r3, #64	; 0x40
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f002 faa3 	bl	800fe2a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20000093 	.word	0x20000093
 800d8f4:	20000094 	.word	0x20000094
 800d8f8:	20000095 	.word	0x20000095

0800d8fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d908:	4b3a      	ldr	r3, [pc, #232]	; (800d9f4 <USBD_CDC_DeInit+0xf8>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	4619      	mov	r1, r3
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f002 f9c1 	bl	800fc96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d914:	4b37      	ldr	r3, [pc, #220]	; (800d9f4 <USBD_CDC_DeInit+0xf8>)
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	f003 020f 	and.w	r2, r3, #15
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	4613      	mov	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	440b      	add	r3, r1
 800d928:	3324      	adds	r3, #36	; 0x24
 800d92a:	2200      	movs	r2, #0
 800d92c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d92e:	4b32      	ldr	r3, [pc, #200]	; (800d9f8 <USBD_CDC_DeInit+0xfc>)
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f002 f9ae 	bl	800fc96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d93a:	4b2f      	ldr	r3, [pc, #188]	; (800d9f8 <USBD_CDC_DeInit+0xfc>)
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	f003 020f 	and.w	r2, r3, #15
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	4613      	mov	r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	4413      	add	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	440b      	add	r3, r1
 800d94e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d952:	2200      	movs	r2, #0
 800d954:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d956:	4b29      	ldr	r3, [pc, #164]	; (800d9fc <USBD_CDC_DeInit+0x100>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	4619      	mov	r1, r3
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f002 f99a 	bl	800fc96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d962:	4b26      	ldr	r3, [pc, #152]	; (800d9fc <USBD_CDC_DeInit+0x100>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	f003 020f 	and.w	r2, r3, #15
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	4613      	mov	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	4413      	add	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	440b      	add	r3, r1
 800d976:	3324      	adds	r3, #36	; 0x24
 800d978:	2200      	movs	r2, #0
 800d97a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d97c:	4b1f      	ldr	r3, [pc, #124]	; (800d9fc <USBD_CDC_DeInit+0x100>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	f003 020f 	and.w	r2, r3, #15
 800d984:	6879      	ldr	r1, [r7, #4]
 800d986:	4613      	mov	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4413      	add	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	440b      	add	r3, r1
 800d990:	3326      	adds	r3, #38	; 0x26
 800d992:	2200      	movs	r2, #0
 800d994:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	32b0      	adds	r2, #176	; 0xb0
 800d9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d01f      	beq.n	800d9e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	33b0      	adds	r3, #176	; 0xb0
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	32b0      	adds	r2, #176	; 0xb0
 800d9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f002 faa6 	bl	800ff1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	32b0      	adds	r2, #176	; 0xb0
 800d9da:	2100      	movs	r1, #0
 800d9dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20000093 	.word	0x20000093
 800d9f8:	20000094 	.word	0x20000094
 800d9fc:	20000095 	.word	0x20000095

0800da00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	32b0      	adds	r2, #176	; 0xb0
 800da14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800da1a:	2300      	movs	r3, #0
 800da1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800da1e:	2300      	movs	r3, #0
 800da20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d101      	bne.n	800da30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800da2c:	2303      	movs	r3, #3
 800da2e:	e0bf      	b.n	800dbb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d050      	beq.n	800dade <USBD_CDC_Setup+0xde>
 800da3c:	2b20      	cmp	r3, #32
 800da3e:	f040 80af 	bne.w	800dba0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	88db      	ldrh	r3, [r3, #6]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d03a      	beq.n	800dac0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	b25b      	sxtb	r3, r3
 800da50:	2b00      	cmp	r3, #0
 800da52:	da1b      	bge.n	800da8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	33b0      	adds	r3, #176	; 0xb0
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	4413      	add	r3, r2
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800da6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800da6c:	683a      	ldr	r2, [r7, #0]
 800da6e:	88d2      	ldrh	r2, [r2, #6]
 800da70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	88db      	ldrh	r3, [r3, #6]
 800da76:	2b07      	cmp	r3, #7
 800da78:	bf28      	it	cs
 800da7a:	2307      	movcs	r3, #7
 800da7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	89fa      	ldrh	r2, [r7, #14]
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f001 fce1 	bl	800f44c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800da8a:	e090      	b.n	800dbae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	785a      	ldrb	r2, [r3, #1]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	88db      	ldrh	r3, [r3, #6]
 800da9a:	2b3f      	cmp	r3, #63	; 0x3f
 800da9c:	d803      	bhi.n	800daa6 <USBD_CDC_Setup+0xa6>
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	88db      	ldrh	r3, [r3, #6]
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	e000      	b.n	800daa8 <USBD_CDC_Setup+0xa8>
 800daa6:	2240      	movs	r2, #64	; 0x40
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800daae:	6939      	ldr	r1, [r7, #16]
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800dab6:	461a      	mov	r2, r3
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f001 fcf3 	bl	800f4a4 <USBD_CtlPrepareRx>
      break;
 800dabe:	e076      	b.n	800dbae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	33b0      	adds	r3, #176	; 0xb0
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	4413      	add	r3, r2
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	7850      	ldrb	r0, [r2, #1]
 800dad6:	2200      	movs	r2, #0
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	4798      	blx	r3
      break;
 800dadc:	e067      	b.n	800dbae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	785b      	ldrb	r3, [r3, #1]
 800dae2:	2b0b      	cmp	r3, #11
 800dae4:	d851      	bhi.n	800db8a <USBD_CDC_Setup+0x18a>
 800dae6:	a201      	add	r2, pc, #4	; (adr r2, 800daec <USBD_CDC_Setup+0xec>)
 800dae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daec:	0800db1d 	.word	0x0800db1d
 800daf0:	0800db99 	.word	0x0800db99
 800daf4:	0800db8b 	.word	0x0800db8b
 800daf8:	0800db8b 	.word	0x0800db8b
 800dafc:	0800db8b 	.word	0x0800db8b
 800db00:	0800db8b 	.word	0x0800db8b
 800db04:	0800db8b 	.word	0x0800db8b
 800db08:	0800db8b 	.word	0x0800db8b
 800db0c:	0800db8b 	.word	0x0800db8b
 800db10:	0800db8b 	.word	0x0800db8b
 800db14:	0800db47 	.word	0x0800db47
 800db18:	0800db71 	.word	0x0800db71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db22:	b2db      	uxtb	r3, r3
 800db24:	2b03      	cmp	r3, #3
 800db26:	d107      	bne.n	800db38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800db28:	f107 030a 	add.w	r3, r7, #10
 800db2c:	2202      	movs	r2, #2
 800db2e:	4619      	mov	r1, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f001 fc8b 	bl	800f44c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db36:	e032      	b.n	800db9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f001 fc15 	bl	800f36a <USBD_CtlError>
            ret = USBD_FAIL;
 800db40:	2303      	movs	r3, #3
 800db42:	75fb      	strb	r3, [r7, #23]
          break;
 800db44:	e02b      	b.n	800db9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b03      	cmp	r3, #3
 800db50:	d107      	bne.n	800db62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800db52:	f107 030d 	add.w	r3, r7, #13
 800db56:	2201      	movs	r2, #1
 800db58:	4619      	mov	r1, r3
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f001 fc76 	bl	800f44c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db60:	e01d      	b.n	800db9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800db62:	6839      	ldr	r1, [r7, #0]
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f001 fc00 	bl	800f36a <USBD_CtlError>
            ret = USBD_FAIL;
 800db6a:	2303      	movs	r3, #3
 800db6c:	75fb      	strb	r3, [r7, #23]
          break;
 800db6e:	e016      	b.n	800db9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db76:	b2db      	uxtb	r3, r3
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d00f      	beq.n	800db9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 fbf3 	bl	800f36a <USBD_CtlError>
            ret = USBD_FAIL;
 800db84:	2303      	movs	r3, #3
 800db86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800db88:	e008      	b.n	800db9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800db8a:	6839      	ldr	r1, [r7, #0]
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f001 fbec 	bl	800f36a <USBD_CtlError>
          ret = USBD_FAIL;
 800db92:	2303      	movs	r3, #3
 800db94:	75fb      	strb	r3, [r7, #23]
          break;
 800db96:	e002      	b.n	800db9e <USBD_CDC_Setup+0x19e>
          break;
 800db98:	bf00      	nop
 800db9a:	e008      	b.n	800dbae <USBD_CDC_Setup+0x1ae>
          break;
 800db9c:	bf00      	nop
      }
      break;
 800db9e:	e006      	b.n	800dbae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f001 fbe1 	bl	800f36a <USBD_CtlError>
      ret = USBD_FAIL;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	75fb      	strb	r3, [r7, #23]
      break;
 800dbac:	bf00      	nop
  }

  return (uint8_t)ret;
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	32b0      	adds	r2, #176	; 0xb0
 800dbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d101      	bne.n	800dbe2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dbde:	2303      	movs	r3, #3
 800dbe0:	e065      	b.n	800dcae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	32b0      	adds	r2, #176	; 0xb0
 800dbec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dbf2:	78fb      	ldrb	r3, [r7, #3]
 800dbf4:	f003 020f 	and.w	r2, r3, #15
 800dbf8:	6879      	ldr	r1, [r7, #4]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	4413      	add	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	440b      	add	r3, r1
 800dc04:	3318      	adds	r3, #24
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d02f      	beq.n	800dc6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dc0c:	78fb      	ldrb	r3, [r7, #3]
 800dc0e:	f003 020f 	and.w	r2, r3, #15
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	4613      	mov	r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	440b      	add	r3, r1
 800dc1e:	3318      	adds	r3, #24
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	78fb      	ldrb	r3, [r7, #3]
 800dc24:	f003 010f 	and.w	r1, r3, #15
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	440b      	add	r3, r1
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	4403      	add	r3, r0
 800dc34:	3338      	adds	r3, #56	; 0x38
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	fbb2 f1f3 	udiv	r1, r2, r3
 800dc3c:	fb01 f303 	mul.w	r3, r1, r3
 800dc40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d112      	bne.n	800dc6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dc46:	78fb      	ldrb	r3, [r7, #3]
 800dc48:	f003 020f 	and.w	r2, r3, #15
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	440b      	add	r3, r1
 800dc58:	3318      	adds	r3, #24
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dc5e:	78f9      	ldrb	r1, [r7, #3]
 800dc60:	2300      	movs	r3, #0
 800dc62:	2200      	movs	r2, #0
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f002 f8bf 	bl	800fde8 <USBD_LL_Transmit>
 800dc6a:	e01f      	b.n	800dcac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	33b0      	adds	r3, #176	; 0xb0
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	691b      	ldr	r3, [r3, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d010      	beq.n	800dcac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	33b0      	adds	r3, #176	; 0xb0
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dca2:	68ba      	ldr	r2, [r7, #8]
 800dca4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dca8:	78fa      	ldrb	r2, [r7, #3]
 800dcaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	32b0      	adds	r2, #176	; 0xb0
 800dccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	32b0      	adds	r2, #176	; 0xb0
 800dcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d101      	bne.n	800dce8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dce4:	2303      	movs	r3, #3
 800dce6:	e01a      	b.n	800dd1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dce8:	78fb      	ldrb	r3, [r7, #3]
 800dcea:	4619      	mov	r1, r3
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f002 f8bd 	bl	800fe6c <USBD_LL_GetRxDataSize>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	33b0      	adds	r3, #176	; 0xb0
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dd18:	4611      	mov	r1, r2
 800dd1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	32b0      	adds	r2, #176	; 0xb0
 800dd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd44:	2303      	movs	r3, #3
 800dd46:	e025      	b.n	800dd94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	33b0      	adds	r3, #176	; 0xb0
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01a      	beq.n	800dd92 <USBD_CDC_EP0_RxReady+0x6c>
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dd62:	2bff      	cmp	r3, #255	; 0xff
 800dd64:	d015      	beq.n	800dd92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	33b0      	adds	r3, #176	; 0xb0
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	4413      	add	r3, r2
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800dd7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dd86:	b292      	uxth	r2, r2
 800dd88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	22ff      	movs	r2, #255	; 0xff
 800dd8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dda4:	2182      	movs	r1, #130	; 0x82
 800dda6:	4818      	ldr	r0, [pc, #96]	; (800de08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dda8:	f000 fc7d 	bl	800e6a6 <USBD_GetEpDesc>
 800ddac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ddae:	2101      	movs	r1, #1
 800ddb0:	4815      	ldr	r0, [pc, #84]	; (800de08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ddb2:	f000 fc78 	bl	800e6a6 <USBD_GetEpDesc>
 800ddb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ddb8:	2181      	movs	r1, #129	; 0x81
 800ddba:	4813      	ldr	r0, [pc, #76]	; (800de08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ddbc:	f000 fc73 	bl	800e6a6 <USBD_GetEpDesc>
 800ddc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	2210      	movs	r2, #16
 800ddcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d006      	beq.n	800dde2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dddc:	711a      	strb	r2, [r3, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddf0:	711a      	strb	r2, [r3, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2243      	movs	r2, #67	; 0x43
 800ddfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ddfc:	4b02      	ldr	r3, [pc, #8]	; (800de08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3718      	adds	r7, #24
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	20000050 	.word	0x20000050

0800de0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800de14:	2182      	movs	r1, #130	; 0x82
 800de16:	4818      	ldr	r0, [pc, #96]	; (800de78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800de18:	f000 fc45 	bl	800e6a6 <USBD_GetEpDesc>
 800de1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800de1e:	2101      	movs	r1, #1
 800de20:	4815      	ldr	r0, [pc, #84]	; (800de78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800de22:	f000 fc40 	bl	800e6a6 <USBD_GetEpDesc>
 800de26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800de28:	2181      	movs	r1, #129	; 0x81
 800de2a:	4813      	ldr	r0, [pc, #76]	; (800de78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800de2c:	f000 fc3b 	bl	800e6a6 <USBD_GetEpDesc>
 800de30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2210      	movs	r2, #16
 800de3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d006      	beq.n	800de52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	2200      	movs	r2, #0
 800de48:	711a      	strb	r2, [r3, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f042 0202 	orr.w	r2, r2, #2
 800de50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d006      	beq.n	800de66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2200      	movs	r2, #0
 800de5c:	711a      	strb	r2, [r3, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f042 0202 	orr.w	r2, r2, #2
 800de64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2243      	movs	r2, #67	; 0x43
 800de6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de6c:	4b02      	ldr	r3, [pc, #8]	; (800de78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	20000050 	.word	0x20000050

0800de7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800de84:	2182      	movs	r1, #130	; 0x82
 800de86:	4818      	ldr	r0, [pc, #96]	; (800dee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800de88:	f000 fc0d 	bl	800e6a6 <USBD_GetEpDesc>
 800de8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800de8e:	2101      	movs	r1, #1
 800de90:	4815      	ldr	r0, [pc, #84]	; (800dee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800de92:	f000 fc08 	bl	800e6a6 <USBD_GetEpDesc>
 800de96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800de98:	2181      	movs	r1, #129	; 0x81
 800de9a:	4813      	ldr	r0, [pc, #76]	; (800dee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800de9c:	f000 fc03 	bl	800e6a6 <USBD_GetEpDesc>
 800dea0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	2210      	movs	r2, #16
 800deac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d006      	beq.n	800dec2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800debc:	711a      	strb	r2, [r3, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d006      	beq.n	800ded6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2200      	movs	r2, #0
 800decc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ded0:	711a      	strb	r2, [r3, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2243      	movs	r2, #67	; 0x43
 800deda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dedc:	4b02      	ldr	r3, [pc, #8]	; (800dee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3718      	adds	r7, #24
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20000050 	.word	0x20000050

0800deec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	220a      	movs	r2, #10
 800def8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800defa:	4b03      	ldr	r3, [pc, #12]	; (800df08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800defc:	4618      	mov	r0, r3
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr
 800df08:	2000000c 	.word	0x2000000c

0800df0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800df1c:	2303      	movs	r3, #3
 800df1e:	e009      	b.n	800df34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	33b0      	adds	r3, #176	; 0xb0
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800df40:	b480      	push	{r7}
 800df42:	b087      	sub	sp, #28
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	32b0      	adds	r2, #176	; 0xb0
 800df56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800df62:	2303      	movs	r3, #3
 800df64:	e008      	b.n	800df78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	371c      	adds	r7, #28
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	32b0      	adds	r2, #176	; 0xb0
 800df98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d101      	bne.n	800dfa8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e004      	b.n	800dfb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
	...

0800dfc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	32b0      	adds	r2, #176	; 0xb0
 800dfd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	32b0      	adds	r2, #176	; 0xb0
 800dfe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dfea:	2303      	movs	r3, #3
 800dfec:	e018      	b.n	800e020 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	7c1b      	ldrb	r3, [r3, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10a      	bne.n	800e00c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dff6:	4b0c      	ldr	r3, [pc, #48]	; (800e028 <USBD_CDC_ReceivePacket+0x68>)
 800dff8:	7819      	ldrb	r1, [r3, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e000:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f001 ff10 	bl	800fe2a <USBD_LL_PrepareReceive>
 800e00a:	e008      	b.n	800e01e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e00c:	4b06      	ldr	r3, [pc, #24]	; (800e028 <USBD_CDC_ReceivePacket+0x68>)
 800e00e:	7819      	ldrb	r1, [r3, #0]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e016:	2340      	movs	r3, #64	; 0x40
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f001 ff06 	bl	800fe2a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20000094 	.word	0x20000094

0800e02c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b086      	sub	sp, #24
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	4613      	mov	r3, r2
 800e038:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e040:	2303      	movs	r3, #3
 800e042:	e01f      	b.n	800e084 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2200      	movs	r2, #0
 800e058:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d003      	beq.n	800e06a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	79fa      	ldrb	r2, [r7, #7]
 800e076:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f001 fd69 	bl	800fb50 <USBD_LL_Init>
 800e07e:	4603      	mov	r3, r0
 800e080:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e082:	7dfb      	ldrb	r3, [r7, #23]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e096:	2300      	movs	r3, #0
 800e098:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	e025      	b.n	800e0f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	32ae      	adds	r2, #174	; 0xae
 800e0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00f      	beq.n	800e0e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	32ae      	adds	r2, #174	; 0xae
 800e0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	f107 020e 	add.w	r2, r7, #14
 800e0d4:	4610      	mov	r0, r2
 800e0d6:	4798      	blx	r3
 800e0d8:	4602      	mov	r2, r0
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e0e6:	1c5a      	adds	r2, r3, #1
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f001 fd87 	bl	800fc14 <USBD_LL_Start>
 800e106:	4603      	mov	r3, r0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e118:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	370c      	adds	r7, #12
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b084      	sub	sp, #16
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	460b      	mov	r3, r1
 800e130:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d009      	beq.n	800e154 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	78fa      	ldrb	r2, [r7, #3]
 800e14a:	4611      	mov	r1, r2
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	4798      	blx	r3
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e154:	7bfb      	ldrb	r3, [r7, #15]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	460b      	mov	r3, r1
 800e168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	78fa      	ldrb	r2, [r7, #3]
 800e178:	4611      	mov	r1, r2
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	4798      	blx	r3
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e184:	2303      	movs	r3, #3
 800e186:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e188:	7bfb      	ldrb	r3, [r7, #15]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b084      	sub	sp, #16
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f001 f8a6 	bl	800f2f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e1c6:	f003 031f 	and.w	r3, r3, #31
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d01a      	beq.n	800e204 <USBD_LL_SetupStage+0x72>
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	d822      	bhi.n	800e218 <USBD_LL_SetupStage+0x86>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d002      	beq.n	800e1dc <USBD_LL_SetupStage+0x4a>
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d00a      	beq.n	800e1f0 <USBD_LL_SetupStage+0x5e>
 800e1da:	e01d      	b.n	800e218 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fad3 	bl	800e790 <USBD_StdDevReq>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73fb      	strb	r3, [r7, #15]
      break;
 800e1ee:	e020      	b.n	800e232 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 fb3b 	bl	800e874 <USBD_StdItfReq>
 800e1fe:	4603      	mov	r3, r0
 800e200:	73fb      	strb	r3, [r7, #15]
      break;
 800e202:	e016      	b.n	800e232 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fb9d 	bl	800e94c <USBD_StdEPReq>
 800e212:	4603      	mov	r3, r0
 800e214:	73fb      	strb	r3, [r7, #15]
      break;
 800e216:	e00c      	b.n	800e232 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e21e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e222:	b2db      	uxtb	r3, r3
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f001 fd54 	bl	800fcd4 <USBD_LL_StallEP>
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]
      break;
 800e230:	bf00      	nop
  }

  return ret;
 800e232:	7bfb      	ldrb	r3, [r7, #15]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	460b      	mov	r3, r1
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e24e:	7afb      	ldrb	r3, [r7, #11]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d16e      	bne.n	800e332 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e25a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e262:	2b03      	cmp	r3, #3
 800e264:	f040 8098 	bne.w	800e398 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	689a      	ldr	r2, [r3, #8]
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	429a      	cmp	r2, r3
 800e272:	d913      	bls.n	800e29c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	689a      	ldr	r2, [r3, #8]
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	1ad2      	subs	r2, r2, r3
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	68da      	ldr	r2, [r3, #12]
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	4293      	cmp	r3, r2
 800e28c:	bf28      	it	cs
 800e28e:	4613      	movcs	r3, r2
 800e290:	461a      	mov	r2, r3
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f001 f922 	bl	800f4de <USBD_CtlContinueRx>
 800e29a:	e07d      	b.n	800e398 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e2a2:	f003 031f 	and.w	r3, r3, #31
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d014      	beq.n	800e2d4 <USBD_LL_DataOutStage+0x98>
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d81d      	bhi.n	800e2ea <USBD_LL_DataOutStage+0xae>
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d002      	beq.n	800e2b8 <USBD_LL_DataOutStage+0x7c>
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d003      	beq.n	800e2be <USBD_LL_DataOutStage+0x82>
 800e2b6:	e018      	b.n	800e2ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	75bb      	strb	r3, [r7, #22]
            break;
 800e2bc:	e018      	b.n	800e2f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f000 f9d2 	bl	800e672 <USBD_CoreFindIF>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	75bb      	strb	r3, [r7, #22]
            break;
 800e2d2:	e00d      	b.n	800e2f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	4619      	mov	r1, r3
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f000 f9d4 	bl	800e68c <USBD_CoreFindEP>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	75bb      	strb	r3, [r7, #22]
            break;
 800e2e8:	e002      	b.n	800e2f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	75bb      	strb	r3, [r7, #22]
            break;
 800e2ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e2f0:	7dbb      	ldrb	r3, [r7, #22]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d119      	bne.n	800e32a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d113      	bne.n	800e32a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e302:	7dba      	ldrb	r2, [r7, #22]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	32ae      	adds	r2, #174	; 0xae
 800e308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00b      	beq.n	800e32a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e312:	7dba      	ldrb	r2, [r7, #22]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e31a:	7dba      	ldrb	r2, [r7, #22]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	32ae      	adds	r2, #174	; 0xae
 800e320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	f001 f8e8 	bl	800f500 <USBD_CtlSendStatus>
 800e330:	e032      	b.n	800e398 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e332:	7afb      	ldrb	r3, [r7, #11]
 800e334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	4619      	mov	r1, r3
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 f9a5 	bl	800e68c <USBD_CoreFindEP>
 800e342:	4603      	mov	r3, r0
 800e344:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e346:	7dbb      	ldrb	r3, [r7, #22]
 800e348:	2bff      	cmp	r3, #255	; 0xff
 800e34a:	d025      	beq.n	800e398 <USBD_LL_DataOutStage+0x15c>
 800e34c:	7dbb      	ldrb	r3, [r7, #22]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d122      	bne.n	800e398 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	d117      	bne.n	800e38e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e35e:	7dba      	ldrb	r2, [r7, #22]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	32ae      	adds	r2, #174	; 0xae
 800e364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e368:	699b      	ldr	r3, [r3, #24]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00f      	beq.n	800e38e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e36e:	7dba      	ldrb	r2, [r7, #22]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e376:	7dba      	ldrb	r2, [r7, #22]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	32ae      	adds	r2, #174	; 0xae
 800e37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e380:	699b      	ldr	r3, [r3, #24]
 800e382:	7afa      	ldrb	r2, [r7, #11]
 800e384:	4611      	mov	r1, r2
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	4798      	blx	r3
 800e38a:	4603      	mov	r3, r0
 800e38c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e38e:	7dfb      	ldrb	r3, [r7, #23]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e394:	7dfb      	ldrb	r3, [r7, #23]
 800e396:	e000      	b.n	800e39a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3718      	adds	r7, #24
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b086      	sub	sp, #24
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	60f8      	str	r0, [r7, #12]
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	607a      	str	r2, [r7, #4]
 800e3ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e3b0:	7afb      	ldrb	r3, [r7, #11]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d16f      	bne.n	800e496 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3314      	adds	r3, #20
 800e3ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d15a      	bne.n	800e47c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	689a      	ldr	r2, [r3, #8]
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d914      	bls.n	800e3fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	689a      	ldr	r2, [r3, #8]
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	1ad2      	subs	r2, r2, r3
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	6879      	ldr	r1, [r7, #4]
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f001 f84a 	bl	800f482 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f001 fd18 	bl	800fe2a <USBD_LL_PrepareReceive>
 800e3fa:	e03f      	b.n	800e47c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	68da      	ldr	r2, [r3, #12]
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	429a      	cmp	r2, r3
 800e406:	d11c      	bne.n	800e442 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e410:	429a      	cmp	r2, r3
 800e412:	d316      	bcc.n	800e442 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	685a      	ldr	r2, [r3, #4]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e41e:	429a      	cmp	r2, r3
 800e420:	d20f      	bcs.n	800e442 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e422:	2200      	movs	r2, #0
 800e424:	2100      	movs	r1, #0
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f001 f82b 	bl	800f482 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e434:	2300      	movs	r3, #0
 800e436:	2200      	movs	r2, #0
 800e438:	2100      	movs	r1, #0
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f001 fcf5 	bl	800fe2a <USBD_LL_PrepareReceive>
 800e440:	e01c      	b.n	800e47c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d10f      	bne.n	800e46e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d009      	beq.n	800e46e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e46e:	2180      	movs	r1, #128	; 0x80
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f001 fc2f 	bl	800fcd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f001 f855 	bl	800f526 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d03a      	beq.n	800e4fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f7ff fe42 	bl	800e110 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2200      	movs	r2, #0
 800e490:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e494:	e032      	b.n	800e4fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e496:	7afb      	ldrb	r3, [r7, #11]
 800e498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	4619      	mov	r1, r3
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f000 f8f3 	bl	800e68c <USBD_CoreFindEP>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4aa:	7dfb      	ldrb	r3, [r7, #23]
 800e4ac:	2bff      	cmp	r3, #255	; 0xff
 800e4ae:	d025      	beq.n	800e4fc <USBD_LL_DataInStage+0x15a>
 800e4b0:	7dfb      	ldrb	r3, [r7, #23]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d122      	bne.n	800e4fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	2b03      	cmp	r3, #3
 800e4c0:	d11c      	bne.n	800e4fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e4c2:	7dfa      	ldrb	r2, [r7, #23]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	32ae      	adds	r2, #174	; 0xae
 800e4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4cc:	695b      	ldr	r3, [r3, #20]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d014      	beq.n	800e4fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e4d2:	7dfa      	ldrb	r2, [r7, #23]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e4da:	7dfa      	ldrb	r2, [r7, #23]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	32ae      	adds	r2, #174	; 0xae
 800e4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	7afa      	ldrb	r2, [r7, #11]
 800e4e8:	4611      	mov	r1, r2
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	4798      	blx	r3
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e4f2:	7dbb      	ldrb	r3, [r7, #22]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e4f8:	7dbb      	ldrb	r3, [r7, #22]
 800e4fa:	e000      	b.n	800e4fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3718      	adds	r7, #24
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b084      	sub	sp, #16
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d014      	beq.n	800e56c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00e      	beq.n	800e56c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	6852      	ldr	r2, [r2, #4]
 800e55a:	b2d2      	uxtb	r2, r2
 800e55c:	4611      	mov	r1, r2
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	4798      	blx	r3
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d001      	beq.n	800e56c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e568:	2303      	movs	r3, #3
 800e56a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e56c:	2340      	movs	r3, #64	; 0x40
 800e56e:	2200      	movs	r2, #0
 800e570:	2100      	movs	r1, #0
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f001 fb69 	bl	800fc4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2240      	movs	r2, #64	; 0x40
 800e584:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e588:	2340      	movs	r3, #64	; 0x40
 800e58a:	2200      	movs	r2, #0
 800e58c:	2180      	movs	r1, #128	; 0x80
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f001 fb5b 	bl	800fc4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2201      	movs	r2, #1
 800e598:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2240      	movs	r2, #64	; 0x40
 800e59e:	621a      	str	r2, [r3, #32]

  return ret;
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e5aa:	b480      	push	{r7}
 800e5ac:	b083      	sub	sp, #12
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	78fa      	ldrb	r2, [r7, #3]
 800e5ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	370c      	adds	r7, #12
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr

0800e5ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e5ca:	b480      	push	{r7}
 800e5cc:	b083      	sub	sp, #12
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	2b04      	cmp	r3, #4
 800e5dc:	d006      	beq.n	800e5ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	370c      	adds	r7, #12
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e602:	b480      	push	{r7}
 800e604:	b083      	sub	sp, #12
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b04      	cmp	r3, #4
 800e614:	d106      	bne.n	800e624 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b082      	sub	sp, #8
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b03      	cmp	r3, #3
 800e644:	d110      	bne.n	800e668 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00b      	beq.n	800e668 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e656:	69db      	ldr	r3, [r3, #28]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d005      	beq.n	800e668 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e662:	69db      	ldr	r3, [r3, #28]
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e668:	2300      	movs	r3, #0
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e672:	b480      	push	{r7}
 800e674:	b083      	sub	sp, #12
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	460b      	mov	r3, r1
 800e67c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e67e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e680:	4618      	mov	r0, r3
 800e682:	370c      	adds	r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	460b      	mov	r3, r1
 800e696:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e698:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr

0800e6a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b086      	sub	sp, #24
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	460b      	mov	r3, r1
 800e6b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	885b      	ldrh	r3, [r3, #2]
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d920      	bls.n	800e710 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e6d6:	e013      	b.n	800e700 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e6d8:	f107 030a 	add.w	r3, r7, #10
 800e6dc:	4619      	mov	r1, r3
 800e6de:	6978      	ldr	r0, [r7, #20]
 800e6e0:	f000 f81b 	bl	800e71a <USBD_GetNextDesc>
 800e6e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	785b      	ldrb	r3, [r3, #1]
 800e6ea:	2b05      	cmp	r3, #5
 800e6ec:	d108      	bne.n	800e700 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	789b      	ldrb	r3, [r3, #2]
 800e6f6:	78fa      	ldrb	r2, [r7, #3]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d008      	beq.n	800e70e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	885b      	ldrh	r3, [r3, #2]
 800e704:	b29a      	uxth	r2, r3
 800e706:	897b      	ldrh	r3, [r7, #10]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d8e5      	bhi.n	800e6d8 <USBD_GetEpDesc+0x32>
 800e70c:	e000      	b.n	800e710 <USBD_GetEpDesc+0x6a>
          break;
 800e70e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e710:	693b      	ldr	r3, [r7, #16]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3718      	adds	r7, #24
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e71a:	b480      	push	{r7}
 800e71c:	b085      	sub	sp, #20
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	881a      	ldrh	r2, [r3, #0]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	b29b      	uxth	r3, r3
 800e732:	4413      	add	r3, r2
 800e734:	b29a      	uxth	r2, r3
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	461a      	mov	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4413      	add	r3, r2
 800e744:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e746:	68fb      	ldr	r3, [r7, #12]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e754:	b480      	push	{r7}
 800e756:	b087      	sub	sp, #28
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	3301      	adds	r3, #1
 800e76a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e772:	8a3b      	ldrh	r3, [r7, #16]
 800e774:	021b      	lsls	r3, r3, #8
 800e776:	b21a      	sxth	r2, r3
 800e778:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e77c:	4313      	orrs	r3, r2
 800e77e:	b21b      	sxth	r3, r3
 800e780:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e782:	89fb      	ldrh	r3, [r7, #14]
}
 800e784:	4618      	mov	r0, r3
 800e786:	371c      	adds	r7, #28
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e79a:	2300      	movs	r3, #0
 800e79c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e7a6:	2b40      	cmp	r3, #64	; 0x40
 800e7a8:	d005      	beq.n	800e7b6 <USBD_StdDevReq+0x26>
 800e7aa:	2b40      	cmp	r3, #64	; 0x40
 800e7ac:	d857      	bhi.n	800e85e <USBD_StdDevReq+0xce>
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d00f      	beq.n	800e7d2 <USBD_StdDevReq+0x42>
 800e7b2:	2b20      	cmp	r3, #32
 800e7b4:	d153      	bne.n	800e85e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	32ae      	adds	r2, #174	; 0xae
 800e7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	6839      	ldr	r1, [r7, #0]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	4798      	blx	r3
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800e7d0:	e04a      	b.n	800e868 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	785b      	ldrb	r3, [r3, #1]
 800e7d6:	2b09      	cmp	r3, #9
 800e7d8:	d83b      	bhi.n	800e852 <USBD_StdDevReq+0xc2>
 800e7da:	a201      	add	r2, pc, #4	; (adr r2, 800e7e0 <USBD_StdDevReq+0x50>)
 800e7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e0:	0800e835 	.word	0x0800e835
 800e7e4:	0800e849 	.word	0x0800e849
 800e7e8:	0800e853 	.word	0x0800e853
 800e7ec:	0800e83f 	.word	0x0800e83f
 800e7f0:	0800e853 	.word	0x0800e853
 800e7f4:	0800e813 	.word	0x0800e813
 800e7f8:	0800e809 	.word	0x0800e809
 800e7fc:	0800e853 	.word	0x0800e853
 800e800:	0800e82b 	.word	0x0800e82b
 800e804:	0800e81d 	.word	0x0800e81d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e808:	6839      	ldr	r1, [r7, #0]
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 fa3c 	bl	800ec88 <USBD_GetDescriptor>
          break;
 800e810:	e024      	b.n	800e85c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e812:	6839      	ldr	r1, [r7, #0]
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fbcb 	bl	800efb0 <USBD_SetAddress>
          break;
 800e81a:	e01f      	b.n	800e85c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 fc0a 	bl	800f038 <USBD_SetConfig>
 800e824:	4603      	mov	r3, r0
 800e826:	73fb      	strb	r3, [r7, #15]
          break;
 800e828:	e018      	b.n	800e85c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e82a:	6839      	ldr	r1, [r7, #0]
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 fcad 	bl	800f18c <USBD_GetConfig>
          break;
 800e832:	e013      	b.n	800e85c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e834:	6839      	ldr	r1, [r7, #0]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fcde 	bl	800f1f8 <USBD_GetStatus>
          break;
 800e83c:	e00e      	b.n	800e85c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fd0d 	bl	800f260 <USBD_SetFeature>
          break;
 800e846:	e009      	b.n	800e85c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fd31 	bl	800f2b2 <USBD_ClrFeature>
          break;
 800e850:	e004      	b.n	800e85c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e852:	6839      	ldr	r1, [r7, #0]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fd88 	bl	800f36a <USBD_CtlError>
          break;
 800e85a:	bf00      	nop
      }
      break;
 800e85c:	e004      	b.n	800e868 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 fd82 	bl	800f36a <USBD_CtlError>
      break;
 800e866:	bf00      	nop
  }

  return ret;
 800e868:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop

0800e874 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e87e:	2300      	movs	r3, #0
 800e880:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e88a:	2b40      	cmp	r3, #64	; 0x40
 800e88c:	d005      	beq.n	800e89a <USBD_StdItfReq+0x26>
 800e88e:	2b40      	cmp	r3, #64	; 0x40
 800e890:	d852      	bhi.n	800e938 <USBD_StdItfReq+0xc4>
 800e892:	2b00      	cmp	r3, #0
 800e894:	d001      	beq.n	800e89a <USBD_StdItfReq+0x26>
 800e896:	2b20      	cmp	r3, #32
 800e898:	d14e      	bne.n	800e938 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d840      	bhi.n	800e92a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	889b      	ldrh	r3, [r3, #4]
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d836      	bhi.n	800e920 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	889b      	ldrh	r3, [r3, #4]
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff fed9 	bl	800e672 <USBD_CoreFindIF>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8c4:	7bbb      	ldrb	r3, [r7, #14]
 800e8c6:	2bff      	cmp	r3, #255	; 0xff
 800e8c8:	d01d      	beq.n	800e906 <USBD_StdItfReq+0x92>
 800e8ca:	7bbb      	ldrb	r3, [r7, #14]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d11a      	bne.n	800e906 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e8d0:	7bba      	ldrb	r2, [r7, #14]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	32ae      	adds	r2, #174	; 0xae
 800e8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00f      	beq.n	800e900 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e8e0:	7bba      	ldrb	r2, [r7, #14]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e8e8:	7bba      	ldrb	r2, [r7, #14]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	32ae      	adds	r2, #174	; 0xae
 800e8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	6839      	ldr	r1, [r7, #0]
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	4798      	blx	r3
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e8fe:	e004      	b.n	800e90a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e900:	2303      	movs	r3, #3
 800e902:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e904:	e001      	b.n	800e90a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e906:	2303      	movs	r3, #3
 800e908:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	88db      	ldrh	r3, [r3, #6]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d110      	bne.n	800e934 <USBD_StdItfReq+0xc0>
 800e912:	7bfb      	ldrb	r3, [r7, #15]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10d      	bne.n	800e934 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 fdf1 	bl	800f500 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e91e:	e009      	b.n	800e934 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e920:	6839      	ldr	r1, [r7, #0]
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 fd21 	bl	800f36a <USBD_CtlError>
          break;
 800e928:	e004      	b.n	800e934 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e92a:	6839      	ldr	r1, [r7, #0]
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f000 fd1c 	bl	800f36a <USBD_CtlError>
          break;
 800e932:	e000      	b.n	800e936 <USBD_StdItfReq+0xc2>
          break;
 800e934:	bf00      	nop
      }
      break;
 800e936:	e004      	b.n	800e942 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e938:	6839      	ldr	r1, [r7, #0]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fd15 	bl	800f36a <USBD_CtlError>
      break;
 800e940:	bf00      	nop
  }

  return ret;
 800e942:	7bfb      	ldrb	r3, [r7, #15]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	889b      	ldrh	r3, [r3, #4]
 800e95e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e968:	2b40      	cmp	r3, #64	; 0x40
 800e96a:	d007      	beq.n	800e97c <USBD_StdEPReq+0x30>
 800e96c:	2b40      	cmp	r3, #64	; 0x40
 800e96e:	f200 817f 	bhi.w	800ec70 <USBD_StdEPReq+0x324>
 800e972:	2b00      	cmp	r3, #0
 800e974:	d02a      	beq.n	800e9cc <USBD_StdEPReq+0x80>
 800e976:	2b20      	cmp	r3, #32
 800e978:	f040 817a 	bne.w	800ec70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e97c:	7bbb      	ldrb	r3, [r7, #14]
 800e97e:	4619      	mov	r1, r3
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7ff fe83 	bl	800e68c <USBD_CoreFindEP>
 800e986:	4603      	mov	r3, r0
 800e988:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e98a:	7b7b      	ldrb	r3, [r7, #13]
 800e98c:	2bff      	cmp	r3, #255	; 0xff
 800e98e:	f000 8174 	beq.w	800ec7a <USBD_StdEPReq+0x32e>
 800e992:	7b7b      	ldrb	r3, [r7, #13]
 800e994:	2b00      	cmp	r3, #0
 800e996:	f040 8170 	bne.w	800ec7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e99a:	7b7a      	ldrb	r2, [r7, #13]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e9a2:	7b7a      	ldrb	r2, [r7, #13]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	32ae      	adds	r2, #174	; 0xae
 800e9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f000 8163 	beq.w	800ec7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e9b4:	7b7a      	ldrb	r2, [r7, #13]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	32ae      	adds	r2, #174	; 0xae
 800e9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	6839      	ldr	r1, [r7, #0]
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	4798      	blx	r3
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e9ca:	e156      	b.n	800ec7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	785b      	ldrb	r3, [r3, #1]
 800e9d0:	2b03      	cmp	r3, #3
 800e9d2:	d008      	beq.n	800e9e6 <USBD_StdEPReq+0x9a>
 800e9d4:	2b03      	cmp	r3, #3
 800e9d6:	f300 8145 	bgt.w	800ec64 <USBD_StdEPReq+0x318>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f000 809b 	beq.w	800eb16 <USBD_StdEPReq+0x1ca>
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d03c      	beq.n	800ea5e <USBD_StdEPReq+0x112>
 800e9e4:	e13e      	b.n	800ec64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	d002      	beq.n	800e9f8 <USBD_StdEPReq+0xac>
 800e9f2:	2b03      	cmp	r3, #3
 800e9f4:	d016      	beq.n	800ea24 <USBD_StdEPReq+0xd8>
 800e9f6:	e02c      	b.n	800ea52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9f8:	7bbb      	ldrb	r3, [r7, #14]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00d      	beq.n	800ea1a <USBD_StdEPReq+0xce>
 800e9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ea00:	2b80      	cmp	r3, #128	; 0x80
 800ea02:	d00a      	beq.n	800ea1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea04:	7bbb      	ldrb	r3, [r7, #14]
 800ea06:	4619      	mov	r1, r3
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f001 f963 	bl	800fcd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea0e:	2180      	movs	r1, #128	; 0x80
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f001 f95f 	bl	800fcd4 <USBD_LL_StallEP>
 800ea16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea18:	e020      	b.n	800ea5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 fca4 	bl	800f36a <USBD_CtlError>
              break;
 800ea22:	e01b      	b.n	800ea5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	885b      	ldrh	r3, [r3, #2]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10e      	bne.n	800ea4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ea2c:	7bbb      	ldrb	r3, [r7, #14]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00b      	beq.n	800ea4a <USBD_StdEPReq+0xfe>
 800ea32:	7bbb      	ldrb	r3, [r7, #14]
 800ea34:	2b80      	cmp	r3, #128	; 0x80
 800ea36:	d008      	beq.n	800ea4a <USBD_StdEPReq+0xfe>
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	88db      	ldrh	r3, [r3, #6]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d104      	bne.n	800ea4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
 800ea42:	4619      	mov	r1, r3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f001 f945 	bl	800fcd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 fd58 	bl	800f500 <USBD_CtlSendStatus>

              break;
 800ea50:	e004      	b.n	800ea5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 fc88 	bl	800f36a <USBD_CtlError>
              break;
 800ea5a:	bf00      	nop
          }
          break;
 800ea5c:	e107      	b.n	800ec6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d002      	beq.n	800ea70 <USBD_StdEPReq+0x124>
 800ea6a:	2b03      	cmp	r3, #3
 800ea6c:	d016      	beq.n	800ea9c <USBD_StdEPReq+0x150>
 800ea6e:	e04b      	b.n	800eb08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea70:	7bbb      	ldrb	r3, [r7, #14]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00d      	beq.n	800ea92 <USBD_StdEPReq+0x146>
 800ea76:	7bbb      	ldrb	r3, [r7, #14]
 800ea78:	2b80      	cmp	r3, #128	; 0x80
 800ea7a:	d00a      	beq.n	800ea92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ea7c:	7bbb      	ldrb	r3, [r7, #14]
 800ea7e:	4619      	mov	r1, r3
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f001 f927 	bl	800fcd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea86:	2180      	movs	r1, #128	; 0x80
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f001 f923 	bl	800fcd4 <USBD_LL_StallEP>
 800ea8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea90:	e040      	b.n	800eb14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ea92:	6839      	ldr	r1, [r7, #0]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 fc68 	bl	800f36a <USBD_CtlError>
              break;
 800ea9a:	e03b      	b.n	800eb14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	885b      	ldrh	r3, [r3, #2]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d136      	bne.n	800eb12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eaa4:	7bbb      	ldrb	r3, [r7, #14]
 800eaa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d004      	beq.n	800eab8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eaae:	7bbb      	ldrb	r3, [r7, #14]
 800eab0:	4619      	mov	r1, r3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f001 f92d 	bl	800fd12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 fd21 	bl	800f500 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800eabe:	7bbb      	ldrb	r3, [r7, #14]
 800eac0:	4619      	mov	r1, r3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7ff fde2 	bl	800e68c <USBD_CoreFindEP>
 800eac8:	4603      	mov	r3, r0
 800eaca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eacc:	7b7b      	ldrb	r3, [r7, #13]
 800eace:	2bff      	cmp	r3, #255	; 0xff
 800ead0:	d01f      	beq.n	800eb12 <USBD_StdEPReq+0x1c6>
 800ead2:	7b7b      	ldrb	r3, [r7, #13]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d11c      	bne.n	800eb12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ead8:	7b7a      	ldrb	r2, [r7, #13]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800eae0:	7b7a      	ldrb	r2, [r7, #13]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	32ae      	adds	r2, #174	; 0xae
 800eae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d010      	beq.n	800eb12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eaf0:	7b7a      	ldrb	r2, [r7, #13]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	32ae      	adds	r2, #174	; 0xae
 800eaf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	6839      	ldr	r1, [r7, #0]
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	4798      	blx	r3
 800eb02:	4603      	mov	r3, r0
 800eb04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800eb06:	e004      	b.n	800eb12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 fc2d 	bl	800f36a <USBD_CtlError>
              break;
 800eb10:	e000      	b.n	800eb14 <USBD_StdEPReq+0x1c8>
              break;
 800eb12:	bf00      	nop
          }
          break;
 800eb14:	e0ab      	b.n	800ec6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d002      	beq.n	800eb28 <USBD_StdEPReq+0x1dc>
 800eb22:	2b03      	cmp	r3, #3
 800eb24:	d032      	beq.n	800eb8c <USBD_StdEPReq+0x240>
 800eb26:	e097      	b.n	800ec58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb28:	7bbb      	ldrb	r3, [r7, #14]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d007      	beq.n	800eb3e <USBD_StdEPReq+0x1f2>
 800eb2e:	7bbb      	ldrb	r3, [r7, #14]
 800eb30:	2b80      	cmp	r3, #128	; 0x80
 800eb32:	d004      	beq.n	800eb3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800eb34:	6839      	ldr	r1, [r7, #0]
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 fc17 	bl	800f36a <USBD_CtlError>
                break;
 800eb3c:	e091      	b.n	800ec62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	da0b      	bge.n	800eb5e <USBD_StdEPReq+0x212>
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
 800eb48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	4413      	add	r3, r2
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	3310      	adds	r3, #16
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	4413      	add	r3, r2
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	e00b      	b.n	800eb76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eb5e:	7bbb      	ldrb	r3, [r7, #14]
 800eb60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eb64:	4613      	mov	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4413      	add	r3, r2
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	4413      	add	r3, r2
 800eb74:	3304      	adds	r3, #4
 800eb76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	2202      	movs	r2, #2
 800eb82:	4619      	mov	r1, r3
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 fc61 	bl	800f44c <USBD_CtlSendData>
              break;
 800eb8a:	e06a      	b.n	800ec62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eb8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	da11      	bge.n	800ebb8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eb94:	7bbb      	ldrb	r3, [r7, #14]
 800eb96:	f003 020f 	and.w	r2, r3, #15
 800eb9a:	6879      	ldr	r1, [r7, #4]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4413      	add	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	440b      	add	r3, r1
 800eba6:	3324      	adds	r3, #36	; 0x24
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d117      	bne.n	800ebde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ebae:	6839      	ldr	r1, [r7, #0]
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 fbda 	bl	800f36a <USBD_CtlError>
                  break;
 800ebb6:	e054      	b.n	800ec62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
 800ebba:	f003 020f 	and.w	r2, r3, #15
 800ebbe:	6879      	ldr	r1, [r7, #4]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	4413      	add	r3, r2
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	440b      	add	r3, r1
 800ebca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d104      	bne.n	800ebde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ebd4:	6839      	ldr	r1, [r7, #0]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 fbc7 	bl	800f36a <USBD_CtlError>
                  break;
 800ebdc:	e041      	b.n	800ec62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	da0b      	bge.n	800ebfe <USBD_StdEPReq+0x2b2>
 800ebe6:	7bbb      	ldrb	r3, [r7, #14]
 800ebe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebec:	4613      	mov	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4413      	add	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	3310      	adds	r3, #16
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	e00b      	b.n	800ec16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ebfe:	7bbb      	ldrb	r3, [r7, #14]
 800ec00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec04:	4613      	mov	r3, r2
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	4413      	add	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	4413      	add	r3, r2
 800ec14:	3304      	adds	r3, #4
 800ec16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ec18:	7bbb      	ldrb	r3, [r7, #14]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d002      	beq.n	800ec24 <USBD_StdEPReq+0x2d8>
 800ec1e:	7bbb      	ldrb	r3, [r7, #14]
 800ec20:	2b80      	cmp	r3, #128	; 0x80
 800ec22:	d103      	bne.n	800ec2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	2200      	movs	r2, #0
 800ec28:	601a      	str	r2, [r3, #0]
 800ec2a:	e00e      	b.n	800ec4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f001 f88d 	bl	800fd50 <USBD_LL_IsStallEP>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	601a      	str	r2, [r3, #0]
 800ec42:	e002      	b.n	800ec4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	2200      	movs	r2, #0
 800ec48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	2202      	movs	r2, #2
 800ec4e:	4619      	mov	r1, r3
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fbfb 	bl	800f44c <USBD_CtlSendData>
              break;
 800ec56:	e004      	b.n	800ec62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ec58:	6839      	ldr	r1, [r7, #0]
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 fb85 	bl	800f36a <USBD_CtlError>
              break;
 800ec60:	bf00      	nop
          }
          break;
 800ec62:	e004      	b.n	800ec6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fb7f 	bl	800f36a <USBD_CtlError>
          break;
 800ec6c:	bf00      	nop
      }
      break;
 800ec6e:	e005      	b.n	800ec7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ec70:	6839      	ldr	r1, [r7, #0]
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 fb79 	bl	800f36a <USBD_CtlError>
      break;
 800ec78:	e000      	b.n	800ec7c <USBD_StdEPReq+0x330>
      break;
 800ec7a:	bf00      	nop
  }

  return ret;
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
	...

0800ec88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec92:	2300      	movs	r3, #0
 800ec94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ec96:	2300      	movs	r3, #0
 800ec98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	885b      	ldrh	r3, [r3, #2]
 800eca2:	0a1b      	lsrs	r3, r3, #8
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	3b01      	subs	r3, #1
 800eca8:	2b0e      	cmp	r3, #14
 800ecaa:	f200 8152 	bhi.w	800ef52 <USBD_GetDescriptor+0x2ca>
 800ecae:	a201      	add	r2, pc, #4	; (adr r2, 800ecb4 <USBD_GetDescriptor+0x2c>)
 800ecb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb4:	0800ed25 	.word	0x0800ed25
 800ecb8:	0800ed3d 	.word	0x0800ed3d
 800ecbc:	0800ed7d 	.word	0x0800ed7d
 800ecc0:	0800ef53 	.word	0x0800ef53
 800ecc4:	0800ef53 	.word	0x0800ef53
 800ecc8:	0800eef3 	.word	0x0800eef3
 800eccc:	0800ef1f 	.word	0x0800ef1f
 800ecd0:	0800ef53 	.word	0x0800ef53
 800ecd4:	0800ef53 	.word	0x0800ef53
 800ecd8:	0800ef53 	.word	0x0800ef53
 800ecdc:	0800ef53 	.word	0x0800ef53
 800ece0:	0800ef53 	.word	0x0800ef53
 800ece4:	0800ef53 	.word	0x0800ef53
 800ece8:	0800ef53 	.word	0x0800ef53
 800ecec:	0800ecf1 	.word	0x0800ecf1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecf6:	69db      	ldr	r3, [r3, #28]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00b      	beq.n	800ed14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed02:	69db      	ldr	r3, [r3, #28]
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	7c12      	ldrb	r2, [r2, #16]
 800ed08:	f107 0108 	add.w	r1, r7, #8
 800ed0c:	4610      	mov	r0, r2
 800ed0e:	4798      	blx	r3
 800ed10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ed12:	e126      	b.n	800ef62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fb27 	bl	800f36a <USBD_CtlError>
        err++;
 800ed1c:	7afb      	ldrb	r3, [r7, #11]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	72fb      	strb	r3, [r7, #11]
      break;
 800ed22:	e11e      	b.n	800ef62 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	7c12      	ldrb	r2, [r2, #16]
 800ed30:	f107 0108 	add.w	r1, r7, #8
 800ed34:	4610      	mov	r0, r2
 800ed36:	4798      	blx	r3
 800ed38:	60f8      	str	r0, [r7, #12]
      break;
 800ed3a:	e112      	b.n	800ef62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	7c1b      	ldrb	r3, [r3, #16]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10d      	bne.n	800ed60 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed4c:	f107 0208 	add.w	r2, r7, #8
 800ed50:	4610      	mov	r0, r2
 800ed52:	4798      	blx	r3
 800ed54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	2202      	movs	r2, #2
 800ed5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ed5e:	e100      	b.n	800ef62 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed68:	f107 0208 	add.w	r2, r7, #8
 800ed6c:	4610      	mov	r0, r2
 800ed6e:	4798      	blx	r3
 800ed70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	3301      	adds	r3, #1
 800ed76:	2202      	movs	r2, #2
 800ed78:	701a      	strb	r2, [r3, #0]
      break;
 800ed7a:	e0f2      	b.n	800ef62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	885b      	ldrh	r3, [r3, #2]
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b05      	cmp	r3, #5
 800ed84:	f200 80ac 	bhi.w	800eee0 <USBD_GetDescriptor+0x258>
 800ed88:	a201      	add	r2, pc, #4	; (adr r2, 800ed90 <USBD_GetDescriptor+0x108>)
 800ed8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8e:	bf00      	nop
 800ed90:	0800eda9 	.word	0x0800eda9
 800ed94:	0800eddd 	.word	0x0800eddd
 800ed98:	0800ee11 	.word	0x0800ee11
 800ed9c:	0800ee45 	.word	0x0800ee45
 800eda0:	0800ee79 	.word	0x0800ee79
 800eda4:	0800eead 	.word	0x0800eead
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d00b      	beq.n	800edcc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	7c12      	ldrb	r2, [r2, #16]
 800edc0:	f107 0108 	add.w	r1, r7, #8
 800edc4:	4610      	mov	r0, r2
 800edc6:	4798      	blx	r3
 800edc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edca:	e091      	b.n	800eef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 facb 	bl	800f36a <USBD_CtlError>
            err++;
 800edd4:	7afb      	ldrb	r3, [r7, #11]
 800edd6:	3301      	adds	r3, #1
 800edd8:	72fb      	strb	r3, [r7, #11]
          break;
 800edda:	e089      	b.n	800eef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00b      	beq.n	800ee00 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	7c12      	ldrb	r2, [r2, #16]
 800edf4:	f107 0108 	add.w	r1, r7, #8
 800edf8:	4610      	mov	r0, r2
 800edfa:	4798      	blx	r3
 800edfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800edfe:	e077      	b.n	800eef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fab1 	bl	800f36a <USBD_CtlError>
            err++;
 800ee08:	7afb      	ldrb	r3, [r7, #11]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ee0e:	e06f      	b.n	800eef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00b      	beq.n	800ee34 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	7c12      	ldrb	r2, [r2, #16]
 800ee28:	f107 0108 	add.w	r1, r7, #8
 800ee2c:	4610      	mov	r0, r2
 800ee2e:	4798      	blx	r3
 800ee30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee32:	e05d      	b.n	800eef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 fa97 	bl	800f36a <USBD_CtlError>
            err++;
 800ee3c:	7afb      	ldrb	r3, [r7, #11]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	72fb      	strb	r3, [r7, #11]
          break;
 800ee42:	e055      	b.n	800eef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee4a:	691b      	ldr	r3, [r3, #16]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00b      	beq.n	800ee68 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	7c12      	ldrb	r2, [r2, #16]
 800ee5c:	f107 0108 	add.w	r1, r7, #8
 800ee60:	4610      	mov	r0, r2
 800ee62:	4798      	blx	r3
 800ee64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee66:	e043      	b.n	800eef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ee68:	6839      	ldr	r1, [r7, #0]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fa7d 	bl	800f36a <USBD_CtlError>
            err++;
 800ee70:	7afb      	ldrb	r3, [r7, #11]
 800ee72:	3301      	adds	r3, #1
 800ee74:	72fb      	strb	r3, [r7, #11]
          break;
 800ee76:	e03b      	b.n	800eef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee7e:	695b      	ldr	r3, [r3, #20]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00b      	beq.n	800ee9c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee8a:	695b      	ldr	r3, [r3, #20]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	7c12      	ldrb	r2, [r2, #16]
 800ee90:	f107 0108 	add.w	r1, r7, #8
 800ee94:	4610      	mov	r0, r2
 800ee96:	4798      	blx	r3
 800ee98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee9a:	e029      	b.n	800eef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ee9c:	6839      	ldr	r1, [r7, #0]
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fa63 	bl	800f36a <USBD_CtlError>
            err++;
 800eea4:	7afb      	ldrb	r3, [r7, #11]
 800eea6:	3301      	adds	r3, #1
 800eea8:	72fb      	strb	r3, [r7, #11]
          break;
 800eeaa:	e021      	b.n	800eef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00b      	beq.n	800eed0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eebe:	699b      	ldr	r3, [r3, #24]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	7c12      	ldrb	r2, [r2, #16]
 800eec4:	f107 0108 	add.w	r1, r7, #8
 800eec8:	4610      	mov	r0, r2
 800eeca:	4798      	blx	r3
 800eecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eece:	e00f      	b.n	800eef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eed0:	6839      	ldr	r1, [r7, #0]
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fa49 	bl	800f36a <USBD_CtlError>
            err++;
 800eed8:	7afb      	ldrb	r3, [r7, #11]
 800eeda:	3301      	adds	r3, #1
 800eedc:	72fb      	strb	r3, [r7, #11]
          break;
 800eede:	e007      	b.n	800eef0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fa41 	bl	800f36a <USBD_CtlError>
          err++;
 800eee8:	7afb      	ldrb	r3, [r7, #11]
 800eeea:	3301      	adds	r3, #1
 800eeec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800eeee:	bf00      	nop
      }
      break;
 800eef0:	e037      	b.n	800ef62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7c1b      	ldrb	r3, [r3, #16]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d109      	bne.n	800ef0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef02:	f107 0208 	add.w	r2, r7, #8
 800ef06:	4610      	mov	r0, r2
 800ef08:	4798      	blx	r3
 800ef0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef0c:	e029      	b.n	800ef62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fa2a 	bl	800f36a <USBD_CtlError>
        err++;
 800ef16:	7afb      	ldrb	r3, [r7, #11]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ef1c:	e021      	b.n	800ef62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	7c1b      	ldrb	r3, [r3, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d10d      	bne.n	800ef42 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef2e:	f107 0208 	add.w	r2, r7, #8
 800ef32:	4610      	mov	r0, r2
 800ef34:	4798      	blx	r3
 800ef36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	2207      	movs	r2, #7
 800ef3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ef40:	e00f      	b.n	800ef62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ef42:	6839      	ldr	r1, [r7, #0]
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 fa10 	bl	800f36a <USBD_CtlError>
        err++;
 800ef4a:	7afb      	ldrb	r3, [r7, #11]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ef50:	e007      	b.n	800ef62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ef52:	6839      	ldr	r1, [r7, #0]
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fa08 	bl	800f36a <USBD_CtlError>
      err++;
 800ef5a:	7afb      	ldrb	r3, [r7, #11]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ef60:	bf00      	nop
  }

  if (err != 0U)
 800ef62:	7afb      	ldrb	r3, [r7, #11]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d11e      	bne.n	800efa6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	88db      	ldrh	r3, [r3, #6]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d016      	beq.n	800ef9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ef70:	893b      	ldrh	r3, [r7, #8]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00e      	beq.n	800ef94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	88da      	ldrh	r2, [r3, #6]
 800ef7a:	893b      	ldrh	r3, [r7, #8]
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	bf28      	it	cs
 800ef80:	4613      	movcs	r3, r2
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef86:	893b      	ldrh	r3, [r7, #8]
 800ef88:	461a      	mov	r2, r3
 800ef8a:	68f9      	ldr	r1, [r7, #12]
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f000 fa5d 	bl	800f44c <USBD_CtlSendData>
 800ef92:	e009      	b.n	800efa8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ef94:	6839      	ldr	r1, [r7, #0]
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 f9e7 	bl	800f36a <USBD_CtlError>
 800ef9c:	e004      	b.n	800efa8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 faae 	bl	800f500 <USBD_CtlSendStatus>
 800efa4:	e000      	b.n	800efa8 <USBD_GetDescriptor+0x320>
    return;
 800efa6:	bf00      	nop
  }
}
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop

0800efb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	889b      	ldrh	r3, [r3, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d131      	bne.n	800f026 <USBD_SetAddress+0x76>
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	88db      	ldrh	r3, [r3, #6]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d12d      	bne.n	800f026 <USBD_SetAddress+0x76>
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	885b      	ldrh	r3, [r3, #2]
 800efce:	2b7f      	cmp	r3, #127	; 0x7f
 800efd0:	d829      	bhi.n	800f026 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	885b      	ldrh	r3, [r3, #2]
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	d104      	bne.n	800eff4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 f9bc 	bl	800f36a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eff2:	e01d      	b.n	800f030 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	7bfa      	ldrb	r2, [r7, #15]
 800eff8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800effc:	7bfb      	ldrb	r3, [r7, #15]
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fed2 	bl	800fdaa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 fa7a 	bl	800f500 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d004      	beq.n	800f01c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2202      	movs	r2, #2
 800f016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f01a:	e009      	b.n	800f030 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f024:	e004      	b.n	800f030 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f026:	6839      	ldr	r1, [r7, #0]
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 f99e 	bl	800f36a <USBD_CtlError>
  }
}
 800f02e:	bf00      	nop
 800f030:	bf00      	nop
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	885b      	ldrh	r3, [r3, #2]
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	4b4e      	ldr	r3, [pc, #312]	; (800f188 <USBD_SetConfig+0x150>)
 800f04e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f050:	4b4d      	ldr	r3, [pc, #308]	; (800f188 <USBD_SetConfig+0x150>)
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d905      	bls.n	800f064 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f058:	6839      	ldr	r1, [r7, #0]
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 f985 	bl	800f36a <USBD_CtlError>
    return USBD_FAIL;
 800f060:	2303      	movs	r3, #3
 800f062:	e08c      	b.n	800f17e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d002      	beq.n	800f076 <USBD_SetConfig+0x3e>
 800f070:	2b03      	cmp	r3, #3
 800f072:	d029      	beq.n	800f0c8 <USBD_SetConfig+0x90>
 800f074:	e075      	b.n	800f162 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f076:	4b44      	ldr	r3, [pc, #272]	; (800f188 <USBD_SetConfig+0x150>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d020      	beq.n	800f0c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f07e:	4b42      	ldr	r3, [pc, #264]	; (800f188 <USBD_SetConfig+0x150>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	461a      	mov	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f088:	4b3f      	ldr	r3, [pc, #252]	; (800f188 <USBD_SetConfig+0x150>)
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7ff f849 	bl	800e126 <USBD_SetClassConfig>
 800f094:	4603      	mov	r3, r0
 800f096:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d008      	beq.n	800f0b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f09e:	6839      	ldr	r1, [r7, #0]
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f962 	bl	800f36a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2202      	movs	r2, #2
 800f0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f0ae:	e065      	b.n	800f17c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fa25 	bl	800f500 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2203      	movs	r2, #3
 800f0ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f0be:	e05d      	b.n	800f17c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f000 fa1d 	bl	800f500 <USBD_CtlSendStatus>
      break;
 800f0c6:	e059      	b.n	800f17c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f0c8:	4b2f      	ldr	r3, [pc, #188]	; (800f188 <USBD_SetConfig+0x150>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d112      	bne.n	800f0f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2202      	movs	r2, #2
 800f0d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f0d8:	4b2b      	ldr	r3, [pc, #172]	; (800f188 <USBD_SetConfig+0x150>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f0e2:	4b29      	ldr	r3, [pc, #164]	; (800f188 <USBD_SetConfig+0x150>)
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff f838 	bl	800e15e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 fa06 	bl	800f500 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f0f4:	e042      	b.n	800f17c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f0f6:	4b24      	ldr	r3, [pc, #144]	; (800f188 <USBD_SetConfig+0x150>)
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d02a      	beq.n	800f15a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	4619      	mov	r1, r3
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f7ff f826 	bl	800e15e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f112:	4b1d      	ldr	r3, [pc, #116]	; (800f188 <USBD_SetConfig+0x150>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f11c:	4b1a      	ldr	r3, [pc, #104]	; (800f188 <USBD_SetConfig+0x150>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	4619      	mov	r1, r3
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7fe ffff 	bl	800e126 <USBD_SetClassConfig>
 800f128:	4603      	mov	r3, r0
 800f12a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00f      	beq.n	800f152 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 f918 	bl	800f36a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	4619      	mov	r1, r3
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff f80b 	bl	800e15e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2202      	movs	r2, #2
 800f14c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f150:	e014      	b.n	800f17c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f9d4 	bl	800f500 <USBD_CtlSendStatus>
      break;
 800f158:	e010      	b.n	800f17c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f9d0 	bl	800f500 <USBD_CtlSendStatus>
      break;
 800f160:	e00c      	b.n	800f17c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 f900 	bl	800f36a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f16a:	4b07      	ldr	r3, [pc, #28]	; (800f188 <USBD_SetConfig+0x150>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	4619      	mov	r1, r3
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f7fe fff4 	bl	800e15e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f176:	2303      	movs	r3, #3
 800f178:	73fb      	strb	r3, [r7, #15]
      break;
 800f17a:	bf00      	nop
  }

  return ret;
 800f17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	200007c0 	.word	0x200007c0

0800f18c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	88db      	ldrh	r3, [r3, #6]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d004      	beq.n	800f1a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f19e:	6839      	ldr	r1, [r7, #0]
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f8e2 	bl	800f36a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f1a6:	e023      	b.n	800f1f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	dc02      	bgt.n	800f1ba <USBD_GetConfig+0x2e>
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	dc03      	bgt.n	800f1c0 <USBD_GetConfig+0x34>
 800f1b8:	e015      	b.n	800f1e6 <USBD_GetConfig+0x5a>
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d00b      	beq.n	800f1d6 <USBD_GetConfig+0x4a>
 800f1be:	e012      	b.n	800f1e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3308      	adds	r3, #8
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 f93c 	bl	800f44c <USBD_CtlSendData>
        break;
 800f1d4:	e00c      	b.n	800f1f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	3304      	adds	r3, #4
 800f1da:	2201      	movs	r2, #1
 800f1dc:	4619      	mov	r1, r3
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 f934 	bl	800f44c <USBD_CtlSendData>
        break;
 800f1e4:	e004      	b.n	800f1f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 f8be 	bl	800f36a <USBD_CtlError>
        break;
 800f1ee:	bf00      	nop
}
 800f1f0:	bf00      	nop
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	3b01      	subs	r3, #1
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d81e      	bhi.n	800f24e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	88db      	ldrh	r3, [r3, #6]
 800f214:	2b02      	cmp	r3, #2
 800f216:	d004      	beq.n	800f222 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f218:	6839      	ldr	r1, [r7, #0]
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 f8a5 	bl	800f36a <USBD_CtlError>
        break;
 800f220:	e01a      	b.n	800f258 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2201      	movs	r2, #1
 800f226:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d005      	beq.n	800f23e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	f043 0202 	orr.w	r2, r3, #2
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	330c      	adds	r3, #12
 800f242:	2202      	movs	r2, #2
 800f244:	4619      	mov	r1, r3
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f900 	bl	800f44c <USBD_CtlSendData>
      break;
 800f24c:	e004      	b.n	800f258 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 f88a 	bl	800f36a <USBD_CtlError>
      break;
 800f256:	bf00      	nop
  }
}
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	885b      	ldrh	r3, [r3, #2]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d107      	bne.n	800f282 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2201      	movs	r2, #1
 800f276:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 f940 	bl	800f500 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f280:	e013      	b.n	800f2aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	885b      	ldrh	r3, [r3, #2]
 800f286:	2b02      	cmp	r3, #2
 800f288:	d10b      	bne.n	800f2a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	889b      	ldrh	r3, [r3, #4]
 800f28e:	0a1b      	lsrs	r3, r3, #8
 800f290:	b29b      	uxth	r3, r3
 800f292:	b2da      	uxtb	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 f930 	bl	800f500 <USBD_CtlSendStatus>
}
 800f2a0:	e003      	b.n	800f2aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f2a2:	6839      	ldr	r1, [r7, #0]
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f860 	bl	800f36a <USBD_CtlError>
}
 800f2aa:	bf00      	nop
 800f2ac:	3708      	adds	r7, #8
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b082      	sub	sp, #8
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
 800f2ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d80b      	bhi.n	800f2e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	885b      	ldrh	r3, [r3, #2]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d10c      	bne.n	800f2ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 f910 	bl	800f500 <USBD_CtlSendStatus>
      }
      break;
 800f2e0:	e004      	b.n	800f2ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f840 	bl	800f36a <USBD_CtlError>
      break;
 800f2ea:	e000      	b.n	800f2ee <USBD_ClrFeature+0x3c>
      break;
 800f2ec:	bf00      	nop
  }
}
 800f2ee:	bf00      	nop
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b084      	sub	sp, #16
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
 800f2fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	781a      	ldrb	r2, [r3, #0]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	3301      	adds	r3, #1
 800f310:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	781a      	ldrb	r2, [r3, #0]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	3301      	adds	r3, #1
 800f31e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f7ff fa17 	bl	800e754 <SWAPBYTE>
 800f326:	4603      	mov	r3, r0
 800f328:	461a      	mov	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	3301      	adds	r3, #1
 800f332:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	3301      	adds	r3, #1
 800f338:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f7ff fa0a 	bl	800e754 <SWAPBYTE>
 800f340:	4603      	mov	r3, r0
 800f342:	461a      	mov	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	3301      	adds	r3, #1
 800f34c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	3301      	adds	r3, #1
 800f352:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f7ff f9fd 	bl	800e754 <SWAPBYTE>
 800f35a:	4603      	mov	r3, r0
 800f35c:	461a      	mov	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	80da      	strh	r2, [r3, #6]
}
 800f362:	bf00      	nop
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}

0800f36a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b082      	sub	sp, #8
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
 800f372:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f374:	2180      	movs	r1, #128	; 0x80
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fcac 	bl	800fcd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f37c:	2100      	movs	r1, #0
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fca8 	bl	800fcd4 <USBD_LL_StallEP>
}
 800f384:	bf00      	nop
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f398:	2300      	movs	r3, #0
 800f39a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d036      	beq.n	800f410 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f3a6:	6938      	ldr	r0, [r7, #16]
 800f3a8:	f000 f836 	bl	800f418 <USBD_GetLen>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	005b      	lsls	r3, r3, #1
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f3ba:	7dfb      	ldrb	r3, [r7, #23]
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	4413      	add	r3, r2
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	7812      	ldrb	r2, [r2, #0]
 800f3c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800f3c6:	7dfb      	ldrb	r3, [r7, #23]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f3cc:	7dfb      	ldrb	r3, [r7, #23]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	2203      	movs	r2, #3
 800f3d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800f3d6:	7dfb      	ldrb	r3, [r7, #23]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f3dc:	e013      	b.n	800f406 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f3de:	7dfb      	ldrb	r3, [r7, #23]
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	693a      	ldr	r2, [r7, #16]
 800f3e6:	7812      	ldrb	r2, [r2, #0]
 800f3e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	613b      	str	r3, [r7, #16]
    idx++;
 800f3f0:	7dfb      	ldrb	r3, [r7, #23]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f3f6:	7dfb      	ldrb	r3, [r7, #23]
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800f400:	7dfb      	ldrb	r3, [r7, #23]
 800f402:	3301      	adds	r3, #1
 800f404:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1e7      	bne.n	800f3de <USBD_GetString+0x52>
 800f40e:	e000      	b.n	800f412 <USBD_GetString+0x86>
    return;
 800f410:	bf00      	nop
  }
}
 800f412:	3718      	adds	r7, #24
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f420:	2300      	movs	r3, #0
 800f422:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f428:	e005      	b.n	800f436 <USBD_GetLen+0x1e>
  {
    len++;
 800f42a:	7bfb      	ldrb	r3, [r7, #15]
 800f42c:	3301      	adds	r3, #1
 800f42e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	3301      	adds	r3, #1
 800f434:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1f5      	bne.n	800f42a <USBD_GetLen+0x12>
  }

  return len;
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3714      	adds	r7, #20
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2202      	movs	r2, #2
 800f45c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	2100      	movs	r1, #0
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f000 fcb8 	bl	800fde8 <USBD_LL_Transmit>

  return USBD_OK;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	60f8      	str	r0, [r7, #12]
 800f48a:	60b9      	str	r1, [r7, #8]
 800f48c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	2100      	movs	r1, #0
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f000 fca7 	bl	800fde8 <USBD_LL_Transmit>

  return USBD_OK;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2203      	movs	r2, #3
 800f4b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f000 fcab 	bl	800fe2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b084      	sub	sp, #16
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	60f8      	str	r0, [r7, #12]
 800f4e6:	60b9      	str	r1, [r7, #8]
 800f4e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f000 fc9a 	bl	800fe2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3710      	adds	r7, #16
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2204      	movs	r2, #4
 800f50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f510:	2300      	movs	r3, #0
 800f512:	2200      	movs	r2, #0
 800f514:	2100      	movs	r1, #0
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 fc66 	bl	800fde8 <USBD_LL_Transmit>

  return USBD_OK;
 800f51c:	2300      	movs	r3, #0
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b082      	sub	sp, #8
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2205      	movs	r2, #5
 800f532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f536:	2300      	movs	r3, #0
 800f538:	2200      	movs	r2, #0
 800f53a:	2100      	movs	r1, #0
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 fc74 	bl	800fe2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f550:	2200      	movs	r2, #0
 800f552:	4912      	ldr	r1, [pc, #72]	; (800f59c <MX_USB_Device_Init+0x50>)
 800f554:	4812      	ldr	r0, [pc, #72]	; (800f5a0 <MX_USB_Device_Init+0x54>)
 800f556:	f7fe fd69 	bl	800e02c <USBD_Init>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f560:	f7f1 fdc0 	bl	80010e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f564:	490f      	ldr	r1, [pc, #60]	; (800f5a4 <MX_USB_Device_Init+0x58>)
 800f566:	480e      	ldr	r0, [pc, #56]	; (800f5a0 <MX_USB_Device_Init+0x54>)
 800f568:	f7fe fd90 	bl	800e08c <USBD_RegisterClass>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f572:	f7f1 fdb7 	bl	80010e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f576:	490c      	ldr	r1, [pc, #48]	; (800f5a8 <MX_USB_Device_Init+0x5c>)
 800f578:	4809      	ldr	r0, [pc, #36]	; (800f5a0 <MX_USB_Device_Init+0x54>)
 800f57a:	f7fe fcc7 	bl	800df0c <USBD_CDC_RegisterInterface>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d001      	beq.n	800f588 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f584:	f7f1 fdae 	bl	80010e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f588:	4805      	ldr	r0, [pc, #20]	; (800f5a0 <MX_USB_Device_Init+0x54>)
 800f58a:	f7fe fdb5 	bl	800e0f8 <USBD_Start>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d001      	beq.n	800f598 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f594:	f7f1 fda6 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f598:	bf00      	nop
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	200000ac 	.word	0x200000ac
 800f5a0:	200007c4 	.word	0x200007c4
 800f5a4:	20000018 	.word	0x20000018
 800f5a8:	20000098 	.word	0x20000098

0800f5ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	4905      	ldr	r1, [pc, #20]	; (800f5c8 <CDC_Init_FS+0x1c>)
 800f5b4:	4805      	ldr	r0, [pc, #20]	; (800f5cc <CDC_Init_FS+0x20>)
 800f5b6:	f7fe fcc3 	bl	800df40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f5ba:	4905      	ldr	r1, [pc, #20]	; (800f5d0 <CDC_Init_FS+0x24>)
 800f5bc:	4803      	ldr	r0, [pc, #12]	; (800f5cc <CDC_Init_FS+0x20>)
 800f5be:	f7fe fce1 	bl	800df84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f5c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	200012a0 	.word	0x200012a0
 800f5cc:	200007c4 	.word	0x200007c4
 800f5d0:	20000aa0 	.word	0x20000aa0

0800f5d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f5d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	6039      	str	r1, [r7, #0]
 800f5ee:	71fb      	strb	r3, [r7, #7]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	2b23      	cmp	r3, #35	; 0x23
 800f5f8:	d84a      	bhi.n	800f690 <CDC_Control_FS+0xac>
 800f5fa:	a201      	add	r2, pc, #4	; (adr r2, 800f600 <CDC_Control_FS+0x1c>)
 800f5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f600:	0800f691 	.word	0x0800f691
 800f604:	0800f691 	.word	0x0800f691
 800f608:	0800f691 	.word	0x0800f691
 800f60c:	0800f691 	.word	0x0800f691
 800f610:	0800f691 	.word	0x0800f691
 800f614:	0800f691 	.word	0x0800f691
 800f618:	0800f691 	.word	0x0800f691
 800f61c:	0800f691 	.word	0x0800f691
 800f620:	0800f691 	.word	0x0800f691
 800f624:	0800f691 	.word	0x0800f691
 800f628:	0800f691 	.word	0x0800f691
 800f62c:	0800f691 	.word	0x0800f691
 800f630:	0800f691 	.word	0x0800f691
 800f634:	0800f691 	.word	0x0800f691
 800f638:	0800f691 	.word	0x0800f691
 800f63c:	0800f691 	.word	0x0800f691
 800f640:	0800f691 	.word	0x0800f691
 800f644:	0800f691 	.word	0x0800f691
 800f648:	0800f691 	.word	0x0800f691
 800f64c:	0800f691 	.word	0x0800f691
 800f650:	0800f691 	.word	0x0800f691
 800f654:	0800f691 	.word	0x0800f691
 800f658:	0800f691 	.word	0x0800f691
 800f65c:	0800f691 	.word	0x0800f691
 800f660:	0800f691 	.word	0x0800f691
 800f664:	0800f691 	.word	0x0800f691
 800f668:	0800f691 	.word	0x0800f691
 800f66c:	0800f691 	.word	0x0800f691
 800f670:	0800f691 	.word	0x0800f691
 800f674:	0800f691 	.word	0x0800f691
 800f678:	0800f691 	.word	0x0800f691
 800f67c:	0800f691 	.word	0x0800f691
 800f680:	0800f691 	.word	0x0800f691
 800f684:	0800f691 	.word	0x0800f691
 800f688:	0800f691 	.word	0x0800f691
 800f68c:	0800f691 	.word	0x0800f691
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f690:	bf00      	nop
  }

  return (USBD_OK);
 800f692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f694:	4618      	mov	r0, r3
 800f696:	370c      	adds	r7, #12
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f6aa:	6879      	ldr	r1, [r7, #4]
 800f6ac:	4805      	ldr	r0, [pc, #20]	; (800f6c4 <CDC_Receive_FS+0x24>)
 800f6ae:	f7fe fc69 	bl	800df84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f6b2:	4804      	ldr	r0, [pc, #16]	; (800f6c4 <CDC_Receive_FS+0x24>)
 800f6b4:	f7fe fc84 	bl	800dfc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f6b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	200007c4 	.word	0x200007c4

0800f6c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	371c      	adds	r7, #28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
	...

0800f6ec <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	6039      	str	r1, [r7, #0]
 800f6f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	2212      	movs	r2, #18
 800f6fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f6fe:	4b03      	ldr	r3, [pc, #12]	; (800f70c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f700:	4618      	mov	r0, r3
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	200000cc 	.word	0x200000cc

0800f710 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	6039      	str	r1, [r7, #0]
 800f71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2204      	movs	r2, #4
 800f720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f722:	4b03      	ldr	r3, [pc, #12]	; (800f730 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f724:	4618      	mov	r0, r3
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr
 800f730:	200000e0 	.word	0x200000e0

0800f734 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	4603      	mov	r3, r0
 800f73c:	6039      	str	r1, [r7, #0]
 800f73e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f740:	79fb      	ldrb	r3, [r7, #7]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d105      	bne.n	800f752 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	4907      	ldr	r1, [pc, #28]	; (800f768 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f74a:	4808      	ldr	r0, [pc, #32]	; (800f76c <USBD_CDC_ProductStrDescriptor+0x38>)
 800f74c:	f7ff fe1e 	bl	800f38c <USBD_GetString>
 800f750:	e004      	b.n	800f75c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	4904      	ldr	r1, [pc, #16]	; (800f768 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f756:	4805      	ldr	r0, [pc, #20]	; (800f76c <USBD_CDC_ProductStrDescriptor+0x38>)
 800f758:	f7ff fe18 	bl	800f38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f75c:	4b02      	ldr	r3, [pc, #8]	; (800f768 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3708      	adds	r7, #8
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	20001aa0 	.word	0x20001aa0
 800f76c:	08010004 	.word	0x08010004

0800f770 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	4603      	mov	r3, r0
 800f778:	6039      	str	r1, [r7, #0]
 800f77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f77c:	683a      	ldr	r2, [r7, #0]
 800f77e:	4904      	ldr	r1, [pc, #16]	; (800f790 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f780:	4804      	ldr	r0, [pc, #16]	; (800f794 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f782:	f7ff fe03 	bl	800f38c <USBD_GetString>
  return USBD_StrDesc;
 800f786:	4b02      	ldr	r3, [pc, #8]	; (800f790 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	20001aa0 	.word	0x20001aa0
 800f794:	0801001c 	.word	0x0801001c

0800f798 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	6039      	str	r1, [r7, #0]
 800f7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	221a      	movs	r2, #26
 800f7a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f7aa:	f000 f843 	bl	800f834 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f7ae:	4b02      	ldr	r3, [pc, #8]	; (800f7b8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	200000e4 	.word	0x200000e4

0800f7bc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	6039      	str	r1, [r7, #0]
 800f7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f7c8:	79fb      	ldrb	r3, [r7, #7]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d105      	bne.n	800f7da <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	4907      	ldr	r1, [pc, #28]	; (800f7f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f7d2:	4808      	ldr	r0, [pc, #32]	; (800f7f4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f7d4:	f7ff fdda 	bl	800f38c <USBD_GetString>
 800f7d8:	e004      	b.n	800f7e4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	4904      	ldr	r1, [pc, #16]	; (800f7f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f7de:	4805      	ldr	r0, [pc, #20]	; (800f7f4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f7e0:	f7ff fdd4 	bl	800f38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7e4:	4b02      	ldr	r3, [pc, #8]	; (800f7f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	20001aa0 	.word	0x20001aa0
 800f7f4:	08010030 	.word	0x08010030

0800f7f8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	4603      	mov	r3, r0
 800f800:	6039      	str	r1, [r7, #0]
 800f802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f804:	79fb      	ldrb	r3, [r7, #7]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d105      	bne.n	800f816 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f80a:	683a      	ldr	r2, [r7, #0]
 800f80c:	4907      	ldr	r1, [pc, #28]	; (800f82c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f80e:	4808      	ldr	r0, [pc, #32]	; (800f830 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f810:	f7ff fdbc 	bl	800f38c <USBD_GetString>
 800f814:	e004      	b.n	800f820 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f816:	683a      	ldr	r2, [r7, #0]
 800f818:	4904      	ldr	r1, [pc, #16]	; (800f82c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f81a:	4805      	ldr	r0, [pc, #20]	; (800f830 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f81c:	f7ff fdb6 	bl	800f38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f820:	4b02      	ldr	r3, [pc, #8]	; (800f82c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f822:	4618      	mov	r0, r3
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	20001aa0 	.word	0x20001aa0
 800f830:	0801003c 	.word	0x0801003c

0800f834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f83a:	4b0f      	ldr	r3, [pc, #60]	; (800f878 <Get_SerialNum+0x44>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f840:	4b0e      	ldr	r3, [pc, #56]	; (800f87c <Get_SerialNum+0x48>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f846:	4b0e      	ldr	r3, [pc, #56]	; (800f880 <Get_SerialNum+0x4c>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4413      	add	r3, r2
 800f852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d009      	beq.n	800f86e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f85a:	2208      	movs	r2, #8
 800f85c:	4909      	ldr	r1, [pc, #36]	; (800f884 <Get_SerialNum+0x50>)
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f000 f814 	bl	800f88c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f864:	2204      	movs	r2, #4
 800f866:	4908      	ldr	r1, [pc, #32]	; (800f888 <Get_SerialNum+0x54>)
 800f868:	68b8      	ldr	r0, [r7, #8]
 800f86a:	f000 f80f 	bl	800f88c <IntToUnicode>
  }
}
 800f86e:	bf00      	nop
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	0bfa0590 	.word	0x0bfa0590
 800f87c:	0bfa0594 	.word	0x0bfa0594
 800f880:	0bfa0598 	.word	0x0bfa0598
 800f884:	200000e6 	.word	0x200000e6
 800f888:	200000f6 	.word	0x200000f6

0800f88c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b087      	sub	sp, #28
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	4613      	mov	r3, r2
 800f898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f89a:	2300      	movs	r3, #0
 800f89c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f89e:	2300      	movs	r3, #0
 800f8a0:	75fb      	strb	r3, [r7, #23]
 800f8a2:	e027      	b.n	800f8f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	0f1b      	lsrs	r3, r3, #28
 800f8a8:	2b09      	cmp	r3, #9
 800f8aa:	d80b      	bhi.n	800f8c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	0f1b      	lsrs	r3, r3, #28
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	005b      	lsls	r3, r3, #1
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	440b      	add	r3, r1
 800f8bc:	3230      	adds	r2, #48	; 0x30
 800f8be:	b2d2      	uxtb	r2, r2
 800f8c0:	701a      	strb	r2, [r3, #0]
 800f8c2:	e00a      	b.n	800f8da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	0f1b      	lsrs	r3, r3, #28
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	7dfb      	ldrb	r3, [r7, #23]
 800f8cc:	005b      	lsls	r3, r3, #1
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	440b      	add	r3, r1
 800f8d4:	3237      	adds	r2, #55	; 0x37
 800f8d6:	b2d2      	uxtb	r2, r2
 800f8d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	011b      	lsls	r3, r3, #4
 800f8de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f8e0:	7dfb      	ldrb	r3, [r7, #23]
 800f8e2:	005b      	lsls	r3, r3, #1
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f8ee:	7dfb      	ldrb	r3, [r7, #23]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	75fb      	strb	r3, [r7, #23]
 800f8f4:	7dfa      	ldrb	r2, [r7, #23]
 800f8f6:	79fb      	ldrb	r3, [r7, #7]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d3d3      	bcc.n	800f8a4 <IntToUnicode+0x18>
  }
}
 800f8fc:	bf00      	nop
 800f8fe:	bf00      	nop
 800f900:	371c      	adds	r7, #28
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
	...

0800f90c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b0ae      	sub	sp, #184	; 0xb8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f918:	2200      	movs	r2, #0
 800f91a:	601a      	str	r2, [r3, #0]
 800f91c:	605a      	str	r2, [r3, #4]
 800f91e:	609a      	str	r2, [r3, #8]
 800f920:	60da      	str	r2, [r3, #12]
 800f922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f924:	f107 0310 	add.w	r3, r7, #16
 800f928:	2294      	movs	r2, #148	; 0x94
 800f92a:	2100      	movs	r1, #0
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 fb55 	bl	800ffdc <memset>
  if(pcdHandle->Instance==USB)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4a2e      	ldr	r2, [pc, #184]	; (800f9f0 <HAL_PCD_MspInit+0xe4>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d155      	bne.n	800f9e8 <HAL_PCD_MspInit+0xdc>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f93c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f940:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800f942:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSE;
 800f94a:	2303      	movs	r3, #3
 800f94c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 800f94e:	2306      	movs	r3, #6
 800f950:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800f952:	230c      	movs	r3, #12
 800f954:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800f956:	2307      	movs	r3, #7
 800f958:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800f95a:	2302      	movs	r3, #2
 800f95c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800f95e:	2302      	movs	r3, #2
 800f960:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800f962:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f966:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f968:	f107 0310 	add.w	r3, r7, #16
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7f7 fbb1 	bl	80070d4 <HAL_RCCEx_PeriphCLKConfig>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d001      	beq.n	800f97c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800f978:	f7f1 fbb4 	bl	80010e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f97c:	4b1d      	ldr	r3, [pc, #116]	; (800f9f4 <HAL_PCD_MspInit+0xe8>)
 800f97e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f980:	4a1c      	ldr	r2, [pc, #112]	; (800f9f4 <HAL_PCD_MspInit+0xe8>)
 800f982:	f043 0301 	orr.w	r3, r3, #1
 800f986:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f988:	4b1a      	ldr	r3, [pc, #104]	; (800f9f4 <HAL_PCD_MspInit+0xe8>)
 800f98a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f98c:	f003 0301 	and.w	r3, r3, #1
 800f990:	60fb      	str	r3, [r7, #12]
 800f992:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f994:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f99c:	2302      	movs	r3, #2
 800f99e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800f9ae:	230a      	movs	r3, #10
 800f9b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f9b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	480f      	ldr	r0, [pc, #60]	; (800f9f8 <HAL_PCD_MspInit+0xec>)
 800f9bc:	f7f3 fbfe 	bl	80031bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f9c0:	4b0c      	ldr	r3, [pc, #48]	; (800f9f4 <HAL_PCD_MspInit+0xe8>)
 800f9c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9c4:	4a0b      	ldr	r2, [pc, #44]	; (800f9f4 <HAL_PCD_MspInit+0xe8>)
 800f9c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9ca:	65d3      	str	r3, [r2, #92]	; 0x5c
 800f9cc:	4b09      	ldr	r3, [pc, #36]	; (800f9f4 <HAL_PCD_MspInit+0xe8>)
 800f9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f9d4:	60bb      	str	r3, [r7, #8]
 800f9d6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_FS_IRQn, 0, 0);
 800f9d8:	2200      	movs	r2, #0
 800f9da:	2100      	movs	r1, #0
 800f9dc:	2049      	movs	r0, #73	; 0x49
 800f9de:	f7f3 f97e 	bl	8002cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_FS_IRQn);
 800f9e2:	2049      	movs	r0, #73	; 0x49
 800f9e4:	f7f3 f995 	bl	8002d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f9e8:	bf00      	nop
 800f9ea:	37b8      	adds	r7, #184	; 0xb8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	4000d400 	.word	0x4000d400
 800f9f4:	40021000 	.word	0x40021000
 800f9f8:	42020000 	.word	0x42020000

0800f9fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800fa10:	4619      	mov	r1, r3
 800fa12:	4610      	mov	r0, r2
 800fa14:	f7fe fbbd 	bl	800e192 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800fa18:	bf00      	nop
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800fa32:	78fa      	ldrb	r2, [r7, #3]
 800fa34:	6879      	ldr	r1, [r7, #4]
 800fa36:	4613      	mov	r3, r2
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	4413      	add	r3, r2
 800fa3c:	00db      	lsls	r3, r3, #3
 800fa3e:	440b      	add	r3, r1
 800fa40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	78fb      	ldrb	r3, [r7, #3]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	f7fe fbf7 	bl	800e23c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800fa4e:	bf00      	nop
 800fa50:	3708      	adds	r7, #8
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b082      	sub	sp, #8
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	460b      	mov	r3, r1
 800fa60:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800fa68:	78fa      	ldrb	r2, [r7, #3]
 800fa6a:	6879      	ldr	r1, [r7, #4]
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	4413      	add	r3, r2
 800fa72:	00db      	lsls	r3, r3, #3
 800fa74:	440b      	add	r3, r1
 800fa76:	333c      	adds	r3, #60	; 0x3c
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	78fb      	ldrb	r3, [r7, #3]
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	f7fe fc90 	bl	800e3a2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800fa82:	bf00      	nop
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b082      	sub	sp, #8
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fe fdca 	bl	800e632 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800fa9e:	bf00      	nop
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b084      	sub	sp, #16
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800faae:	2301      	movs	r3, #1
 800fab0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d001      	beq.n	800fabe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800faba:	f7f1 fb13 	bl	80010e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fac4:	7bfa      	ldrb	r2, [r7, #15]
 800fac6:	4611      	mov	r1, r2
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fe fd6e 	bl	800e5aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fe fd16 	bl	800e506 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fada:	bf00      	nop
 800fadc:	3710      	adds	r7, #16
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
	...

0800fae4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fe fd69 	bl	800e5ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	699b      	ldr	r3, [r3, #24]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d005      	beq.n	800fb0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb00:	4b04      	ldr	r3, [pc, #16]	; (800fb14 <HAL_PCD_SuspendCallback+0x30>)
 800fb02:	691b      	ldr	r3, [r3, #16]
 800fb04:	4a03      	ldr	r2, [pc, #12]	; (800fb14 <HAL_PCD_SuspendCallback+0x30>)
 800fb06:	f043 0306 	orr.w	r3, r3, #6
 800fb0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fb0c:	bf00      	nop
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	e000ed00 	.word	0xe000ed00

0800fb18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	699b      	ldr	r3, [r3, #24]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d007      	beq.n	800fb38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb28:	4b08      	ldr	r3, [pc, #32]	; (800fb4c <HAL_PCD_ResumeCallback+0x34>)
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	4a07      	ldr	r2, [pc, #28]	; (800fb4c <HAL_PCD_ResumeCallback+0x34>)
 800fb2e:	f023 0306 	bic.w	r3, r3, #6
 800fb32:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fb34:	f000 f9fc 	bl	800ff30 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fe fd5f 	bl	800e602 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fb44:	bf00      	nop
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	e000ed00 	.word	0xe000ed00

0800fb50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fb58:	4a2c      	ldr	r2, [pc, #176]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a2a      	ldr	r2, [pc, #168]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800fb68:	f7f6 fab6 	bl	80060d8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800fb6c:	4b27      	ldr	r3, [pc, #156]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb6e:	4a28      	ldr	r2, [pc, #160]	; (800fc10 <USBD_LL_Init+0xc0>)
 800fb70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fb72:	4b26      	ldr	r3, [pc, #152]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb74:	2208      	movs	r2, #8
 800fb76:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fb78:	4b24      	ldr	r3, [pc, #144]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb7a:	2202      	movs	r2, #2
 800fb7c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb7e:	4b23      	ldr	r3, [pc, #140]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb80:	2202      	movs	r2, #2
 800fb82:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fb84:	4b21      	ldr	r3, [pc, #132]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fb8a:	4b20      	ldr	r3, [pc, #128]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fb90:	4b1e      	ldr	r3, [pc, #120]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fb96:	4b1d      	ldr	r3, [pc, #116]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fb9c:	481b      	ldr	r0, [pc, #108]	; (800fc0c <USBD_LL_Init+0xbc>)
 800fb9e:	f7f4 fced 	bl	800457c <HAL_PCD_Init>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d001      	beq.n	800fbac <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800fba8:	f7f1 fa9c 	bl	80010e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbb2:	2318      	movs	r3, #24
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	f7f6 f9b6 	bl	8005f28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbc2:	2358      	movs	r3, #88	; 0x58
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	2180      	movs	r1, #128	; 0x80
 800fbc8:	f7f6 f9ae 	bl	8005f28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbd2:	23c0      	movs	r3, #192	; 0xc0
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	2181      	movs	r1, #129	; 0x81
 800fbd8:	f7f6 f9a6 	bl	8005f28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbe2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	2101      	movs	r1, #1
 800fbea:	f7f6 f99d 	bl	8005f28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	2182      	movs	r1, #130	; 0x82
 800fbfc:	f7f6 f994 	bl	8005f28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	20001ca0 	.word	0x20001ca0
 800fc10:	4000d400 	.word	0x4000d400

0800fc14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7f4 fd7f 	bl	800472e <HAL_PCD_Start>
 800fc30:	4603      	mov	r3, r0
 800fc32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc34:	7bfb      	ldrb	r3, [r7, #15]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 f980 	bl	800ff3c <USBD_Get_USB_Status>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc40:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b084      	sub	sp, #16
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
 800fc52:	4608      	mov	r0, r1
 800fc54:	4611      	mov	r1, r2
 800fc56:	461a      	mov	r2, r3
 800fc58:	4603      	mov	r3, r0
 800fc5a:	70fb      	strb	r3, [r7, #3]
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	70bb      	strb	r3, [r7, #2]
 800fc60:	4613      	mov	r3, r2
 800fc62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc72:	78bb      	ldrb	r3, [r7, #2]
 800fc74:	883a      	ldrh	r2, [r7, #0]
 800fc76:	78f9      	ldrb	r1, [r7, #3]
 800fc78:	f7f4 fec7 	bl	8004a0a <HAL_PCD_EP_Open>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc80:	7bfb      	ldrb	r3, [r7, #15]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 f95a 	bl	800ff3c <USBD_Get_USB_Status>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b084      	sub	sp, #16
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	460b      	mov	r3, r1
 800fca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fca6:	2300      	movs	r3, #0
 800fca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcb0:	78fa      	ldrb	r2, [r7, #3]
 800fcb2:	4611      	mov	r1, r2
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7f4 ff05 	bl	8004ac4 <HAL_PCD_EP_Close>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcbe:	7bfb      	ldrb	r3, [r7, #15]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f000 f93b 	bl	800ff3c <USBD_Get_USB_Status>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcca:	7bbb      	ldrb	r3, [r7, #14]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3710      	adds	r7, #16
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fce4:	2300      	movs	r3, #0
 800fce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcee:	78fa      	ldrb	r2, [r7, #3]
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7f4 ffae 	bl	8004c54 <HAL_PCD_EP_SetStall>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f000 f91c 	bl	800ff3c <USBD_Get_USB_Status>
 800fd04:	4603      	mov	r3, r0
 800fd06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b084      	sub	sp, #16
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd2c:	78fa      	ldrb	r2, [r7, #3]
 800fd2e:	4611      	mov	r1, r2
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7f4 ffe1 	bl	8004cf8 <HAL_PCD_EP_ClrStall>
 800fd36:	4603      	mov	r3, r0
 800fd38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f000 f8fd 	bl	800ff3c <USBD_Get_USB_Status>
 800fd42:	4603      	mov	r3, r0
 800fd44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd46:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fd64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	da0c      	bge.n	800fd86 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fd6c:	78fb      	ldrb	r3, [r7, #3]
 800fd6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd72:	68f9      	ldr	r1, [r7, #12]
 800fd74:	1c5a      	adds	r2, r3, #1
 800fd76:	4613      	mov	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	4413      	add	r3, r2
 800fd7c:	00db      	lsls	r3, r3, #3
 800fd7e:	440b      	add	r3, r1
 800fd80:	3302      	adds	r3, #2
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	e00b      	b.n	800fd9e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fd86:	78fb      	ldrb	r3, [r7, #3]
 800fd88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd8c:	68f9      	ldr	r1, [r7, #12]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	00db      	lsls	r3, r3, #3
 800fd96:	440b      	add	r3, r1
 800fd98:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800fd9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3714      	adds	r7, #20
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr

0800fdaa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fdaa:	b580      	push	{r7, lr}
 800fdac:	b084      	sub	sp, #16
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdc4:	78fa      	ldrb	r2, [r7, #3]
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7f4 fdf9 	bl	80049c0 <HAL_PCD_SetAddress>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdd2:	7bfb      	ldrb	r3, [r7, #15]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f000 f8b1 	bl	800ff3c <USBD_Get_USB_Status>
 800fdda:	4603      	mov	r3, r0
 800fddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdde:	7bbb      	ldrb	r3, [r7, #14]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	607a      	str	r2, [r7, #4]
 800fdf2:	603b      	str	r3, [r7, #0]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe06:	7af9      	ldrb	r1, [r7, #11]
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	f7f4 feeb 	bl	8004be6 <HAL_PCD_EP_Transmit>
 800fe10:	4603      	mov	r3, r0
 800fe12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe14:	7dfb      	ldrb	r3, [r7, #23]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f000 f890 	bl	800ff3c <USBD_Get_USB_Status>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe20:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3718      	adds	r7, #24
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b086      	sub	sp, #24
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	607a      	str	r2, [r7, #4]
 800fe34:	603b      	str	r3, [r7, #0]
 800fe36:	460b      	mov	r3, r1
 800fe38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fe48:	7af9      	ldrb	r1, [r7, #11]
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	f7f4 fe81 	bl	8004b54 <HAL_PCD_EP_Receive>
 800fe52:	4603      	mov	r3, r0
 800fe54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe56:	7dfb      	ldrb	r3, [r7, #23]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f000 f86f 	bl	800ff3c <USBD_Get_USB_Status>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fe62:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3718      	adds	r7, #24
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	460b      	mov	r3, r1
 800fe76:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fe7e:	78fa      	ldrb	r2, [r7, #3]
 800fe80:	4611      	mov	r1, r2
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7f4 fe97 	bl	8004bb6 <HAL_PCD_EP_GetRxCount>
 800fe88:	4603      	mov	r3, r0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3708      	adds	r7, #8
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
	...

0800fe94 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800fea0:	78fb      	ldrb	r3, [r7, #3]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d002      	beq.n	800feac <HAL_PCDEx_LPM_Callback+0x18>
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d013      	beq.n	800fed2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800feaa:	e023      	b.n	800fef4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	699b      	ldr	r3, [r3, #24]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d007      	beq.n	800fec4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800feb4:	f000 f83c 	bl	800ff30 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800feb8:	4b10      	ldr	r3, [pc, #64]	; (800fefc <HAL_PCDEx_LPM_Callback+0x68>)
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	4a0f      	ldr	r2, [pc, #60]	; (800fefc <HAL_PCDEx_LPM_Callback+0x68>)
 800febe:	f023 0306 	bic.w	r3, r3, #6
 800fec2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe fb99 	bl	800e602 <USBD_LL_Resume>
    break;
 800fed0:	e010      	b.n	800fef4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe fb76 	bl	800e5ca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	699b      	ldr	r3, [r3, #24]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d005      	beq.n	800fef2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fee6:	4b05      	ldr	r3, [pc, #20]	; (800fefc <HAL_PCDEx_LPM_Callback+0x68>)
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	4a04      	ldr	r2, [pc, #16]	; (800fefc <HAL_PCDEx_LPM_Callback+0x68>)
 800feec:	f043 0306 	orr.w	r3, r3, #6
 800fef0:	6113      	str	r3, [r2, #16]
    break;
 800fef2:	bf00      	nop
}
 800fef4:	bf00      	nop
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	e000ed00 	.word	0xe000ed00

0800ff00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ff08:	4b03      	ldr	r3, [pc, #12]	; (800ff18 <USBD_static_malloc+0x18>)
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	370c      	adds	r7, #12
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	20001f94 	.word	0x20001f94

0800ff1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ff34:	f7f0 fb35 	bl	80005a2 <SystemClock_Config>
}
 800ff38:	bf00      	nop
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	4603      	mov	r3, r0
 800ff44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff46:	2300      	movs	r3, #0
 800ff48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
 800ff4c:	2b03      	cmp	r3, #3
 800ff4e:	d817      	bhi.n	800ff80 <USBD_Get_USB_Status+0x44>
 800ff50:	a201      	add	r2, pc, #4	; (adr r2, 800ff58 <USBD_Get_USB_Status+0x1c>)
 800ff52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff56:	bf00      	nop
 800ff58:	0800ff69 	.word	0x0800ff69
 800ff5c:	0800ff6f 	.word	0x0800ff6f
 800ff60:	0800ff75 	.word	0x0800ff75
 800ff64:	0800ff7b 	.word	0x0800ff7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff6c:	e00b      	b.n	800ff86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	73fb      	strb	r3, [r7, #15]
    break;
 800ff72:	e008      	b.n	800ff86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff74:	2301      	movs	r3, #1
 800ff76:	73fb      	strb	r3, [r7, #15]
    break;
 800ff78:	e005      	b.n	800ff86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff7a:	2303      	movs	r3, #3
 800ff7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff7e:	e002      	b.n	800ff86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ff80:	2303      	movs	r3, #3
 800ff82:	73fb      	strb	r3, [r7, #15]
    break;
 800ff84:	bf00      	nop
  }
  return usb_status;
 800ff86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3714      	adds	r7, #20
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <__libc_init_array>:
 800ff94:	b570      	push	{r4, r5, r6, lr}
 800ff96:	4d0d      	ldr	r5, [pc, #52]	; (800ffcc <__libc_init_array+0x38>)
 800ff98:	2600      	movs	r6, #0
 800ff9a:	4c0d      	ldr	r4, [pc, #52]	; (800ffd0 <__libc_init_array+0x3c>)
 800ff9c:	1b64      	subs	r4, r4, r5
 800ff9e:	10a4      	asrs	r4, r4, #2
 800ffa0:	42a6      	cmp	r6, r4
 800ffa2:	d109      	bne.n	800ffb8 <__libc_init_array+0x24>
 800ffa4:	4d0b      	ldr	r5, [pc, #44]	; (800ffd4 <__libc_init_array+0x40>)
 800ffa6:	2600      	movs	r6, #0
 800ffa8:	4c0b      	ldr	r4, [pc, #44]	; (800ffd8 <__libc_init_array+0x44>)
 800ffaa:	f000 f81f 	bl	800ffec <_init>
 800ffae:	1b64      	subs	r4, r4, r5
 800ffb0:	10a4      	asrs	r4, r4, #2
 800ffb2:	42a6      	cmp	r6, r4
 800ffb4:	d105      	bne.n	800ffc2 <__libc_init_array+0x2e>
 800ffb6:	bd70      	pop	{r4, r5, r6, pc}
 800ffb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffbc:	3601      	adds	r6, #1
 800ffbe:	4798      	blx	r3
 800ffc0:	e7ee      	b.n	800ffa0 <__libc_init_array+0xc>
 800ffc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffc6:	3601      	adds	r6, #1
 800ffc8:	4798      	blx	r3
 800ffca:	e7f2      	b.n	800ffb2 <__libc_init_array+0x1e>
 800ffcc:	080100d4 	.word	0x080100d4
 800ffd0:	080100d4 	.word	0x080100d4
 800ffd4:	080100d4 	.word	0x080100d4
 800ffd8:	080100d8 	.word	0x080100d8

0800ffdc <memset>:
 800ffdc:	4402      	add	r2, r0
 800ffde:	4603      	mov	r3, r0
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d100      	bne.n	800ffe6 <memset+0xa>
 800ffe4:	4770      	bx	lr
 800ffe6:	f803 1b01 	strb.w	r1, [r3], #1
 800ffea:	e7f9      	b.n	800ffe0 <memset+0x4>

0800ffec <_init>:
 800ffec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffee:	bf00      	nop
 800fff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fff2:	bc08      	pop	{r3}
 800fff4:	469e      	mov	lr, r3
 800fff6:	4770      	bx	lr

0800fff8 <_fini>:
 800fff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffa:	bf00      	nop
 800fffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fffe:	bc08      	pop	{r3}
 8010000:	469e      	mov	lr, r3
 8010002:	4770      	bx	lr
