
CPU_L5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015020  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08015218  08015218  00025218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157d4  080157d4  000302d4  2**0
                  CONTENTS
  4 .ARM          00000008  080157d4  080157d4  000257d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157dc  080157dc  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080157dc  080157dc  000257dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157e4  080157e4  000257e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080157e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea8  200002d8  08015abc  000302d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002180  08015abc  00032180  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028aae  00000000  00000000  0003030a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ffc  00000000  00000000  00058db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  0005ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b78  00000000  00000000  0005fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000340fe  00000000  00000000  00061690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025035  00000000  00000000  0009578e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c1b6  00000000  00000000  000ba7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e6979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009660  00000000  00000000  001e69cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002d8 	.word	0x200002d8
 8000214:	00000000 	.word	0x00000000
 8000218:	08015200 	.word	0x08015200

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002dc 	.word	0x200002dc
 8000234:	08015200 	.word	0x08015200

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b9b8 	b.w	8000fd8 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f83c 	bl	8000cec <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2lz>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	f7ff ff0b 	bl	8000aa4 <__aeabi_dcmplt>
 8000c8e:	b928      	cbnz	r0, 8000c9c <__aeabi_d2lz+0x1c>
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c98:	f000 b80a 	b.w	8000cb0 <__aeabi_d2ulz>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ca2:	f000 f805 	bl	8000cb0 <__aeabi_d2ulz>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2ulz>:
 8000cb0:	b5d0      	push	{r4, r6, r7, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <__aeabi_d2ulz+0x34>)
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	460f      	mov	r7, r1
 8000cba:	f7ff fc81 	bl	80005c0 <__aeabi_dmul>
 8000cbe:	f7ff ff57 	bl	8000b70 <__aeabi_d2uiz>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fc02 	bl	80004cc <__aeabi_ui2d>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <__aeabi_d2ulz+0x38>)
 8000ccc:	f7ff fc78 	bl	80005c0 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f7ff faba 	bl	8000250 <__aeabi_dsub>
 8000cdc:	f7ff ff48 	bl	8000b70 <__aeabi_d2uiz>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce4:	3df00000 	.word	0x3df00000
 8000ce8:	41f00000 	.word	0x41f00000

08000cec <__udivmoddi4>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d148      	bne.n	8000d8c <__udivmoddi4+0xa0>
 8000cfa:	428a      	cmp	r2, r1
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	d961      	bls.n	8000dc4 <__udivmoddi4+0xd8>
 8000d00:	fab2 f382 	clz	r3, r2
 8000d04:	b143      	cbz	r3, 8000d18 <__udivmoddi4+0x2c>
 8000d06:	f1c3 0120 	rsb	r1, r3, #32
 8000d0a:	409f      	lsls	r7, r3
 8000d0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d10:	409c      	lsls	r4, r3
 8000d12:	fa20 f101 	lsr.w	r1, r0, r1
 8000d16:	430f      	orrs	r7, r1
 8000d18:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	0c22      	lsrs	r2, r4, #16
 8000d22:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d26:	fb01 7716 	mls	r7, r1, r6, r7
 8000d2a:	fb06 f00e 	mul.w	r0, r6, lr
 8000d2e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d32:	4290      	cmp	r0, r2
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x5c>
 8000d36:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3a:	f106 37ff 	add.w	r7, r6, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x5a>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f200 8137 	bhi.w	8000fb4 <__udivmoddi4+0x2c8>
 8000d46:	463e      	mov	r6, r7
 8000d48:	1a12      	subs	r2, r2, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d50:	fb01 2210 	mls	r2, r1, r0, r2
 8000d54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x86>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x84>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 811c 	bhi.w	8000fa8 <__udivmoddi4+0x2bc>
 8000d70:	4610      	mov	r0, r2
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	2600      	movs	r6, #0
 8000d7c:	b11d      	cbz	r5, 8000d86 <__udivmoddi4+0x9a>
 8000d7e:	40dc      	lsrs	r4, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	e9c5 4300 	strd	r4, r3, [r5]
 8000d86:	4631      	mov	r1, r6
 8000d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0xb8>
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	f000 80fd 	beq.w	8000f90 <__udivmoddi4+0x2a4>
 8000d96:	2600      	movs	r6, #0
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	4631      	mov	r1, r6
 8000da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000da4:	fab3 f683 	clz	r6, r3
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d14b      	bne.n	8000e44 <__udivmoddi4+0x158>
 8000dac:	428b      	cmp	r3, r1
 8000dae:	f0c0 80f2 	bcc.w	8000f96 <__udivmoddi4+0x2aa>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f240 80ef 	bls.w	8000f96 <__udivmoddi4+0x2aa>
 8000db8:	4630      	mov	r0, r6
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d0e3      	beq.n	8000d86 <__udivmoddi4+0x9a>
 8000dbe:	e9c5 4700 	strd	r4, r7, [r5]
 8000dc2:	e7e0      	b.n	8000d86 <__udivmoddi4+0x9a>
 8000dc4:	b902      	cbnz	r2, 8000dc8 <__udivmoddi4+0xdc>
 8000dc6:	deff      	udf	#255	; 0xff
 8000dc8:	fab2 f382 	clz	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f040 809d 	bne.w	8000f0c <__udivmoddi4+0x220>
 8000dd2:	1a89      	subs	r1, r1, r2
 8000dd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000dd8:	b297      	uxth	r7, r2
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f2fe 	udiv	r2, r1, lr
 8000de2:	fb0e 1112 	mls	r1, lr, r2, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb07 f002 	mul.w	r0, r7, r2
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d90f      	bls.n	8000e12 <__udivmoddi4+0x126>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f102 38ff 	add.w	r8, r2, #4294967295
 8000dfa:	bf2c      	ite	cs
 8000dfc:	f04f 0901 	movcs.w	r9, #1
 8000e00:	f04f 0900 	movcc.w	r9, #0
 8000e04:	4288      	cmp	r0, r1
 8000e06:	d903      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000e08:	f1b9 0f00 	cmp.w	r9, #0
 8000e0c:	f000 80cf 	beq.w	8000fae <__udivmoddi4+0x2c2>
 8000e10:	4642      	mov	r2, r8
 8000e12:	1a09      	subs	r1, r1, r0
 8000e14:	b2a4      	uxth	r4, r4
 8000e16:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e1a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1e:	fb00 f707 	mul.w	r7, r0, r7
 8000e22:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e26:	42a7      	cmp	r7, r4
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x150>
 8000e2a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x14e>
 8000e34:	42a7      	cmp	r7, r4
 8000e36:	f200 80b4 	bhi.w	8000fa2 <__udivmoddi4+0x2b6>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	1be4      	subs	r4, r4, r7
 8000e3e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e42:	e79b      	b.n	8000d7c <__udivmoddi4+0x90>
 8000e44:	f1c6 0720 	rsb	r7, r6, #32
 8000e48:	40b3      	lsls	r3, r6
 8000e4a:	fa01 f406 	lsl.w	r4, r1, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	40f9      	lsrs	r1, r7
 8000e54:	40b2      	lsls	r2, r6
 8000e56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e62:	431c      	orrs	r4, r3
 8000e64:	fa1f fe8c 	uxth.w	lr, ip
 8000e68:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6c:	0c20      	lsrs	r0, r4, #16
 8000e6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e72:	fb09 1118 	mls	r1, r9, r8, r1
 8000e76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7a:	fb08 f00e 	mul.w	r0, r8, lr
 8000e7e:	4288      	cmp	r0, r1
 8000e80:	d90f      	bls.n	8000ea2 <__udivmoddi4+0x1b6>
 8000e82:	eb1c 0101 	adds.w	r1, ip, r1
 8000e86:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e8a:	bf2c      	ite	cs
 8000e8c:	f04f 0b01 	movcs.w	fp, #1
 8000e90:	f04f 0b00 	movcc.w	fp, #0
 8000e94:	4288      	cmp	r0, r1
 8000e96:	d903      	bls.n	8000ea0 <__udivmoddi4+0x1b4>
 8000e98:	f1bb 0f00 	cmp.w	fp, #0
 8000e9c:	f000 808d 	beq.w	8000fba <__udivmoddi4+0x2ce>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	1a09      	subs	r1, r1, r0
 8000ea4:	b2a4      	uxth	r4, r4
 8000ea6:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eaa:	fb09 1110 	mls	r1, r9, r0, r1
 8000eae:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb6:	458e      	cmp	lr, r1
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1de>
 8000eba:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d201      	bcs.n	8000ec8 <__udivmoddi4+0x1dc>
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d87f      	bhi.n	8000fc8 <__udivmoddi4+0x2dc>
 8000ec8:	4620      	mov	r0, r4
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	eba1 010e 	sub.w	r1, r1, lr
 8000ed2:	fba0 9802 	umull	r9, r8, r0, r2
 8000ed6:	4541      	cmp	r1, r8
 8000ed8:	464c      	mov	r4, r9
 8000eda:	46c6      	mov	lr, r8
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0x1f8>
 8000ede:	d106      	bne.n	8000eee <__udivmoddi4+0x202>
 8000ee0:	454b      	cmp	r3, r9
 8000ee2:	d204      	bcs.n	8000eee <__udivmoddi4+0x202>
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	ebb9 0402 	subs.w	r4, r9, r2
 8000eea:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d070      	beq.n	8000fd4 <__udivmoddi4+0x2e8>
 8000ef2:	1b1a      	subs	r2, r3, r4
 8000ef4:	eb61 010e 	sbc.w	r1, r1, lr
 8000ef8:	fa22 f306 	lsr.w	r3, r2, r6
 8000efc:	fa01 f707 	lsl.w	r7, r1, r7
 8000f00:	40f1      	lsrs	r1, r6
 8000f02:	2600      	movs	r6, #0
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	e73c      	b.n	8000d86 <__udivmoddi4+0x9a>
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	f1c3 0020 	rsb	r0, r3, #32
 8000f14:	fa01 f203 	lsl.w	r2, r1, r3
 8000f18:	fa21 f600 	lsr.w	r6, r1, r0
 8000f1c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f20:	fa24 f100 	lsr.w	r1, r4, r0
 8000f24:	fa1f f78c 	uxth.w	r7, ip
 8000f28:	409c      	lsls	r4, r3
 8000f2a:	4311      	orrs	r1, r2
 8000f2c:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f30:	0c0a      	lsrs	r2, r1, #16
 8000f32:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f36:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f3a:	fb00 f607 	mul.w	r6, r0, r7
 8000f3e:	4296      	cmp	r6, r2
 8000f40:	d90e      	bls.n	8000f60 <__udivmoddi4+0x274>
 8000f42:	eb1c 0202 	adds.w	r2, ip, r2
 8000f46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4a:	bf2c      	ite	cs
 8000f4c:	f04f 0901 	movcs.w	r9, #1
 8000f50:	f04f 0900 	movcc.w	r9, #0
 8000f54:	4296      	cmp	r6, r2
 8000f56:	d902      	bls.n	8000f5e <__udivmoddi4+0x272>
 8000f58:	f1b9 0f00 	cmp.w	r9, #0
 8000f5c:	d031      	beq.n	8000fc2 <__udivmoddi4+0x2d6>
 8000f5e:	4640      	mov	r0, r8
 8000f60:	1b92      	subs	r2, r2, r6
 8000f62:	b289      	uxth	r1, r1
 8000f64:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f68:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f70:	fb06 f207 	mul.w	r2, r6, r7
 8000f74:	428a      	cmp	r2, r1
 8000f76:	d907      	bls.n	8000f88 <__udivmoddi4+0x29c>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f80:	d201      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000f82:	428a      	cmp	r2, r1
 8000f84:	d823      	bhi.n	8000fce <__udivmoddi4+0x2e2>
 8000f86:	4646      	mov	r6, r8
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f8e:	e725      	b.n	8000ddc <__udivmoddi4+0xf0>
 8000f90:	462e      	mov	r6, r5
 8000f92:	4628      	mov	r0, r5
 8000f94:	e6f7      	b.n	8000d86 <__udivmoddi4+0x9a>
 8000f96:	1a84      	subs	r4, r0, r2
 8000f98:	eb61 0303 	sbc.w	r3, r1, r3
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	461f      	mov	r7, r3
 8000fa0:	e70b      	b.n	8000dba <__udivmoddi4+0xce>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e749      	b.n	8000e3c <__udivmoddi4+0x150>
 8000fa8:	4464      	add	r4, ip
 8000faa:	3802      	subs	r0, #2
 8000fac:	e6e1      	b.n	8000d72 <__udivmoddi4+0x86>
 8000fae:	3a02      	subs	r2, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	e72e      	b.n	8000e12 <__udivmoddi4+0x126>
 8000fb4:	3e02      	subs	r6, #2
 8000fb6:	4462      	add	r2, ip
 8000fb8:	e6c6      	b.n	8000d48 <__udivmoddi4+0x5c>
 8000fba:	f1a8 0802 	sub.w	r8, r8, #2
 8000fbe:	4461      	add	r1, ip
 8000fc0:	e76f      	b.n	8000ea2 <__udivmoddi4+0x1b6>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	e7cb      	b.n	8000f60 <__udivmoddi4+0x274>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e77d      	b.n	8000eca <__udivmoddi4+0x1de>
 8000fce:	3e02      	subs	r6, #2
 8000fd0:	4461      	add	r1, ip
 8000fd2:	e7d9      	b.n	8000f88 <__udivmoddi4+0x29c>
 8000fd4:	462e      	mov	r6, r5
 8000fd6:	e6d6      	b.n	8000d86 <__udivmoddi4+0x9a>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <_ZN7MiniPIDC1Eddd>:
#include "MiniPID.h"

//**********************************
//Constructor functions
//**********************************
MiniPID::MiniPID(double p, double i, double d){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	61f8      	str	r0, [r7, #28]
 8000fe4:	ed87 0b04 	vstr	d0, [r7, #16]
 8000fe8:	ed87 1b02 	vstr	d1, [r7, #8]
 8000fec:	ed87 2b00 	vstr	d2, [r7]
	init();
 8000ff0:	69f8      	ldr	r0, [r7, #28]
 8000ff2:	f000 f83c 	bl	800106e <_ZN7MiniPID4initEv>
	P=p; I=i; D=d;
 8000ff6:	69f9      	ldr	r1, [r7, #28]
 8000ff8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ffc:	e9c1 2300 	strd	r2, r3, [r1]
 8001000:	69f9      	ldr	r1, [r7, #28]
 8001002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001006:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800100a:	69f9      	ldr	r1, [r7, #28]
 800100c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001010:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	4618      	mov	r0, r3
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_ZN7MiniPIDC1Edddd>:
MiniPID::MiniPID(double p, double i, double d, double f){
 800101e:	b580      	push	{r7, lr}
 8001020:	b08a      	sub	sp, #40	; 0x28
 8001022:	af00      	add	r7, sp, #0
 8001024:	6278      	str	r0, [r7, #36]	; 0x24
 8001026:	ed87 0b06 	vstr	d0, [r7, #24]
 800102a:	ed87 1b04 	vstr	d1, [r7, #16]
 800102e:	ed87 2b02 	vstr	d2, [r7, #8]
 8001032:	ed87 3b00 	vstr	d3, [r7]
	init();
 8001036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001038:	f000 f819 	bl	800106e <_ZN7MiniPID4initEv>
	P=p; I=i; D=d; F=f;
 800103c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800103e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001042:	e9c1 2300 	strd	r2, r3, [r1]
 8001046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800104c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001056:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800105a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800105c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001060:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	4618      	mov	r0, r3
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZN7MiniPID4initEv>:
void MiniPID::init(){
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	P=0;
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e9c1 2300 	strd	r2, r3, [r1]
	I=0;
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	D=0;
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	F=0;
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c1 2306 	strd	r2, r3, [r1, #24]

	maxIOutput=0;
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	maxError=0;
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	errorSum=0;
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	maxOutput=0; 
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	minOutput=0;
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	setpoint=0;
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	lastActual=0;
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	firstRun=true;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	reversed=false;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	outputRampRate=0;
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	lastOutput=0;
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	outputFilter=0;
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	setpointRange=0;
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZN7MiniPID13setMaxIOutputEd>:

/**Set the maximum output value contributed by the I component of the system
 * this->can be used to prevent large windup issues and make tuning simpler
 * @param maximum. Units are the same as the expected output value
 */
void MiniPID::setMaxIOutput(double maximum){
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	ed87 0b00 	vstr	d0, [r7]
	/* Internally maxError and Izone are similar, but scaled for different purposes. 
	 * The maxError is generated for simplifying math, since calculations against 
	 * the max error are far more common than changing the I term or Izone. 
	 */
	maxIOutput=maximum;
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001176:	e9c1 2308 	strd	r2, r3, [r1, #32]
	if(I!=0){
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	f7ff fc82 	bl	8000a90 <__aeabi_dcmpeq>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d000      	beq.n	8001194 <_ZN7MiniPID13setMaxIOutputEd+0x30>
		maxError=maxIOutput/I;
	}
}
 8001192:	e00c      	b.n	80011ae <_ZN7MiniPID13setMaxIOutputEd+0x4a>
		maxError=maxIOutput/I;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011a0:	f7ff fb38 	bl	8000814 <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_ZN7MiniPID15setOutputLimitsEdd>:
/**
 * Specify a maximum output.
 * @param minimum possible output value
 * @param maximum possible output value
 */
void MiniPID::setOutputLimits(double minimum,double maximum){
 80011b6:	b5b0      	push	{r4, r5, r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6178      	str	r0, [r7, #20]
 80011be:	ed87 0b02 	vstr	d0, [r7, #8]
 80011c2:	ed87 1b00 	vstr	d1, [r7]
	if(maximum<minimum)return;
 80011c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ce:	f7ff fc69 	bl	8000aa4 <__aeabi_dcmplt>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d139      	bne.n	800124c <_ZN7MiniPID15setOutputLimitsEdd+0x96>
	maxOutput=maximum;
 80011d8:	6979      	ldr	r1, [r7, #20]
 80011da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	minOutput=minimum;
 80011e2:	6979      	ldr	r1, [r7, #20]
 80011e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011e8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	// Ensure the bounds of the I term are within the bounds of the allowable output swing
	if(maxIOutput==0 || maxIOutput>(maximum-minimum) ){
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f7ff fc49 	bl	8000a90 <__aeabi_dcmpeq>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d111      	bne.n	8001228 <_ZN7MiniPID15setOutputLimitsEdd+0x72>
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800120a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800120e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001212:	f7ff f81d 	bl	8000250 <__aeabi_dsub>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff fc5f 	bl	8000ae0 <__aeabi_dcmpgt>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d012      	beq.n	800124e <_ZN7MiniPID15setOutputLimitsEdd+0x98>
		setMaxIOutput(maximum-minimum);
 8001228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800122c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001230:	f7ff f80e 	bl	8000250 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	ec43 2b17 	vmov	d7, r2, r3
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f7ff ff8d 	bl	8001164 <_ZN7MiniPID13setMaxIOutputEd>
 800124a:	e000      	b.n	800124e <_ZN7MiniPID15setOutputLimitsEdd+0x98>
	if(maximum<minimum)return;
 800124c:	bf00      	nop
	}
}
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bdb0      	pop	{r4, r5, r7, pc}

08001254 <_ZN7MiniPID9getOutputEdd>:
* Automatically re-calculates the output at each call. 
* @param actual The monitored value
* @param target The target value
* @return calculated output value for driving the actual to the target 
*/
double MiniPID::getOutput(double actual, double setpoint){
 8001254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001258:	ed2d 8b02 	vpush	{d8}
 800125c:	b092      	sub	sp, #72	; 0x48
 800125e:	af00      	add	r7, sp, #0
 8001260:	6178      	str	r0, [r7, #20]
 8001262:	ed87 0b02 	vstr	d0, [r7, #8]
 8001266:	ed87 1b00 	vstr	d1, [r7]
	double Poutput;
	double Ioutput;
	double Doutput;
	double Foutput;

	this->setpoint=setpoint;
 800126a:	6979      	ldr	r1, [r7, #20]
 800126c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001270:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	//Ramp the setpoint used for calculations if user has opted to do so
	if(setpointRange!=0){
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	f7ff fc05 	bl	8000a90 <__aeabi_dcmpeq>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d124      	bne.n	80012d6 <_ZN7MiniPID9getOutputEdd+0x82>
		setpoint=clamp(setpoint,actual-setpointRange,actual+setpointRange);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8001292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001296:	f7fe ffdb 	bl	8000250 <__aeabi_dsub>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	ec43 2b18 	vmov	d8, r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80012a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ac:	f7fe ffd2 	bl	8000254 <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b17 	vmov	d7, r2, r3
 80012b8:	eeb0 2a47 	vmov.f32	s4, s14
 80012bc:	eef0 2a67 	vmov.f32	s5, s15
 80012c0:	eeb0 1a48 	vmov.f32	s2, s16
 80012c4:	eef0 1a68 	vmov.f32	s3, s17
 80012c8:	ed97 0b00 	vldr	d0, [r7]
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	f000 f9fa 	bl	80016c6 <_ZN7MiniPID5clampEddd>
 80012d2:	ed87 0b00 	vstr	d0, [r7]
	}

	//Do the simple parts of the calculations
	double error=setpoint-actual;
 80012d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012de:	f7fe ffb7 	bl	8000250 <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	//Calculate F output. Notice, this->depends only on the setpoint, and not the error. 
	Foutput=F*setpoint;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012f4:	f7ff f964 	bl	80005c0 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	//Calculate P term
	Poutput=P*error;	 
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800130a:	f7ff f959 	bl	80005c0 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//If this->is our first time running this-> we don't actually _have_ a previous input or output. 
	//For sensor, sanely assume it was exactly where it is now.
	//For last output, we can assume it's the current time-independent outputs. 
	if(firstRun){
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <_ZN7MiniPID9getOutputEdd+0xf4>
		lastActual=actual;
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001326:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		lastOutput=Poutput+Foutput;
 800132a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800132e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001332:	f7fe ff8f 	bl	8000254 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	6979      	ldr	r1, [r7, #20]
 800133c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		firstRun=false;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	//Calculate D Term
	//Note, this->is negative. this->actually "slows" the system if it's doing
	//the correct thing, and small values helps prevent output spikes and overshoot 

	Doutput= -D*(actual-lastActual);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800134e:	4614      	mov	r4, r2
 8001350:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800135a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135e:	f7fe ff77 	bl	8000250 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4620      	mov	r0, r4
 8001368:	4629      	mov	r1, r5
 800136a:	f7ff f929 	bl	80005c0 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	e9c7 2306 	strd	r2, r3, [r7, #24]
	lastActual=actual;
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800137c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	//The Iterm is more complex. There's several things to factor in to make it easier to deal with.
	// 1. maxIoutput restricts the amount of output contributed by the Iterm.
	// 2. prevent windup by not increasing errorSum if we're already running against our max Ioutput
	// 3. prevent windup by not increasing errorSum if output is output=maxOutput	
	Ioutput=I*errorSum;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800138c:	f7ff f918 	bl	80005c0 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if(maxIOutput!=0){
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f7ff fb73 	bl	8000a90 <__aeabi_dcmpeq>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d115      	bne.n	80013dc <_ZN7MiniPID9getOutputEdd+0x188>
		Ioutput=clamp(Ioutput,-maxIOutput,maxIOutput); 
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013b6:	4692      	mov	sl, r2
 80013b8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	ed93 7b08 	vldr	d7, [r3, #32]
 80013c2:	eeb0 2a47 	vmov.f32	s4, s14
 80013c6:	eef0 2a67 	vmov.f32	s5, s15
 80013ca:	ec4b ab11 	vmov	d1, sl, fp
 80013ce:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f000 f977 	bl	80016c6 <_ZN7MiniPID5clampEddd>
 80013d8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	}	

	//And, finally, we can just add the terms up
	output=Foutput + Poutput + Ioutput + Doutput;
 80013dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013e4:	f7fe ff36 	bl	8000254 <__adddf3>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013f4:	f7fe ff2e 	bl	8000254 <__adddf3>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001400:	f7fe ff28 	bl	8000254 <__adddf3>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//Figure out what we're doing with the error.
	if(minOutput!=maxOutput && !bounded(output, minOutput,maxOutput) ){
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001418:	f7ff fb3a 	bl	8000a90 <__aeabi_dcmpeq>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d11a      	bne.n	8001458 <_ZN7MiniPID9getOutputEdd+0x204>
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800142e:	eeb0 2a46 	vmov.f32	s4, s12
 8001432:	eef0 2a66 	vmov.f32	s5, s13
 8001436:	eeb0 1a47 	vmov.f32	s2, s14
 800143a:	eef0 1a67 	vmov.f32	s3, s15
 800143e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f000 f96c 	bl	8001720 <_ZN7MiniPID7boundedEddd>
 8001448:	4603      	mov	r3, r0
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <_ZN7MiniPID9getOutputEdd+0x204>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <_ZN7MiniPID9getOutputEdd+0x206>
 8001458:	2300      	movs	r3, #0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <_ZN7MiniPID9getOutputEdd+0x216>
		errorSum=error; 
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001464:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001468:	e082      	b.n	8001570 <_ZN7MiniPID9getOutputEdd+0x31c>
		// reset the error sum to a sane level
		// Setting to current error ensures a smooth transition when the P term 
		// decreases enough for the I term to start acting upon the controller
		// From that point the I term will build up as would be expected
	}
	else if(outputRampRate!=0 && !bounded(output, lastOutput-outputRampRate,lastOutput+outputRampRate) ){
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f7ff fb0a 	bl	8000a90 <__aeabi_dcmpeq>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d12c      	bne.n	80014dc <_ZN7MiniPID9getOutputEdd+0x288>
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800148e:	f7fe fedf 	bl	8000250 <__aeabi_dsub>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	ec43 2b18 	vmov	d8, r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014a6:	f7fe fed5 	bl	8000254 <__adddf3>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	ec43 2b17 	vmov	d7, r2, r3
 80014b2:	eeb0 2a47 	vmov.f32	s4, s14
 80014b6:	eef0 2a67 	vmov.f32	s5, s15
 80014ba:	eeb0 1a48 	vmov.f32	s2, s16
 80014be:	eef0 1a68 	vmov.f32	s3, s17
 80014c2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f000 f92a 	bl	8001720 <_ZN7MiniPID7boundedEddd>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f083 0301 	eor.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <_ZN7MiniPID9getOutputEdd+0x288>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <_ZN7MiniPID9getOutputEdd+0x28a>
 80014dc:	2300      	movs	r3, #0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <_ZN7MiniPID9getOutputEdd+0x29a>
		errorSum=error; 
 80014e2:	6979      	ldr	r1, [r7, #20]
 80014e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80014ec:	e040      	b.n	8001570 <_ZN7MiniPID9getOutputEdd+0x31c>
	}
	else if(maxIOutput!=0){
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f7ff fac8 	bl	8000a90 <__aeabi_dcmpeq>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d128      	bne.n	8001558 <_ZN7MiniPID9getOutputEdd+0x304>
		errorSum=clamp(errorSum+error,-maxError,maxError);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800150c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001510:	f7fe fea0 	bl	8000254 <__adddf3>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	ec43 2b16 	vmov	d6, r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001522:	4690      	mov	r8, r2
 8001524:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800152e:	eeb0 2a47 	vmov.f32	s4, s14
 8001532:	eef0 2a67 	vmov.f32	s5, s15
 8001536:	ec49 8b11 	vmov	d1, r8, r9
 800153a:	eeb0 0a46 	vmov.f32	s0, s12
 800153e:	eef0 0a66 	vmov.f32	s1, s13
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f000 f8bf 	bl	80016c6 <_ZN7MiniPID5clampEddd>
 8001548:	eeb0 7a40 	vmov.f32	s14, s0
 800154c:	eef0 7a60 	vmov.f32	s15, s1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
 8001556:	e00b      	b.n	8001570 <_ZN7MiniPID9getOutputEdd+0x31c>
		// In addition to output limiting directly, we also want to prevent I term 
		// buildup, so restrict the error directly
	}
	else{
		errorSum+=error;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800155e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001562:	f7fe fe77 	bl	8000254 <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	6979      	ldr	r1, [r7, #20]
 800156c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}

	//Restrict output to our specified output and ramp limits
	if(outputRampRate!=0){
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	f7ff fa87 	bl	8000a90 <__aeabi_dcmpeq>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d126      	bne.n	80015d6 <_ZN7MiniPID9getOutputEdd+0x382>
		output=clamp(output, lastOutput-outputRampRate,lastOutput+outputRampRate);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001594:	f7fe fe5c 	bl	8000250 <__aeabi_dsub>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	ec43 2b18 	vmov	d8, r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80015ac:	f7fe fe52 	bl	8000254 <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	ec43 2b17 	vmov	d7, r2, r3
 80015b8:	eeb0 2a47 	vmov.f32	s4, s14
 80015bc:	eef0 2a67 	vmov.f32	s5, s15
 80015c0:	eeb0 1a48 	vmov.f32	s2, s16
 80015c4:	eef0 1a68 	vmov.f32	s3, s17
 80015c8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	f000 f87a 	bl	80016c6 <_ZN7MiniPID5clampEddd>
 80015d2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	}
	if(minOutput!=maxOutput){ 
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015e2:	f7ff fa55 	bl	8000a90 <__aeabi_dcmpeq>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d114      	bne.n	8001616 <_ZN7MiniPID9getOutputEdd+0x3c2>
		output=clamp(output, minOutput,maxOutput);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80015f8:	eeb0 2a46 	vmov.f32	s4, s12
 80015fc:	eef0 2a66 	vmov.f32	s5, s13
 8001600:	eeb0 1a47 	vmov.f32	s2, s14
 8001604:	eef0 1a67 	vmov.f32	s3, s15
 8001608:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	f000 f85a 	bl	80016c6 <_ZN7MiniPID5clampEddd>
 8001612:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
		}
	if(outputFilter!=0){
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	f7ff fa34 	bl	8000a90 <__aeabi_dcmpeq>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d125      	bne.n	800167a <_ZN7MiniPID9getOutputEdd+0x426>
		output=lastOutput*outputFilter+output*(1-outputFilter);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800163a:	f7fe ffc1 	bl	80005c0 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4614      	mov	r4, r2
 8001644:	461d      	mov	r5, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800164c:	f04f 0000 	mov.w	r0, #0
 8001650:	4913      	ldr	r1, [pc, #76]	; (80016a0 <_ZN7MiniPID9getOutputEdd+0x44c>)
 8001652:	f7fe fdfd 	bl	8000250 <__aeabi_dsub>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001662:	f7fe ffad 	bl	80005c0 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7fe fdf1 	bl	8000254 <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}

	lastOutput=output;
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001680:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	return output;
 8001684:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001688:	ec43 2b17 	vmov	d7, r2, r3
}
 800168c:	eeb0 0a47 	vmov.f32	s0, s14
 8001690:	eef0 0a67 	vmov.f32	s1, s15
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	ecbd 8b02 	vpop	{d8}
 800169c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016a0:	3ff00000 	.word	0x3ff00000

080016a4 <_ZN7MiniPID17setOutputRampRateEd>:
}

/**Set the maximum rate the output can increase per cycle. 
 * @param rate
 */
void MiniPID::setOutputRampRate(double rate){
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	ed87 0b00 	vstr	d0, [r7]
	outputRampRate=rate;
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016b6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7MiniPID5clampEddd>:
 * @param value input value
 * @param min maximum returned value
 * @param max minimum value in range
 * @return Value if it's within provided range, min or max otherwise 
 */
double MiniPID::clamp(double value, double min, double max){
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	61f8      	str	r0, [r7, #28]
 80016ce:	ed87 0b04 	vstr	d0, [r7, #16]
 80016d2:	ed87 1b02 	vstr	d1, [r7, #8]
 80016d6:	ed87 2b00 	vstr	d2, [r7]
	if(value > max){ return max;}
 80016da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e2:	f7ff f9fd 	bl	8000ae0 <__aeabi_dcmpgt>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <_ZN7MiniPID5clampEddd+0x2c>
 80016ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016f0:	e00d      	b.n	800170e <_ZN7MiniPID5clampEddd+0x48>
	if(value < min){ return min;}
 80016f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016fa:	f7ff f9d3 	bl	8000aa4 <__aeabi_dcmplt>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <_ZN7MiniPID5clampEddd+0x44>
 8001704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001708:	e001      	b.n	800170e <_ZN7MiniPID5clampEddd+0x48>
	return value;
 800170a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800170e:	ec43 2b17 	vmov	d7, r2, r3
 8001712:	eeb0 0a47 	vmov.f32	s0, s14
 8001716:	eef0 0a67 	vmov.f32	s1, s15
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN7MiniPID7boundedEddd>:
 * @param value to test
 * @param min Minimum value of range
 * @param max Maximum value of range
 * @return
 */
bool MiniPID::bounded(double value, double min, double max){
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	61f8      	str	r0, [r7, #28]
 8001728:	ed87 0b04 	vstr	d0, [r7, #16]
 800172c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001730:	ed87 2b00 	vstr	d2, [r7]
		return (min<value) && (value<max);
 8001734:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001738:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800173c:	f7ff f9b2 	bl	8000aa4 <__aeabi_dcmplt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <_ZN7MiniPID7boundedEddd+0x3c>
 8001746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800174a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800174e:	f7ff f9a9 	bl	8000aa4 <__aeabi_dcmplt>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <_ZN7MiniPID7boundedEddd+0x3c>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <_ZN7MiniPID7boundedEddd+0x3e>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <_Z10SelectAxist>:


#include "TMC2208.hpp"

void SelectAxis(uint16_t axis)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
	switch(axis)
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d85d      	bhi.n	8001834 <_Z10SelectAxist+0xcc>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <_Z10SelectAxist+0x18>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001795 	.word	0x08001795
 8001784:	080017b5 	.word	0x080017b5
 8001788:	080017d5 	.word	0x080017d5
 800178c:	080017f5 	.word	0x080017f5
 8001790:	08001815 	.word	0x08001815
	{
	case X_AXIS: TMC_S1(GPIO_PIN_SET); TMC_S2(GPIO_PIN_RESET); TMC_S3(GPIO_PIN_SET); break;
 8001794:	2201      	movs	r2, #1
 8001796:	2140      	movs	r1, #64	; 0x40
 8001798:	4828      	ldr	r0, [pc, #160]	; (800183c <_Z10SelectAxist+0xd4>)
 800179a:	f003 fd13 	bl	80051c4 <HAL_GPIO_WritePin>
 800179e:	2200      	movs	r2, #0
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	4826      	ldr	r0, [pc, #152]	; (800183c <_Z10SelectAxist+0xd4>)
 80017a4:	f003 fd0e 	bl	80051c4 <HAL_GPIO_WritePin>
 80017a8:	2201      	movs	r2, #1
 80017aa:	2108      	movs	r1, #8
 80017ac:	4824      	ldr	r0, [pc, #144]	; (8001840 <_Z10SelectAxist+0xd8>)
 80017ae:	f003 fd09 	bl	80051c4 <HAL_GPIO_WritePin>
 80017b2:	e03f      	b.n	8001834 <_Z10SelectAxist+0xcc>
	case Y_AXIS: TMC_S1(GPIO_PIN_SET); TMC_S2(GPIO_PIN_SET); TMC_S3(GPIO_PIN_SET); break;
 80017b4:	2201      	movs	r2, #1
 80017b6:	2140      	movs	r1, #64	; 0x40
 80017b8:	4820      	ldr	r0, [pc, #128]	; (800183c <_Z10SelectAxist+0xd4>)
 80017ba:	f003 fd03 	bl	80051c4 <HAL_GPIO_WritePin>
 80017be:	2201      	movs	r2, #1
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	481e      	ldr	r0, [pc, #120]	; (800183c <_Z10SelectAxist+0xd4>)
 80017c4:	f003 fcfe 	bl	80051c4 <HAL_GPIO_WritePin>
 80017c8:	2201      	movs	r2, #1
 80017ca:	2108      	movs	r1, #8
 80017cc:	481c      	ldr	r0, [pc, #112]	; (8001840 <_Z10SelectAxist+0xd8>)
 80017ce:	f003 fcf9 	bl	80051c4 <HAL_GPIO_WritePin>
 80017d2:	e02f      	b.n	8001834 <_Z10SelectAxist+0xcc>
	case Z_AXIS: TMC_S1(GPIO_PIN_RESET); TMC_S2(GPIO_PIN_SET); TMC_S3(GPIO_PIN_SET); break;
 80017d4:	2200      	movs	r2, #0
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	4818      	ldr	r0, [pc, #96]	; (800183c <_Z10SelectAxist+0xd4>)
 80017da:	f003 fcf3 	bl	80051c4 <HAL_GPIO_WritePin>
 80017de:	2201      	movs	r2, #1
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	4816      	ldr	r0, [pc, #88]	; (800183c <_Z10SelectAxist+0xd4>)
 80017e4:	f003 fcee 	bl	80051c4 <HAL_GPIO_WritePin>
 80017e8:	2201      	movs	r2, #1
 80017ea:	2108      	movs	r1, #8
 80017ec:	4814      	ldr	r0, [pc, #80]	; (8001840 <_Z10SelectAxist+0xd8>)
 80017ee:	f003 fce9 	bl	80051c4 <HAL_GPIO_WritePin>
 80017f2:	e01f      	b.n	8001834 <_Z10SelectAxist+0xcc>
	case E0_AXIS: TMC_S1(GPIO_PIN_RESET); TMC_S2(GPIO_PIN_RESET); TMC_S3(GPIO_PIN_SET); break;
 80017f4:	2200      	movs	r2, #0
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <_Z10SelectAxist+0xd4>)
 80017fa:	f003 fce3 	bl	80051c4 <HAL_GPIO_WritePin>
 80017fe:	2200      	movs	r2, #0
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <_Z10SelectAxist+0xd4>)
 8001804:	f003 fcde 	bl	80051c4 <HAL_GPIO_WritePin>
 8001808:	2201      	movs	r2, #1
 800180a:	2108      	movs	r1, #8
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <_Z10SelectAxist+0xd8>)
 800180e:	f003 fcd9 	bl	80051c4 <HAL_GPIO_WritePin>
 8001812:	e00f      	b.n	8001834 <_Z10SelectAxist+0xcc>
	case E1_AXIS: TMC_S1(GPIO_PIN_RESET); TMC_S2(GPIO_PIN_SET); TMC_S3(GPIO_PIN_RESET); break;
 8001814:	2200      	movs	r2, #0
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <_Z10SelectAxist+0xd4>)
 800181a:	f003 fcd3 	bl	80051c4 <HAL_GPIO_WritePin>
 800181e:	2201      	movs	r2, #1
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <_Z10SelectAxist+0xd4>)
 8001824:	f003 fcce 	bl	80051c4 <HAL_GPIO_WritePin>
 8001828:	2200      	movs	r2, #0
 800182a:	2108      	movs	r1, #8
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <_Z10SelectAxist+0xd8>)
 800182e:	f003 fcc9 	bl	80051c4 <HAL_GPIO_WritePin>
 8001832:	bf00      	nop
	}
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	42020400 	.word	0x42020400
 8001840:	42021c00 	.word	0x42021c00

08001844 <_ZN7TMC2208C1EP20__UART_HandleTypeDefb>:
	    case 0: return 2;
	    default: return 0;
	}
}

TMC2208::TMC2208(UART_HandleTypeDef * SerialPort, bool has_rx) {
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2205      	movs	r2, #5
 8001856:	801a      	strh	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f240 1241 	movw	r2, #321	; 0x141
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188a:	621a      	str	r2, [r3, #32]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2214      	movs	r2, #20
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <_ZN7TMC2208C1EP20__UART_HandleTypeDefb+0x94>)
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <_ZN7TMC2208C1EP20__UART_HandleTypeDefb+0x98>)
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	639a      	str	r2, [r3, #56]	; 0x38
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	87da      	strh	r2, [r3, #62]	; 0x3e
	write_only = !has_rx;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f083 0301 	eor.w	r3, r3, #1
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	HWSerial = SerialPort;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	605a      	str	r2, [r3, #4]
}
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	10000053 	.word	0x10000053
 80018dc:	c10d0024 	.word	0xc10d0024

080018e0 <_Z14GetTemperaturetm>:
#include <math.h>
#include "main.h"


double GetTemperature(uint16_t adc, uint32_t value)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	80fb      	strh	r3, [r7, #6]
	double resistance, val;
	switch (adc)
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	f000 80e5 	beq.w	8001abe <_Z14GetTemperaturetm+0x1de>
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	f300 8106 	bgt.w	8001b06 <_Z14GetTemperaturetm+0x226>
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	dc02      	bgt.n	8001904 <_Z14GetTemperaturetm+0x24>
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da70      	bge.n	80019e4 <_Z14GetTemperaturetm+0x104>
 8001902:	e100      	b.n	8001b06 <_Z14GetTemperaturetm+0x226>
 8001904:	2b02      	cmp	r3, #2
 8001906:	f040 80fe 	bne.w	8001b06 <_Z14GetTemperaturetm+0x226>
	{
	case BED:
		val = (ADC_VOLTAGE / ADC_SAMPLING) * value;
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f7fe fdde 	bl	80004cc <__aeabi_ui2d>
 8001910:	a385      	add	r3, pc, #532	; (adr r3, 8001b28 <_Z14GetTemperaturetm+0x248>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe53 	bl	80005c0 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		resistance = val / ((ADC_VOLTAGE - val) / BED_RESISTANCE);
 8001922:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001926:	a182      	add	r1, pc, #520	; (adr r1, 8001b30 <_Z14GetTemperaturetm+0x250>)
 8001928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800192c:	f7fe fc90 	bl	8000250 <__aeabi_dsub>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	a38d      	add	r3, pc, #564	; (adr r3, 8001b70 <_Z14GetTemperaturetm+0x290>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe ff69 	bl	8000814 <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800194a:	f7fe ff63 	bl	8000814 <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e9c7 2302 	strd	r2, r3, [r7, #8]
		return 1 / (BED_THERM_A + BED_THERM_B * log(resistance) + BED_THERM_C * pow(log(resistance), 3)) - KELVIN_OFFSET;
 8001956:	ed97 0b02 	vldr	d0, [r7, #8]
 800195a:	f00d fe81 	bl	800f660 <log>
 800195e:	ec51 0b10 	vmov	r0, r1, d0
 8001962:	a385      	add	r3, pc, #532	; (adr r3, 8001b78 <_Z14GetTemperaturetm+0x298>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe2a 	bl	80005c0 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	a382      	add	r3, pc, #520	; (adr r3, 8001b80 <_Z14GetTemperaturetm+0x2a0>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fc6b 	bl	8000254 <__adddf3>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
 8001986:	ed97 0b02 	vldr	d0, [r7, #8]
 800198a:	f00d fe69 	bl	800f660 <log>
 800198e:	eeb0 7a40 	vmov.f32	s14, s0
 8001992:	eef0 7a60 	vmov.f32	s15, s1
 8001996:	2003      	movs	r0, #3
 8001998:	eeb0 0a47 	vmov.f32	s0, s14
 800199c:	eef0 0a67 	vmov.f32	s1, s15
 80019a0:	f000 f8f6 	bl	8001b90 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80019a4:	ec51 0b10 	vmov	r0, r1, d0
 80019a8:	a377      	add	r3, pc, #476	; (adr r3, 8001b88 <_Z14GetTemperaturetm+0x2a8>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fe07 	bl	80005c0 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc4b 	bl	8000254 <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	4968      	ldr	r1, [pc, #416]	; (8001b68 <_Z14GetTemperaturetm+0x288>)
 80019c8:	f7fe ff24 	bl	8000814 <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	a352      	add	r3, pc, #328	; (adr r3, 8001b20 <_Z14GetTemperaturetm+0x240>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fc39 	bl	8000250 <__aeabi_dsub>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e091      	b.n	8001b08 <_Z14GetTemperaturetm+0x228>
		break;
	case HE0:
	case HE1:
		val = (ADC_VOLTAGE / ADC_SAMPLING) * value;
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7fe fd71 	bl	80004cc <__aeabi_ui2d>
 80019ea:	a34f      	add	r3, pc, #316	; (adr r3, 8001b28 <_Z14GetTemperaturetm+0x248>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fde6 	bl	80005c0 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		resistance = val / ((ADC_VOLTAGE - val) / HE_RESISTANCE);
 80019fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a00:	a14b      	add	r1, pc, #300	; (adr r1, 8001b30 <_Z14GetTemperaturetm+0x250>)
 8001a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a06:	f7fe fc23 	bl	8000250 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	a349      	add	r3, pc, #292	; (adr r3, 8001b38 <_Z14GetTemperaturetm+0x258>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe fefc 	bl	8000814 <__aeabi_ddiv>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a24:	f7fe fef6 	bl	8000814 <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		return 1 / (HE_THERM_A + HE_THERM_B * log(resistance) + HE_THERM_C * pow(log(resistance), 3)) - KELVIN_OFFSET;
 8001a30:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a34:	f00d fe14 	bl	800f660 <log>
 8001a38:	ec51 0b10 	vmov	r0, r1, d0
 8001a3c:	a340      	add	r3, pc, #256	; (adr r3, 8001b40 <_Z14GetTemperaturetm+0x260>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fdbd 	bl	80005c0 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	a33e      	add	r3, pc, #248	; (adr r3, 8001b48 <_Z14GetTemperaturetm+0x268>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fbfe 	bl	8000254 <__adddf3>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	461d      	mov	r5, r3
 8001a60:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a64:	f00d fdfc 	bl	800f660 <log>
 8001a68:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6c:	eef0 7a60 	vmov.f32	s15, s1
 8001a70:	2003      	movs	r0, #3
 8001a72:	eeb0 0a47 	vmov.f32	s0, s14
 8001a76:	eef0 0a67 	vmov.f32	s1, s15
 8001a7a:	f000 f889 	bl	8001b90 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a7e:	ec51 0b10 	vmov	r0, r1, d0
 8001a82:	a333      	add	r3, pc, #204	; (adr r3, 8001b50 <_Z14GetTemperaturetm+0x270>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fd9a 	bl	80005c0 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4620      	mov	r0, r4
 8001a92:	4629      	mov	r1, r5
 8001a94:	f7fe fbde 	bl	8000254 <__adddf3>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	4931      	ldr	r1, [pc, #196]	; (8001b68 <_Z14GetTemperaturetm+0x288>)
 8001aa2:	f7fe feb7 	bl	8000814 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	a31c      	add	r3, pc, #112	; (adr r3, 8001b20 <_Z14GetTemperaturetm+0x240>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fbcc 	bl	8000250 <__aeabi_dsub>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e024      	b.n	8001b08 <_Z14GetTemperaturetm+0x228>
		break;
	case STM:
		return ((V30 - (ADC_VOLTAGE / ADC_SAMPLING * value)) / AVG_SLOPE + 30);
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f7fe fd04 	bl	80004cc <__aeabi_ui2d>
 8001ac4:	a318      	add	r3, pc, #96	; (adr r3, 8001b28 <_Z14GetTemperaturetm+0x248>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd79 	bl	80005c0 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	a121      	add	r1, pc, #132	; (adr r1, 8001b58 <_Z14GetTemperaturetm+0x278>)
 8001ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad8:	f7fe fbba 	bl	8000250 <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	a31e      	add	r3, pc, #120	; (adr r3, 8001b60 <_Z14GetTemperaturetm+0x280>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fe93 	bl	8000814 <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <_Z14GetTemperaturetm+0x28c>)
 8001afc:	f7fe fbaa 	bl	8000254 <__adddf3>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	e000      	b.n	8001b08 <_Z14GetTemperaturetm+0x228>
		break;
	}
}
 8001b06:	e001      	b.n	8001b0c <_Z14GetTemperaturetm+0x22c>
 8001b08:	ec43 2b17 	vmov	d7, r2, r3
 8001b0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b10:	eef0 0a67 	vmov.f32	s1, s15
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	f3af 8000 	nop.w
 8001b20:	66666666 	.word	0x66666666
 8001b24:	40711266 	.word	0x40711266
 8001b28:	66666666 	.word	0x66666666
 8001b2c:	3f0a6666 	.word	0x3f0a6666
 8001b30:	66666666 	.word	0x66666666
 8001b34:	400a6666 	.word	0x400a6666
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40b25c00 	.word	0x40b25c00
 8001b40:	430323bb 	.word	0x430323bb
 8001b44:	3f2cc5cd 	.word	0x3f2cc5cd
 8001b48:	e7ca98da 	.word	0xe7ca98da
 8001b4c:	3f46ec84 	.word	0x3f46ec84
 8001b50:	3232e318 	.word	0x3232e318
 8001b54:	3e78598b 	.word	0x3e78598b
 8001b58:	851eb852 	.word	0x851eb852
 8001b5c:	3fe851eb 	.word	0x3fe851eb
 8001b60:	47ae147b 	.word	0x47ae147b
 8001b64:	3f647ae1 	.word	0x3f647ae1
 8001b68:	3ff00000 	.word	0x3ff00000
 8001b6c:	403e0000 	.word	0x403e0000
 8001b70:	00000000 	.word	0x00000000
 8001b74:	40a13000 	.word	0x40a13000
 8001b78:	4d551d69 	.word	0x4d551d69
 8001b7c:	3f2f7510 	.word	0x3f2f7510
 8001b80:	88e368f1 	.word	0x88e368f1
 8001b84:	3f54f8b5 	.word	0x3f54f8b5
 8001b88:	d05394fd 	.word	0xd05394fd
 8001b8c:	3e76d127 	.word	0x3e76d127

08001b90 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b9a:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7fe fca5 	bl	80004ec <__aeabi_i2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	ec43 2b11 	vmov	d1, r2, r3
 8001baa:	ed97 0b02 	vldr	d0, [r7, #8]
 8001bae:	f00d fd95 	bl	800f6dc <pow>
 8001bb2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb6:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001bba:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbe:	eef0 0a67 	vmov.f32	s1, s15
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bcc:	b091      	sub	sp, #68	; 0x44
 8001bce:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd0:	f001 fb05 	bl	80031de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd4:	f000 f954 	bl	8001e80 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bd8:	f000 f9b9 	bl	8001f4e <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f000 fe1c 	bl	8002818 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001be0:	f000 fdf0 	bl	80027c4 <_ZL11MX_DMA_Initv>
  MX_USB_Device_Init();
 8001be4:	f00d f802 	bl	800ebec <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001be8:	f000 f9e6 	bl	8001fb8 <_ZL12MX_ADC1_Initv>
  MX_TIM15_Init();
 8001bec:	f000 fcc8 	bl	8002580 <_ZL13MX_TIM15_Initv>
  MX_USART1_UART_Init();
 8001bf0:	f000 fd88 	bl	8002704 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8001bf4:	f000 fadc 	bl	80021b0 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001bf8:	f000 fbba 	bl	8002370 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001bfc:	f000 fc30 	bl	8002460 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8001c00:	2104      	movs	r1, #4
 8001c02:	488d      	ldr	r0, [pc, #564]	; (8001e38 <main+0x270>)
 8001c04:	f006 fe62 	bl	80088cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	488c      	ldr	r0, [pc, #560]	; (8001e3c <main+0x274>)
 8001c0c:	f006 fe5e 	bl	80088cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c10:	2108      	movs	r1, #8
 8001c12:	488a      	ldr	r0, [pc, #552]	; (8001e3c <main+0x274>)
 8001c14:	f006 fe5a 	bl	80088cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c18:	2108      	movs	r1, #8
 8001c1a:	4889      	ldr	r0, [pc, #548]	; (8001e40 <main+0x278>)
 8001c1c:	f006 fe56 	bl	80088cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001c20:	210c      	movs	r1, #12
 8001c22:	4887      	ldr	r0, [pc, #540]	; (8001e40 <main+0x278>)
 8001c24:	f006 fe52 	bl	80088cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c28:	210c      	movs	r1, #12
 8001c2a:	4886      	ldr	r0, [pc, #536]	; (8001e44 <main+0x27c>)
 8001c2c:	f006 fe4e 	bl	80088cc <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_value, ADC_CHANNELS);
 8001c30:	2206      	movs	r2, #6
 8001c32:	4985      	ldr	r1, [pc, #532]	; (8001e48 <main+0x280>)
 8001c34:	4885      	ldr	r0, [pc, #532]	; (8001e4c <main+0x284>)
 8001c36:	f001 fea1 	bl	800397c <HAL_ADC_Start_DMA>
  HAL_Delay (2000);
 8001c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c3e:	f001 fb45 	bl	80032cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2120      	movs	r1, #32
 8001c46:	4882      	ldr	r0, [pc, #520]	; (8001e50 <main+0x288>)
 8001c48:	f003 fabc 	bl	80051c4 <HAL_GPIO_WritePin>
  pidbed.setOutputLimits(0,100);
 8001c4c:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 8001e00 <main+0x238>
 8001c50:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8001e08 <main+0x240>
 8001c54:	487f      	ldr	r0, [pc, #508]	; (8001e54 <main+0x28c>)
 8001c56:	f7ff faae 	bl	80011b6 <_ZN7MiniPID15setOutputLimitsEdd>
  pidbed.setOutputRampRate(10);
 8001c5a:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8001e10 <main+0x248>
 8001c5e:	487d      	ldr	r0, [pc, #500]	; (8001e54 <main+0x28c>)
 8001c60:	f7ff fd20 	bl	80016a4 <_ZN7MiniPID17setOutputRampRateEd>
  pidhe0.setOutputLimits(0,255);
 8001c64:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 8001e18 <main+0x250>
 8001c68:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001e08 <main+0x240>
 8001c6c:	487a      	ldr	r0, [pc, #488]	; (8001e58 <main+0x290>)
 8001c6e:	f7ff faa2 	bl	80011b6 <_ZN7MiniPID15setOutputLimitsEdd>
  pidhe0.setOutputRampRate(10);
 8001c72:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001e10 <main+0x248>
 8001c76:	4878      	ldr	r0, [pc, #480]	; (8001e58 <main+0x290>)
 8001c78:	f7ff fd14 	bl	80016a4 <_ZN7MiniPID17setOutputRampRateEd>
  pidhe1.setOutputLimits(0,255);
 8001c7c:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001e18 <main+0x250>
 8001c80:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8001e08 <main+0x240>
 8001c84:	4875      	ldr	r0, [pc, #468]	; (8001e5c <main+0x294>)
 8001c86:	f7ff fa96 	bl	80011b6 <_ZN7MiniPID15setOutputLimitsEdd>
  pidhe1.setOutputRampRate(10);
 8001c8a:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8001e10 <main+0x248>
 8001c8e:	4873      	ldr	r0, [pc, #460]	; (8001e5c <main+0x294>)
 8001c90:	f7ff fd08 	bl	80016a4 <_ZN7MiniPID17setOutputRampRateEd>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  double he0 = GetTemperature(HE0, ADC_value[HE0]);
//	  double he1 = GetTemperature(HE1, ADC_value[HE1]);
	  float bed = GetTemperature(BED, ADC_value[BED]);
 8001c94:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <main+0x280>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7ff fe20 	bl	80018e0 <_Z14GetTemperaturetm>
 8001ca0:	ec53 2b10 	vmov	r2, r3, d0
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe ff82 	bl	8000bb0 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	617b      	str	r3, [r7, #20]
	  float he0 = GetTemperature(HE0, ADC_value[HE0]);
 8001cb0:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <main+0x280>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff fe12 	bl	80018e0 <_Z14GetTemperaturetm>
 8001cbc:	ec53 2b10 	vmov	r2, r3, d0
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff74 	bl	8000bb0 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	613b      	str	r3, [r7, #16]
	  float he1 = GetTemperature(HE1, ADC_value[HE1]);
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <main+0x280>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff fe04 	bl	80018e0 <_Z14GetTemperaturetm>
 8001cd8:	ec53 2b10 	vmov	r2, r3, d0
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe ff66 	bl	8000bb0 <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]
//	  double stm = GetTemperature(STM, ADC_value[STM]);
	  outb = (int)(pidbed.getOutput((double)bed, 55.0f));
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7fe fc11 	bl	8000510 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001e20 <main+0x258>
 8001cf6:	ec43 2b10 	vmov	d0, r2, r3
 8001cfa:	4856      	ldr	r0, [pc, #344]	; (8001e54 <main+0x28c>)
 8001cfc:	f7ff faaa 	bl	8001254 <_ZN7MiniPID9getOutputEdd>
 8001d00:	ec53 2b10 	vmov	r2, r3, d0
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff0a 	bl	8000b20 <__aeabi_d2iz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a54      	ldr	r2, [pc, #336]	; (8001e60 <main+0x298>)
 8001d10:	6013      	str	r3, [r2, #0]
	  outhe0 = (int)(pidhe0.getOutput((double)he0, 180.0f));
 8001d12:	6938      	ldr	r0, [r7, #16]
 8001d14:	f7fe fbfc 	bl	8000510 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001e28 <main+0x260>
 8001d20:	ec43 2b10 	vmov	d0, r2, r3
 8001d24:	484c      	ldr	r0, [pc, #304]	; (8001e58 <main+0x290>)
 8001d26:	f7ff fa95 	bl	8001254 <_ZN7MiniPID9getOutputEdd>
 8001d2a:	ec53 2b10 	vmov	r2, r3, d0
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe fef5 	bl	8000b20 <__aeabi_d2iz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a4a      	ldr	r2, [pc, #296]	; (8001e64 <main+0x29c>)
 8001d3a:	6013      	str	r3, [r2, #0]
	  outhe1 = (int)(pidhe1.getOutput((double)he1, 240.0f));
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7fe fbe7 	bl	8000510 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001e30 <main+0x268>
 8001d4a:	ec43 2b10 	vmov	d0, r2, r3
 8001d4e:	4843      	ldr	r0, [pc, #268]	; (8001e5c <main+0x294>)
 8001d50:	f7ff fa80 	bl	8001254 <_ZN7MiniPID9getOutputEdd>
 8001d54:	ec53 2b10 	vmov	r2, r3, d0
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe fee0 	bl	8000b20 <__aeabi_d2iz>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a41      	ldr	r2, [pc, #260]	; (8001e68 <main+0x2a0>)
 8001d64:	6013      	str	r3, [r2, #0]
	  TIM15->CCR2 = outb;
 8001d66:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <main+0x298>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <main+0x2a4>)
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR1 = outhe0;
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <main+0x29c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <main+0x2a8>)
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = outhe1;
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <main+0x2a0>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	; (8001e70 <main+0x2a8>)
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM2->CCR3 = 255;
 8001d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d82:	22ff      	movs	r2, #255	; 0xff
 8001d84:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM2->CCR4 = 255;
 8001d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM3->CCR4 = 255;
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <main+0x2ac>)
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
	  sprintf(msg, "%.2f,%d,%.2f,%d,%.2f,%d\r\n", bed, outb, he0, outhe0, he1, outhe1);
 8001d94:	6978      	ldr	r0, [r7, #20]
 8001d96:	f7fe fbbb 	bl	8000510 <__aeabi_f2d>
 8001d9a:	4680      	mov	r8, r0
 8001d9c:	4689      	mov	r9, r1
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <main+0x298>)
 8001da0:	681e      	ldr	r6, [r3, #0]
 8001da2:	6938      	ldr	r0, [r7, #16]
 8001da4:	f7fe fbb4 	bl	8000510 <__aeabi_f2d>
 8001da8:	4604      	mov	r4, r0
 8001daa:	460d      	mov	r5, r1
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <main+0x29c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7fe fbac 	bl	8000510 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	492a      	ldr	r1, [pc, #168]	; (8001e68 <main+0x2a0>)
 8001dbe:	6809      	ldr	r1, [r1, #0]
 8001dc0:	9108      	str	r1, [sp, #32]
 8001dc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001dce:	9600      	str	r6, [sp, #0]
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	4928      	ldr	r1, [pc, #160]	; (8001e78 <main+0x2b0>)
 8001dd6:	4829      	ldr	r0, [pc, #164]	; (8001e7c <main+0x2b4>)
 8001dd8:	f00f fd62 	bl	80118a0 <siprintf>
	  CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001ddc:	4827      	ldr	r0, [pc, #156]	; (8001e7c <main+0x2b4>)
 8001dde:	f7fe fa2b 	bl	8000238 <strlen>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	4824      	ldr	r0, [pc, #144]	; (8001e7c <main+0x2b4>)
 8001dea:	f00c ffbd 	bl	800ed68 <CDC_Transmit_FS>
	  HAL_Delay(50);
 8001dee:	2032      	movs	r0, #50	; 0x32
 8001df0:	f001 fa6c 	bl	80032cc <HAL_Delay>

//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	  SelectAxis(X_AXIS);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fcb7 	bl	8001768 <_Z10SelectAxist>

//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001dfa:	e74b      	b.n	8001c94 <main+0xcc>
 8001dfc:	f3af 8000 	nop.w
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40590000 	.word	0x40590000
	...
 8001e14:	40240000 	.word	0x40240000
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	406fe000 	.word	0x406fe000
 8001e20:	00000000 	.word	0x00000000
 8001e24:	404b8000 	.word	0x404b8000
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40668000 	.word	0x40668000
 8001e30:	00000000 	.word	0x00000000
 8001e34:	406e0000 	.word	0x406e0000
 8001e38:	200004a8 	.word	0x200004a8
 8001e3c:	200003c4 	.word	0x200003c4
 8001e40:	20000410 	.word	0x20000410
 8001e44:	2000045c 	.word	0x2000045c
 8001e48:	20000588 	.word	0x20000588
 8001e4c:	200002f4 	.word	0x200002f4
 8001e50:	42020400 	.word	0x42020400
 8001e54:	200005a8 	.word	0x200005a8
 8001e58:	20000628 	.word	0x20000628
 8001e5c:	200006a8 	.word	0x200006a8
 8001e60:	20000764 	.word	0x20000764
 8001e64:	20000768 	.word	0x20000768
 8001e68:	2000076c 	.word	0x2000076c
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40000400 	.word	0x40000400
 8001e78:	08015218 	.word	0x08015218
 8001e7c:	20000728 	.word	0x20000728

08001e80 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b098      	sub	sp, #96	; 0x60
 8001e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e86:	f107 0318 	add.w	r3, r7, #24
 8001e8a:	2248      	movs	r2, #72	; 0x48
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00e fd46 	bl	8010920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f004 fef8 	bl	8006c98 <HAL_PWREx_ControlVoltageScaling>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001eb8:	f000 fd30 	bl	800291c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ed2:	2360      	movs	r3, #96	; 0x60
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eda:	2302      	movs	r3, #2
 8001edc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8001ee2:	2337      	movs	r3, #55	; 0x37
 8001ee4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef2:	f107 0318 	add.w	r3, r7, #24
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 ff5e 	bl	8006db8 <HAL_RCC_OscConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <_Z18SystemClock_Configv+0x90>
  {
    Error_Handler();
 8001f0c:	f000 fd06 	bl	800291c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f10:	230f      	movs	r3, #15
 8001f12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f14:	2303      	movs	r3, #3
 8001f16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2105      	movs	r1, #5
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f005 fc1b 	bl	8007764 <HAL_RCC_ClockConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001f3e:	f000 fced 	bl	800291c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f42:	f006 fa73 	bl	800842c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001f46:	bf00      	nop
 8001f48:	3760      	adds	r7, #96	; 0x60
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b0a6      	sub	sp, #152	; 0x98
 8001f52:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2294      	movs	r2, #148	; 0x94
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00e fce0 	bl	8010920 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001f60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f72:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 8001f74:	2301      	movs	r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f7c:	2318      	movs	r3, #24
 8001f7e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f80:	2307      	movs	r3, #7
 8001f82:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f84:	2302      	movs	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001f8c:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001f90:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4618      	mov	r0, r3
 8001f96:	f005 fec5 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 8001faa:	f000 fcb7 	bl	800291c <Error_Handler>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3798      	adds	r7, #152	; 0x98
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fda:	4b6d      	ldr	r3, [pc, #436]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8001fdc:	4a6d      	ldr	r2, [pc, #436]	; (8002194 <_ZL12MX_ADC1_Initv+0x1dc>)
 8001fde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fe0:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fe6:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ff8:	4b65      	ldr	r3, [pc, #404]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ffe:	4b64      	ldr	r3, [pc, #400]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002000:	2200      	movs	r2, #0
 8002002:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002004:	4b62      	ldr	r3, [pc, #392]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002006:	2201      	movs	r2, #1
 8002008:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 800200c:	2206      	movs	r2, #6
 800200e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002010:	4b5f      	ldr	r3, [pc, #380]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002018:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 800201a:	2200      	movs	r2, #0
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800201e:	4b5c      	ldr	r3, [pc, #368]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002020:	2200      	movs	r2, #0
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002024:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800202c:	4b58      	ldr	r3, [pc, #352]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 800202e:	2200      	movs	r2, #0
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8002032:	4b57      	ldr	r3, [pc, #348]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800203a:	4b55      	ldr	r3, [pc, #340]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 800203c:	220c      	movs	r2, #12
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002042:	2200      	movs	r2, #0
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002046:	4b52      	ldr	r3, [pc, #328]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002048:	2200      	movs	r2, #0
 800204a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 800204e:	2201      	movs	r2, #1
 8002050:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002052:	484f      	ldr	r0, [pc, #316]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002054:	f001 fb46 	bl	80036e4 <HAL_ADC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <_ZL12MX_ADC1_Initv+0xb4>
  {
    Error_Handler();
 8002068:	f000 fc58 	bl	800291c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4846      	ldr	r0, [pc, #280]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002078:	f002 fa7c 	bl	8004574 <HAL_ADCEx_MultiModeConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <_ZL12MX_ADC1_Initv+0xd8>
  {
    Error_Handler();
 800208c:	f000 fc46 	bl	800291c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <_ZL12MX_ADC1_Initv+0x1e0>)
 8002092:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002094:	2306      	movs	r3, #6
 8002096:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002098:	2307      	movs	r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800209c:	237f      	movs	r3, #127	; 0x7f
 800209e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020a0:	2304      	movs	r3, #4
 80020a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4838      	ldr	r0, [pc, #224]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 80020ae:	f001 fd37 	bl	8003b20 <HAL_ADC_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <_ZL12MX_ADC1_Initv+0x10e>
  {
    Error_Handler();
 80020c2:	f000 fc2b 	bl	800291c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020c6:	4b35      	ldr	r3, [pc, #212]	; (800219c <_ZL12MX_ADC1_Initv+0x1e4>)
 80020c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020ca:	230c      	movs	r3, #12
 80020cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	482f      	ldr	r0, [pc, #188]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 80020d4:	f001 fd24 	bl	8003b20 <HAL_ADC_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <_ZL12MX_ADC1_Initv+0x134>
  {
    Error_Handler();
 80020e8:	f000 fc18 	bl	800291c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <_ZL12MX_ADC1_Initv+0x1e8>)
 80020ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020f0:	2312      	movs	r3, #18
 80020f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	4825      	ldr	r0, [pc, #148]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 80020fa:	f001 fd11 	bl	8003b20 <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <_ZL12MX_ADC1_Initv+0x15a>
  {
    Error_Handler();
 800210e:	f000 fc05 	bl	800291c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <_ZL12MX_ADC1_Initv+0x1ec>)
 8002114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002116:	2318      	movs	r3, #24
 8002118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	481c      	ldr	r0, [pc, #112]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002120:	f001 fcfe 	bl	8003b20 <HAL_ADC_ConfigChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 8002134:	f000 fbf2 	bl	800291c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <_ZL12MX_ADC1_Initv+0x1f0>)
 800213a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800213c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002140:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4812      	ldr	r0, [pc, #72]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002148:	f001 fcea 	bl	8003b20 <HAL_ADC_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <_ZL12MX_ADC1_Initv+0x1a8>
  {
    Error_Handler();
 800215c:	f000 fbde 	bl	800291c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <_ZL12MX_ADC1_Initv+0x1f4>)
 8002162:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002164:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <_ZL12MX_ADC1_Initv+0x1d8>)
 8002170:	f001 fcd6 	bl	8003b20 <HAL_ADC_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <_ZL12MX_ADC1_Initv+0x1d0>
  {
    Error_Handler();
 8002184:	f000 fbca 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200002f4 	.word	0x200002f4
 8002194:	42028000 	.word	0x42028000
 8002198:	14f00020 	.word	0x14f00020
 800219c:	19200040 	.word	0x19200040
 80021a0:	1d500080 	.word	0x1d500080
 80021a4:	c7520000 	.word	0xc7520000
 80021a8:	cb840000 	.word	0xcb840000
 80021ac:	80000001 	.word	0x80000001

080021b0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b09c      	sub	sp, #112	; 0x70
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
 80021e0:	615a      	str	r2, [r3, #20]
 80021e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2234      	movs	r2, #52	; 0x34
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f00e fb98 	bl	8010920 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021f0:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 80021f2:	4a5e      	ldr	r2, [pc, #376]	; (800236c <_ZL12MX_TIM1_Initv+0x1bc>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10999;
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 80021f8:	f642 22f7 	movw	r2, #10999	; 0x2af7
 80021fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 254;
 8002204:	4b58      	ldr	r3, [pc, #352]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002206:	22fe      	movs	r2, #254	; 0xfe
 8002208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002210:	4b55      	ldr	r3, [pc, #340]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800221c:	4852      	ldr	r0, [pc, #328]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 800221e:	f006 faa7 	bl	8008770 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8002232:	f000 fb73 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800223c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002240:	4619      	mov	r1, r3
 8002242:	4849      	ldr	r0, [pc, #292]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002244:	f006 fd5c 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8002258:	f000 fb60 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800225c:	4842      	ldr	r0, [pc, #264]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 800225e:	f006 fade 	bl	800881e <HAL_TIM_PWM_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8002272:	f000 fb53 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002282:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002286:	4619      	mov	r1, r3
 8002288:	4837      	ldr	r0, [pc, #220]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 800228a:	f007 fa35 	bl	80096f8 <HAL_TIMEx_MasterConfigSynchronization>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 800229e:	f000 fb3d 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a2:	2360      	movs	r3, #96	; 0x60
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022aa:	2300      	movs	r3, #0
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022ae:	2300      	movs	r3, #0
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022c2:	2200      	movs	r2, #0
 80022c4:	4619      	mov	r1, r3
 80022c6:	4828      	ldr	r0, [pc, #160]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 80022c8:	f006 fc06 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 80022dc:	f000 fb1e 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022e4:	2208      	movs	r2, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	481f      	ldr	r0, [pc, #124]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 80022ea:	f006 fbf5 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 80022fe:	f000 fb0d 	bl	800291c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	480a      	ldr	r0, [pc, #40]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 8002340:	f007 fa62 	bl	8009808 <HAL_TIMEx_ConfigBreakDeadTime>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <_ZL12MX_TIM1_Initv+0x1a8>
  {
    Error_Handler();
 8002354:	f000 fae2 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <_ZL12MX_TIM1_Initv+0x1b8>)
 800235a:	f000 fc51 	bl	8002c00 <HAL_TIM_MspPostInit>

}
 800235e:	bf00      	nop
 8002360:	3770      	adds	r7, #112	; 0x70
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200003c4 	.word	0x200003c4
 800236c:	40012c00 	.word	0x40012c00

08002370 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002382:	463b      	mov	r3, r7
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	615a      	str	r2, [r3, #20]
 8002392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002394:	4b31      	ldr	r3, [pc, #196]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 8002396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800239a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800239c:	4b2f      	ldr	r3, [pc, #188]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b29      	ldr	r3, [pc, #164]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023ba:	4828      	ldr	r0, [pc, #160]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 80023bc:	f006 fa2f 	bl	800881e <HAL_TIM_PWM_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80023d0:	f000 faa4 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	481e      	ldr	r0, [pc, #120]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 80023e4:	f007 f988 	bl	80096f8 <HAL_TIMEx_MasterConfigSynchronization>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 80023f8:	f000 fa90 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fc:	2360      	movs	r3, #96	; 0x60
 80023fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	2208      	movs	r2, #8
 8002410:	4619      	mov	r1, r3
 8002412:	4812      	ldr	r0, [pc, #72]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 8002414:	f006 fb60 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf14      	ite	ne
 800241e:	2301      	movne	r3, #1
 8002420:	2300      	moveq	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8002428:	f000 fa78 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800242c:	463b      	mov	r3, r7
 800242e:	220c      	movs	r2, #12
 8002430:	4619      	mov	r1, r3
 8002432:	480a      	ldr	r0, [pc, #40]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 8002434:	f006 fb50 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8002448:	f000 fa68 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <_ZL12MX_TIM2_Initv+0xec>)
 800244e:	f000 fbd7 	bl	8002c00 <HAL_TIM_MspPostInit>

}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000410 	.word	0x20000410

08002460 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002480:	463b      	mov	r3, r7
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	611a      	str	r2, [r3, #16]
 800248e:	615a      	str	r2, [r3, #20]
 8002490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 8002494:	4a39      	ldr	r2, [pc, #228]	; (800257c <_ZL12MX_TIM3_Initv+0x11c>)
 8002496:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10999;
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 800249a:	f642 22f7 	movw	r2, #10999	; 0x2af7
 800249e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b35      	ldr	r3, [pc, #212]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 80024a8:	22ff      	movs	r2, #255	; 0xff
 80024aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ac:	4b32      	ldr	r3, [pc, #200]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024b8:	482f      	ldr	r0, [pc, #188]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 80024ba:	f006 f959 	bl	8008770 <HAL_TIM_Base_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80024ce:	f000 fa25 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024dc:	4619      	mov	r1, r3
 80024de:	4826      	ldr	r0, [pc, #152]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 80024e0:	f006 fc0e 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 80024f4:	f000 fa12 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 80024fa:	f006 f990 	bl	800881e <HAL_TIM_PWM_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 800250e:	f000 fa05 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	4619      	mov	r1, r3
 8002520:	4815      	ldr	r0, [pc, #84]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 8002522:	f007 f8e9 	bl	80096f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8002536:	f000 f9f1 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253a:	2360      	movs	r3, #96	; 0x60
 800253c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800254a:	463b      	mov	r3, r7
 800254c:	220c      	movs	r2, #12
 800254e:	4619      	mov	r1, r3
 8002550:	4809      	ldr	r0, [pc, #36]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 8002552:	f006 fac1 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8002566:	f000 f9d9 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800256a:	4803      	ldr	r0, [pc, #12]	; (8002578 <_ZL12MX_TIM3_Initv+0x118>)
 800256c:	f000 fb48 	bl	8002c00 <HAL_TIM_MspPostInit>

}
 8002570:	bf00      	nop
 8002572:	3738      	adds	r7, #56	; 0x38
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	2000045c 	.word	0x2000045c
 800257c:	40000400 	.word	0x40000400

08002580 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b09c      	sub	sp, #112	; 0x70
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	615a      	str	r2, [r3, #20]
 80025b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2234      	movs	r2, #52	; 0x34
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f00e f9b0 	bl	8010920 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025c2:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <_ZL13MX_TIM15_Initv+0x180>)
 80025c4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10999;
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025c8:	f642 22f7 	movw	r2, #10999	; 0x2af7
 80025cc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 80025d4:	4b49      	ldr	r3, [pc, #292]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025d6:	2263      	movs	r2, #99	; 0x63
 80025d8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025da:	4b48      	ldr	r3, [pc, #288]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b45      	ldr	r3, [pc, #276]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80025ec:	4843      	ldr	r0, [pc, #268]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80025ee:	f006 f8bf 	bl	8008770 <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 8002602:	f000 f98b 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800260c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002610:	4619      	mov	r1, r3
 8002612:	483a      	ldr	r0, [pc, #232]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 8002614:	f006 fb74 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8002628:	f000 f978 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800262c:	4833      	ldr	r0, [pc, #204]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 800262e:	f006 f8f6 	bl	800881e <HAL_TIM_PWM_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 8002642:	f000 f96b 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800264e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002652:	4619      	mov	r1, r3
 8002654:	4829      	ldr	r0, [pc, #164]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 8002656:	f007 f84f 	bl	80096f8 <HAL_TIMEx_MasterConfigSynchronization>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 800266a:	f000 f957 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800266e:	2360      	movs	r3, #96	; 0x60
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002676:	2300      	movs	r3, #0
 8002678:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800267a:	2300      	movs	r3, #0
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800268a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800268e:	2204      	movs	r2, #4
 8002690:	4619      	mov	r1, r3
 8002692:	481a      	ldr	r0, [pc, #104]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 8002694:	f006 fa20 	bl	8008ad8 <HAL_TIM_PWM_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <_ZL13MX_TIM15_Initv+0x12c>
  {
    Error_Handler();
 80026a8:	f000 f938 	bl	800291c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	480a      	ldr	r0, [pc, #40]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80026d4:	f007 f898 	bl	8009808 <HAL_TIMEx_ConfigBreakDeadTime>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <_ZL13MX_TIM15_Initv+0x16c>
  {
    Error_Handler();
 80026e8:	f000 f918 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <_ZL13MX_TIM15_Initv+0x17c>)
 80026ee:	f000 fa87 	bl	8002c00 <HAL_TIM_MspPostInit>

}
 80026f2:	bf00      	nop
 80026f4:	3770      	adds	r7, #112	; 0x70
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200004a8 	.word	0x200004a8
 8002700:	40014000 	.word	0x40014000

08002704 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002708:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800270c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800272a:	220c      	movs	r2, #12
 800272c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002748:	2200      	movs	r2, #0
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800274c:	481b      	ldr	r0, [pc, #108]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800274e:	f007 f8fb 	bl	8009948 <HAL_HalfDuplex_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8002762:	f000 f8db 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002766:	2100      	movs	r1, #0
 8002768:	4814      	ldr	r0, [pc, #80]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 800276a:	f007 fe97 	bl	800a49c <HAL_UARTEx_SetTxFifoThreshold>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800277e:	f000 f8cd 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002782:	2100      	movs	r1, #0
 8002784:	480d      	ldr	r0, [pc, #52]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002786:	f007 fec7 	bl	800a518 <HAL_UARTEx_SetRxFifoThreshold>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800279a:	f000 f8bf 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800279e:	4807      	ldr	r0, [pc, #28]	; (80027bc <_ZL19MX_USART1_UART_Initv+0xb8>)
 80027a0:	f007 fe43 	bl	800a42a <HAL_UARTEx_DisableFifoMode>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80027b4:	f000 f8b2 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200004f4 	.word	0x200004f4
 80027c0:	40013800 	.word	0x40013800

080027c4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <_ZL11MX_DMA_Initv+0x50>)
 80027cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <_ZL11MX_DMA_Initv+0x50>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6493      	str	r3, [r2, #72]	; 0x48
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <_ZL11MX_DMA_Initv+0x50>)
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <_ZL11MX_DMA_Initv+0x50>)
 80027e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <_ZL11MX_DMA_Initv+0x50>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6493      	str	r3, [r2, #72]	; 0x48
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <_ZL11MX_DMA_Initv+0x50>)
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	201d      	movs	r0, #29
 8002800:	f002 f837 	bl	8004872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002804:	201d      	movs	r0, #29
 8002806:	f002 f84e 	bl	80048a6 <HAL_NVIC_EnableIRQ>

}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000

08002818 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281e:	f107 030c 	add.w	r3, r7, #12
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
 800282c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	4b37      	ldr	r3, [pc, #220]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a36      	ldr	r2, [pc, #216]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	4a30      	ldr	r2, [pc, #192]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800285e:	4b2b      	ldr	r3, [pc, #172]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 8002864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <_ZL12MX_GPIO_Initv+0xf4>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	2108      	movs	r1, #8
 800287a:	4825      	ldr	r0, [pc, #148]	; (8002910 <_ZL12MX_GPIO_Initv+0xf8>)
 800287c:	f002 fca2 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|TMC_S1_Pin|TMC_S2_Pin, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	21e0      	movs	r1, #224	; 0xe0
 8002884:	4823      	ldr	r0, [pc, #140]	; (8002914 <_ZL12MX_GPIO_Initv+0xfc>)
 8002886:	f002 fc9d 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMC_S3_GPIO_Port, TMC_S3_Pin, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	2108      	movs	r1, #8
 800288e:	4822      	ldr	r0, [pc, #136]	; (8002918 <_ZL12MX_GPIO_Initv+0x100>)
 8002890:	f002 fc98 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002894:	2308      	movs	r3, #8
 8002896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	4619      	mov	r1, r3
 80028aa:	4819      	ldr	r0, [pc, #100]	; (8002910 <_ZL12MX_GPIO_Initv+0xf8>)
 80028ac:	f002 fb0a 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028b0:	2320      	movs	r3, #32
 80028b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028b8:	2302      	movs	r3, #2
 80028ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	4619      	mov	r1, r3
 80028c6:	4813      	ldr	r0, [pc, #76]	; (8002914 <_ZL12MX_GPIO_Initv+0xfc>)
 80028c8:	f002 fafc 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TMC_S1_Pin TMC_S2_Pin */
  GPIO_InitStruct.Pin = TMC_S1_Pin|TMC_S2_Pin;
 80028cc:	23c0      	movs	r3, #192	; 0xc0
 80028ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	480c      	ldr	r0, [pc, #48]	; (8002914 <_ZL12MX_GPIO_Initv+0xfc>)
 80028e4:	f002 faee 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_S3_Pin */
  GPIO_InitStruct.Pin = TMC_S3_Pin;
 80028e8:	2308      	movs	r3, #8
 80028ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ec:	2301      	movs	r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TMC_S3_GPIO_Port, &GPIO_InitStruct);
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	4619      	mov	r1, r3
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <_ZL12MX_GPIO_Initv+0x100>)
 8002900:	f002 fae0 	bl	8004ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002904:	bf00      	nop
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	42020000 	.word	0x42020000
 8002914:	42020400 	.word	0x42020400
 8002918:	42021c00 	.word	0x42021c00

0800291c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002924:	e7fe      	b.n	8002924 <Error_Handler+0x8>
	...

08002928 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d12d      	bne.n	8002994 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800293e:	4293      	cmp	r3, r2
 8002940:	d128      	bne.n	8002994 <_Z41__static_initialization_and_destruction_0ii+0x6c>
TMC2208* driver = new TMC2208(&huart1);
 8002942:	2040      	movs	r0, #64	; 0x40
 8002944:	f00c fe72 	bl	800f62c <_Znwj>
 8002948:	4603      	mov	r3, r0
 800294a:	461c      	mov	r4, r3
 800294c:	2201      	movs	r2, #1
 800294e:	4922      	ldr	r1, [pc, #136]	; (80029d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002950:	4620      	mov	r0, r4
 8002952:	f7fe ff77 	bl	8001844 <_ZN7TMC2208C1EP20__UART_HandleTypeDefb>
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002958:	601c      	str	r4, [r3, #0]
MiniPID pidbed = MiniPID(16.7,0.3119,-23.99, 0.696); // zajebiste na bed
 800295a:	ed9f 3b11 	vldr	d3, [pc, #68]	; 80029a0 <_Z41__static_initialization_and_destruction_0ii+0x78>
 800295e:	ed9f 2b12 	vldr	d2, [pc, #72]	; 80029a8 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8002962:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80029b0 <_Z41__static_initialization_and_destruction_0ii+0x88>
 8002966:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80029b8 <_Z41__static_initialization_and_destruction_0ii+0x90>
 800296a:	481d      	ldr	r0, [pc, #116]	; (80029e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800296c:	f7fe fb57 	bl	800101e <_ZN7MiniPIDC1Edddd>
MiniPID pidhe0 = MiniPID(5.238, 0.0072, 3.979);
 8002970:	ed9f 2b13 	vldr	d2, [pc, #76]	; 80029c0 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8002974:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80029c8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8002978:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80029d0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800297c:	4819      	ldr	r0, [pc, #100]	; (80029e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800297e:	f7fe fb2d 	bl	8000fdc <_ZN7MiniPIDC1Eddd>
MiniPID pidhe1 = MiniPID(5.238, 0.0072, 3.979); //180 - git (1.238, 0.0041, 2.979)
 8002982:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 80029c0 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8002986:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80029c8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800298a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80029d0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800298e:	4816      	ldr	r0, [pc, #88]	; (80029e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002990:	f7fe fb24 	bl	8000fdc <_ZN7MiniPIDC1Eddd>
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bd90      	pop	{r4, r7, pc}
 800299c:	f3af 8000 	nop.w
 80029a0:	cac08312 	.word	0xcac08312
 80029a4:	3fe645a1 	.word	0x3fe645a1
 80029a8:	a3d70a3d 	.word	0xa3d70a3d
 80029ac:	c037fd70 	.word	0xc037fd70
 80029b0:	6ae7d567 	.word	0x6ae7d567
 80029b4:	3fd3f62b 	.word	0x3fd3f62b
 80029b8:	33333333 	.word	0x33333333
 80029bc:	4030b333 	.word	0x4030b333
 80029c0:	f3b645a2 	.word	0xf3b645a2
 80029c4:	400fd4fd 	.word	0x400fd4fd
 80029c8:	487fcb92 	.word	0x487fcb92
 80029cc:	3f7d7dbf 	.word	0x3f7d7dbf
 80029d0:	45a1cac1 	.word	0x45a1cac1
 80029d4:	4014f3b6 	.word	0x4014f3b6
 80029d8:	200004f4 	.word	0x200004f4
 80029dc:	200005a0 	.word	0x200005a0
 80029e0:	200005a8 	.word	0x200005a8
 80029e4:	20000628 	.word	0x20000628
 80029e8:	200006a8 	.word	0x200006a8

080029ec <_GLOBAL__sub_I_hadc1>:
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7ff ff97 	bl	8002928 <_Z41__static_initialization_and_destruction_0ii>
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_MspInit+0x44>)
 8002a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_MspInit+0x44>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_MspInit+0x44>)
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_MspInit+0x44>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_MspInit+0x44>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	; 0x58
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_MspInit+0x44>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000

08002a44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_ADC_MspInit+0xdc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d157      	bne.n	8002b16 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a66:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <HAL_ADC_MspInit+0xe0>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	4a2e      	ldr	r2, [pc, #184]	; (8002b24 <HAL_ADC_MspInit+0xe0>)
 8002a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a72:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_ADC_MspInit+0xe0>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_ADC_MspInit+0xe0>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_ADC_MspInit+0xe0>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_ADC_MspInit+0xe0>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = HE0_T_Pin|HE1_T_Pin|BED_T_Pin;
 8002a96:	2307      	movs	r3, #7
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481f      	ldr	r0, [pc, #124]	; (8002b28 <HAL_ADC_MspInit+0xe4>)
 8002aaa:	f002 fa0b 	bl	8004ec4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002aae:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <HAL_ADC_MspInit+0xec>)
 8002ab2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aba:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ac6:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ada:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ade:	2220      	movs	r2, #32
 8002ae0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ae8:	4810      	ldr	r0, [pc, #64]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002aea:	f001 fef7 	bl	80048dc <HAL_DMA_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8002af4:	f7ff ff12 	bl	800291c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002af8:	2110      	movs	r1, #16
 8002afa:	480c      	ldr	r0, [pc, #48]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002afc:	f002 f911 	bl	8004d22 <HAL_DMA_ConfigChannelAttributes>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002b06:	f7ff ff09 	bl	800291c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002b0e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <HAL_ADC_MspInit+0xe8>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b16:	bf00      	nop
 8002b18:	3728      	adds	r7, #40	; 0x28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	42028000 	.word	0x42028000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	42020000 	.word	0x42020000
 8002b2c:	2000035c 	.word	0x2000035c
 8002b30:	40020008 	.word	0x40020008

08002b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_TIM_Base_MspInit+0x80>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10c      	bne.n	8002b60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b50:	6613      	str	r3, [r2, #96]	; 0x60
 8002b52:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b5e:	e022      	b.n	8002ba6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <HAL_TIM_Base_MspInit+0x88>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10c      	bne.n	8002b84 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6593      	str	r3, [r2, #88]	; 0x58
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
}
 8002b82:	e010      	b.n	8002ba6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM15)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_TIM_Base_MspInit+0x8c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6613      	str	r3, [r2, #96]	; 0x60
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_TIM_Base_MspInit+0x84>)
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40014000 	.word	0x40014000

08002bc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d10b      	bne.n	8002bee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_TIM_PWM_MspInit+0x38>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_TIM_PWM_MspInit+0x38>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_TIM_PWM_MspInit+0x38>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a45      	ldr	r2, [pc, #276]	; (8002d34 <HAL_TIM_MspPostInit+0x134>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d11d      	bne.n	8002c5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	4a44      	ldr	r2, [pc, #272]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c2e:	4b42      	ldr	r3, [pc, #264]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002c3a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	4619      	mov	r1, r3
 8002c56:	4839      	ldr	r0, [pc, #228]	; (8002d3c <HAL_TIM_MspPostInit+0x13c>)
 8002c58:	f002 f934 	bl	8004ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002c5c:	e066      	b.n	8002d2c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d11d      	bne.n	8002ca4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c92:	2301      	movs	r3, #1
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c96:	f107 031c 	add.w	r3, r7, #28
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4828      	ldr	r0, [pc, #160]	; (8002d40 <HAL_TIM_MspPostInit+0x140>)
 8002c9e:	f002 f911 	bl	8004ec4 <HAL_GPIO_Init>
}
 8002ca2:	e043      	b.n	8002d2c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <HAL_TIM_MspPostInit+0x144>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d11c      	bne.n	8002ce8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	4a21      	ldr	r2, [pc, #132]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cba:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4817      	ldr	r0, [pc, #92]	; (8002d40 <HAL_TIM_MspPostInit+0x140>)
 8002ce2:	f002 f8ef 	bl	8004ec4 <HAL_GPIO_Init>
}
 8002ce6:	e021      	b.n	8002d2c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM15)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <HAL_TIM_MspPostInit+0x148>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d11c      	bne.n	8002d2c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_TIM_MspPostInit+0x138>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BED_Pin;
 8002d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002d1c:	230e      	movs	r3, #14
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BED_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4619      	mov	r1, r3
 8002d26:	4806      	ldr	r0, [pc, #24]	; (8002d40 <HAL_TIM_MspPostInit+0x140>)
 8002d28:	f002 f8cc 	bl	8004ec4 <HAL_GPIO_Init>
}
 8002d2c:	bf00      	nop
 8002d2e:	3730      	adds	r7, #48	; 0x30
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	42020000 	.word	0x42020000
 8002d40:	42020400 	.word	0x42020400
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40014000 	.word	0x40014000

08002d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0ae      	sub	sp, #184	; 0xb8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	2294      	movs	r2, #148	; 0x94
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f00d fdd7 	bl	8010920 <memset>
  if(huart->Instance==USART1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <HAL_UART_MspInit+0xb0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d13b      	bne.n	8002df4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d80:	2300      	movs	r3, #0
 8002d82:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 ffcb 	bl	8007d24 <HAL_RCCEx_PeriphCLKConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d94:	f7ff fdc2 	bl	800291c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_UART_MspInit+0xb4>)
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9c:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_UART_MspInit+0xb4>)
 8002d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da2:	6613      	str	r3, [r2, #96]	; 0x60
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_UART_MspInit+0xb4>)
 8002da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_UART_MspInit+0xb4>)
 8002db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_UART_MspInit+0xb4>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dbc:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_UART_MspInit+0xb4>)
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd0:	2312      	movs	r3, #18
 8002dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002de2:	2307      	movs	r3, #7
 8002de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <HAL_UART_MspInit+0xb8>)
 8002df0:	f002 f868 	bl	8004ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002df4:	bf00      	nop
 8002df6:	37b8      	adds	r7, #184	; 0xb8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40021000 	.word	0x40021000
 8002e04:	42020000 	.word	0x42020000

08002e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <NMI_Handler+0x4>

08002e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e12:	e7fe      	b.n	8002e12 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <BusFault_Handler+0x4>

08002e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <UsageFault_Handler+0x4>

08002e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e54:	f000 fa1a 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <DMA1_Channel1_IRQHandler+0x10>)
 8002e62:	f001 fe5e 	bl	8004b22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000035c 	.word	0x2000035c

08002e70 <USB_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt / USB FS wake-up interrupt through EXTI line 34.
  */
void USB_FS_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_FS_IRQn 0 */

  /* USER CODE END USB_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <USB_FS_IRQHandler+0x10>)
 8002e76:	f002 fab8 	bl	80053ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_FS_IRQn 1 */

  /* USER CODE END USB_FS_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20001c58 	.word	0x20001c58

08002e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return 1;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_kill>:

int _kill(int pid, int sig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e9e:	f00d fd0d 	bl	80108bc <__errno>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2216      	movs	r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_exit>:

void _exit (int status)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ffe7 	bl	8002e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ec6:	e7fe      	b.n	8002ec6 <_exit+0x12>

08002ec8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e00a      	b.n	8002ef0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eda:	e000      	b.n	8002ede <_read+0x16>
 8002edc:	bf00      	nop
 8002ede:	4601      	mov	r1, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60ba      	str	r2, [r7, #8]
 8002ee6:	b2ca      	uxtb	r2, r1
 8002ee8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dbf0      	blt.n	8002eda <_read+0x12>
  }

  return len;
 8002ef8:	687b      	ldr	r3, [r7, #4]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e009      	b.n	8002f28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	60ba      	str	r2, [r7, #8]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	e000      	b.n	8002f22 <_write+0x20>
 8002f20:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3301      	adds	r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	dbf1      	blt.n	8002f14 <_write+0x12>
  }
  return len;
 8002f30:	687b      	ldr	r3, [r7, #4]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <_close>:

int _close(int file)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f62:	605a      	str	r2, [r3, #4]
  return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <_isatty>:

int _isatty(int file)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f7a:	2301      	movs	r3, #1
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <_sbrk+0x5c>)
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <_sbrk+0x60>)
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <_sbrk+0x64>)
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <_sbrk+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d207      	bcs.n	8002fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd4:	f00d fc72 	bl	80108bc <__errno>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	220c      	movs	r2, #12
 8002fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e009      	b.n	8002ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <_sbrk+0x64>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a05      	ldr	r2, [pc, #20]	; (8003008 <_sbrk+0x64>)
 8002ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20030000 	.word	0x20030000
 8003004:	00000400 	.word	0x00000400
 8003008:	20000770 	.word	0x20000770
 800300c:	20002180 	.word	0x20002180

08003010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <SystemInit+0x20>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <SystemInit+0x20>)
 800301c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <SystemCoreClockUpdate+0x144>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <SystemCoreClockUpdate+0x144>)
 8003048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e005      	b.n	8003062 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8003056:	4b48      	ldr	r3, [pc, #288]	; (8003178 <SystemCoreClockUpdate+0x144>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8003062:	4a46      	ldr	r2, [pc, #280]	; (800317c <SystemCoreClockUpdate+0x148>)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <SystemCoreClockUpdate+0x144>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d866      	bhi.n	8003146 <SystemCoreClockUpdate+0x112>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <SystemCoreClockUpdate+0x4c>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5
 8003084:	08003147 	.word	0x08003147
 8003088:	08003147 	.word	0x08003147
 800308c:	08003147 	.word	0x08003147
 8003090:	080030bd 	.word	0x080030bd
 8003094:	08003147 	.word	0x08003147
 8003098:	08003147 	.word	0x08003147
 800309c:	08003147 	.word	0x08003147
 80030a0:	080030c5 	.word	0x080030c5
 80030a4:	08003147 	.word	0x08003147
 80030a8:	08003147 	.word	0x08003147
 80030ac:	08003147 	.word	0x08003147
 80030b0:	080030cd 	.word	0x080030cd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80030b4:	4a32      	ldr	r2, [pc, #200]	; (8003180 <SystemCoreClockUpdate+0x14c>)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6013      	str	r3, [r2, #0]
      break;
 80030ba:	e048      	b.n	800314e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80030bc:	4b30      	ldr	r3, [pc, #192]	; (8003180 <SystemCoreClockUpdate+0x14c>)
 80030be:	4a31      	ldr	r2, [pc, #196]	; (8003184 <SystemCoreClockUpdate+0x150>)
 80030c0:	601a      	str	r2, [r3, #0]
      break;
 80030c2:	e044      	b.n	800314e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80030c4:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <SystemCoreClockUpdate+0x14c>)
 80030c6:	4a2f      	ldr	r2, [pc, #188]	; (8003184 <SystemCoreClockUpdate+0x150>)
 80030c8:	601a      	str	r2, [r3, #0]
      break;
 80030ca:	e040      	b.n	800314e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030cc:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <SystemCoreClockUpdate+0x144>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80030d6:	4b28      	ldr	r3, [pc, #160]	; (8003178 <SystemCoreClockUpdate+0x144>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	3301      	adds	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d003      	beq.n	80030f2 <SystemCoreClockUpdate+0xbe>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d006      	beq.n	80030fe <SystemCoreClockUpdate+0xca>
 80030f0:	e00b      	b.n	800310a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80030f2:	4a24      	ldr	r2, [pc, #144]	; (8003184 <SystemCoreClockUpdate+0x150>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	613b      	str	r3, [r7, #16]
          break;
 80030fc:	e00b      	b.n	8003116 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <SystemCoreClockUpdate+0x150>)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	613b      	str	r3, [r7, #16]
          break;
 8003108:	e005      	b.n	8003116 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	613b      	str	r3, [r7, #16]
          break;
 8003114:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <SystemCoreClockUpdate+0x144>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <SystemCoreClockUpdate+0x144>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0e5b      	lsrs	r3, r3, #25
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	3301      	adds	r3, #1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <SystemCoreClockUpdate+0x14c>)
 8003142:	6013      	str	r3, [r2, #0]
      break;
 8003144:	e003      	b.n	800314e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8003146:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <SystemCoreClockUpdate+0x14c>)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	6013      	str	r3, [r2, #0]
      break;
 800314c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <SystemCoreClockUpdate+0x144>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <SystemCoreClockUpdate+0x154>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <SystemCoreClockUpdate+0x14c>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	4a05      	ldr	r2, [pc, #20]	; (8003180 <SystemCoreClockUpdate+0x14c>)
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40021000 	.word	0x40021000
 800317c:	08015294 	.word	0x08015294
 8003180:	20000000 	.word	0x20000000
 8003184:	00f42400 	.word	0x00f42400
 8003188:	0801527c 	.word	0x0801527c

0800318c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800318c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003190:	f7ff ff3e 	bl	8003010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003194:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003196:	e003      	b.n	80031a0 <LoopCopyDataInit>

08003198 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800319a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800319c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800319e:	3104      	adds	r1, #4

080031a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031a0:	480a      	ldr	r0, [pc, #40]	; (80031cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031a8:	d3f6      	bcc.n	8003198 <CopyDataInit>
	ldr	r2, =_sbss
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031ac:	e002      	b.n	80031b4 <LoopFillZerobss>

080031ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031b0:	f842 3b04 	str.w	r3, [r2], #4

080031b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <LoopForever+0x16>)
	cmp	r2, r3
 80031b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031b8:	d3f9      	bcc.n	80031ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031ba:	f00d fb85 	bl	80108c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031be:	f7fe fd03 	bl	8001bc8 <main>

080031c2 <LoopForever>:

LoopForever:
    b LoopForever
 80031c2:	e7fe      	b.n	80031c2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80031c4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80031c8:	080157e8 	.word	0x080157e8
	ldr	r0, =_sdata
 80031cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80031d0:	200002d4 	.word	0x200002d4
	ldr	r2, =_sbss
 80031d4:	200002d8 	.word	0x200002d8
	ldr	r3, = _ebss
 80031d8:	20002180 	.word	0x20002180

080031dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031dc:	e7fe      	b.n	80031dc <ADC1_2_IRQHandler>

080031de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80031e8:	2004      	movs	r0, #4
 80031ea:	f001 fb37 	bl	800485c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80031ee:	f7ff ff21 	bl	8003034 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031f2:	2007      	movs	r0, #7
 80031f4:	f000 f80e 	bl	8003214 <HAL_InitTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	71fb      	strb	r3, [r7, #7]
 8003202:	e001      	b.n	8003208 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003204:	f7ff fbfa 	bl	80029fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003208:	79fb      	ldrb	r3, [r7, #7]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_InitTick+0x6c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d023      	beq.n	8003270 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_InitTick+0x70>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_InitTick+0x6c>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003236:	fbb3 f3f1 	udiv	r3, r3, r1
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fb3f 	bl	80048c2 <HAL_SYSTICK_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b07      	cmp	r3, #7
 800324e:	d809      	bhi.n	8003264 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003250:	2200      	movs	r2, #0
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f001 fb0b 	bl	8004872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_InitTick+0x74>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e007      	b.n	8003274 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e004      	b.n	8003274 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e001      	b.n	8003274 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000008 	.word	0x20000008
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x20>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x24>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4413      	add	r3, r2
 800329c:	4a04      	ldr	r2, [pc, #16]	; (80032b0 <HAL_IncTick+0x24>)
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000008 	.word	0x20000008
 80032b0:	20000774 	.word	0x20000774

080032b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_GetTick+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000774 	.word	0x20000774

080032cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff ffee 	bl	80032b4 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d005      	beq.n	80032f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_Delay+0x44>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032f2:	bf00      	nop
 80032f4:	f7ff ffde 	bl	80032b4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d8f7      	bhi.n	80032f4 <HAL_Delay+0x28>
  {
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000008 	.word	0x20000008

08003314 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	609a      	str	r2, [r3, #8]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3360      	adds	r3, #96	; 0x60
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <LL_ADC_SetOffset+0x44>)
 800339e:	4013      	ands	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	03fff000 	.word	0x03fff000

080033c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3360      	adds	r3, #96	; 0x60
 80033d2:	461a      	mov	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3360      	adds	r3, #96	; 0x60
 8003400:	461a      	mov	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	431a      	orrs	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	615a      	str	r2, [r3, #20]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003472:	b480      	push	{r7}
 8003474:	b087      	sub	sp, #28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3330      	adds	r3, #48	; 0x30
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	4413      	add	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	211f      	movs	r1, #31
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	f003 011f 	and.w	r1, r3, #31
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	431a      	orrs	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b087      	sub	sp, #28
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3314      	adds	r3, #20
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	0e5b      	lsrs	r3, r3, #25
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	4413      	add	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	0d1b      	lsrs	r3, r3, #20
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2107      	movs	r1, #7
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	0d1b      	lsrs	r3, r3, #20
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	431a      	orrs	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003538:	43db      	mvns	r3, r3
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0318 	and.w	r3, r3, #24
 8003542:	4908      	ldr	r1, [pc, #32]	; (8003564 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003544:	40d9      	lsrs	r1, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	400b      	ands	r3, r1
 800354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354e:	431a      	orrs	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	0007ffff 	.word	0x0007ffff

08003568 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 031f 	and.w	r3, r3, #31
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6093      	str	r3, [r2, #8]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035bc:	d101      	bne.n	80035c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360c:	d101      	bne.n	8003612 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <LL_ADC_IsEnabled+0x18>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <LL_ADC_IsEnabled+0x1a>
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800367e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d101      	bne.n	80036ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d101      	bne.n	80036d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e12e      	b.n	800395c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff f999 	bl	8002a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff3f 	bl	80035a8 <LL_ADC_IsDeepPowerDownEnabled>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff25 	bl	8003584 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff5a 	bl	80035f8 <LL_ADC_IsInternalRegulatorEnabled>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d115      	bne.n	8003776 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff ff3e 	bl	80035d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003754:	4b83      	ldr	r3, [pc, #524]	; (8003964 <HAL_ADC_Init+0x280>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	4a83      	ldr	r2, [pc, #524]	; (8003968 <HAL_ADC_Init+0x284>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	3301      	adds	r3, #1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003768:	e002      	b.n	8003770 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3b01      	subs	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f9      	bne.n	800376a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff3c 	bl	80035f8 <LL_ADC_IsInternalRegulatorEnabled>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	f043 0210 	orr.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ff75 	bl	8003696 <LL_ADC_REG_IsConversionOngoing>
 80037ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 80c7 	bne.w	800394a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 80c3 	bne.w	800394a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037cc:	f043 0202 	orr.w	r2, r3, #2
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff35 	bl	8003648 <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d110      	bne.n	8003806 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037e4:	4861      	ldr	r0, [pc, #388]	; (800396c <HAL_ADC_Init+0x288>)
 80037e6:	f7ff ff2f 	bl	8003648 <LL_ADC_IsEnabled>
 80037ea:	4604      	mov	r4, r0
 80037ec:	4860      	ldr	r0, [pc, #384]	; (8003970 <HAL_ADC_Init+0x28c>)
 80037ee:	f7ff ff2b 	bl	8003648 <LL_ADC_IsEnabled>
 80037f2:	4603      	mov	r3, r0
 80037f4:	4323      	orrs	r3, r4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d105      	bne.n	8003806 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4619      	mov	r1, r3
 8003800:	485c      	ldr	r0, [pc, #368]	; (8003974 <HAL_ADC_Init+0x290>)
 8003802:	f7ff fd87 	bl	8003314 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7e5b      	ldrb	r3, [r3, #25]
 800380a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003810:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003816:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800381c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003824:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	3b01      	subs	r3, #1
 800383a:	045b      	lsls	r3, r3, #17
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_ADC_Init+0x294>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	69b9      	ldr	r1, [r7, #24]
 800386e:	430b      	orrs	r3, r1
 8003870:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ff20 	bl	80036bc <LL_ADC_INJ_IsConversionOngoing>
 800387c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d140      	bne.n	8003906 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d13d      	bne.n	8003906 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7e1b      	ldrb	r3, [r3, #24]
 8003892:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003894:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800389c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ac:	f023 0306 	bic.w	r3, r3, #6
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	69b9      	ldr	r1, [r7, #24]
 80038b6:	430b      	orrs	r3, r1
 80038b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d118      	bne.n	80038f6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038ce:	f023 0304 	bic.w	r3, r3, #4
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038e6:	430a      	orrs	r2, r1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	611a      	str	r2, [r3, #16]
 80038f4:	e007      	b.n	8003906 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10c      	bne.n	8003928 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	f023 010f 	bic.w	r1, r3, #15
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	1e5a      	subs	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
 8003926:	e007      	b.n	8003938 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 020f 	bic.w	r2, r2, #15
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f023 0303 	bic.w	r3, r3, #3
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	659a      	str	r2, [r3, #88]	; 0x58
 8003948:	e007      	b.n	800395a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f043 0210 	orr.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800395a:	7ffb      	ldrb	r3, [r7, #31]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3724      	adds	r7, #36	; 0x24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd90      	pop	{r4, r7, pc}
 8003964:	20000000 	.word	0x20000000
 8003968:	053e2d63 	.word	0x053e2d63
 800396c:	42028000 	.word	0x42028000
 8003970:	42028100 	.word	0x42028100
 8003974:	42028300 	.word	0x42028300
 8003978:	fff0c007 	.word	0xfff0c007

0800397c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003988:	4850      	ldr	r0, [pc, #320]	; (8003acc <HAL_ADC_Start_DMA+0x150>)
 800398a:	f7ff fded 	bl	8003568 <LL_ADC_GetMultimode>
 800398e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fe7e 	bl	8003696 <LL_ADC_REG_IsConversionOngoing>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 808e 	bne.w	8003abe <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_ADC_Start_DMA+0x34>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e089      	b.n	8003ac4 <HAL_ADC_Start_DMA+0x148>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d002      	beq.n	80039ca <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	d172      	bne.n	8003ab0 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fc92 	bl	80042f4 <ADC_Enable>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d165      	bne.n	8003aa6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a37      	ldr	r2, [pc, #220]	; (8003ad0 <HAL_ADC_Start_DMA+0x154>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d002      	beq.n	80039fe <HAL_ADC_Start_DMA+0x82>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	e000      	b.n	8003a00 <HAL_ADC_Start_DMA+0x84>
 80039fe:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <HAL_ADC_Start_DMA+0x158>)
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d002      	beq.n	8003a0e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	f023 0206 	bic.w	r2, r3, #6
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a32:	e002      	b.n	8003a3a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3e:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_ADC_Start_DMA+0x15c>)
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	4a25      	ldr	r2, [pc, #148]	; (8003adc <HAL_ADC_Start_DMA+0x160>)
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <HAL_ADC_Start_DMA+0x164>)
 8003a50:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	221c      	movs	r2, #28
 8003a58:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0210 	orr.w	r2, r2, #16
 8003a70:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3340      	adds	r3, #64	; 0x40
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f000 ffcb 	bl	8004a2c <HAL_DMA_Start_IT>
 8003a96:	4603      	mov	r3, r0
 8003a98:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fde5 	bl	800366e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003aa4:	e00d      	b.n	8003ac2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8003aae:	e008      	b.n	8003ac2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003abc:	e001      	b.n	8003ac2 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	42028300 	.word	0x42028300
 8003ad0:	42028100 	.word	0x42028100
 8003ad4:	42028000 	.word	0x42028000
 8003ad8:	08004401 	.word	0x08004401
 8003adc:	080044d9 	.word	0x080044d9
 8003ae0:	080044f5 	.word	0x080044f5

08003ae4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b0b7      	sub	sp, #220	; 0xdc
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x22>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e3c1      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x7a6>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fda1 	bl	8003696 <LL_ADC_REG_IsConversionOngoing>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 83a6 	bne.w	80042a8 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f7ff fc82 	bl	8003472 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fd8f 	bl	8003696 <LL_ADC_REG_IsConversionOngoing>
 8003b78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fd9b 	bl	80036bc <LL_ADC_INJ_IsConversionOngoing>
 8003b86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 81c1 	bne.w	8003f16 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f040 81bc 	bne.w	8003f16 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f7ff fc89 	bl	80034ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fc30 	bl	8003426 <LL_ADC_SetSamplingTimeCommonConfig>
 8003bc6:	e00e      	b.n	8003be6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f7ff fc78 	bl	80034ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fc20 	bl	8003426 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d00a      	beq.n	8003c1e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6919      	ldr	r1, [r3, #16]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c18:	f7ff fbb0 	bl	800337c <LL_ADC_SetOffset>
 8003c1c:	e17b      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fbcd 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x12a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fbc2 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003c40:	4603      	mov	r3, r0
 8003c42:	0e9b      	lsrs	r3, r3, #26
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	e01e      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x168>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fbb7 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e004      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8003c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x180>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	0e9b      	lsrs	r3, r3, #26
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	e018      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x1b2>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e004      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d106      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fb86 	bl	80033f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fb6a 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x1f0>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fb5f 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003d06:	4603      	mov	r3, r0
 8003d08:	0e9b      	lsrs	r3, r3, #26
 8003d0a:	f003 021f 	and.w	r2, r3, #31
 8003d0e:	e01e      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x22e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fb54 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8003d3e:	2320      	movs	r3, #32
 8003d40:	e004      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8003d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x246>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	0e9b      	lsrs	r3, r3, #26
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	e018      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x278>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	e004      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8003d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d106      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fb23 	bl	80033f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fb07 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x2b6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fafc 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	0e9b      	lsrs	r3, r3, #26
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	e01e      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x2f4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2102      	movs	r1, #2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff faf1 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dec:	fa93 f3a3 	rbit	r3, r3
 8003df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003e04:	2320      	movs	r3, #32
 8003e06:	e004      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e0c:	fab3 f383 	clz	r3, r3
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x30c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	e016      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x33a>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	e004      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8003e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d106      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fac2 	bl	80033f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2103      	movs	r1, #3
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff faa6 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x378>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2103      	movs	r1, #3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fa9b 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	0e9b      	lsrs	r3, r3, #26
 8003e92:	f003 021f 	and.w	r2, r3, #31
 8003e96:	e017      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x3a8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2103      	movs	r1, #3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fa90 	bl	80033c4 <LL_ADC_GetOffsetChannel>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003eba:	2320      	movs	r3, #32
 8003ebc:	e003      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x3c0>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	0e9b      	lsrs	r3, r3, #26
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	e011      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x3e4>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e003      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d106      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2103      	movs	r1, #3
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fa6d 	bl	80033f0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fb94 	bl	8003648 <LL_ADC_IsEnabled>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 81c9 	bne.w	80042ba <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f7ff faf3 	bl	8003520 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a8f      	ldr	r2, [pc, #572]	; (800417c <HAL_ADC_ConfigChannel+0x65c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	f040 8131 	bne.w	80041a8 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x44e>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	0e9b      	lsrs	r3, r3, #26
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	bf94      	ite	ls
 8003f66:	2301      	movls	r3, #1
 8003f68:	2300      	movhi	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e019      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x482>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003f86:	2320      	movs	r3, #32
 8003f88:	e003      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8c:	fab3 f383 	clz	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2b09      	cmp	r3, #9
 8003f9a:	bf94      	ite	ls
 8003f9c:	2301      	movls	r3, #1
 8003f9e:	2300      	movhi	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d079      	beq.n	800409a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x4a2>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0e9b      	lsrs	r3, r3, #26
 8003fb8:	3301      	adds	r3, #1
 8003fba:	069b      	lsls	r3, r3, #26
 8003fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc0:	e015      	b.n	8003fee <HAL_ADC_ConfigChannel+0x4ce>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003fda:	2320      	movs	r3, #32
 8003fdc:	e003      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	069b      	lsls	r3, r3, #26
 8003fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_ADC_ConfigChannel+0x4ee>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	3301      	adds	r3, #1
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	e017      	b.n	800403e <HAL_ADC_ConfigChannel+0x51e>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800401c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8004026:	2320      	movs	r3, #32
 8004028:	e003      	b.n	8004032 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800402a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3301      	adds	r3, #1
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	ea42 0103 	orr.w	r1, r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x544>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	0e9b      	lsrs	r3, r3, #26
 8004054:	3301      	adds	r3, #1
 8004056:	f003 021f 	and.w	r2, r3, #31
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	051b      	lsls	r3, r3, #20
 8004062:	e018      	b.n	8004096 <HAL_ADC_ConfigChannel+0x576>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e003      	b.n	8004088 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f003 021f 	and.w	r2, r3, #31
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004096:	430b      	orrs	r3, r1
 8004098:	e081      	b.n	800419e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d107      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x596>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	0e9b      	lsrs	r3, r3, #26
 80040ac:	3301      	adds	r3, #1
 80040ae:	069b      	lsls	r3, r3, #26
 80040b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b4:	e015      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x5c2>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80040ce:	2320      	movs	r3, #32
 80040d0:	e003      	b.n	80040da <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	069b      	lsls	r3, r3, #26
 80040de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x5e2>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0e9b      	lsrs	r3, r3, #26
 80040f4:	3301      	adds	r3, #1
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	e017      	b.n	8004132 <HAL_ADC_ConfigChannel+0x612>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	61fb      	str	r3, [r7, #28]
  return result;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800411a:	2320      	movs	r3, #32
 800411c:	e003      	b.n	8004126 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	b2db      	uxtb	r3, r3
 8004126:	3301      	adds	r3, #1
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	ea42 0103 	orr.w	r1, r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <HAL_ADC_ConfigChannel+0x63e>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	0e9b      	lsrs	r3, r3, #26
 8004148:	3301      	adds	r3, #1
 800414a:	f003 021f 	and.w	r2, r3, #31
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	3b1e      	subs	r3, #30
 8004156:	051b      	lsls	r3, r3, #20
 8004158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800415c:	e01e      	b.n	800419c <HAL_ADC_ConfigChannel+0x67c>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	613b      	str	r3, [r7, #16]
  return result;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e006      	b.n	8004188 <HAL_ADC_ConfigChannel+0x668>
 800417a:	bf00      	nop
 800417c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	3301      	adds	r3, #1
 800418a:	f003 021f 	and.w	r2, r3, #31
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	3b1e      	subs	r3, #30
 8004196:	051b      	lsls	r3, r3, #20
 8004198:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800419c:	430b      	orrs	r3, r1
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	6892      	ldr	r2, [r2, #8]
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7ff f991 	bl	80034ca <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <HAL_ADC_ConfigChannel+0x7b0>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8082 	beq.w	80042ba <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b6:	4847      	ldr	r0, [pc, #284]	; (80042d4 <HAL_ADC_ConfigChannel+0x7b4>)
 80041b8:	f7ff f8d2 	bl	8003360 <LL_ADC_GetCommonPathInternalCh>
 80041bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c0:	4845      	ldr	r0, [pc, #276]	; (80042d8 <HAL_ADC_ConfigChannel+0x7b8>)
 80041c2:	f7ff fa41 	bl	8003648 <LL_ADC_IsEnabled>
 80041c6:	4604      	mov	r4, r0
 80041c8:	4844      	ldr	r0, [pc, #272]	; (80042dc <HAL_ADC_ConfigChannel+0x7bc>)
 80041ca:	f7ff fa3d 	bl	8003648 <LL_ADC_IsEnabled>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4323      	orrs	r3, r4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d15e      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a41      	ldr	r2, [pc, #260]	; (80042e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d127      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d121      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a39      	ldr	r2, [pc, #228]	; (80042d8 <HAL_ADC_ConfigChannel+0x7b8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d161      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041fe:	4619      	mov	r1, r3
 8004200:	4834      	ldr	r0, [pc, #208]	; (80042d4 <HAL_ADC_ConfigChannel+0x7b4>)
 8004202:	f7ff f89a 	bl	800333a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	4a36      	ldr	r2, [pc, #216]	; (80042e8 <HAL_ADC_ConfigChannel+0x7c8>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800421e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004220:	e002      	b.n	8004228 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3b01      	subs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f9      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800422e:	e044      	b.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <HAL_ADC_ConfigChannel+0x7cc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800423a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d134      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004258:	4619      	mov	r1, r3
 800425a:	481e      	ldr	r0, [pc, #120]	; (80042d4 <HAL_ADC_ConfigChannel+0x7b4>)
 800425c:	f7ff f86d 	bl	800333a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004260:	e02b      	b.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d126      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800426c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d120      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d11b      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800428a:	4619      	mov	r1, r3
 800428c:	4811      	ldr	r0, [pc, #68]	; (80042d4 <HAL_ADC_ConfigChannel+0x7b4>)
 800428e:	f7ff f854 	bl	800333a <LL_ADC_SetCommonPathInternalCh>
 8004292:	e012      	b.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80042a6:	e008      	b.n	80042ba <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80042c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	37dc      	adds	r7, #220	; 0xdc
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	80080000 	.word	0x80080000
 80042d4:	42028300 	.word	0x42028300
 80042d8:	42028000 	.word	0x42028000
 80042dc:	42028100 	.word	0x42028100
 80042e0:	c7520000 	.word	0xc7520000
 80042e4:	20000000 	.word	0x20000000
 80042e8:	053e2d63 	.word	0x053e2d63
 80042ec:	cb840000 	.word	0xcb840000
 80042f0:	80000001 	.word	0x80000001

080042f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff f99f 	bl	8003648 <LL_ADC_IsEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d169      	bne.n	80043e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <ADC_Enable+0xfc>)
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	f043 0210 	orr.w	r2, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e055      	b.n	80043e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff f96e 	bl	8003620 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004344:	482b      	ldr	r0, [pc, #172]	; (80043f4 <ADC_Enable+0x100>)
 8004346:	f7ff f80b 	bl	8003360 <LL_ADC_GetCommonPathInternalCh>
 800434a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800434c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004354:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <ADC_Enable+0x104>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	4a28      	ldr	r2, [pc, #160]	; (80043fc <ADC_Enable+0x108>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800436e:	e002      	b.n	8004376 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	3b01      	subs	r3, #1
 8004374:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f9      	bne.n	8004370 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800437c:	f7fe ff9a 	bl	80032b4 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004382:	e028      	b.n	80043d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff f95d 	bl	8003648 <LL_ADC_IsEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff f941 	bl	8003620 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800439e:	f7fe ff89 	bl	80032b4 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d914      	bls.n	80043d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d00d      	beq.n	80043d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e007      	b.n	80043e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d1cf      	bne.n	8004384 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	8000003f 	.word	0x8000003f
 80043f4:	42028300 	.word	0x42028300
 80043f8:	20000000 	.word	0x20000000
 80043fc:	053e2d63 	.word	0x053e2d63

08004400 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004416:	2b00      	cmp	r3, #0
 8004418:	d14b      	bne.n	80044b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d021      	beq.n	8004478 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff f807 	bl	800344c <LL_ADC_REG_IsTriggerSourceSWStart>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d032      	beq.n	80044aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d12b      	bne.n	80044aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11f      	bne.n	80044aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	659a      	str	r2, [r3, #88]	; 0x58
 8004476:	e018      	b.n	80044aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d111      	bne.n	80044aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	f043 0201 	orr.w	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff fb1a 	bl	8003ae4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044b0:	e00e      	b.n	80044d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff fb24 	bl	8003b0c <HAL_ADC_ErrorCallback>
}
 80044c4:	e004      	b.n	80044d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
}
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fb06 	bl	8003af8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	f043 0204 	orr.w	r2, r3, #4
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff faf6 	bl	8003b0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <LL_ADC_IsEnabled>:
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <LL_ADC_IsEnabled+0x18>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <LL_ADC_IsEnabled+0x1a>
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_ADC_REG_IsConversionOngoing>:
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d101      	bne.n	8004566 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004574:	b590      	push	{r4, r7, lr}
 8004576:	b0a1      	sub	sp, #132	; 0x84
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800458e:	2302      	movs	r3, #2
 8004590:	e089      	b.n	80046a6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800459a:	2300      	movs	r3, #0
 800459c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800459e:	2300      	movs	r3, #0
 80045a0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a42      	ldr	r2, [pc, #264]	; (80046b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d102      	bne.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045ac:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e001      	b.n	80045b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e068      	b.n	80046a6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ffb9 	bl	800454e <LL_ADC_REG_IsConversionOngoing>
 80045dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ffb3 	bl	800454e <LL_ADC_REG_IsConversionOngoing>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d14a      	bne.n	8004684 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80045ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d147      	bne.n	8004684 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045f4:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80045f6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d027      	beq.n	8004650 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004612:	035b      	lsls	r3, r3, #13
 8004614:	430b      	orrs	r3, r1
 8004616:	431a      	orrs	r2, r3
 8004618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800461a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800461c:	4824      	ldr	r0, [pc, #144]	; (80046b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800461e:	f7ff ff83 	bl	8004528 <LL_ADC_IsEnabled>
 8004622:	4604      	mov	r4, r0
 8004624:	4823      	ldr	r0, [pc, #140]	; (80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004626:	f7ff ff7f 	bl	8004528 <LL_ADC_IsEnabled>
 800462a:	4603      	mov	r3, r0
 800462c:	4323      	orrs	r3, r4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d132      	bne.n	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800463a:	f023 030f 	bic.w	r3, r3, #15
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	6892      	ldr	r2, [r2, #8]
 8004646:	430a      	orrs	r2, r1
 8004648:	431a      	orrs	r2, r3
 800464a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800464c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800464e:	e023      	b.n	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800465c:	4814      	ldr	r0, [pc, #80]	; (80046b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800465e:	f7ff ff63 	bl	8004528 <LL_ADC_IsEnabled>
 8004662:	4604      	mov	r4, r0
 8004664:	4813      	ldr	r0, [pc, #76]	; (80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004666:	f7ff ff5f 	bl	8004528 <LL_ADC_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	4323      	orrs	r3, r4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d112      	bne.n	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800467a:	f023 030f 	bic.w	r3, r3, #15
 800467e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004680:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004682:	e009      	b.n	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004696:	e000      	b.n	800469a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004698:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80046a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3784      	adds	r7, #132	; 0x84
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}
 80046ae:	bf00      	nop
 80046b0:	42028000 	.word	0x42028000
 80046b4:	42028100 	.word	0x42028100
 80046b8:	42028300 	.word	0x42028300

080046bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <__NVIC_SetPriorityGrouping+0x44>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046d8:	4013      	ands	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ee:	4a04      	ldr	r2, [pc, #16]	; (8004700 <__NVIC_SetPriorityGrouping+0x44>)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	60d3      	str	r3, [r2, #12]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <__NVIC_GetPriorityGrouping+0x18>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	f003 0307 	and.w	r3, r3, #7
}
 8004712:	4618      	mov	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	2b00      	cmp	r3, #0
 8004730:	db0b      	blt.n	800474a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	f003 021f 	and.w	r2, r3, #31
 8004738:	4907      	ldr	r1, [pc, #28]	; (8004758 <__NVIC_EnableIRQ+0x38>)
 800473a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2001      	movs	r0, #1
 8004742:	fa00 f202 	lsl.w	r2, r0, r2
 8004746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	e000e100 	.word	0xe000e100

0800475c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476c:	2b00      	cmp	r3, #0
 800476e:	db0a      	blt.n	8004786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	490c      	ldr	r1, [pc, #48]	; (80047a8 <__NVIC_SetPriority+0x4c>)
 8004776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477a:	0152      	lsls	r2, r2, #5
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	440b      	add	r3, r1
 8004780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004784:	e00a      	b.n	800479c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	4908      	ldr	r1, [pc, #32]	; (80047ac <__NVIC_SetPriority+0x50>)
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	3b04      	subs	r3, #4
 8004794:	0152      	lsls	r2, r2, #5
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	440b      	add	r3, r1
 800479a:	761a      	strb	r2, [r3, #24]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000e100 	.word	0xe000e100
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f1c3 0307 	rsb	r3, r3, #7
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	bf28      	it	cs
 80047ce:	2303      	movcs	r3, #3
 80047d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3303      	adds	r3, #3
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d902      	bls.n	80047e0 <NVIC_EncodePriority+0x30>
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3b04      	subs	r3, #4
 80047de:	e000      	b.n	80047e2 <NVIC_EncodePriority+0x32>
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	401a      	ands	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047f8:	f04f 31ff 	mov.w	r1, #4294967295
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	43d9      	mvns	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004808:	4313      	orrs	r3, r2
         );
}
 800480a:	4618      	mov	r0, r3
 800480c:	3724      	adds	r7, #36	; 0x24
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3b01      	subs	r3, #1
 8004824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004828:	d301      	bcc.n	800482e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800482a:	2301      	movs	r3, #1
 800482c:	e00f      	b.n	800484e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <SysTick_Config+0x40>)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004836:	2107      	movs	r1, #7
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	f7ff ff8e 	bl	800475c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <SysTick_Config+0x40>)
 8004842:	2200      	movs	r2, #0
 8004844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004846:	4b04      	ldr	r3, [pc, #16]	; (8004858 <SysTick_Config+0x40>)
 8004848:	2207      	movs	r2, #7
 800484a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000e010 	.word	0xe000e010

0800485c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ff29 	bl	80046bc <__NVIC_SetPriorityGrouping>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	4603      	mov	r3, r0
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
 800487e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004880:	f7ff ff40 	bl	8004704 <__NVIC_GetPriorityGrouping>
 8004884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	6978      	ldr	r0, [r7, #20]
 800488c:	f7ff ff90 	bl	80047b0 <NVIC_EncodePriority>
 8004890:	4602      	mov	r2, r0
 8004892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff5f 	bl	800475c <__NVIC_SetPriority>
}
 800489e:	bf00      	nop
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff33 	bl	8004720 <__NVIC_EnableIRQ>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ffa4 	bl	8004818 <SysTick_Config>
 80048d0:	4603      	mov	r3, r0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e08d      	b.n	8004a0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_DMA_Init+0x138>)
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d80f      	bhi.n	800491a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	4b45      	ldr	r3, [pc, #276]	; (8004a18 <HAL_DMA_Init+0x13c>)
 8004902:	4413      	add	r3, r2
 8004904:	4a45      	ldr	r2, [pc, #276]	; (8004a1c <HAL_DMA_Init+0x140>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	091b      	lsrs	r3, r3, #4
 800490c:	009a      	lsls	r2, r3, #2
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a42      	ldr	r2, [pc, #264]	; (8004a20 <HAL_DMA_Init+0x144>)
 8004916:	649a      	str	r2, [r3, #72]	; 0x48
 8004918:	e00e      	b.n	8004938 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <HAL_DMA_Init+0x148>)
 8004922:	4413      	add	r3, r2
 8004924:	4a3d      	ldr	r2, [pc, #244]	; (8004a1c <HAL_DMA_Init+0x140>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	009a      	lsls	r2, r3, #2
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a3c      	ldr	r2, [pc, #240]	; (8004a28 <HAL_DMA_Init+0x14c>)
 8004936:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800494e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8004952:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800495c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa38 	bl	8004e00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004998:	d102      	bne.n	80049a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80049b4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d010      	beq.n	80049e0 <HAL_DMA_Init+0x104>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d80c      	bhi.n	80049e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa58 	bl	8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	e008      	b.n	80049f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40020407 	.word	0x40020407
 8004a18:	bffdfff8 	.word	0xbffdfff8
 8004a1c:	cccccccd 	.word	0xcccccccd
 8004a20:	40020000 	.word	0x40020000
 8004a24:	bffdfbf8 	.word	0xbffdfbf8
 8004a28:	40020400 	.word	0x40020400

08004a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_DMA_Start_IT+0x20>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e066      	b.n	8004b1a <HAL_DMA_Start_IT+0xee>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d155      	bne.n	8004b0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f97c 	bl	8004d82 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 020e 	orr.w	r2, r2, #14
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e00f      	b.n	8004ac4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 020a 	orr.w	r2, r2, #10
 8004ac2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e005      	b.n	8004b18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
 8004b16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	f003 031c 	and.w	r3, r3, #28
 8004b42:	2204      	movs	r2, #4
 8004b44:	409a      	lsls	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d053      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xd4>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d04e      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	f003 021c 	and.w	r2, r3, #28
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	2104      	movs	r1, #4
 8004b74:	fa01 f202 	lsl.w	r2, r1, r2
 8004b78:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80c0 	beq.w	8004d12 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004b9a:	e0ba      	b.n	8004d12 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80b6 	beq.w	8004d12 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004bae:	e0b0      	b.n	8004d12 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0204 	bic.w	r2, r2, #4
 8004bcc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	f003 021c 	and.w	r2, r3, #28
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	2104      	movs	r1, #4
 8004bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004be0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8093 	beq.w	8004d12 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004bf4:	e08d      	b.n	8004d12 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	f003 031c 	and.w	r3, r3, #28
 8004bfe:	2202      	movs	r2, #2
 8004c00:	409a      	lsls	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4013      	ands	r3, r2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d04e      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x186>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d049      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d018      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d108      	bne.n	8004c42 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d06e      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004c40:	e069      	b.n	8004d16 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d065      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004c52:	e060      	b.n	8004d16 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 020a 	bic.w	r2, r2, #10
 8004c70:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	f003 021c 	and.w	r2, r3, #28
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	2102      	movs	r1, #2
 8004c88:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8c:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d03b      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004ca6:	e036      	b.n	8004d16 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cac:	f003 031c 	and.w	r3, r3, #28
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02e      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x1f8>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d029      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 020e 	bic.w	r2, r2, #14
 8004cd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	f003 021c 	and.w	r2, r3, #28
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d10:	e002      	b.n	8004d18 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004d16:	bf00      	nop
  return;
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
}
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	72fb      	strb	r3, [r7, #11]
    return status;
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	e01b      	b.n	8004d76 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00d      	beq.n	8004d6c <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e003      	b.n	8004d6c <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  return status;
 8004d74:	7afb      	ldrb	r3, [r7, #11]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d98:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004daa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	f003 021c 	and.w	r2, r3, #28
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f202 	lsl.w	r2, r1, r2
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d108      	bne.n	8004de2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8004de0:	e007      	b.n	8004df2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d80a      	bhi.n	8004e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	089b      	lsrs	r3, r3, #2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e20:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6513      	str	r3, [r2, #80]	; 0x50
 8004e28:	e007      	b.n	8004e3a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	009a      	lsls	r2, r3, #2
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e34:	4413      	add	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	3b08      	subs	r3, #8
 8004e42:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2201      	movs	r2, #1
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40020407 	.word	0x40020407
 8004e70:	40020820 	.word	0x40020820
 8004e74:	cccccccd 	.word	0xcccccccd
 8004e78:	40020880 	.word	0x40020880

08004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	461a      	mov	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	1000823f 	.word	0x1000823f
 8004ec0:	40020940 	.word	0x40020940

08004ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ed2:	e158      	b.n	8005186 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2101      	movs	r1, #1
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 814a 	beq.w	8005180 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d005      	beq.n	8004f04 <HAL_GPIO_Init+0x40>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d130      	bne.n	8004f66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	2203      	movs	r2, #3
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4013      	ands	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f003 0201 	and.w	r2, r3, #1
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d017      	beq.n	8004fa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4013      	ands	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d123      	bne.n	8004ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	08da      	lsrs	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3208      	adds	r2, #8
 8004fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	220f      	movs	r2, #15
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	08da      	lsrs	r2, r3, #3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3208      	adds	r2, #8
 8004ff0:	6939      	ldr	r1, [r7, #16]
 8004ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	2203      	movs	r2, #3
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43db      	mvns	r3, r3
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 0203 	and.w	r2, r3, #3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80a4 	beq.w	8005180 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8005038:	4a5a      	ldr	r2, [pc, #360]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	3318      	adds	r3, #24
 8005040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	220f      	movs	r2, #15
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_GPIO_Init+0x2e4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d025      	beq.n	80050b0 <HAL_GPIO_Init+0x1ec>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a51      	ldr	r2, [pc, #324]	; (80051ac <HAL_GPIO_Init+0x2e8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d01f      	beq.n	80050ac <HAL_GPIO_Init+0x1e8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a50      	ldr	r2, [pc, #320]	; (80051b0 <HAL_GPIO_Init+0x2ec>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d019      	beq.n	80050a8 <HAL_GPIO_Init+0x1e4>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a4f      	ldr	r2, [pc, #316]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_GPIO_Init+0x1e0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a4e      	ldr	r2, [pc, #312]	; (80051b8 <HAL_GPIO_Init+0x2f4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00d      	beq.n	80050a0 <HAL_GPIO_Init+0x1dc>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a4d      	ldr	r2, [pc, #308]	; (80051bc <HAL_GPIO_Init+0x2f8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <HAL_GPIO_Init+0x1d8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a4c      	ldr	r2, [pc, #304]	; (80051c0 <HAL_GPIO_Init+0x2fc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_GPIO_Init+0x1d4>
 8005094:	2306      	movs	r3, #6
 8005096:	e00c      	b.n	80050b2 <HAL_GPIO_Init+0x1ee>
 8005098:	2307      	movs	r3, #7
 800509a:	e00a      	b.n	80050b2 <HAL_GPIO_Init+0x1ee>
 800509c:	2305      	movs	r3, #5
 800509e:	e008      	b.n	80050b2 <HAL_GPIO_Init+0x1ee>
 80050a0:	2304      	movs	r3, #4
 80050a2:	e006      	b.n	80050b2 <HAL_GPIO_Init+0x1ee>
 80050a4:	2303      	movs	r3, #3
 80050a6:	e004      	b.n	80050b2 <HAL_GPIO_Init+0x1ee>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e002      	b.n	80050b2 <HAL_GPIO_Init+0x1ee>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_GPIO_Init+0x1ee>
 80050b0:	2300      	movs	r3, #0
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	f002 0203 	and.w	r2, r2, #3
 80050b8:	00d2      	lsls	r2, r2, #3
 80050ba:	4093      	lsls	r3, r2
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80050c2:	4938      	ldr	r1, [pc, #224]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	3318      	adds	r3, #24
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050d0:	4b34      	ldr	r3, [pc, #208]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	43db      	mvns	r3, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050fa:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	43db      	mvns	r3, r3
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4013      	ands	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800511e:	4a21      	ldr	r2, [pc, #132]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005124:	4b1f      	ldr	r3, [pc, #124]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800514a:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 8005154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	43db      	mvns	r3, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005178:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3301      	adds	r3, #1
 8005184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f ae9f 	bne.w	8004ed4 <HAL_GPIO_Init+0x10>
  }
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	4002f400 	.word	0x4002f400
 80051a8:	42020000 	.word	0x42020000
 80051ac:	42020400 	.word	0x42020400
 80051b0:	42020800 	.word	0x42020800
 80051b4:	42020c00 	.word	0x42020c00
 80051b8:	42021000 	.word	0x42021000
 80051bc:	42021400 	.word	0x42021400
 80051c0:	42021800 	.word	0x42021800

080051c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
 80051d0:	4613      	mov	r3, r2
 80051d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051d4:	787b      	ldrb	r3, [r7, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051e0:	e002      	b.n	80051e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f6:	b08b      	sub	sp, #44	; 0x2c
 80051f8:	af06      	add	r7, sp, #24
 80051fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0cb      	b.n	800539e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f009 feec 	bl	800eff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2203      	movs	r2, #3
 8005224:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f005 fa16 	bl	800a65e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
 8005236:	e040      	b.n	80052ba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	440b      	add	r3, r1
 8005248:	3301      	adds	r3, #1
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	440b      	add	r3, r1
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	440b      	add	r3, r1
 8005272:	3303      	adds	r3, #3
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	440b      	add	r3, r1
 8005286:	3338      	adds	r3, #56	; 0x38
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	440b      	add	r3, r1
 800529a:	333c      	adds	r3, #60	; 0x3c
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	440b      	add	r3, r1
 80052ae:	3340      	adds	r3, #64	; 0x40
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	3301      	adds	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
 80052ba:	7bfa      	ldrb	r2, [r7, #15]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d3b9      	bcc.n	8005238 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e044      	b.n	8005354 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	440b      	add	r3, r1
 80052ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052f2:	7bfa      	ldrb	r2, [r7, #15]
 80052f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	440b      	add	r3, r1
 800531a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	440b      	add	r3, r1
 8005330:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	440b      	add	r3, r1
 8005346:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	3301      	adds	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	7bfa      	ldrb	r2, [r7, #15]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	429a      	cmp	r2, r3
 800535c:	d3b5      	bcc.n	80052ca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	687e      	ldr	r6, [r7, #4]
 8005366:	466d      	mov	r5, sp
 8005368:	f106 0410 	add.w	r4, r6, #16
 800536c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	1d33      	adds	r3, r6, #4
 8005376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005378:	6838      	ldr	r0, [r7, #0]
 800537a:	f005 f98b 	bl	800a694 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d102      	bne.n	800539c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 fc45 	bl	8006c26 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_PCD_Start+0x16>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e012      	b.n	80053e2 <HAL_PCD_Start+0x3c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f005 f931 	bl	800a630 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f007 fbf5 	bl	800cbc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f007 fbfa 	bl	800cbf0 <USB_ReadInterrupts>
 80053fc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fb05 	bl	8005a18 <PCD_EP_ISR_Handler>

    return;
 800540e:	e110      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005416:	2b00      	cmp	r3, #0
 8005418:	d013      	beq.n	8005442 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005422:	b29a      	uxth	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542c:	b292      	uxth	r2, r2
 800542e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f009 fe81 	bl	800f13a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005438:	2100      	movs	r1, #0
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8fc 	bl	8005638 <HAL_PCD_SetAddress>

    return;
 8005440:	e0f7      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005454:	b29a      	uxth	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800545e:	b292      	uxth	r2, r2
 8005460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005464:	e0e5      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00c      	beq.n	800548a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005478:	b29a      	uxth	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005482:	b292      	uxth	r2, r2
 8005484:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005488:	e0d3      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d034      	beq.n	80054fe <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800549c:	b29a      	uxth	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0204 	bic.w	r2, r2, #4
 80054a6:	b292      	uxth	r2, r2
 80054a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0208 	bic.w	r2, r2, #8
 80054be:	b292      	uxth	r2, r2
 80054c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054d6:	2100      	movs	r1, #0
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f00a f825 	bl	800f528 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f009 fe64 	bl	800f1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054f6:	b292      	uxth	r2, r2
 80054f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80054fc:	e099      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005504:	2b00      	cmp	r3, #0
 8005506:	d027      	beq.n	8005558 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005510:	b29a      	uxth	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	b292      	uxth	r2, r2
 800551c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005528:	b29a      	uxth	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005532:	b292      	uxth	r2, r2
 8005534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0204 	orr.w	r2, r2, #4
 800554a:	b292      	uxth	r2, r2
 800554c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f009 fe11 	bl	800f178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005556:	e06c      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d040      	beq.n	80055e4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005574:	b292      	uxth	r2, r2
 8005576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d12b      	bne.n	80055dc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0204 	orr.w	r2, r2, #4
 8005596:	b292      	uxth	r2, r2
 8005598:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	b292      	uxth	r2, r2
 80055b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80055d2:	2101      	movs	r1, #1
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f009 ffa7 	bl	800f528 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80055da:	e02a      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f009 fdcb 	bl	800f178 <HAL_PCD_SuspendCallback>
    return;
 80055e2:	e026      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00f      	beq.n	800560e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005600:	b292      	uxth	r2, r2
 8005602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f009 fd89 	bl	800f11e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800560c:	e011      	b.n	8005632 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005620:	b29a      	uxth	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562a:	b292      	uxth	r2, r2
 800562c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005630:	bf00      	nop
  }
}
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_PCD_SetAddress+0x1a>
 800564e:	2302      	movs	r3, #2
 8005650:	e013      	b.n	800567a <HAL_PCD_SetAddress+0x42>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	4611      	mov	r1, r2
 800566a:	4618      	mov	r0, r3
 800566c:	f007 fa95 	bl	800cb9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	4608      	mov	r0, r1
 800568c:	4611      	mov	r1, r2
 800568e:	461a      	mov	r2, r3
 8005690:	4603      	mov	r3, r0
 8005692:	70fb      	strb	r3, [r7, #3]
 8005694:	460b      	mov	r3, r1
 8005696:	803b      	strh	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da0e      	bge.n	80056c6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	705a      	strb	r2, [r3, #1]
 80056c4:	e00e      	b.n	80056e4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f003 0207 	and.w	r2, r3, #7
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4413      	add	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056f0:	883a      	ldrh	r2, [r7, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	78ba      	ldrb	r2, [r7, #2]
 80056fa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056fc:	78bb      	ldrb	r3, [r7, #2]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d102      	bne.n	8005708 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_PCD_EP_Open+0x94>
 8005712:	2302      	movs	r3, #2
 8005714:	e00e      	b.n	8005734 <HAL_PCD_EP_Open+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	4618      	mov	r0, r3
 8005726:	f004 ffd7 	bl	800a6d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005732:	7afb      	ldrb	r3, [r7, #11]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800574c:	2b00      	cmp	r3, #0
 800574e:	da0e      	bge.n	800576e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	4413      	add	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	705a      	strb	r2, [r3, #1]
 800576c:	e00e      	b.n	800578c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	f003 0207 	and.w	r2, r3, #7
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	b2da      	uxtb	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_PCD_EP_Close+0x6a>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e00e      	b.n	80057c4 <HAL_PCD_EP_Close+0x88>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f005 fb53 	bl	800ae60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	460b      	mov	r3, r1
 80057da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	f003 0207 	and.w	r2, r3, #7
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2200      	movs	r2, #0
 8005804:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	b2da      	uxtb	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6979      	ldr	r1, [r7, #20]
 800581e:	4618      	mov	r0, r3
 8005820:	f005 fd0b 	bl	800b23a <USB_EPStartXfer>

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	f003 0207 	and.w	r2, r3, #7
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	440b      	add	r3, r1
 800584c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005850:	681b      	ldr	r3, [r3, #0]
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	460b      	mov	r3, r1
 800586c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800586e:	7afb      	ldrb	r3, [r7, #11]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2201      	movs	r2, #1
 80058a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058aa:	7afb      	ldrb	r3, [r7, #11]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6979      	ldr	r1, [r7, #20]
 80058bc:	4618      	mov	r0, r3
 80058be:	f005 fcbc 	bl	800b23a <USB_EPStartXfer>

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058d8:	78fb      	ldrb	r3, [r7, #3]
 80058da:	f003 0207 	and.w	r2, r3, #7
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d901      	bls.n	80058ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e03e      	b.n	8005968 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da0e      	bge.n	8005910 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	705a      	strb	r2, [r3, #1]
 800590e:	e00c      	b.n	800592a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4413      	add	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_PCD_EP_SetStall+0x7e>
 8005946:	2302      	movs	r3, #2
 8005948:	e00e      	b.n	8005968 <HAL_PCD_EP_SetStall+0x9c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	4618      	mov	r0, r3
 800595a:	f007 f81f 	bl	800c99c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	f003 020f 	and.w	r2, r3, #15
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	429a      	cmp	r2, r3
 8005988:	d901      	bls.n	800598e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e040      	b.n	8005a10 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800598e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005992:	2b00      	cmp	r3, #0
 8005994:	da0e      	bge.n	80059b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	705a      	strb	r2, [r3, #1]
 80059b2:	e00e      	b.n	80059d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	f003 0207 	and.w	r2, r3, #7
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_PCD_EP_ClrStall+0x82>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e00e      	b.n	8005a10 <HAL_PCD_EP_ClrStall+0xa0>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f007 f81c 	bl	800ca3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b096      	sub	sp, #88	; 0x58
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a20:	e3b1      	b.n	8006186 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005a2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005a3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 8173 	bne.w	8005d2c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005a46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d150      	bne.n	8005af4 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	81fb      	strh	r3, [r7, #14]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	89fb      	ldrh	r3, [r7, #14]
 8005a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3328      	adds	r3, #40	; 0x28
 8005a7a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	441a      	add	r2, r3
 8005aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f009 fb18 	bl	800f0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 835f 	beq.w	8006186 <PCD_EP_ISR_Handler+0x76e>
 8005ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 835a 	bne.w	8006186 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005af2:	e348      	b.n	8006186 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005afa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005b06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d032      	beq.n	8005b78 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b38:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b46:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f007 f8a1 	bl	800cc94 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b5e:	4013      	ands	r3, r2
 8005b60:	823b      	strh	r3, [r7, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	8a3a      	ldrh	r2, [r7, #16]
 8005b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f009 fa8d 	bl	800f090 <HAL_PCD_SetupStageCallback>
 8005b76:	e306      	b.n	8006186 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b78:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f280 8302 	bge.w	8006186 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b8e:	4013      	ands	r3, r2
 8005b90:	83fb      	strh	r3, [r7, #30]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	8bfa      	ldrh	r2, [r7, #30]
 8005b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b9c:	b292      	uxth	r2, r2
 8005b9e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <PCD_EP_ISR_Handler+0x1ec>
 8005bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d015      	beq.n	8005c04 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bde:	6959      	ldr	r1, [r3, #20]
 8005be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f007 f853 	bl	800cc94 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	441a      	add	r2, r3
 8005bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f009 fa58 	bl	800f0b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005c0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 82b5 	bne.w	8006186 <PCD_EP_ISR_Handler+0x76e>
 8005c1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c28:	f000 82ad 	beq.w	8006186 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	4413      	add	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b3e      	cmp	r3, #62	; 0x3e
 8005c62:	d91d      	bls.n	8005ca0 <PCD_EP_ISR_Handler+0x288>
 8005c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <PCD_EP_ISR_Handler+0x266>
 8005c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	029b      	lsls	r3, r3, #10
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e026      	b.n	8005cee <PCD_EP_ISR_Handler+0x2d6>
 8005ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <PCD_EP_ISR_Handler+0x2a6>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	e017      	b.n	8005cee <PCD_EP_ISR_Handler+0x2d6>
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <PCD_EP_ISR_Handler+0x2c0>
 8005cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	827b      	strh	r3, [r7, #18]
 8005d00:	8a7b      	ldrh	r3, [r7, #18]
 8005d02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d06:	827b      	strh	r3, [r7, #18]
 8005d08:	8a7b      	ldrh	r3, [r7, #18]
 8005d0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d0e:	827b      	strh	r3, [r7, #18]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	8a7b      	ldrh	r3, [r7, #18]
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]
 8005d2a:	e22c      	b.n	8006186 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d40:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f280 80f6 	bge.w	8005f36 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005d60:	4013      	ands	r3, r2
 8005d62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d7c:	b292      	uxth	r2, r2
 8005d7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005d80:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d98:	7b1b      	ldrb	r3, [r3, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d123      	bne.n	8005de6 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005dc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 808e 	beq.w	8005eec <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd6:	6959      	ldr	r1, [r3, #20]
 8005dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dda:	88da      	ldrh	r2, [r3, #6]
 8005ddc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005de0:	f006 ff58 	bl	800cc94 <USB_ReadPMA>
 8005de4:	e082      	b.n	8005eec <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de8:	78db      	ldrb	r3, [r3, #3]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d10a      	bne.n	8005e04 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005dee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005df2:	461a      	mov	r2, r3
 8005df4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9d3 	bl	80061a2 <HAL_PCD_EP_DB_Receive>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005e02:	e073      	b.n	8005eec <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	441a      	add	r2, r3
 8005e30:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d022      	beq.n	8005ea8 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d02c      	beq.n	8005eec <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e98:	6959      	ldr	r1, [r3, #20]
 8005e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9c:	891a      	ldrh	r2, [r3, #8]
 8005e9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ea2:	f006 fef7 	bl	800cc94 <USB_ReadPMA>
 8005ea6:	e021      	b.n	8005eec <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4413      	add	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ecc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005ed0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ede:	6959      	ldr	r1, [r3, #20]
 8005ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee2:	895a      	ldrh	r2, [r3, #10]
 8005ee4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ee8:	f006 fed4 	bl	800cc94 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ef4:	441a      	add	r2, r3
 8005ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005f02:	441a      	add	r2, r3
 8005f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <PCD_EP_ISR_Handler+0x504>
 8005f10:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d206      	bcs.n	8005f2a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f009 f8c6 	bl	800f0b4 <HAL_PCD_DataOutStageCallback>
 8005f28:	e005      	b.n	8005f36 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f30:	4618      	mov	r0, r3
 8005f32:	f005 f982 	bl	800b23a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005f36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 8121 	beq.w	8006186 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8005f44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	4413      	add	r3, r2
 8005f56:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f96:	78db      	ldrb	r3, [r3, #3]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	f040 80a2 	bne.w	80060e2 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8005f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	7b1b      	ldrb	r3, [r3, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8093 	beq.w	80060d4 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005fae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d046      	beq.n	8006048 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d126      	bne.n	8006010 <PCD_EP_ISR_Handler+0x5f8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	4413      	add	r3, r2
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	00da      	lsls	r2, r3, #3
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006008:	b29a      	uxth	r2, r3
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	e061      	b.n	80060d4 <PCD_EP_ISR_Handler+0x6bc>
 8006010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d15d      	bne.n	80060d4 <PCD_EP_ISR_Handler+0x6bc>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006026:	b29b      	uxth	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	4413      	add	r3, r2
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	00da      	lsls	r2, r3, #3
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	4413      	add	r3, r2
 800603a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	2200      	movs	r2, #0
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e045      	b.n	80060d4 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800604e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d126      	bne.n	80060a4 <PCD_EP_ISR_Handler+0x68c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	4413      	add	r3, r2
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
 800606e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	00da      	lsls	r2, r3, #3
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	4413      	add	r3, r2
 8006078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800607c:	633b      	str	r3, [r7, #48]	; 0x30
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006088:	b29a      	uxth	r2, r3
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609c:	b29a      	uxth	r2, r3
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e017      	b.n	80060d4 <PCD_EP_ISR_Handler+0x6bc>
 80060a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d113      	bne.n	80060d4 <PCD_EP_ISR_Handler+0x6bc>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ba:	4413      	add	r3, r2
 80060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	00da      	lsls	r2, r3, #3
 80060c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c6:	4413      	add	r3, r2
 80060c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	2200      	movs	r2, #0
 80060d2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f009 f805 	bl	800f0ea <HAL_PCD_DataInStageCallback>
 80060e0:	e051      	b.n	8006186 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80060e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d144      	bne.n	8006178 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	4413      	add	r3, r2
 8006108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800611e:	429a      	cmp	r2, r3
 8006120:	d907      	bls.n	8006132 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8006122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612e:	619a      	str	r2, [r3, #24]
 8006130:	e002      	b.n	8006138 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8006132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006134:	2200      	movs	r2, #0
 8006136:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f008 ffcf 	bl	800f0ea <HAL_PCD_DataInStageCallback>
 800614c:	e01b      	b.n	8006186 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800614e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006156:	441a      	add	r2, r3
 8006158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800615a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800615c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006164:	441a      	add	r2, r3
 8006166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006168:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006170:	4618      	mov	r0, r3
 8006172:	f005 f862 	bl	800b23a <USB_EPStartXfer>
 8006176:	e006      	b.n	8006186 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800617c:	461a      	mov	r2, r3
 800617e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f917 	bl	80063b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800618e:	b29b      	uxth	r3, r3
 8006190:	b21b      	sxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	f6ff ac45 	blt.w	8005a22 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3758      	adds	r7, #88	; 0x58
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b088      	sub	sp, #32
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	4613      	mov	r3, r2
 80061ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061b0:	88fb      	ldrh	r3, [r7, #6]
 80061b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d07c      	beq.n	80062b4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4413      	add	r3, r2
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	4413      	add	r3, r2
 80061d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	8b7b      	ldrh	r3, [r7, #26]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d306      	bcc.n	80061f8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	8b7b      	ldrh	r3, [r7, #26]
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	619a      	str	r2, [r3, #24]
 80061f6:	e002      	b.n	80061fe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2200      	movs	r2, #0
 80061fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d123      	bne.n	800624e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800621c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006220:	833b      	strh	r3, [r7, #24]
 8006222:	8b3b      	ldrh	r3, [r7, #24]
 8006224:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006228:	833b      	strh	r3, [r7, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	8b3b      	ldrh	r3, [r7, #24]
 800623a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624a:	b29b      	uxth	r3, r3
 800624c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01f      	beq.n	8006298 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	82fb      	strh	r3, [r7, #22]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	8afb      	ldrh	r3, [r7, #22]
 8006284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006294:	b29b      	uxth	r3, r3
 8006296:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006298:	8b7b      	ldrh	r3, [r7, #26]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8085 	beq.w	80063aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6959      	ldr	r1, [r3, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	891a      	ldrh	r2, [r3, #8]
 80062ac:	8b7b      	ldrh	r3, [r7, #26]
 80062ae:	f006 fcf1 	bl	800cc94 <USB_ReadPMA>
 80062b2:	e07a      	b.n	80063aa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062bc:	b29b      	uxth	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4413      	add	r3, r2
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	4413      	add	r3, r2
 80062ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	8b7b      	ldrh	r3, [r7, #26]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d306      	bcc.n	80062f2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	8b7b      	ldrh	r3, [r7, #26]
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	619a      	str	r2, [r3, #24]
 80062f0:	e002      	b.n	80062f8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d123      	bne.n	8006348 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	83fb      	strh	r3, [r7, #30]
 800631c:	8bfb      	ldrh	r3, [r7, #30]
 800631e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006322:	83fb      	strh	r3, [r7, #30]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	8bfb      	ldrh	r3, [r7, #30]
 8006334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006344:	b29b      	uxth	r3, r3
 8006346:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d11f      	bne.n	8006392 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	83bb      	strh	r3, [r7, #28]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	8bbb      	ldrh	r3, [r7, #28]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006392:	8b7b      	ldrh	r3, [r7, #26]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6959      	ldr	r1, [r3, #20]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	895a      	ldrh	r2, [r3, #10]
 80063a4:	8b7b      	ldrh	r3, [r7, #26]
 80063a6:	f006 fc75 	bl	800cc94 <USB_ReadPMA>
    }
  }

  return count;
 80063aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b0a4      	sub	sp, #144	; 0x90
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 81db 	beq.w	8006784 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80063fe:	429a      	cmp	r2, r3
 8006400:	d907      	bls.n	8006412 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	619a      	str	r2, [r3, #24]
 8006410:	e002      	b.n	8006418 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 80b9 	bne.w	8006594 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d126      	bne.n	8006478 <HAL_PCD_EP_DB_Transmit+0xc4>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	4413      	add	r3, r2
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	00da      	lsls	r2, r3, #3
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	4413      	add	r3, r2
 800644c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006450:	62bb      	str	r3, [r7, #40]	; 0x28
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800645c:	b29a      	uxth	r2, r3
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006470:	b29a      	uxth	r2, r3
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e01a      	b.n	80064ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d116      	bne.n	80064ae <HAL_PCD_EP_DB_Transmit+0xfa>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	4413      	add	r3, r2
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	00da      	lsls	r2, r3, #3
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	2200      	movs	r2, #0
 80064ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d126      	bne.n	800650a <HAL_PCD_EP_DB_Transmit+0x156>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	00da      	lsls	r2, r3, #3
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006502:	b29a      	uxth	r2, r3
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	e017      	b.n	800653a <HAL_PCD_EP_DB_Transmit+0x186>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d113      	bne.n	800653a <HAL_PCD_EP_DB_Transmit+0x186>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	4413      	add	r3, r2
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00da      	lsls	r2, r3, #3
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	4413      	add	r3, r2
 800652e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006532:	623b      	str	r3, [r7, #32]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	2200      	movs	r2, #0
 8006538:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f008 fdd2 	bl	800f0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 82fa 	beq.w	8006b46 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656c:	82fb      	strh	r3, [r7, #22]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	441a      	add	r2, r3
 800657c:	8afb      	ldrh	r3, [r7, #22]
 800657e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	b29b      	uxth	r3, r3
 8006590:	8013      	strh	r3, [r2, #0]
 8006592:	e2d8      	b.n	8006b46 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d021      	beq.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	f040 82ac 	bne.w	8006b46 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80065f6:	441a      	add	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006604:	441a      	add	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	d30b      	bcc.n	800662e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	6a1a      	ldr	r2, [r3, #32]
 8006622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	621a      	str	r2, [r3, #32]
 800662c:	e017      	b.n	800665e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d108      	bne.n	8006648 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006636:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800663a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006646:	e00a      	b.n	800665e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d165      	bne.n	8006732 <HAL_PCD_EP_DB_Transmit+0x37e>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667a:	4413      	add	r3, r2
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	00da      	lsls	r2, r3, #3
 8006684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006686:	4413      	add	r3, r2
 8006688:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800668c:	63bb      	str	r3, [r7, #56]	; 0x38
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006698:	b29a      	uxth	r2, r3
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a2:	2b3e      	cmp	r3, #62	; 0x3e
 80066a4:	d91d      	bls.n	80066e2 <HAL_PCD_EP_DB_Transmit+0x32e>
 80066a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066bc:	3b01      	subs	r3, #1
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e044      	b.n	800676c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80066e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <HAL_PCD_EP_DB_Transmit+0x34c>
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e035      	b.n	800676c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	64bb      	str	r3, [r7, #72]	; 0x48
 8006708:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_PCD_EP_DB_Transmit+0x366>
 8006714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006716:	3301      	adds	r3, #1
 8006718:	64bb      	str	r3, [r7, #72]	; 0x48
 800671a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29a      	uxth	r2, r3
 8006720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006722:	b29b      	uxth	r3, r3
 8006724:	029b      	lsls	r3, r3, #10
 8006726:	b29b      	uxth	r3, r3
 8006728:	4313      	orrs	r3, r2
 800672a:	b29a      	uxth	r2, r3
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e01c      	b.n	800676c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d118      	bne.n	800676c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	647b      	str	r3, [r7, #68]	; 0x44
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006748:	b29b      	uxth	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674e:	4413      	add	r3, r2
 8006750:	647b      	str	r3, [r7, #68]	; 0x44
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	00da      	lsls	r2, r3, #3
 8006758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675a:	4413      	add	r3, r2
 800675c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006760:	643b      	str	r3, [r7, #64]	; 0x40
 8006762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006766:	b29a      	uxth	r2, r3
 8006768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6959      	ldr	r1, [r3, #20]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	891a      	ldrh	r2, [r3, #8]
 8006778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800677c:	b29b      	uxth	r3, r3
 800677e:	f006 fa47 	bl	800cc10 <USB_WritePMA>
 8006782:	e1e0      	b.n	8006b46 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4413      	add	r3, r2
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	4413      	add	r3, r2
 800679e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d307      	bcc.n	80067c8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80067c0:	1ad2      	subs	r2, r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	619a      	str	r2, [r3, #24]
 80067c6:	e002      	b.n	80067ce <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 80c0 	bne.w	8006958 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d126      	bne.n	800682e <HAL_PCD_EP_DB_Transmit+0x47a>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067f4:	4413      	add	r3, r2
 80067f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	00da      	lsls	r2, r3, #3
 80067fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006800:	4413      	add	r3, r2
 8006802:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006806:	67bb      	str	r3, [r7, #120]	; 0x78
 8006808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006812:	b29a      	uxth	r2, r3
 8006814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006826:	b29a      	uxth	r2, r3
 8006828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	e01a      	b.n	8006864 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d116      	bne.n	8006864 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	667b      	str	r3, [r7, #100]	; 0x64
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006844:	b29b      	uxth	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684a:	4413      	add	r3, r2
 800684c:	667b      	str	r3, [r7, #100]	; 0x64
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	00da      	lsls	r2, r3, #3
 8006854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006856:	4413      	add	r3, r2
 8006858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800685c:	663b      	str	r3, [r7, #96]	; 0x60
 800685e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006860:	2200      	movs	r2, #0
 8006862:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	677b      	str	r3, [r7, #116]	; 0x74
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d12b      	bne.n	80068ca <HAL_PCD_EP_DB_Transmit+0x516>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006886:	4413      	add	r3, r2
 8006888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	00da      	lsls	r2, r3, #3
 8006890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006892:	4413      	add	r3, r2
 8006894:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800689c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	e017      	b.n	80068fa <HAL_PCD_EP_DB_Transmit+0x546>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d113      	bne.n	80068fa <HAL_PCD_EP_DB_Transmit+0x546>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068da:	b29b      	uxth	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e0:	4413      	add	r3, r2
 80068e2:	677b      	str	r3, [r7, #116]	; 0x74
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	00da      	lsls	r2, r3, #3
 80068ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068f2:	673b      	str	r3, [r7, #112]	; 0x70
 80068f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068f6:	2200      	movs	r2, #0
 80068f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f008 fbf2 	bl	800f0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800690c:	2b00      	cmp	r3, #0
 800690e:	f040 811a 	bne.w	8006b46 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800694e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]
 8006956:	e0f6      	b.n	8006b46 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d121      	bne.n	80069a6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800699e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	f040 80ca 	bne.w	8006b46 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	695a      	ldr	r2, [r3, #20]
 80069b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069ba:	441a      	add	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069c8:	441a      	add	r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6a1a      	ldr	r2, [r3, #32]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d30b      	bcc.n	80069f2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6a1a      	ldr	r2, [r3, #32]
 80069e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	621a      	str	r2, [r3, #32]
 80069f0:	e017      	b.n	8006a22 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d108      	bne.n	8006a0c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80069fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80069fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006a0a:	e00a      	b.n	8006a22 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2200      	movs	r2, #0
 8006a18:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	657b      	str	r3, [r7, #84]	; 0x54
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d165      	bne.n	8006afc <HAL_PCD_EP_DB_Transmit+0x748>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a44:	4413      	add	r3, r2
 8006a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	00da      	lsls	r2, r3, #3
 8006a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a50:	4413      	add	r3, r2
 8006a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a66:	801a      	strh	r2, [r3, #0]
 8006a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6e:	d91d      	bls.n	8006aac <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a86:	3b01      	subs	r3, #1
 8006a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	029b      	lsls	r3, r3, #10
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	e041      	b.n	8006b30 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <HAL_PCD_EP_DB_Transmit+0x716>
 8006ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e032      	b.n	8006b30 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_PCD_EP_DB_Transmit+0x730>
 8006ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	4313      	orrs	r3, r2
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	e019      	b.n	8006b30 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d115      	bne.n	8006b30 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b12:	4413      	add	r3, r2
 8006b14:	657b      	str	r3, [r7, #84]	; 0x54
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	00da      	lsls	r2, r3, #3
 8006b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1e:	4413      	add	r3, r2
 8006b20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b24:	653b      	str	r3, [r7, #80]	; 0x50
 8006b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6959      	ldr	r1, [r3, #20]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	895a      	ldrh	r2, [r3, #10]
 8006b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f006 f865 	bl	800cc10 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b60:	82bb      	strh	r3, [r7, #20]
 8006b62:	8abb      	ldrh	r3, [r7, #20]
 8006b64:	f083 0310 	eor.w	r3, r3, #16
 8006b68:	82bb      	strh	r3, [r7, #20]
 8006b6a:	8abb      	ldrh	r3, [r7, #20]
 8006b6c:	f083 0320 	eor.w	r3, r3, #32
 8006b70:	82bb      	strh	r3, [r7, #20]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	441a      	add	r2, r3
 8006b80:	8abb      	ldrh	r3, [r7, #20]
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3790      	adds	r7, #144	; 0x90
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	817b      	strh	r3, [r7, #10]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006bb2:	897b      	ldrh	r3, [r7, #10]
 8006bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bbe:	897b      	ldrh	r3, [r7, #10]
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e009      	b.n	8006bea <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bd6:	897a      	ldrh	r2, [r7, #10]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006bea:	893b      	ldrh	r3, [r7, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d107      	bne.n	8006c00 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	80da      	strh	r2, [r3, #6]
 8006bfe:	e00b      	b.n	8006c18 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2201      	movs	r2, #1
 8006c04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0c1b      	lsrs	r3, r3, #16
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40007000 	.word	0x40007000

08006c98 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8006ca0:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ca8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8006caa:	f000 f861 	bl	8006d70 <HAL_PWREx_SMPS_GetEffectiveMode>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb4:	d101      	bne.n	8006cba <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e03e      	b.n	8006d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8006cba:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc6:	d101      	bne.n	8006ccc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e035      	b.n	8006d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d101      	bne.n	8006cd8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e02f      	b.n	8006d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006cd8:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006ce0:	4917      	ldr	r1, [pc, #92]	; (8006d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8006ce8:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	4a16      	ldr	r2, [pc, #88]	; (8006d48 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf4:	09db      	lsrs	r3, r3, #7
 8006cf6:	2232      	movs	r2, #50	; 0x32
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	4a13      	ldr	r2, [pc, #76]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	08db      	lsrs	r3, r3, #3
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d08:	e002      	b.n	8006d10 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d10:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1c:	d102      	bne.n	8006d24 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f2      	bne.n	8006d0a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d101      	bne.n	8006d36 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e000      	b.n	8006d38 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40007000 	.word	0x40007000
 8006d44:	20000000 	.word	0x20000000
 8006d48:	0a7c5ac5 	.word	0x0a7c5ac5
 8006d4c:	cccccccd 	.word	0xcccccccd

08006d50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d5e:	6053      	str	r3, [r2, #4]
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40007000 	.word	0x40007000

08006d70 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8006d76:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8006d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	e00a      	b.n	8006da4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d103      	bne.n	8006da0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8006d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	e001      	b.n	8006da4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8006da0:	2300      	movs	r3, #0
 8006da2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8006da4:	687b      	ldr	r3, [r7, #4]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40007000 	.word	0x40007000

08006db8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f000 bcc2 	b.w	8007750 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dcc:	4b99      	ldr	r3, [pc, #612]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 030c 	and.w	r3, r3, #12
 8006dd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dd6:	4b97      	ldr	r3, [pc, #604]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80e9 	beq.w	8006fc0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <HAL_RCC_OscConfig+0x4a>
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b0c      	cmp	r3, #12
 8006df8:	f040 8083 	bne.w	8006f02 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d17f      	bne.n	8006f02 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e02:	4b8c      	ldr	r3, [pc, #560]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d006      	beq.n	8006e1c <HAL_RCC_OscConfig+0x64>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d102      	bne.n	8006e1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f000 bc9a 	b.w	8007750 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e20:	4b84      	ldr	r3, [pc, #528]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <HAL_RCC_OscConfig+0x7e>
 8006e2c:	4b81      	ldr	r3, [pc, #516]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e34:	e005      	b.n	8006e42 <HAL_RCC_OscConfig+0x8a>
 8006e36:	4b7f      	ldr	r3, [pc, #508]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d224      	bcs.n	8006e90 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fe9a 	bl	8007b84 <RCC_SetFlashLatencyFromMSIRange>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f000 bc7a 	b.w	8007750 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e5c:	4b75      	ldr	r3, [pc, #468]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a74      	ldr	r2, [pc, #464]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e62:	f043 0308 	orr.w	r3, r3, #8
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	4b72      	ldr	r3, [pc, #456]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	496f      	ldr	r1, [pc, #444]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e7a:	4b6e      	ldr	r3, [pc, #440]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	496a      	ldr	r1, [pc, #424]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	604b      	str	r3, [r1, #4]
 8006e8e:	e026      	b.n	8006ede <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e90:	4b68      	ldr	r3, [pc, #416]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a67      	ldr	r2, [pc, #412]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e96:	f043 0308 	orr.w	r3, r3, #8
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	4b65      	ldr	r3, [pc, #404]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	4962      	ldr	r1, [pc, #392]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006eae:	4b61      	ldr	r3, [pc, #388]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	495d      	ldr	r1, [pc, #372]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fe59 	bl	8007b84 <RCC_SetFlashLatencyFromMSIRange>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f000 bc39 	b.w	8007750 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006ede:	f000 fe15 	bl	8007b0c <HAL_RCC_GetHCLKFreq>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4a54      	ldr	r2, [pc, #336]	; (8007038 <HAL_RCC_OscConfig+0x280>)
 8006ee6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006ee8:	4b54      	ldr	r3, [pc, #336]	; (800703c <HAL_RCC_OscConfig+0x284>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fc f991 	bl	8003214 <HAL_InitTick>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d060      	beq.n	8006fbe <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	f000 bc27 	b.w	8007750 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d039      	beq.n	8006f7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f0a:	4b4a      	ldr	r3, [pc, #296]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a49      	ldr	r2, [pc, #292]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f16:	f7fc f9cd 	bl	80032b4 <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f1c:	e00f      	b.n	8006f3e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f1e:	f7fc f9c9 	bl	80032b4 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d908      	bls.n	8006f3e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f2c:	4b41      	ldr	r3, [pc, #260]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	f000 bc09 	b.w	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f3e:	4b3d      	ldr	r3, [pc, #244]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0e9      	beq.n	8006f1e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f4a:	4b3a      	ldr	r3, [pc, #232]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a39      	ldr	r2, [pc, #228]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f50:	f043 0308 	orr.w	r3, r3, #8
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4b37      	ldr	r3, [pc, #220]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	4934      	ldr	r1, [pc, #208]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f68:	4b32      	ldr	r3, [pc, #200]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	492f      	ldr	r1, [pc, #188]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
 8006f7c:	e020      	b.n	8006fc0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f7e:	4b2d      	ldr	r3, [pc, #180]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2c      	ldr	r2, [pc, #176]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006f84:	f023 0301 	bic.w	r3, r3, #1
 8006f88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f8a:	f7fc f993 	bl	80032b4 <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f90:	e00e      	b.n	8006fb0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f92:	f7fc f98f 	bl	80032b4 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d907      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fa0:	4b24      	ldr	r3, [pc, #144]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e3cf      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fb0:	4b20      	ldr	r3, [pc, #128]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1ea      	bne.n	8006f92 <HAL_RCC_OscConfig+0x1da>
 8006fbc:	e000      	b.n	8006fc0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d07e      	beq.n	80070ca <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d005      	beq.n	8006fde <HAL_RCC_OscConfig+0x226>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b0c      	cmp	r3, #12
 8006fd6:	d10e      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d10b      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fde:	4b15      	ldr	r3, [pc, #84]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d06e      	beq.n	80070c8 <HAL_RCC_OscConfig+0x310>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d16a      	bne.n	80070c8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e3ac      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffe:	d106      	bne.n	800700e <HAL_RCC_OscConfig+0x256>
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a0b      	ldr	r2, [pc, #44]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8007006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e024      	b.n	8007058 <HAL_RCC_OscConfig+0x2a0>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007016:	d113      	bne.n	8007040 <HAL_RCC_OscConfig+0x288>
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a05      	ldr	r2, [pc, #20]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 800701e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	4b03      	ldr	r3, [pc, #12]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a02      	ldr	r2, [pc, #8]	; (8007034 <HAL_RCC_OscConfig+0x27c>)
 800702a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	e012      	b.n	8007058 <HAL_RCC_OscConfig+0x2a0>
 8007032:	bf00      	nop
 8007034:	40021000 	.word	0x40021000
 8007038:	20000000 	.word	0x20000000
 800703c:	20000004 	.word	0x20000004
 8007040:	4b8b      	ldr	r3, [pc, #556]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a8a      	ldr	r2, [pc, #552]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4b88      	ldr	r3, [pc, #544]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a87      	ldr	r2, [pc, #540]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d019      	beq.n	8007094 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fc f928 	bl	80032b4 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007066:	e00e      	b.n	8007086 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007068:	f7fc f924 	bl	80032b4 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b64      	cmp	r3, #100	; 0x64
 8007074:	d907      	bls.n	8007086 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007076:	4b7e      	ldr	r3, [pc, #504]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e364      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007086:	4b7a      	ldr	r3, [pc, #488]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0ea      	beq.n	8007068 <HAL_RCC_OscConfig+0x2b0>
 8007092:	e01a      	b.n	80070ca <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fc f90e 	bl	80032b4 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800709a:	e00e      	b.n	80070ba <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800709c:	f7fc f90a 	bl	80032b4 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b64      	cmp	r3, #100	; 0x64
 80070a8:	d907      	bls.n	80070ba <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070aa:	4b71      	ldr	r3, [pc, #452]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e34a      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070ba:	4b6d      	ldr	r3, [pc, #436]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ea      	bne.n	800709c <HAL_RCC_OscConfig+0x2e4>
 80070c6:	e000      	b.n	80070ca <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d06c      	beq.n	80071b0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d005      	beq.n	80070e8 <HAL_RCC_OscConfig+0x330>
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b0c      	cmp	r3, #12
 80070e0:	d119      	bne.n	8007116 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d116      	bne.n	8007116 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e8:	4b61      	ldr	r3, [pc, #388]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_RCC_OscConfig+0x348>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e327      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007100:	4b5b      	ldr	r3, [pc, #364]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	061b      	lsls	r3, r3, #24
 800710e:	4958      	ldr	r1, [pc, #352]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007110:	4313      	orrs	r3, r2
 8007112:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007114:	e04c      	b.n	80071b0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d029      	beq.n	8007172 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800711e:	4b54      	ldr	r3, [pc, #336]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a53      	ldr	r2, [pc, #332]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712a:	f7fc f8c3 	bl	80032b4 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007130:	e00e      	b.n	8007150 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007132:	f7fc f8bf 	bl	80032b4 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d907      	bls.n	8007150 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007140:	4b4b      	ldr	r3, [pc, #300]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e2ff      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007150:	4b47      	ldr	r3, [pc, #284]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0ea      	beq.n	8007132 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715c:	4b44      	ldr	r3, [pc, #272]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	061b      	lsls	r3, r3, #24
 800716a:	4941      	ldr	r1, [pc, #260]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 800716c:	4313      	orrs	r3, r2
 800716e:	604b      	str	r3, [r1, #4]
 8007170:	e01e      	b.n	80071b0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007172:	4b3f      	ldr	r3, [pc, #252]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a3e      	ldr	r2, [pc, #248]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800717c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717e:	f7fc f899 	bl	80032b4 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007184:	e00e      	b.n	80071a4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007186:	f7fc f895 	bl	80032b4 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d907      	bls.n	80071a4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007194:	4b36      	ldr	r3, [pc, #216]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e2d5      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071a4:	4b32      	ldr	r3, [pc, #200]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1ea      	bne.n	8007186 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d062      	beq.n	8007282 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d038      	beq.n	8007236 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d108      	bne.n	80071de <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80071cc:	4b28      	ldr	r3, [pc, #160]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80071ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071d2:	4a27      	ldr	r2, [pc, #156]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80071d4:	f023 0310 	bic.w	r3, r3, #16
 80071d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80071dc:	e007      	b.n	80071ee <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80071de:	4b24      	ldr	r3, [pc, #144]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80071e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e4:	4a22      	ldr	r2, [pc, #136]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80071e6:	f043 0310 	orr.w	r3, r3, #16
 80071ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ee:	4b20      	ldr	r3, [pc, #128]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80071f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071f4:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fe:	f7fc f859 	bl	80032b4 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007204:	e00f      	b.n	8007226 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007206:	f7fc f855 	bl	80032b4 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b07      	cmp	r3, #7
 8007212:	d908      	bls.n	8007226 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e294      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007226:	4b12      	ldr	r3, [pc, #72]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0e8      	beq.n	8007206 <HAL_RCC_OscConfig+0x44e>
 8007234:	e025      	b.n	8007282 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007236:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 8007238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800723c:	4a0c      	ldr	r2, [pc, #48]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007246:	f7fc f835 	bl	80032b4 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800724c:	e012      	b.n	8007274 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800724e:	f7fc f831 	bl	80032b4 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b07      	cmp	r3, #7
 800725a:	d90b      	bls.n	8007274 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <HAL_RCC_OscConfig+0x4b8>)
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e270      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
 800726e:	bf00      	nop
 8007270:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007274:	4ba8      	ldr	r3, [pc, #672]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e5      	bne.n	800724e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 812d 	beq.w	80074ea <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007290:	2300      	movs	r3, #0
 8007292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007294:	4ba0      	ldr	r3, [pc, #640]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10d      	bne.n	80072bc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072a0:	4b9d      	ldr	r3, [pc, #628]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80072a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a4:	4a9c      	ldr	r2, [pc, #624]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80072a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072aa:	6593      	str	r3, [r2, #88]	; 0x58
 80072ac:	4b9a      	ldr	r3, [pc, #616]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80072ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072b8:	2301      	movs	r3, #1
 80072ba:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072bc:	4b97      	ldr	r3, [pc, #604]	; (800751c <HAL_RCC_OscConfig+0x764>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d11e      	bne.n	8007306 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072c8:	4b94      	ldr	r3, [pc, #592]	; (800751c <HAL_RCC_OscConfig+0x764>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a93      	ldr	r2, [pc, #588]	; (800751c <HAL_RCC_OscConfig+0x764>)
 80072ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072d4:	f7fb ffee 	bl	80032b4 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072da:	e00e      	b.n	80072fa <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072dc:	f7fb ffea 	bl	80032b4 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d907      	bls.n	80072fa <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072ea:	4b8c      	ldr	r3, [pc, #560]	; (800751c <HAL_RCC_OscConfig+0x764>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e22a      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072fa:	4b88      	ldr	r3, [pc, #544]	; (800751c <HAL_RCC_OscConfig+0x764>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0ea      	beq.n	80072dc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01f      	beq.n	8007352 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d010      	beq.n	8007340 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800731e:	4b7e      	ldr	r3, [pc, #504]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007324:	4a7c      	ldr	r2, [pc, #496]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007326:	f043 0304 	orr.w	r3, r3, #4
 800732a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800732e:	4b7a      	ldr	r3, [pc, #488]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	4a78      	ldr	r2, [pc, #480]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800733e:	e018      	b.n	8007372 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007340:	4b75      	ldr	r3, [pc, #468]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	4a74      	ldr	r2, [pc, #464]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007350:	e00f      	b.n	8007372 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007352:	4b71      	ldr	r3, [pc, #452]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007358:	4a6f      	ldr	r2, [pc, #444]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 800735a:	f023 0301 	bic.w	r3, r3, #1
 800735e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007362:	4b6d      	ldr	r3, [pc, #436]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007368:	4a6b      	ldr	r2, [pc, #428]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 800736a:	f023 0304 	bic.w	r3, r3, #4
 800736e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d068      	beq.n	800744c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737a:	f7fb ff9b 	bl	80032b4 <HAL_GetTick>
 800737e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007380:	e011      	b.n	80073a6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007382:	f7fb ff97 	bl	80032b4 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007390:	4293      	cmp	r3, r2
 8007392:	d908      	bls.n	80073a6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007394:	4b60      	ldr	r3, [pc, #384]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e1d4      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073a6:	4b5c      	ldr	r3, [pc, #368]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0e6      	beq.n	8007382 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d022      	beq.n	8007406 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073c0:	4b55      	ldr	r3, [pc, #340]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	4a54      	ldr	r2, [pc, #336]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80073c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073d0:	e011      	b.n	80073f6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d2:	f7fb ff6f 	bl	80032b4 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d908      	bls.n	80073f6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073e4:	4b4c      	ldr	r3, [pc, #304]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e1ac      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073f6:	4b48      	ldr	r3, [pc, #288]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80073f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0e6      	beq.n	80073d2 <HAL_RCC_OscConfig+0x61a>
 8007404:	e068      	b.n	80074d8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007406:	4b44      	ldr	r3, [pc, #272]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740c:	4a42      	ldr	r2, [pc, #264]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 800740e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007416:	e011      	b.n	800743c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007418:	f7fb ff4c 	bl	80032b4 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	f241 3288 	movw	r2, #5000	; 0x1388
 8007426:	4293      	cmp	r3, r2
 8007428:	d908      	bls.n	800743c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800742a:	4b3b      	ldr	r3, [pc, #236]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e189      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800743c:	4b36      	ldr	r3, [pc, #216]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 800743e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e6      	bne.n	8007418 <HAL_RCC_OscConfig+0x660>
 800744a:	e045      	b.n	80074d8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800744c:	f7fb ff32 	bl	80032b4 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007452:	e011      	b.n	8007478 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007454:	f7fb ff2e 	bl	80032b4 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007462:	4293      	cmp	r3, r2
 8007464:	d908      	bls.n	8007478 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007466:	4b2c      	ldr	r3, [pc, #176]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e16b      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007478:	4b27      	ldr	r3, [pc, #156]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 800747a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e6      	bne.n	8007454 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007486:	4b24      	ldr	r3, [pc, #144]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007490:	2b00      	cmp	r3, #0
 8007492:	d021      	beq.n	80074d8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007494:	4b20      	ldr	r3, [pc, #128]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	4a1f      	ldr	r2, [pc, #124]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 800749c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074a4:	e011      	b.n	80074ca <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f7fb ff05 	bl	80032b4 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d908      	bls.n	80074ca <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e142      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e6      	bne.n	80074a6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074d8:	7ffb      	ldrb	r3, [r7, #31]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d105      	bne.n	80074ea <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e2:	4a0d      	ldr	r2, [pc, #52]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 80074e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d04f      	beq.n	8007596 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d028      	beq.n	8007550 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007504:	4a04      	ldr	r2, [pc, #16]	; (8007518 <HAL_RCC_OscConfig+0x760>)
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750e:	f7fb fed1 	bl	80032b4 <HAL_GetTick>
 8007512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007514:	e014      	b.n	8007540 <HAL_RCC_OscConfig+0x788>
 8007516:	bf00      	nop
 8007518:	40021000 	.word	0x40021000
 800751c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007520:	f7fb fec8 	bl	80032b4 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d908      	bls.n	8007540 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800752e:	4b8a      	ldr	r3, [pc, #552]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e107      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007540:	4b85      	ldr	r3, [pc, #532]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0e8      	beq.n	8007520 <HAL_RCC_OscConfig+0x768>
 800754e:	e022      	b.n	8007596 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007550:	4b81      	ldr	r3, [pc, #516]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007556:	4a80      	ldr	r2, [pc, #512]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007560:	f7fb fea8 	bl	80032b4 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007566:	e00f      	b.n	8007588 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007568:	f7fb fea4 	bl	80032b4 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d908      	bls.n	8007588 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007576:	4b78      	ldr	r3, [pc, #480]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e0e3      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007588:	4b73      	ldr	r3, [pc, #460]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 800758a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e8      	bne.n	8007568 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80d7 	beq.w	800774e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075a0:	4b6d      	ldr	r3, [pc, #436]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	f000 8091 	beq.w	80076d0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d166      	bne.n	8007684 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b6:	4b68      	ldr	r3, [pc, #416]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a67      	ldr	r2, [pc, #412]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80075bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c2:	f7fb fe77 	bl	80032b4 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075c8:	e00e      	b.n	80075e8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ca:	f7fb fe73 	bl	80032b4 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d907      	bls.n	80075e8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d8:	4b5f      	ldr	r3, [pc, #380]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e0b3      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075e8:	4b5b      	ldr	r3, [pc, #364]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1ea      	bne.n	80075ca <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075f4:	4b58      	ldr	r3, [pc, #352]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	4b58      	ldr	r3, [pc, #352]	; (800775c <HAL_RCC_OscConfig+0x9a4>)
 80075fa:	4013      	ands	r3, r2
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007604:	3a01      	subs	r2, #1
 8007606:	0112      	lsls	r2, r2, #4
 8007608:	4311      	orrs	r1, r2
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800760e:	0212      	lsls	r2, r2, #8
 8007610:	4311      	orrs	r1, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007616:	0852      	lsrs	r2, r2, #1
 8007618:	3a01      	subs	r2, #1
 800761a:	0552      	lsls	r2, r2, #21
 800761c:	4311      	orrs	r1, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007622:	0852      	lsrs	r2, r2, #1
 8007624:	3a01      	subs	r2, #1
 8007626:	0652      	lsls	r2, r2, #25
 8007628:	4311      	orrs	r1, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800762e:	06d2      	lsls	r2, r2, #27
 8007630:	430a      	orrs	r2, r1
 8007632:	4949      	ldr	r1, [pc, #292]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007634:	4313      	orrs	r3, r2
 8007636:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007638:	4b47      	ldr	r3, [pc, #284]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a46      	ldr	r2, [pc, #280]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 800763e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007642:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007644:	4b44      	ldr	r3, [pc, #272]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4a43      	ldr	r2, [pc, #268]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 800764a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800764e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007650:	f7fb fe30 	bl	80032b4 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007656:	e00e      	b.n	8007676 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007658:	f7fb fe2c 	bl	80032b4 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d907      	bls.n	8007676 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007666:	4b3c      	ldr	r3, [pc, #240]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e06c      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007676:	4b38      	ldr	r3, [pc, #224]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0ea      	beq.n	8007658 <HAL_RCC_OscConfig+0x8a0>
 8007682:	e064      	b.n	800774e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007684:	4b34      	ldr	r3, [pc, #208]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a33      	ldr	r2, [pc, #204]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 800768a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fb fe10 	bl	80032b4 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007696:	e00e      	b.n	80076b6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007698:	f7fb fe0c 	bl	80032b4 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d907      	bls.n	80076b6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076a6:	4b2c      	ldr	r3, [pc, #176]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e04c      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076b6:	4b28      	ldr	r3, [pc, #160]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1ea      	bne.n	8007698 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80076c2:	4b25      	ldr	r3, [pc, #148]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	4924      	ldr	r1, [pc, #144]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <HAL_RCC_OscConfig+0x9a8>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	60cb      	str	r3, [r1, #12]
 80076ce:	e03e      	b.n	800774e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e039      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <HAL_RCC_OscConfig+0x9a0>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f003 0203 	and.w	r2, r3, #3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d12c      	bne.n	800774a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fa:	3b01      	subs	r3, #1
 80076fc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076fe:	429a      	cmp	r2, r3
 8007700:	d123      	bne.n	800774a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800770e:	429a      	cmp	r2, r3
 8007710:	d11b      	bne.n	800774a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800771e:	429a      	cmp	r2, r3
 8007720:	d113      	bne.n	800774a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	3b01      	subs	r3, #1
 8007730:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007732:	429a      	cmp	r2, r3
 8007734:	d109      	bne.n	800774a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	3b01      	subs	r3, #1
 8007744:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007746:	429a      	cmp	r2, r3
 8007748:	d001      	beq.n	800774e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40021000 	.word	0x40021000
 800775c:	019f800c 	.word	0x019f800c
 8007760:	feeefffc 	.word	0xfeeefffc

08007764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e11c      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800777c:	4b90      	ldr	r3, [pc, #576]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 030f 	and.w	r3, r3, #15
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d910      	bls.n	80077ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778a:	4b8d      	ldr	r3, [pc, #564]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f023 020f 	bic.w	r2, r3, #15
 8007792:	498b      	ldr	r1, [pc, #556]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	4313      	orrs	r3, r2
 8007798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800779a:	4b89      	ldr	r3, [pc, #548]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d001      	beq.n	80077ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e104      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d010      	beq.n	80077da <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	4b81      	ldr	r3, [pc, #516]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d908      	bls.n	80077da <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077c8:	4b7e      	ldr	r3, [pc, #504]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	497b      	ldr	r1, [pc, #492]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8085 	beq.w	80078f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d11f      	bne.n	8007830 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077f0:	4b74      	ldr	r3, [pc, #464]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0da      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007800:	f000 fa24 	bl	8007c4c <RCC_GetSysClockFreqFromPLLSource>
 8007804:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4a6f      	ldr	r2, [pc, #444]	; (80079c8 <HAL_RCC_ClockConfig+0x264>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d947      	bls.n	800789e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800780e:	4b6d      	ldr	r3, [pc, #436]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d141      	bne.n	800789e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800781a:	4b6a      	ldr	r3, [pc, #424]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007822:	4a68      	ldr	r2, [pc, #416]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007828:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e036      	b.n	800789e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d107      	bne.n	8007848 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007838:	4b62      	ldr	r3, [pc, #392]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d115      	bne.n	8007870 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0b6      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d107      	bne.n	8007860 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007850:	4b5c      	ldr	r3, [pc, #368]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0aa      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007860:	4b58      	ldr	r3, [pc, #352]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0a2      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007870:	f000 f8b0 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8007874:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4a53      	ldr	r2, [pc, #332]	; (80079c8 <HAL_RCC_ClockConfig+0x264>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d90f      	bls.n	800789e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800787e:	4b51      	ldr	r3, [pc, #324]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800788a:	4b4e      	ldr	r3, [pc, #312]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007892:	4a4c      	ldr	r2, [pc, #304]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007898:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800789e:	4b49      	ldr	r3, [pc, #292]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f023 0203 	bic.w	r2, r3, #3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4946      	ldr	r1, [pc, #280]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b0:	f7fb fd00 	bl	80032b4 <HAL_GetTick>
 80078b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b6:	e013      	b.n	80078e0 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b8:	f7fb fcfc 	bl	80032b4 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d90a      	bls.n	80078e0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ca:	4b3e      	ldr	r3, [pc, #248]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 020c 	and.w	r2, r3, #12
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	429a      	cmp	r2, r3
 80078da:	d001      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e06a      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e0:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 020c 	and.w	r2, r3, #12
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d1e2      	bne.n	80078b8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d105      	bne.n	8007904 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80078f8:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	4a31      	ldr	r2, [pc, #196]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 80078fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007902:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d010      	beq.n	8007932 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	4b2b      	ldr	r3, [pc, #172]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791c:	429a      	cmp	r2, r3
 800791e:	d208      	bcs.n	8007932 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007920:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4925      	ldr	r1, [pc, #148]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007932:	4b23      	ldr	r3, [pc, #140]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d210      	bcs.n	8007962 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007940:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f023 020f 	bic.w	r2, r3, #15
 8007948:	491d      	ldr	r1, [pc, #116]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	4313      	orrs	r3, r2
 800794e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <HAL_RCC_ClockConfig+0x25c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d001      	beq.n	8007962 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e029      	b.n	80079b6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	4912      	ldr	r1, [pc, #72]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 800797c:	4313      	orrs	r3, r2
 800797e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	490a      	ldr	r1, [pc, #40]	; (80079c4 <HAL_RCC_ClockConfig+0x260>)
 800799c:	4313      	orrs	r3, r2
 800799e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80079a0:	f000 f8b4 	bl	8007b0c <HAL_RCC_GetHCLKFreq>
 80079a4:	4603      	mov	r3, r0
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <HAL_RCC_ClockConfig+0x268>)
 80079a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <HAL_RCC_ClockConfig+0x26c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fb fc30 	bl	8003214 <HAL_InitTick>
 80079b4:	4603      	mov	r3, r0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40022000 	.word	0x40022000
 80079c4:	40021000 	.word	0x40021000
 80079c8:	04c4b400 	.word	0x04c4b400
 80079cc:	20000000 	.word	0x20000000
 80079d0:	20000004 	.word	0x20000004

080079d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b089      	sub	sp, #36	; 0x24
 80079d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	2300      	movs	r3, #0
 80079e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079e2:	4b47      	ldr	r3, [pc, #284]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 030c 	and.w	r3, r3, #12
 80079ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079ec:	4b44      	ldr	r3, [pc, #272]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <HAL_RCC_GetSysClockFreq+0x34>
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2b0c      	cmp	r3, #12
 8007a00:	d121      	bne.n	8007a46 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d11e      	bne.n	8007a46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007a08:	4b3d      	ldr	r3, [pc, #244]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d107      	bne.n	8007a24 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007a14:	4b3a      	ldr	r3, [pc, #232]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	61fb      	str	r3, [r7, #28]
 8007a22:	e005      	b.n	8007a30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007a24:	4b36      	ldr	r3, [pc, #216]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	091b      	lsrs	r3, r3, #4
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8007a30:	4a34      	ldr	r2, [pc, #208]	; (8007b04 <HAL_RCC_GetSysClockFreq+0x130>)
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a38:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10d      	bne.n	8007a5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007a44:	e00a      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d102      	bne.n	8007a52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a4c:	4b2e      	ldr	r3, [pc, #184]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x134>)
 8007a4e:	61bb      	str	r3, [r7, #24]
 8007a50:	e004      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d101      	bne.n	8007a5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a58:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x134>)
 8007a5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b0c      	cmp	r3, #12
 8007a60:	d146      	bne.n	8007af0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007a62:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a6c:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	091b      	lsrs	r3, r3, #4
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	3301      	adds	r3, #1
 8007a78:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d003      	beq.n	8007a88 <HAL_RCC_GetSysClockFreq+0xb4>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d00d      	beq.n	8007aa2 <HAL_RCC_GetSysClockFreq+0xce>
 8007a86:	e019      	b.n	8007abc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a88:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x134>)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a90:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007a92:	68d2      	ldr	r2, [r2, #12]
 8007a94:	0a12      	lsrs	r2, r2, #8
 8007a96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	617b      	str	r3, [r7, #20]
        break;
 8007aa0:	e019      	b.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007aa2:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x134>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aaa:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007aac:	68d2      	ldr	r2, [r2, #12]
 8007aae:	0a12      	lsrs	r2, r2, #8
 8007ab0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ab4:	fb02 f303 	mul.w	r3, r2, r3
 8007ab8:	617b      	str	r3, [r7, #20]
        break;
 8007aba:	e00c      	b.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	4a0e      	ldr	r2, [pc, #56]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007ac6:	68d2      	ldr	r2, [r2, #12]
 8007ac8:	0a12      	lsrs	r2, r2, #8
 8007aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	617b      	str	r3, [r7, #20]
        break;
 8007ad4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	0e5b      	lsrs	r3, r3, #25
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007af0:	69bb      	ldr	r3, [r7, #24]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3724      	adds	r7, #36	; 0x24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40021000 	.word	0x40021000
 8007b04:	08015294 	.word	0x08015294
 8007b08:	00f42400 	.word	0x00f42400

08007b0c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8007b10:	f7ff ff60 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8007b14:	4602      	mov	r2, r0
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <HAL_RCC_GetHCLKFreq+0x20>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	091b      	lsrs	r3, r3, #4
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	4903      	ldr	r1, [pc, #12]	; (8007b30 <HAL_RCC_GetHCLKFreq+0x24>)
 8007b22:	5ccb      	ldrb	r3, [r1, r3]
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	0801527c 	.word	0x0801527c

08007b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b38:	f7ff ffe8 	bl	8007b0c <HAL_RCC_GetHCLKFreq>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	0a1b      	lsrs	r3, r3, #8
 8007b44:	f003 0307 	and.w	r3, r3, #7
 8007b48:	4903      	ldr	r1, [pc, #12]	; (8007b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b4a:	5ccb      	ldrb	r3, [r1, r3]
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40021000 	.word	0x40021000
 8007b58:	0801528c 	.word	0x0801528c

08007b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b60:	f7ff ffd4 	bl	8007b0c <HAL_RCC_GetHCLKFreq>
 8007b64:	4602      	mov	r2, r0
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	0adb      	lsrs	r3, r3, #11
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	4903      	ldr	r1, [pc, #12]	; (8007b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b72:	5ccb      	ldrb	r3, [r1, r3]
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	0801528c 	.word	0x0801528c

08007b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b90:	4b2c      	ldr	r3, [pc, #176]	; (8007c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b9c:	f7ff f86e 	bl	8006c7c <HAL_PWREx_GetVoltageRange>
 8007ba0:	6138      	str	r0, [r7, #16]
 8007ba2:	e014      	b.n	8007bce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ba4:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	4a26      	ldr	r2, [pc, #152]	; (8007c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bae:	6593      	str	r3, [r2, #88]	; 0x58
 8007bb0:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007bbc:	f7ff f85e 	bl	8006c7c <HAL_PWREx_GetVoltageRange>
 8007bc0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007bc2:	4b20      	ldr	r3, [pc, #128]	; (8007c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	4a1f      	ldr	r2, [pc, #124]	; (8007c44 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8007bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <RCC_SetFlashLatencyFromMSIRange+0x58>
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bda:	d10b      	bne.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b80      	cmp	r3, #128	; 0x80
 8007be0:	d919      	bls.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2ba0      	cmp	r3, #160	; 0xa0
 8007be6:	d902      	bls.n	8007bee <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007be8:	2302      	movs	r3, #2
 8007bea:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8007bec:	e013      	b.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bee:	2301      	movs	r3, #1
 8007bf0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8007bf2:	e010      	b.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b80      	cmp	r3, #128	; 0x80
 8007bf8:	d902      	bls.n	8007c00 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	e00a      	b.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d102      	bne.n	8007c0c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c06:	2302      	movs	r3, #2
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e004      	b.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b70      	cmp	r3, #112	; 0x70
 8007c10:	d101      	bne.n	8007c16 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c12:	2301      	movs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c16:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f023 020f 	bic.w	r2, r3, #15
 8007c1e:	490a      	ldr	r1, [pc, #40]	; (8007c48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007c26:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d001      	beq.n	8007c38 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	40021000 	.word	0x40021000
 8007c48:	40022000 	.word	0x40022000

08007c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c52:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c5c:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	091b      	lsrs	r3, r3, #4
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	3301      	adds	r3, #1
 8007c68:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d015      	beq.n	8007c9c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d839      	bhi.n	8007cea <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d01c      	beq.n	8007cb6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d133      	bne.n	8007cea <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c82:	4a26      	ldr	r2, [pc, #152]	; (8007d1c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8a:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007c8c:	68d2      	ldr	r2, [r2, #12]
 8007c8e:	0a12      	lsrs	r2, r2, #8
 8007c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c94:	fb02 f303 	mul.w	r3, r2, r3
 8007c98:	613b      	str	r3, [r7, #16]
      break;
 8007c9a:	e029      	b.n	8007cf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007c9c:	4a1f      	ldr	r2, [pc, #124]	; (8007d1c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	4a1c      	ldr	r2, [pc, #112]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007ca6:	68d2      	ldr	r2, [r2, #12]
 8007ca8:	0a12      	lsrs	r2, r2, #8
 8007caa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
 8007cb2:	613b      	str	r3, [r7, #16]
      break;
 8007cb4:	e01c      	b.n	8007cf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007cb6:	4b18      	ldr	r3, [pc, #96]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007cc2:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cc8:	0a1b      	lsrs	r3, r3, #8
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e005      	b.n	8007cde <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007cd2:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	091b      	lsrs	r3, r3, #4
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8007cde:	4a10      	ldr	r2, [pc, #64]	; (8007d20 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce6:	613b      	str	r3, [r7, #16]
        break;
 8007ce8:	e002      	b.n	8007cf0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	613b      	str	r3, [r7, #16]
      break;
 8007cee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8007cf0:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	0e5b      	lsrs	r3, r3, #25
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d08:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007d0a:	683b      	ldr	r3, [r7, #0]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	40021000 	.word	0x40021000
 8007d1c:	00f42400 	.word	0x00f42400
 8007d20:	08015294 	.word	0x08015294

08007d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d30:	2300      	movs	r3, #0
 8007d32:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d040      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d44:	2b80      	cmp	r3, #128	; 0x80
 8007d46:	d02a      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d48:	2b80      	cmp	r3, #128	; 0x80
 8007d4a:	d825      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d4c:	2b60      	cmp	r3, #96	; 0x60
 8007d4e:	d026      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d50:	2b60      	cmp	r3, #96	; 0x60
 8007d52:	d821      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d54:	2b40      	cmp	r3, #64	; 0x40
 8007d56:	d006      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d81d      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d010      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007d64:	e018      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d66:	4b8f      	ldr	r3, [pc, #572]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	4a8e      	ldr	r2, [pc, #568]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d70:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d72:	e015      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fb66 	bl	800844c <RCCEx_PLLSAI1_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d84:	e00c      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3320      	adds	r3, #32
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fc43 	bl	8008618 <RCCEx_PLLSAI2_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	77fb      	strb	r3, [r7, #31]
        break;
 8007d9c:	e000      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8007d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da0:	7ffb      	ldrb	r3, [r7, #31]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10b      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007da6:	4b7f      	ldr	r3, [pc, #508]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db4:	497b      	ldr	r1, [pc, #492]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007dbc:	e001      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbe:	7ffb      	ldrb	r3, [r7, #31]
 8007dc0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d047      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd6:	d030      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ddc:	d82a      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de2:	d02a      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de8:	d824      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dee:	d008      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df4:	d81e      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfe:	d010      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e00:	e018      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e02:	4b68      	ldr	r3, [pc, #416]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	4a67      	ldr	r2, [pc, #412]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e0c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e0e:	e015      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fb18 	bl	800844c <RCCEx_PLLSAI1_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e20:	e00c      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3320      	adds	r3, #32
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fbf5 	bl	8008618 <RCCEx_PLLSAI2_Config>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	77fb      	strb	r3, [r7, #31]
        break;
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8007e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3c:	7ffb      	ldrb	r3, [r7, #31]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007e42:	4b58      	ldr	r3, [pc, #352]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e50:	4954      	ldr	r1, [pc, #336]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007e58:	e001      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5a:	7ffb      	ldrb	r3, [r7, #31]
 8007e5c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 80ab 	beq.w	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e70:	4b4c      	ldr	r3, [pc, #304]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10d      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7c:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e80:	4a48      	ldr	r2, [pc, #288]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e86:	6593      	str	r3, [r2, #88]	; 0x58
 8007e88:	4b46      	ldr	r3, [pc, #280]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e98:	4b43      	ldr	r3, [pc, #268]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a42      	ldr	r2, [pc, #264]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ea4:	f7fb fa06 	bl	80032b4 <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eaa:	e00f      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eac:	f7fb fa02 	bl	80032b4 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d908      	bls.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eba:	4b3b      	ldr	r3, [pc, #236]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8007eca:	e006      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ecc:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0e9      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x188>
 8007ed8:	e000      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8007eda:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8007edc:	7ffb      	ldrb	r3, [r7, #31]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d164      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ee2:	4b30      	ldr	r3, [pc, #192]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eec:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01f      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d019      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f00:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f0c:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	4a24      	ldr	r2, [pc, #144]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f1c:	4b21      	ldr	r3, [pc, #132]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f22:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f2c:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01f      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3e:	f7fb f9b9 	bl	80032b4 <HAL_GetTick>
 8007f42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f44:	e012      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f46:	f7fb f9b5 	bl	80032b4 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d909      	bls.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8007f6a:	e007      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0e5      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007f7a:	e000      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8007f7c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8007f7e:	7ffb      	ldrb	r3, [r7, #31]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10c      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f94:	4903      	ldr	r1, [pc, #12]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f9e:	7ffb      	ldrb	r3, [r7, #31]
 8007fa0:	77bb      	strb	r3, [r7, #30]
 8007fa2:	e005      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fac:	7ffb      	ldrb	r3, [r7, #31]
 8007fae:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb6:	4b9c      	ldr	r3, [pc, #624]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fba:	4a9b      	ldr	r2, [pc, #620]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fce:	4b96      	ldr	r3, [pc, #600]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd4:	f023 0203 	bic.w	r2, r3, #3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fdc:	4992      	ldr	r1, [pc, #584]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ff0:	4b8d      	ldr	r3, [pc, #564]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	f023 020c 	bic.w	r2, r3, #12
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffe:	498a      	ldr	r1, [pc, #552]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008012:	4b85      	ldr	r3, [pc, #532]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008020:	4981      	ldr	r1, [pc, #516]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008034:	4b7c      	ldr	r3, [pc, #496]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	4979      	ldr	r1, [pc, #484]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008056:	4b74      	ldr	r3, [pc, #464]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	4970      	ldr	r1, [pc, #448]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008078:	4b6b      	ldr	r3, [pc, #428]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008086:	4968      	ldr	r1, [pc, #416]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800809a:	4b63      	ldr	r3, [pc, #396]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a8:	495f      	ldr	r1, [pc, #380]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080bc:	4b5a      	ldr	r3, [pc, #360]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ca:	4957      	ldr	r1, [pc, #348]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80080de:	4b52      	ldr	r3, [pc, #328]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ec:	494e      	ldr	r1, [pc, #312]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d031      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008108:	d00e      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800810a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800810e:	d814      	bhi.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d015      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008118:	d10f      	bne.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800811a:	4b43      	ldr	r3, [pc, #268]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	4a42      	ldr	r2, [pc, #264]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008124:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008126:	e00c      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3304      	adds	r3, #4
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f98c 	bl	800844c <RCCEx_PLLSAI1_Config>
 8008134:	4603      	mov	r3, r0
 8008136:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008138:	e003      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	77fb      	strb	r3, [r7, #31]
        break;
 800813e:	e000      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8008140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008142:	7ffb      	ldrb	r3, [r7, #31]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10b      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008148:	4b37      	ldr	r3, [pc, #220]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800814a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008156:	4934      	ldr	r1, [pc, #208]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008158:	4313      	orrs	r3, r2
 800815a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800815e:	e001      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008160:	7ffb      	ldrb	r3, [r7, #31]
 8008162:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008170:	4b2d      	ldr	r3, [pc, #180]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008176:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817e:	492a      	ldr	r1, [pc, #168]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008180:	4313      	orrs	r3, r2
 8008182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008192:	4b25      	ldr	r3, [pc, #148]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008198:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	4921      	ldr	r1, [pc, #132]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081b4:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c2:	4919      	ldr	r1, [pc, #100]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081dc:	f023 0203 	bic.w	r2, r3, #3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e4:	4910      	ldr	r1, [pc, #64]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d02b      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081f8:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008206:	4908      	ldr	r1, [pc, #32]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008208:	4313      	orrs	r3, r2
 800820a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008216:	d109      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008218:	4b03      	ldr	r3, [pc, #12]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	4a02      	ldr	r2, [pc, #8]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800821e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008222:	60d3      	str	r3, [r2, #12]
 8008224:	e014      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008226:	bf00      	nop
 8008228:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008234:	d10c      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	2101      	movs	r1, #1
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f905 	bl	800844c <RCCEx_PLLSAI1_Config>
 8008242:	4603      	mov	r3, r0
 8008244:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8008246:	7ffb      	ldrb	r3, [r7, #31]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800824c:	7ffb      	ldrb	r3, [r7, #31]
 800824e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d04a      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008264:	d108      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8008266:	4b70      	ldr	r3, [pc, #448]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800826c:	4a6e      	ldr	r2, [pc, #440]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800826e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008272:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008276:	e012      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008278:	4b6b      	ldr	r3, [pc, #428]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800827a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008286:	4968      	ldr	r1, [pc, #416]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008288:	4313      	orrs	r3, r2
 800828a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800828e:	4b66      	ldr	r3, [pc, #408]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008290:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008294:	4a64      	ldr	r2, [pc, #400]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800829a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082a6:	d10d      	bne.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3304      	adds	r3, #4
 80082ac:	2101      	movs	r1, #1
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f8cc 	bl	800844c <RCCEx_PLLSAI1_Config>
 80082b4:	4603      	mov	r3, r0
 80082b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80082b8:	7ffb      	ldrb	r3, [r7, #31]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d019      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80082be:	7ffb      	ldrb	r3, [r7, #31]
 80082c0:	77bb      	strb	r3, [r7, #30]
 80082c2:	e016      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082cc:	d106      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082ce:	4b56      	ldr	r3, [pc, #344]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	4a55      	ldr	r2, [pc, #340]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80082d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082d8:	60d3      	str	r3, [r2, #12]
 80082da:	e00a      	b.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082e4:	d105      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80082e6:	4b50      	ldr	r3, [pc, #320]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	4a4f      	ldr	r2, [pc, #316]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80082ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d028      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082fe:	4b4a      	ldr	r3, [pc, #296]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830c:	4946      	ldr	r1, [pc, #280]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800831c:	d106      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800831e:	4b42      	ldr	r3, [pc, #264]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	4a41      	ldr	r2, [pc, #260]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008328:	60d3      	str	r3, [r2, #12]
 800832a:	e011      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008334:	d10c      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3304      	adds	r3, #4
 800833a:	2101      	movs	r1, #1
 800833c:	4618      	mov	r0, r3
 800833e:	f000 f885 	bl	800844c <RCCEx_PLLSAI1_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008346:	7ffb      	ldrb	r3, [r7, #31]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800834c:	7ffb      	ldrb	r3, [r7, #31]
 800834e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01e      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800835c:	4b32      	ldr	r3, [pc, #200]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008362:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800836c:	492e      	ldr	r1, [pc, #184]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800837a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800837e:	d10c      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	2102      	movs	r1, #2
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f860 	bl	800844c <RCCEx_PLLSAI1_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008390:	7ffb      	ldrb	r3, [r7, #31]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8008396:	7ffb      	ldrb	r3, [r7, #31]
 8008398:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083a6:	4b20      	ldr	r3, [pc, #128]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80083a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083ac:	f023 0204 	bic.w	r2, r3, #4
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b6:	491c      	ldr	r1, [pc, #112]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80083ca:	4b17      	ldr	r3, [pc, #92]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80083cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083d0:	f023 0218 	bic.w	r2, r3, #24
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083da:	4913      	ldr	r1, [pc, #76]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d017      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80083ee:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80083f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083fe:	490a      	ldr	r1, [pc, #40]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008400:	4313      	orrs	r3, r2
 8008402:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800840c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008410:	d105      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	4a04      	ldr	r2, [pc, #16]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800841c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800841e:	7fbb      	ldrb	r3, [r7, #30]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40021000 	.word	0x40021000

0800842c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a04      	ldr	r2, [pc, #16]	; (8008448 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008436:	f043 0304 	orr.w	r3, r3, #4
 800843a:	6013      	str	r3, [r2, #0]
}
 800843c:	bf00      	nop
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	40021000 	.word	0x40021000

0800844c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d018      	beq.n	8008494 <RCCEx_PLLSAI1_Config+0x48>
 8008462:	2b03      	cmp	r3, #3
 8008464:	d81f      	bhi.n	80084a6 <RCCEx_PLLSAI1_Config+0x5a>
 8008466:	2b01      	cmp	r3, #1
 8008468:	d002      	beq.n	8008470 <RCCEx_PLLSAI1_Config+0x24>
 800846a:	2b02      	cmp	r3, #2
 800846c:	d009      	beq.n	8008482 <RCCEx_PLLSAI1_Config+0x36>
 800846e:	e01a      	b.n	80084a6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008470:	4b65      	ldr	r3, [pc, #404]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d117      	bne.n	80084ac <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008480:	e014      	b.n	80084ac <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008482:	4b61      	ldr	r3, [pc, #388]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800848a:	2b00      	cmp	r3, #0
 800848c:	d110      	bne.n	80084b0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008492:	e00d      	b.n	80084b0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008494:	4b5c      	ldr	r3, [pc, #368]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d109      	bne.n	80084b4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084a4:	e006      	b.n	80084b4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	73fb      	strb	r3, [r7, #15]
      break;
 80084aa:	e004      	b.n	80084b6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80084ac:	bf00      	nop
 80084ae:	e002      	b.n	80084b6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80084b0:	bf00      	nop
 80084b2:	e000      	b.n	80084b6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80084b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f040 809f 	bne.w	80085fc <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084be:	4b52      	ldr	r3, [pc, #328]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a51      	ldr	r2, [pc, #324]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80084c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ca:	f7fa fef3 	bl	80032b4 <HAL_GetTick>
 80084ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084d0:	e00f      	b.n	80084f2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084d2:	f7fa feef 	bl	80032b4 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d908      	bls.n	80084f2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084e0:	4b49      	ldr	r3, [pc, #292]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d009      	beq.n	8008500 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084f0:	e006      	b.n	8008500 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084f2:	4b45      	ldr	r3, [pc, #276]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e9      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0x86>
 80084fe:	e000      	b.n	8008502 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8008500:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d179      	bne.n	80085fc <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d116      	bne.n	800853c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800850e:	4b3e      	ldr	r3, [pc, #248]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	4b3e      	ldr	r3, [pc, #248]	; (800860c <RCCEx_PLLSAI1_Config+0x1c0>)
 8008514:	4013      	ands	r3, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6892      	ldr	r2, [r2, #8]
 800851a:	0211      	lsls	r1, r2, #8
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68d2      	ldr	r2, [r2, #12]
 8008520:	06d2      	lsls	r2, r2, #27
 8008522:	4311      	orrs	r1, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6852      	ldr	r2, [r2, #4]
 8008528:	3a01      	subs	r2, #1
 800852a:	0112      	lsls	r2, r2, #4
 800852c:	4311      	orrs	r1, r2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	4934      	ldr	r1, [pc, #208]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008536:	4313      	orrs	r3, r2
 8008538:	610b      	str	r3, [r1, #16]
 800853a:	e033      	b.n	80085a4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d118      	bne.n	8008574 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008542:	4b31      	ldr	r3, [pc, #196]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	4b32      	ldr	r3, [pc, #200]	; (8008610 <RCCEx_PLLSAI1_Config+0x1c4>)
 8008548:	4013      	ands	r3, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6892      	ldr	r2, [r2, #8]
 800854e:	0211      	lsls	r1, r2, #8
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6912      	ldr	r2, [r2, #16]
 8008554:	0852      	lsrs	r2, r2, #1
 8008556:	3a01      	subs	r2, #1
 8008558:	0552      	lsls	r2, r2, #21
 800855a:	4311      	orrs	r1, r2
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6852      	ldr	r2, [r2, #4]
 8008560:	3a01      	subs	r2, #1
 8008562:	0112      	lsls	r2, r2, #4
 8008564:	4311      	orrs	r1, r2
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	4926      	ldr	r1, [pc, #152]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 800856e:	4313      	orrs	r3, r2
 8008570:	610b      	str	r3, [r1, #16]
 8008572:	e017      	b.n	80085a4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008574:	4b24      	ldr	r3, [pc, #144]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	4b26      	ldr	r3, [pc, #152]	; (8008614 <RCCEx_PLLSAI1_Config+0x1c8>)
 800857a:	4013      	ands	r3, r2
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6892      	ldr	r2, [r2, #8]
 8008580:	0211      	lsls	r1, r2, #8
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6952      	ldr	r2, [r2, #20]
 8008586:	0852      	lsrs	r2, r2, #1
 8008588:	3a01      	subs	r2, #1
 800858a:	0652      	lsls	r2, r2, #25
 800858c:	4311      	orrs	r1, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	6852      	ldr	r2, [r2, #4]
 8008592:	3a01      	subs	r2, #1
 8008594:	0112      	lsls	r2, r2, #4
 8008596:	4311      	orrs	r1, r2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	491a      	ldr	r1, [pc, #104]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80085a4:	4b18      	ldr	r3, [pc, #96]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a17      	ldr	r2, [pc, #92]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80085aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b0:	f7fa fe80 	bl	80032b4 <HAL_GetTick>
 80085b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085b6:	e00f      	b.n	80085d8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085b8:	f7fa fe7c 	bl	80032b4 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d908      	bls.n	80085d8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085c6:	4b10      	ldr	r3, [pc, #64]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80085d6:	e006      	b.n	80085e6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085d8:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0e9      	beq.n	80085b8 <RCCEx_PLLSAI1_Config+0x16c>
 80085e4:	e000      	b.n	80085e8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80085e6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	4904      	ldr	r1, [pc, #16]	; (8008608 <RCCEx_PLLSAI1_Config+0x1bc>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40021000 	.word	0x40021000
 800860c:	07ff800c 	.word	0x07ff800c
 8008610:	ff9f800c 	.word	0xff9f800c
 8008614:	f9ff800c 	.word	0xf9ff800c

08008618 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b03      	cmp	r3, #3
 800862c:	d018      	beq.n	8008660 <RCCEx_PLLSAI2_Config+0x48>
 800862e:	2b03      	cmp	r3, #3
 8008630:	d81f      	bhi.n	8008672 <RCCEx_PLLSAI2_Config+0x5a>
 8008632:	2b01      	cmp	r3, #1
 8008634:	d002      	beq.n	800863c <RCCEx_PLLSAI2_Config+0x24>
 8008636:	2b02      	cmp	r3, #2
 8008638:	d009      	beq.n	800864e <RCCEx_PLLSAI2_Config+0x36>
 800863a:	e01a      	b.n	8008672 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800863c:	4b4a      	ldr	r3, [pc, #296]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d117      	bne.n	8008678 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800864c:	e014      	b.n	8008678 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800864e:	4b46      	ldr	r3, [pc, #280]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008656:	2b00      	cmp	r3, #0
 8008658:	d110      	bne.n	800867c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800865e:	e00d      	b.n	800867c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008660:	4b41      	ldr	r3, [pc, #260]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008670:	e006      	b.n	8008680 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	73fb      	strb	r3, [r7, #15]
      break;
 8008676:	e004      	b.n	8008682 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008678:	bf00      	nop
 800867a:	e002      	b.n	8008682 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800867c:	bf00      	nop
 800867e:	e000      	b.n	8008682 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008680:	bf00      	nop
  }

  if (status == HAL_OK)
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d169      	bne.n	800875c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008688:	4b37      	ldr	r3, [pc, #220]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a36      	ldr	r2, [pc, #216]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 800868e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008694:	f7fa fe0e 	bl	80032b4 <HAL_GetTick>
 8008698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800869a:	e00f      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800869c:	f7fa fe0a 	bl	80032b4 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d908      	bls.n	80086bc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086aa:	4b2f      	ldr	r3, [pc, #188]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ba:	e006      	b.n	80086ca <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086bc:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e9      	bne.n	800869c <RCCEx_PLLSAI2_Config+0x84>
 80086c8:	e000      	b.n	80086cc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80086ca:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d144      	bne.n	800875c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d115      	bne.n	8008704 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80086d8:	4b23      	ldr	r3, [pc, #140]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	4b23      	ldr	r3, [pc, #140]	; (800876c <RCCEx_PLLSAI2_Config+0x154>)
 80086de:	4013      	ands	r3, r2
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6892      	ldr	r2, [r2, #8]
 80086e4:	0211      	lsls	r1, r2, #8
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	68d2      	ldr	r2, [r2, #12]
 80086ea:	06d2      	lsls	r2, r2, #27
 80086ec:	4311      	orrs	r1, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6852      	ldr	r2, [r2, #4]
 80086f2:	3a01      	subs	r2, #1
 80086f4:	0112      	lsls	r2, r2, #4
 80086f6:	4311      	orrs	r1, r2
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6812      	ldr	r2, [r2, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	491a      	ldr	r1, [pc, #104]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 8008700:	4313      	orrs	r3, r2
 8008702:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008704:	4b18      	ldr	r3, [pc, #96]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a17      	ldr	r2, [pc, #92]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 800870a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800870e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008710:	f7fa fdd0 	bl	80032b4 <HAL_GetTick>
 8008714:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008716:	e00f      	b.n	8008738 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008718:	f7fa fdcc 	bl	80032b4 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d908      	bls.n	8008738 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008726:	4b10      	ldr	r3, [pc, #64]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008736:	e006      	b.n	8008746 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008738:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0e9      	beq.n	8008718 <RCCEx_PLLSAI2_Config+0x100>
 8008744:	e000      	b.n	8008748 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8008746:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800874e:	4b06      	ldr	r3, [pc, #24]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 8008750:	695a      	ldr	r2, [r3, #20]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	4904      	ldr	r1, [pc, #16]	; (8008768 <RCCEx_PLLSAI2_Config+0x150>)
 8008758:	4313      	orrs	r3, r2
 800875a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	40021000 	.word	0x40021000
 800876c:	07ff800c 	.word	0x07ff800c

08008770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e049      	b.n	8008816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7fa f9cc 	bl	8002b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f000 fb70 	bl	8008e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e049      	b.n	80088c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7fa f9bd 	bl	8002bc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2202      	movs	r2, #2
 800884e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f000 fb19 	bl	8008e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <HAL_TIM_PWM_Start+0x24>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	bf14      	ite	ne
 80088e8:	2301      	movne	r3, #1
 80088ea:	2300      	moveq	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	e03c      	b.n	800896a <HAL_TIM_PWM_Start+0x9e>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d109      	bne.n	800890a <HAL_TIM_PWM_Start+0x3e>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b01      	cmp	r3, #1
 8008900:	bf14      	ite	ne
 8008902:	2301      	movne	r3, #1
 8008904:	2300      	moveq	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	e02f      	b.n	800896a <HAL_TIM_PWM_Start+0x9e>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b08      	cmp	r3, #8
 800890e:	d109      	bne.n	8008924 <HAL_TIM_PWM_Start+0x58>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	bf14      	ite	ne
 800891c:	2301      	movne	r3, #1
 800891e:	2300      	moveq	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	e022      	b.n	800896a <HAL_TIM_PWM_Start+0x9e>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b0c      	cmp	r3, #12
 8008928:	d109      	bne.n	800893e <HAL_TIM_PWM_Start+0x72>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b01      	cmp	r3, #1
 8008934:	bf14      	ite	ne
 8008936:	2301      	movne	r3, #1
 8008938:	2300      	moveq	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	e015      	b.n	800896a <HAL_TIM_PWM_Start+0x9e>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b10      	cmp	r3, #16
 8008942:	d109      	bne.n	8008958 <HAL_TIM_PWM_Start+0x8c>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	bf14      	ite	ne
 8008950:	2301      	movne	r3, #1
 8008952:	2300      	moveq	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	e008      	b.n	800896a <HAL_TIM_PWM_Start+0x9e>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	bf14      	ite	ne
 8008964:	2301      	movne	r3, #1
 8008966:	2300      	moveq	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e09c      	b.n	8008aac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Start+0xb6>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008980:	e023      	b.n	80089ca <HAL_TIM_PWM_Start+0xfe>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Start+0xc6>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008990:	e01b      	b.n	80089ca <HAL_TIM_PWM_Start+0xfe>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b08      	cmp	r3, #8
 8008996:	d104      	bne.n	80089a2 <HAL_TIM_PWM_Start+0xd6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089a0:	e013      	b.n	80089ca <HAL_TIM_PWM_Start+0xfe>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b0c      	cmp	r3, #12
 80089a6:	d104      	bne.n	80089b2 <HAL_TIM_PWM_Start+0xe6>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089b0:	e00b      	b.n	80089ca <HAL_TIM_PWM_Start+0xfe>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d104      	bne.n	80089c2 <HAL_TIM_PWM_Start+0xf6>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089c0:	e003      	b.n	80089ca <HAL_TIM_PWM_Start+0xfe>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2201      	movs	r2, #1
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fe6a 	bl	80096ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a35      	ldr	r2, [pc, #212]	; (8008ab4 <HAL_TIM_PWM_Start+0x1e8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <HAL_TIM_PWM_Start+0x13e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a34      	ldr	r2, [pc, #208]	; (8008ab8 <HAL_TIM_PWM_Start+0x1ec>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00e      	beq.n	8008a0a <HAL_TIM_PWM_Start+0x13e>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a32      	ldr	r2, [pc, #200]	; (8008abc <HAL_TIM_PWM_Start+0x1f0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d009      	beq.n	8008a0a <HAL_TIM_PWM_Start+0x13e>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a31      	ldr	r2, [pc, #196]	; (8008ac0 <HAL_TIM_PWM_Start+0x1f4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <HAL_TIM_PWM_Start+0x13e>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a2f      	ldr	r2, [pc, #188]	; (8008ac4 <HAL_TIM_PWM_Start+0x1f8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d101      	bne.n	8008a0e <HAL_TIM_PWM_Start+0x142>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <HAL_TIM_PWM_Start+0x144>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a22      	ldr	r2, [pc, #136]	; (8008ab4 <HAL_TIM_PWM_Start+0x1e8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d01d      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x19e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a36:	d018      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x19e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <HAL_TIM_PWM_Start+0x1fc>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d013      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x19e>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a21      	ldr	r2, [pc, #132]	; (8008acc <HAL_TIM_PWM_Start+0x200>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d00e      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x19e>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <HAL_TIM_PWM_Start+0x204>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d009      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x19e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <HAL_TIM_PWM_Start+0x1ec>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d004      	beq.n	8008a6a <HAL_TIM_PWM_Start+0x19e>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a15      	ldr	r2, [pc, #84]	; (8008abc <HAL_TIM_PWM_Start+0x1f0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d115      	bne.n	8008a96 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	4b18      	ldr	r3, [pc, #96]	; (8008ad4 <HAL_TIM_PWM_Start+0x208>)
 8008a72:	4013      	ands	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b06      	cmp	r3, #6
 8008a7a:	d015      	beq.n	8008aa8 <HAL_TIM_PWM_Start+0x1dc>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a82:	d011      	beq.n	8008aa8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a94:	e008      	b.n	8008aa8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f042 0201 	orr.w	r2, r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	e000      	b.n	8008aaa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40012c00 	.word	0x40012c00
 8008ab8:	40013400 	.word	0x40013400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40014400 	.word	0x40014400
 8008ac4:	40014800 	.word	0x40014800
 8008ac8:	40000400 	.word	0x40000400
 8008acc:	40000800 	.word	0x40000800
 8008ad0:	40000c00 	.word	0x40000c00
 8008ad4:	00010007 	.word	0x00010007

08008ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d101      	bne.n	8008af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008af2:	2302      	movs	r3, #2
 8008af4:	e0ff      	b.n	8008cf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b14      	cmp	r3, #20
 8008b02:	f200 80f0 	bhi.w	8008ce6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b06:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008ce7 	.word	0x08008ce7
 8008b14:	08008ce7 	.word	0x08008ce7
 8008b18:	08008ce7 	.word	0x08008ce7
 8008b1c:	08008ba1 	.word	0x08008ba1
 8008b20:	08008ce7 	.word	0x08008ce7
 8008b24:	08008ce7 	.word	0x08008ce7
 8008b28:	08008ce7 	.word	0x08008ce7
 8008b2c:	08008be3 	.word	0x08008be3
 8008b30:	08008ce7 	.word	0x08008ce7
 8008b34:	08008ce7 	.word	0x08008ce7
 8008b38:	08008ce7 	.word	0x08008ce7
 8008b3c:	08008c23 	.word	0x08008c23
 8008b40:	08008ce7 	.word	0x08008ce7
 8008b44:	08008ce7 	.word	0x08008ce7
 8008b48:	08008ce7 	.word	0x08008ce7
 8008b4c:	08008c65 	.word	0x08008c65
 8008b50:	08008ce7 	.word	0x08008ce7
 8008b54:	08008ce7 	.word	0x08008ce7
 8008b58:	08008ce7 	.word	0x08008ce7
 8008b5c:	08008ca5 	.word	0x08008ca5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fa2e 	bl	8008fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f042 0208 	orr.w	r2, r2, #8
 8008b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0204 	bic.w	r2, r2, #4
 8008b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6999      	ldr	r1, [r3, #24]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	691a      	ldr	r2, [r3, #16]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	619a      	str	r2, [r3, #24]
      break;
 8008b9e:	e0a5      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fa9e 	bl	80090e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699a      	ldr	r2, [r3, #24]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6999      	ldr	r1, [r3, #24]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	021a      	lsls	r2, r3, #8
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	619a      	str	r2, [r3, #24]
      break;
 8008be0:	e084      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fb07 	bl	80091fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69da      	ldr	r2, [r3, #28]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 0208 	orr.w	r2, r2, #8
 8008bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0204 	bic.w	r2, r2, #4
 8008c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69d9      	ldr	r1, [r3, #28]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	61da      	str	r2, [r3, #28]
      break;
 8008c20:	e064      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68b9      	ldr	r1, [r7, #8]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fb6f 	bl	800930c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69da      	ldr	r2, [r3, #28]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69d9      	ldr	r1, [r3, #28]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	021a      	lsls	r2, r3, #8
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	61da      	str	r2, [r3, #28]
      break;
 8008c62:	e043      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68b9      	ldr	r1, [r7, #8]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fbb8 	bl	80093e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0208 	orr.w	r2, r2, #8
 8008c7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f022 0204 	bic.w	r2, r2, #4
 8008c8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	691a      	ldr	r2, [r3, #16]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ca2:	e023      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fbfc 	bl	80094a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	021a      	lsls	r2, r3, #8
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ce4:	e002      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop

08008d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e0b6      	b.n	8008e8a <HAL_TIM_ConfigClockSource+0x18a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d58:	d03e      	beq.n	8008dd8 <HAL_TIM_ConfigClockSource+0xd8>
 8008d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5e:	f200 8087 	bhi.w	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d66:	f000 8086 	beq.w	8008e76 <HAL_TIM_ConfigClockSource+0x176>
 8008d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6e:	d87f      	bhi.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008d70:	2b70      	cmp	r3, #112	; 0x70
 8008d72:	d01a      	beq.n	8008daa <HAL_TIM_ConfigClockSource+0xaa>
 8008d74:	2b70      	cmp	r3, #112	; 0x70
 8008d76:	d87b      	bhi.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008d78:	2b60      	cmp	r3, #96	; 0x60
 8008d7a:	d050      	beq.n	8008e1e <HAL_TIM_ConfigClockSource+0x11e>
 8008d7c:	2b60      	cmp	r3, #96	; 0x60
 8008d7e:	d877      	bhi.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008d80:	2b50      	cmp	r3, #80	; 0x50
 8008d82:	d03c      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0xfe>
 8008d84:	2b50      	cmp	r3, #80	; 0x50
 8008d86:	d873      	bhi.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d058      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x13e>
 8008d8c:	2b40      	cmp	r3, #64	; 0x40
 8008d8e:	d86f      	bhi.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008d90:	2b30      	cmp	r3, #48	; 0x30
 8008d92:	d064      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x15e>
 8008d94:	2b30      	cmp	r3, #48	; 0x30
 8008d96:	d86b      	bhi.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d060      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x15e>
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	d867      	bhi.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d05c      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x15e>
 8008da4:	2b10      	cmp	r3, #16
 8008da6:	d05a      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0x15e>
 8008da8:	e062      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	6899      	ldr	r1, [r3, #8]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f000 fc57 	bl	800966c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	609a      	str	r2, [r3, #8]
      break;
 8008dd6:	e04f      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	6899      	ldr	r1, [r3, #8]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f000 fc40 	bl	800966c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dfa:	609a      	str	r2, [r3, #8]
      break;
 8008dfc:	e03c      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	6859      	ldr	r1, [r3, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f000 fbb2 	bl	8009574 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2150      	movs	r1, #80	; 0x50
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fc0b 	bl	8009632 <TIM_ITRx_SetConfig>
      break;
 8008e1c:	e02c      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6859      	ldr	r1, [r3, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f000 fbd1 	bl	80095d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2160      	movs	r1, #96	; 0x60
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fbfb 	bl	8009632 <TIM_ITRx_SetConfig>
      break;
 8008e3c:	e01c      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	6859      	ldr	r1, [r3, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f000 fb92 	bl	8009574 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2140      	movs	r1, #64	; 0x40
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 fbeb 	bl	8009632 <TIM_ITRx_SetConfig>
      break;
 8008e5c:	e00c      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f000 fbe2 	bl	8009632 <TIM_ITRx_SetConfig>
      break;
 8008e6e:	e003      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	73fb      	strb	r3, [r7, #15]
      break;
 8008e74:	e000      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a40      	ldr	r2, [pc, #256]	; (8008fa8 <TIM_Base_SetConfig+0x114>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d013      	beq.n	8008ed4 <TIM_Base_SetConfig+0x40>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb2:	d00f      	beq.n	8008ed4 <TIM_Base_SetConfig+0x40>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a3d      	ldr	r2, [pc, #244]	; (8008fac <TIM_Base_SetConfig+0x118>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d00b      	beq.n	8008ed4 <TIM_Base_SetConfig+0x40>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a3c      	ldr	r2, [pc, #240]	; (8008fb0 <TIM_Base_SetConfig+0x11c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d007      	beq.n	8008ed4 <TIM_Base_SetConfig+0x40>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a3b      	ldr	r2, [pc, #236]	; (8008fb4 <TIM_Base_SetConfig+0x120>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_Base_SetConfig+0x40>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a3a      	ldr	r2, [pc, #232]	; (8008fb8 <TIM_Base_SetConfig+0x124>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d108      	bne.n	8008ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a2f      	ldr	r2, [pc, #188]	; (8008fa8 <TIM_Base_SetConfig+0x114>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d01f      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef4:	d01b      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a2c      	ldr	r2, [pc, #176]	; (8008fac <TIM_Base_SetConfig+0x118>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d017      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a2b      	ldr	r2, [pc, #172]	; (8008fb0 <TIM_Base_SetConfig+0x11c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d013      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a2a      	ldr	r2, [pc, #168]	; (8008fb4 <TIM_Base_SetConfig+0x120>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d00f      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a29      	ldr	r2, [pc, #164]	; (8008fb8 <TIM_Base_SetConfig+0x124>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00b      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a28      	ldr	r2, [pc, #160]	; (8008fbc <TIM_Base_SetConfig+0x128>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d007      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a27      	ldr	r2, [pc, #156]	; (8008fc0 <TIM_Base_SetConfig+0x12c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d003      	beq.n	8008f2e <TIM_Base_SetConfig+0x9a>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a26      	ldr	r2, [pc, #152]	; (8008fc4 <TIM_Base_SetConfig+0x130>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d108      	bne.n	8008f40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a10      	ldr	r2, [pc, #64]	; (8008fa8 <TIM_Base_SetConfig+0x114>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00f      	beq.n	8008f8c <TIM_Base_SetConfig+0xf8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a12      	ldr	r2, [pc, #72]	; (8008fb8 <TIM_Base_SetConfig+0x124>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00b      	beq.n	8008f8c <TIM_Base_SetConfig+0xf8>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <TIM_Base_SetConfig+0x128>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d007      	beq.n	8008f8c <TIM_Base_SetConfig+0xf8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a10      	ldr	r2, [pc, #64]	; (8008fc0 <TIM_Base_SetConfig+0x12c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d003      	beq.n	8008f8c <TIM_Base_SetConfig+0xf8>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a0f      	ldr	r2, [pc, #60]	; (8008fc4 <TIM_Base_SetConfig+0x130>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d103      	bne.n	8008f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	691a      	ldr	r2, [r3, #16]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	615a      	str	r2, [r3, #20]
}
 8008f9a:	bf00      	nop
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	40012c00 	.word	0x40012c00
 8008fac:	40000400 	.word	0x40000400
 8008fb0:	40000800 	.word	0x40000800
 8008fb4:	40000c00 	.word	0x40000c00
 8008fb8:	40013400 	.word	0x40013400
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	40014400 	.word	0x40014400
 8008fc4:	40014800 	.word	0x40014800

08008fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f023 0201 	bic.w	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f023 0302 	bic.w	r3, r3, #2
 8009014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	4313      	orrs	r3, r2
 800901e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a2c      	ldr	r2, [pc, #176]	; (80090d4 <TIM_OC1_SetConfig+0x10c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00f      	beq.n	8009048 <TIM_OC1_SetConfig+0x80>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a2b      	ldr	r2, [pc, #172]	; (80090d8 <TIM_OC1_SetConfig+0x110>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00b      	beq.n	8009048 <TIM_OC1_SetConfig+0x80>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a2a      	ldr	r2, [pc, #168]	; (80090dc <TIM_OC1_SetConfig+0x114>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d007      	beq.n	8009048 <TIM_OC1_SetConfig+0x80>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a29      	ldr	r2, [pc, #164]	; (80090e0 <TIM_OC1_SetConfig+0x118>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d003      	beq.n	8009048 <TIM_OC1_SetConfig+0x80>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a28      	ldr	r2, [pc, #160]	; (80090e4 <TIM_OC1_SetConfig+0x11c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d10c      	bne.n	8009062 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f023 0308 	bic.w	r3, r3, #8
 800904e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f023 0304 	bic.w	r3, r3, #4
 8009060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a1b      	ldr	r2, [pc, #108]	; (80090d4 <TIM_OC1_SetConfig+0x10c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00f      	beq.n	800908a <TIM_OC1_SetConfig+0xc2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a1a      	ldr	r2, [pc, #104]	; (80090d8 <TIM_OC1_SetConfig+0x110>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d00b      	beq.n	800908a <TIM_OC1_SetConfig+0xc2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a19      	ldr	r2, [pc, #100]	; (80090dc <TIM_OC1_SetConfig+0x114>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d007      	beq.n	800908a <TIM_OC1_SetConfig+0xc2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a18      	ldr	r2, [pc, #96]	; (80090e0 <TIM_OC1_SetConfig+0x118>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d003      	beq.n	800908a <TIM_OC1_SetConfig+0xc2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <TIM_OC1_SetConfig+0x11c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d111      	bne.n	80090ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	621a      	str	r2, [r3, #32]
}
 80090c8:	bf00      	nop
 80090ca:	371c      	adds	r7, #28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	40012c00 	.word	0x40012c00
 80090d8:	40013400 	.word	0x40013400
 80090dc:	40014000 	.word	0x40014000
 80090e0:	40014400 	.word	0x40014400
 80090e4:	40014800 	.word	0x40014800

080090e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	f023 0210 	bic.w	r2, r3, #16
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	021b      	lsls	r3, r3, #8
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	4313      	orrs	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f023 0320 	bic.w	r3, r3, #32
 8009136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	4313      	orrs	r3, r2
 8009142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a28      	ldr	r2, [pc, #160]	; (80091e8 <TIM_OC2_SetConfig+0x100>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d003      	beq.n	8009154 <TIM_OC2_SetConfig+0x6c>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a27      	ldr	r2, [pc, #156]	; (80091ec <TIM_OC2_SetConfig+0x104>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d10d      	bne.n	8009170 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800915a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800916e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a1d      	ldr	r2, [pc, #116]	; (80091e8 <TIM_OC2_SetConfig+0x100>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00f      	beq.n	8009198 <TIM_OC2_SetConfig+0xb0>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a1c      	ldr	r2, [pc, #112]	; (80091ec <TIM_OC2_SetConfig+0x104>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00b      	beq.n	8009198 <TIM_OC2_SetConfig+0xb0>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a1b      	ldr	r2, [pc, #108]	; (80091f0 <TIM_OC2_SetConfig+0x108>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d007      	beq.n	8009198 <TIM_OC2_SetConfig+0xb0>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a1a      	ldr	r2, [pc, #104]	; (80091f4 <TIM_OC2_SetConfig+0x10c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d003      	beq.n	8009198 <TIM_OC2_SetConfig+0xb0>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a19      	ldr	r2, [pc, #100]	; (80091f8 <TIM_OC2_SetConfig+0x110>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d113      	bne.n	80091c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800919e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4313      	orrs	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	621a      	str	r2, [r3, #32]
}
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40012c00 	.word	0x40012c00
 80091ec:	40013400 	.word	0x40013400
 80091f0:	40014000 	.word	0x40014000
 80091f4:	40014400 	.word	0x40014400
 80091f8:	40014800 	.word	0x40014800

080091fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800922a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0303 	bic.w	r3, r3, #3
 8009236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	021b      	lsls	r3, r3, #8
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a27      	ldr	r2, [pc, #156]	; (80092f8 <TIM_OC3_SetConfig+0xfc>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d003      	beq.n	8009266 <TIM_OC3_SetConfig+0x6a>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a26      	ldr	r2, [pc, #152]	; (80092fc <TIM_OC3_SetConfig+0x100>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d10d      	bne.n	8009282 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800926c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a1c      	ldr	r2, [pc, #112]	; (80092f8 <TIM_OC3_SetConfig+0xfc>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00f      	beq.n	80092aa <TIM_OC3_SetConfig+0xae>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a1b      	ldr	r2, [pc, #108]	; (80092fc <TIM_OC3_SetConfig+0x100>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d00b      	beq.n	80092aa <TIM_OC3_SetConfig+0xae>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a1a      	ldr	r2, [pc, #104]	; (8009300 <TIM_OC3_SetConfig+0x104>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d007      	beq.n	80092aa <TIM_OC3_SetConfig+0xae>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a19      	ldr	r2, [pc, #100]	; (8009304 <TIM_OC3_SetConfig+0x108>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d003      	beq.n	80092aa <TIM_OC3_SetConfig+0xae>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a18      	ldr	r2, [pc, #96]	; (8009308 <TIM_OC3_SetConfig+0x10c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d113      	bne.n	80092d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	621a      	str	r2, [r3, #32]
}
 80092ec:	bf00      	nop
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	40013400 	.word	0x40013400
 8009300:	40014000 	.word	0x40014000
 8009304:	40014400 	.word	0x40014400
 8009308:	40014800 	.word	0x40014800

0800930c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800933a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800933e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4313      	orrs	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800935a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a18      	ldr	r2, [pc, #96]	; (80093cc <TIM_OC4_SetConfig+0xc0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00f      	beq.n	8009390 <TIM_OC4_SetConfig+0x84>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <TIM_OC4_SetConfig+0xc4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00b      	beq.n	8009390 <TIM_OC4_SetConfig+0x84>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a16      	ldr	r2, [pc, #88]	; (80093d4 <TIM_OC4_SetConfig+0xc8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d007      	beq.n	8009390 <TIM_OC4_SetConfig+0x84>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a15      	ldr	r2, [pc, #84]	; (80093d8 <TIM_OC4_SetConfig+0xcc>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_OC4_SetConfig+0x84>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a14      	ldr	r2, [pc, #80]	; (80093dc <TIM_OC4_SetConfig+0xd0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d109      	bne.n	80093a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	019b      	lsls	r3, r3, #6
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	621a      	str	r2, [r3, #32]
}
 80093be:	bf00      	nop
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40012c00 	.word	0x40012c00
 80093d0:	40013400 	.word	0x40013400
 80093d4:	40014000 	.word	0x40014000
 80093d8:	40014400 	.word	0x40014400
 80093dc:	40014800 	.word	0x40014800

080093e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800940e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009424:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	041b      	lsls	r3, r3, #16
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a17      	ldr	r2, [pc, #92]	; (8009494 <TIM_OC5_SetConfig+0xb4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00f      	beq.n	800945a <TIM_OC5_SetConfig+0x7a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a16      	ldr	r2, [pc, #88]	; (8009498 <TIM_OC5_SetConfig+0xb8>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00b      	beq.n	800945a <TIM_OC5_SetConfig+0x7a>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a15      	ldr	r2, [pc, #84]	; (800949c <TIM_OC5_SetConfig+0xbc>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d007      	beq.n	800945a <TIM_OC5_SetConfig+0x7a>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a14      	ldr	r2, [pc, #80]	; (80094a0 <TIM_OC5_SetConfig+0xc0>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d003      	beq.n	800945a <TIM_OC5_SetConfig+0x7a>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a13      	ldr	r2, [pc, #76]	; (80094a4 <TIM_OC5_SetConfig+0xc4>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d109      	bne.n	800946e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009460:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	021b      	lsls	r3, r3, #8
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	4313      	orrs	r3, r2
 800946c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	621a      	str	r2, [r3, #32]
}
 8009488:	bf00      	nop
 800948a:	371c      	adds	r7, #28
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	40012c00 	.word	0x40012c00
 8009498:	40013400 	.word	0x40013400
 800949c:	40014000 	.word	0x40014000
 80094a0:	40014400 	.word	0x40014400
 80094a4:	40014800 	.word	0x40014800

080094a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	021b      	lsls	r3, r3, #8
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	051b      	lsls	r3, r3, #20
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a18      	ldr	r2, [pc, #96]	; (8009560 <TIM_OC6_SetConfig+0xb8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d00f      	beq.n	8009524 <TIM_OC6_SetConfig+0x7c>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a17      	ldr	r2, [pc, #92]	; (8009564 <TIM_OC6_SetConfig+0xbc>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00b      	beq.n	8009524 <TIM_OC6_SetConfig+0x7c>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a16      	ldr	r2, [pc, #88]	; (8009568 <TIM_OC6_SetConfig+0xc0>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d007      	beq.n	8009524 <TIM_OC6_SetConfig+0x7c>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a15      	ldr	r2, [pc, #84]	; (800956c <TIM_OC6_SetConfig+0xc4>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <TIM_OC6_SetConfig+0x7c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a14      	ldr	r2, [pc, #80]	; (8009570 <TIM_OC6_SetConfig+0xc8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d109      	bne.n	8009538 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800952a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	029b      	lsls	r3, r3, #10
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	621a      	str	r2, [r3, #32]
}
 8009552:	bf00      	nop
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	40012c00 	.word	0x40012c00
 8009564:	40013400 	.word	0x40013400
 8009568:	40014000 	.word	0x40014000
 800956c:	40014400 	.word	0x40014400
 8009570:	40014800 	.word	0x40014800

08009574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	f023 0201 	bic.w	r2, r3, #1
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800959e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	011b      	lsls	r3, r3, #4
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f023 030a 	bic.w	r3, r3, #10
 80095b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	621a      	str	r2, [r3, #32]
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b087      	sub	sp, #28
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	60f8      	str	r0, [r7, #12]
 80095da:	60b9      	str	r1, [r7, #8]
 80095dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	f023 0210 	bic.w	r2, r3, #16
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	031b      	lsls	r3, r3, #12
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	4313      	orrs	r3, r2
 8009606:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800960e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	4313      	orrs	r3, r2
 8009618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	621a      	str	r2, [r3, #32]
}
 8009626:	bf00      	nop
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009632:	b480      	push	{r7}
 8009634:	b085      	sub	sp, #20
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4313      	orrs	r3, r2
 8009654:	f043 0307 	orr.w	r3, r3, #7
 8009658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	609a      	str	r2, [r3, #8]
}
 8009660:	bf00      	nop
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	021a      	lsls	r2, r3, #8
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	431a      	orrs	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4313      	orrs	r3, r2
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	4313      	orrs	r3, r2
 8009698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	609a      	str	r2, [r3, #8]
}
 80096a0:	bf00      	nop
 80096a2:	371c      	adds	r7, #28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f003 031f 	and.w	r3, r3, #31
 80096be:	2201      	movs	r2, #1
 80096c0:	fa02 f303 	lsl.w	r3, r2, r3
 80096c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a1a      	ldr	r2, [r3, #32]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	43db      	mvns	r3, r3
 80096ce:	401a      	ands	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a1a      	ldr	r2, [r3, #32]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f003 031f 	and.w	r3, r3, #31
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	fa01 f303 	lsl.w	r3, r1, r3
 80096e4:	431a      	orrs	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009708:	2b01      	cmp	r3, #1
 800970a:	d101      	bne.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800970c:	2302      	movs	r3, #2
 800970e:	e068      	b.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2202      	movs	r2, #2
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a2e      	ldr	r2, [pc, #184]	; (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d004      	beq.n	8009744 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a2d      	ldr	r2, [pc, #180]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d108      	bne.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800974a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	4313      	orrs	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d01d      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009782:	d018      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a1b      	ldr	r2, [pc, #108]	; (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d013      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a1a      	ldr	r2, [pc, #104]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00e      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a18      	ldr	r2, [pc, #96]	; (8009800 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d009      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a13      	ldr	r2, [pc, #76]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d004      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a14      	ldr	r2, [pc, #80]	; (8009804 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d10c      	bne.n	80097d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40012c00 	.word	0x40012c00
 80097f4:	40013400 	.word	0x40013400
 80097f8:	40000400 	.word	0x40000400
 80097fc:	40000800 	.word	0x40000800
 8009800:	40000c00 	.word	0x40000c00
 8009804:	40014000 	.word	0x40014000

08009808 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009820:	2302      	movs	r3, #2
 8009822:	e087      	b.n	8009934 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	4313      	orrs	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4313      	orrs	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	041b      	lsls	r3, r3, #16
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a27      	ldr	r2, [pc, #156]	; (8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d004      	beq.n	80098b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a25      	ldr	r2, [pc, #148]	; (8009944 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d106      	bne.n	80098c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a1e      	ldr	r2, [pc, #120]	; (8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d004      	beq.n	80098d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a1d      	ldr	r2, [pc, #116]	; (8009944 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d126      	bne.n	8009922 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098de:	051b      	lsls	r3, r3, #20
 80098e0:	4313      	orrs	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a0e      	ldr	r2, [pc, #56]	; (8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a0d      	ldr	r2, [pc, #52]	; (8009944 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d106      	bne.n	8009922 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	40012c00 	.word	0x40012c00
 8009944:	40013400 	.word	0x40013400

08009948 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e04a      	b.n	80099f0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009960:	2b00      	cmp	r3, #0
 8009962:	d106      	bne.n	8009972 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7f9 f9ed 	bl	8002d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2224      	movs	r2, #36	; 0x24
 8009976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0201 	bic.w	r2, r2, #1
 8009988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f834 	bl	80099f8 <UART_SetConfig>
 8009990:	4603      	mov	r3, r0
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e02a      	b.n	80099f0 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fb28 	bl	8009ff8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689a      	ldr	r2, [r3, #8]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80099c6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689a      	ldr	r2, [r3, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0208 	orr.w	r2, r2, #8
 80099d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f042 0201 	orr.w	r2, r2, #1
 80099e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fba7 	bl	800a13c <UART_CheckIdleState>
 80099ee:	4603      	mov	r3, r0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099fc:	b08c      	sub	sp, #48	; 0x30
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	431a      	orrs	r2, r3
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	431a      	orrs	r2, r3
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	4baa      	ldr	r3, [pc, #680]	; (8009cd0 <UART_SetConfig+0x2d8>)
 8009a28:	4013      	ands	r3, r2
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	6812      	ldr	r2, [r2, #0]
 8009a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a30:	430b      	orrs	r3, r1
 8009a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a9f      	ldr	r2, [pc, #636]	; (8009cd4 <UART_SetConfig+0x2dc>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a60:	4313      	orrs	r3, r2
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009a6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	f023 010f 	bic.w	r1, r3, #15
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a90      	ldr	r2, [pc, #576]	; (8009cd8 <UART_SetConfig+0x2e0>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d125      	bne.n	8009ae8 <UART_SetConfig+0xf0>
 8009a9c:	4b8f      	ldr	r3, [pc, #572]	; (8009cdc <UART_SetConfig+0x2e4>)
 8009a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d81a      	bhi.n	8009ae0 <UART_SetConfig+0xe8>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <UART_SetConfig+0xb8>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009ac1 	.word	0x08009ac1
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009ad9 	.word	0x08009ad9
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ac6:	e116      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ace:	e112      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ad6:	e10e      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009ad8:	2308      	movs	r3, #8
 8009ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ade:	e10a      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ae6:	e106      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a7c      	ldr	r2, [pc, #496]	; (8009ce0 <UART_SetConfig+0x2e8>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d138      	bne.n	8009b64 <UART_SetConfig+0x16c>
 8009af2:	4b7a      	ldr	r3, [pc, #488]	; (8009cdc <UART_SetConfig+0x2e4>)
 8009af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af8:	f003 030c 	and.w	r3, r3, #12
 8009afc:	2b0c      	cmp	r3, #12
 8009afe:	d82d      	bhi.n	8009b5c <UART_SetConfig+0x164>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <UART_SetConfig+0x110>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b3d 	.word	0x08009b3d
 8009b0c:	08009b5d 	.word	0x08009b5d
 8009b10:	08009b5d 	.word	0x08009b5d
 8009b14:	08009b5d 	.word	0x08009b5d
 8009b18:	08009b4d 	.word	0x08009b4d
 8009b1c:	08009b5d 	.word	0x08009b5d
 8009b20:	08009b5d 	.word	0x08009b5d
 8009b24:	08009b5d 	.word	0x08009b5d
 8009b28:	08009b45 	.word	0x08009b45
 8009b2c:	08009b5d 	.word	0x08009b5d
 8009b30:	08009b5d 	.word	0x08009b5d
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b55 	.word	0x08009b55
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b42:	e0d8      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009b44:	2302      	movs	r3, #2
 8009b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b4a:	e0d4      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b52:	e0d0      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009b54:	2308      	movs	r3, #8
 8009b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b5a:	e0cc      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009b5c:	2310      	movs	r3, #16
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b62:	e0c8      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a5e      	ldr	r2, [pc, #376]	; (8009ce4 <UART_SetConfig+0x2ec>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d125      	bne.n	8009bba <UART_SetConfig+0x1c2>
 8009b6e:	4b5b      	ldr	r3, [pc, #364]	; (8009cdc <UART_SetConfig+0x2e4>)
 8009b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b78:	2b30      	cmp	r3, #48	; 0x30
 8009b7a:	d016      	beq.n	8009baa <UART_SetConfig+0x1b2>
 8009b7c:	2b30      	cmp	r3, #48	; 0x30
 8009b7e:	d818      	bhi.n	8009bb2 <UART_SetConfig+0x1ba>
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	d00a      	beq.n	8009b9a <UART_SetConfig+0x1a2>
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d814      	bhi.n	8009bb2 <UART_SetConfig+0x1ba>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <UART_SetConfig+0x19a>
 8009b8c:	2b10      	cmp	r3, #16
 8009b8e:	d008      	beq.n	8009ba2 <UART_SetConfig+0x1aa>
 8009b90:	e00f      	b.n	8009bb2 <UART_SetConfig+0x1ba>
 8009b92:	2300      	movs	r3, #0
 8009b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b98:	e0ad      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ba0:	e0a9      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009ba2:	2304      	movs	r3, #4
 8009ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ba8:	e0a5      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009baa:	2308      	movs	r3, #8
 8009bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bb0:	e0a1      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009bb2:	2310      	movs	r3, #16
 8009bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bb8:	e09d      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a4a      	ldr	r2, [pc, #296]	; (8009ce8 <UART_SetConfig+0x2f0>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d125      	bne.n	8009c10 <UART_SetConfig+0x218>
 8009bc4:	4b45      	ldr	r3, [pc, #276]	; (8009cdc <UART_SetConfig+0x2e4>)
 8009bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009bce:	2bc0      	cmp	r3, #192	; 0xc0
 8009bd0:	d016      	beq.n	8009c00 <UART_SetConfig+0x208>
 8009bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8009bd4:	d818      	bhi.n	8009c08 <UART_SetConfig+0x210>
 8009bd6:	2b80      	cmp	r3, #128	; 0x80
 8009bd8:	d00a      	beq.n	8009bf0 <UART_SetConfig+0x1f8>
 8009bda:	2b80      	cmp	r3, #128	; 0x80
 8009bdc:	d814      	bhi.n	8009c08 <UART_SetConfig+0x210>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <UART_SetConfig+0x1f0>
 8009be2:	2b40      	cmp	r3, #64	; 0x40
 8009be4:	d008      	beq.n	8009bf8 <UART_SetConfig+0x200>
 8009be6:	e00f      	b.n	8009c08 <UART_SetConfig+0x210>
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bee:	e082      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf6:	e07e      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009bf8:	2304      	movs	r3, #4
 8009bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bfe:	e07a      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c00:	2308      	movs	r3, #8
 8009c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c06:	e076      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c0e:	e072      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a35      	ldr	r2, [pc, #212]	; (8009cec <UART_SetConfig+0x2f4>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d12a      	bne.n	8009c70 <UART_SetConfig+0x278>
 8009c1a:	4b30      	ldr	r3, [pc, #192]	; (8009cdc <UART_SetConfig+0x2e4>)
 8009c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c28:	d01a      	beq.n	8009c60 <UART_SetConfig+0x268>
 8009c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c2e:	d81b      	bhi.n	8009c68 <UART_SetConfig+0x270>
 8009c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c34:	d00c      	beq.n	8009c50 <UART_SetConfig+0x258>
 8009c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c3a:	d815      	bhi.n	8009c68 <UART_SetConfig+0x270>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <UART_SetConfig+0x250>
 8009c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c44:	d008      	beq.n	8009c58 <UART_SetConfig+0x260>
 8009c46:	e00f      	b.n	8009c68 <UART_SetConfig+0x270>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c4e:	e052      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c50:	2302      	movs	r3, #2
 8009c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c56:	e04e      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c58:	2304      	movs	r3, #4
 8009c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c5e:	e04a      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c60:	2308      	movs	r3, #8
 8009c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c66:	e046      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c68:	2310      	movs	r3, #16
 8009c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c6e:	e042      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a17      	ldr	r2, [pc, #92]	; (8009cd4 <UART_SetConfig+0x2dc>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d13a      	bne.n	8009cf0 <UART_SetConfig+0x2f8>
 8009c7a:	4b18      	ldr	r3, [pc, #96]	; (8009cdc <UART_SetConfig+0x2e4>)
 8009c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c88:	d01a      	beq.n	8009cc0 <UART_SetConfig+0x2c8>
 8009c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c8e:	d81b      	bhi.n	8009cc8 <UART_SetConfig+0x2d0>
 8009c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c94:	d00c      	beq.n	8009cb0 <UART_SetConfig+0x2b8>
 8009c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c9a:	d815      	bhi.n	8009cc8 <UART_SetConfig+0x2d0>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <UART_SetConfig+0x2b0>
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca4:	d008      	beq.n	8009cb8 <UART_SetConfig+0x2c0>
 8009ca6:	e00f      	b.n	8009cc8 <UART_SetConfig+0x2d0>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cae:	e022      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cb6:	e01e      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cbe:	e01a      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cc6:	e016      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cce:	e012      	b.n	8009cf6 <UART_SetConfig+0x2fe>
 8009cd0:	cfff69f3 	.word	0xcfff69f3
 8009cd4:	40008000 	.word	0x40008000
 8009cd8:	40013800 	.word	0x40013800
 8009cdc:	40021000 	.word	0x40021000
 8009ce0:	40004400 	.word	0x40004400
 8009ce4:	40004800 	.word	0x40004800
 8009ce8:	40004c00 	.word	0x40004c00
 8009cec:	40005000 	.word	0x40005000
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4ab0      	ldr	r2, [pc, #704]	; (8009fbc <UART_SetConfig+0x5c4>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	f040 809b 	bne.w	8009e38 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d06:	2b08      	cmp	r3, #8
 8009d08:	d827      	bhi.n	8009d5a <UART_SetConfig+0x362>
 8009d0a:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x318>)
 8009d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d10:	08009d35 	.word	0x08009d35
 8009d14:	08009d3d 	.word	0x08009d3d
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	08009d5b 	.word	0x08009d5b
 8009d20:	08009d4b 	.word	0x08009d4b
 8009d24:	08009d5b 	.word	0x08009d5b
 8009d28:	08009d5b 	.word	0x08009d5b
 8009d2c:	08009d5b 	.word	0x08009d5b
 8009d30:	08009d53 	.word	0x08009d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d34:	f7fd fefe 	bl	8007b34 <HAL_RCC_GetPCLK1Freq>
 8009d38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d3a:	e014      	b.n	8009d66 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d3c:	f7fd ff0e 	bl	8007b5c <HAL_RCC_GetPCLK2Freq>
 8009d40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d42:	e010      	b.n	8009d66 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d44:	4b9e      	ldr	r3, [pc, #632]	; (8009fc0 <UART_SetConfig+0x5c8>)
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d48:	e00d      	b.n	8009d66 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d4a:	f7fd fe43 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8009d4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d50:	e009      	b.n	8009d66 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d58:	e005      	b.n	8009d66 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 8130 	beq.w	8009fce <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	4a94      	ldr	r2, [pc, #592]	; (8009fc4 <UART_SetConfig+0x5cc>)
 8009d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	4413      	add	r3, r2
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d305      	bcc.n	8009d9e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d903      	bls.n	8009da6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009da4:	e113      	b.n	8009fce <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	2200      	movs	r2, #0
 8009daa:	60bb      	str	r3, [r7, #8]
 8009dac:	60fa      	str	r2, [r7, #12]
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	4a84      	ldr	r2, [pc, #528]	; (8009fc4 <UART_SetConfig+0x5cc>)
 8009db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2200      	movs	r2, #0
 8009dbc:	603b      	str	r3, [r7, #0]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009dc8:	f7f6 ff42 	bl	8000c50 <__aeabi_uldivmod>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	f04f 0200 	mov.w	r2, #0
 8009dd8:	f04f 0300 	mov.w	r3, #0
 8009ddc:	020b      	lsls	r3, r1, #8
 8009dde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009de2:	0202      	lsls	r2, r0, #8
 8009de4:	6979      	ldr	r1, [r7, #20]
 8009de6:	6849      	ldr	r1, [r1, #4]
 8009de8:	0849      	lsrs	r1, r1, #1
 8009dea:	2000      	movs	r0, #0
 8009dec:	460c      	mov	r4, r1
 8009dee:	4605      	mov	r5, r0
 8009df0:	eb12 0804 	adds.w	r8, r2, r4
 8009df4:	eb43 0905 	adc.w	r9, r3, r5
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	469a      	mov	sl, r3
 8009e00:	4693      	mov	fp, r2
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 ff21 	bl	8000c50 <__aeabi_uldivmod>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	4613      	mov	r3, r2
 8009e14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e1c:	d308      	bcc.n	8009e30 <UART_SetConfig+0x438>
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e24:	d204      	bcs.n	8009e30 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6a3a      	ldr	r2, [r7, #32]
 8009e2c:	60da      	str	r2, [r3, #12]
 8009e2e:	e0ce      	b.n	8009fce <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e36:	e0ca      	b.n	8009fce <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e40:	d166      	bne.n	8009f10 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8009e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d827      	bhi.n	8009e9a <UART_SetConfig+0x4a2>
 8009e4a:	a201      	add	r2, pc, #4	; (adr r2, 8009e50 <UART_SetConfig+0x458>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009e75 	.word	0x08009e75
 8009e54:	08009e7d 	.word	0x08009e7d
 8009e58:	08009e85 	.word	0x08009e85
 8009e5c:	08009e9b 	.word	0x08009e9b
 8009e60:	08009e8b 	.word	0x08009e8b
 8009e64:	08009e9b 	.word	0x08009e9b
 8009e68:	08009e9b 	.word	0x08009e9b
 8009e6c:	08009e9b 	.word	0x08009e9b
 8009e70:	08009e93 	.word	0x08009e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e74:	f7fd fe5e 	bl	8007b34 <HAL_RCC_GetPCLK1Freq>
 8009e78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e7a:	e014      	b.n	8009ea6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e7c:	f7fd fe6e 	bl	8007b5c <HAL_RCC_GetPCLK2Freq>
 8009e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e82:	e010      	b.n	8009ea6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e84:	4b4e      	ldr	r3, [pc, #312]	; (8009fc0 <UART_SetConfig+0x5c8>)
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e88:	e00d      	b.n	8009ea6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e8a:	f7fd fda3 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8009e8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e90:	e009      	b.n	8009ea6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e98:	e005      	b.n	8009ea6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8090 	beq.w	8009fce <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	4a44      	ldr	r2, [pc, #272]	; (8009fc4 <UART_SetConfig+0x5cc>)
 8009eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ec0:	005a      	lsls	r2, r3, #1
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	441a      	add	r2, r3
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	2b0f      	cmp	r3, #15
 8009ed8:	d916      	bls.n	8009f08 <UART_SetConfig+0x510>
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee0:	d212      	bcs.n	8009f08 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	f023 030f 	bic.w	r3, r3, #15
 8009eea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	085b      	lsrs	r3, r3, #1
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	8bfb      	ldrh	r3, [r7, #30]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	8bfa      	ldrh	r2, [r7, #30]
 8009f04:	60da      	str	r2, [r3, #12]
 8009f06:	e062      	b.n	8009fce <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009f0e:	e05e      	b.n	8009fce <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d828      	bhi.n	8009f6a <UART_SetConfig+0x572>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <UART_SetConfig+0x528>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f4d 	.word	0x08009f4d
 8009f28:	08009f55 	.word	0x08009f55
 8009f2c:	08009f6b 	.word	0x08009f6b
 8009f30:	08009f5b 	.word	0x08009f5b
 8009f34:	08009f6b 	.word	0x08009f6b
 8009f38:	08009f6b 	.word	0x08009f6b
 8009f3c:	08009f6b 	.word	0x08009f6b
 8009f40:	08009f63 	.word	0x08009f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f44:	f7fd fdf6 	bl	8007b34 <HAL_RCC_GetPCLK1Freq>
 8009f48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f4a:	e014      	b.n	8009f76 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f4c:	f7fd fe06 	bl	8007b5c <HAL_RCC_GetPCLK2Freq>
 8009f50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f52:	e010      	b.n	8009f76 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f54:	4b1a      	ldr	r3, [pc, #104]	; (8009fc0 <UART_SetConfig+0x5c8>)
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f58:	e00d      	b.n	8009f76 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f5a:	f7fd fd3b 	bl	80079d4 <HAL_RCC_GetSysClockFreq>
 8009f5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f60:	e009      	b.n	8009f76 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f68:	e005      	b.n	8009f76 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f74:	bf00      	nop
    }

    if (pclk != 0U)
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d028      	beq.n	8009fce <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	4a10      	ldr	r2, [pc, #64]	; (8009fc4 <UART_SetConfig+0x5cc>)
 8009f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f86:	461a      	mov	r2, r3
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	441a      	add	r2, r3
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	2b0f      	cmp	r3, #15
 8009fa4:	d910      	bls.n	8009fc8 <UART_SetConfig+0x5d0>
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fac:	d20c      	bcs.n	8009fc8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60da      	str	r2, [r3, #12]
 8009fb8:	e009      	b.n	8009fce <UART_SetConfig+0x5d6>
 8009fba:	bf00      	nop
 8009fbc:	40008000 	.word	0x40008000
 8009fc0:	00f42400 	.word	0x00f42400
 8009fc4:	080152d4 	.word	0x080152d4
      }
      else
      {
        ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009fea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3730      	adds	r7, #48	; 0x30
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	f003 0302 	and.w	r3, r3, #2
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00a      	beq.n	800a044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	f003 0308 	and.w	r3, r3, #8
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	f003 0310 	and.w	r3, r3, #16
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01a      	beq.n	800a10e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f6:	d10a      	bne.n	800a10e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	605a      	str	r2, [r3, #4]
  }
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b098      	sub	sp, #96	; 0x60
 800a140:	af02      	add	r7, sp, #8
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a14c:	f7f9 f8b2 	bl	80032b4 <HAL_GetTick>
 800a150:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0308 	and.w	r3, r3, #8
 800a15c:	2b08      	cmp	r3, #8
 800a15e:	d12f      	bne.n	800a1c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a168:	2200      	movs	r2, #0
 800a16a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f88e 	bl	800a290 <UART_WaitOnFlagUntilTimeout>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d022      	beq.n	800a1c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a18e:	653b      	str	r3, [r7, #80]	; 0x50
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a198:	647b      	str	r3, [r7, #68]	; 0x44
 800a19a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a19e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e6      	bne.n	800a17a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e063      	b.n	800a288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d149      	bne.n	800a262 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f857 	bl	800a290 <UART_WaitOnFlagUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d03c      	beq.n	800a262 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a206:	633b      	str	r3, [r7, #48]	; 0x30
 800a208:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e6      	bne.n	800a1e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3308      	adds	r3, #8
 800a220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	60fb      	str	r3, [r7, #12]
   return(result);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f023 0301 	bic.w	r3, r3, #1
 800a230:	64bb      	str	r3, [r7, #72]	; 0x48
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3308      	adds	r3, #8
 800a238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a23a:	61fa      	str	r2, [r7, #28]
 800a23c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	69b9      	ldr	r1, [r7, #24]
 800a240:	69fa      	ldr	r2, [r7, #28]
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	617b      	str	r3, [r7, #20]
   return(result);
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e5      	bne.n	800a21a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2220      	movs	r2, #32
 800a252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e012      	b.n	800a288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3758      	adds	r7, #88	; 0x58
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a0:	e049      	b.n	800a336 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a8:	d045      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2aa:	f7f9 f803 	bl	80032b4 <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d302      	bcc.n	800a2c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e048      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0304 	and.w	r3, r3, #4
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d031      	beq.n	800a336 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	f003 0308 	and.w	r3, r3, #8
 800a2dc:	2b08      	cmp	r3, #8
 800a2de:	d110      	bne.n	800a302 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2208      	movs	r2, #8
 800a2e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f838 	bl	800a35e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e029      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a30c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a310:	d111      	bne.n	800a336 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a31a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f81e 	bl	800a35e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e00f      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4013      	ands	r3, r2
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	429a      	cmp	r2, r3
 800a344:	bf0c      	ite	eq
 800a346:	2301      	moveq	r3, #1
 800a348:	2300      	movne	r3, #0
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	461a      	mov	r2, r3
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	429a      	cmp	r2, r3
 800a352:	d0a6      	beq.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a35e:	b480      	push	{r7}
 800a360:	b095      	sub	sp, #84	; 0x54
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a37a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a384:	643b      	str	r3, [r7, #64]	; 0x40
 800a386:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a38a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e6      	bne.n	800a366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3ae:	f023 0301 	bic.w	r3, r3, #1
 800a3b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e3      	bne.n	800a398 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d118      	bne.n	800a40a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f023 0310 	bic.w	r3, r3, #16
 800a3ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f6:	61bb      	str	r3, [r7, #24]
 800a3f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6979      	ldr	r1, [r7, #20]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	613b      	str	r3, [r7, #16]
   return(result);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e6      	bne.n	800a3d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a41e:	bf00      	nop
 800a420:	3754      	adds	r7, #84	; 0x54
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b085      	sub	sp, #20
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d101      	bne.n	800a440 <HAL_UARTEx_DisableFifoMode+0x16>
 800a43c:	2302      	movs	r3, #2
 800a43e:	e027      	b.n	800a490 <HAL_UARTEx_DisableFifoMode+0x66>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2224      	movs	r2, #36	; 0x24
 800a44c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0201 	bic.w	r2, r2, #1
 800a466:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a46e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e02d      	b.n	800a510 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2224      	movs	r2, #36	; 0x24
 800a4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0201 	bic.w	r2, r2, #1
 800a4da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f84f 	bl	800a594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2220      	movs	r2, #32
 800a502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d101      	bne.n	800a530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a52c:	2302      	movs	r3, #2
 800a52e:	e02d      	b.n	800a58c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2224      	movs	r2, #36	; 0x24
 800a53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0201 	bic.w	r2, r2, #1
 800a556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f811 	bl	800a594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2220      	movs	r2, #32
 800a57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d108      	bne.n	800a5b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5b4:	e031      	b.n	800a61a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5b6:	2308      	movs	r3, #8
 800a5b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5ba:	2308      	movs	r3, #8
 800a5bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	0e5b      	lsrs	r3, r3, #25
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	0f5b      	lsrs	r3, r3, #29
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	7b3a      	ldrb	r2, [r7, #12]
 800a5e2:	4911      	ldr	r1, [pc, #68]	; (800a628 <UARTEx_SetNbDataToProcess+0x94>)
 800a5e4:	5c8a      	ldrb	r2, [r1, r2]
 800a5e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5ea:	7b3a      	ldrb	r2, [r7, #12]
 800a5ec:	490f      	ldr	r1, [pc, #60]	; (800a62c <UARTEx_SetNbDataToProcess+0x98>)
 800a5ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	7b7a      	ldrb	r2, [r7, #13]
 800a600:	4909      	ldr	r1, [pc, #36]	; (800a628 <UARTEx_SetNbDataToProcess+0x94>)
 800a602:	5c8a      	ldrb	r2, [r1, r2]
 800a604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a608:	7b7a      	ldrb	r2, [r7, #13]
 800a60a:	4908      	ldr	r1, [pc, #32]	; (800a62c <UARTEx_SetNbDataToProcess+0x98>)
 800a60c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a60e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a61a:	bf00      	nop
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	080152ec 	.word	0x080152ec
 800a62c:	080152f4 	.word	0x080152f4

0800a630 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a640:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a644:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a666:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a66a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a672:	b29a      	uxth	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	b29b      	uxth	r3, r3
 800a678:	43db      	mvns	r3, r3
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4013      	ands	r3, r2
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a694:	b084      	sub	sp, #16
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	f107 0014 	add.w	r0, r7, #20
 800a6a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	b004      	add	sp, #16
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b09d      	sub	sp, #116	; 0x74
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a6fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6fe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	78db      	ldrb	r3, [r3, #3]
 800a706:	2b03      	cmp	r3, #3
 800a708:	d81f      	bhi.n	800a74a <USB_ActivateEndpoint+0x72>
 800a70a:	a201      	add	r2, pc, #4	; (adr r2, 800a710 <USB_ActivateEndpoint+0x38>)
 800a70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a710:	0800a721 	.word	0x0800a721
 800a714:	0800a73d 	.word	0x0800a73d
 800a718:	0800a753 	.word	0x0800a753
 800a71c:	0800a72f 	.word	0x0800a72f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a720:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a728:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a72c:	e012      	b.n	800a754 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a72e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a732:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a736:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a73a:	e00b      	b.n	800a754 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a73c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a744:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a748:	e004      	b.n	800a754 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a750:	e000      	b.n	800a754 <USB_ActivateEndpoint+0x7c>
      break;
 800a752:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	441a      	add	r2, r3
 800a75e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a76a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a772:	b29b      	uxth	r3, r3
 800a774:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	b29b      	uxth	r3, r3
 800a784:	b21b      	sxth	r3, r3
 800a786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78e:	b21a      	sxth	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	b21b      	sxth	r3, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	b21b      	sxth	r3, r3
 800a79a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	441a      	add	r2, r3
 800a7a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a7ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	7b1b      	ldrb	r3, [r3, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f040 8178 	bne.w	800aaba <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	785b      	ldrb	r3, [r3, #1]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 8084 	beq.w	800a8dc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	61bb      	str	r3, [r7, #24]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	61bb      	str	r3, [r7, #24]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	00da      	lsls	r2, r3, #3
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	88db      	ldrh	r3, [r3, #6]
 800a7fc:	085b      	lsrs	r3, r3, #1
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	b29a      	uxth	r2, r3
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	827b      	strh	r3, [r7, #18]
 800a816:	8a7b      	ldrh	r3, [r7, #18]
 800a818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01b      	beq.n	800a858 <USB_ActivateEndpoint+0x180>
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a836:	823b      	strh	r3, [r7, #16]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	441a      	add	r2, r3
 800a842:	8a3b      	ldrh	r3, [r7, #16]
 800a844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a84c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a854:	b29b      	uxth	r3, r3
 800a856:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	78db      	ldrb	r3, [r3, #3]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d020      	beq.n	800a8a2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a876:	81bb      	strh	r3, [r7, #12]
 800a878:	89bb      	ldrh	r3, [r7, #12]
 800a87a:	f083 0320 	eor.w	r3, r3, #32
 800a87e:	81bb      	strh	r3, [r7, #12]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	441a      	add	r2, r3
 800a88a:	89bb      	ldrh	r3, [r7, #12]
 800a88c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	8013      	strh	r3, [r2, #0]
 800a8a0:	e2d5      	b.n	800ae4e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b8:	81fb      	strh	r3, [r7, #14]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	441a      	add	r2, r3
 800a8c4:	89fb      	ldrh	r3, [r7, #14]
 800a8c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	8013      	strh	r3, [r2, #0]
 800a8da:	e2b8      	b.n	800ae4e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	633b      	str	r3, [r7, #48]	; 0x30
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	4413      	add	r3, r2
 800a8ee:	633b      	str	r3, [r7, #48]	; 0x30
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	00da      	lsls	r2, r3, #3
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	88db      	ldrh	r3, [r3, #6]
 800a904:	085b      	lsrs	r3, r3, #1
 800a906:	b29b      	uxth	r3, r3
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	62bb      	str	r3, [r7, #40]	; 0x28
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	461a      	mov	r2, r3
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	4413      	add	r3, r2
 800a922:	62bb      	str	r3, [r7, #40]	; 0x28
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	00da      	lsls	r2, r3, #3
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	4413      	add	r3, r2
 800a92e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a932:	627b      	str	r3, [r7, #36]	; 0x24
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	b29b      	uxth	r3, r3
 800a93a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a93e:	b29a      	uxth	r2, r3
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	801a      	strh	r2, [r3, #0]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b3e      	cmp	r3, #62	; 0x3e
 800a94a:	d91d      	bls.n	800a988 <USB_ActivateEndpoint+0x2b0>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	095b      	lsrs	r3, r3, #5
 800a952:	66bb      	str	r3, [r7, #104]	; 0x68
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	f003 031f 	and.w	r3, r3, #31
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d102      	bne.n	800a966 <USB_ActivateEndpoint+0x28e>
 800a960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a962:	3b01      	subs	r3, #1
 800a964:	66bb      	str	r3, [r7, #104]	; 0x68
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	881b      	ldrh	r3, [r3, #0]
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a96e:	b29b      	uxth	r3, r3
 800a970:	029b      	lsls	r3, r3, #10
 800a972:	b29b      	uxth	r3, r3
 800a974:	4313      	orrs	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a97c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a980:	b29a      	uxth	r2, r3
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	801a      	strh	r2, [r3, #0]
 800a986:	e026      	b.n	800a9d6 <USB_ActivateEndpoint+0x2fe>
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10a      	bne.n	800a9a6 <USB_ActivateEndpoint+0x2ce>
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	b29b      	uxth	r3, r3
 800a996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a99a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	801a      	strh	r2, [r3, #0]
 800a9a4:	e017      	b.n	800a9d6 <USB_ActivateEndpoint+0x2fe>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <USB_ActivateEndpoint+0x2e8>
 800a9ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9bc:	3301      	adds	r3, #1
 800a9be:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	029b      	lsls	r3, r3, #10
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a9e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d01b      	beq.n	800aa26 <USB_ActivateEndpoint+0x34e>
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa04:	843b      	strh	r3, [r7, #32]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	441a      	add	r2, r3
 800aa10:	8c3b      	ldrh	r3, [r7, #32]
 800aa12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d124      	bne.n	800aa78 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa44:	83bb      	strh	r3, [r7, #28]
 800aa46:	8bbb      	ldrh	r3, [r7, #28]
 800aa48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa4c:	83bb      	strh	r3, [r7, #28]
 800aa4e:	8bbb      	ldrh	r3, [r7, #28]
 800aa50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa54:	83bb      	strh	r3, [r7, #28]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	441a      	add	r2, r3
 800aa60:	8bbb      	ldrh	r3, [r7, #28]
 800aa62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	8013      	strh	r3, [r2, #0]
 800aa76:	e1ea      	b.n	800ae4e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8e:	83fb      	strh	r3, [r7, #30]
 800aa90:	8bfb      	ldrh	r3, [r7, #30]
 800aa92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa96:	83fb      	strh	r3, [r7, #30]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	441a      	add	r2, r3
 800aaa2:	8bfb      	ldrh	r3, [r7, #30]
 800aaa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	8013      	strh	r3, [r2, #0]
 800aab8:	e1c9      	b.n	800ae4e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	78db      	ldrb	r3, [r3, #3]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d11e      	bne.n	800ab00 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	441a      	add	r2, r3
 800aae6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aaea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	8013      	strh	r3, [r2, #0]
 800aafe:	e01d      	b.n	800ab3c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ab12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	441a      	add	r2, r3
 800ab24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ab28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab4c:	4413      	add	r3, r2
 800ab4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	00da      	lsls	r2, r3, #3
 800ab56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	891b      	ldrh	r3, [r3, #8]
 800ab64:	085b      	lsrs	r3, r3, #1
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab6e:	801a      	strh	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	657b      	str	r3, [r7, #84]	; 0x54
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab80:	4413      	add	r3, r2
 800ab82:	657b      	str	r3, [r7, #84]	; 0x54
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	00da      	lsls	r2, r3, #3
 800ab8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab92:	653b      	str	r3, [r7, #80]	; 0x50
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	895b      	ldrh	r3, [r3, #10]
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	785b      	ldrb	r3, [r3, #1]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f040 8093 	bne.w	800acd4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800abbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d01b      	beq.n	800ac02 <USB_ActivateEndpoint+0x52a>
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abe0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	441a      	add	r2, r3
 800abec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800abee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ac10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d01b      	beq.n	800ac52 <USB_ActivateEndpoint+0x57a>
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac30:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	441a      	add	r2, r3
 800ac3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ac3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac68:	873b      	strh	r3, [r7, #56]	; 0x38
 800ac6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac70:	873b      	strh	r3, [r7, #56]	; 0x38
 800ac72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac78:	873b      	strh	r3, [r7, #56]	; 0x38
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	441a      	add	r2, r3
 800ac84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	441a      	add	r2, r3
 800acbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acce:	b29b      	uxth	r3, r3
 800acd0:	8013      	strh	r3, [r2, #0]
 800acd2:	e0bc      	b.n	800ae4e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ace4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ace8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01d      	beq.n	800ad2c <USB_ActivateEndpoint+0x654>
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	441a      	add	r2, r3
 800ad14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ad18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ad3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ad40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d01d      	beq.n	800ad84 <USB_ActivateEndpoint+0x6ac>
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	441a      	add	r2, r3
 800ad6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ad70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	78db      	ldrb	r3, [r3, #3]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d024      	beq.n	800add6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ada2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ada6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800adaa:	f083 0320 	eor.w	r3, r3, #32
 800adae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	441a      	add	r2, r3
 800adbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800adc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add0:	b29b      	uxth	r3, r3
 800add2:	8013      	strh	r3, [r2, #0]
 800add4:	e01d      	b.n	800ae12 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	441a      	add	r2, r3
 800adfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800adfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	441a      	add	r2, r3
 800ae36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ae4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3774      	adds	r7, #116	; 0x74
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop

0800ae60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b08d      	sub	sp, #52	; 0x34
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	7b1b      	ldrb	r3, [r3, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f040 808e 	bne.w	800af90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d044      	beq.n	800af06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	81bb      	strh	r3, [r7, #12]
 800ae8a:	89bb      	ldrh	r3, [r7, #12]
 800ae8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01b      	beq.n	800aecc <USB_DeactivateEndpoint+0x6c>
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeaa:	817b      	strh	r3, [r7, #10]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	441a      	add	r2, r3
 800aeb6:	897b      	ldrh	r3, [r7, #10]
 800aeb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee2:	813b      	strh	r3, [r7, #8]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	441a      	add	r2, r3
 800aeee:	893b      	ldrh	r3, [r7, #8]
 800aef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af00:	b29b      	uxth	r3, r3
 800af02:	8013      	strh	r3, [r2, #0]
 800af04:	e192      	b.n	800b22c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	827b      	strh	r3, [r7, #18]
 800af14:	8a7b      	ldrh	r3, [r7, #18]
 800af16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d01b      	beq.n	800af56 <USB_DeactivateEndpoint+0xf6>
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af34:	823b      	strh	r3, [r7, #16]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	441a      	add	r2, r3
 800af40:	8a3b      	ldrh	r3, [r7, #16]
 800af42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af52:	b29b      	uxth	r3, r3
 800af54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	b29b      	uxth	r3, r3
 800af64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af6c:	81fb      	strh	r3, [r7, #14]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	441a      	add	r2, r3
 800af78:	89fb      	ldrh	r3, [r7, #14]
 800af7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	8013      	strh	r3, [r2, #0]
 800af8e:	e14d      	b.n	800b22c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b00      	cmp	r3, #0
 800af96:	f040 80a5 	bne.w	800b0e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	843b      	strh	r3, [r7, #32]
 800afa8:	8c3b      	ldrh	r3, [r7, #32]
 800afaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d01b      	beq.n	800afea <USB_DeactivateEndpoint+0x18a>
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc8:	83fb      	strh	r3, [r7, #30]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	441a      	add	r2, r3
 800afd4:	8bfb      	ldrh	r3, [r7, #30]
 800afd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	83bb      	strh	r3, [r7, #28]
 800aff8:	8bbb      	ldrh	r3, [r7, #28]
 800affa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800affe:	2b00      	cmp	r3, #0
 800b000:	d01b      	beq.n	800b03a <USB_DeactivateEndpoint+0x1da>
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b018:	837b      	strh	r3, [r7, #26]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	441a      	add	r2, r3
 800b024:	8b7b      	ldrh	r3, [r7, #26]
 800b026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b02e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b036:	b29b      	uxth	r3, r3
 800b038:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	b29b      	uxth	r3, r3
 800b048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b050:	833b      	strh	r3, [r7, #24]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	441a      	add	r2, r3
 800b05c:	8b3b      	ldrh	r3, [r7, #24]
 800b05e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b06a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b06e:	b29b      	uxth	r3, r3
 800b070:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b088:	82fb      	strh	r3, [r7, #22]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	441a      	add	r2, r3
 800b094:	8afb      	ldrh	r3, [r7, #22]
 800b096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b09a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b09e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0c0:	82bb      	strh	r3, [r7, #20]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	441a      	add	r2, r3
 800b0cc:	8abb      	ldrh	r3, [r7, #20]
 800b0ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	8013      	strh	r3, [r2, #0]
 800b0e2:	e0a3      	b.n	800b22c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	881b      	ldrh	r3, [r3, #0]
 800b0f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b0f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d01b      	beq.n	800b134 <USB_DeactivateEndpoint+0x2d4>
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b112:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	441a      	add	r2, r3
 800b11e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b130:	b29b      	uxth	r3, r3
 800b132:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b142:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01b      	beq.n	800b184 <USB_DeactivateEndpoint+0x324>
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b162:	853b      	strh	r3, [r7, #40]	; 0x28
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	441a      	add	r2, r3
 800b16e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b17c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b180:	b29b      	uxth	r3, r3
 800b182:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	b29b      	uxth	r3, r3
 800b192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	441a      	add	r2, r3
 800b1a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	441a      	add	r2, r3
 800b1de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	b29b      	uxth	r3, r3
 800b202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	441a      	add	r2, r3
 800b216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b21c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b228:	b29b      	uxth	r3, r3
 800b22a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3734      	adds	r7, #52	; 0x34
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b0c2      	sub	sp, #264	; 0x108
 800b23e:	af00      	add	r7, sp, #0
 800b240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b248:	6018      	str	r0, [r3, #0]
 800b24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b252:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	785b      	ldrb	r3, [r3, #1]
 800b260:	2b01      	cmp	r3, #1
 800b262:	f040 86b7 	bne.w	800bfd4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b26a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	699a      	ldr	r2, [r3, #24]
 800b272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d908      	bls.n	800b294 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b292:	e007      	b.n	800b2a4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	7b1b      	ldrb	r3, [r3, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d13a      	bne.n	800b32a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6959      	ldr	r1, [r3, #20]
 800b2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	88da      	ldrh	r2, [r3, #6]
 800b2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b2da:	6800      	ldr	r0, [r0, #0]
 800b2dc:	f001 fc98 	bl	800cc10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	4413      	add	r3, r2
 800b302:	613b      	str	r3, [r7, #16]
 800b304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	00da      	lsls	r2, r3, #3
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	4413      	add	r3, r2
 800b316:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b31a:	60fb      	str	r3, [r7, #12]
 800b31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b320:	b29a      	uxth	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	801a      	strh	r2, [r3, #0]
 800b326:	f000 be1f 	b.w	800bf68 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b32a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	78db      	ldrb	r3, [r3, #3]
 800b336:	2b02      	cmp	r3, #2
 800b338:	f040 8462 	bne.w	800bc00 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6a1a      	ldr	r2, [r3, #32]
 800b348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	429a      	cmp	r2, r3
 800b356:	f240 83df 	bls.w	800bb18 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	b29b      	uxth	r3, r3
 800b378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b37c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b380:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	441a      	add	r2, r3
 800b39e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b3a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b3ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6a1a      	ldr	r2, [r3, #32]
 800b3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c6:	1ad2      	subs	r2, r2, r3
 800b3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4413      	add	r3, r2
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 81c7 	beq.w	800b78a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	633b      	str	r3, [r7, #48]	; 0x30
 800b408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	785b      	ldrb	r3, [r3, #1]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d177      	bne.n	800b508 <USB_EPStartXfer+0x2ce>
 800b418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
 800b424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b432:	b29b      	uxth	r3, r3
 800b434:	461a      	mov	r2, r3
 800b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b438:	4413      	add	r3, r2
 800b43a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	00da      	lsls	r2, r3, #3
 800b44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44c:	4413      	add	r3, r2
 800b44e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b45e:	b29a      	uxth	r2, r3
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	801a      	strh	r2, [r3, #0]
 800b464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b468:	2b3e      	cmp	r3, #62	; 0x3e
 800b46a:	d921      	bls.n	800b4b0 <USB_EPStartXfer+0x276>
 800b46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b470:	095b      	lsrs	r3, r3, #5
 800b472:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47a:	f003 031f 	and.w	r3, r3, #31
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d104      	bne.n	800b48c <USB_EPStartXfer+0x252>
 800b482:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b486:	3b01      	subs	r3, #1
 800b488:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	b29a      	uxth	r2, r3
 800b492:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b496:	b29b      	uxth	r3, r3
 800b498:	029b      	lsls	r3, r3, #10
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	4313      	orrs	r3, r2
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	801a      	strh	r2, [r3, #0]
 800b4ae:	e050      	b.n	800b552 <USB_EPStartXfer+0x318>
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <USB_EPStartXfer+0x294>
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	801a      	strh	r2, [r3, #0]
 800b4cc:	e041      	b.n	800b552 <USB_EPStartXfer+0x318>
 800b4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d2:	085b      	lsrs	r3, r3, #1
 800b4d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d004      	beq.n	800b4ee <USB_EPStartXfer+0x2b4>
 800b4e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	029b      	lsls	r3, r3, #10
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4313      	orrs	r3, r2
 800b500:	b29a      	uxth	r2, r3
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	801a      	strh	r2, [r3, #0]
 800b506:	e024      	b.n	800b552 <USB_EPStartXfer+0x318>
 800b508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b50c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	785b      	ldrb	r3, [r3, #1]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d11c      	bne.n	800b552 <USB_EPStartXfer+0x318>
 800b518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b526:	b29b      	uxth	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	4413      	add	r3, r2
 800b52e:	633b      	str	r3, [r7, #48]	; 0x30
 800b530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	00da      	lsls	r2, r3, #3
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	4413      	add	r3, r2
 800b542:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	895b      	ldrh	r3, [r3, #10]
 800b55e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6959      	ldr	r1, [r3, #20]
 800b56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b572:	b29b      	uxth	r3, r3
 800b574:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b578:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b57c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b580:	6800      	ldr	r0, [r0, #0]
 800b582:	f001 fb45 	bl	800cc10 <USB_WritePMA>
            ep->xfer_buff += len;
 800b586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	695a      	ldr	r2, [r3, #20]
 800b592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b596:	441a      	add	r2, r3
 800b598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6a1a      	ldr	r2, [r3, #32]
 800b5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d90f      	bls.n	800b5e0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6a1a      	ldr	r2, [r3, #32]
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	1ad2      	subs	r2, r2, r3
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	621a      	str	r2, [r3, #32]
 800b5de:	e00e      	b.n	800b5fe <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	785b      	ldrb	r3, [r3, #1]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d177      	bne.n	800b6fe <USB_EPStartXfer+0x4c4>
 800b60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	61bb      	str	r3, [r7, #24]
 800b61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b628:	b29b      	uxth	r3, r3
 800b62a:	461a      	mov	r2, r3
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	4413      	add	r3, r2
 800b630:	61bb      	str	r3, [r7, #24]
 800b632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	00da      	lsls	r2, r3, #3
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	4413      	add	r3, r2
 800b644:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b648:	617b      	str	r3, [r7, #20]
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b654:	b29a      	uxth	r2, r3
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	801a      	strh	r2, [r3, #0]
 800b65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65e:	2b3e      	cmp	r3, #62	; 0x3e
 800b660:	d921      	bls.n	800b6a6 <USB_EPStartXfer+0x46c>
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b666:	095b      	lsrs	r3, r3, #5
 800b668:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	f003 031f 	and.w	r3, r3, #31
 800b674:	2b00      	cmp	r3, #0
 800b676:	d104      	bne.n	800b682 <USB_EPStartXfer+0x448>
 800b678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b67c:	3b01      	subs	r3, #1
 800b67e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	b29a      	uxth	r2, r3
 800b688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	029b      	lsls	r3, r3, #10
 800b690:	b29b      	uxth	r3, r3
 800b692:	4313      	orrs	r3, r2
 800b694:	b29b      	uxth	r3, r3
 800b696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b69a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	801a      	strh	r2, [r3, #0]
 800b6a4:	e056      	b.n	800b754 <USB_EPStartXfer+0x51a>
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10a      	bne.n	800b6c4 <USB_EPStartXfer+0x48a>
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	801a      	strh	r2, [r3, #0]
 800b6c2:	e047      	b.n	800b754 <USB_EPStartXfer+0x51a>
 800b6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c8:	085b      	lsrs	r3, r3, #1
 800b6ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d004      	beq.n	800b6e4 <USB_EPStartXfer+0x4aa>
 800b6da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6de:	3301      	adds	r3, #1
 800b6e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	029b      	lsls	r3, r3, #10
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	801a      	strh	r2, [r3, #0]
 800b6fc:	e02a      	b.n	800b754 <USB_EPStartXfer+0x51a>
 800b6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	785b      	ldrb	r3, [r3, #1]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d122      	bne.n	800b754 <USB_EPStartXfer+0x51a>
 800b70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	623b      	str	r3, [r7, #32]
 800b71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b728:	b29b      	uxth	r3, r3
 800b72a:	461a      	mov	r2, r3
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	4413      	add	r3, r2
 800b730:	623b      	str	r3, [r7, #32]
 800b732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	00da      	lsls	r2, r3, #3
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	4413      	add	r3, r2
 800b744:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b748:	61fb      	str	r3, [r7, #28]
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74e:	b29a      	uxth	r2, r3
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	891b      	ldrh	r3, [r3, #8]
 800b760:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6959      	ldr	r1, [r3, #20]
 800b770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b774:	b29b      	uxth	r3, r3
 800b776:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b77a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b77e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b782:	6800      	ldr	r0, [r0, #0]
 800b784:	f001 fa44 	bl	800cc10 <USB_WritePMA>
 800b788:	e3ee      	b.n	800bf68 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	785b      	ldrb	r3, [r3, #1]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d177      	bne.n	800b88a <USB_EPStartXfer+0x650>
 800b79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ba:	4413      	add	r3, r2
 800b7bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	00da      	lsls	r2, r3, #3
 800b7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b7d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b7d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e4:	801a      	strh	r2, [r3, #0]
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ea:	2b3e      	cmp	r3, #62	; 0x3e
 800b7ec:	d921      	bls.n	800b832 <USB_EPStartXfer+0x5f8>
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	095b      	lsrs	r3, r3, #5
 800b7f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fc:	f003 031f 	and.w	r3, r3, #31
 800b800:	2b00      	cmp	r3, #0
 800b802:	d104      	bne.n	800b80e <USB_EPStartXfer+0x5d4>
 800b804:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b808:	3b01      	subs	r3, #1
 800b80a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	b29a      	uxth	r2, r3
 800b814:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b818:	b29b      	uxth	r3, r3
 800b81a:	029b      	lsls	r3, r3, #10
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	4313      	orrs	r3, r2
 800b820:	b29b      	uxth	r3, r3
 800b822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b82e:	801a      	strh	r2, [r3, #0]
 800b830:	e056      	b.n	800b8e0 <USB_EPStartXfer+0x6a6>
 800b832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10a      	bne.n	800b850 <USB_EPStartXfer+0x616>
 800b83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b83c:	881b      	ldrh	r3, [r3, #0]
 800b83e:	b29b      	uxth	r3, r3
 800b840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b848:	b29a      	uxth	r2, r3
 800b84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b84c:	801a      	strh	r2, [r3, #0]
 800b84e:	e047      	b.n	800b8e0 <USB_EPStartXfer+0x6a6>
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b854:	085b      	lsrs	r3, r3, #1
 800b856:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	2b00      	cmp	r3, #0
 800b864:	d004      	beq.n	800b870 <USB_EPStartXfer+0x636>
 800b866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b86a:	3301      	adds	r3, #1
 800b86c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b29a      	uxth	r2, r3
 800b876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	029b      	lsls	r3, r3, #10
 800b87e:	b29b      	uxth	r3, r3
 800b880:	4313      	orrs	r3, r2
 800b882:	b29a      	uxth	r2, r3
 800b884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b886:	801a      	strh	r2, [r3, #0]
 800b888:	e02a      	b.n	800b8e0 <USB_EPStartXfer+0x6a6>
 800b88a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b88e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	785b      	ldrb	r3, [r3, #1]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d122      	bne.n	800b8e0 <USB_EPStartXfer+0x6a6>
 800b89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	653b      	str	r3, [r7, #80]	; 0x50
 800b8a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ba:	4413      	add	r3, r2
 800b8bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	00da      	lsls	r2, r3, #3
 800b8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	891b      	ldrh	r3, [r3, #8]
 800b8ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6959      	ldr	r1, [r3, #20]
 800b8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b900:	b29b      	uxth	r3, r3
 800b902:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b906:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b90a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b90e:	6800      	ldr	r0, [r0, #0]
 800b910:	f001 f97e 	bl	800cc10 <USB_WritePMA>
            ep->xfer_buff += len;
 800b914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	695a      	ldr	r2, [r3, #20]
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	441a      	add	r2, r3
 800b926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6a1a      	ldr	r2, [r3, #32]
 800b93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d90f      	bls.n	800b96e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6a1a      	ldr	r2, [r3, #32]
 800b95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	621a      	str	r2, [r3, #32]
 800b96c:	e00e      	b.n	800b98c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2200      	movs	r2, #0
 800b98a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	643b      	str	r3, [r7, #64]	; 0x40
 800b998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	785b      	ldrb	r3, [r3, #1]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d177      	bne.n	800ba98 <USB_EPStartXfer+0x85e>
 800b9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	4413      	add	r3, r2
 800b9ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	00da      	lsls	r2, r3, #3
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	4413      	add	r3, r2
 800b9de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f2:	801a      	strh	r2, [r3, #0]
 800b9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f8:	2b3e      	cmp	r3, #62	; 0x3e
 800b9fa:	d921      	bls.n	800ba40 <USB_EPStartXfer+0x806>
 800b9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba00:	095b      	lsrs	r3, r3, #5
 800ba02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0a:	f003 031f 	and.w	r3, r3, #31
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d104      	bne.n	800ba1c <USB_EPStartXfer+0x7e2>
 800ba12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba16:	3b01      	subs	r3, #1
 800ba18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	029b      	lsls	r3, r3, #10
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3c:	801a      	strh	r2, [r3, #0]
 800ba3e:	e050      	b.n	800bae2 <USB_EPStartXfer+0x8a8>
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10a      	bne.n	800ba5e <USB_EPStartXfer+0x824>
 800ba48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5a:	801a      	strh	r2, [r3, #0]
 800ba5c:	e041      	b.n	800bae2 <USB_EPStartXfer+0x8a8>
 800ba5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba62:	085b      	lsrs	r3, r3, #1
 800ba64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <USB_EPStartXfer+0x844>
 800ba74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba78:	3301      	adds	r3, #1
 800ba7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	029b      	lsls	r3, r3, #10
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba94:	801a      	strh	r2, [r3, #0]
 800ba96:	e024      	b.n	800bae2 <USB_EPStartXfer+0x8a8>
 800ba98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	785b      	ldrb	r3, [r3, #1]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d11c      	bne.n	800bae2 <USB_EPStartXfer+0x8a8>
 800baa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	461a      	mov	r2, r3
 800baba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800babc:	4413      	add	r3, r2
 800babe:	643b      	str	r3, [r7, #64]	; 0x40
 800bac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	00da      	lsls	r2, r3, #3
 800bace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad0:	4413      	add	r3, r2
 800bad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	b29a      	uxth	r2, r3
 800bade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	895b      	ldrh	r3, [r3, #10]
 800baee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800baf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6959      	ldr	r1, [r3, #20]
 800bafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb10:	6800      	ldr	r0, [r0, #0]
 800bb12:	f001 f87d 	bl	800cc10 <USB_WritePMA>
 800bb16:	e227      	b.n	800bf68 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6a1b      	ldr	r3, [r3, #32]
 800bb24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bb28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bb4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb4e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bb52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	441a      	add	r2, r3
 800bb6c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bb70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba4:	4413      	add	r3, r2
 800bba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	00da      	lsls	r2, r3, #3
 800bbb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbb8:	4413      	add	r3, r2
 800bbba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	891b      	ldrh	r3, [r3, #8]
 800bbd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6959      	ldr	r1, [r3, #20]
 800bbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bbf0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bbf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bbf8:	6800      	ldr	r0, [r0, #0]
 800bbfa:	f001 f809 	bl	800cc10 <USB_WritePMA>
 800bbfe:	e1b3      	b.n	800bf68 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bc00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6a1a      	ldr	r2, [r3, #32]
 800bc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc10:	1ad2      	subs	r2, r2, r3
 800bc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f000 80c6 	beq.w	800bdd2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	673b      	str	r3, [r7, #112]	; 0x70
 800bc52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	785b      	ldrb	r3, [r3, #1]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d177      	bne.n	800bd52 <USB_EPStartXfer+0xb18>
 800bc62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc82:	4413      	add	r3, r2
 800bc84:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	00da      	lsls	r2, r3, #3
 800bc94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc96:	4413      	add	r3, r2
 800bc98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc9c:	667b      	str	r3, [r7, #100]	; 0x64
 800bc9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcac:	801a      	strh	r2, [r3, #0]
 800bcae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb2:	2b3e      	cmp	r3, #62	; 0x3e
 800bcb4:	d921      	bls.n	800bcfa <USB_EPStartXfer+0xac0>
 800bcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcba:	095b      	lsrs	r3, r3, #5
 800bcbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bcc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc4:	f003 031f 	and.w	r3, r3, #31
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d104      	bne.n	800bcd6 <USB_EPStartXfer+0xa9c>
 800bccc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bcd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	029b      	lsls	r3, r3, #10
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	4313      	orrs	r3, r2
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf6:	801a      	strh	r2, [r3, #0]
 800bcf8:	e050      	b.n	800bd9c <USB_EPStartXfer+0xb62>
 800bcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10a      	bne.n	800bd18 <USB_EPStartXfer+0xade>
 800bd02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd14:	801a      	strh	r2, [r3, #0]
 800bd16:	e041      	b.n	800bd9c <USB_EPStartXfer+0xb62>
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1c:	085b      	lsrs	r3, r3, #1
 800bd1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d004      	beq.n	800bd38 <USB_EPStartXfer+0xafe>
 800bd2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd32:	3301      	adds	r3, #1
 800bd34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	029b      	lsls	r3, r3, #10
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd4e:	801a      	strh	r2, [r3, #0]
 800bd50:	e024      	b.n	800bd9c <USB_EPStartXfer+0xb62>
 800bd52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	785b      	ldrb	r3, [r3, #1]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d11c      	bne.n	800bd9c <USB_EPStartXfer+0xb62>
 800bd62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd76:	4413      	add	r3, r2
 800bd78:	673b      	str	r3, [r7, #112]	; 0x70
 800bd7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	00da      	lsls	r2, r3, #3
 800bd88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bd9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	895b      	ldrh	r3, [r3, #10]
 800bda8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bdac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	6959      	ldr	r1, [r3, #20]
 800bdb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bdc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bdc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bdca:	6800      	ldr	r0, [r0, #0]
 800bdcc:	f000 ff20 	bl	800cc10 <USB_WritePMA>
 800bdd0:	e0ca      	b.n	800bf68 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bdd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	785b      	ldrb	r3, [r3, #1]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d177      	bne.n	800bed2 <USB_EPStartXfer+0xc98>
 800bde2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be02:	4413      	add	r3, r2
 800be04:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	00da      	lsls	r2, r3, #3
 800be14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be16:	4413      	add	r3, r2
 800be18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be1c:	67bb      	str	r3, [r7, #120]	; 0x78
 800be1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	b29b      	uxth	r3, r3
 800be24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be28:	b29a      	uxth	r2, r3
 800be2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be2c:	801a      	strh	r2, [r3, #0]
 800be2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be32:	2b3e      	cmp	r3, #62	; 0x3e
 800be34:	d921      	bls.n	800be7a <USB_EPStartXfer+0xc40>
 800be36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be3a:	095b      	lsrs	r3, r3, #5
 800be3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be44:	f003 031f 	and.w	r3, r3, #31
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d104      	bne.n	800be56 <USB_EPStartXfer+0xc1c>
 800be4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be50:	3b01      	subs	r3, #1
 800be52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be58:	881b      	ldrh	r3, [r3, #0]
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800be60:	b29b      	uxth	r3, r3
 800be62:	029b      	lsls	r3, r3, #10
 800be64:	b29b      	uxth	r3, r3
 800be66:	4313      	orrs	r3, r2
 800be68:	b29b      	uxth	r3, r3
 800be6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be72:	b29a      	uxth	r2, r3
 800be74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be76:	801a      	strh	r2, [r3, #0]
 800be78:	e05c      	b.n	800bf34 <USB_EPStartXfer+0xcfa>
 800be7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <USB_EPStartXfer+0xc5e>
 800be82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	b29b      	uxth	r3, r3
 800be88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be90:	b29a      	uxth	r2, r3
 800be92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be94:	801a      	strh	r2, [r3, #0]
 800be96:	e04d      	b.n	800bf34 <USB_EPStartXfer+0xcfa>
 800be98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9c:	085b      	lsrs	r3, r3, #1
 800be9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d004      	beq.n	800beb8 <USB_EPStartXfer+0xc7e>
 800beae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800beb2:	3301      	adds	r3, #1
 800beb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800beb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beba:	881b      	ldrh	r3, [r3, #0]
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	029b      	lsls	r3, r3, #10
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	4313      	orrs	r3, r2
 800beca:	b29a      	uxth	r2, r3
 800becc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bece:	801a      	strh	r2, [r3, #0]
 800bed0:	e030      	b.n	800bf34 <USB_EPStartXfer+0xcfa>
 800bed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	785b      	ldrb	r3, [r3, #1]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d128      	bne.n	800bf34 <USB_EPStartXfer+0xcfa>
 800bee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800befe:	b29b      	uxth	r3, r3
 800bf00:	461a      	mov	r2, r3
 800bf02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf06:	4413      	add	r3, r2
 800bf08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	00da      	lsls	r2, r3, #3
 800bf1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf1e:	4413      	add	r3, r2
 800bf20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bf34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	891b      	ldrh	r3, [r3, #8]
 800bf40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	6959      	ldr	r1, [r3, #20]
 800bf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bf5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bf62:	6800      	ldr	r0, [r0, #0]
 800bf64:	f000 fe54 	bl	800cc10 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bf68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf8e:	817b      	strh	r3, [r7, #10]
 800bf90:	897b      	ldrh	r3, [r7, #10]
 800bf92:	f083 0310 	eor.w	r3, r3, #16
 800bf96:	817b      	strh	r3, [r7, #10]
 800bf98:	897b      	ldrh	r3, [r7, #10]
 800bf9a:	f083 0320 	eor.w	r3, r3, #32
 800bf9e:	817b      	strh	r3, [r7, #10]
 800bfa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	441a      	add	r2, r3
 800bfba:	897b      	ldrh	r3, [r7, #10]
 800bfbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	8013      	strh	r3, [r2, #0]
 800bfd0:	f000 bcde 	b.w	800c990 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bfd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	7b1b      	ldrb	r3, [r3, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f040 80bb 	bne.w	800c15c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bfe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d917      	bls.n	800c032 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	699a      	ldr	r2, [r3, #24]
 800c01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c022:	1ad2      	subs	r2, r2, r3
 800c024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	619a      	str	r2, [r3, #24]
 800c030:	e00e      	b.n	800c050 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2200      	movs	r2, #0
 800c04e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	461a      	mov	r2, r3
 800c070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c074:	4413      	add	r3, r2
 800c076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c07a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	00da      	lsls	r2, r3, #3
 800c088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c08c:	4413      	add	r3, r2
 800c08e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0a8:	801a      	strh	r2, [r3, #0]
 800c0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ae:	2b3e      	cmp	r3, #62	; 0x3e
 800c0b0:	d924      	bls.n	800c0fc <USB_EPStartXfer+0xec2>
 800c0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b6:	095b      	lsrs	r3, r3, #5
 800c0b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0c0:	f003 031f 	and.w	r3, r3, #31
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <USB_EPStartXfer+0xe98>
 800c0c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	029b      	lsls	r3, r3, #10
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0f6:	801a      	strh	r2, [r3, #0]
 800c0f8:	f000 bc10 	b.w	800c91c <USB_EPStartXfer+0x16e2>
 800c0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10c      	bne.n	800c11e <USB_EPStartXfer+0xee4>
 800c104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c114:	b29a      	uxth	r2, r3
 800c116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c11a:	801a      	strh	r2, [r3, #0]
 800c11c:	e3fe      	b.n	800c91c <USB_EPStartXfer+0x16e2>
 800c11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c122:	085b      	lsrs	r3, r3, #1
 800c124:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	d004      	beq.n	800c13e <USB_EPStartXfer+0xf04>
 800c134:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c138:	3301      	adds	r3, #1
 800c13a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c142:	881b      	ldrh	r3, [r3, #0]
 800c144:	b29a      	uxth	r2, r3
 800c146:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	029b      	lsls	r3, r3, #10
 800c14e:	b29b      	uxth	r3, r3
 800c150:	4313      	orrs	r3, r2
 800c152:	b29a      	uxth	r2, r3
 800c154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c158:	801a      	strh	r2, [r3, #0]
 800c15a:	e3df      	b.n	800c91c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	78db      	ldrb	r3, [r3, #3]
 800c168:	2b02      	cmp	r3, #2
 800c16a:	f040 8218 	bne.w	800c59e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	785b      	ldrb	r3, [r3, #1]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f040 809d 	bne.w	800c2ba <USB_EPStartXfer+0x1080>
 800c180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	00da      	lsls	r2, r3, #3
 800c1b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1bc:	4413      	add	r3, r2
 800c1be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c1c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1ca:	881b      	ldrh	r3, [r3, #0]
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1d8:	801a      	strh	r2, [r3, #0]
 800c1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	2b3e      	cmp	r3, #62	; 0x3e
 800c1e8:	d92b      	bls.n	800c242 <USB_EPStartXfer+0x1008>
 800c1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	095b      	lsrs	r3, r3, #5
 800c1f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	f003 031f 	and.w	r3, r3, #31
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <USB_EPStartXfer+0xfe0>
 800c210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c214:	3b01      	subs	r3, #1
 800c216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c21a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	b29a      	uxth	r2, r3
 800c222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c226:	b29b      	uxth	r3, r3
 800c228:	029b      	lsls	r3, r3, #10
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	4313      	orrs	r3, r2
 800c22e:	b29b      	uxth	r3, r3
 800c230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c238:	b29a      	uxth	r2, r3
 800c23a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c23e:	801a      	strh	r2, [r3, #0]
 800c240:	e070      	b.n	800c324 <USB_EPStartXfer+0x10ea>
 800c242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10c      	bne.n	800c26c <USB_EPStartXfer+0x1032>
 800c252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c25e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c262:	b29a      	uxth	r2, r3
 800c264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c268:	801a      	strh	r2, [r3, #0]
 800c26a:	e05b      	b.n	800c324 <USB_EPStartXfer+0x10ea>
 800c26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	085b      	lsrs	r3, r3, #1
 800c27a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d004      	beq.n	800c29c <USB_EPStartXfer+0x1062>
 800c292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c296:	3301      	adds	r3, #1
 800c298:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c29c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	029b      	lsls	r3, r3, #10
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2b6:	801a      	strh	r2, [r3, #0]
 800c2b8:	e034      	b.n	800c324 <USB_EPStartXfer+0x10ea>
 800c2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	785b      	ldrb	r3, [r3, #1]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d12c      	bne.n	800c324 <USB_EPStartXfer+0x10ea>
 800c2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	00da      	lsls	r2, r3, #3
 800c302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c306:	4413      	add	r3, r2
 800c308:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c30c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c322:	801a      	strh	r2, [r3, #0]
 800c324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	785b      	ldrb	r3, [r3, #1]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f040 809d 	bne.w	800c47e <USB_EPStartXfer+0x1244>
 800c344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c360:	b29b      	uxth	r3, r3
 800c362:	461a      	mov	r2, r3
 800c364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c368:	4413      	add	r3, r2
 800c36a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	00da      	lsls	r2, r3, #3
 800c37c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c380:	4413      	add	r3, r2
 800c382:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c386:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c38a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	b29b      	uxth	r3, r3
 800c392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c396:	b29a      	uxth	r2, r3
 800c398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c39c:	801a      	strh	r2, [r3, #0]
 800c39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	2b3e      	cmp	r3, #62	; 0x3e
 800c3ac:	d92b      	bls.n	800c406 <USB_EPStartXfer+0x11cc>
 800c3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	f003 031f 	and.w	r3, r3, #31
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d104      	bne.n	800c3de <USB_EPStartXfer+0x11a4>
 800c3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c3de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	029b      	lsls	r3, r3, #10
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c402:	801a      	strh	r2, [r3, #0]
 800c404:	e069      	b.n	800c4da <USB_EPStartXfer+0x12a0>
 800c406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10c      	bne.n	800c430 <USB_EPStartXfer+0x11f6>
 800c416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c426:	b29a      	uxth	r2, r3
 800c428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c42c:	801a      	strh	r2, [r3, #0]
 800c42e:	e054      	b.n	800c4da <USB_EPStartXfer+0x12a0>
 800c430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	085b      	lsrs	r3, r3, #1
 800c43e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	f003 0301 	and.w	r3, r3, #1
 800c452:	2b00      	cmp	r3, #0
 800c454:	d004      	beq.n	800c460 <USB_EPStartXfer+0x1226>
 800c456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c45a:	3301      	adds	r3, #1
 800c45c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	b29a      	uxth	r2, r3
 800c468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	029b      	lsls	r3, r3, #10
 800c470:	b29b      	uxth	r3, r3
 800c472:	4313      	orrs	r3, r2
 800c474:	b29a      	uxth	r2, r3
 800c476:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c47a:	801a      	strh	r2, [r3, #0]
 800c47c:	e02d      	b.n	800c4da <USB_EPStartXfer+0x12a0>
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	785b      	ldrb	r3, [r3, #1]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d125      	bne.n	800c4da <USB_EPStartXfer+0x12a0>
 800c48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4a4:	4413      	add	r3, r2
 800c4a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	00da      	lsls	r2, r3, #3
 800c4b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4bc:	4413      	add	r3, r2
 800c4be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	691b      	ldr	r3, [r3, #16]
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4d8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 8218 	beq.w	800c91c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c50c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d005      	beq.n	800c524 <USB_EPStartXfer+0x12ea>
 800c518:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10d      	bne.n	800c540 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c524:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f040 81f5 	bne.w	800c91c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c532:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f040 81ee 	bne.w	800c91c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c566:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c56e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	441a      	add	r2, r3
 800c584:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c58c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c594:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c598:	b29b      	uxth	r3, r3
 800c59a:	8013      	strh	r3, [r2, #0]
 800c59c:	e1be      	b.n	800c91c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	78db      	ldrb	r3, [r3, #3]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	f040 81b4 	bne.w	800c918 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	699a      	ldr	r2, [r3, #24]
 800c5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d917      	bls.n	800c5fc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	699a      	ldr	r2, [r3, #24]
 800c5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ec:	1ad2      	subs	r2, r2, r3
 800c5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	619a      	str	r2, [r3, #24]
 800c5fa:	e00e      	b.n	800c61a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2200      	movs	r2, #0
 800c618:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c61e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	785b      	ldrb	r3, [r3, #1]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f040 8085 	bne.w	800c736 <USB_EPStartXfer+0x14fc>
 800c62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c648:	b29b      	uxth	r3, r3
 800c64a:	461a      	mov	r2, r3
 800c64c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c650:	4413      	add	r3, r2
 800c652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	00da      	lsls	r2, r3, #3
 800c664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c668:	4413      	add	r3, r2
 800c66a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c66e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c67e:	b29a      	uxth	r2, r3
 800c680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c684:	801a      	strh	r2, [r3, #0]
 800c686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c68a:	2b3e      	cmp	r3, #62	; 0x3e
 800c68c:	d923      	bls.n	800c6d6 <USB_EPStartXfer+0x149c>
 800c68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c692:	095b      	lsrs	r3, r3, #5
 800c694:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c69c:	f003 031f 	and.w	r3, r3, #31
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d104      	bne.n	800c6ae <USB_EPStartXfer+0x1474>
 800c6a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c6ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	029b      	lsls	r3, r3, #10
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6d2:	801a      	strh	r2, [r3, #0]
 800c6d4:	e060      	b.n	800c798 <USB_EPStartXfer+0x155e>
 800c6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10c      	bne.n	800c6f8 <USB_EPStartXfer+0x14be>
 800c6de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6f4:	801a      	strh	r2, [r3, #0]
 800c6f6:	e04f      	b.n	800c798 <USB_EPStartXfer+0x155e>
 800c6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6fc:	085b      	lsrs	r3, r3, #1
 800c6fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d004      	beq.n	800c718 <USB_EPStartXfer+0x14de>
 800c70e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c712:	3301      	adds	r3, #1
 800c714:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b29a      	uxth	r2, r3
 800c720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c724:	b29b      	uxth	r3, r3
 800c726:	029b      	lsls	r3, r3, #10
 800c728:	b29b      	uxth	r3, r3
 800c72a:	4313      	orrs	r3, r2
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c732:	801a      	strh	r2, [r3, #0]
 800c734:	e030      	b.n	800c798 <USB_EPStartXfer+0x155e>
 800c736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	785b      	ldrb	r3, [r3, #1]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d128      	bne.n	800c798 <USB_EPStartXfer+0x155e>
 800c746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c762:	b29b      	uxth	r3, r3
 800c764:	461a      	mov	r2, r3
 800c766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c76a:	4413      	add	r3, r2
 800c76c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	00da      	lsls	r2, r3, #3
 800c77e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c782:	4413      	add	r3, r2
 800c784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c790:	b29a      	uxth	r2, r3
 800c792:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c796:	801a      	strh	r2, [r3, #0]
 800c798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c79c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	785b      	ldrb	r3, [r3, #1]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f040 8085 	bne.w	800c8c2 <USB_EPStartXfer+0x1688>
 800c7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7dc:	4413      	add	r3, r2
 800c7de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	00da      	lsls	r2, r3, #3
 800c7f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c802:	881b      	ldrh	r3, [r3, #0]
 800c804:	b29b      	uxth	r3, r3
 800c806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c810:	801a      	strh	r2, [r3, #0]
 800c812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c816:	2b3e      	cmp	r3, #62	; 0x3e
 800c818:	d923      	bls.n	800c862 <USB_EPStartXfer+0x1628>
 800c81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81e:	095b      	lsrs	r3, r3, #5
 800c820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c828:	f003 031f 	and.w	r3, r3, #31
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d104      	bne.n	800c83a <USB_EPStartXfer+0x1600>
 800c830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c834:	3b01      	subs	r3, #1
 800c836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c83a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	b29a      	uxth	r2, r3
 800c842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c846:	b29b      	uxth	r3, r3
 800c848:	029b      	lsls	r3, r3, #10
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	4313      	orrs	r3, r2
 800c84e:	b29b      	uxth	r3, r3
 800c850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c858:	b29a      	uxth	r2, r3
 800c85a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c85e:	801a      	strh	r2, [r3, #0]
 800c860:	e05c      	b.n	800c91c <USB_EPStartXfer+0x16e2>
 800c862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10c      	bne.n	800c884 <USB_EPStartXfer+0x164a>
 800c86a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	b29b      	uxth	r3, r3
 800c872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c880:	801a      	strh	r2, [r3, #0]
 800c882:	e04b      	b.n	800c91c <USB_EPStartXfer+0x16e2>
 800c884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c888:	085b      	lsrs	r3, r3, #1
 800c88a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c892:	f003 0301 	and.w	r3, r3, #1
 800c896:	2b00      	cmp	r3, #0
 800c898:	d004      	beq.n	800c8a4 <USB_EPStartXfer+0x166a>
 800c89a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c89e:	3301      	adds	r3, #1
 800c8a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8a8:	881b      	ldrh	r3, [r3, #0]
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	029b      	lsls	r3, r3, #10
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8be:	801a      	strh	r2, [r3, #0]
 800c8c0:	e02c      	b.n	800c91c <USB_EPStartXfer+0x16e2>
 800c8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	785b      	ldrb	r3, [r3, #1]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d124      	bne.n	800c91c <USB_EPStartXfer+0x16e2>
 800c8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	00da      	lsls	r2, r3, #3
 800c8fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c900:	4413      	add	r3, r2
 800c902:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c90e:	b29a      	uxth	r2, r3
 800c910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c914:	801a      	strh	r2, [r3, #0]
 800c916:	e001      	b.n	800c91c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e03a      	b.n	800c992 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c942:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c946:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c94a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c94e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c952:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c956:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c95a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c96c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	441a      	add	r2, r3
 800c978:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c97c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	785b      	ldrb	r3, [r3, #1]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d020      	beq.n	800c9f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9c4:	81bb      	strh	r3, [r7, #12]
 800c9c6:	89bb      	ldrh	r3, [r7, #12]
 800c9c8:	f083 0310 	eor.w	r3, r3, #16
 800c9cc:	81bb      	strh	r3, [r7, #12]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	441a      	add	r2, r3
 800c9d8:	89bb      	ldrh	r3, [r7, #12]
 800c9da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	8013      	strh	r3, [r2, #0]
 800c9ee:	e01f      	b.n	800ca30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca06:	81fb      	strh	r3, [r7, #14]
 800ca08:	89fb      	ldrh	r3, [r7, #14]
 800ca0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ca0e:	81fb      	strh	r3, [r7, #14]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	441a      	add	r2, r3
 800ca1a:	89fb      	ldrh	r3, [r7, #14]
 800ca1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca3e:	b480      	push	{r7}
 800ca40:	b087      	sub	sp, #28
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	7b1b      	ldrb	r3, [r3, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f040 809d 	bne.w	800cb8c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	785b      	ldrb	r3, [r3, #1]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d04c      	beq.n	800caf4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4413      	add	r3, r2
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	823b      	strh	r3, [r7, #16]
 800ca68:	8a3b      	ldrh	r3, [r7, #16]
 800ca6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d01b      	beq.n	800caaa <USB_EPClearStall+0x6c>
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca88:	81fb      	strh	r3, [r7, #14]
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	441a      	add	r2, r3
 800ca94:	89fb      	ldrh	r3, [r7, #14]
 800ca96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	78db      	ldrb	r3, [r3, #3]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d06c      	beq.n	800cb8c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac8:	81bb      	strh	r3, [r7, #12]
 800caca:	89bb      	ldrh	r3, [r7, #12]
 800cacc:	f083 0320 	eor.w	r3, r3, #32
 800cad0:	81bb      	strh	r3, [r7, #12]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	441a      	add	r2, r3
 800cadc:	89bb      	ldrh	r3, [r7, #12]
 800cade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caee:	b29b      	uxth	r3, r3
 800caf0:	8013      	strh	r3, [r2, #0]
 800caf2:	e04b      	b.n	800cb8c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	82fb      	strh	r3, [r7, #22]
 800cb02:	8afb      	ldrh	r3, [r7, #22]
 800cb04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01b      	beq.n	800cb44 <USB_EPClearStall+0x106>
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb22:	82bb      	strh	r3, [r7, #20]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	441a      	add	r2, r3
 800cb2e:	8abb      	ldrh	r3, [r7, #20]
 800cb30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5a:	827b      	strh	r3, [r7, #18]
 800cb5c:	8a7b      	ldrh	r3, [r7, #18]
 800cb5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb62:	827b      	strh	r3, [r7, #18]
 800cb64:	8a7b      	ldrh	r3, [r7, #18]
 800cb66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb6a:	827b      	strh	r3, [r7, #18]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	441a      	add	r2, r3
 800cb76:	8a7b      	ldrh	r3, [r7, #18]
 800cb78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	371c      	adds	r7, #28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	460b      	mov	r3, r1
 800cba4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cba6:	78fb      	ldrb	r3, [r7, #3]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d103      	bne.n	800cbb4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2280      	movs	r2, #128	; 0x80
 800cbb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	b083      	sub	sp, #12
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cc02:	68fb      	ldr	r3, [r7, #12]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b08b      	sub	sp, #44	; 0x2c
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	460b      	mov	r3, r1
 800cc20:	80fb      	strh	r3, [r7, #6]
 800cc22:	4613      	mov	r3, r2
 800cc24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cc26:	88bb      	ldrh	r3, [r7, #4]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	085b      	lsrs	r3, r3, #1
 800cc2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cc36:	88fa      	ldrh	r2, [r7, #6]
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc40:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
 800cc46:	e01b      	b.n	800cc80 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	3301      	adds	r3, #1
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	021b      	lsls	r3, r3, #8
 800cc56:	b21a      	sxth	r2, r3
 800cc58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	b21b      	sxth	r3, r3
 800cc60:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	8a7a      	ldrh	r2, [r7, #18]
 800cc66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	3302      	adds	r3, #2
 800cc6c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	3301      	adds	r3, #1
 800cc72:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cc74:	69fb      	ldr	r3, [r7, #28]
 800cc76:	3301      	adds	r3, #1
 800cc78:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	627b      	str	r3, [r7, #36]	; 0x24
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1e0      	bne.n	800cc48 <USB_WritePMA+0x38>
  }
}
 800cc86:	bf00      	nop
 800cc88:	bf00      	nop
 800cc8a:	372c      	adds	r7, #44	; 0x2c
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b08b      	sub	sp, #44	; 0x2c
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	4611      	mov	r1, r2
 800cca0:	461a      	mov	r2, r3
 800cca2:	460b      	mov	r3, r1
 800cca4:	80fb      	strh	r3, [r7, #6]
 800cca6:	4613      	mov	r3, r2
 800cca8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ccaa:	88bb      	ldrh	r3, [r7, #4]
 800ccac:	085b      	lsrs	r3, r3, #1
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ccba:	88fa      	ldrh	r2, [r7, #6]
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	627b      	str	r3, [r7, #36]	; 0x24
 800ccca:	e018      	b.n	800ccfe <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	881b      	ldrh	r3, [r3, #0]
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	3302      	adds	r3, #2
 800ccd8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	3301      	adds	r3, #1
 800cce6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	0a1b      	lsrs	r3, r3, #8
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	627b      	str	r3, [r7, #36]	; 0x24
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1e3      	bne.n	800cccc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cd04:	88bb      	ldrh	r3, [r7, #4]
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d007      	beq.n	800cd20 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	701a      	strb	r2, [r3, #0]
  }
}
 800cd20:	bf00      	nop
 800cd22:	372c      	adds	r7, #44	; 0x2c
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cd38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cd3c:	f002 fc2a 	bl	800f594 <USBD_static_malloc>
 800cd40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d109      	bne.n	800cd5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	32b0      	adds	r2, #176	; 0xb0
 800cd52:	2100      	movs	r1, #0
 800cd54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd58:	2302      	movs	r3, #2
 800cd5a:	e0d4      	b.n	800cf06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd5c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cd60:	2100      	movs	r1, #0
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f003 fddc 	bl	8010920 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	32b0      	adds	r2, #176	; 0xb0
 800cd72:	68f9      	ldr	r1, [r7, #12]
 800cd74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	32b0      	adds	r2, #176	; 0xb0
 800cd82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	7c1b      	ldrb	r3, [r3, #16]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d138      	bne.n	800ce06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd94:	4b5e      	ldr	r3, [pc, #376]	; (800cf10 <USBD_CDC_Init+0x1e4>)
 800cd96:	7819      	ldrb	r1, [r3, #0]
 800cd98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f002 fa9d 	bl	800f2de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cda4:	4b5a      	ldr	r3, [pc, #360]	; (800cf10 <USBD_CDC_Init+0x1e4>)
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	f003 020f 	and.w	r2, r3, #15
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	440b      	add	r3, r1
 800cdb8:	3324      	adds	r3, #36	; 0x24
 800cdba:	2201      	movs	r2, #1
 800cdbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdbe:	4b55      	ldr	r3, [pc, #340]	; (800cf14 <USBD_CDC_Init+0x1e8>)
 800cdc0:	7819      	ldrb	r1, [r3, #0]
 800cdc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f002 fa88 	bl	800f2de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cdce:	4b51      	ldr	r3, [pc, #324]	; (800cf14 <USBD_CDC_Init+0x1e8>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	f003 020f 	and.w	r2, r3, #15
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cde6:	2201      	movs	r2, #1
 800cde8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cdea:	4b4b      	ldr	r3, [pc, #300]	; (800cf18 <USBD_CDC_Init+0x1ec>)
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	f003 020f 	and.w	r2, r3, #15
 800cdf2:	6879      	ldr	r1, [r7, #4]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3326      	adds	r3, #38	; 0x26
 800ce00:	2210      	movs	r2, #16
 800ce02:	801a      	strh	r2, [r3, #0]
 800ce04:	e035      	b.n	800ce72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce06:	4b42      	ldr	r3, [pc, #264]	; (800cf10 <USBD_CDC_Init+0x1e4>)
 800ce08:	7819      	ldrb	r1, [r3, #0]
 800ce0a:	2340      	movs	r3, #64	; 0x40
 800ce0c:	2202      	movs	r2, #2
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f002 fa65 	bl	800f2de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce14:	4b3e      	ldr	r3, [pc, #248]	; (800cf10 <USBD_CDC_Init+0x1e4>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f003 020f 	and.w	r2, r3, #15
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	440b      	add	r3, r1
 800ce28:	3324      	adds	r3, #36	; 0x24
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce2e:	4b39      	ldr	r3, [pc, #228]	; (800cf14 <USBD_CDC_Init+0x1e8>)
 800ce30:	7819      	ldrb	r1, [r3, #0]
 800ce32:	2340      	movs	r3, #64	; 0x40
 800ce34:	2202      	movs	r2, #2
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f002 fa51 	bl	800f2de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce3c:	4b35      	ldr	r3, [pc, #212]	; (800cf14 <USBD_CDC_Init+0x1e8>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	f003 020f 	and.w	r2, r3, #15
 800ce44:	6879      	ldr	r1, [r7, #4]
 800ce46:	4613      	mov	r3, r2
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	4413      	add	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	440b      	add	r3, r1
 800ce50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce54:	2201      	movs	r2, #1
 800ce56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce58:	4b2f      	ldr	r3, [pc, #188]	; (800cf18 <USBD_CDC_Init+0x1ec>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	f003 020f 	and.w	r2, r3, #15
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	3326      	adds	r3, #38	; 0x26
 800ce6e:	2210      	movs	r2, #16
 800ce70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce72:	4b29      	ldr	r3, [pc, #164]	; (800cf18 <USBD_CDC_Init+0x1ec>)
 800ce74:	7819      	ldrb	r1, [r3, #0]
 800ce76:	2308      	movs	r3, #8
 800ce78:	2203      	movs	r2, #3
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f002 fa2f 	bl	800f2de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce80:	4b25      	ldr	r3, [pc, #148]	; (800cf18 <USBD_CDC_Init+0x1ec>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	f003 020f 	and.w	r2, r3, #15
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	3324      	adds	r3, #36	; 0x24
 800ce96:	2201      	movs	r2, #1
 800ce98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	33b0      	adds	r3, #176	; 0xb0
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4413      	add	r3, r2
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ced0:	2302      	movs	r3, #2
 800ced2:	e018      	b.n	800cf06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	7c1b      	ldrb	r3, [r3, #16]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10a      	bne.n	800cef2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cedc:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <USBD_CDC_Init+0x1e8>)
 800cede:	7819      	ldrb	r1, [r3, #0]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f002 fae7 	bl	800f4be <USBD_LL_PrepareReceive>
 800cef0:	e008      	b.n	800cf04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cef2:	4b08      	ldr	r3, [pc, #32]	; (800cf14 <USBD_CDC_Init+0x1e8>)
 800cef4:	7819      	ldrb	r1, [r3, #0]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f002 fadd 	bl	800f4be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000093 	.word	0x20000093
 800cf14:	20000094 	.word	0x20000094
 800cf18:	20000095 	.word	0x20000095

0800cf1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	460b      	mov	r3, r1
 800cf26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf28:	4b3a      	ldr	r3, [pc, #232]	; (800d014 <USBD_CDC_DeInit+0xf8>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f002 f9fb 	bl	800f32a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cf34:	4b37      	ldr	r3, [pc, #220]	; (800d014 <USBD_CDC_DeInit+0xf8>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	f003 020f 	and.w	r2, r3, #15
 800cf3c:	6879      	ldr	r1, [r7, #4]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	440b      	add	r3, r1
 800cf48:	3324      	adds	r3, #36	; 0x24
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf4e:	4b32      	ldr	r3, [pc, #200]	; (800d018 <USBD_CDC_DeInit+0xfc>)
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f002 f9e8 	bl	800f32a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf5a:	4b2f      	ldr	r3, [pc, #188]	; (800d018 <USBD_CDC_DeInit+0xfc>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	f003 020f 	and.w	r2, r3, #15
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	4613      	mov	r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4413      	add	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	440b      	add	r3, r1
 800cf6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf72:	2200      	movs	r2, #0
 800cf74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf76:	4b29      	ldr	r3, [pc, #164]	; (800d01c <USBD_CDC_DeInit+0x100>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f002 f9d4 	bl	800f32a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf82:	4b26      	ldr	r3, [pc, #152]	; (800d01c <USBD_CDC_DeInit+0x100>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	f003 020f 	and.w	r2, r3, #15
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4413      	add	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	440b      	add	r3, r1
 800cf96:	3324      	adds	r3, #36	; 0x24
 800cf98:	2200      	movs	r2, #0
 800cf9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cf9c:	4b1f      	ldr	r3, [pc, #124]	; (800d01c <USBD_CDC_DeInit+0x100>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	f003 020f 	and.w	r2, r3, #15
 800cfa4:	6879      	ldr	r1, [r7, #4]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	440b      	add	r3, r1
 800cfb0:	3326      	adds	r3, #38	; 0x26
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	32b0      	adds	r2, #176	; 0xb0
 800cfc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d01f      	beq.n	800d008 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	33b0      	adds	r3, #176	; 0xb0
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	32b0      	adds	r2, #176	; 0xb0
 800cfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f002 fae0 	bl	800f5b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	32b0      	adds	r2, #176	; 0xb0
 800cffa:	2100      	movs	r1, #0
 800cffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20000093 	.word	0x20000093
 800d018:	20000094 	.word	0x20000094
 800d01c:	20000095 	.word	0x20000095

0800d020 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	32b0      	adds	r2, #176	; 0xb0
 800d034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d038:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d03a:	2300      	movs	r3, #0
 800d03c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d03e:	2300      	movs	r3, #0
 800d040:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d042:	2300      	movs	r3, #0
 800d044:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e0bf      	b.n	800d1d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d050      	beq.n	800d0fe <USBD_CDC_Setup+0xde>
 800d05c:	2b20      	cmp	r3, #32
 800d05e:	f040 80af 	bne.w	800d1c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	88db      	ldrh	r3, [r3, #6]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d03a      	beq.n	800d0e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	b25b      	sxtb	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	da1b      	bge.n	800d0ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	33b0      	adds	r3, #176	; 0xb0
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d08a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	88d2      	ldrh	r2, [r2, #6]
 800d090:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	88db      	ldrh	r3, [r3, #6]
 800d096:	2b07      	cmp	r3, #7
 800d098:	bf28      	it	cs
 800d09a:	2307      	movcs	r3, #7
 800d09c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	89fa      	ldrh	r2, [r7, #14]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f001 fd21 	bl	800eaec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d0aa:	e090      	b.n	800d1ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	785a      	ldrb	r2, [r3, #1]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	88db      	ldrh	r3, [r3, #6]
 800d0ba:	2b3f      	cmp	r3, #63	; 0x3f
 800d0bc:	d803      	bhi.n	800d0c6 <USBD_CDC_Setup+0xa6>
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	88db      	ldrh	r3, [r3, #6]
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	e000      	b.n	800d0c8 <USBD_CDC_Setup+0xa8>
 800d0c6:	2240      	movs	r2, #64	; 0x40
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d0ce:	6939      	ldr	r1, [r7, #16]
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f001 fd33 	bl	800eb44 <USBD_CtlPrepareRx>
      break;
 800d0de:	e076      	b.n	800d1ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	33b0      	adds	r3, #176	; 0xb0
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4413      	add	r3, r2
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	7850      	ldrb	r0, [r2, #1]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	4798      	blx	r3
      break;
 800d0fc:	e067      	b.n	800d1ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	785b      	ldrb	r3, [r3, #1]
 800d102:	2b0b      	cmp	r3, #11
 800d104:	d851      	bhi.n	800d1aa <USBD_CDC_Setup+0x18a>
 800d106:	a201      	add	r2, pc, #4	; (adr r2, 800d10c <USBD_CDC_Setup+0xec>)
 800d108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10c:	0800d13d 	.word	0x0800d13d
 800d110:	0800d1b9 	.word	0x0800d1b9
 800d114:	0800d1ab 	.word	0x0800d1ab
 800d118:	0800d1ab 	.word	0x0800d1ab
 800d11c:	0800d1ab 	.word	0x0800d1ab
 800d120:	0800d1ab 	.word	0x0800d1ab
 800d124:	0800d1ab 	.word	0x0800d1ab
 800d128:	0800d1ab 	.word	0x0800d1ab
 800d12c:	0800d1ab 	.word	0x0800d1ab
 800d130:	0800d1ab 	.word	0x0800d1ab
 800d134:	0800d167 	.word	0x0800d167
 800d138:	0800d191 	.word	0x0800d191
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b03      	cmp	r3, #3
 800d146:	d107      	bne.n	800d158 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d148:	f107 030a 	add.w	r3, r7, #10
 800d14c:	2202      	movs	r2, #2
 800d14e:	4619      	mov	r1, r3
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f001 fccb 	bl	800eaec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d156:	e032      	b.n	800d1be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f001 fc55 	bl	800ea0a <USBD_CtlError>
            ret = USBD_FAIL;
 800d160:	2303      	movs	r3, #3
 800d162:	75fb      	strb	r3, [r7, #23]
          break;
 800d164:	e02b      	b.n	800d1be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d107      	bne.n	800d182 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d172:	f107 030d 	add.w	r3, r7, #13
 800d176:	2201      	movs	r2, #1
 800d178:	4619      	mov	r1, r3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f001 fcb6 	bl	800eaec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d180:	e01d      	b.n	800d1be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f001 fc40 	bl	800ea0a <USBD_CtlError>
            ret = USBD_FAIL;
 800d18a:	2303      	movs	r3, #3
 800d18c:	75fb      	strb	r3, [r7, #23]
          break;
 800d18e:	e016      	b.n	800d1be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d00f      	beq.n	800d1bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d19c:	6839      	ldr	r1, [r7, #0]
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f001 fc33 	bl	800ea0a <USBD_CtlError>
            ret = USBD_FAIL;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1a8:	e008      	b.n	800d1bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1aa:	6839      	ldr	r1, [r7, #0]
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f001 fc2c 	bl	800ea0a <USBD_CtlError>
          ret = USBD_FAIL;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	75fb      	strb	r3, [r7, #23]
          break;
 800d1b6:	e002      	b.n	800d1be <USBD_CDC_Setup+0x19e>
          break;
 800d1b8:	bf00      	nop
 800d1ba:	e008      	b.n	800d1ce <USBD_CDC_Setup+0x1ae>
          break;
 800d1bc:	bf00      	nop
      }
      break;
 800d1be:	e006      	b.n	800d1ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f001 fc21 	bl	800ea0a <USBD_CtlError>
      ret = USBD_FAIL;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	75fb      	strb	r3, [r7, #23]
      break;
 800d1cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	32b0      	adds	r2, #176	; 0xb0
 800d1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d1fe:	2303      	movs	r3, #3
 800d200:	e065      	b.n	800d2ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	32b0      	adds	r2, #176	; 0xb0
 800d20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d210:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d212:	78fb      	ldrb	r3, [r7, #3]
 800d214:	f003 020f 	and.w	r2, r3, #15
 800d218:	6879      	ldr	r1, [r7, #4]
 800d21a:	4613      	mov	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4413      	add	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	440b      	add	r3, r1
 800d224:	3318      	adds	r3, #24
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d02f      	beq.n	800d28c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d22c:	78fb      	ldrb	r3, [r7, #3]
 800d22e:	f003 020f 	and.w	r2, r3, #15
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	4613      	mov	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	440b      	add	r3, r1
 800d23e:	3318      	adds	r3, #24
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	78fb      	ldrb	r3, [r7, #3]
 800d244:	f003 010f 	and.w	r1, r3, #15
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	460b      	mov	r3, r1
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	440b      	add	r3, r1
 800d250:	00db      	lsls	r3, r3, #3
 800d252:	4403      	add	r3, r0
 800d254:	3338      	adds	r3, #56	; 0x38
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	fbb2 f1f3 	udiv	r1, r2, r3
 800d25c:	fb01 f303 	mul.w	r3, r1, r3
 800d260:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d262:	2b00      	cmp	r3, #0
 800d264:	d112      	bne.n	800d28c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d266:	78fb      	ldrb	r3, [r7, #3]
 800d268:	f003 020f 	and.w	r2, r3, #15
 800d26c:	6879      	ldr	r1, [r7, #4]
 800d26e:	4613      	mov	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	440b      	add	r3, r1
 800d278:	3318      	adds	r3, #24
 800d27a:	2200      	movs	r2, #0
 800d27c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d27e:	78f9      	ldrb	r1, [r7, #3]
 800d280:	2300      	movs	r3, #0
 800d282:	2200      	movs	r2, #0
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f002 f8f9 	bl	800f47c <USBD_LL_Transmit>
 800d28a:	e01f      	b.n	800d2cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	33b0      	adds	r3, #176	; 0xb0
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d010      	beq.n	800d2cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	33b0      	adds	r3, #176	; 0xb0
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2c8:	78fa      	ldrb	r2, [r7, #3]
 800d2ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b084      	sub	sp, #16
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	32b0      	adds	r2, #176	; 0xb0
 800d2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	32b0      	adds	r2, #176	; 0xb0
 800d2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d304:	2303      	movs	r3, #3
 800d306:	e01a      	b.n	800d33e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d308:	78fb      	ldrb	r3, [r7, #3]
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f002 f8f7 	bl	800f500 <USBD_LL_GetRxDataSize>
 800d312:	4602      	mov	r2, r0
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	33b0      	adds	r3, #176	; 0xb0
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d338:	4611      	mov	r1, r2
 800d33a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b084      	sub	sp, #16
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	32b0      	adds	r2, #176	; 0xb0
 800d358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d101      	bne.n	800d368 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d364:	2303      	movs	r3, #3
 800d366:	e025      	b.n	800d3b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	33b0      	adds	r3, #176	; 0xb0
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4413      	add	r3, r2
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d01a      	beq.n	800d3b2 <USBD_CDC_EP0_RxReady+0x6c>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d382:	2bff      	cmp	r3, #255	; 0xff
 800d384:	d015      	beq.n	800d3b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	33b0      	adds	r3, #176	; 0xb0
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d39e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	22ff      	movs	r2, #255	; 0xff
 800d3ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3c4:	2182      	movs	r1, #130	; 0x82
 800d3c6:	4818      	ldr	r0, [pc, #96]	; (800d428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3c8:	f000 fcbd 	bl	800dd46 <USBD_GetEpDesc>
 800d3cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3ce:	2101      	movs	r1, #1
 800d3d0:	4815      	ldr	r0, [pc, #84]	; (800d428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3d2:	f000 fcb8 	bl	800dd46 <USBD_GetEpDesc>
 800d3d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3d8:	2181      	movs	r1, #129	; 0x81
 800d3da:	4813      	ldr	r0, [pc, #76]	; (800d428 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3dc:	f000 fcb3 	bl	800dd46 <USBD_GetEpDesc>
 800d3e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	2210      	movs	r2, #16
 800d3ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d006      	beq.n	800d402 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3fc:	711a      	strb	r2, [r3, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d006      	beq.n	800d416 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d410:	711a      	strb	r2, [r3, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2243      	movs	r2, #67	; 0x43
 800d41a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d41c:	4b02      	ldr	r3, [pc, #8]	; (800d428 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20000050 	.word	0x20000050

0800d42c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d434:	2182      	movs	r1, #130	; 0x82
 800d436:	4818      	ldr	r0, [pc, #96]	; (800d498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d438:	f000 fc85 	bl	800dd46 <USBD_GetEpDesc>
 800d43c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d43e:	2101      	movs	r1, #1
 800d440:	4815      	ldr	r0, [pc, #84]	; (800d498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d442:	f000 fc80 	bl	800dd46 <USBD_GetEpDesc>
 800d446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d448:	2181      	movs	r1, #129	; 0x81
 800d44a:	4813      	ldr	r0, [pc, #76]	; (800d498 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d44c:	f000 fc7b 	bl	800dd46 <USBD_GetEpDesc>
 800d450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2210      	movs	r2, #16
 800d45c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d006      	beq.n	800d472 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2200      	movs	r2, #0
 800d468:	711a      	strb	r2, [r3, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f042 0202 	orr.w	r2, r2, #2
 800d470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2200      	movs	r2, #0
 800d47c:	711a      	strb	r2, [r3, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f042 0202 	orr.w	r2, r2, #2
 800d484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2243      	movs	r2, #67	; 0x43
 800d48a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d48c:	4b02      	ldr	r3, [pc, #8]	; (800d498 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3718      	adds	r7, #24
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	20000050 	.word	0x20000050

0800d49c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4a4:	2182      	movs	r1, #130	; 0x82
 800d4a6:	4818      	ldr	r0, [pc, #96]	; (800d508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4a8:	f000 fc4d 	bl	800dd46 <USBD_GetEpDesc>
 800d4ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	4815      	ldr	r0, [pc, #84]	; (800d508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4b2:	f000 fc48 	bl	800dd46 <USBD_GetEpDesc>
 800d4b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4b8:	2181      	movs	r1, #129	; 0x81
 800d4ba:	4813      	ldr	r0, [pc, #76]	; (800d508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4bc:	f000 fc43 	bl	800dd46 <USBD_GetEpDesc>
 800d4c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2210      	movs	r2, #16
 800d4cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d006      	beq.n	800d4e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4dc:	711a      	strb	r2, [r3, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d006      	beq.n	800d4f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4f0:	711a      	strb	r2, [r3, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2243      	movs	r2, #67	; 0x43
 800d4fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4fc:	4b02      	ldr	r3, [pc, #8]	; (800d508 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20000050 	.word	0x20000050

0800d50c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	220a      	movs	r2, #10
 800d518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d51a:	4b03      	ldr	r3, [pc, #12]	; (800d528 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	2000000c 	.word	0x2000000c

0800d52c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d53c:	2303      	movs	r3, #3
 800d53e:	e009      	b.n	800d554 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	33b0      	adds	r3, #176	; 0xb0
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d560:	b480      	push	{r7}
 800d562:	b087      	sub	sp, #28
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	32b0      	adds	r2, #176	; 0xb0
 800d576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d57a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d101      	bne.n	800d586 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d582:	2303      	movs	r3, #3
 800d584:	e008      	b.n	800d598 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	371c      	adds	r7, #28
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	32b0      	adds	r2, #176	; 0xb0
 800d5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d101      	bne.n	800d5c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e004      	b.n	800d5d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3714      	adds	r7, #20
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
	...

0800d5e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	32b0      	adds	r2, #176	; 0xb0
 800d5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d101      	bne.n	800d606 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d602:	2303      	movs	r3, #3
 800d604:	e025      	b.n	800d652 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d11f      	bne.n	800d650 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	2201      	movs	r2, #1
 800d614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d618:	4b10      	ldr	r3, [pc, #64]	; (800d65c <USBD_CDC_TransmitPacket+0x7c>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	f003 020f 	and.w	r2, r3, #15
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	4613      	mov	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4403      	add	r3, r0
 800d632:	3318      	adds	r3, #24
 800d634:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d636:	4b09      	ldr	r3, [pc, #36]	; (800d65c <USBD_CDC_TransmitPacket+0x7c>)
 800d638:	7819      	ldrb	r1, [r3, #0]
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f001 ff18 	bl	800f47c <USBD_LL_Transmit>

    ret = USBD_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d650:	7bfb      	ldrb	r3, [r7, #15]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20000093 	.word	0x20000093

0800d660 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	32b0      	adds	r2, #176	; 0xb0
 800d672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d676:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	32b0      	adds	r2, #176	; 0xb0
 800d682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d68a:	2303      	movs	r3, #3
 800d68c:	e018      	b.n	800d6c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	7c1b      	ldrb	r3, [r3, #16]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10a      	bne.n	800d6ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <USBD_CDC_ReceivePacket+0x68>)
 800d698:	7819      	ldrb	r1, [r3, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f001 ff0a 	bl	800f4be <USBD_LL_PrepareReceive>
 800d6aa:	e008      	b.n	800d6be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6ac:	4b06      	ldr	r3, [pc, #24]	; (800d6c8 <USBD_CDC_ReceivePacket+0x68>)
 800d6ae:	7819      	ldrb	r1, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6b6:	2340      	movs	r3, #64	; 0x40
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f001 ff00 	bl	800f4be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	20000094 	.word	0x20000094

0800d6cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e01f      	b.n	800d724 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d003      	beq.n	800d70a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	79fa      	ldrb	r2, [r7, #7]
 800d716:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f001 fd63 	bl	800f1e4 <USBD_LL_Init>
 800d71e:	4603      	mov	r3, r0
 800d720:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d722:	7dfb      	ldrb	r3, [r7, #23]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d736:	2300      	movs	r3, #0
 800d738:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d101      	bne.n	800d744 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d740:	2303      	movs	r3, #3
 800d742:	e025      	b.n	800d790 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	32ae      	adds	r2, #174	; 0xae
 800d756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00f      	beq.n	800d780 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	32ae      	adds	r2, #174	; 0xae
 800d76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d770:	f107 020e 	add.w	r2, r7, #14
 800d774:	4610      	mov	r0, r2
 800d776:	4798      	blx	r3
 800d778:	4602      	mov	r2, r0
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f001 fd81 	bl	800f2a8 <USBD_LL_Start>
 800d7a6:	4603      	mov	r3, r0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b084      	sub	sp, #16
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d009      	beq.n	800d7f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	78fa      	ldrb	r2, [r7, #3]
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	4798      	blx	r3
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d80a:	2300      	movs	r3, #0
 800d80c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	78fa      	ldrb	r2, [r7, #3]
 800d818:	4611      	mov	r1, r2
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	4798      	blx	r3
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d001      	beq.n	800d828 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d824:	2303      	movs	r3, #3
 800d826:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d828:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b084      	sub	sp, #16
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	f001 f8a6 	bl	800e996 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d858:	461a      	mov	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d866:	f003 031f 	and.w	r3, r3, #31
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d01a      	beq.n	800d8a4 <USBD_LL_SetupStage+0x72>
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d822      	bhi.n	800d8b8 <USBD_LL_SetupStage+0x86>
 800d872:	2b00      	cmp	r3, #0
 800d874:	d002      	beq.n	800d87c <USBD_LL_SetupStage+0x4a>
 800d876:	2b01      	cmp	r3, #1
 800d878:	d00a      	beq.n	800d890 <USBD_LL_SetupStage+0x5e>
 800d87a:	e01d      	b.n	800d8b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d882:	4619      	mov	r1, r3
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fad3 	bl	800de30 <USBD_StdDevReq>
 800d88a:	4603      	mov	r3, r0
 800d88c:	73fb      	strb	r3, [r7, #15]
      break;
 800d88e:	e020      	b.n	800d8d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d896:	4619      	mov	r1, r3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fb3b 	bl	800df14 <USBD_StdItfReq>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a2:	e016      	b.n	800d8d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fb9d 	bl	800dfec <USBD_StdEPReq>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8b6:	e00c      	b.n	800d8d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 fd4e 	bl	800f368 <USBD_LL_StallEP>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d8d0:	bf00      	nop
  }

  return ret;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	607a      	str	r2, [r7, #4]
 800d8e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d8ee:	7afb      	ldrb	r3, [r7, #11]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d16e      	bne.n	800d9d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d8fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d902:	2b03      	cmp	r3, #3
 800d904:	f040 8098 	bne.w	800da38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	689a      	ldr	r2, [r3, #8]
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	429a      	cmp	r2, r3
 800d912:	d913      	bls.n	800d93c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	689a      	ldr	r2, [r3, #8]
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	1ad2      	subs	r2, r2, r3
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	68da      	ldr	r2, [r3, #12]
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	4293      	cmp	r3, r2
 800d92c:	bf28      	it	cs
 800d92e:	4613      	movcs	r3, r2
 800d930:	461a      	mov	r2, r3
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f001 f922 	bl	800eb7e <USBD_CtlContinueRx>
 800d93a:	e07d      	b.n	800da38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d942:	f003 031f 	and.w	r3, r3, #31
 800d946:	2b02      	cmp	r3, #2
 800d948:	d014      	beq.n	800d974 <USBD_LL_DataOutStage+0x98>
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d81d      	bhi.n	800d98a <USBD_LL_DataOutStage+0xae>
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d002      	beq.n	800d958 <USBD_LL_DataOutStage+0x7c>
 800d952:	2b01      	cmp	r3, #1
 800d954:	d003      	beq.n	800d95e <USBD_LL_DataOutStage+0x82>
 800d956:	e018      	b.n	800d98a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d958:	2300      	movs	r3, #0
 800d95a:	75bb      	strb	r3, [r7, #22]
            break;
 800d95c:	e018      	b.n	800d990 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d964:	b2db      	uxtb	r3, r3
 800d966:	4619      	mov	r1, r3
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f000 f9d2 	bl	800dd12 <USBD_CoreFindIF>
 800d96e:	4603      	mov	r3, r0
 800d970:	75bb      	strb	r3, [r7, #22]
            break;
 800d972:	e00d      	b.n	800d990 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	4619      	mov	r1, r3
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 f9d4 	bl	800dd2c <USBD_CoreFindEP>
 800d984:	4603      	mov	r3, r0
 800d986:	75bb      	strb	r3, [r7, #22]
            break;
 800d988:	e002      	b.n	800d990 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d98a:	2300      	movs	r3, #0
 800d98c:	75bb      	strb	r3, [r7, #22]
            break;
 800d98e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d990:	7dbb      	ldrb	r3, [r7, #22]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d119      	bne.n	800d9ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d113      	bne.n	800d9ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d9a2:	7dba      	ldrb	r2, [r7, #22]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	32ae      	adds	r2, #174	; 0xae
 800d9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00b      	beq.n	800d9ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d9b2:	7dba      	ldrb	r2, [r7, #22]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d9ba:	7dba      	ldrb	r2, [r7, #22]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	32ae      	adds	r2, #174	; 0xae
 800d9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f001 f8e8 	bl	800eba0 <USBD_CtlSendStatus>
 800d9d0:	e032      	b.n	800da38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d9d2:	7afb      	ldrb	r3, [r7, #11]
 800d9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	4619      	mov	r1, r3
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f000 f9a5 	bl	800dd2c <USBD_CoreFindEP>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9e6:	7dbb      	ldrb	r3, [r7, #22]
 800d9e8:	2bff      	cmp	r3, #255	; 0xff
 800d9ea:	d025      	beq.n	800da38 <USBD_LL_DataOutStage+0x15c>
 800d9ec:	7dbb      	ldrb	r3, [r7, #22]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d122      	bne.n	800da38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b03      	cmp	r3, #3
 800d9fc:	d117      	bne.n	800da2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d9fe:	7dba      	ldrb	r2, [r7, #22]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	32ae      	adds	r2, #174	; 0xae
 800da04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00f      	beq.n	800da2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800da0e:	7dba      	ldrb	r2, [r7, #22]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da16:	7dba      	ldrb	r2, [r7, #22]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	32ae      	adds	r2, #174	; 0xae
 800da1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	7afa      	ldrb	r2, [r7, #11]
 800da24:	4611      	mov	r1, r2
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	4798      	blx	r3
 800da2a:	4603      	mov	r3, r0
 800da2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da2e:	7dfb      	ldrb	r3, [r7, #23]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800da34:	7dfb      	ldrb	r3, [r7, #23]
 800da36:	e000      	b.n	800da3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b086      	sub	sp, #24
 800da46:	af00      	add	r7, sp, #0
 800da48:	60f8      	str	r0, [r7, #12]
 800da4a:	460b      	mov	r3, r1
 800da4c:	607a      	str	r2, [r7, #4]
 800da4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da50:	7afb      	ldrb	r3, [r7, #11]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d16f      	bne.n	800db36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3314      	adds	r3, #20
 800da5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da62:	2b02      	cmp	r3, #2
 800da64:	d15a      	bne.n	800db1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	689a      	ldr	r2, [r3, #8]
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d914      	bls.n	800da9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	689a      	ldr	r2, [r3, #8]
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	1ad2      	subs	r2, r2, r3
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	461a      	mov	r2, r3
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f001 f84a 	bl	800eb22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da8e:	2300      	movs	r3, #0
 800da90:	2200      	movs	r2, #0
 800da92:	2100      	movs	r1, #0
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f001 fd12 	bl	800f4be <USBD_LL_PrepareReceive>
 800da9a:	e03f      	b.n	800db1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	68da      	ldr	r2, [r3, #12]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d11c      	bne.n	800dae2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d316      	bcc.n	800dae2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d20f      	bcs.n	800dae2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dac2:	2200      	movs	r2, #0
 800dac4:	2100      	movs	r1, #0
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f001 f82b 	bl	800eb22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dad4:	2300      	movs	r3, #0
 800dad6:	2200      	movs	r2, #0
 800dad8:	2100      	movs	r1, #0
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f001 fcef 	bl	800f4be <USBD_LL_PrepareReceive>
 800dae0:	e01c      	b.n	800db1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b03      	cmp	r3, #3
 800daec:	d10f      	bne.n	800db0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d009      	beq.n	800db0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800db0e:	2180      	movs	r1, #128	; 0x80
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f001 fc29 	bl	800f368 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f001 f855 	bl	800ebc6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d03a      	beq.n	800db9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f7ff fe42 	bl	800d7b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db34:	e032      	b.n	800db9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800db36:	7afb      	ldrb	r3, [r7, #11]
 800db38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	4619      	mov	r1, r3
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f000 f8f3 	bl	800dd2c <USBD_CoreFindEP>
 800db46:	4603      	mov	r3, r0
 800db48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
 800db4c:	2bff      	cmp	r3, #255	; 0xff
 800db4e:	d025      	beq.n	800db9c <USBD_LL_DataInStage+0x15a>
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d122      	bne.n	800db9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b03      	cmp	r3, #3
 800db60:	d11c      	bne.n	800db9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db62:	7dfa      	ldrb	r2, [r7, #23]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	32ae      	adds	r2, #174	; 0xae
 800db68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d014      	beq.n	800db9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db72:	7dfa      	ldrb	r2, [r7, #23]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db7a:	7dfa      	ldrb	r2, [r7, #23]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	32ae      	adds	r2, #174	; 0xae
 800db80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	7afa      	ldrb	r2, [r7, #11]
 800db88:	4611      	mov	r1, r2
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	4798      	blx	r3
 800db8e:	4603      	mov	r3, r0
 800db90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db92:	7dbb      	ldrb	r3, [r7, #22]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800db98:	7dbb      	ldrb	r3, [r7, #22]
 800db9a:	e000      	b.n	800db9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b084      	sub	sp, #16
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d014      	beq.n	800dc0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00e      	beq.n	800dc0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	6852      	ldr	r2, [r2, #4]
 800dbfa:	b2d2      	uxtb	r2, r2
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	4798      	blx	r3
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc0c:	2340      	movs	r3, #64	; 0x40
 800dc0e:	2200      	movs	r2, #0
 800dc10:	2100      	movs	r1, #0
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 fb63 	bl	800f2de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2240      	movs	r2, #64	; 0x40
 800dc24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc28:	2340      	movs	r3, #64	; 0x40
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2180      	movs	r1, #128	; 0x80
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f001 fb55 	bl	800f2de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2240      	movs	r2, #64	; 0x40
 800dc3e:	621a      	str	r2, [r3, #32]

  return ret;
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b083      	sub	sp, #12
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	460b      	mov	r3, r1
 800dc54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	78fa      	ldrb	r2, [r7, #3]
 800dc5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b083      	sub	sp, #12
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b04      	cmp	r3, #4
 800dc7c:	d006      	beq.n	800dc8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2204      	movs	r2, #4
 800dc90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b083      	sub	sp, #12
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d106      	bne.n	800dcc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	2b03      	cmp	r3, #3
 800dce4:	d110      	bne.n	800dd08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00b      	beq.n	800dd08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf6:	69db      	ldr	r3, [r3, #28]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	460b      	mov	r3, r1
 800dd36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b086      	sub	sp, #24
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	460b      	mov	r3, r1
 800dd50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	885b      	ldrh	r3, [r3, #2]
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d920      	bls.n	800ddb0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dd76:	e013      	b.n	800dda0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dd78:	f107 030a 	add.w	r3, r7, #10
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	6978      	ldr	r0, [r7, #20]
 800dd80:	f000 f81b 	bl	800ddba <USBD_GetNextDesc>
 800dd84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	785b      	ldrb	r3, [r3, #1]
 800dd8a:	2b05      	cmp	r3, #5
 800dd8c:	d108      	bne.n	800dda0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	789b      	ldrb	r3, [r3, #2]
 800dd96:	78fa      	ldrb	r2, [r7, #3]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d008      	beq.n	800ddae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	885b      	ldrh	r3, [r3, #2]
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	897b      	ldrh	r3, [r7, #10]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d8e5      	bhi.n	800dd78 <USBD_GetEpDesc+0x32>
 800ddac:	e000      	b.n	800ddb0 <USBD_GetEpDesc+0x6a>
          break;
 800ddae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ddb0:	693b      	ldr	r3, [r7, #16]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3718      	adds	r7, #24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b085      	sub	sp, #20
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	881a      	ldrh	r2, [r3, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	4413      	add	r3, r2
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4413      	add	r3, r2
 800dde4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dde6:	68fb      	ldr	r3, [r7, #12]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b087      	sub	sp, #28
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	3301      	adds	r3, #1
 800de0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800de12:	8a3b      	ldrh	r3, [r7, #16]
 800de14:	021b      	lsls	r3, r3, #8
 800de16:	b21a      	sxth	r2, r3
 800de18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	b21b      	sxth	r3, r3
 800de20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800de22:	89fb      	ldrh	r3, [r7, #14]
}
 800de24:	4618      	mov	r0, r3
 800de26:	371c      	adds	r7, #28
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de46:	2b40      	cmp	r3, #64	; 0x40
 800de48:	d005      	beq.n	800de56 <USBD_StdDevReq+0x26>
 800de4a:	2b40      	cmp	r3, #64	; 0x40
 800de4c:	d857      	bhi.n	800defe <USBD_StdDevReq+0xce>
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00f      	beq.n	800de72 <USBD_StdDevReq+0x42>
 800de52:	2b20      	cmp	r3, #32
 800de54:	d153      	bne.n	800defe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	32ae      	adds	r2, #174	; 0xae
 800de60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de64:	689b      	ldr	r3, [r3, #8]
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	4798      	blx	r3
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]
      break;
 800de70:	e04a      	b.n	800df08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	785b      	ldrb	r3, [r3, #1]
 800de76:	2b09      	cmp	r3, #9
 800de78:	d83b      	bhi.n	800def2 <USBD_StdDevReq+0xc2>
 800de7a:	a201      	add	r2, pc, #4	; (adr r2, 800de80 <USBD_StdDevReq+0x50>)
 800de7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de80:	0800ded5 	.word	0x0800ded5
 800de84:	0800dee9 	.word	0x0800dee9
 800de88:	0800def3 	.word	0x0800def3
 800de8c:	0800dedf 	.word	0x0800dedf
 800de90:	0800def3 	.word	0x0800def3
 800de94:	0800deb3 	.word	0x0800deb3
 800de98:	0800dea9 	.word	0x0800dea9
 800de9c:	0800def3 	.word	0x0800def3
 800dea0:	0800decb 	.word	0x0800decb
 800dea4:	0800debd 	.word	0x0800debd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fa3c 	bl	800e328 <USBD_GetDescriptor>
          break;
 800deb0:	e024      	b.n	800defc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800deb2:	6839      	ldr	r1, [r7, #0]
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 fbcb 	bl	800e650 <USBD_SetAddress>
          break;
 800deba:	e01f      	b.n	800defc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800debc:	6839      	ldr	r1, [r7, #0]
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fc0a 	bl	800e6d8 <USBD_SetConfig>
 800dec4:	4603      	mov	r3, r0
 800dec6:	73fb      	strb	r3, [r7, #15]
          break;
 800dec8:	e018      	b.n	800defc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fcad 	bl	800e82c <USBD_GetConfig>
          break;
 800ded2:	e013      	b.n	800defc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fcde 	bl	800e898 <USBD_GetStatus>
          break;
 800dedc:	e00e      	b.n	800defc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fd0d 	bl	800e900 <USBD_SetFeature>
          break;
 800dee6:	e009      	b.n	800defc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fd31 	bl	800e952 <USBD_ClrFeature>
          break;
 800def0:	e004      	b.n	800defc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fd88 	bl	800ea0a <USBD_CtlError>
          break;
 800defa:	bf00      	nop
      }
      break;
 800defc:	e004      	b.n	800df08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800defe:	6839      	ldr	r1, [r7, #0]
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 fd82 	bl	800ea0a <USBD_CtlError>
      break;
 800df06:	bf00      	nop
  }

  return ret;
 800df08:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop

0800df14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df2a:	2b40      	cmp	r3, #64	; 0x40
 800df2c:	d005      	beq.n	800df3a <USBD_StdItfReq+0x26>
 800df2e:	2b40      	cmp	r3, #64	; 0x40
 800df30:	d852      	bhi.n	800dfd8 <USBD_StdItfReq+0xc4>
 800df32:	2b00      	cmp	r3, #0
 800df34:	d001      	beq.n	800df3a <USBD_StdItfReq+0x26>
 800df36:	2b20      	cmp	r3, #32
 800df38:	d14e      	bne.n	800dfd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df40:	b2db      	uxtb	r3, r3
 800df42:	3b01      	subs	r3, #1
 800df44:	2b02      	cmp	r3, #2
 800df46:	d840      	bhi.n	800dfca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	889b      	ldrh	r3, [r3, #4]
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d836      	bhi.n	800dfc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	889b      	ldrh	r3, [r3, #4]
 800df56:	b2db      	uxtb	r3, r3
 800df58:	4619      	mov	r1, r3
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff fed9 	bl	800dd12 <USBD_CoreFindIF>
 800df60:	4603      	mov	r3, r0
 800df62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df64:	7bbb      	ldrb	r3, [r7, #14]
 800df66:	2bff      	cmp	r3, #255	; 0xff
 800df68:	d01d      	beq.n	800dfa6 <USBD_StdItfReq+0x92>
 800df6a:	7bbb      	ldrb	r3, [r7, #14]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d11a      	bne.n	800dfa6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800df70:	7bba      	ldrb	r2, [r7, #14]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	32ae      	adds	r2, #174	; 0xae
 800df76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00f      	beq.n	800dfa0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800df80:	7bba      	ldrb	r2, [r7, #14]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df88:	7bba      	ldrb	r2, [r7, #14]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	32ae      	adds	r2, #174	; 0xae
 800df8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	4798      	blx	r3
 800df9a:	4603      	mov	r3, r0
 800df9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df9e:	e004      	b.n	800dfaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dfa0:	2303      	movs	r3, #3
 800dfa2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dfa4:	e001      	b.n	800dfaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	88db      	ldrh	r3, [r3, #6]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d110      	bne.n	800dfd4 <USBD_StdItfReq+0xc0>
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10d      	bne.n	800dfd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 fdf1 	bl	800eba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dfbe:	e009      	b.n	800dfd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dfc0:	6839      	ldr	r1, [r7, #0]
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fd21 	bl	800ea0a <USBD_CtlError>
          break;
 800dfc8:	e004      	b.n	800dfd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dfca:	6839      	ldr	r1, [r7, #0]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 fd1c 	bl	800ea0a <USBD_CtlError>
          break;
 800dfd2:	e000      	b.n	800dfd6 <USBD_StdItfReq+0xc2>
          break;
 800dfd4:	bf00      	nop
      }
      break;
 800dfd6:	e004      	b.n	800dfe2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 fd15 	bl	800ea0a <USBD_CtlError>
      break;
 800dfe0:	bf00      	nop
  }

  return ret;
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dff6:	2300      	movs	r3, #0
 800dff8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	889b      	ldrh	r3, [r3, #4]
 800dffe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e008:	2b40      	cmp	r3, #64	; 0x40
 800e00a:	d007      	beq.n	800e01c <USBD_StdEPReq+0x30>
 800e00c:	2b40      	cmp	r3, #64	; 0x40
 800e00e:	f200 817f 	bhi.w	800e310 <USBD_StdEPReq+0x324>
 800e012:	2b00      	cmp	r3, #0
 800e014:	d02a      	beq.n	800e06c <USBD_StdEPReq+0x80>
 800e016:	2b20      	cmp	r3, #32
 800e018:	f040 817a 	bne.w	800e310 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e01c:	7bbb      	ldrb	r3, [r7, #14]
 800e01e:	4619      	mov	r1, r3
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff fe83 	bl	800dd2c <USBD_CoreFindEP>
 800e026:	4603      	mov	r3, r0
 800e028:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e02a:	7b7b      	ldrb	r3, [r7, #13]
 800e02c:	2bff      	cmp	r3, #255	; 0xff
 800e02e:	f000 8174 	beq.w	800e31a <USBD_StdEPReq+0x32e>
 800e032:	7b7b      	ldrb	r3, [r7, #13]
 800e034:	2b00      	cmp	r3, #0
 800e036:	f040 8170 	bne.w	800e31a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e03a:	7b7a      	ldrb	r2, [r7, #13]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e042:	7b7a      	ldrb	r2, [r7, #13]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	32ae      	adds	r2, #174	; 0xae
 800e048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 8163 	beq.w	800e31a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e054:	7b7a      	ldrb	r2, [r7, #13]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	32ae      	adds	r2, #174	; 0xae
 800e05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	6839      	ldr	r1, [r7, #0]
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	4798      	blx	r3
 800e066:	4603      	mov	r3, r0
 800e068:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e06a:	e156      	b.n	800e31a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	785b      	ldrb	r3, [r3, #1]
 800e070:	2b03      	cmp	r3, #3
 800e072:	d008      	beq.n	800e086 <USBD_StdEPReq+0x9a>
 800e074:	2b03      	cmp	r3, #3
 800e076:	f300 8145 	bgt.w	800e304 <USBD_StdEPReq+0x318>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 809b 	beq.w	800e1b6 <USBD_StdEPReq+0x1ca>
 800e080:	2b01      	cmp	r3, #1
 800e082:	d03c      	beq.n	800e0fe <USBD_StdEPReq+0x112>
 800e084:	e13e      	b.n	800e304 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d002      	beq.n	800e098 <USBD_StdEPReq+0xac>
 800e092:	2b03      	cmp	r3, #3
 800e094:	d016      	beq.n	800e0c4 <USBD_StdEPReq+0xd8>
 800e096:	e02c      	b.n	800e0f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e098:	7bbb      	ldrb	r3, [r7, #14]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00d      	beq.n	800e0ba <USBD_StdEPReq+0xce>
 800e09e:	7bbb      	ldrb	r3, [r7, #14]
 800e0a0:	2b80      	cmp	r3, #128	; 0x80
 800e0a2:	d00a      	beq.n	800e0ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0a4:	7bbb      	ldrb	r3, [r7, #14]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f001 f95d 	bl	800f368 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0ae:	2180      	movs	r1, #128	; 0x80
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f001 f959 	bl	800f368 <USBD_LL_StallEP>
 800e0b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e0b8:	e020      	b.n	800e0fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 fca4 	bl	800ea0a <USBD_CtlError>
              break;
 800e0c2:	e01b      	b.n	800e0fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	885b      	ldrh	r3, [r3, #2]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d10e      	bne.n	800e0ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e0cc:	7bbb      	ldrb	r3, [r7, #14]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00b      	beq.n	800e0ea <USBD_StdEPReq+0xfe>
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
 800e0d4:	2b80      	cmp	r3, #128	; 0x80
 800e0d6:	d008      	beq.n	800e0ea <USBD_StdEPReq+0xfe>
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	88db      	ldrh	r3, [r3, #6]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d104      	bne.n	800e0ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0e0:	7bbb      	ldrb	r3, [r7, #14]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f001 f93f 	bl	800f368 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 fd58 	bl	800eba0 <USBD_CtlSendStatus>

              break;
 800e0f0:	e004      	b.n	800e0fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 fc88 	bl	800ea0a <USBD_CtlError>
              break;
 800e0fa:	bf00      	nop
          }
          break;
 800e0fc:	e107      	b.n	800e30e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b02      	cmp	r3, #2
 800e108:	d002      	beq.n	800e110 <USBD_StdEPReq+0x124>
 800e10a:	2b03      	cmp	r3, #3
 800e10c:	d016      	beq.n	800e13c <USBD_StdEPReq+0x150>
 800e10e:	e04b      	b.n	800e1a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e110:	7bbb      	ldrb	r3, [r7, #14]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00d      	beq.n	800e132 <USBD_StdEPReq+0x146>
 800e116:	7bbb      	ldrb	r3, [r7, #14]
 800e118:	2b80      	cmp	r3, #128	; 0x80
 800e11a:	d00a      	beq.n	800e132 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e11c:	7bbb      	ldrb	r3, [r7, #14]
 800e11e:	4619      	mov	r1, r3
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f001 f921 	bl	800f368 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e126:	2180      	movs	r1, #128	; 0x80
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f001 f91d 	bl	800f368 <USBD_LL_StallEP>
 800e12e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e130:	e040      	b.n	800e1b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e132:	6839      	ldr	r1, [r7, #0]
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 fc68 	bl	800ea0a <USBD_CtlError>
              break;
 800e13a:	e03b      	b.n	800e1b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	885b      	ldrh	r3, [r3, #2]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d136      	bne.n	800e1b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e144:	7bbb      	ldrb	r3, [r7, #14]
 800e146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d004      	beq.n	800e158 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e14e:	7bbb      	ldrb	r3, [r7, #14]
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f001 f927 	bl	800f3a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 fd21 	bl	800eba0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e15e:	7bbb      	ldrb	r3, [r7, #14]
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7ff fde2 	bl	800dd2c <USBD_CoreFindEP>
 800e168:	4603      	mov	r3, r0
 800e16a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e16c:	7b7b      	ldrb	r3, [r7, #13]
 800e16e:	2bff      	cmp	r3, #255	; 0xff
 800e170:	d01f      	beq.n	800e1b2 <USBD_StdEPReq+0x1c6>
 800e172:	7b7b      	ldrb	r3, [r7, #13]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d11c      	bne.n	800e1b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e178:	7b7a      	ldrb	r2, [r7, #13]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e180:	7b7a      	ldrb	r2, [r7, #13]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	32ae      	adds	r2, #174	; 0xae
 800e186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d010      	beq.n	800e1b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e190:	7b7a      	ldrb	r2, [r7, #13]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	32ae      	adds	r2, #174	; 0xae
 800e196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	4798      	blx	r3
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e1a6:	e004      	b.n	800e1b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 fc2d 	bl	800ea0a <USBD_CtlError>
              break;
 800e1b0:	e000      	b.n	800e1b4 <USBD_StdEPReq+0x1c8>
              break;
 800e1b2:	bf00      	nop
          }
          break;
 800e1b4:	e0ab      	b.n	800e30e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d002      	beq.n	800e1c8 <USBD_StdEPReq+0x1dc>
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	d032      	beq.n	800e22c <USBD_StdEPReq+0x240>
 800e1c6:	e097      	b.n	800e2f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1c8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d007      	beq.n	800e1de <USBD_StdEPReq+0x1f2>
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
 800e1d0:	2b80      	cmp	r3, #128	; 0x80
 800e1d2:	d004      	beq.n	800e1de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fc17 	bl	800ea0a <USBD_CtlError>
                break;
 800e1dc:	e091      	b.n	800e302 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	da0b      	bge.n	800e1fe <USBD_StdEPReq+0x212>
 800e1e6:	7bbb      	ldrb	r3, [r7, #14]
 800e1e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	3310      	adds	r3, #16
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	3304      	adds	r3, #4
 800e1fc:	e00b      	b.n	800e216 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e1fe:	7bbb      	ldrb	r3, [r7, #14]
 800e200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e204:	4613      	mov	r3, r2
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	4413      	add	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	4413      	add	r3, r2
 800e214:	3304      	adds	r3, #4
 800e216:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	2200      	movs	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2202      	movs	r2, #2
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fc61 	bl	800eaec <USBD_CtlSendData>
              break;
 800e22a:	e06a      	b.n	800e302 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e22c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e230:	2b00      	cmp	r3, #0
 800e232:	da11      	bge.n	800e258 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e234:	7bbb      	ldrb	r3, [r7, #14]
 800e236:	f003 020f 	and.w	r2, r3, #15
 800e23a:	6879      	ldr	r1, [r7, #4]
 800e23c:	4613      	mov	r3, r2
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4413      	add	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	440b      	add	r3, r1
 800e246:	3324      	adds	r3, #36	; 0x24
 800e248:	881b      	ldrh	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d117      	bne.n	800e27e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e24e:	6839      	ldr	r1, [r7, #0]
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 fbda 	bl	800ea0a <USBD_CtlError>
                  break;
 800e256:	e054      	b.n	800e302 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e258:	7bbb      	ldrb	r3, [r7, #14]
 800e25a:	f003 020f 	and.w	r2, r3, #15
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	4613      	mov	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d104      	bne.n	800e27e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fbc7 	bl	800ea0a <USBD_CtlError>
                  break;
 800e27c:	e041      	b.n	800e302 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e27e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e282:	2b00      	cmp	r3, #0
 800e284:	da0b      	bge.n	800e29e <USBD_StdEPReq+0x2b2>
 800e286:	7bbb      	ldrb	r3, [r7, #14]
 800e288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e28c:	4613      	mov	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	3310      	adds	r3, #16
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	4413      	add	r3, r2
 800e29a:	3304      	adds	r3, #4
 800e29c:	e00b      	b.n	800e2b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e29e:	7bbb      	ldrb	r3, [r7, #14]
 800e2a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e2b8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d002      	beq.n	800e2c4 <USBD_StdEPReq+0x2d8>
 800e2be:	7bbb      	ldrb	r3, [r7, #14]
 800e2c0:	2b80      	cmp	r3, #128	; 0x80
 800e2c2:	d103      	bne.n	800e2cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	e00e      	b.n	800e2ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e2cc:	7bbb      	ldrb	r3, [r7, #14]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f001 f887 	bl	800f3e4 <USBD_LL_IsStallEP>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d003      	beq.n	800e2e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	e002      	b.n	800e2ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2202      	movs	r2, #2
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fbfb 	bl	800eaec <USBD_CtlSendData>
              break;
 800e2f6:	e004      	b.n	800e302 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fb85 	bl	800ea0a <USBD_CtlError>
              break;
 800e300:	bf00      	nop
          }
          break;
 800e302:	e004      	b.n	800e30e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fb7f 	bl	800ea0a <USBD_CtlError>
          break;
 800e30c:	bf00      	nop
      }
      break;
 800e30e:	e005      	b.n	800e31c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fb79 	bl	800ea0a <USBD_CtlError>
      break;
 800e318:	e000      	b.n	800e31c <USBD_StdEPReq+0x330>
      break;
 800e31a:	bf00      	nop
  }

  return ret;
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
	...

0800e328 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e332:	2300      	movs	r3, #0
 800e334:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e33a:	2300      	movs	r3, #0
 800e33c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	885b      	ldrh	r3, [r3, #2]
 800e342:	0a1b      	lsrs	r3, r3, #8
 800e344:	b29b      	uxth	r3, r3
 800e346:	3b01      	subs	r3, #1
 800e348:	2b0e      	cmp	r3, #14
 800e34a:	f200 8152 	bhi.w	800e5f2 <USBD_GetDescriptor+0x2ca>
 800e34e:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <USBD_GetDescriptor+0x2c>)
 800e350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e354:	0800e3c5 	.word	0x0800e3c5
 800e358:	0800e3dd 	.word	0x0800e3dd
 800e35c:	0800e41d 	.word	0x0800e41d
 800e360:	0800e5f3 	.word	0x0800e5f3
 800e364:	0800e5f3 	.word	0x0800e5f3
 800e368:	0800e593 	.word	0x0800e593
 800e36c:	0800e5bf 	.word	0x0800e5bf
 800e370:	0800e5f3 	.word	0x0800e5f3
 800e374:	0800e5f3 	.word	0x0800e5f3
 800e378:	0800e5f3 	.word	0x0800e5f3
 800e37c:	0800e5f3 	.word	0x0800e5f3
 800e380:	0800e5f3 	.word	0x0800e5f3
 800e384:	0800e5f3 	.word	0x0800e5f3
 800e388:	0800e5f3 	.word	0x0800e5f3
 800e38c:	0800e391 	.word	0x0800e391
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e396:	69db      	ldr	r3, [r3, #28]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00b      	beq.n	800e3b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3a2:	69db      	ldr	r3, [r3, #28]
 800e3a4:	687a      	ldr	r2, [r7, #4]
 800e3a6:	7c12      	ldrb	r2, [r2, #16]
 800e3a8:	f107 0108 	add.w	r1, r7, #8
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	4798      	blx	r3
 800e3b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3b2:	e126      	b.n	800e602 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fb27 	bl	800ea0a <USBD_CtlError>
        err++;
 800e3bc:	7afb      	ldrb	r3, [r7, #11]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	72fb      	strb	r3, [r7, #11]
      break;
 800e3c2:	e11e      	b.n	800e602 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	7c12      	ldrb	r2, [r2, #16]
 800e3d0:	f107 0108 	add.w	r1, r7, #8
 800e3d4:	4610      	mov	r0, r2
 800e3d6:	4798      	blx	r3
 800e3d8:	60f8      	str	r0, [r7, #12]
      break;
 800e3da:	e112      	b.n	800e602 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	7c1b      	ldrb	r3, [r3, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10d      	bne.n	800e400 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ec:	f107 0208 	add.w	r2, r7, #8
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	4798      	blx	r3
 800e3f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	2202      	movs	r2, #2
 800e3fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e3fe:	e100      	b.n	800e602 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e408:	f107 0208 	add.w	r2, r7, #8
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
 800e410:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3301      	adds	r3, #1
 800e416:	2202      	movs	r2, #2
 800e418:	701a      	strb	r2, [r3, #0]
      break;
 800e41a:	e0f2      	b.n	800e602 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	885b      	ldrh	r3, [r3, #2]
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b05      	cmp	r3, #5
 800e424:	f200 80ac 	bhi.w	800e580 <USBD_GetDescriptor+0x258>
 800e428:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <USBD_GetDescriptor+0x108>)
 800e42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42e:	bf00      	nop
 800e430:	0800e449 	.word	0x0800e449
 800e434:	0800e47d 	.word	0x0800e47d
 800e438:	0800e4b1 	.word	0x0800e4b1
 800e43c:	0800e4e5 	.word	0x0800e4e5
 800e440:	0800e519 	.word	0x0800e519
 800e444:	0800e54d 	.word	0x0800e54d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00b      	beq.n	800e46c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	7c12      	ldrb	r2, [r2, #16]
 800e460:	f107 0108 	add.w	r1, r7, #8
 800e464:	4610      	mov	r0, r2
 800e466:	4798      	blx	r3
 800e468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e46a:	e091      	b.n	800e590 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e46c:	6839      	ldr	r1, [r7, #0]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 facb 	bl	800ea0a <USBD_CtlError>
            err++;
 800e474:	7afb      	ldrb	r3, [r7, #11]
 800e476:	3301      	adds	r3, #1
 800e478:	72fb      	strb	r3, [r7, #11]
          break;
 800e47a:	e089      	b.n	800e590 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00b      	beq.n	800e4a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	7c12      	ldrb	r2, [r2, #16]
 800e494:	f107 0108 	add.w	r1, r7, #8
 800e498:	4610      	mov	r0, r2
 800e49a:	4798      	blx	r3
 800e49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e49e:	e077      	b.n	800e590 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4a0:	6839      	ldr	r1, [r7, #0]
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 fab1 	bl	800ea0a <USBD_CtlError>
            err++;
 800e4a8:	7afb      	ldrb	r3, [r7, #11]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ae:	e06f      	b.n	800e590 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00b      	beq.n	800e4d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	7c12      	ldrb	r2, [r2, #16]
 800e4c8:	f107 0108 	add.w	r1, r7, #8
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	4798      	blx	r3
 800e4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4d2:	e05d      	b.n	800e590 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fa97 	bl	800ea0a <USBD_CtlError>
            err++;
 800e4dc:	7afb      	ldrb	r3, [r7, #11]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e4e2:	e055      	b.n	800e590 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ea:	691b      	ldr	r3, [r3, #16]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00b      	beq.n	800e508 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	7c12      	ldrb	r2, [r2, #16]
 800e4fc:	f107 0108 	add.w	r1, r7, #8
 800e500:	4610      	mov	r0, r2
 800e502:	4798      	blx	r3
 800e504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e506:	e043      	b.n	800e590 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e508:	6839      	ldr	r1, [r7, #0]
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 fa7d 	bl	800ea0a <USBD_CtlError>
            err++;
 800e510:	7afb      	ldrb	r3, [r7, #11]
 800e512:	3301      	adds	r3, #1
 800e514:	72fb      	strb	r3, [r7, #11]
          break;
 800e516:	e03b      	b.n	800e590 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e51e:	695b      	ldr	r3, [r3, #20]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00b      	beq.n	800e53c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e52a:	695b      	ldr	r3, [r3, #20]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	7c12      	ldrb	r2, [r2, #16]
 800e530:	f107 0108 	add.w	r1, r7, #8
 800e534:	4610      	mov	r0, r2
 800e536:	4798      	blx	r3
 800e538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e53a:	e029      	b.n	800e590 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e53c:	6839      	ldr	r1, [r7, #0]
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 fa63 	bl	800ea0a <USBD_CtlError>
            err++;
 800e544:	7afb      	ldrb	r3, [r7, #11]
 800e546:	3301      	adds	r3, #1
 800e548:	72fb      	strb	r3, [r7, #11]
          break;
 800e54a:	e021      	b.n	800e590 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e552:	699b      	ldr	r3, [r3, #24]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00b      	beq.n	800e570 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e55e:	699b      	ldr	r3, [r3, #24]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	7c12      	ldrb	r2, [r2, #16]
 800e564:	f107 0108 	add.w	r1, r7, #8
 800e568:	4610      	mov	r0, r2
 800e56a:	4798      	blx	r3
 800e56c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e56e:	e00f      	b.n	800e590 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e570:	6839      	ldr	r1, [r7, #0]
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fa49 	bl	800ea0a <USBD_CtlError>
            err++;
 800e578:	7afb      	ldrb	r3, [r7, #11]
 800e57a:	3301      	adds	r3, #1
 800e57c:	72fb      	strb	r3, [r7, #11]
          break;
 800e57e:	e007      	b.n	800e590 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fa41 	bl	800ea0a <USBD_CtlError>
          err++;
 800e588:	7afb      	ldrb	r3, [r7, #11]
 800e58a:	3301      	adds	r3, #1
 800e58c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e58e:	bf00      	nop
      }
      break;
 800e590:	e037      	b.n	800e602 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	7c1b      	ldrb	r3, [r3, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d109      	bne.n	800e5ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a2:	f107 0208 	add.w	r2, r7, #8
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	4798      	blx	r3
 800e5aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5ac:	e029      	b.n	800e602 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5ae:	6839      	ldr	r1, [r7, #0]
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 fa2a 	bl	800ea0a <USBD_CtlError>
        err++;
 800e5b6:	7afb      	ldrb	r3, [r7, #11]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	72fb      	strb	r3, [r7, #11]
      break;
 800e5bc:	e021      	b.n	800e602 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	7c1b      	ldrb	r3, [r3, #16]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10d      	bne.n	800e5e2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ce:	f107 0208 	add.w	r2, r7, #8
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	4798      	blx	r3
 800e5d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	2207      	movs	r2, #7
 800e5de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5e0:	e00f      	b.n	800e602 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fa10 	bl	800ea0a <USBD_CtlError>
        err++;
 800e5ea:	7afb      	ldrb	r3, [r7, #11]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e5f0:	e007      	b.n	800e602 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fa08 	bl	800ea0a <USBD_CtlError>
      err++;
 800e5fa:	7afb      	ldrb	r3, [r7, #11]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	72fb      	strb	r3, [r7, #11]
      break;
 800e600:	bf00      	nop
  }

  if (err != 0U)
 800e602:	7afb      	ldrb	r3, [r7, #11]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d11e      	bne.n	800e646 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	88db      	ldrh	r3, [r3, #6]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d016      	beq.n	800e63e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e610:	893b      	ldrh	r3, [r7, #8]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00e      	beq.n	800e634 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	88da      	ldrh	r2, [r3, #6]
 800e61a:	893b      	ldrh	r3, [r7, #8]
 800e61c:	4293      	cmp	r3, r2
 800e61e:	bf28      	it	cs
 800e620:	4613      	movcs	r3, r2
 800e622:	b29b      	uxth	r3, r3
 800e624:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e626:	893b      	ldrh	r3, [r7, #8]
 800e628:	461a      	mov	r2, r3
 800e62a:	68f9      	ldr	r1, [r7, #12]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 fa5d 	bl	800eaec <USBD_CtlSendData>
 800e632:	e009      	b.n	800e648 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e634:	6839      	ldr	r1, [r7, #0]
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f9e7 	bl	800ea0a <USBD_CtlError>
 800e63c:	e004      	b.n	800e648 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 faae 	bl	800eba0 <USBD_CtlSendStatus>
 800e644:	e000      	b.n	800e648 <USBD_GetDescriptor+0x320>
    return;
 800e646:	bf00      	nop
  }
}
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop

0800e650 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	889b      	ldrh	r3, [r3, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d131      	bne.n	800e6c6 <USBD_SetAddress+0x76>
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	88db      	ldrh	r3, [r3, #6]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d12d      	bne.n	800e6c6 <USBD_SetAddress+0x76>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	885b      	ldrh	r3, [r3, #2]
 800e66e:	2b7f      	cmp	r3, #127	; 0x7f
 800e670:	d829      	bhi.n	800e6c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	885b      	ldrh	r3, [r3, #2]
 800e676:	b2db      	uxtb	r3, r3
 800e678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e67c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e684:	b2db      	uxtb	r3, r3
 800e686:	2b03      	cmp	r3, #3
 800e688:	d104      	bne.n	800e694 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 f9bc 	bl	800ea0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e692:	e01d      	b.n	800e6d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7bfa      	ldrb	r2, [r7, #15]
 800e698:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	4619      	mov	r1, r3
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fecc 	bl	800f43e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fa7a 	bl	800eba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d004      	beq.n	800e6bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ba:	e009      	b.n	800e6d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6c4:	e004      	b.n	800e6d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e6c6:	6839      	ldr	r1, [r7, #0]
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f99e 	bl	800ea0a <USBD_CtlError>
  }
}
 800e6ce:	bf00      	nop
 800e6d0:	bf00      	nop
 800e6d2:	3710      	adds	r7, #16
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	885b      	ldrh	r3, [r3, #2]
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	4b4e      	ldr	r3, [pc, #312]	; (800e828 <USBD_SetConfig+0x150>)
 800e6ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e6f0:	4b4d      	ldr	r3, [pc, #308]	; (800e828 <USBD_SetConfig+0x150>)
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d905      	bls.n	800e704 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e6f8:	6839      	ldr	r1, [r7, #0]
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f985 	bl	800ea0a <USBD_CtlError>
    return USBD_FAIL;
 800e700:	2303      	movs	r3, #3
 800e702:	e08c      	b.n	800e81e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	d002      	beq.n	800e716 <USBD_SetConfig+0x3e>
 800e710:	2b03      	cmp	r3, #3
 800e712:	d029      	beq.n	800e768 <USBD_SetConfig+0x90>
 800e714:	e075      	b.n	800e802 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e716:	4b44      	ldr	r3, [pc, #272]	; (800e828 <USBD_SetConfig+0x150>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d020      	beq.n	800e760 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e71e:	4b42      	ldr	r3, [pc, #264]	; (800e828 <USBD_SetConfig+0x150>)
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	461a      	mov	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e728:	4b3f      	ldr	r3, [pc, #252]	; (800e828 <USBD_SetConfig+0x150>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7ff f849 	bl	800d7c6 <USBD_SetClassConfig>
 800e734:	4603      	mov	r3, r0
 800e736:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e738:	7bfb      	ldrb	r3, [r7, #15]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d008      	beq.n	800e750 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e73e:	6839      	ldr	r1, [r7, #0]
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 f962 	bl	800ea0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2202      	movs	r2, #2
 800e74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e74e:	e065      	b.n	800e81c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 fa25 	bl	800eba0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2203      	movs	r2, #3
 800e75a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e75e:	e05d      	b.n	800e81c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 fa1d 	bl	800eba0 <USBD_CtlSendStatus>
      break;
 800e766:	e059      	b.n	800e81c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e768:	4b2f      	ldr	r3, [pc, #188]	; (800e828 <USBD_SetConfig+0x150>)
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d112      	bne.n	800e796 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2202      	movs	r2, #2
 800e774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e778:	4b2b      	ldr	r3, [pc, #172]	; (800e828 <USBD_SetConfig+0x150>)
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	461a      	mov	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e782:	4b29      	ldr	r3, [pc, #164]	; (800e828 <USBD_SetConfig+0x150>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7ff f838 	bl	800d7fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fa06 	bl	800eba0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e794:	e042      	b.n	800e81c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e796:	4b24      	ldr	r3, [pc, #144]	; (800e828 <USBD_SetConfig+0x150>)
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d02a      	beq.n	800e7fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff f826 	bl	800d7fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e7b2:	4b1d      	ldr	r3, [pc, #116]	; (800e828 <USBD_SetConfig+0x150>)
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e7bc:	4b1a      	ldr	r3, [pc, #104]	; (800e828 <USBD_SetConfig+0x150>)
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7fe ffff 	bl	800d7c6 <USBD_SetClassConfig>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00f      	beq.n	800e7f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e7d2:	6839      	ldr	r1, [r7, #0]
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 f918 	bl	800ea0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f7ff f80b 	bl	800d7fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2202      	movs	r2, #2
 800e7ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e7f0:	e014      	b.n	800e81c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f9d4 	bl	800eba0 <USBD_CtlSendStatus>
      break;
 800e7f8:	e010      	b.n	800e81c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 f9d0 	bl	800eba0 <USBD_CtlSendStatus>
      break;
 800e800:	e00c      	b.n	800e81c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e802:	6839      	ldr	r1, [r7, #0]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f900 	bl	800ea0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e80a:	4b07      	ldr	r3, [pc, #28]	; (800e828 <USBD_SetConfig+0x150>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7fe fff4 	bl	800d7fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e816:	2303      	movs	r3, #3
 800e818:	73fb      	strb	r3, [r7, #15]
      break;
 800e81a:	bf00      	nop
  }

  return ret;
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20000778 	.word	0x20000778

0800e82c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	88db      	ldrh	r3, [r3, #6]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d004      	beq.n	800e848 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f8e2 	bl	800ea0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e846:	e023      	b.n	800e890 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b02      	cmp	r3, #2
 800e852:	dc02      	bgt.n	800e85a <USBD_GetConfig+0x2e>
 800e854:	2b00      	cmp	r3, #0
 800e856:	dc03      	bgt.n	800e860 <USBD_GetConfig+0x34>
 800e858:	e015      	b.n	800e886 <USBD_GetConfig+0x5a>
 800e85a:	2b03      	cmp	r3, #3
 800e85c:	d00b      	beq.n	800e876 <USBD_GetConfig+0x4a>
 800e85e:	e012      	b.n	800e886 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	3308      	adds	r3, #8
 800e86a:	2201      	movs	r2, #1
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 f93c 	bl	800eaec <USBD_CtlSendData>
        break;
 800e874:	e00c      	b.n	800e890 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	3304      	adds	r3, #4
 800e87a:	2201      	movs	r2, #1
 800e87c:	4619      	mov	r1, r3
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f934 	bl	800eaec <USBD_CtlSendData>
        break;
 800e884:	e004      	b.n	800e890 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e886:	6839      	ldr	r1, [r7, #0]
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f8be 	bl	800ea0a <USBD_CtlError>
        break;
 800e88e:	bf00      	nop
}
 800e890:	bf00      	nop
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	2b02      	cmp	r3, #2
 800e8ae:	d81e      	bhi.n	800e8ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	88db      	ldrh	r3, [r3, #6]
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d004      	beq.n	800e8c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e8b8:	6839      	ldr	r1, [r7, #0]
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 f8a5 	bl	800ea0a <USBD_CtlError>
        break;
 800e8c0:	e01a      	b.n	800e8f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d005      	beq.n	800e8de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	f043 0202 	orr.w	r2, r3, #2
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	330c      	adds	r3, #12
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f900 	bl	800eaec <USBD_CtlSendData>
      break;
 800e8ec:	e004      	b.n	800e8f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 f88a 	bl	800ea0a <USBD_CtlError>
      break;
 800e8f6:	bf00      	nop
  }
}
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	885b      	ldrh	r3, [r3, #2]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d107      	bne.n	800e922 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f940 	bl	800eba0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e920:	e013      	b.n	800e94a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	885b      	ldrh	r3, [r3, #2]
 800e926:	2b02      	cmp	r3, #2
 800e928:	d10b      	bne.n	800e942 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	889b      	ldrh	r3, [r3, #4]
 800e92e:	0a1b      	lsrs	r3, r3, #8
 800e930:	b29b      	uxth	r3, r3
 800e932:	b2da      	uxtb	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f930 	bl	800eba0 <USBD_CtlSendStatus>
}
 800e940:	e003      	b.n	800e94a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e942:	6839      	ldr	r1, [r7, #0]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f860 	bl	800ea0a <USBD_CtlError>
}
 800e94a:	bf00      	nop
 800e94c:	3708      	adds	r7, #8
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b082      	sub	sp, #8
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e962:	b2db      	uxtb	r3, r3
 800e964:	3b01      	subs	r3, #1
 800e966:	2b02      	cmp	r3, #2
 800e968:	d80b      	bhi.n	800e982 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	885b      	ldrh	r3, [r3, #2]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d10c      	bne.n	800e98c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f910 	bl	800eba0 <USBD_CtlSendStatus>
      }
      break;
 800e980:	e004      	b.n	800e98c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 f840 	bl	800ea0a <USBD_CtlError>
      break;
 800e98a:	e000      	b.n	800e98e <USBD_ClrFeature+0x3c>
      break;
 800e98c:	bf00      	nop
  }
}
 800e98e:	bf00      	nop
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b084      	sub	sp, #16
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
 800e99e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	781a      	ldrb	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	781a      	ldrb	r2, [r3, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f7ff fa17 	bl	800ddf4 <SWAPBYTE>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f7ff fa0a 	bl	800ddf4 <SWAPBYTE>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7ff f9fd 	bl	800ddf4 <SWAPBYTE>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	80da      	strh	r2, [r3, #6]
}
 800ea02:	bf00      	nop
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea14:	2180      	movs	r1, #128	; 0x80
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 fca6 	bl	800f368 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 fca2 	bl	800f368 <USBD_LL_StallEP>
}
 800ea24:	bf00      	nop
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d036      	beq.n	800eab0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ea46:	6938      	ldr	r0, [r7, #16]
 800ea48:	f000 f836 	bl	800eab8 <USBD_GetLen>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	3301      	adds	r3, #1
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	005b      	lsls	r3, r3, #1
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea5a:	7dfb      	ldrb	r3, [r7, #23]
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	4413      	add	r3, r2
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	7812      	ldrb	r2, [r2, #0]
 800ea64:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea6c:	7dfb      	ldrb	r3, [r7, #23]
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	4413      	add	r3, r2
 800ea72:	2203      	movs	r2, #3
 800ea74:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ea7c:	e013      	b.n	800eaa6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	4413      	add	r3, r2
 800ea84:	693a      	ldr	r2, [r7, #16]
 800ea86:	7812      	ldrb	r2, [r2, #0]
 800ea88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	613b      	str	r3, [r7, #16]
    idx++;
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
 800ea92:	3301      	adds	r3, #1
 800ea94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	701a      	strb	r2, [r3, #0]
    idx++;
 800eaa0:	7dfb      	ldrb	r3, [r7, #23]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1e7      	bne.n	800ea7e <USBD_GetString+0x52>
 800eaae:	e000      	b.n	800eab2 <USBD_GetString+0x86>
    return;
 800eab0:	bf00      	nop
  }
}
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eac0:	2300      	movs	r3, #0
 800eac2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eac8:	e005      	b.n	800ead6 <USBD_GetLen+0x1e>
  {
    len++;
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
 800eacc:	3301      	adds	r3, #1
 800eace:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	3301      	adds	r3, #1
 800ead4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1f5      	bne.n	800eaca <USBD_GetLen+0x12>
  }

  return len;
 800eade:	7bfb      	ldrb	r3, [r7, #15]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3714      	adds	r7, #20
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2202      	movs	r2, #2
 800eafc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	2100      	movs	r1, #0
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f000 fcb2 	bl	800f47c <USBD_LL_Transmit>

  return USBD_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b084      	sub	sp, #16
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	2100      	movs	r1, #0
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 fca1 	bl	800f47c <USBD_LL_Transmit>

  return USBD_OK;
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2203      	movs	r2, #3
 800eb54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f000 fca5 	bl	800f4be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b084      	sub	sp, #16
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	60f8      	str	r0, [r7, #12]
 800eb86:	60b9      	str	r1, [r7, #8]
 800eb88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	2100      	movs	r1, #0
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f000 fc94 	bl	800f4be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2204      	movs	r2, #4
 800ebac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 fc60 	bl	800f47c <USBD_LL_Transmit>

  return USBD_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b082      	sub	sp, #8
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2205      	movs	r2, #5
 800ebd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	2200      	movs	r2, #0
 800ebda:	2100      	movs	r1, #0
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fc6e 	bl	800f4be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	4912      	ldr	r1, [pc, #72]	; (800ec3c <MX_USB_Device_Init+0x50>)
 800ebf4:	4812      	ldr	r0, [pc, #72]	; (800ec40 <MX_USB_Device_Init+0x54>)
 800ebf6:	f7fe fd69 	bl	800d6cc <USBD_Init>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ec00:	f7f3 fe8c 	bl	800291c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ec04:	490f      	ldr	r1, [pc, #60]	; (800ec44 <MX_USB_Device_Init+0x58>)
 800ec06:	480e      	ldr	r0, [pc, #56]	; (800ec40 <MX_USB_Device_Init+0x54>)
 800ec08:	f7fe fd90 	bl	800d72c <USBD_RegisterClass>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ec12:	f7f3 fe83 	bl	800291c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ec16:	490c      	ldr	r1, [pc, #48]	; (800ec48 <MX_USB_Device_Init+0x5c>)
 800ec18:	4809      	ldr	r0, [pc, #36]	; (800ec40 <MX_USB_Device_Init+0x54>)
 800ec1a:	f7fe fc87 	bl	800d52c <USBD_CDC_RegisterInterface>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ec24:	f7f3 fe7a 	bl	800291c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ec28:	4805      	ldr	r0, [pc, #20]	; (800ec40 <MX_USB_Device_Init+0x54>)
 800ec2a:	f7fe fdb5 	bl	800d798 <USBD_Start>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d001      	beq.n	800ec38 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ec34:	f7f3 fe72 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ec38:	bf00      	nop
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	200000ac 	.word	0x200000ac
 800ec40:	2000077c 	.word	0x2000077c
 800ec44:	20000018 	.word	0x20000018
 800ec48:	20000098 	.word	0x20000098

0800ec4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ec50:	2200      	movs	r2, #0
 800ec52:	4905      	ldr	r1, [pc, #20]	; (800ec68 <CDC_Init_FS+0x1c>)
 800ec54:	4805      	ldr	r0, [pc, #20]	; (800ec6c <CDC_Init_FS+0x20>)
 800ec56:	f7fe fc83 	bl	800d560 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ec5a:	4905      	ldr	r1, [pc, #20]	; (800ec70 <CDC_Init_FS+0x24>)
 800ec5c:	4803      	ldr	r0, [pc, #12]	; (800ec6c <CDC_Init_FS+0x20>)
 800ec5e:	f7fe fca1 	bl	800d5a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ec62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20001258 	.word	0x20001258
 800ec6c:	2000077c 	.word	0x2000077c
 800ec70:	20000a58 	.word	0x20000a58

0800ec74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ec74:	b480      	push	{r7}
 800ec76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ec78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	6039      	str	r1, [r7, #0]
 800ec8e:	71fb      	strb	r3, [r7, #7]
 800ec90:	4613      	mov	r3, r2
 800ec92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ec94:	79fb      	ldrb	r3, [r7, #7]
 800ec96:	2b23      	cmp	r3, #35	; 0x23
 800ec98:	d84a      	bhi.n	800ed30 <CDC_Control_FS+0xac>
 800ec9a:	a201      	add	r2, pc, #4	; (adr r2, 800eca0 <CDC_Control_FS+0x1c>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ed31 	.word	0x0800ed31
 800eca4:	0800ed31 	.word	0x0800ed31
 800eca8:	0800ed31 	.word	0x0800ed31
 800ecac:	0800ed31 	.word	0x0800ed31
 800ecb0:	0800ed31 	.word	0x0800ed31
 800ecb4:	0800ed31 	.word	0x0800ed31
 800ecb8:	0800ed31 	.word	0x0800ed31
 800ecbc:	0800ed31 	.word	0x0800ed31
 800ecc0:	0800ed31 	.word	0x0800ed31
 800ecc4:	0800ed31 	.word	0x0800ed31
 800ecc8:	0800ed31 	.word	0x0800ed31
 800eccc:	0800ed31 	.word	0x0800ed31
 800ecd0:	0800ed31 	.word	0x0800ed31
 800ecd4:	0800ed31 	.word	0x0800ed31
 800ecd8:	0800ed31 	.word	0x0800ed31
 800ecdc:	0800ed31 	.word	0x0800ed31
 800ece0:	0800ed31 	.word	0x0800ed31
 800ece4:	0800ed31 	.word	0x0800ed31
 800ece8:	0800ed31 	.word	0x0800ed31
 800ecec:	0800ed31 	.word	0x0800ed31
 800ecf0:	0800ed31 	.word	0x0800ed31
 800ecf4:	0800ed31 	.word	0x0800ed31
 800ecf8:	0800ed31 	.word	0x0800ed31
 800ecfc:	0800ed31 	.word	0x0800ed31
 800ed00:	0800ed31 	.word	0x0800ed31
 800ed04:	0800ed31 	.word	0x0800ed31
 800ed08:	0800ed31 	.word	0x0800ed31
 800ed0c:	0800ed31 	.word	0x0800ed31
 800ed10:	0800ed31 	.word	0x0800ed31
 800ed14:	0800ed31 	.word	0x0800ed31
 800ed18:	0800ed31 	.word	0x0800ed31
 800ed1c:	0800ed31 	.word	0x0800ed31
 800ed20:	0800ed31 	.word	0x0800ed31
 800ed24:	0800ed31 	.word	0x0800ed31
 800ed28:	0800ed31 	.word	0x0800ed31
 800ed2c:	0800ed31 	.word	0x0800ed31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ed30:	bf00      	nop
  }

  return (USBD_OK);
 800ed32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ed4a:	6879      	ldr	r1, [r7, #4]
 800ed4c:	4805      	ldr	r0, [pc, #20]	; (800ed64 <CDC_Receive_FS+0x24>)
 800ed4e:	f7fe fc29 	bl	800d5a4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ed52:	4804      	ldr	r0, [pc, #16]	; (800ed64 <CDC_Receive_FS+0x24>)
 800ed54:	f7fe fc84 	bl	800d660 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800ed58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	2000077c 	.word	0x2000077c

0800ed68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	460b      	mov	r3, r1
 800ed72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ed78:	4b0d      	ldr	r3, [pc, #52]	; (800edb0 <CDC_Transmit_FS+0x48>)
 800ed7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e00b      	b.n	800eda6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ed8e:	887b      	ldrh	r3, [r7, #2]
 800ed90:	461a      	mov	r2, r3
 800ed92:	6879      	ldr	r1, [r7, #4]
 800ed94:	4806      	ldr	r0, [pc, #24]	; (800edb0 <CDC_Transmit_FS+0x48>)
 800ed96:	f7fe fbe3 	bl	800d560 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ed9a:	4805      	ldr	r0, [pc, #20]	; (800edb0 <CDC_Transmit_FS+0x48>)
 800ed9c:	f7fe fc20 	bl	800d5e0 <USBD_CDC_TransmitPacket>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3710      	adds	r7, #16
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	2000077c 	.word	0x2000077c

0800edb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b087      	sub	sp, #28
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	4613      	mov	r3, r2
 800edc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800edc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	371c      	adds	r7, #28
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
	...

0800edd8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	4603      	mov	r3, r0
 800ede0:	6039      	str	r1, [r7, #0]
 800ede2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2212      	movs	r2, #18
 800ede8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800edea:	4b03      	ldr	r3, [pc, #12]	; (800edf8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800edec:	4618      	mov	r0, r3
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	200000cc 	.word	0x200000cc

0800edfc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	6039      	str	r1, [r7, #0]
 800ee06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2204      	movs	r2, #4
 800ee0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee0e:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	200000e0 	.word	0x200000e0

0800ee20 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	6039      	str	r1, [r7, #0]
 800ee2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee2c:	79fb      	ldrb	r3, [r7, #7]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d105      	bne.n	800ee3e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ee32:	683a      	ldr	r2, [r7, #0]
 800ee34:	4907      	ldr	r1, [pc, #28]	; (800ee54 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ee36:	4808      	ldr	r0, [pc, #32]	; (800ee58 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ee38:	f7ff fdf8 	bl	800ea2c <USBD_GetString>
 800ee3c:	e004      	b.n	800ee48 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	4904      	ldr	r1, [pc, #16]	; (800ee54 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ee42:	4805      	ldr	r0, [pc, #20]	; (800ee58 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ee44:	f7ff fdf2 	bl	800ea2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee48:	4b02      	ldr	r3, [pc, #8]	; (800ee54 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20001a58 	.word	0x20001a58
 800ee58:	08015234 	.word	0x08015234

0800ee5c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	4603      	mov	r3, r0
 800ee64:	6039      	str	r1, [r7, #0]
 800ee66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ee68:	683a      	ldr	r2, [r7, #0]
 800ee6a:	4904      	ldr	r1, [pc, #16]	; (800ee7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ee6c:	4804      	ldr	r0, [pc, #16]	; (800ee80 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ee6e:	f7ff fddd 	bl	800ea2c <USBD_GetString>
  return USBD_StrDesc;
 800ee72:	4b02      	ldr	r3, [pc, #8]	; (800ee7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20001a58 	.word	0x20001a58
 800ee80:	0801524c 	.word	0x0801524c

0800ee84 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	6039      	str	r1, [r7, #0]
 800ee8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	221a      	movs	r2, #26
 800ee94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ee96:	f000 f843 	bl	800ef20 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ee9a:	4b02      	ldr	r3, [pc, #8]	; (800eea4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	200000e4 	.word	0x200000e4

0800eea8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	4603      	mov	r3, r0
 800eeb0:	6039      	str	r1, [r7, #0]
 800eeb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eeb4:	79fb      	ldrb	r3, [r7, #7]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d105      	bne.n	800eec6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	4907      	ldr	r1, [pc, #28]	; (800eedc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800eebe:	4808      	ldr	r0, [pc, #32]	; (800eee0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800eec0:	f7ff fdb4 	bl	800ea2c <USBD_GetString>
 800eec4:	e004      	b.n	800eed0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	4904      	ldr	r1, [pc, #16]	; (800eedc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800eeca:	4805      	ldr	r0, [pc, #20]	; (800eee0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800eecc:	f7ff fdae 	bl	800ea2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800eed0:	4b02      	ldr	r3, [pc, #8]	; (800eedc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	20001a58 	.word	0x20001a58
 800eee0:	08015260 	.word	0x08015260

0800eee4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	4603      	mov	r3, r0
 800eeec:	6039      	str	r1, [r7, #0]
 800eeee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d105      	bne.n	800ef02 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	4907      	ldr	r1, [pc, #28]	; (800ef18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800eefa:	4808      	ldr	r0, [pc, #32]	; (800ef1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800eefc:	f7ff fd96 	bl	800ea2c <USBD_GetString>
 800ef00:	e004      	b.n	800ef0c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ef02:	683a      	ldr	r2, [r7, #0]
 800ef04:	4904      	ldr	r1, [pc, #16]	; (800ef18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ef06:	4805      	ldr	r0, [pc, #20]	; (800ef1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ef08:	f7ff fd90 	bl	800ea2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef0c:	4b02      	ldr	r3, [pc, #8]	; (800ef18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20001a58 	.word	0x20001a58
 800ef1c:	0801526c 	.word	0x0801526c

0800ef20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef26:	4b0f      	ldr	r3, [pc, #60]	; (800ef64 <Get_SerialNum+0x44>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ef2c:	4b0e      	ldr	r3, [pc, #56]	; (800ef68 <Get_SerialNum+0x48>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ef32:	4b0e      	ldr	r3, [pc, #56]	; (800ef6c <Get_SerialNum+0x4c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d009      	beq.n	800ef5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ef46:	2208      	movs	r2, #8
 800ef48:	4909      	ldr	r1, [pc, #36]	; (800ef70 <Get_SerialNum+0x50>)
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f000 f814 	bl	800ef78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ef50:	2204      	movs	r2, #4
 800ef52:	4908      	ldr	r1, [pc, #32]	; (800ef74 <Get_SerialNum+0x54>)
 800ef54:	68b8      	ldr	r0, [r7, #8]
 800ef56:	f000 f80f 	bl	800ef78 <IntToUnicode>
  }
}
 800ef5a:	bf00      	nop
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	0bfa0590 	.word	0x0bfa0590
 800ef68:	0bfa0594 	.word	0x0bfa0594
 800ef6c:	0bfa0598 	.word	0x0bfa0598
 800ef70:	200000e6 	.word	0x200000e6
 800ef74:	200000f6 	.word	0x200000f6

0800ef78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	75fb      	strb	r3, [r7, #23]
 800ef8e:	e027      	b.n	800efe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	0f1b      	lsrs	r3, r3, #28
 800ef94:	2b09      	cmp	r3, #9
 800ef96:	d80b      	bhi.n	800efb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	0f1b      	lsrs	r3, r3, #28
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	7dfb      	ldrb	r3, [r7, #23]
 800efa0:	005b      	lsls	r3, r3, #1
 800efa2:	4619      	mov	r1, r3
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	440b      	add	r3, r1
 800efa8:	3230      	adds	r2, #48	; 0x30
 800efaa:	b2d2      	uxtb	r2, r2
 800efac:	701a      	strb	r2, [r3, #0]
 800efae:	e00a      	b.n	800efc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	0f1b      	lsrs	r3, r3, #28
 800efb4:	b2da      	uxtb	r2, r3
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
 800efb8:	005b      	lsls	r3, r3, #1
 800efba:	4619      	mov	r1, r3
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	440b      	add	r3, r1
 800efc0:	3237      	adds	r2, #55	; 0x37
 800efc2:	b2d2      	uxtb	r2, r2
 800efc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	011b      	lsls	r3, r3, #4
 800efca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800efcc:	7dfb      	ldrb	r3, [r7, #23]
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	3301      	adds	r3, #1
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	4413      	add	r3, r2
 800efd6:	2200      	movs	r2, #0
 800efd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800efda:	7dfb      	ldrb	r3, [r7, #23]
 800efdc:	3301      	adds	r3, #1
 800efde:	75fb      	strb	r3, [r7, #23]
 800efe0:	7dfa      	ldrb	r2, [r7, #23]
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d3d3      	bcc.n	800ef90 <IntToUnicode+0x18>
  }
}
 800efe8:	bf00      	nop
 800efea:	bf00      	nop
 800efec:	371c      	adds	r7, #28
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
	...

0800eff8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b08a      	sub	sp, #40	; 0x28
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f000:	f107 0314 	add.w	r3, r7, #20
 800f004:	2200      	movs	r2, #0
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	605a      	str	r2, [r3, #4]
 800f00a:	609a      	str	r2, [r3, #8]
 800f00c:	60da      	str	r2, [r3, #12]
 800f00e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	4a1b      	ldr	r2, [pc, #108]	; (800f084 <HAL_PCD_MspInit+0x8c>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d130      	bne.n	800f07c <HAL_PCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f01a:	4b1b      	ldr	r3, [pc, #108]	; (800f088 <HAL_PCD_MspInit+0x90>)
 800f01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f01e:	4a1a      	ldr	r2, [pc, #104]	; (800f088 <HAL_PCD_MspInit+0x90>)
 800f020:	f043 0301 	orr.w	r3, r3, #1
 800f024:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f026:	4b18      	ldr	r3, [pc, #96]	; (800f088 <HAL_PCD_MspInit+0x90>)
 800f028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f02a:	f003 0301 	and.w	r3, r3, #1
 800f02e:	613b      	str	r3, [r7, #16]
 800f030:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f032:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f038:	2302      	movs	r3, #2
 800f03a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f03c:	2300      	movs	r3, #0
 800f03e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f040:	2300      	movs	r3, #0
 800f042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800f044:	230a      	movs	r3, #10
 800f046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f048:	f107 0314 	add.w	r3, r7, #20
 800f04c:	4619      	mov	r1, r3
 800f04e:	480f      	ldr	r0, [pc, #60]	; (800f08c <HAL_PCD_MspInit+0x94>)
 800f050:	f7f5 ff38 	bl	8004ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f054:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <HAL_PCD_MspInit+0x90>)
 800f056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f058:	4a0b      	ldr	r2, [pc, #44]	; (800f088 <HAL_PCD_MspInit+0x90>)
 800f05a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f05e:	65d3      	str	r3, [r2, #92]	; 0x5c
 800f060:	4b09      	ldr	r3, [pc, #36]	; (800f088 <HAL_PCD_MspInit+0x90>)
 800f062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f068:	60fb      	str	r3, [r7, #12]
 800f06a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_FS_IRQn, 0, 0);
 800f06c:	2200      	movs	r2, #0
 800f06e:	2100      	movs	r1, #0
 800f070:	2049      	movs	r0, #73	; 0x49
 800f072:	f7f5 fbfe 	bl	8004872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_FS_IRQn);
 800f076:	2049      	movs	r0, #73	; 0x49
 800f078:	f7f5 fc15 	bl	80048a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f07c:	bf00      	nop
 800f07e:	3728      	adds	r7, #40	; 0x28
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	4000d400 	.word	0x4000d400
 800f088:	40021000 	.word	0x40021000
 800f08c:	42020000 	.word	0x42020000

0800f090 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f7fe fbc3 	bl	800d832 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f0ac:	bf00      	nop
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800f0c6:	78fa      	ldrb	r2, [r7, #3]
 800f0c8:	6879      	ldr	r1, [r7, #4]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	4413      	add	r3, r2
 800f0d0:	00db      	lsls	r3, r3, #3
 800f0d2:	440b      	add	r3, r1
 800f0d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	78fb      	ldrb	r3, [r7, #3]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	f7fe fbfd 	bl	800d8dc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f0e2:	bf00      	nop
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b082      	sub	sp, #8
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800f0fc:	78fa      	ldrb	r2, [r7, #3]
 800f0fe:	6879      	ldr	r1, [r7, #4]
 800f100:	4613      	mov	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	4413      	add	r3, r2
 800f106:	00db      	lsls	r3, r3, #3
 800f108:	440b      	add	r3, r1
 800f10a:	333c      	adds	r3, #60	; 0x3c
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	78fb      	ldrb	r3, [r7, #3]
 800f110:	4619      	mov	r1, r3
 800f112:	f7fe fc96 	bl	800da42 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f116:	bf00      	nop
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f11e:	b580      	push	{r7, lr}
 800f120:	b082      	sub	sp, #8
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fe fdd0 	bl	800dcd2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b084      	sub	sp, #16
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f142:	2301      	movs	r3, #1
 800f144:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d001      	beq.n	800f152 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f14e:	f7f3 fbe5 	bl	800291c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f158:	7bfa      	ldrb	r2, [r7, #15]
 800f15a:	4611      	mov	r1, r2
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fe fd74 	bl	800dc4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fe fd1c 	bl	800dba6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f16e:	bf00      	nop
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
	...

0800f178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe fd6f 	bl	800dc6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	699b      	ldr	r3, [r3, #24]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d005      	beq.n	800f1a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f194:	4b04      	ldr	r3, [pc, #16]	; (800f1a8 <HAL_PCD_SuspendCallback+0x30>)
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	4a03      	ldr	r2, [pc, #12]	; (800f1a8 <HAL_PCD_SuspendCallback+0x30>)
 800f19a:	f043 0306 	orr.w	r3, r3, #6
 800f19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f1a0:	bf00      	nop
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	e000ed00 	.word	0xe000ed00

0800f1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	699b      	ldr	r3, [r3, #24]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d007      	beq.n	800f1cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1bc:	4b08      	ldr	r3, [pc, #32]	; (800f1e0 <HAL_PCD_ResumeCallback+0x34>)
 800f1be:	691b      	ldr	r3, [r3, #16]
 800f1c0:	4a07      	ldr	r2, [pc, #28]	; (800f1e0 <HAL_PCD_ResumeCallback+0x34>)
 800f1c2:	f023 0306 	bic.w	r3, r3, #6
 800f1c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f1c8:	f000 f9fc 	bl	800f5c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fe fd65 	bl	800dca2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f1d8:	bf00      	nop
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	e000ed00 	.word	0xe000ed00

0800f1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f1ec:	4a2c      	ldr	r2, [pc, #176]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4a2a      	ldr	r2, [pc, #168]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f1f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800f1fc:	f7f7 fda8 	bl	8006d50 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800f200:	4b27      	ldr	r3, [pc, #156]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f202:	4a28      	ldr	r2, [pc, #160]	; (800f2a4 <USBD_LL_Init+0xc0>)
 800f204:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f206:	4b26      	ldr	r3, [pc, #152]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f208:	2208      	movs	r2, #8
 800f20a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f20c:	4b24      	ldr	r3, [pc, #144]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f20e:	2202      	movs	r2, #2
 800f210:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f212:	4b23      	ldr	r3, [pc, #140]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f214:	2202      	movs	r2, #2
 800f216:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f218:	4b21      	ldr	r3, [pc, #132]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f21e:	4b20      	ldr	r3, [pc, #128]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f220:	2200      	movs	r2, #0
 800f222:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f224:	4b1e      	ldr	r3, [pc, #120]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f226:	2200      	movs	r2, #0
 800f228:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f22a:	4b1d      	ldr	r3, [pc, #116]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f22c:	2200      	movs	r2, #0
 800f22e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f230:	481b      	ldr	r0, [pc, #108]	; (800f2a0 <USBD_LL_Init+0xbc>)
 800f232:	f7f5 ffdf 	bl	80051f4 <HAL_PCD_Init>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800f23c:	f7f3 fb6e 	bl	800291c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f246:	2318      	movs	r3, #24
 800f248:	2200      	movs	r2, #0
 800f24a:	2100      	movs	r1, #0
 800f24c:	f7f7 fca8 	bl	8006ba0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f256:	2358      	movs	r3, #88	; 0x58
 800f258:	2200      	movs	r2, #0
 800f25a:	2180      	movs	r1, #128	; 0x80
 800f25c:	f7f7 fca0 	bl	8006ba0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f266:	23c0      	movs	r3, #192	; 0xc0
 800f268:	2200      	movs	r2, #0
 800f26a:	2181      	movs	r1, #129	; 0x81
 800f26c:	f7f7 fc98 	bl	8006ba0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f276:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f27a:	2200      	movs	r2, #0
 800f27c:	2101      	movs	r1, #1
 800f27e:	f7f7 fc8f 	bl	8006ba0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f28c:	2200      	movs	r2, #0
 800f28e:	2182      	movs	r1, #130	; 0x82
 800f290:	f7f7 fc86 	bl	8006ba0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	20001c58 	.word	0x20001c58
 800f2a4:	4000d400 	.word	0x4000d400

0800f2a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f6 f871 	bl	80053a6 <HAL_PCD_Start>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2c8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 f982 	bl	800f5d4 <USBD_Get_USB_Status>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f2de:	b580      	push	{r7, lr}
 800f2e0:	b084      	sub	sp, #16
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
 800f2e6:	4608      	mov	r0, r1
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	70fb      	strb	r3, [r7, #3]
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	70bb      	strb	r3, [r7, #2]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f306:	78bb      	ldrb	r3, [r7, #2]
 800f308:	883a      	ldrh	r2, [r7, #0]
 800f30a:	78f9      	ldrb	r1, [r7, #3]
 800f30c:	f7f6 f9b9 	bl	8005682 <HAL_PCD_EP_Open>
 800f310:	4603      	mov	r3, r0
 800f312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f314:	7bfb      	ldrb	r3, [r7, #15]
 800f316:	4618      	mov	r0, r3
 800f318:	f000 f95c 	bl	800f5d4 <USBD_Get_USB_Status>
 800f31c:	4603      	mov	r3, r0
 800f31e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f320:	7bbb      	ldrb	r3, [r7, #14]
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b084      	sub	sp, #16
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
 800f332:	460b      	mov	r3, r1
 800f334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f336:	2300      	movs	r3, #0
 800f338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f33a:	2300      	movs	r3, #0
 800f33c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f344:	78fa      	ldrb	r2, [r7, #3]
 800f346:	4611      	mov	r1, r2
 800f348:	4618      	mov	r0, r3
 800f34a:	f7f6 f9f7 	bl	800573c <HAL_PCD_EP_Close>
 800f34e:	4603      	mov	r3, r0
 800f350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f352:	7bfb      	ldrb	r3, [r7, #15]
 800f354:	4618      	mov	r0, r3
 800f356:	f000 f93d 	bl	800f5d4 <USBD_Get_USB_Status>
 800f35a:	4603      	mov	r3, r0
 800f35c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f35e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	460b      	mov	r3, r1
 800f372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f374:	2300      	movs	r3, #0
 800f376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f378:	2300      	movs	r3, #0
 800f37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f382:	78fa      	ldrb	r2, [r7, #3]
 800f384:	4611      	mov	r1, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f7f6 faa0 	bl	80058cc <HAL_PCD_EP_SetStall>
 800f38c:	4603      	mov	r3, r0
 800f38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f390:	7bfb      	ldrb	r3, [r7, #15]
 800f392:	4618      	mov	r0, r3
 800f394:	f000 f91e 	bl	800f5d4 <USBD_Get_USB_Status>
 800f398:	4603      	mov	r3, r0
 800f39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b084      	sub	sp, #16
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f3c0:	78fa      	ldrb	r2, [r7, #3]
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7f6 fad3 	bl	8005970 <HAL_PCD_EP_ClrStall>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f000 f8ff 	bl	800f5d4 <USBD_Get_USB_Status>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f3f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f3f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	da0c      	bge.n	800f41a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f400:	78fb      	ldrb	r3, [r7, #3]
 800f402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f406:	68f9      	ldr	r1, [r7, #12]
 800f408:	1c5a      	adds	r2, r3, #1
 800f40a:	4613      	mov	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	440b      	add	r3, r1
 800f414:	3302      	adds	r3, #2
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	e00b      	b.n	800f432 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f41a:	78fb      	ldrb	r3, [r7, #3]
 800f41c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f420:	68f9      	ldr	r1, [r7, #12]
 800f422:	4613      	mov	r3, r2
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	00db      	lsls	r3, r3, #3
 800f42a:	440b      	add	r3, r1
 800f42c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800f430:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f432:	4618      	mov	r0, r3
 800f434:	3714      	adds	r7, #20
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr

0800f43e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
 800f446:	460b      	mov	r3, r1
 800f448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f44a:	2300      	movs	r3, #0
 800f44c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f458:	78fa      	ldrb	r2, [r7, #3]
 800f45a:	4611      	mov	r1, r2
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f6 f8eb 	bl	8005638 <HAL_PCD_SetAddress>
 800f462:	4603      	mov	r3, r0
 800f464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f466:	7bfb      	ldrb	r3, [r7, #15]
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 f8b3 	bl	800f5d4 <USBD_Get_USB_Status>
 800f46e:	4603      	mov	r3, r0
 800f470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f472:	7bbb      	ldrb	r3, [r7, #14]
}
 800f474:	4618      	mov	r0, r3
 800f476:	3710      	adds	r7, #16
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b086      	sub	sp, #24
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	607a      	str	r2, [r7, #4]
 800f486:	603b      	str	r3, [r7, #0]
 800f488:	460b      	mov	r3, r1
 800f48a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f48c:	2300      	movs	r3, #0
 800f48e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f49a:	7af9      	ldrb	r1, [r7, #11]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	f7f6 f9dd 	bl	800585e <HAL_PCD_EP_Transmit>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4a8:	7dfb      	ldrb	r3, [r7, #23]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f000 f892 	bl	800f5d4 <USBD_Get_USB_Status>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f4b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b086      	sub	sp, #24
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	60f8      	str	r0, [r7, #12]
 800f4c6:	607a      	str	r2, [r7, #4]
 800f4c8:	603b      	str	r3, [r7, #0]
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f4dc:	7af9      	ldrb	r1, [r7, #11]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	f7f6 f973 	bl	80057cc <HAL_PCD_EP_Receive>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ea:	7dfb      	ldrb	r3, [r7, #23]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 f871 	bl	800f5d4 <USBD_Get_USB_Status>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f4f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	460b      	mov	r3, r1
 800f50a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f512:	78fa      	ldrb	r2, [r7, #3]
 800f514:	4611      	mov	r1, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f7f6 f989 	bl	800582e <HAL_PCD_EP_GetRxCount>
 800f51c:	4603      	mov	r3, r0
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
	...

0800f528 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f534:	78fb      	ldrb	r3, [r7, #3]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d002      	beq.n	800f540 <HAL_PCDEx_LPM_Callback+0x18>
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d013      	beq.n	800f566 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f53e:	e023      	b.n	800f588 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	699b      	ldr	r3, [r3, #24]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d007      	beq.n	800f558 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f548:	f000 f83c 	bl	800f5c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f54c:	4b10      	ldr	r3, [pc, #64]	; (800f590 <HAL_PCDEx_LPM_Callback+0x68>)
 800f54e:	691b      	ldr	r3, [r3, #16]
 800f550:	4a0f      	ldr	r2, [pc, #60]	; (800f590 <HAL_PCDEx_LPM_Callback+0x68>)
 800f552:	f023 0306 	bic.w	r3, r3, #6
 800f556:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fe fb9f 	bl	800dca2 <USBD_LL_Resume>
    break;
 800f564:	e010      	b.n	800f588 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fe fb7c 	bl	800dc6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d005      	beq.n	800f586 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f57a:	4b05      	ldr	r3, [pc, #20]	; (800f590 <HAL_PCDEx_LPM_Callback+0x68>)
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	4a04      	ldr	r2, [pc, #16]	; (800f590 <HAL_PCDEx_LPM_Callback+0x68>)
 800f580:	f043 0306 	orr.w	r3, r3, #6
 800f584:	6113      	str	r3, [r2, #16]
    break;
 800f586:	bf00      	nop
}
 800f588:	bf00      	nop
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	e000ed00 	.word	0xe000ed00

0800f594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f59c:	4b03      	ldr	r3, [pc, #12]	; (800f5ac <USBD_static_malloc+0x18>)
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	20001f4c 	.word	0x20001f4c

0800f5b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f5b8:	bf00      	nop
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	af00      	add	r7, sp, #0
//  SystemClock_Config();
}
 800f5c8:	bf00      	nop
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr
	...

0800f5d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	4603      	mov	r3, r0
 800f5dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d817      	bhi.n	800f618 <USBD_Get_USB_Status+0x44>
 800f5e8:	a201      	add	r2, pc, #4	; (adr r2, 800f5f0 <USBD_Get_USB_Status+0x1c>)
 800f5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ee:	bf00      	nop
 800f5f0:	0800f601 	.word	0x0800f601
 800f5f4:	0800f607 	.word	0x0800f607
 800f5f8:	0800f60d 	.word	0x0800f60d
 800f5fc:	0800f613 	.word	0x0800f613
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f600:	2300      	movs	r3, #0
 800f602:	73fb      	strb	r3, [r7, #15]
    break;
 800f604:	e00b      	b.n	800f61e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f606:	2303      	movs	r3, #3
 800f608:	73fb      	strb	r3, [r7, #15]
    break;
 800f60a:	e008      	b.n	800f61e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f60c:	2301      	movs	r3, #1
 800f60e:	73fb      	strb	r3, [r7, #15]
    break;
 800f610:	e005      	b.n	800f61e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f612:	2303      	movs	r3, #3
 800f614:	73fb      	strb	r3, [r7, #15]
    break;
 800f616:	e002      	b.n	800f61e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f618:	2303      	movs	r3, #3
 800f61a:	73fb      	strb	r3, [r7, #15]
    break;
 800f61c:	bf00      	nop
  }
  return usb_status;
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <_Znwj>:
 800f62c:	2801      	cmp	r0, #1
 800f62e:	bf38      	it	cc
 800f630:	2001      	movcc	r0, #1
 800f632:	b510      	push	{r4, lr}
 800f634:	4604      	mov	r4, r0
 800f636:	4620      	mov	r0, r4
 800f638:	f001 f96a 	bl	8010910 <malloc>
 800f63c:	b930      	cbnz	r0, 800f64c <_Znwj+0x20>
 800f63e:	f000 f807 	bl	800f650 <_ZSt15get_new_handlerv>
 800f642:	b908      	cbnz	r0, 800f648 <_Znwj+0x1c>
 800f644:	f001 f932 	bl	80108ac <abort>
 800f648:	4780      	blx	r0
 800f64a:	e7f4      	b.n	800f636 <_Znwj+0xa>
 800f64c:	bd10      	pop	{r4, pc}
	...

0800f650 <_ZSt15get_new_handlerv>:
 800f650:	4b01      	ldr	r3, [pc, #4]	; (800f658 <_ZSt15get_new_handlerv+0x8>)
 800f652:	e8d3 0faf 	lda	r0, [r3]
 800f656:	4770      	bx	lr
 800f658:	2000216c 	.word	0x2000216c
 800f65c:	00000000 	.word	0x00000000

0800f660 <log>:
 800f660:	b538      	push	{r3, r4, r5, lr}
 800f662:	ec55 4b10 	vmov	r4, r5, d0
 800f666:	ed2d 8b02 	vpush	{d8}
 800f66a:	f000 f8a9 	bl	800f7c0 <__ieee754_log>
 800f66e:	4622      	mov	r2, r4
 800f670:	462b      	mov	r3, r5
 800f672:	4620      	mov	r0, r4
 800f674:	4629      	mov	r1, r5
 800f676:	eeb0 8a40 	vmov.f32	s16, s0
 800f67a:	eef0 8a60 	vmov.f32	s17, s1
 800f67e:	f7f1 fa39 	bl	8000af4 <__aeabi_dcmpun>
 800f682:	b998      	cbnz	r0, 800f6ac <log+0x4c>
 800f684:	2200      	movs	r2, #0
 800f686:	2300      	movs	r3, #0
 800f688:	4620      	mov	r0, r4
 800f68a:	4629      	mov	r1, r5
 800f68c:	f7f1 fa28 	bl	8000ae0 <__aeabi_dcmpgt>
 800f690:	b960      	cbnz	r0, 800f6ac <log+0x4c>
 800f692:	2200      	movs	r2, #0
 800f694:	2300      	movs	r3, #0
 800f696:	4620      	mov	r0, r4
 800f698:	4629      	mov	r1, r5
 800f69a:	f7f1 f9f9 	bl	8000a90 <__aeabi_dcmpeq>
 800f69e:	b160      	cbz	r0, 800f6ba <log+0x5a>
 800f6a0:	f001 f90c 	bl	80108bc <__errno>
 800f6a4:	2322      	movs	r3, #34	; 0x22
 800f6a6:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800f6d0 <log+0x70>
 800f6aa:	6003      	str	r3, [r0, #0]
 800f6ac:	eeb0 0a48 	vmov.f32	s0, s16
 800f6b0:	eef0 0a68 	vmov.f32	s1, s17
 800f6b4:	ecbd 8b02 	vpop	{d8}
 800f6b8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ba:	f001 f8ff 	bl	80108bc <__errno>
 800f6be:	2321      	movs	r3, #33	; 0x21
 800f6c0:	ecbd 8b02 	vpop	{d8}
 800f6c4:	6003      	str	r3, [r0, #0]
 800f6c6:	4804      	ldr	r0, [pc, #16]	; (800f6d8 <log+0x78>)
 800f6c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6cc:	f001 b860 	b.w	8010790 <nan>
 800f6d0:	00000000 	.word	0x00000000
 800f6d4:	fff00000 	.word	0xfff00000
 800f6d8:	08015770 	.word	0x08015770

0800f6dc <pow>:
 800f6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6de:	ec55 4b11 	vmov	r4, r5, d1
 800f6e2:	ed2d 8b02 	vpush	{d8}
 800f6e6:	eeb0 8a40 	vmov.f32	s16, s0
 800f6ea:	eef0 8a60 	vmov.f32	s17, s1
 800f6ee:	f000 fa23 	bl	800fb38 <__ieee754_pow>
 800f6f2:	4622      	mov	r2, r4
 800f6f4:	462b      	mov	r3, r5
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	ec57 6b10 	vmov	r6, r7, d0
 800f6fe:	f7f1 f9f9 	bl	8000af4 <__aeabi_dcmpun>
 800f702:	2800      	cmp	r0, #0
 800f704:	d13b      	bne.n	800f77e <pow+0xa2>
 800f706:	2200      	movs	r2, #0
 800f708:	2300      	movs	r3, #0
 800f70a:	ec51 0b18 	vmov	r0, r1, d8
 800f70e:	f7f1 f9bf 	bl	8000a90 <__aeabi_dcmpeq>
 800f712:	b1b8      	cbz	r0, 800f744 <pow+0x68>
 800f714:	2200      	movs	r2, #0
 800f716:	2300      	movs	r3, #0
 800f718:	4620      	mov	r0, r4
 800f71a:	4629      	mov	r1, r5
 800f71c:	f7f1 f9b8 	bl	8000a90 <__aeabi_dcmpeq>
 800f720:	2800      	cmp	r0, #0
 800f722:	d146      	bne.n	800f7b2 <pow+0xd6>
 800f724:	ec45 4b10 	vmov	d0, r4, r5
 800f728:	f001 f825 	bl	8010776 <finite>
 800f72c:	b338      	cbz	r0, 800f77e <pow+0xa2>
 800f72e:	2200      	movs	r2, #0
 800f730:	2300      	movs	r3, #0
 800f732:	4620      	mov	r0, r4
 800f734:	4629      	mov	r1, r5
 800f736:	f7f1 f9b5 	bl	8000aa4 <__aeabi_dcmplt>
 800f73a:	b300      	cbz	r0, 800f77e <pow+0xa2>
 800f73c:	f001 f8be 	bl	80108bc <__errno>
 800f740:	2322      	movs	r3, #34	; 0x22
 800f742:	e01b      	b.n	800f77c <pow+0xa0>
 800f744:	ec47 6b10 	vmov	d0, r6, r7
 800f748:	f001 f815 	bl	8010776 <finite>
 800f74c:	b9e0      	cbnz	r0, 800f788 <pow+0xac>
 800f74e:	eeb0 0a48 	vmov.f32	s0, s16
 800f752:	eef0 0a68 	vmov.f32	s1, s17
 800f756:	f001 f80e 	bl	8010776 <finite>
 800f75a:	b1a8      	cbz	r0, 800f788 <pow+0xac>
 800f75c:	ec45 4b10 	vmov	d0, r4, r5
 800f760:	f001 f809 	bl	8010776 <finite>
 800f764:	b180      	cbz	r0, 800f788 <pow+0xac>
 800f766:	4632      	mov	r2, r6
 800f768:	463b      	mov	r3, r7
 800f76a:	4630      	mov	r0, r6
 800f76c:	4639      	mov	r1, r7
 800f76e:	f7f1 f9c1 	bl	8000af4 <__aeabi_dcmpun>
 800f772:	2800      	cmp	r0, #0
 800f774:	d0e2      	beq.n	800f73c <pow+0x60>
 800f776:	f001 f8a1 	bl	80108bc <__errno>
 800f77a:	2321      	movs	r3, #33	; 0x21
 800f77c:	6003      	str	r3, [r0, #0]
 800f77e:	ecbd 8b02 	vpop	{d8}
 800f782:	ec47 6b10 	vmov	d0, r6, r7
 800f786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f788:	2200      	movs	r2, #0
 800f78a:	2300      	movs	r3, #0
 800f78c:	4630      	mov	r0, r6
 800f78e:	4639      	mov	r1, r7
 800f790:	f7f1 f97e 	bl	8000a90 <__aeabi_dcmpeq>
 800f794:	2800      	cmp	r0, #0
 800f796:	d0f2      	beq.n	800f77e <pow+0xa2>
 800f798:	eeb0 0a48 	vmov.f32	s0, s16
 800f79c:	eef0 0a68 	vmov.f32	s1, s17
 800f7a0:	f000 ffe9 	bl	8010776 <finite>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d0ea      	beq.n	800f77e <pow+0xa2>
 800f7a8:	ec45 4b10 	vmov	d0, r4, r5
 800f7ac:	f000 ffe3 	bl	8010776 <finite>
 800f7b0:	e7c3      	b.n	800f73a <pow+0x5e>
 800f7b2:	2600      	movs	r6, #0
 800f7b4:	4f00      	ldr	r7, [pc, #0]	; (800f7b8 <pow+0xdc>)
 800f7b6:	e7e2      	b.n	800f77e <pow+0xa2>
 800f7b8:	3ff00000 	.word	0x3ff00000
 800f7bc:	00000000 	.word	0x00000000

0800f7c0 <__ieee754_log>:
 800f7c0:	ec51 0b10 	vmov	r0, r1, d0
 800f7c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	460d      	mov	r5, r1
 800f7ce:	ed2d 8b04 	vpush	{d8-d9}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	da29      	bge.n	800f82a <__ieee754_log+0x6a>
 800f7d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f7da:	ee10 2a10 	vmov	r2, s0
 800f7de:	4303      	orrs	r3, r0
 800f7e0:	d10c      	bne.n	800f7fc <__ieee754_log+0x3c>
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	49cd      	ldr	r1, [pc, #820]	; (800fb20 <__ieee754_log+0x360>)
 800f7ea:	f7f1 f813 	bl	8000814 <__aeabi_ddiv>
 800f7ee:	ec41 0b10 	vmov	d0, r0, r1
 800f7f2:	b003      	add	sp, #12
 800f7f4:	ecbd 8b04 	vpop	{d8-d9}
 800f7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fc:	2900      	cmp	r1, #0
 800f7fe:	da05      	bge.n	800f80c <__ieee754_log+0x4c>
 800f800:	460b      	mov	r3, r1
 800f802:	f7f0 fd25 	bl	8000250 <__aeabi_dsub>
 800f806:	2200      	movs	r2, #0
 800f808:	2300      	movs	r3, #0
 800f80a:	e7ee      	b.n	800f7ea <__ieee754_log+0x2a>
 800f80c:	4bc5      	ldr	r3, [pc, #788]	; (800fb24 <__ieee754_log+0x364>)
 800f80e:	2200      	movs	r2, #0
 800f810:	f7f0 fed6 	bl	80005c0 <__aeabi_dmul>
 800f814:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800f818:	460d      	mov	r5, r1
 800f81a:	4ac3      	ldr	r2, [pc, #780]	; (800fb28 <__ieee754_log+0x368>)
 800f81c:	4295      	cmp	r5, r2
 800f81e:	dd06      	ble.n	800f82e <__ieee754_log+0x6e>
 800f820:	4602      	mov	r2, r0
 800f822:	460b      	mov	r3, r1
 800f824:	f7f0 fd16 	bl	8000254 <__adddf3>
 800f828:	e7e1      	b.n	800f7ee <__ieee754_log+0x2e>
 800f82a:	2300      	movs	r3, #0
 800f82c:	e7f5      	b.n	800f81a <__ieee754_log+0x5a>
 800f82e:	152c      	asrs	r4, r5, #20
 800f830:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f834:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f838:	441c      	add	r4, r3
 800f83a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800f83e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800f842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f846:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800f84a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f84e:	4bb7      	ldr	r3, [pc, #732]	; (800fb2c <__ieee754_log+0x36c>)
 800f850:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800f854:	ea42 0105 	orr.w	r1, r2, r5
 800f858:	2200      	movs	r2, #0
 800f85a:	f7f0 fcf9 	bl	8000250 <__aeabi_dsub>
 800f85e:	1cab      	adds	r3, r5, #2
 800f860:	4682      	mov	sl, r0
 800f862:	468b      	mov	fp, r1
 800f864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f868:	2200      	movs	r2, #0
 800f86a:	2b02      	cmp	r3, #2
 800f86c:	dc53      	bgt.n	800f916 <__ieee754_log+0x156>
 800f86e:	2300      	movs	r3, #0
 800f870:	f7f1 f90e 	bl	8000a90 <__aeabi_dcmpeq>
 800f874:	b1d0      	cbz	r0, 800f8ac <__ieee754_log+0xec>
 800f876:	2c00      	cmp	r4, #0
 800f878:	f000 8122 	beq.w	800fac0 <__ieee754_log+0x300>
 800f87c:	4620      	mov	r0, r4
 800f87e:	f7f0 fe35 	bl	80004ec <__aeabi_i2d>
 800f882:	4606      	mov	r6, r0
 800f884:	460f      	mov	r7, r1
 800f886:	a390      	add	r3, pc, #576	; (adr r3, 800fac8 <__ieee754_log+0x308>)
 800f888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88c:	f7f0 fe98 	bl	80005c0 <__aeabi_dmul>
 800f890:	4604      	mov	r4, r0
 800f892:	460d      	mov	r5, r1
 800f894:	4630      	mov	r0, r6
 800f896:	4639      	mov	r1, r7
 800f898:	a38d      	add	r3, pc, #564	; (adr r3, 800fad0 <__ieee754_log+0x310>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	f7f0 fe8f 	bl	80005c0 <__aeabi_dmul>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	e7bb      	b.n	800f824 <__ieee754_log+0x64>
 800f8ac:	a38a      	add	r3, pc, #552	; (adr r3, 800fad8 <__ieee754_log+0x318>)
 800f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b2:	4650      	mov	r0, sl
 800f8b4:	4659      	mov	r1, fp
 800f8b6:	f7f0 fe83 	bl	80005c0 <__aeabi_dmul>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	460b      	mov	r3, r1
 800f8be:	2000      	movs	r0, #0
 800f8c0:	499b      	ldr	r1, [pc, #620]	; (800fb30 <__ieee754_log+0x370>)
 800f8c2:	f7f0 fcc5 	bl	8000250 <__aeabi_dsub>
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	460f      	mov	r7, r1
 800f8ca:	4652      	mov	r2, sl
 800f8cc:	465b      	mov	r3, fp
 800f8ce:	4650      	mov	r0, sl
 800f8d0:	4659      	mov	r1, fp
 800f8d2:	f7f0 fe75 	bl	80005c0 <__aeabi_dmul>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	460b      	mov	r3, r1
 800f8da:	4630      	mov	r0, r6
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f7f0 fe6f 	bl	80005c0 <__aeabi_dmul>
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	460f      	mov	r7, r1
 800f8e6:	b914      	cbnz	r4, 800f8ee <__ieee754_log+0x12e>
 800f8e8:	4632      	mov	r2, r6
 800f8ea:	463b      	mov	r3, r7
 800f8ec:	e0a2      	b.n	800fa34 <__ieee754_log+0x274>
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f7f0 fdfc 	bl	80004ec <__aeabi_i2d>
 800f8f4:	4680      	mov	r8, r0
 800f8f6:	4689      	mov	r9, r1
 800f8f8:	a373      	add	r3, pc, #460	; (adr r3, 800fac8 <__ieee754_log+0x308>)
 800f8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fe:	f7f0 fe5f 	bl	80005c0 <__aeabi_dmul>
 800f902:	4604      	mov	r4, r0
 800f904:	460d      	mov	r5, r1
 800f906:	4640      	mov	r0, r8
 800f908:	4649      	mov	r1, r9
 800f90a:	a371      	add	r3, pc, #452	; (adr r3, 800fad0 <__ieee754_log+0x310>)
 800f90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f910:	f7f0 fe56 	bl	80005c0 <__aeabi_dmul>
 800f914:	e0a7      	b.n	800fa66 <__ieee754_log+0x2a6>
 800f916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f91a:	f7f0 fc9b 	bl	8000254 <__adddf3>
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	4650      	mov	r0, sl
 800f924:	4659      	mov	r1, fp
 800f926:	f7f0 ff75 	bl	8000814 <__aeabi_ddiv>
 800f92a:	ec41 0b18 	vmov	d8, r0, r1
 800f92e:	4620      	mov	r0, r4
 800f930:	f7f0 fddc 	bl	80004ec <__aeabi_i2d>
 800f934:	ec53 2b18 	vmov	r2, r3, d8
 800f938:	ec41 0b19 	vmov	d9, r0, r1
 800f93c:	ec51 0b18 	vmov	r0, r1, d8
 800f940:	f7f0 fe3e 	bl	80005c0 <__aeabi_dmul>
 800f944:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800f948:	4602      	mov	r2, r0
 800f94a:	4680      	mov	r8, r0
 800f94c:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800f950:	4689      	mov	r9, r1
 800f952:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f956:	9301      	str	r3, [sp, #4]
 800f958:	460b      	mov	r3, r1
 800f95a:	f7f0 fe31 	bl	80005c0 <__aeabi_dmul>
 800f95e:	4606      	mov	r6, r0
 800f960:	460f      	mov	r7, r1
 800f962:	3551      	adds	r5, #81	; 0x51
 800f964:	a35e      	add	r3, pc, #376	; (adr r3, 800fae0 <__ieee754_log+0x320>)
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	f7f0 fe29 	bl	80005c0 <__aeabi_dmul>
 800f96e:	a35e      	add	r3, pc, #376	; (adr r3, 800fae8 <__ieee754_log+0x328>)
 800f970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f974:	f7f0 fc6e 	bl	8000254 <__adddf3>
 800f978:	4632      	mov	r2, r6
 800f97a:	463b      	mov	r3, r7
 800f97c:	f7f0 fe20 	bl	80005c0 <__aeabi_dmul>
 800f980:	a35b      	add	r3, pc, #364	; (adr r3, 800faf0 <__ieee754_log+0x330>)
 800f982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f986:	f7f0 fc65 	bl	8000254 <__adddf3>
 800f98a:	4632      	mov	r2, r6
 800f98c:	463b      	mov	r3, r7
 800f98e:	f7f0 fe17 	bl	80005c0 <__aeabi_dmul>
 800f992:	a359      	add	r3, pc, #356	; (adr r3, 800faf8 <__ieee754_log+0x338>)
 800f994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f998:	f7f0 fc5c 	bl	8000254 <__adddf3>
 800f99c:	4642      	mov	r2, r8
 800f99e:	464b      	mov	r3, r9
 800f9a0:	f7f0 fe0e 	bl	80005c0 <__aeabi_dmul>
 800f9a4:	4680      	mov	r8, r0
 800f9a6:	4689      	mov	r9, r1
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	a354      	add	r3, pc, #336	; (adr r3, 800fb00 <__ieee754_log+0x340>)
 800f9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b2:	f7f0 fe05 	bl	80005c0 <__aeabi_dmul>
 800f9b6:	a354      	add	r3, pc, #336	; (adr r3, 800fb08 <__ieee754_log+0x348>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f7f0 fc4a 	bl	8000254 <__adddf3>
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	463b      	mov	r3, r7
 800f9c4:	f7f0 fdfc 	bl	80005c0 <__aeabi_dmul>
 800f9c8:	a351      	add	r3, pc, #324	; (adr r3, 800fb10 <__ieee754_log+0x350>)
 800f9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ce:	f7f0 fc41 	bl	8000254 <__adddf3>
 800f9d2:	4632      	mov	r2, r6
 800f9d4:	463b      	mov	r3, r7
 800f9d6:	f7f0 fdf3 	bl	80005c0 <__aeabi_dmul>
 800f9da:	460b      	mov	r3, r1
 800f9dc:	4602      	mov	r2, r0
 800f9de:	4649      	mov	r1, r9
 800f9e0:	4640      	mov	r0, r8
 800f9e2:	f7f0 fc37 	bl	8000254 <__adddf3>
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	4680      	mov	r8, r0
 800f9ea:	4689      	mov	r9, r1
 800f9ec:	431d      	orrs	r5, r3
 800f9ee:	2d00      	cmp	r5, #0
 800f9f0:	dd48      	ble.n	800fa84 <__ieee754_log+0x2c4>
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	4b4e      	ldr	r3, [pc, #312]	; (800fb30 <__ieee754_log+0x370>)
 800f9f6:	4650      	mov	r0, sl
 800f9f8:	4659      	mov	r1, fp
 800f9fa:	f7f0 fde1 	bl	80005c0 <__aeabi_dmul>
 800f9fe:	4652      	mov	r2, sl
 800fa00:	465b      	mov	r3, fp
 800fa02:	f7f0 fddd 	bl	80005c0 <__aeabi_dmul>
 800fa06:	4602      	mov	r2, r0
 800fa08:	460b      	mov	r3, r1
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	460f      	mov	r7, r1
 800fa0e:	4640      	mov	r0, r8
 800fa10:	4649      	mov	r1, r9
 800fa12:	f7f0 fc1f 	bl	8000254 <__adddf3>
 800fa16:	ec53 2b18 	vmov	r2, r3, d8
 800fa1a:	f7f0 fdd1 	bl	80005c0 <__aeabi_dmul>
 800fa1e:	4680      	mov	r8, r0
 800fa20:	4689      	mov	r9, r1
 800fa22:	b964      	cbnz	r4, 800fa3e <__ieee754_log+0x27e>
 800fa24:	4602      	mov	r2, r0
 800fa26:	460b      	mov	r3, r1
 800fa28:	4630      	mov	r0, r6
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	f7f0 fc10 	bl	8000250 <__aeabi_dsub>
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	4650      	mov	r0, sl
 800fa36:	4659      	mov	r1, fp
 800fa38:	f7f0 fc0a 	bl	8000250 <__aeabi_dsub>
 800fa3c:	e6d7      	b.n	800f7ee <__ieee754_log+0x2e>
 800fa3e:	a322      	add	r3, pc, #136	; (adr r3, 800fac8 <__ieee754_log+0x308>)
 800fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa44:	ec51 0b19 	vmov	r0, r1, d9
 800fa48:	f7f0 fdba 	bl	80005c0 <__aeabi_dmul>
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	460d      	mov	r5, r1
 800fa50:	a31f      	add	r3, pc, #124	; (adr r3, 800fad0 <__ieee754_log+0x310>)
 800fa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa56:	ec51 0b19 	vmov	r0, r1, d9
 800fa5a:	f7f0 fdb1 	bl	80005c0 <__aeabi_dmul>
 800fa5e:	4642      	mov	r2, r8
 800fa60:	464b      	mov	r3, r9
 800fa62:	f7f0 fbf7 	bl	8000254 <__adddf3>
 800fa66:	4602      	mov	r2, r0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	f7f0 fbef 	bl	8000250 <__aeabi_dsub>
 800fa72:	4652      	mov	r2, sl
 800fa74:	465b      	mov	r3, fp
 800fa76:	f7f0 fbeb 	bl	8000250 <__aeabi_dsub>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	4620      	mov	r0, r4
 800fa80:	4629      	mov	r1, r5
 800fa82:	e7d9      	b.n	800fa38 <__ieee754_log+0x278>
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	4650      	mov	r0, sl
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	f7f0 fbe0 	bl	8000250 <__aeabi_dsub>
 800fa90:	ec53 2b18 	vmov	r2, r3, d8
 800fa94:	f7f0 fd94 	bl	80005c0 <__aeabi_dmul>
 800fa98:	4606      	mov	r6, r0
 800fa9a:	460f      	mov	r7, r1
 800fa9c:	2c00      	cmp	r4, #0
 800fa9e:	f43f af23 	beq.w	800f8e8 <__ieee754_log+0x128>
 800faa2:	a309      	add	r3, pc, #36	; (adr r3, 800fac8 <__ieee754_log+0x308>)
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	ec51 0b19 	vmov	r0, r1, d9
 800faac:	f7f0 fd88 	bl	80005c0 <__aeabi_dmul>
 800fab0:	4604      	mov	r4, r0
 800fab2:	460d      	mov	r5, r1
 800fab4:	a306      	add	r3, pc, #24	; (adr r3, 800fad0 <__ieee754_log+0x310>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	ec51 0b19 	vmov	r0, r1, d9
 800fabe:	e727      	b.n	800f910 <__ieee754_log+0x150>
 800fac0:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800fb18 <__ieee754_log+0x358>
 800fac4:	e695      	b.n	800f7f2 <__ieee754_log+0x32>
 800fac6:	bf00      	nop
 800fac8:	fee00000 	.word	0xfee00000
 800facc:	3fe62e42 	.word	0x3fe62e42
 800fad0:	35793c76 	.word	0x35793c76
 800fad4:	3dea39ef 	.word	0x3dea39ef
 800fad8:	55555555 	.word	0x55555555
 800fadc:	3fd55555 	.word	0x3fd55555
 800fae0:	df3e5244 	.word	0xdf3e5244
 800fae4:	3fc2f112 	.word	0x3fc2f112
 800fae8:	96cb03de 	.word	0x96cb03de
 800faec:	3fc74664 	.word	0x3fc74664
 800faf0:	94229359 	.word	0x94229359
 800faf4:	3fd24924 	.word	0x3fd24924
 800faf8:	55555593 	.word	0x55555593
 800fafc:	3fe55555 	.word	0x3fe55555
 800fb00:	d078c69f 	.word	0xd078c69f
 800fb04:	3fc39a09 	.word	0x3fc39a09
 800fb08:	1d8e78af 	.word	0x1d8e78af
 800fb0c:	3fcc71c5 	.word	0x3fcc71c5
 800fb10:	9997fa04 	.word	0x9997fa04
 800fb14:	3fd99999 	.word	0x3fd99999
	...
 800fb20:	c3500000 	.word	0xc3500000
 800fb24:	43500000 	.word	0x43500000
 800fb28:	7fefffff 	.word	0x7fefffff
 800fb2c:	3ff00000 	.word	0x3ff00000
 800fb30:	3fe00000 	.word	0x3fe00000
 800fb34:	00000000 	.word	0x00000000

0800fb38 <__ieee754_pow>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	ed2d 8b06 	vpush	{d8-d10}
 800fb40:	b089      	sub	sp, #36	; 0x24
 800fb42:	ed8d 1b00 	vstr	d1, [sp]
 800fb46:	e9dd 2900 	ldrd	r2, r9, [sp]
 800fb4a:	ec57 6b10 	vmov	r6, r7, d0
 800fb4e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800fb52:	ea58 0102 	orrs.w	r1, r8, r2
 800fb56:	d115      	bne.n	800fb84 <__ieee754_pow+0x4c>
 800fb58:	19b3      	adds	r3, r6, r6
 800fb5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800fb5e:	4152      	adcs	r2, r2
 800fb60:	4299      	cmp	r1, r3
 800fb62:	4b89      	ldr	r3, [pc, #548]	; (800fd88 <__ieee754_pow+0x250>)
 800fb64:	4193      	sbcs	r3, r2
 800fb66:	f080 84d3 	bcs.w	8010510 <__ieee754_pow+0x9d8>
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	4639      	mov	r1, r7
 800fb6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb72:	f7f0 fb6f 	bl	8000254 <__adddf3>
 800fb76:	ec41 0b10 	vmov	d0, r0, r1
 800fb7a:	b009      	add	sp, #36	; 0x24
 800fb7c:	ecbd 8b06 	vpop	{d8-d10}
 800fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb84:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800fb88:	4b80      	ldr	r3, [pc, #512]	; (800fd8c <__ieee754_pow+0x254>)
 800fb8a:	463d      	mov	r5, r7
 800fb8c:	ee10 aa10 	vmov	sl, s0
 800fb90:	429c      	cmp	r4, r3
 800fb92:	dc06      	bgt.n	800fba2 <__ieee754_pow+0x6a>
 800fb94:	d101      	bne.n	800fb9a <__ieee754_pow+0x62>
 800fb96:	2e00      	cmp	r6, #0
 800fb98:	d1e7      	bne.n	800fb6a <__ieee754_pow+0x32>
 800fb9a:	4598      	cmp	r8, r3
 800fb9c:	dc01      	bgt.n	800fba2 <__ieee754_pow+0x6a>
 800fb9e:	d10f      	bne.n	800fbc0 <__ieee754_pow+0x88>
 800fba0:	b172      	cbz	r2, 800fbc0 <__ieee754_pow+0x88>
 800fba2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fba6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fbaa:	ea55 050a 	orrs.w	r5, r5, sl
 800fbae:	d1dc      	bne.n	800fb6a <__ieee754_pow+0x32>
 800fbb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fbb4:	18db      	adds	r3, r3, r3
 800fbb6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fbba:	4152      	adcs	r2, r2
 800fbbc:	429d      	cmp	r5, r3
 800fbbe:	e7d0      	b.n	800fb62 <__ieee754_pow+0x2a>
 800fbc0:	2d00      	cmp	r5, #0
 800fbc2:	da3b      	bge.n	800fc3c <__ieee754_pow+0x104>
 800fbc4:	4b72      	ldr	r3, [pc, #456]	; (800fd90 <__ieee754_pow+0x258>)
 800fbc6:	4598      	cmp	r8, r3
 800fbc8:	dc51      	bgt.n	800fc6e <__ieee754_pow+0x136>
 800fbca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fbce:	4598      	cmp	r8, r3
 800fbd0:	f340 84ad 	ble.w	801052e <__ieee754_pow+0x9f6>
 800fbd4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fbd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fbdc:	2b14      	cmp	r3, #20
 800fbde:	dd0f      	ble.n	800fc00 <__ieee754_pow+0xc8>
 800fbe0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fbe4:	fa22 f103 	lsr.w	r1, r2, r3
 800fbe8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbec:	4293      	cmp	r3, r2
 800fbee:	f040 849e 	bne.w	801052e <__ieee754_pow+0x9f6>
 800fbf2:	f001 0101 	and.w	r1, r1, #1
 800fbf6:	f1c1 0302 	rsb	r3, r1, #2
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	b182      	cbz	r2, 800fc20 <__ieee754_pow+0xe8>
 800fbfe:	e05f      	b.n	800fcc0 <__ieee754_pow+0x188>
 800fc00:	2a00      	cmp	r2, #0
 800fc02:	d15b      	bne.n	800fcbc <__ieee754_pow+0x184>
 800fc04:	f1c3 0314 	rsb	r3, r3, #20
 800fc08:	fa48 f103 	asr.w	r1, r8, r3
 800fc0c:	fa01 f303 	lsl.w	r3, r1, r3
 800fc10:	4543      	cmp	r3, r8
 800fc12:	f040 8489 	bne.w	8010528 <__ieee754_pow+0x9f0>
 800fc16:	f001 0101 	and.w	r1, r1, #1
 800fc1a:	f1c1 0302 	rsb	r3, r1, #2
 800fc1e:	9304      	str	r3, [sp, #16]
 800fc20:	4b5c      	ldr	r3, [pc, #368]	; (800fd94 <__ieee754_pow+0x25c>)
 800fc22:	4598      	cmp	r8, r3
 800fc24:	d132      	bne.n	800fc8c <__ieee754_pow+0x154>
 800fc26:	f1b9 0f00 	cmp.w	r9, #0
 800fc2a:	f280 8479 	bge.w	8010520 <__ieee754_pow+0x9e8>
 800fc2e:	4632      	mov	r2, r6
 800fc30:	463b      	mov	r3, r7
 800fc32:	2000      	movs	r0, #0
 800fc34:	4957      	ldr	r1, [pc, #348]	; (800fd94 <__ieee754_pow+0x25c>)
 800fc36:	f7f0 fded 	bl	8000814 <__aeabi_ddiv>
 800fc3a:	e79c      	b.n	800fb76 <__ieee754_pow+0x3e>
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	9304      	str	r3, [sp, #16]
 800fc40:	2a00      	cmp	r2, #0
 800fc42:	d13d      	bne.n	800fcc0 <__ieee754_pow+0x188>
 800fc44:	4b51      	ldr	r3, [pc, #324]	; (800fd8c <__ieee754_pow+0x254>)
 800fc46:	4598      	cmp	r8, r3
 800fc48:	d1ea      	bne.n	800fc20 <__ieee754_pow+0xe8>
 800fc4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fc4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fc52:	ea53 030a 	orrs.w	r3, r3, sl
 800fc56:	f000 845b 	beq.w	8010510 <__ieee754_pow+0x9d8>
 800fc5a:	4b4f      	ldr	r3, [pc, #316]	; (800fd98 <__ieee754_pow+0x260>)
 800fc5c:	429c      	cmp	r4, r3
 800fc5e:	dd08      	ble.n	800fc72 <__ieee754_pow+0x13a>
 800fc60:	f1b9 0f00 	cmp.w	r9, #0
 800fc64:	f2c0 8458 	blt.w	8010518 <__ieee754_pow+0x9e0>
 800fc68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc6c:	e783      	b.n	800fb76 <__ieee754_pow+0x3e>
 800fc6e:	2302      	movs	r3, #2
 800fc70:	e7e5      	b.n	800fc3e <__ieee754_pow+0x106>
 800fc72:	f1b9 0f00 	cmp.w	r9, #0
 800fc76:	f04f 0000 	mov.w	r0, #0
 800fc7a:	f04f 0100 	mov.w	r1, #0
 800fc7e:	f6bf af7a 	bge.w	800fb76 <__ieee754_pow+0x3e>
 800fc82:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fc86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fc8a:	e774      	b.n	800fb76 <__ieee754_pow+0x3e>
 800fc8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fc90:	d106      	bne.n	800fca0 <__ieee754_pow+0x168>
 800fc92:	4632      	mov	r2, r6
 800fc94:	463b      	mov	r3, r7
 800fc96:	4630      	mov	r0, r6
 800fc98:	4639      	mov	r1, r7
 800fc9a:	f7f0 fc91 	bl	80005c0 <__aeabi_dmul>
 800fc9e:	e76a      	b.n	800fb76 <__ieee754_pow+0x3e>
 800fca0:	4b3e      	ldr	r3, [pc, #248]	; (800fd9c <__ieee754_pow+0x264>)
 800fca2:	4599      	cmp	r9, r3
 800fca4:	d10c      	bne.n	800fcc0 <__ieee754_pow+0x188>
 800fca6:	2d00      	cmp	r5, #0
 800fca8:	db0a      	blt.n	800fcc0 <__ieee754_pow+0x188>
 800fcaa:	ec47 6b10 	vmov	d0, r6, r7
 800fcae:	b009      	add	sp, #36	; 0x24
 800fcb0:	ecbd 8b06 	vpop	{d8-d10}
 800fcb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb8:	f000 bc6c 	b.w	8010594 <__ieee754_sqrt>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9304      	str	r3, [sp, #16]
 800fcc0:	ec47 6b10 	vmov	d0, r6, r7
 800fcc4:	f000 fd4e 	bl	8010764 <fabs>
 800fcc8:	ec51 0b10 	vmov	r0, r1, d0
 800fccc:	f1ba 0f00 	cmp.w	sl, #0
 800fcd0:	d129      	bne.n	800fd26 <__ieee754_pow+0x1ee>
 800fcd2:	b124      	cbz	r4, 800fcde <__ieee754_pow+0x1a6>
 800fcd4:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fcd8:	4b2e      	ldr	r3, [pc, #184]	; (800fd94 <__ieee754_pow+0x25c>)
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d123      	bne.n	800fd26 <__ieee754_pow+0x1ee>
 800fcde:	f1b9 0f00 	cmp.w	r9, #0
 800fce2:	da05      	bge.n	800fcf0 <__ieee754_pow+0x1b8>
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	2000      	movs	r0, #0
 800fcea:	492a      	ldr	r1, [pc, #168]	; (800fd94 <__ieee754_pow+0x25c>)
 800fcec:	f7f0 fd92 	bl	8000814 <__aeabi_ddiv>
 800fcf0:	2d00      	cmp	r5, #0
 800fcf2:	f6bf af40 	bge.w	800fb76 <__ieee754_pow+0x3e>
 800fcf6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fcfa:	9b04      	ldr	r3, [sp, #16]
 800fcfc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fd00:	4323      	orrs	r3, r4
 800fd02:	d108      	bne.n	800fd16 <__ieee754_pow+0x1de>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	4610      	mov	r0, r2
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f7f0 faa0 	bl	8000250 <__aeabi_dsub>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	e78f      	b.n	800fc36 <__ieee754_pow+0xfe>
 800fd16:	9b04      	ldr	r3, [sp, #16]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	f47f af2c 	bne.w	800fb76 <__ieee754_pow+0x3e>
 800fd1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd22:	4619      	mov	r1, r3
 800fd24:	e727      	b.n	800fb76 <__ieee754_pow+0x3e>
 800fd26:	0feb      	lsrs	r3, r5, #31
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	9306      	str	r3, [sp, #24]
 800fd2c:	9a06      	ldr	r2, [sp, #24]
 800fd2e:	9b04      	ldr	r3, [sp, #16]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	d102      	bne.n	800fd3a <__ieee754_pow+0x202>
 800fd34:	4632      	mov	r2, r6
 800fd36:	463b      	mov	r3, r7
 800fd38:	e7e6      	b.n	800fd08 <__ieee754_pow+0x1d0>
 800fd3a:	4b19      	ldr	r3, [pc, #100]	; (800fda0 <__ieee754_pow+0x268>)
 800fd3c:	4598      	cmp	r8, r3
 800fd3e:	f340 80fb 	ble.w	800ff38 <__ieee754_pow+0x400>
 800fd42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fd46:	4598      	cmp	r8, r3
 800fd48:	4b13      	ldr	r3, [pc, #76]	; (800fd98 <__ieee754_pow+0x260>)
 800fd4a:	dd0c      	ble.n	800fd66 <__ieee754_pow+0x22e>
 800fd4c:	429c      	cmp	r4, r3
 800fd4e:	dc0f      	bgt.n	800fd70 <__ieee754_pow+0x238>
 800fd50:	f1b9 0f00 	cmp.w	r9, #0
 800fd54:	da0f      	bge.n	800fd76 <__ieee754_pow+0x23e>
 800fd56:	2000      	movs	r0, #0
 800fd58:	b009      	add	sp, #36	; 0x24
 800fd5a:	ecbd 8b06 	vpop	{d8-d10}
 800fd5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd62:	f000 bcf6 	b.w	8010752 <__math_oflow>
 800fd66:	429c      	cmp	r4, r3
 800fd68:	dbf2      	blt.n	800fd50 <__ieee754_pow+0x218>
 800fd6a:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <__ieee754_pow+0x25c>)
 800fd6c:	429c      	cmp	r4, r3
 800fd6e:	dd19      	ble.n	800fda4 <__ieee754_pow+0x26c>
 800fd70:	f1b9 0f00 	cmp.w	r9, #0
 800fd74:	dcef      	bgt.n	800fd56 <__ieee754_pow+0x21e>
 800fd76:	2000      	movs	r0, #0
 800fd78:	b009      	add	sp, #36	; 0x24
 800fd7a:	ecbd 8b06 	vpop	{d8-d10}
 800fd7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd82:	f000 bcdd 	b.w	8010740 <__math_uflow>
 800fd86:	bf00      	nop
 800fd88:	fff00000 	.word	0xfff00000
 800fd8c:	7ff00000 	.word	0x7ff00000
 800fd90:	433fffff 	.word	0x433fffff
 800fd94:	3ff00000 	.word	0x3ff00000
 800fd98:	3fefffff 	.word	0x3fefffff
 800fd9c:	3fe00000 	.word	0x3fe00000
 800fda0:	41e00000 	.word	0x41e00000
 800fda4:	2200      	movs	r2, #0
 800fda6:	4b60      	ldr	r3, [pc, #384]	; (800ff28 <__ieee754_pow+0x3f0>)
 800fda8:	f7f0 fa52 	bl	8000250 <__aeabi_dsub>
 800fdac:	4604      	mov	r4, r0
 800fdae:	460d      	mov	r5, r1
 800fdb0:	a353      	add	r3, pc, #332	; (adr r3, 800ff00 <__ieee754_pow+0x3c8>)
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	f7f0 fc03 	bl	80005c0 <__aeabi_dmul>
 800fdba:	4606      	mov	r6, r0
 800fdbc:	460f      	mov	r7, r1
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	a351      	add	r3, pc, #324	; (adr r3, 800ff08 <__ieee754_pow+0x3d0>)
 800fdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc8:	f7f0 fbfa 	bl	80005c0 <__aeabi_dmul>
 800fdcc:	2200      	movs	r2, #0
 800fdce:	4682      	mov	sl, r0
 800fdd0:	468b      	mov	fp, r1
 800fdd2:	4b56      	ldr	r3, [pc, #344]	; (800ff2c <__ieee754_pow+0x3f4>)
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	f7f0 fbf2 	bl	80005c0 <__aeabi_dmul>
 800fddc:	4602      	mov	r2, r0
 800fdde:	460b      	mov	r3, r1
 800fde0:	a14b      	add	r1, pc, #300	; (adr r1, 800ff10 <__ieee754_pow+0x3d8>)
 800fde2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde6:	f7f0 fa33 	bl	8000250 <__aeabi_dsub>
 800fdea:	4622      	mov	r2, r4
 800fdec:	462b      	mov	r3, r5
 800fdee:	f7f0 fbe7 	bl	80005c0 <__aeabi_dmul>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	494d      	ldr	r1, [pc, #308]	; (800ff30 <__ieee754_pow+0x3f8>)
 800fdfa:	f7f0 fa29 	bl	8000250 <__aeabi_dsub>
 800fdfe:	4680      	mov	r8, r0
 800fe00:	4689      	mov	r9, r1
 800fe02:	4622      	mov	r2, r4
 800fe04:	462b      	mov	r3, r5
 800fe06:	4620      	mov	r0, r4
 800fe08:	4629      	mov	r1, r5
 800fe0a:	f7f0 fbd9 	bl	80005c0 <__aeabi_dmul>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	460b      	mov	r3, r1
 800fe12:	4640      	mov	r0, r8
 800fe14:	4649      	mov	r1, r9
 800fe16:	f7f0 fbd3 	bl	80005c0 <__aeabi_dmul>
 800fe1a:	a33f      	add	r3, pc, #252	; (adr r3, 800ff18 <__ieee754_pow+0x3e0>)
 800fe1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe20:	f7f0 fbce 	bl	80005c0 <__aeabi_dmul>
 800fe24:	4602      	mov	r2, r0
 800fe26:	460b      	mov	r3, r1
 800fe28:	4650      	mov	r0, sl
 800fe2a:	4659      	mov	r1, fp
 800fe2c:	f7f0 fa10 	bl	8000250 <__aeabi_dsub>
 800fe30:	4602      	mov	r2, r0
 800fe32:	460b      	mov	r3, r1
 800fe34:	4680      	mov	r8, r0
 800fe36:	4689      	mov	r9, r1
 800fe38:	4630      	mov	r0, r6
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	f7f0 fa0a 	bl	8000254 <__adddf3>
 800fe40:	2000      	movs	r0, #0
 800fe42:	4632      	mov	r2, r6
 800fe44:	463b      	mov	r3, r7
 800fe46:	4604      	mov	r4, r0
 800fe48:	460d      	mov	r5, r1
 800fe4a:	f7f0 fa01 	bl	8000250 <__aeabi_dsub>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	460b      	mov	r3, r1
 800fe52:	4640      	mov	r0, r8
 800fe54:	4649      	mov	r1, r9
 800fe56:	f7f0 f9fb 	bl	8000250 <__aeabi_dsub>
 800fe5a:	9b04      	ldr	r3, [sp, #16]
 800fe5c:	9a06      	ldr	r2, [sp, #24]
 800fe5e:	4682      	mov	sl, r0
 800fe60:	3b01      	subs	r3, #1
 800fe62:	468b      	mov	fp, r1
 800fe64:	4313      	orrs	r3, r2
 800fe66:	f040 81e7 	bne.w	8010238 <__ieee754_pow+0x700>
 800fe6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ff20 <__ieee754_pow+0x3e8>
 800fe6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fe72:	2600      	movs	r6, #0
 800fe74:	eeb0 8a47 	vmov.f32	s16, s14
 800fe78:	eef0 8a67 	vmov.f32	s17, s15
 800fe7c:	463b      	mov	r3, r7
 800fe7e:	4632      	mov	r2, r6
 800fe80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe84:	f7f0 f9e4 	bl	8000250 <__aeabi_dsub>
 800fe88:	4622      	mov	r2, r4
 800fe8a:	462b      	mov	r3, r5
 800fe8c:	f7f0 fb98 	bl	80005c0 <__aeabi_dmul>
 800fe90:	4680      	mov	r8, r0
 800fe92:	4689      	mov	r9, r1
 800fe94:	4650      	mov	r0, sl
 800fe96:	4659      	mov	r1, fp
 800fe98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe9c:	f7f0 fb90 	bl	80005c0 <__aeabi_dmul>
 800fea0:	4602      	mov	r2, r0
 800fea2:	460b      	mov	r3, r1
 800fea4:	4640      	mov	r0, r8
 800fea6:	4649      	mov	r1, r9
 800fea8:	f7f0 f9d4 	bl	8000254 <__adddf3>
 800feac:	4680      	mov	r8, r0
 800feae:	4689      	mov	r9, r1
 800feb0:	4632      	mov	r2, r6
 800feb2:	463b      	mov	r3, r7
 800feb4:	4620      	mov	r0, r4
 800feb6:	4629      	mov	r1, r5
 800feb8:	f7f0 fb82 	bl	80005c0 <__aeabi_dmul>
 800febc:	460b      	mov	r3, r1
 800febe:	4604      	mov	r4, r0
 800fec0:	460d      	mov	r5, r1
 800fec2:	4602      	mov	r2, r0
 800fec4:	4649      	mov	r1, r9
 800fec6:	4640      	mov	r0, r8
 800fec8:	f7f0 f9c4 	bl	8000254 <__adddf3>
 800fecc:	4b19      	ldr	r3, [pc, #100]	; (800ff34 <__ieee754_pow+0x3fc>)
 800fece:	4606      	mov	r6, r0
 800fed0:	460f      	mov	r7, r1
 800fed2:	4299      	cmp	r1, r3
 800fed4:	468b      	mov	fp, r1
 800fed6:	ec45 4b19 	vmov	d9, r4, r5
 800feda:	f340 82f2 	ble.w	80104c2 <__ieee754_pow+0x98a>
 800fede:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fee2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fee6:	4303      	orrs	r3, r0
 800fee8:	f000 81e4 	beq.w	80102b4 <__ieee754_pow+0x77c>
 800feec:	2200      	movs	r2, #0
 800feee:	2300      	movs	r3, #0
 800fef0:	ec51 0b18 	vmov	r0, r1, d8
 800fef4:	f7f0 fdd6 	bl	8000aa4 <__aeabi_dcmplt>
 800fef8:	3800      	subs	r0, #0
 800fefa:	bf18      	it	ne
 800fefc:	2001      	movne	r0, #1
 800fefe:	e72b      	b.n	800fd58 <__ieee754_pow+0x220>
 800ff00:	60000000 	.word	0x60000000
 800ff04:	3ff71547 	.word	0x3ff71547
 800ff08:	f85ddf44 	.word	0xf85ddf44
 800ff0c:	3e54ae0b 	.word	0x3e54ae0b
 800ff10:	55555555 	.word	0x55555555
 800ff14:	3fd55555 	.word	0x3fd55555
 800ff18:	652b82fe 	.word	0x652b82fe
 800ff1c:	3ff71547 	.word	0x3ff71547
 800ff20:	00000000 	.word	0x00000000
 800ff24:	bff00000 	.word	0xbff00000
 800ff28:	3ff00000 	.word	0x3ff00000
 800ff2c:	3fd00000 	.word	0x3fd00000
 800ff30:	3fe00000 	.word	0x3fe00000
 800ff34:	408fffff 	.word	0x408fffff
 800ff38:	4bd5      	ldr	r3, [pc, #852]	; (8010290 <__ieee754_pow+0x758>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	402b      	ands	r3, r5
 800ff3e:	b92b      	cbnz	r3, 800ff4c <__ieee754_pow+0x414>
 800ff40:	4bd4      	ldr	r3, [pc, #848]	; (8010294 <__ieee754_pow+0x75c>)
 800ff42:	f7f0 fb3d 	bl	80005c0 <__aeabi_dmul>
 800ff46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	1523      	asrs	r3, r4, #20
 800ff4e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ff52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ff56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ff5a:	4413      	add	r3, r2
 800ff5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ff60:	9305      	str	r3, [sp, #20]
 800ff62:	4bcd      	ldr	r3, [pc, #820]	; (8010298 <__ieee754_pow+0x760>)
 800ff64:	429c      	cmp	r4, r3
 800ff66:	dd08      	ble.n	800ff7a <__ieee754_pow+0x442>
 800ff68:	4bcc      	ldr	r3, [pc, #816]	; (801029c <__ieee754_pow+0x764>)
 800ff6a:	429c      	cmp	r4, r3
 800ff6c:	f340 8162 	ble.w	8010234 <__ieee754_pow+0x6fc>
 800ff70:	9b05      	ldr	r3, [sp, #20]
 800ff72:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ff76:	3301      	adds	r3, #1
 800ff78:	9305      	str	r3, [sp, #20]
 800ff7a:	2400      	movs	r4, #0
 800ff7c:	00e3      	lsls	r3, r4, #3
 800ff7e:	4682      	mov	sl, r0
 800ff80:	4629      	mov	r1, r5
 800ff82:	46ab      	mov	fp, r5
 800ff84:	9307      	str	r3, [sp, #28]
 800ff86:	4bc6      	ldr	r3, [pc, #792]	; (80102a0 <__ieee754_pow+0x768>)
 800ff88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff8c:	ed93 7b00 	vldr	d7, [r3]
 800ff90:	eeb0 9a47 	vmov.f32	s18, s14
 800ff94:	eef0 9a67 	vmov.f32	s19, s15
 800ff98:	ec53 2b17 	vmov	r2, r3, d7
 800ff9c:	f7f0 f958 	bl	8000250 <__aeabi_dsub>
 800ffa0:	4652      	mov	r2, sl
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	460f      	mov	r7, r1
 800ffa6:	462b      	mov	r3, r5
 800ffa8:	106d      	asrs	r5, r5, #1
 800ffaa:	ec51 0b19 	vmov	r0, r1, d9
 800ffae:	f7f0 f951 	bl	8000254 <__adddf3>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	49ba      	ldr	r1, [pc, #744]	; (80102a4 <__ieee754_pow+0x76c>)
 800ffba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ffbe:	f7f0 fc29 	bl	8000814 <__aeabi_ddiv>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ffca:	ec41 0b1a 	vmov	d10, r0, r1
 800ffce:	4630      	mov	r0, r6
 800ffd0:	4639      	mov	r1, r7
 800ffd2:	f7f0 faf5 	bl	80005c0 <__aeabi_dmul>
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	2200      	movs	r2, #0
 800ffda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffde:	9302      	str	r3, [sp, #8]
 800ffe0:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ffe4:	4614      	mov	r4, r2
 800ffe6:	461d      	mov	r5, r3
 800ffe8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ffec:	ec41 0b18 	vmov	d8, r0, r1
 800fff0:	4640      	mov	r0, r8
 800fff2:	4649      	mov	r1, r9
 800fff4:	f7f0 fae4 	bl	80005c0 <__aeabi_dmul>
 800fff8:	4602      	mov	r2, r0
 800fffa:	460b      	mov	r3, r1
 800fffc:	4630      	mov	r0, r6
 800fffe:	4639      	mov	r1, r7
 8010000:	f7f0 f926 	bl	8000250 <__aeabi_dsub>
 8010004:	4606      	mov	r6, r0
 8010006:	460f      	mov	r7, r1
 8010008:	4620      	mov	r0, r4
 801000a:	4629      	mov	r1, r5
 801000c:	ec53 2b19 	vmov	r2, r3, d9
 8010010:	f7f0 f91e 	bl	8000250 <__aeabi_dsub>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4650      	mov	r0, sl
 801001a:	4659      	mov	r1, fp
 801001c:	f7f0 f918 	bl	8000250 <__aeabi_dsub>
 8010020:	4642      	mov	r2, r8
 8010022:	464b      	mov	r3, r9
 8010024:	f7f0 facc 	bl	80005c0 <__aeabi_dmul>
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	4630      	mov	r0, r6
 801002e:	4639      	mov	r1, r7
 8010030:	f7f0 f90e 	bl	8000250 <__aeabi_dsub>
 8010034:	ec53 2b1a 	vmov	r2, r3, d10
 8010038:	f7f0 fac2 	bl	80005c0 <__aeabi_dmul>
 801003c:	ec53 2b18 	vmov	r2, r3, d8
 8010040:	ec41 0b19 	vmov	d9, r0, r1
 8010044:	ec51 0b18 	vmov	r0, r1, d8
 8010048:	f7f0 faba 	bl	80005c0 <__aeabi_dmul>
 801004c:	4604      	mov	r4, r0
 801004e:	460d      	mov	r5, r1
 8010050:	a37b      	add	r3, pc, #492	; (adr r3, 8010240 <__ieee754_pow+0x708>)
 8010052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010056:	f7f0 fab3 	bl	80005c0 <__aeabi_dmul>
 801005a:	a37b      	add	r3, pc, #492	; (adr r3, 8010248 <__ieee754_pow+0x710>)
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	f7f0 f8f8 	bl	8000254 <__adddf3>
 8010064:	4622      	mov	r2, r4
 8010066:	462b      	mov	r3, r5
 8010068:	f7f0 faaa 	bl	80005c0 <__aeabi_dmul>
 801006c:	a378      	add	r3, pc, #480	; (adr r3, 8010250 <__ieee754_pow+0x718>)
 801006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010072:	f7f0 f8ef 	bl	8000254 <__adddf3>
 8010076:	4622      	mov	r2, r4
 8010078:	462b      	mov	r3, r5
 801007a:	f7f0 faa1 	bl	80005c0 <__aeabi_dmul>
 801007e:	a376      	add	r3, pc, #472	; (adr r3, 8010258 <__ieee754_pow+0x720>)
 8010080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010084:	f7f0 f8e6 	bl	8000254 <__adddf3>
 8010088:	4622      	mov	r2, r4
 801008a:	462b      	mov	r3, r5
 801008c:	f7f0 fa98 	bl	80005c0 <__aeabi_dmul>
 8010090:	a373      	add	r3, pc, #460	; (adr r3, 8010260 <__ieee754_pow+0x728>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	f7f0 f8dd 	bl	8000254 <__adddf3>
 801009a:	4622      	mov	r2, r4
 801009c:	462b      	mov	r3, r5
 801009e:	f7f0 fa8f 	bl	80005c0 <__aeabi_dmul>
 80100a2:	a371      	add	r3, pc, #452	; (adr r3, 8010268 <__ieee754_pow+0x730>)
 80100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a8:	f7f0 f8d4 	bl	8000254 <__adddf3>
 80100ac:	4606      	mov	r6, r0
 80100ae:	460f      	mov	r7, r1
 80100b0:	4622      	mov	r2, r4
 80100b2:	462b      	mov	r3, r5
 80100b4:	4620      	mov	r0, r4
 80100b6:	4629      	mov	r1, r5
 80100b8:	f7f0 fa82 	bl	80005c0 <__aeabi_dmul>
 80100bc:	4602      	mov	r2, r0
 80100be:	460b      	mov	r3, r1
 80100c0:	4630      	mov	r0, r6
 80100c2:	4639      	mov	r1, r7
 80100c4:	f7f0 fa7c 	bl	80005c0 <__aeabi_dmul>
 80100c8:	4642      	mov	r2, r8
 80100ca:	4604      	mov	r4, r0
 80100cc:	460d      	mov	r5, r1
 80100ce:	464b      	mov	r3, r9
 80100d0:	ec51 0b18 	vmov	r0, r1, d8
 80100d4:	f7f0 f8be 	bl	8000254 <__adddf3>
 80100d8:	ec53 2b19 	vmov	r2, r3, d9
 80100dc:	f7f0 fa70 	bl	80005c0 <__aeabi_dmul>
 80100e0:	4622      	mov	r2, r4
 80100e2:	462b      	mov	r3, r5
 80100e4:	f7f0 f8b6 	bl	8000254 <__adddf3>
 80100e8:	4642      	mov	r2, r8
 80100ea:	4682      	mov	sl, r0
 80100ec:	468b      	mov	fp, r1
 80100ee:	464b      	mov	r3, r9
 80100f0:	4640      	mov	r0, r8
 80100f2:	4649      	mov	r1, r9
 80100f4:	f7f0 fa64 	bl	80005c0 <__aeabi_dmul>
 80100f8:	2200      	movs	r2, #0
 80100fa:	4b6b      	ldr	r3, [pc, #428]	; (80102a8 <__ieee754_pow+0x770>)
 80100fc:	4606      	mov	r6, r0
 80100fe:	460f      	mov	r7, r1
 8010100:	f7f0 f8a8 	bl	8000254 <__adddf3>
 8010104:	4652      	mov	r2, sl
 8010106:	465b      	mov	r3, fp
 8010108:	f7f0 f8a4 	bl	8000254 <__adddf3>
 801010c:	2000      	movs	r0, #0
 801010e:	460d      	mov	r5, r1
 8010110:	460b      	mov	r3, r1
 8010112:	4604      	mov	r4, r0
 8010114:	4602      	mov	r2, r0
 8010116:	4649      	mov	r1, r9
 8010118:	4640      	mov	r0, r8
 801011a:	f7f0 fa51 	bl	80005c0 <__aeabi_dmul>
 801011e:	2200      	movs	r2, #0
 8010120:	4680      	mov	r8, r0
 8010122:	4689      	mov	r9, r1
 8010124:	4b60      	ldr	r3, [pc, #384]	; (80102a8 <__ieee754_pow+0x770>)
 8010126:	4620      	mov	r0, r4
 8010128:	4629      	mov	r1, r5
 801012a:	f7f0 f891 	bl	8000250 <__aeabi_dsub>
 801012e:	4632      	mov	r2, r6
 8010130:	463b      	mov	r3, r7
 8010132:	f7f0 f88d 	bl	8000250 <__aeabi_dsub>
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	4650      	mov	r0, sl
 801013c:	4659      	mov	r1, fp
 801013e:	f7f0 f887 	bl	8000250 <__aeabi_dsub>
 8010142:	ec53 2b18 	vmov	r2, r3, d8
 8010146:	f7f0 fa3b 	bl	80005c0 <__aeabi_dmul>
 801014a:	4606      	mov	r6, r0
 801014c:	460f      	mov	r7, r1
 801014e:	4622      	mov	r2, r4
 8010150:	462b      	mov	r3, r5
 8010152:	ec51 0b19 	vmov	r0, r1, d9
 8010156:	f7f0 fa33 	bl	80005c0 <__aeabi_dmul>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	4630      	mov	r0, r6
 8010160:	4639      	mov	r1, r7
 8010162:	f7f0 f877 	bl	8000254 <__adddf3>
 8010166:	4606      	mov	r6, r0
 8010168:	460f      	mov	r7, r1
 801016a:	4602      	mov	r2, r0
 801016c:	460b      	mov	r3, r1
 801016e:	4640      	mov	r0, r8
 8010170:	4649      	mov	r1, r9
 8010172:	f7f0 f86f 	bl	8000254 <__adddf3>
 8010176:	2000      	movs	r0, #0
 8010178:	460d      	mov	r5, r1
 801017a:	4604      	mov	r4, r0
 801017c:	a33c      	add	r3, pc, #240	; (adr r3, 8010270 <__ieee754_pow+0x738>)
 801017e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010182:	f7f0 fa1d 	bl	80005c0 <__aeabi_dmul>
 8010186:	4642      	mov	r2, r8
 8010188:	464b      	mov	r3, r9
 801018a:	ec41 0b18 	vmov	d8, r0, r1
 801018e:	4620      	mov	r0, r4
 8010190:	4629      	mov	r1, r5
 8010192:	f7f0 f85d 	bl	8000250 <__aeabi_dsub>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	4630      	mov	r0, r6
 801019c:	4639      	mov	r1, r7
 801019e:	f7f0 f857 	bl	8000250 <__aeabi_dsub>
 80101a2:	a335      	add	r3, pc, #212	; (adr r3, 8010278 <__ieee754_pow+0x740>)
 80101a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a8:	f7f0 fa0a 	bl	80005c0 <__aeabi_dmul>
 80101ac:	4606      	mov	r6, r0
 80101ae:	460f      	mov	r7, r1
 80101b0:	4620      	mov	r0, r4
 80101b2:	4629      	mov	r1, r5
 80101b4:	a332      	add	r3, pc, #200	; (adr r3, 8010280 <__ieee754_pow+0x748>)
 80101b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ba:	f7f0 fa01 	bl	80005c0 <__aeabi_dmul>
 80101be:	4602      	mov	r2, r0
 80101c0:	460b      	mov	r3, r1
 80101c2:	4630      	mov	r0, r6
 80101c4:	4639      	mov	r1, r7
 80101c6:	f7f0 f845 	bl	8000254 <__adddf3>
 80101ca:	9a07      	ldr	r2, [sp, #28]
 80101cc:	4b37      	ldr	r3, [pc, #220]	; (80102ac <__ieee754_pow+0x774>)
 80101ce:	4413      	add	r3, r2
 80101d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d4:	f7f0 f83e 	bl	8000254 <__adddf3>
 80101d8:	4682      	mov	sl, r0
 80101da:	9805      	ldr	r0, [sp, #20]
 80101dc:	468b      	mov	fp, r1
 80101de:	f7f0 f985 	bl	80004ec <__aeabi_i2d>
 80101e2:	9a07      	ldr	r2, [sp, #28]
 80101e4:	4b32      	ldr	r3, [pc, #200]	; (80102b0 <__ieee754_pow+0x778>)
 80101e6:	4606      	mov	r6, r0
 80101e8:	460f      	mov	r7, r1
 80101ea:	4413      	add	r3, r2
 80101ec:	4652      	mov	r2, sl
 80101ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101f2:	ec51 0b18 	vmov	r0, r1, d8
 80101f6:	465b      	mov	r3, fp
 80101f8:	f7f0 f82c 	bl	8000254 <__adddf3>
 80101fc:	4642      	mov	r2, r8
 80101fe:	464b      	mov	r3, r9
 8010200:	f7f0 f828 	bl	8000254 <__adddf3>
 8010204:	4632      	mov	r2, r6
 8010206:	463b      	mov	r3, r7
 8010208:	f7f0 f824 	bl	8000254 <__adddf3>
 801020c:	2000      	movs	r0, #0
 801020e:	4632      	mov	r2, r6
 8010210:	463b      	mov	r3, r7
 8010212:	4604      	mov	r4, r0
 8010214:	460d      	mov	r5, r1
 8010216:	f7f0 f81b 	bl	8000250 <__aeabi_dsub>
 801021a:	4642      	mov	r2, r8
 801021c:	464b      	mov	r3, r9
 801021e:	f7f0 f817 	bl	8000250 <__aeabi_dsub>
 8010222:	ec53 2b18 	vmov	r2, r3, d8
 8010226:	f7f0 f813 	bl	8000250 <__aeabi_dsub>
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	4650      	mov	r0, sl
 8010230:	4659      	mov	r1, fp
 8010232:	e610      	b.n	800fe56 <__ieee754_pow+0x31e>
 8010234:	2401      	movs	r4, #1
 8010236:	e6a1      	b.n	800ff7c <__ieee754_pow+0x444>
 8010238:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010288 <__ieee754_pow+0x750>
 801023c:	e617      	b.n	800fe6e <__ieee754_pow+0x336>
 801023e:	bf00      	nop
 8010240:	4a454eef 	.word	0x4a454eef
 8010244:	3fca7e28 	.word	0x3fca7e28
 8010248:	93c9db65 	.word	0x93c9db65
 801024c:	3fcd864a 	.word	0x3fcd864a
 8010250:	a91d4101 	.word	0xa91d4101
 8010254:	3fd17460 	.word	0x3fd17460
 8010258:	518f264d 	.word	0x518f264d
 801025c:	3fd55555 	.word	0x3fd55555
 8010260:	db6fabff 	.word	0xdb6fabff
 8010264:	3fdb6db6 	.word	0x3fdb6db6
 8010268:	33333303 	.word	0x33333303
 801026c:	3fe33333 	.word	0x3fe33333
 8010270:	e0000000 	.word	0xe0000000
 8010274:	3feec709 	.word	0x3feec709
 8010278:	dc3a03fd 	.word	0xdc3a03fd
 801027c:	3feec709 	.word	0x3feec709
 8010280:	145b01f5 	.word	0x145b01f5
 8010284:	be3e2fe0 	.word	0xbe3e2fe0
 8010288:	00000000 	.word	0x00000000
 801028c:	3ff00000 	.word	0x3ff00000
 8010290:	7ff00000 	.word	0x7ff00000
 8010294:	43400000 	.word	0x43400000
 8010298:	0003988e 	.word	0x0003988e
 801029c:	000bb679 	.word	0x000bb679
 80102a0:	08015300 	.word	0x08015300
 80102a4:	3ff00000 	.word	0x3ff00000
 80102a8:	40080000 	.word	0x40080000
 80102ac:	08015320 	.word	0x08015320
 80102b0:	08015310 	.word	0x08015310
 80102b4:	a3b5      	add	r3, pc, #724	; (adr r3, 801058c <__ieee754_pow+0xa54>)
 80102b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ba:	4640      	mov	r0, r8
 80102bc:	4649      	mov	r1, r9
 80102be:	f7ef ffc9 	bl	8000254 <__adddf3>
 80102c2:	4622      	mov	r2, r4
 80102c4:	462b      	mov	r3, r5
 80102c6:	ec41 0b1a 	vmov	d10, r0, r1
 80102ca:	4630      	mov	r0, r6
 80102cc:	4639      	mov	r1, r7
 80102ce:	f7ef ffbf 	bl	8000250 <__aeabi_dsub>
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	ec51 0b1a 	vmov	r0, r1, d10
 80102da:	f7f0 fc01 	bl	8000ae0 <__aeabi_dcmpgt>
 80102de:	2800      	cmp	r0, #0
 80102e0:	f47f ae04 	bne.w	800feec <__ieee754_pow+0x3b4>
 80102e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80102e8:	4aa3      	ldr	r2, [pc, #652]	; (8010578 <__ieee754_pow+0xa40>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	f340 8109 	ble.w	8010502 <__ieee754_pow+0x9ca>
 80102f0:	151b      	asrs	r3, r3, #20
 80102f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80102f6:	4ea1      	ldr	r6, [pc, #644]	; (801057c <__ieee754_pow+0xa44>)
 80102f8:	2000      	movs	r0, #0
 80102fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80102fe:	f1bb 0f00 	cmp.w	fp, #0
 8010302:	fa4a f303 	asr.w	r3, sl, r3
 8010306:	445b      	add	r3, fp
 8010308:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801030c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010310:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010314:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010318:	fa46 f602 	asr.w	r6, r6, r2
 801031c:	f1c2 0214 	rsb	r2, r2, #20
 8010320:	ea23 0106 	bic.w	r1, r3, r6
 8010324:	fa4a fa02 	asr.w	sl, sl, r2
 8010328:	4602      	mov	r2, r0
 801032a:	4620      	mov	r0, r4
 801032c:	460b      	mov	r3, r1
 801032e:	4629      	mov	r1, r5
 8010330:	bfb8      	it	lt
 8010332:	f1ca 0a00 	rsblt	sl, sl, #0
 8010336:	f7ef ff8b 	bl	8000250 <__aeabi_dsub>
 801033a:	ec41 0b19 	vmov	d9, r0, r1
 801033e:	4642      	mov	r2, r8
 8010340:	464b      	mov	r3, r9
 8010342:	ec51 0b19 	vmov	r0, r1, d9
 8010346:	f7ef ff85 	bl	8000254 <__adddf3>
 801034a:	2000      	movs	r0, #0
 801034c:	460d      	mov	r5, r1
 801034e:	4604      	mov	r4, r0
 8010350:	a379      	add	r3, pc, #484	; (adr r3, 8010538 <__ieee754_pow+0xa00>)
 8010352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010356:	f7f0 f933 	bl	80005c0 <__aeabi_dmul>
 801035a:	4606      	mov	r6, r0
 801035c:	460f      	mov	r7, r1
 801035e:	4620      	mov	r0, r4
 8010360:	4629      	mov	r1, r5
 8010362:	ec53 2b19 	vmov	r2, r3, d9
 8010366:	f7ef ff73 	bl	8000250 <__aeabi_dsub>
 801036a:	4602      	mov	r2, r0
 801036c:	460b      	mov	r3, r1
 801036e:	4640      	mov	r0, r8
 8010370:	4649      	mov	r1, r9
 8010372:	f7ef ff6d 	bl	8000250 <__aeabi_dsub>
 8010376:	a372      	add	r3, pc, #456	; (adr r3, 8010540 <__ieee754_pow+0xa08>)
 8010378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037c:	f7f0 f920 	bl	80005c0 <__aeabi_dmul>
 8010380:	4680      	mov	r8, r0
 8010382:	4689      	mov	r9, r1
 8010384:	4620      	mov	r0, r4
 8010386:	4629      	mov	r1, r5
 8010388:	a36f      	add	r3, pc, #444	; (adr r3, 8010548 <__ieee754_pow+0xa10>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	f7f0 f917 	bl	80005c0 <__aeabi_dmul>
 8010392:	4602      	mov	r2, r0
 8010394:	460b      	mov	r3, r1
 8010396:	4640      	mov	r0, r8
 8010398:	4649      	mov	r1, r9
 801039a:	f7ef ff5b 	bl	8000254 <__adddf3>
 801039e:	4604      	mov	r4, r0
 80103a0:	460d      	mov	r5, r1
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	4630      	mov	r0, r6
 80103a8:	4639      	mov	r1, r7
 80103aa:	f7ef ff53 	bl	8000254 <__adddf3>
 80103ae:	4632      	mov	r2, r6
 80103b0:	4680      	mov	r8, r0
 80103b2:	4689      	mov	r9, r1
 80103b4:	463b      	mov	r3, r7
 80103b6:	f7ef ff4b 	bl	8000250 <__aeabi_dsub>
 80103ba:	4602      	mov	r2, r0
 80103bc:	460b      	mov	r3, r1
 80103be:	4620      	mov	r0, r4
 80103c0:	4629      	mov	r1, r5
 80103c2:	f7ef ff45 	bl	8000250 <__aeabi_dsub>
 80103c6:	4642      	mov	r2, r8
 80103c8:	4606      	mov	r6, r0
 80103ca:	460f      	mov	r7, r1
 80103cc:	464b      	mov	r3, r9
 80103ce:	4640      	mov	r0, r8
 80103d0:	4649      	mov	r1, r9
 80103d2:	f7f0 f8f5 	bl	80005c0 <__aeabi_dmul>
 80103d6:	4604      	mov	r4, r0
 80103d8:	460d      	mov	r5, r1
 80103da:	a35d      	add	r3, pc, #372	; (adr r3, 8010550 <__ieee754_pow+0xa18>)
 80103dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e0:	f7f0 f8ee 	bl	80005c0 <__aeabi_dmul>
 80103e4:	a35c      	add	r3, pc, #368	; (adr r3, 8010558 <__ieee754_pow+0xa20>)
 80103e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ea:	f7ef ff31 	bl	8000250 <__aeabi_dsub>
 80103ee:	4622      	mov	r2, r4
 80103f0:	462b      	mov	r3, r5
 80103f2:	f7f0 f8e5 	bl	80005c0 <__aeabi_dmul>
 80103f6:	a35a      	add	r3, pc, #360	; (adr r3, 8010560 <__ieee754_pow+0xa28>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	f7ef ff2a 	bl	8000254 <__adddf3>
 8010400:	4622      	mov	r2, r4
 8010402:	462b      	mov	r3, r5
 8010404:	f7f0 f8dc 	bl	80005c0 <__aeabi_dmul>
 8010408:	a357      	add	r3, pc, #348	; (adr r3, 8010568 <__ieee754_pow+0xa30>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7ef ff1f 	bl	8000250 <__aeabi_dsub>
 8010412:	4622      	mov	r2, r4
 8010414:	462b      	mov	r3, r5
 8010416:	f7f0 f8d3 	bl	80005c0 <__aeabi_dmul>
 801041a:	a355      	add	r3, pc, #340	; (adr r3, 8010570 <__ieee754_pow+0xa38>)
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	f7ef ff18 	bl	8000254 <__adddf3>
 8010424:	4622      	mov	r2, r4
 8010426:	462b      	mov	r3, r5
 8010428:	f7f0 f8ca 	bl	80005c0 <__aeabi_dmul>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	4640      	mov	r0, r8
 8010432:	4649      	mov	r1, r9
 8010434:	f7ef ff0c 	bl	8000250 <__aeabi_dsub>
 8010438:	4604      	mov	r4, r0
 801043a:	460d      	mov	r5, r1
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	4640      	mov	r0, r8
 8010442:	4649      	mov	r1, r9
 8010444:	f7f0 f8bc 	bl	80005c0 <__aeabi_dmul>
 8010448:	2200      	movs	r2, #0
 801044a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801044e:	ec41 0b19 	vmov	d9, r0, r1
 8010452:	4620      	mov	r0, r4
 8010454:	4629      	mov	r1, r5
 8010456:	f7ef fefb 	bl	8000250 <__aeabi_dsub>
 801045a:	4602      	mov	r2, r0
 801045c:	460b      	mov	r3, r1
 801045e:	ec51 0b19 	vmov	r0, r1, d9
 8010462:	f7f0 f9d7 	bl	8000814 <__aeabi_ddiv>
 8010466:	4632      	mov	r2, r6
 8010468:	4604      	mov	r4, r0
 801046a:	460d      	mov	r5, r1
 801046c:	463b      	mov	r3, r7
 801046e:	4640      	mov	r0, r8
 8010470:	4649      	mov	r1, r9
 8010472:	f7f0 f8a5 	bl	80005c0 <__aeabi_dmul>
 8010476:	4632      	mov	r2, r6
 8010478:	463b      	mov	r3, r7
 801047a:	f7ef feeb 	bl	8000254 <__adddf3>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	4620      	mov	r0, r4
 8010484:	4629      	mov	r1, r5
 8010486:	f7ef fee3 	bl	8000250 <__aeabi_dsub>
 801048a:	4642      	mov	r2, r8
 801048c:	464b      	mov	r3, r9
 801048e:	f7ef fedf 	bl	8000250 <__aeabi_dsub>
 8010492:	460b      	mov	r3, r1
 8010494:	4602      	mov	r2, r0
 8010496:	493a      	ldr	r1, [pc, #232]	; (8010580 <__ieee754_pow+0xa48>)
 8010498:	2000      	movs	r0, #0
 801049a:	f7ef fed9 	bl	8000250 <__aeabi_dsub>
 801049e:	ec41 0b10 	vmov	d0, r0, r1
 80104a2:	ee10 3a90 	vmov	r3, s1
 80104a6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80104aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104ae:	da2b      	bge.n	8010508 <__ieee754_pow+0x9d0>
 80104b0:	4650      	mov	r0, sl
 80104b2:	f000 f975 	bl	80107a0 <scalbn>
 80104b6:	ec51 0b10 	vmov	r0, r1, d0
 80104ba:	ec53 2b18 	vmov	r2, r3, d8
 80104be:	f7ff bbec 	b.w	800fc9a <__ieee754_pow+0x162>
 80104c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80104c6:	4b2f      	ldr	r3, [pc, #188]	; (8010584 <__ieee754_pow+0xa4c>)
 80104c8:	429e      	cmp	r6, r3
 80104ca:	f77f af0b 	ble.w	80102e4 <__ieee754_pow+0x7ac>
 80104ce:	4b2e      	ldr	r3, [pc, #184]	; (8010588 <__ieee754_pow+0xa50>)
 80104d0:	440b      	add	r3, r1
 80104d2:	4303      	orrs	r3, r0
 80104d4:	d009      	beq.n	80104ea <__ieee754_pow+0x9b2>
 80104d6:	2200      	movs	r2, #0
 80104d8:	2300      	movs	r3, #0
 80104da:	ec51 0b18 	vmov	r0, r1, d8
 80104de:	f7f0 fae1 	bl	8000aa4 <__aeabi_dcmplt>
 80104e2:	3800      	subs	r0, #0
 80104e4:	bf18      	it	ne
 80104e6:	2001      	movne	r0, #1
 80104e8:	e446      	b.n	800fd78 <__ieee754_pow+0x240>
 80104ea:	4622      	mov	r2, r4
 80104ec:	462b      	mov	r3, r5
 80104ee:	f7ef feaf 	bl	8000250 <__aeabi_dsub>
 80104f2:	4642      	mov	r2, r8
 80104f4:	464b      	mov	r3, r9
 80104f6:	f7f0 fae9 	bl	8000acc <__aeabi_dcmpge>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	f43f aef2 	beq.w	80102e4 <__ieee754_pow+0x7ac>
 8010500:	e7e9      	b.n	80104d6 <__ieee754_pow+0x99e>
 8010502:	f04f 0a00 	mov.w	sl, #0
 8010506:	e71a      	b.n	801033e <__ieee754_pow+0x806>
 8010508:	ec51 0b10 	vmov	r0, r1, d0
 801050c:	4619      	mov	r1, r3
 801050e:	e7d4      	b.n	80104ba <__ieee754_pow+0x982>
 8010510:	2000      	movs	r0, #0
 8010512:	491b      	ldr	r1, [pc, #108]	; (8010580 <__ieee754_pow+0xa48>)
 8010514:	f7ff bb2f 	b.w	800fb76 <__ieee754_pow+0x3e>
 8010518:	2000      	movs	r0, #0
 801051a:	2100      	movs	r1, #0
 801051c:	f7ff bb2b 	b.w	800fb76 <__ieee754_pow+0x3e>
 8010520:	4630      	mov	r0, r6
 8010522:	4639      	mov	r1, r7
 8010524:	f7ff bb27 	b.w	800fb76 <__ieee754_pow+0x3e>
 8010528:	9204      	str	r2, [sp, #16]
 801052a:	f7ff bb79 	b.w	800fc20 <__ieee754_pow+0xe8>
 801052e:	2300      	movs	r3, #0
 8010530:	f7ff bb63 	b.w	800fbfa <__ieee754_pow+0xc2>
 8010534:	f3af 8000 	nop.w
 8010538:	00000000 	.word	0x00000000
 801053c:	3fe62e43 	.word	0x3fe62e43
 8010540:	fefa39ef 	.word	0xfefa39ef
 8010544:	3fe62e42 	.word	0x3fe62e42
 8010548:	0ca86c39 	.word	0x0ca86c39
 801054c:	be205c61 	.word	0xbe205c61
 8010550:	72bea4d0 	.word	0x72bea4d0
 8010554:	3e663769 	.word	0x3e663769
 8010558:	c5d26bf1 	.word	0xc5d26bf1
 801055c:	3ebbbd41 	.word	0x3ebbbd41
 8010560:	af25de2c 	.word	0xaf25de2c
 8010564:	3f11566a 	.word	0x3f11566a
 8010568:	16bebd93 	.word	0x16bebd93
 801056c:	3f66c16c 	.word	0x3f66c16c
 8010570:	5555553e 	.word	0x5555553e
 8010574:	3fc55555 	.word	0x3fc55555
 8010578:	3fe00000 	.word	0x3fe00000
 801057c:	000fffff 	.word	0x000fffff
 8010580:	3ff00000 	.word	0x3ff00000
 8010584:	4090cbff 	.word	0x4090cbff
 8010588:	3f6f3400 	.word	0x3f6f3400
 801058c:	652b82fe 	.word	0x652b82fe
 8010590:	3c971547 	.word	0x3c971547

08010594 <__ieee754_sqrt>:
 8010594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010598:	4e59      	ldr	r6, [pc, #356]	; (8010700 <__ieee754_sqrt+0x16c>)
 801059a:	ee10 0a10 	vmov	r0, s0
 801059e:	ee10 3a10 	vmov	r3, s0
 80105a2:	ec55 4b10 	vmov	r4, r5, d0
 80105a6:	43ae      	bics	r6, r5
 80105a8:	462a      	mov	r2, r5
 80105aa:	4629      	mov	r1, r5
 80105ac:	d110      	bne.n	80105d0 <__ieee754_sqrt+0x3c>
 80105ae:	ee10 2a10 	vmov	r2, s0
 80105b2:	462b      	mov	r3, r5
 80105b4:	f7f0 f804 	bl	80005c0 <__aeabi_dmul>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	4620      	mov	r0, r4
 80105be:	4629      	mov	r1, r5
 80105c0:	f7ef fe48 	bl	8000254 <__adddf3>
 80105c4:	4604      	mov	r4, r0
 80105c6:	460d      	mov	r5, r1
 80105c8:	ec45 4b10 	vmov	d0, r4, r5
 80105cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d0:	2d00      	cmp	r5, #0
 80105d2:	dc10      	bgt.n	80105f6 <__ieee754_sqrt+0x62>
 80105d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80105d8:	4330      	orrs	r0, r6
 80105da:	d0f5      	beq.n	80105c8 <__ieee754_sqrt+0x34>
 80105dc:	b15d      	cbz	r5, 80105f6 <__ieee754_sqrt+0x62>
 80105de:	ee10 2a10 	vmov	r2, s0
 80105e2:	462b      	mov	r3, r5
 80105e4:	ee10 0a10 	vmov	r0, s0
 80105e8:	f7ef fe32 	bl	8000250 <__aeabi_dsub>
 80105ec:	4602      	mov	r2, r0
 80105ee:	460b      	mov	r3, r1
 80105f0:	f7f0 f910 	bl	8000814 <__aeabi_ddiv>
 80105f4:	e7e6      	b.n	80105c4 <__ieee754_sqrt+0x30>
 80105f6:	1512      	asrs	r2, r2, #20
 80105f8:	d07a      	beq.n	80106f0 <__ieee754_sqrt+0x15c>
 80105fa:	07d4      	lsls	r4, r2, #31
 80105fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010600:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010604:	f04f 0400 	mov.w	r4, #0
 8010608:	bf58      	it	pl
 801060a:	0fda      	lsrpl	r2, r3, #31
 801060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010610:	bf58      	it	pl
 8010612:	005b      	lslpl	r3, r3, #1
 8010614:	f04f 0516 	mov.w	r5, #22
 8010618:	bf58      	it	pl
 801061a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801061e:	4620      	mov	r0, r4
 8010620:	0fda      	lsrs	r2, r3, #31
 8010622:	107f      	asrs	r7, r7, #1
 8010624:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010628:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801062c:	005b      	lsls	r3, r3, #1
 801062e:	1886      	adds	r6, r0, r2
 8010630:	428e      	cmp	r6, r1
 8010632:	bfde      	ittt	le
 8010634:	1b89      	suble	r1, r1, r6
 8010636:	18b0      	addle	r0, r6, r2
 8010638:	18a4      	addle	r4, r4, r2
 801063a:	3d01      	subs	r5, #1
 801063c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010640:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010644:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010648:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801064c:	d1ef      	bne.n	801062e <__ieee754_sqrt+0x9a>
 801064e:	462a      	mov	r2, r5
 8010650:	f04f 0e20 	mov.w	lr, #32
 8010654:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010658:	4281      	cmp	r1, r0
 801065a:	eb06 0c05 	add.w	ip, r6, r5
 801065e:	dc02      	bgt.n	8010666 <__ieee754_sqrt+0xd2>
 8010660:	d113      	bne.n	801068a <__ieee754_sqrt+0xf6>
 8010662:	459c      	cmp	ip, r3
 8010664:	d811      	bhi.n	801068a <__ieee754_sqrt+0xf6>
 8010666:	f1bc 0f00 	cmp.w	ip, #0
 801066a:	eb0c 0506 	add.w	r5, ip, r6
 801066e:	da44      	bge.n	80106fa <__ieee754_sqrt+0x166>
 8010670:	2d00      	cmp	r5, #0
 8010672:	db42      	blt.n	80106fa <__ieee754_sqrt+0x166>
 8010674:	f100 0801 	add.w	r8, r0, #1
 8010678:	1a09      	subs	r1, r1, r0
 801067a:	459c      	cmp	ip, r3
 801067c:	4432      	add	r2, r6
 801067e:	eba3 030c 	sub.w	r3, r3, ip
 8010682:	bf88      	it	hi
 8010684:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010688:	4640      	mov	r0, r8
 801068a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801068e:	f1be 0e01 	subs.w	lr, lr, #1
 8010692:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010696:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801069a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801069e:	d1db      	bne.n	8010658 <__ieee754_sqrt+0xc4>
 80106a0:	430b      	orrs	r3, r1
 80106a2:	d006      	beq.n	80106b2 <__ieee754_sqrt+0x11e>
 80106a4:	1c50      	adds	r0, r2, #1
 80106a6:	bf13      	iteet	ne
 80106a8:	3201      	addne	r2, #1
 80106aa:	3401      	addeq	r4, #1
 80106ac:	4672      	moveq	r2, lr
 80106ae:	f022 0201 	bicne.w	r2, r2, #1
 80106b2:	1063      	asrs	r3, r4, #1
 80106b4:	07e1      	lsls	r1, r4, #31
 80106b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80106ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80106be:	bf48      	it	mi
 80106c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80106c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80106c8:	4614      	mov	r4, r2
 80106ca:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80106ce:	e77b      	b.n	80105c8 <__ieee754_sqrt+0x34>
 80106d0:	0ad9      	lsrs	r1, r3, #11
 80106d2:	3815      	subs	r0, #21
 80106d4:	055b      	lsls	r3, r3, #21
 80106d6:	2900      	cmp	r1, #0
 80106d8:	d0fa      	beq.n	80106d0 <__ieee754_sqrt+0x13c>
 80106da:	02cd      	lsls	r5, r1, #11
 80106dc:	d50a      	bpl.n	80106f4 <__ieee754_sqrt+0x160>
 80106de:	f1c2 0420 	rsb	r4, r2, #32
 80106e2:	1e55      	subs	r5, r2, #1
 80106e4:	fa23 f404 	lsr.w	r4, r3, r4
 80106e8:	4093      	lsls	r3, r2
 80106ea:	1b42      	subs	r2, r0, r5
 80106ec:	4321      	orrs	r1, r4
 80106ee:	e784      	b.n	80105fa <__ieee754_sqrt+0x66>
 80106f0:	4610      	mov	r0, r2
 80106f2:	e7f0      	b.n	80106d6 <__ieee754_sqrt+0x142>
 80106f4:	0049      	lsls	r1, r1, #1
 80106f6:	3201      	adds	r2, #1
 80106f8:	e7ef      	b.n	80106da <__ieee754_sqrt+0x146>
 80106fa:	4680      	mov	r8, r0
 80106fc:	e7bc      	b.n	8010678 <__ieee754_sqrt+0xe4>
 80106fe:	bf00      	nop
 8010700:	7ff00000 	.word	0x7ff00000

08010704 <with_errno>:
 8010704:	b570      	push	{r4, r5, r6, lr}
 8010706:	4604      	mov	r4, r0
 8010708:	460d      	mov	r5, r1
 801070a:	4616      	mov	r6, r2
 801070c:	f000 f8d6 	bl	80108bc <__errno>
 8010710:	4629      	mov	r1, r5
 8010712:	6006      	str	r6, [r0, #0]
 8010714:	4620      	mov	r0, r4
 8010716:	bd70      	pop	{r4, r5, r6, pc}

08010718 <xflow>:
 8010718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801071a:	4614      	mov	r4, r2
 801071c:	461d      	mov	r5, r3
 801071e:	b108      	cbz	r0, 8010724 <xflow+0xc>
 8010720:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010724:	4620      	mov	r0, r4
 8010726:	4629      	mov	r1, r5
 8010728:	e9cd 2300 	strd	r2, r3, [sp]
 801072c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010730:	f7ef ff46 	bl	80005c0 <__aeabi_dmul>
 8010734:	2222      	movs	r2, #34	; 0x22
 8010736:	b003      	add	sp, #12
 8010738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801073c:	f7ff bfe2 	b.w	8010704 <with_errno>

08010740 <__math_uflow>:
 8010740:	b508      	push	{r3, lr}
 8010742:	2200      	movs	r2, #0
 8010744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010748:	f7ff ffe6 	bl	8010718 <xflow>
 801074c:	ec41 0b10 	vmov	d0, r0, r1
 8010750:	bd08      	pop	{r3, pc}

08010752 <__math_oflow>:
 8010752:	b508      	push	{r3, lr}
 8010754:	2200      	movs	r2, #0
 8010756:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801075a:	f7ff ffdd 	bl	8010718 <xflow>
 801075e:	ec41 0b10 	vmov	d0, r0, r1
 8010762:	bd08      	pop	{r3, pc}

08010764 <fabs>:
 8010764:	ec51 0b10 	vmov	r0, r1, d0
 8010768:	ee10 2a10 	vmov	r2, s0
 801076c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010770:	ec43 2b10 	vmov	d0, r2, r3
 8010774:	4770      	bx	lr

08010776 <finite>:
 8010776:	b082      	sub	sp, #8
 8010778:	ed8d 0b00 	vstr	d0, [sp]
 801077c:	9801      	ldr	r0, [sp, #4]
 801077e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010782:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010786:	0fc0      	lsrs	r0, r0, #31
 8010788:	b002      	add	sp, #8
 801078a:	4770      	bx	lr
 801078c:	0000      	movs	r0, r0
	...

08010790 <nan>:
 8010790:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010798 <nan+0x8>
 8010794:	4770      	bx	lr
 8010796:	bf00      	nop
 8010798:	00000000 	.word	0x00000000
 801079c:	7ff80000 	.word	0x7ff80000

080107a0 <scalbn>:
 80107a0:	b570      	push	{r4, r5, r6, lr}
 80107a2:	ec55 4b10 	vmov	r4, r5, d0
 80107a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80107aa:	4606      	mov	r6, r0
 80107ac:	462b      	mov	r3, r5
 80107ae:	b99a      	cbnz	r2, 80107d8 <scalbn+0x38>
 80107b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80107b4:	4323      	orrs	r3, r4
 80107b6:	d036      	beq.n	8010826 <scalbn+0x86>
 80107b8:	4b39      	ldr	r3, [pc, #228]	; (80108a0 <scalbn+0x100>)
 80107ba:	4629      	mov	r1, r5
 80107bc:	2200      	movs	r2, #0
 80107be:	ee10 0a10 	vmov	r0, s0
 80107c2:	f7ef fefd 	bl	80005c0 <__aeabi_dmul>
 80107c6:	4b37      	ldr	r3, [pc, #220]	; (80108a4 <scalbn+0x104>)
 80107c8:	4604      	mov	r4, r0
 80107ca:	460d      	mov	r5, r1
 80107cc:	429e      	cmp	r6, r3
 80107ce:	da10      	bge.n	80107f2 <scalbn+0x52>
 80107d0:	a32b      	add	r3, pc, #172	; (adr r3, 8010880 <scalbn+0xe0>)
 80107d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d6:	e03a      	b.n	801084e <scalbn+0xae>
 80107d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80107dc:	428a      	cmp	r2, r1
 80107de:	d10c      	bne.n	80107fa <scalbn+0x5a>
 80107e0:	ee10 2a10 	vmov	r2, s0
 80107e4:	4620      	mov	r0, r4
 80107e6:	4629      	mov	r1, r5
 80107e8:	f7ef fd34 	bl	8000254 <__adddf3>
 80107ec:	4604      	mov	r4, r0
 80107ee:	460d      	mov	r5, r1
 80107f0:	e019      	b.n	8010826 <scalbn+0x86>
 80107f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80107f6:	460b      	mov	r3, r1
 80107f8:	3a36      	subs	r2, #54	; 0x36
 80107fa:	4432      	add	r2, r6
 80107fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010800:	428a      	cmp	r2, r1
 8010802:	dd08      	ble.n	8010816 <scalbn+0x76>
 8010804:	2d00      	cmp	r5, #0
 8010806:	a120      	add	r1, pc, #128	; (adr r1, 8010888 <scalbn+0xe8>)
 8010808:	e9d1 0100 	ldrd	r0, r1, [r1]
 801080c:	da1c      	bge.n	8010848 <scalbn+0xa8>
 801080e:	a120      	add	r1, pc, #128	; (adr r1, 8010890 <scalbn+0xf0>)
 8010810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010814:	e018      	b.n	8010848 <scalbn+0xa8>
 8010816:	2a00      	cmp	r2, #0
 8010818:	dd08      	ble.n	801082c <scalbn+0x8c>
 801081a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801081e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010826:	ec45 4b10 	vmov	d0, r4, r5
 801082a:	bd70      	pop	{r4, r5, r6, pc}
 801082c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010830:	da19      	bge.n	8010866 <scalbn+0xc6>
 8010832:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010836:	429e      	cmp	r6, r3
 8010838:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801083c:	dd0a      	ble.n	8010854 <scalbn+0xb4>
 801083e:	a112      	add	r1, pc, #72	; (adr r1, 8010888 <scalbn+0xe8>)
 8010840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1e2      	bne.n	801080e <scalbn+0x6e>
 8010848:	a30f      	add	r3, pc, #60	; (adr r3, 8010888 <scalbn+0xe8>)
 801084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084e:	f7ef feb7 	bl	80005c0 <__aeabi_dmul>
 8010852:	e7cb      	b.n	80107ec <scalbn+0x4c>
 8010854:	a10a      	add	r1, pc, #40	; (adr r1, 8010880 <scalbn+0xe0>)
 8010856:	e9d1 0100 	ldrd	r0, r1, [r1]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d0b8      	beq.n	80107d0 <scalbn+0x30>
 801085e:	a10e      	add	r1, pc, #56	; (adr r1, 8010898 <scalbn+0xf8>)
 8010860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010864:	e7b4      	b.n	80107d0 <scalbn+0x30>
 8010866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801086a:	3236      	adds	r2, #54	; 0x36
 801086c:	4620      	mov	r0, r4
 801086e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010872:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010876:	2200      	movs	r2, #0
 8010878:	4b0b      	ldr	r3, [pc, #44]	; (80108a8 <scalbn+0x108>)
 801087a:	e7e8      	b.n	801084e <scalbn+0xae>
 801087c:	f3af 8000 	nop.w
 8010880:	c2f8f359 	.word	0xc2f8f359
 8010884:	01a56e1f 	.word	0x01a56e1f
 8010888:	8800759c 	.word	0x8800759c
 801088c:	7e37e43c 	.word	0x7e37e43c
 8010890:	8800759c 	.word	0x8800759c
 8010894:	fe37e43c 	.word	0xfe37e43c
 8010898:	c2f8f359 	.word	0xc2f8f359
 801089c:	81a56e1f 	.word	0x81a56e1f
 80108a0:	43500000 	.word	0x43500000
 80108a4:	ffff3cb0 	.word	0xffff3cb0
 80108a8:	3c900000 	.word	0x3c900000

080108ac <abort>:
 80108ac:	2006      	movs	r0, #6
 80108ae:	b508      	push	{r3, lr}
 80108b0:	f000 ffda 	bl	8011868 <raise>
 80108b4:	2001      	movs	r0, #1
 80108b6:	f7f2 fafd 	bl	8002eb4 <_exit>
	...

080108bc <__errno>:
 80108bc:	4b01      	ldr	r3, [pc, #4]	; (80108c4 <__errno+0x8>)
 80108be:	6818      	ldr	r0, [r3, #0]
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	20000100 	.word	0x20000100

080108c8 <__libc_init_array>:
 80108c8:	b570      	push	{r4, r5, r6, lr}
 80108ca:	4d0d      	ldr	r5, [pc, #52]	; (8010900 <__libc_init_array+0x38>)
 80108cc:	2600      	movs	r6, #0
 80108ce:	4c0d      	ldr	r4, [pc, #52]	; (8010904 <__libc_init_array+0x3c>)
 80108d0:	1b64      	subs	r4, r4, r5
 80108d2:	10a4      	asrs	r4, r4, #2
 80108d4:	42a6      	cmp	r6, r4
 80108d6:	d109      	bne.n	80108ec <__libc_init_array+0x24>
 80108d8:	4d0b      	ldr	r5, [pc, #44]	; (8010908 <__libc_init_array+0x40>)
 80108da:	2600      	movs	r6, #0
 80108dc:	4c0b      	ldr	r4, [pc, #44]	; (801090c <__libc_init_array+0x44>)
 80108de:	f004 fc8f 	bl	8015200 <_init>
 80108e2:	1b64      	subs	r4, r4, r5
 80108e4:	10a4      	asrs	r4, r4, #2
 80108e6:	42a6      	cmp	r6, r4
 80108e8:	d105      	bne.n	80108f6 <__libc_init_array+0x2e>
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
 80108ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80108f0:	3601      	adds	r6, #1
 80108f2:	4798      	blx	r3
 80108f4:	e7ee      	b.n	80108d4 <__libc_init_array+0xc>
 80108f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80108fa:	3601      	adds	r6, #1
 80108fc:	4798      	blx	r3
 80108fe:	e7f2      	b.n	80108e6 <__libc_init_array+0x1e>
 8010900:	080157dc 	.word	0x080157dc
 8010904:	080157dc 	.word	0x080157dc
 8010908:	080157dc 	.word	0x080157dc
 801090c:	080157e4 	.word	0x080157e4

08010910 <malloc>:
 8010910:	4b02      	ldr	r3, [pc, #8]	; (801091c <malloc+0xc>)
 8010912:	4601      	mov	r1, r0
 8010914:	6818      	ldr	r0, [r3, #0]
 8010916:	f000 b877 	b.w	8010a08 <_malloc_r>
 801091a:	bf00      	nop
 801091c:	20000100 	.word	0x20000100

08010920 <memset>:
 8010920:	4402      	add	r2, r0
 8010922:	4603      	mov	r3, r0
 8010924:	4293      	cmp	r3, r2
 8010926:	d100      	bne.n	801092a <memset+0xa>
 8010928:	4770      	bx	lr
 801092a:	f803 1b01 	strb.w	r1, [r3], #1
 801092e:	e7f9      	b.n	8010924 <memset+0x4>

08010930 <_free_r>:
 8010930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010932:	2900      	cmp	r1, #0
 8010934:	d043      	beq.n	80109be <_free_r+0x8e>
 8010936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801093a:	1f0c      	subs	r4, r1, #4
 801093c:	9001      	str	r0, [sp, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	bfb8      	it	lt
 8010942:	18e4      	addlt	r4, r4, r3
 8010944:	f003 f894 	bl	8013a70 <__malloc_lock>
 8010948:	4a1e      	ldr	r2, [pc, #120]	; (80109c4 <_free_r+0x94>)
 801094a:	9801      	ldr	r0, [sp, #4]
 801094c:	6813      	ldr	r3, [r2, #0]
 801094e:	b933      	cbnz	r3, 801095e <_free_r+0x2e>
 8010950:	6063      	str	r3, [r4, #4]
 8010952:	6014      	str	r4, [r2, #0]
 8010954:	b003      	add	sp, #12
 8010956:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801095a:	f003 b88f 	b.w	8013a7c <__malloc_unlock>
 801095e:	42a3      	cmp	r3, r4
 8010960:	d908      	bls.n	8010974 <_free_r+0x44>
 8010962:	6825      	ldr	r5, [r4, #0]
 8010964:	1961      	adds	r1, r4, r5
 8010966:	428b      	cmp	r3, r1
 8010968:	bf01      	itttt	eq
 801096a:	6819      	ldreq	r1, [r3, #0]
 801096c:	685b      	ldreq	r3, [r3, #4]
 801096e:	1949      	addeq	r1, r1, r5
 8010970:	6021      	streq	r1, [r4, #0]
 8010972:	e7ed      	b.n	8010950 <_free_r+0x20>
 8010974:	461a      	mov	r2, r3
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	b10b      	cbz	r3, 801097e <_free_r+0x4e>
 801097a:	42a3      	cmp	r3, r4
 801097c:	d9fa      	bls.n	8010974 <_free_r+0x44>
 801097e:	6811      	ldr	r1, [r2, #0]
 8010980:	1855      	adds	r5, r2, r1
 8010982:	42a5      	cmp	r5, r4
 8010984:	d10b      	bne.n	801099e <_free_r+0x6e>
 8010986:	6824      	ldr	r4, [r4, #0]
 8010988:	4421      	add	r1, r4
 801098a:	1854      	adds	r4, r2, r1
 801098c:	6011      	str	r1, [r2, #0]
 801098e:	42a3      	cmp	r3, r4
 8010990:	d1e0      	bne.n	8010954 <_free_r+0x24>
 8010992:	681c      	ldr	r4, [r3, #0]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	4421      	add	r1, r4
 8010998:	6053      	str	r3, [r2, #4]
 801099a:	6011      	str	r1, [r2, #0]
 801099c:	e7da      	b.n	8010954 <_free_r+0x24>
 801099e:	d902      	bls.n	80109a6 <_free_r+0x76>
 80109a0:	230c      	movs	r3, #12
 80109a2:	6003      	str	r3, [r0, #0]
 80109a4:	e7d6      	b.n	8010954 <_free_r+0x24>
 80109a6:	6825      	ldr	r5, [r4, #0]
 80109a8:	1961      	adds	r1, r4, r5
 80109aa:	428b      	cmp	r3, r1
 80109ac:	bf02      	ittt	eq
 80109ae:	6819      	ldreq	r1, [r3, #0]
 80109b0:	685b      	ldreq	r3, [r3, #4]
 80109b2:	1949      	addeq	r1, r1, r5
 80109b4:	6063      	str	r3, [r4, #4]
 80109b6:	bf08      	it	eq
 80109b8:	6021      	streq	r1, [r4, #0]
 80109ba:	6054      	str	r4, [r2, #4]
 80109bc:	e7ca      	b.n	8010954 <_free_r+0x24>
 80109be:	b003      	add	sp, #12
 80109c0:	bd30      	pop	{r4, r5, pc}
 80109c2:	bf00      	nop
 80109c4:	20002170 	.word	0x20002170

080109c8 <sbrk_aligned>:
 80109c8:	b570      	push	{r4, r5, r6, lr}
 80109ca:	4e0e      	ldr	r6, [pc, #56]	; (8010a04 <sbrk_aligned+0x3c>)
 80109cc:	460c      	mov	r4, r1
 80109ce:	4605      	mov	r5, r0
 80109d0:	6831      	ldr	r1, [r6, #0]
 80109d2:	b911      	cbnz	r1, 80109da <sbrk_aligned+0x12>
 80109d4:	f000 ff0a 	bl	80117ec <_sbrk_r>
 80109d8:	6030      	str	r0, [r6, #0]
 80109da:	4621      	mov	r1, r4
 80109dc:	4628      	mov	r0, r5
 80109de:	f000 ff05 	bl	80117ec <_sbrk_r>
 80109e2:	1c43      	adds	r3, r0, #1
 80109e4:	d00a      	beq.n	80109fc <sbrk_aligned+0x34>
 80109e6:	1cc4      	adds	r4, r0, #3
 80109e8:	f024 0403 	bic.w	r4, r4, #3
 80109ec:	42a0      	cmp	r0, r4
 80109ee:	d007      	beq.n	8010a00 <sbrk_aligned+0x38>
 80109f0:	1a21      	subs	r1, r4, r0
 80109f2:	4628      	mov	r0, r5
 80109f4:	f000 fefa 	bl	80117ec <_sbrk_r>
 80109f8:	3001      	adds	r0, #1
 80109fa:	d101      	bne.n	8010a00 <sbrk_aligned+0x38>
 80109fc:	f04f 34ff 	mov.w	r4, #4294967295
 8010a00:	4620      	mov	r0, r4
 8010a02:	bd70      	pop	{r4, r5, r6, pc}
 8010a04:	20002174 	.word	0x20002174

08010a08 <_malloc_r>:
 8010a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0c:	1ccd      	adds	r5, r1, #3
 8010a0e:	4607      	mov	r7, r0
 8010a10:	f025 0503 	bic.w	r5, r5, #3
 8010a14:	3508      	adds	r5, #8
 8010a16:	2d0c      	cmp	r5, #12
 8010a18:	bf38      	it	cc
 8010a1a:	250c      	movcc	r5, #12
 8010a1c:	2d00      	cmp	r5, #0
 8010a1e:	db01      	blt.n	8010a24 <_malloc_r+0x1c>
 8010a20:	42a9      	cmp	r1, r5
 8010a22:	d905      	bls.n	8010a30 <_malloc_r+0x28>
 8010a24:	230c      	movs	r3, #12
 8010a26:	2600      	movs	r6, #0
 8010a28:	603b      	str	r3, [r7, #0]
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a30:	4e2e      	ldr	r6, [pc, #184]	; (8010aec <_malloc_r+0xe4>)
 8010a32:	f003 f81d 	bl	8013a70 <__malloc_lock>
 8010a36:	6833      	ldr	r3, [r6, #0]
 8010a38:	461c      	mov	r4, r3
 8010a3a:	bb34      	cbnz	r4, 8010a8a <_malloc_r+0x82>
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	4638      	mov	r0, r7
 8010a40:	f7ff ffc2 	bl	80109c8 <sbrk_aligned>
 8010a44:	1c43      	adds	r3, r0, #1
 8010a46:	4604      	mov	r4, r0
 8010a48:	d14d      	bne.n	8010ae6 <_malloc_r+0xde>
 8010a4a:	6834      	ldr	r4, [r6, #0]
 8010a4c:	4626      	mov	r6, r4
 8010a4e:	2e00      	cmp	r6, #0
 8010a50:	d140      	bne.n	8010ad4 <_malloc_r+0xcc>
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	4631      	mov	r1, r6
 8010a56:	4638      	mov	r0, r7
 8010a58:	eb04 0803 	add.w	r8, r4, r3
 8010a5c:	f000 fec6 	bl	80117ec <_sbrk_r>
 8010a60:	4580      	cmp	r8, r0
 8010a62:	d13a      	bne.n	8010ada <_malloc_r+0xd2>
 8010a64:	6821      	ldr	r1, [r4, #0]
 8010a66:	3503      	adds	r5, #3
 8010a68:	4638      	mov	r0, r7
 8010a6a:	1a6d      	subs	r5, r5, r1
 8010a6c:	f025 0503 	bic.w	r5, r5, #3
 8010a70:	3508      	adds	r5, #8
 8010a72:	2d0c      	cmp	r5, #12
 8010a74:	bf38      	it	cc
 8010a76:	250c      	movcc	r5, #12
 8010a78:	4629      	mov	r1, r5
 8010a7a:	f7ff ffa5 	bl	80109c8 <sbrk_aligned>
 8010a7e:	3001      	adds	r0, #1
 8010a80:	d02b      	beq.n	8010ada <_malloc_r+0xd2>
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	442b      	add	r3, r5
 8010a86:	6023      	str	r3, [r4, #0]
 8010a88:	e00e      	b.n	8010aa8 <_malloc_r+0xa0>
 8010a8a:	6822      	ldr	r2, [r4, #0]
 8010a8c:	1b52      	subs	r2, r2, r5
 8010a8e:	d41e      	bmi.n	8010ace <_malloc_r+0xc6>
 8010a90:	2a0b      	cmp	r2, #11
 8010a92:	d916      	bls.n	8010ac2 <_malloc_r+0xba>
 8010a94:	1961      	adds	r1, r4, r5
 8010a96:	42a3      	cmp	r3, r4
 8010a98:	6025      	str	r5, [r4, #0]
 8010a9a:	bf18      	it	ne
 8010a9c:	6059      	strne	r1, [r3, #4]
 8010a9e:	6863      	ldr	r3, [r4, #4]
 8010aa0:	bf08      	it	eq
 8010aa2:	6031      	streq	r1, [r6, #0]
 8010aa4:	5162      	str	r2, [r4, r5]
 8010aa6:	604b      	str	r3, [r1, #4]
 8010aa8:	f104 060b 	add.w	r6, r4, #11
 8010aac:	4638      	mov	r0, r7
 8010aae:	f002 ffe5 	bl	8013a7c <__malloc_unlock>
 8010ab2:	1d23      	adds	r3, r4, #4
 8010ab4:	f026 0607 	bic.w	r6, r6, #7
 8010ab8:	1af2      	subs	r2, r6, r3
 8010aba:	d0b6      	beq.n	8010a2a <_malloc_r+0x22>
 8010abc:	1b9b      	subs	r3, r3, r6
 8010abe:	50a3      	str	r3, [r4, r2]
 8010ac0:	e7b3      	b.n	8010a2a <_malloc_r+0x22>
 8010ac2:	6862      	ldr	r2, [r4, #4]
 8010ac4:	42a3      	cmp	r3, r4
 8010ac6:	bf0c      	ite	eq
 8010ac8:	6032      	streq	r2, [r6, #0]
 8010aca:	605a      	strne	r2, [r3, #4]
 8010acc:	e7ec      	b.n	8010aa8 <_malloc_r+0xa0>
 8010ace:	4623      	mov	r3, r4
 8010ad0:	6864      	ldr	r4, [r4, #4]
 8010ad2:	e7b2      	b.n	8010a3a <_malloc_r+0x32>
 8010ad4:	4634      	mov	r4, r6
 8010ad6:	6876      	ldr	r6, [r6, #4]
 8010ad8:	e7b9      	b.n	8010a4e <_malloc_r+0x46>
 8010ada:	230c      	movs	r3, #12
 8010adc:	4638      	mov	r0, r7
 8010ade:	603b      	str	r3, [r7, #0]
 8010ae0:	f002 ffcc 	bl	8013a7c <__malloc_unlock>
 8010ae4:	e7a1      	b.n	8010a2a <_malloc_r+0x22>
 8010ae6:	6025      	str	r5, [r4, #0]
 8010ae8:	e7de      	b.n	8010aa8 <_malloc_r+0xa0>
 8010aea:	bf00      	nop
 8010aec:	20002170 	.word	0x20002170

08010af0 <__cvt>:
 8010af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010af4:	ec55 4b10 	vmov	r4, r5, d0
 8010af8:	2d00      	cmp	r5, #0
 8010afa:	460e      	mov	r6, r1
 8010afc:	4619      	mov	r1, r3
 8010afe:	462b      	mov	r3, r5
 8010b00:	bfb4      	ite	lt
 8010b02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010b06:	2300      	movge	r3, #0
 8010b08:	4691      	mov	r9, r2
 8010b0a:	bfbf      	itttt	lt
 8010b0c:	4622      	movlt	r2, r4
 8010b0e:	461d      	movlt	r5, r3
 8010b10:	232d      	movlt	r3, #45	; 0x2d
 8010b12:	4614      	movlt	r4, r2
 8010b14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010b18:	700b      	strb	r3, [r1, #0]
 8010b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b1c:	f023 0820 	bic.w	r8, r3, #32
 8010b20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b24:	d005      	beq.n	8010b32 <__cvt+0x42>
 8010b26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010b2a:	d100      	bne.n	8010b2e <__cvt+0x3e>
 8010b2c:	3601      	adds	r6, #1
 8010b2e:	2102      	movs	r1, #2
 8010b30:	e000      	b.n	8010b34 <__cvt+0x44>
 8010b32:	2103      	movs	r1, #3
 8010b34:	ab03      	add	r3, sp, #12
 8010b36:	4632      	mov	r2, r6
 8010b38:	9301      	str	r3, [sp, #4]
 8010b3a:	ab02      	add	r3, sp, #8
 8010b3c:	ec45 4b10 	vmov	d0, r4, r5
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	4653      	mov	r3, sl
 8010b44:	f001 fe08 	bl	8012758 <_dtoa_r>
 8010b48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010b4c:	4607      	mov	r7, r0
 8010b4e:	d102      	bne.n	8010b56 <__cvt+0x66>
 8010b50:	f019 0f01 	tst.w	r9, #1
 8010b54:	d022      	beq.n	8010b9c <__cvt+0xac>
 8010b56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b5a:	eb07 0906 	add.w	r9, r7, r6
 8010b5e:	d110      	bne.n	8010b82 <__cvt+0x92>
 8010b60:	783b      	ldrb	r3, [r7, #0]
 8010b62:	2b30      	cmp	r3, #48	; 0x30
 8010b64:	d10a      	bne.n	8010b7c <__cvt+0x8c>
 8010b66:	2200      	movs	r2, #0
 8010b68:	2300      	movs	r3, #0
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	4629      	mov	r1, r5
 8010b6e:	f7ef ff8f 	bl	8000a90 <__aeabi_dcmpeq>
 8010b72:	b918      	cbnz	r0, 8010b7c <__cvt+0x8c>
 8010b74:	f1c6 0601 	rsb	r6, r6, #1
 8010b78:	f8ca 6000 	str.w	r6, [sl]
 8010b7c:	f8da 3000 	ldr.w	r3, [sl]
 8010b80:	4499      	add	r9, r3
 8010b82:	2200      	movs	r2, #0
 8010b84:	2300      	movs	r3, #0
 8010b86:	4620      	mov	r0, r4
 8010b88:	4629      	mov	r1, r5
 8010b8a:	f7ef ff81 	bl	8000a90 <__aeabi_dcmpeq>
 8010b8e:	b108      	cbz	r0, 8010b94 <__cvt+0xa4>
 8010b90:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b94:	2230      	movs	r2, #48	; 0x30
 8010b96:	9b03      	ldr	r3, [sp, #12]
 8010b98:	454b      	cmp	r3, r9
 8010b9a:	d307      	bcc.n	8010bac <__cvt+0xbc>
 8010b9c:	9b03      	ldr	r3, [sp, #12]
 8010b9e:	4638      	mov	r0, r7
 8010ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ba2:	1bdb      	subs	r3, r3, r7
 8010ba4:	6013      	str	r3, [r2, #0]
 8010ba6:	b004      	add	sp, #16
 8010ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bac:	1c59      	adds	r1, r3, #1
 8010bae:	9103      	str	r1, [sp, #12]
 8010bb0:	701a      	strb	r2, [r3, #0]
 8010bb2:	e7f0      	b.n	8010b96 <__cvt+0xa6>

08010bb4 <__exponent>:
 8010bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bb6:	2900      	cmp	r1, #0
 8010bb8:	4603      	mov	r3, r0
 8010bba:	bfb8      	it	lt
 8010bbc:	4249      	neglt	r1, r1
 8010bbe:	f803 2b02 	strb.w	r2, [r3], #2
 8010bc2:	bfb4      	ite	lt
 8010bc4:	222d      	movlt	r2, #45	; 0x2d
 8010bc6:	222b      	movge	r2, #43	; 0x2b
 8010bc8:	2909      	cmp	r1, #9
 8010bca:	7042      	strb	r2, [r0, #1]
 8010bcc:	dd2a      	ble.n	8010c24 <__exponent+0x70>
 8010bce:	f10d 0407 	add.w	r4, sp, #7
 8010bd2:	270a      	movs	r7, #10
 8010bd4:	46a4      	mov	ip, r4
 8010bd6:	460a      	mov	r2, r1
 8010bd8:	46a6      	mov	lr, r4
 8010bda:	3c01      	subs	r4, #1
 8010bdc:	2a63      	cmp	r2, #99	; 0x63
 8010bde:	fb91 f6f7 	sdiv	r6, r1, r7
 8010be2:	fb07 1516 	mls	r5, r7, r6, r1
 8010be6:	4631      	mov	r1, r6
 8010be8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8010bec:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010bf0:	dcf1      	bgt.n	8010bd6 <__exponent+0x22>
 8010bf2:	3130      	adds	r1, #48	; 0x30
 8010bf4:	f1ae 0502 	sub.w	r5, lr, #2
 8010bf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010bfc:	1c44      	adds	r4, r0, #1
 8010bfe:	4629      	mov	r1, r5
 8010c00:	4561      	cmp	r1, ip
 8010c02:	d30a      	bcc.n	8010c1a <__exponent+0x66>
 8010c04:	f10d 0209 	add.w	r2, sp, #9
 8010c08:	eba2 020e 	sub.w	r2, r2, lr
 8010c0c:	4565      	cmp	r5, ip
 8010c0e:	bf88      	it	hi
 8010c10:	2200      	movhi	r2, #0
 8010c12:	4413      	add	r3, r2
 8010c14:	1a18      	subs	r0, r3, r0
 8010c16:	b003      	add	sp, #12
 8010c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010c22:	e7ed      	b.n	8010c00 <__exponent+0x4c>
 8010c24:	2330      	movs	r3, #48	; 0x30
 8010c26:	3130      	adds	r1, #48	; 0x30
 8010c28:	7083      	strb	r3, [r0, #2]
 8010c2a:	1d03      	adds	r3, r0, #4
 8010c2c:	70c1      	strb	r1, [r0, #3]
 8010c2e:	e7f1      	b.n	8010c14 <__exponent+0x60>

08010c30 <_printf_float>:
 8010c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c34:	ed2d 8b02 	vpush	{d8}
 8010c38:	b08d      	sub	sp, #52	; 0x34
 8010c3a:	460c      	mov	r4, r1
 8010c3c:	4616      	mov	r6, r2
 8010c3e:	461f      	mov	r7, r3
 8010c40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010c44:	4605      	mov	r5, r0
 8010c46:	f002 fee1 	bl	8013a0c <_localeconv_r>
 8010c4a:	f8d0 a000 	ldr.w	sl, [r0]
 8010c4e:	4650      	mov	r0, sl
 8010c50:	f7ef faf2 	bl	8000238 <strlen>
 8010c54:	2300      	movs	r3, #0
 8010c56:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010c5a:	ee08 0a10 	vmov	s16, r0
 8010c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	9305      	str	r3, [sp, #20]
 8010c64:	f8d8 3000 	ldr.w	r3, [r8]
 8010c68:	3307      	adds	r3, #7
 8010c6a:	f023 0307 	bic.w	r3, r3, #7
 8010c6e:	f103 0208 	add.w	r2, r3, #8
 8010c72:	f8c8 2000 	str.w	r2, [r8]
 8010c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010c82:	f04f 32ff 	mov.w	r2, #4294967295
 8010c86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c8e:	9307      	str	r3, [sp, #28]
 8010c90:	4b9e      	ldr	r3, [pc, #632]	; (8010f0c <_printf_float+0x2dc>)
 8010c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c96:	f7ef ff2d 	bl	8000af4 <__aeabi_dcmpun>
 8010c9a:	bb88      	cbnz	r0, 8010d00 <_printf_float+0xd0>
 8010c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010ca0:	4b9a      	ldr	r3, [pc, #616]	; (8010f0c <_printf_float+0x2dc>)
 8010ca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ca6:	f7ef ff07 	bl	8000ab8 <__aeabi_dcmple>
 8010caa:	bb48      	cbnz	r0, 8010d00 <_printf_float+0xd0>
 8010cac:	2200      	movs	r2, #0
 8010cae:	2300      	movs	r3, #0
 8010cb0:	4640      	mov	r0, r8
 8010cb2:	4649      	mov	r1, r9
 8010cb4:	f7ef fef6 	bl	8000aa4 <__aeabi_dcmplt>
 8010cb8:	b110      	cbz	r0, 8010cc0 <_printf_float+0x90>
 8010cba:	232d      	movs	r3, #45	; 0x2d
 8010cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cc0:	4b93      	ldr	r3, [pc, #588]	; (8010f10 <_printf_float+0x2e0>)
 8010cc2:	4894      	ldr	r0, [pc, #592]	; (8010f14 <_printf_float+0x2e4>)
 8010cc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010cc8:	bf94      	ite	ls
 8010cca:	4698      	movls	r8, r3
 8010ccc:	4680      	movhi	r8, r0
 8010cce:	2303      	movs	r3, #3
 8010cd0:	f04f 0900 	mov.w	r9, #0
 8010cd4:	6123      	str	r3, [r4, #16]
 8010cd6:	9b05      	ldr	r3, [sp, #20]
 8010cd8:	f023 0204 	bic.w	r2, r3, #4
 8010cdc:	6022      	str	r2, [r4, #0]
 8010cde:	4633      	mov	r3, r6
 8010ce0:	aa0b      	add	r2, sp, #44	; 0x2c
 8010ce2:	4621      	mov	r1, r4
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	9700      	str	r7, [sp, #0]
 8010ce8:	f000 f9d8 	bl	801109c <_printf_common>
 8010cec:	3001      	adds	r0, #1
 8010cee:	f040 8090 	bne.w	8010e12 <_printf_float+0x1e2>
 8010cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf6:	b00d      	add	sp, #52	; 0x34
 8010cf8:	ecbd 8b02 	vpop	{d8}
 8010cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d00:	4642      	mov	r2, r8
 8010d02:	464b      	mov	r3, r9
 8010d04:	4640      	mov	r0, r8
 8010d06:	4649      	mov	r1, r9
 8010d08:	f7ef fef4 	bl	8000af4 <__aeabi_dcmpun>
 8010d0c:	b140      	cbz	r0, 8010d20 <_printf_float+0xf0>
 8010d0e:	464b      	mov	r3, r9
 8010d10:	4881      	ldr	r0, [pc, #516]	; (8010f18 <_printf_float+0x2e8>)
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	bfbc      	itt	lt
 8010d16:	232d      	movlt	r3, #45	; 0x2d
 8010d18:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010d1c:	4b7f      	ldr	r3, [pc, #508]	; (8010f1c <_printf_float+0x2ec>)
 8010d1e:	e7d1      	b.n	8010cc4 <_printf_float+0x94>
 8010d20:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010d24:	6863      	ldr	r3, [r4, #4]
 8010d26:	9206      	str	r2, [sp, #24]
 8010d28:	1c5a      	adds	r2, r3, #1
 8010d2a:	d13f      	bne.n	8010dac <_printf_float+0x17c>
 8010d2c:	2306      	movs	r3, #6
 8010d2e:	6063      	str	r3, [r4, #4]
 8010d30:	9b05      	ldr	r3, [sp, #20]
 8010d32:	4628      	mov	r0, r5
 8010d34:	6861      	ldr	r1, [r4, #4]
 8010d36:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	9303      	str	r3, [sp, #12]
 8010d3e:	ab0a      	add	r3, sp, #40	; 0x28
 8010d40:	6022      	str	r2, [r4, #0]
 8010d42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010d46:	ab09      	add	r3, sp, #36	; 0x24
 8010d48:	ec49 8b10 	vmov	d0, r8, r9
 8010d4c:	9300      	str	r3, [sp, #0]
 8010d4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010d52:	f7ff fecd 	bl	8010af0 <__cvt>
 8010d56:	9b06      	ldr	r3, [sp, #24]
 8010d58:	4680      	mov	r8, r0
 8010d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d5c:	2b47      	cmp	r3, #71	; 0x47
 8010d5e:	d108      	bne.n	8010d72 <_printf_float+0x142>
 8010d60:	1cc8      	adds	r0, r1, #3
 8010d62:	db02      	blt.n	8010d6a <_printf_float+0x13a>
 8010d64:	6863      	ldr	r3, [r4, #4]
 8010d66:	4299      	cmp	r1, r3
 8010d68:	dd41      	ble.n	8010dee <_printf_float+0x1be>
 8010d6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8010d6e:	fa5f fb8b 	uxtb.w	fp, fp
 8010d72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d76:	d820      	bhi.n	8010dba <_printf_float+0x18a>
 8010d78:	3901      	subs	r1, #1
 8010d7a:	465a      	mov	r2, fp
 8010d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d80:	9109      	str	r1, [sp, #36]	; 0x24
 8010d82:	f7ff ff17 	bl	8010bb4 <__exponent>
 8010d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d88:	4681      	mov	r9, r0
 8010d8a:	1813      	adds	r3, r2, r0
 8010d8c:	2a01      	cmp	r2, #1
 8010d8e:	6123      	str	r3, [r4, #16]
 8010d90:	dc02      	bgt.n	8010d98 <_printf_float+0x168>
 8010d92:	6822      	ldr	r2, [r4, #0]
 8010d94:	07d2      	lsls	r2, r2, #31
 8010d96:	d501      	bpl.n	8010d9c <_printf_float+0x16c>
 8010d98:	3301      	adds	r3, #1
 8010d9a:	6123      	str	r3, [r4, #16]
 8010d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d09c      	beq.n	8010cde <_printf_float+0xae>
 8010da4:	232d      	movs	r3, #45	; 0x2d
 8010da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010daa:	e798      	b.n	8010cde <_printf_float+0xae>
 8010dac:	9a06      	ldr	r2, [sp, #24]
 8010dae:	2a47      	cmp	r2, #71	; 0x47
 8010db0:	d1be      	bne.n	8010d30 <_printf_float+0x100>
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1bc      	bne.n	8010d30 <_printf_float+0x100>
 8010db6:	2301      	movs	r3, #1
 8010db8:	e7b9      	b.n	8010d2e <_printf_float+0xfe>
 8010dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010dbe:	d118      	bne.n	8010df2 <_printf_float+0x1c2>
 8010dc0:	2900      	cmp	r1, #0
 8010dc2:	6863      	ldr	r3, [r4, #4]
 8010dc4:	dd0b      	ble.n	8010dde <_printf_float+0x1ae>
 8010dc6:	6121      	str	r1, [r4, #16]
 8010dc8:	b913      	cbnz	r3, 8010dd0 <_printf_float+0x1a0>
 8010dca:	6822      	ldr	r2, [r4, #0]
 8010dcc:	07d0      	lsls	r0, r2, #31
 8010dce:	d502      	bpl.n	8010dd6 <_printf_float+0x1a6>
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	440b      	add	r3, r1
 8010dd4:	6123      	str	r3, [r4, #16]
 8010dd6:	f04f 0900 	mov.w	r9, #0
 8010dda:	65a1      	str	r1, [r4, #88]	; 0x58
 8010ddc:	e7de      	b.n	8010d9c <_printf_float+0x16c>
 8010dde:	b913      	cbnz	r3, 8010de6 <_printf_float+0x1b6>
 8010de0:	6822      	ldr	r2, [r4, #0]
 8010de2:	07d2      	lsls	r2, r2, #31
 8010de4:	d501      	bpl.n	8010dea <_printf_float+0x1ba>
 8010de6:	3302      	adds	r3, #2
 8010de8:	e7f4      	b.n	8010dd4 <_printf_float+0x1a4>
 8010dea:	2301      	movs	r3, #1
 8010dec:	e7f2      	b.n	8010dd4 <_printf_float+0x1a4>
 8010dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010df4:	4299      	cmp	r1, r3
 8010df6:	db05      	blt.n	8010e04 <_printf_float+0x1d4>
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	6121      	str	r1, [r4, #16]
 8010dfc:	07d8      	lsls	r0, r3, #31
 8010dfe:	d5ea      	bpl.n	8010dd6 <_printf_float+0x1a6>
 8010e00:	1c4b      	adds	r3, r1, #1
 8010e02:	e7e7      	b.n	8010dd4 <_printf_float+0x1a4>
 8010e04:	2900      	cmp	r1, #0
 8010e06:	bfd4      	ite	le
 8010e08:	f1c1 0202 	rsble	r2, r1, #2
 8010e0c:	2201      	movgt	r2, #1
 8010e0e:	4413      	add	r3, r2
 8010e10:	e7e0      	b.n	8010dd4 <_printf_float+0x1a4>
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	055a      	lsls	r2, r3, #21
 8010e16:	d407      	bmi.n	8010e28 <_printf_float+0x1f8>
 8010e18:	6923      	ldr	r3, [r4, #16]
 8010e1a:	4642      	mov	r2, r8
 8010e1c:	4631      	mov	r1, r6
 8010e1e:	4628      	mov	r0, r5
 8010e20:	47b8      	blx	r7
 8010e22:	3001      	adds	r0, #1
 8010e24:	d12c      	bne.n	8010e80 <_printf_float+0x250>
 8010e26:	e764      	b.n	8010cf2 <_printf_float+0xc2>
 8010e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010e2c:	f240 80e0 	bls.w	8010ff0 <_printf_float+0x3c0>
 8010e30:	2200      	movs	r2, #0
 8010e32:	2300      	movs	r3, #0
 8010e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e38:	f7ef fe2a 	bl	8000a90 <__aeabi_dcmpeq>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d034      	beq.n	8010eaa <_printf_float+0x27a>
 8010e40:	2301      	movs	r3, #1
 8010e42:	4a37      	ldr	r2, [pc, #220]	; (8010f20 <_printf_float+0x2f0>)
 8010e44:	4631      	mov	r1, r6
 8010e46:	4628      	mov	r0, r5
 8010e48:	47b8      	blx	r7
 8010e4a:	3001      	adds	r0, #1
 8010e4c:	f43f af51 	beq.w	8010cf2 <_printf_float+0xc2>
 8010e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e54:	429a      	cmp	r2, r3
 8010e56:	db02      	blt.n	8010e5e <_printf_float+0x22e>
 8010e58:	6823      	ldr	r3, [r4, #0]
 8010e5a:	07d8      	lsls	r0, r3, #31
 8010e5c:	d510      	bpl.n	8010e80 <_printf_float+0x250>
 8010e5e:	ee18 3a10 	vmov	r3, s16
 8010e62:	4652      	mov	r2, sl
 8010e64:	4631      	mov	r1, r6
 8010e66:	4628      	mov	r0, r5
 8010e68:	47b8      	blx	r7
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	f43f af41 	beq.w	8010cf2 <_printf_float+0xc2>
 8010e70:	f04f 0800 	mov.w	r8, #0
 8010e74:	f104 091a 	add.w	r9, r4, #26
 8010e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	4543      	cmp	r3, r8
 8010e7e:	dc09      	bgt.n	8010e94 <_printf_float+0x264>
 8010e80:	6823      	ldr	r3, [r4, #0]
 8010e82:	079b      	lsls	r3, r3, #30
 8010e84:	f100 8105 	bmi.w	8011092 <_printf_float+0x462>
 8010e88:	68e0      	ldr	r0, [r4, #12]
 8010e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e8c:	4298      	cmp	r0, r3
 8010e8e:	bfb8      	it	lt
 8010e90:	4618      	movlt	r0, r3
 8010e92:	e730      	b.n	8010cf6 <_printf_float+0xc6>
 8010e94:	2301      	movs	r3, #1
 8010e96:	464a      	mov	r2, r9
 8010e98:	4631      	mov	r1, r6
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	47b8      	blx	r7
 8010e9e:	3001      	adds	r0, #1
 8010ea0:	f43f af27 	beq.w	8010cf2 <_printf_float+0xc2>
 8010ea4:	f108 0801 	add.w	r8, r8, #1
 8010ea8:	e7e6      	b.n	8010e78 <_printf_float+0x248>
 8010eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	dc39      	bgt.n	8010f24 <_printf_float+0x2f4>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	4a1b      	ldr	r2, [pc, #108]	; (8010f20 <_printf_float+0x2f0>)
 8010eb4:	4631      	mov	r1, r6
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	47b8      	blx	r7
 8010eba:	3001      	adds	r0, #1
 8010ebc:	f43f af19 	beq.w	8010cf2 <_printf_float+0xc2>
 8010ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ec4:	4313      	orrs	r3, r2
 8010ec6:	d102      	bne.n	8010ece <_printf_float+0x29e>
 8010ec8:	6823      	ldr	r3, [r4, #0]
 8010eca:	07d9      	lsls	r1, r3, #31
 8010ecc:	d5d8      	bpl.n	8010e80 <_printf_float+0x250>
 8010ece:	ee18 3a10 	vmov	r3, s16
 8010ed2:	4652      	mov	r2, sl
 8010ed4:	4631      	mov	r1, r6
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	47b8      	blx	r7
 8010eda:	3001      	adds	r0, #1
 8010edc:	f43f af09 	beq.w	8010cf2 <_printf_float+0xc2>
 8010ee0:	f04f 0900 	mov.w	r9, #0
 8010ee4:	f104 0a1a 	add.w	sl, r4, #26
 8010ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eea:	425b      	negs	r3, r3
 8010eec:	454b      	cmp	r3, r9
 8010eee:	dc01      	bgt.n	8010ef4 <_printf_float+0x2c4>
 8010ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ef2:	e792      	b.n	8010e1a <_printf_float+0x1ea>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	4652      	mov	r2, sl
 8010ef8:	4631      	mov	r1, r6
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b8      	blx	r7
 8010efe:	3001      	adds	r0, #1
 8010f00:	f43f aef7 	beq.w	8010cf2 <_printf_float+0xc2>
 8010f04:	f109 0901 	add.w	r9, r9, #1
 8010f08:	e7ee      	b.n	8010ee8 <_printf_float+0x2b8>
 8010f0a:	bf00      	nop
 8010f0c:	7fefffff 	.word	0x7fefffff
 8010f10:	08015334 	.word	0x08015334
 8010f14:	08015338 	.word	0x08015338
 8010f18:	08015340 	.word	0x08015340
 8010f1c:	0801533c 	.word	0x0801533c
 8010f20:	08015344 	.word	0x08015344
 8010f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	bfa8      	it	ge
 8010f2c:	461a      	movge	r2, r3
 8010f2e:	2a00      	cmp	r2, #0
 8010f30:	4691      	mov	r9, r2
 8010f32:	dc37      	bgt.n	8010fa4 <_printf_float+0x374>
 8010f34:	f04f 0b00 	mov.w	fp, #0
 8010f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f3c:	f104 021a 	add.w	r2, r4, #26
 8010f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f42:	9305      	str	r3, [sp, #20]
 8010f44:	eba3 0309 	sub.w	r3, r3, r9
 8010f48:	455b      	cmp	r3, fp
 8010f4a:	dc33      	bgt.n	8010fb4 <_printf_float+0x384>
 8010f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f50:	429a      	cmp	r2, r3
 8010f52:	db3b      	blt.n	8010fcc <_printf_float+0x39c>
 8010f54:	6823      	ldr	r3, [r4, #0]
 8010f56:	07da      	lsls	r2, r3, #31
 8010f58:	d438      	bmi.n	8010fcc <_printf_float+0x39c>
 8010f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f5c:	9a05      	ldr	r2, [sp, #20]
 8010f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f60:	1a9a      	subs	r2, r3, r2
 8010f62:	eba3 0901 	sub.w	r9, r3, r1
 8010f66:	4591      	cmp	r9, r2
 8010f68:	bfa8      	it	ge
 8010f6a:	4691      	movge	r9, r2
 8010f6c:	f1b9 0f00 	cmp.w	r9, #0
 8010f70:	dc35      	bgt.n	8010fde <_printf_float+0x3ae>
 8010f72:	f04f 0800 	mov.w	r8, #0
 8010f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f7a:	f104 0a1a 	add.w	sl, r4, #26
 8010f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f82:	1a9b      	subs	r3, r3, r2
 8010f84:	eba3 0309 	sub.w	r3, r3, r9
 8010f88:	4543      	cmp	r3, r8
 8010f8a:	f77f af79 	ble.w	8010e80 <_printf_float+0x250>
 8010f8e:	2301      	movs	r3, #1
 8010f90:	4652      	mov	r2, sl
 8010f92:	4631      	mov	r1, r6
 8010f94:	4628      	mov	r0, r5
 8010f96:	47b8      	blx	r7
 8010f98:	3001      	adds	r0, #1
 8010f9a:	f43f aeaa 	beq.w	8010cf2 <_printf_float+0xc2>
 8010f9e:	f108 0801 	add.w	r8, r8, #1
 8010fa2:	e7ec      	b.n	8010f7e <_printf_float+0x34e>
 8010fa4:	4613      	mov	r3, r2
 8010fa6:	4631      	mov	r1, r6
 8010fa8:	4642      	mov	r2, r8
 8010faa:	4628      	mov	r0, r5
 8010fac:	47b8      	blx	r7
 8010fae:	3001      	adds	r0, #1
 8010fb0:	d1c0      	bne.n	8010f34 <_printf_float+0x304>
 8010fb2:	e69e      	b.n	8010cf2 <_printf_float+0xc2>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	4628      	mov	r0, r5
 8010fba:	9205      	str	r2, [sp, #20]
 8010fbc:	47b8      	blx	r7
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f43f ae97 	beq.w	8010cf2 <_printf_float+0xc2>
 8010fc4:	f10b 0b01 	add.w	fp, fp, #1
 8010fc8:	9a05      	ldr	r2, [sp, #20]
 8010fca:	e7b9      	b.n	8010f40 <_printf_float+0x310>
 8010fcc:	ee18 3a10 	vmov	r3, s16
 8010fd0:	4652      	mov	r2, sl
 8010fd2:	4631      	mov	r1, r6
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	47b8      	blx	r7
 8010fd8:	3001      	adds	r0, #1
 8010fda:	d1be      	bne.n	8010f5a <_printf_float+0x32a>
 8010fdc:	e689      	b.n	8010cf2 <_printf_float+0xc2>
 8010fde:	9a05      	ldr	r2, [sp, #20]
 8010fe0:	464b      	mov	r3, r9
 8010fe2:	4631      	mov	r1, r6
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	4442      	add	r2, r8
 8010fe8:	47b8      	blx	r7
 8010fea:	3001      	adds	r0, #1
 8010fec:	d1c1      	bne.n	8010f72 <_printf_float+0x342>
 8010fee:	e680      	b.n	8010cf2 <_printf_float+0xc2>
 8010ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ff2:	2a01      	cmp	r2, #1
 8010ff4:	dc01      	bgt.n	8010ffa <_printf_float+0x3ca>
 8010ff6:	07db      	lsls	r3, r3, #31
 8010ff8:	d538      	bpl.n	801106c <_printf_float+0x43c>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	4642      	mov	r2, r8
 8010ffe:	4631      	mov	r1, r6
 8011000:	4628      	mov	r0, r5
 8011002:	47b8      	blx	r7
 8011004:	3001      	adds	r0, #1
 8011006:	f43f ae74 	beq.w	8010cf2 <_printf_float+0xc2>
 801100a:	ee18 3a10 	vmov	r3, s16
 801100e:	4652      	mov	r2, sl
 8011010:	4631      	mov	r1, r6
 8011012:	4628      	mov	r0, r5
 8011014:	47b8      	blx	r7
 8011016:	3001      	adds	r0, #1
 8011018:	f43f ae6b 	beq.w	8010cf2 <_printf_float+0xc2>
 801101c:	2200      	movs	r2, #0
 801101e:	2300      	movs	r3, #0
 8011020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011024:	f7ef fd34 	bl	8000a90 <__aeabi_dcmpeq>
 8011028:	b9d8      	cbnz	r0, 8011062 <_printf_float+0x432>
 801102a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801102c:	f108 0201 	add.w	r2, r8, #1
 8011030:	3b01      	subs	r3, #1
 8011032:	4631      	mov	r1, r6
 8011034:	4628      	mov	r0, r5
 8011036:	47b8      	blx	r7
 8011038:	3001      	adds	r0, #1
 801103a:	d10e      	bne.n	801105a <_printf_float+0x42a>
 801103c:	e659      	b.n	8010cf2 <_printf_float+0xc2>
 801103e:	2301      	movs	r3, #1
 8011040:	4652      	mov	r2, sl
 8011042:	4631      	mov	r1, r6
 8011044:	4628      	mov	r0, r5
 8011046:	47b8      	blx	r7
 8011048:	3001      	adds	r0, #1
 801104a:	f43f ae52 	beq.w	8010cf2 <_printf_float+0xc2>
 801104e:	f108 0801 	add.w	r8, r8, #1
 8011052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011054:	3b01      	subs	r3, #1
 8011056:	4543      	cmp	r3, r8
 8011058:	dcf1      	bgt.n	801103e <_printf_float+0x40e>
 801105a:	464b      	mov	r3, r9
 801105c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011060:	e6dc      	b.n	8010e1c <_printf_float+0x1ec>
 8011062:	f04f 0800 	mov.w	r8, #0
 8011066:	f104 0a1a 	add.w	sl, r4, #26
 801106a:	e7f2      	b.n	8011052 <_printf_float+0x422>
 801106c:	2301      	movs	r3, #1
 801106e:	4642      	mov	r2, r8
 8011070:	e7df      	b.n	8011032 <_printf_float+0x402>
 8011072:	2301      	movs	r3, #1
 8011074:	464a      	mov	r2, r9
 8011076:	4631      	mov	r1, r6
 8011078:	4628      	mov	r0, r5
 801107a:	47b8      	blx	r7
 801107c:	3001      	adds	r0, #1
 801107e:	f43f ae38 	beq.w	8010cf2 <_printf_float+0xc2>
 8011082:	f108 0801 	add.w	r8, r8, #1
 8011086:	68e3      	ldr	r3, [r4, #12]
 8011088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801108a:	1a5b      	subs	r3, r3, r1
 801108c:	4543      	cmp	r3, r8
 801108e:	dcf0      	bgt.n	8011072 <_printf_float+0x442>
 8011090:	e6fa      	b.n	8010e88 <_printf_float+0x258>
 8011092:	f04f 0800 	mov.w	r8, #0
 8011096:	f104 0919 	add.w	r9, r4, #25
 801109a:	e7f4      	b.n	8011086 <_printf_float+0x456>

0801109c <_printf_common>:
 801109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a0:	4616      	mov	r6, r2
 80110a2:	4699      	mov	r9, r3
 80110a4:	688a      	ldr	r2, [r1, #8]
 80110a6:	4607      	mov	r7, r0
 80110a8:	690b      	ldr	r3, [r1, #16]
 80110aa:	460c      	mov	r4, r1
 80110ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80110b0:	4293      	cmp	r3, r2
 80110b2:	bfb8      	it	lt
 80110b4:	4613      	movlt	r3, r2
 80110b6:	6033      	str	r3, [r6, #0]
 80110b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80110bc:	b10a      	cbz	r2, 80110c2 <_printf_common+0x26>
 80110be:	3301      	adds	r3, #1
 80110c0:	6033      	str	r3, [r6, #0]
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	0699      	lsls	r1, r3, #26
 80110c6:	bf42      	ittt	mi
 80110c8:	6833      	ldrmi	r3, [r6, #0]
 80110ca:	3302      	addmi	r3, #2
 80110cc:	6033      	strmi	r3, [r6, #0]
 80110ce:	6825      	ldr	r5, [r4, #0]
 80110d0:	f015 0506 	ands.w	r5, r5, #6
 80110d4:	d106      	bne.n	80110e4 <_printf_common+0x48>
 80110d6:	f104 0a19 	add.w	sl, r4, #25
 80110da:	68e3      	ldr	r3, [r4, #12]
 80110dc:	6832      	ldr	r2, [r6, #0]
 80110de:	1a9b      	subs	r3, r3, r2
 80110e0:	42ab      	cmp	r3, r5
 80110e2:	dc29      	bgt.n	8011138 <_printf_common+0x9c>
 80110e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110e8:	1e13      	subs	r3, r2, #0
 80110ea:	6822      	ldr	r2, [r4, #0]
 80110ec:	bf18      	it	ne
 80110ee:	2301      	movne	r3, #1
 80110f0:	0692      	lsls	r2, r2, #26
 80110f2:	d42e      	bmi.n	8011152 <_printf_common+0xb6>
 80110f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110f8:	4649      	mov	r1, r9
 80110fa:	4638      	mov	r0, r7
 80110fc:	47c0      	blx	r8
 80110fe:	3001      	adds	r0, #1
 8011100:	d021      	beq.n	8011146 <_printf_common+0xaa>
 8011102:	6823      	ldr	r3, [r4, #0]
 8011104:	341a      	adds	r4, #26
 8011106:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801110a:	f003 0306 	and.w	r3, r3, #6
 801110e:	6832      	ldr	r2, [r6, #0]
 8011110:	2600      	movs	r6, #0
 8011112:	2b04      	cmp	r3, #4
 8011114:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8011118:	bf08      	it	eq
 801111a:	1aad      	subeq	r5, r5, r2
 801111c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8011120:	bf14      	ite	ne
 8011122:	2500      	movne	r5, #0
 8011124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011128:	4293      	cmp	r3, r2
 801112a:	bfc4      	itt	gt
 801112c:	1a9b      	subgt	r3, r3, r2
 801112e:	18ed      	addgt	r5, r5, r3
 8011130:	42b5      	cmp	r5, r6
 8011132:	d11a      	bne.n	801116a <_printf_common+0xce>
 8011134:	2000      	movs	r0, #0
 8011136:	e008      	b.n	801114a <_printf_common+0xae>
 8011138:	2301      	movs	r3, #1
 801113a:	4652      	mov	r2, sl
 801113c:	4649      	mov	r1, r9
 801113e:	4638      	mov	r0, r7
 8011140:	47c0      	blx	r8
 8011142:	3001      	adds	r0, #1
 8011144:	d103      	bne.n	801114e <_printf_common+0xb2>
 8011146:	f04f 30ff 	mov.w	r0, #4294967295
 801114a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801114e:	3501      	adds	r5, #1
 8011150:	e7c3      	b.n	80110da <_printf_common+0x3e>
 8011152:	18e1      	adds	r1, r4, r3
 8011154:	1c5a      	adds	r2, r3, #1
 8011156:	2030      	movs	r0, #48	; 0x30
 8011158:	3302      	adds	r3, #2
 801115a:	4422      	add	r2, r4
 801115c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011168:	e7c4      	b.n	80110f4 <_printf_common+0x58>
 801116a:	2301      	movs	r3, #1
 801116c:	4622      	mov	r2, r4
 801116e:	4649      	mov	r1, r9
 8011170:	4638      	mov	r0, r7
 8011172:	47c0      	blx	r8
 8011174:	3001      	adds	r0, #1
 8011176:	d0e6      	beq.n	8011146 <_printf_common+0xaa>
 8011178:	3601      	adds	r6, #1
 801117a:	e7d9      	b.n	8011130 <_printf_common+0x94>

0801117c <_printf_i>:
 801117c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011180:	7e0f      	ldrb	r7, [r1, #24]
 8011182:	4691      	mov	r9, r2
 8011184:	4680      	mov	r8, r0
 8011186:	460c      	mov	r4, r1
 8011188:	2f78      	cmp	r7, #120	; 0x78
 801118a:	469a      	mov	sl, r3
 801118c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801118e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011192:	d807      	bhi.n	80111a4 <_printf_i+0x28>
 8011194:	2f62      	cmp	r7, #98	; 0x62
 8011196:	d80a      	bhi.n	80111ae <_printf_i+0x32>
 8011198:	2f00      	cmp	r7, #0
 801119a:	f000 80d8 	beq.w	801134e <_printf_i+0x1d2>
 801119e:	2f58      	cmp	r7, #88	; 0x58
 80111a0:	f000 80a3 	beq.w	80112ea <_printf_i+0x16e>
 80111a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80111ac:	e03a      	b.n	8011224 <_printf_i+0xa8>
 80111ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80111b2:	2b15      	cmp	r3, #21
 80111b4:	d8f6      	bhi.n	80111a4 <_printf_i+0x28>
 80111b6:	a101      	add	r1, pc, #4	; (adr r1, 80111bc <_printf_i+0x40>)
 80111b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111bc:	08011215 	.word	0x08011215
 80111c0:	08011229 	.word	0x08011229
 80111c4:	080111a5 	.word	0x080111a5
 80111c8:	080111a5 	.word	0x080111a5
 80111cc:	080111a5 	.word	0x080111a5
 80111d0:	080111a5 	.word	0x080111a5
 80111d4:	08011229 	.word	0x08011229
 80111d8:	080111a5 	.word	0x080111a5
 80111dc:	080111a5 	.word	0x080111a5
 80111e0:	080111a5 	.word	0x080111a5
 80111e4:	080111a5 	.word	0x080111a5
 80111e8:	08011335 	.word	0x08011335
 80111ec:	08011259 	.word	0x08011259
 80111f0:	08011317 	.word	0x08011317
 80111f4:	080111a5 	.word	0x080111a5
 80111f8:	080111a5 	.word	0x080111a5
 80111fc:	08011357 	.word	0x08011357
 8011200:	080111a5 	.word	0x080111a5
 8011204:	08011259 	.word	0x08011259
 8011208:	080111a5 	.word	0x080111a5
 801120c:	080111a5 	.word	0x080111a5
 8011210:	0801131f 	.word	0x0801131f
 8011214:	682b      	ldr	r3, [r5, #0]
 8011216:	1d1a      	adds	r2, r3, #4
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	602a      	str	r2, [r5, #0]
 801121c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011224:	2301      	movs	r3, #1
 8011226:	e0a3      	b.n	8011370 <_printf_i+0x1f4>
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	6829      	ldr	r1, [r5, #0]
 801122c:	0606      	lsls	r6, r0, #24
 801122e:	f101 0304 	add.w	r3, r1, #4
 8011232:	d50a      	bpl.n	801124a <_printf_i+0xce>
 8011234:	680e      	ldr	r6, [r1, #0]
 8011236:	602b      	str	r3, [r5, #0]
 8011238:	2e00      	cmp	r6, #0
 801123a:	da03      	bge.n	8011244 <_printf_i+0xc8>
 801123c:	232d      	movs	r3, #45	; 0x2d
 801123e:	4276      	negs	r6, r6
 8011240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011244:	485e      	ldr	r0, [pc, #376]	; (80113c0 <_printf_i+0x244>)
 8011246:	230a      	movs	r3, #10
 8011248:	e019      	b.n	801127e <_printf_i+0x102>
 801124a:	680e      	ldr	r6, [r1, #0]
 801124c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011250:	602b      	str	r3, [r5, #0]
 8011252:	bf18      	it	ne
 8011254:	b236      	sxthne	r6, r6
 8011256:	e7ef      	b.n	8011238 <_printf_i+0xbc>
 8011258:	682b      	ldr	r3, [r5, #0]
 801125a:	6820      	ldr	r0, [r4, #0]
 801125c:	1d19      	adds	r1, r3, #4
 801125e:	6029      	str	r1, [r5, #0]
 8011260:	0601      	lsls	r1, r0, #24
 8011262:	d501      	bpl.n	8011268 <_printf_i+0xec>
 8011264:	681e      	ldr	r6, [r3, #0]
 8011266:	e002      	b.n	801126e <_printf_i+0xf2>
 8011268:	0646      	lsls	r6, r0, #25
 801126a:	d5fb      	bpl.n	8011264 <_printf_i+0xe8>
 801126c:	881e      	ldrh	r6, [r3, #0]
 801126e:	2f6f      	cmp	r7, #111	; 0x6f
 8011270:	4853      	ldr	r0, [pc, #332]	; (80113c0 <_printf_i+0x244>)
 8011272:	bf0c      	ite	eq
 8011274:	2308      	moveq	r3, #8
 8011276:	230a      	movne	r3, #10
 8011278:	2100      	movs	r1, #0
 801127a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801127e:	6865      	ldr	r5, [r4, #4]
 8011280:	2d00      	cmp	r5, #0
 8011282:	60a5      	str	r5, [r4, #8]
 8011284:	bfa2      	ittt	ge
 8011286:	6821      	ldrge	r1, [r4, #0]
 8011288:	f021 0104 	bicge.w	r1, r1, #4
 801128c:	6021      	strge	r1, [r4, #0]
 801128e:	b90e      	cbnz	r6, 8011294 <_printf_i+0x118>
 8011290:	2d00      	cmp	r5, #0
 8011292:	d04d      	beq.n	8011330 <_printf_i+0x1b4>
 8011294:	4615      	mov	r5, r2
 8011296:	fbb6 f1f3 	udiv	r1, r6, r3
 801129a:	fb03 6711 	mls	r7, r3, r1, r6
 801129e:	5dc7      	ldrb	r7, [r0, r7]
 80112a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80112a4:	4637      	mov	r7, r6
 80112a6:	460e      	mov	r6, r1
 80112a8:	42bb      	cmp	r3, r7
 80112aa:	d9f4      	bls.n	8011296 <_printf_i+0x11a>
 80112ac:	2b08      	cmp	r3, #8
 80112ae:	d10b      	bne.n	80112c8 <_printf_i+0x14c>
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	07de      	lsls	r6, r3, #31
 80112b4:	d508      	bpl.n	80112c8 <_printf_i+0x14c>
 80112b6:	6923      	ldr	r3, [r4, #16]
 80112b8:	6861      	ldr	r1, [r4, #4]
 80112ba:	4299      	cmp	r1, r3
 80112bc:	bfde      	ittt	le
 80112be:	2330      	movle	r3, #48	; 0x30
 80112c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80112c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80112c8:	1b52      	subs	r2, r2, r5
 80112ca:	6122      	str	r2, [r4, #16]
 80112cc:	464b      	mov	r3, r9
 80112ce:	aa03      	add	r2, sp, #12
 80112d0:	4621      	mov	r1, r4
 80112d2:	4640      	mov	r0, r8
 80112d4:	f8cd a000 	str.w	sl, [sp]
 80112d8:	f7ff fee0 	bl	801109c <_printf_common>
 80112dc:	3001      	adds	r0, #1
 80112de:	d14c      	bne.n	801137a <_printf_i+0x1fe>
 80112e0:	f04f 30ff 	mov.w	r0, #4294967295
 80112e4:	b004      	add	sp, #16
 80112e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ea:	4835      	ldr	r0, [pc, #212]	; (80113c0 <_printf_i+0x244>)
 80112ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80112f0:	6829      	ldr	r1, [r5, #0]
 80112f2:	6823      	ldr	r3, [r4, #0]
 80112f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80112f8:	6029      	str	r1, [r5, #0]
 80112fa:	061d      	lsls	r5, r3, #24
 80112fc:	d514      	bpl.n	8011328 <_printf_i+0x1ac>
 80112fe:	07df      	lsls	r7, r3, #31
 8011300:	bf44      	itt	mi
 8011302:	f043 0320 	orrmi.w	r3, r3, #32
 8011306:	6023      	strmi	r3, [r4, #0]
 8011308:	b91e      	cbnz	r6, 8011312 <_printf_i+0x196>
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	f023 0320 	bic.w	r3, r3, #32
 8011310:	6023      	str	r3, [r4, #0]
 8011312:	2310      	movs	r3, #16
 8011314:	e7b0      	b.n	8011278 <_printf_i+0xfc>
 8011316:	6823      	ldr	r3, [r4, #0]
 8011318:	f043 0320 	orr.w	r3, r3, #32
 801131c:	6023      	str	r3, [r4, #0]
 801131e:	2378      	movs	r3, #120	; 0x78
 8011320:	4828      	ldr	r0, [pc, #160]	; (80113c4 <_printf_i+0x248>)
 8011322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011326:	e7e3      	b.n	80112f0 <_printf_i+0x174>
 8011328:	0659      	lsls	r1, r3, #25
 801132a:	bf48      	it	mi
 801132c:	b2b6      	uxthmi	r6, r6
 801132e:	e7e6      	b.n	80112fe <_printf_i+0x182>
 8011330:	4615      	mov	r5, r2
 8011332:	e7bb      	b.n	80112ac <_printf_i+0x130>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	6826      	ldr	r6, [r4, #0]
 8011338:	1d18      	adds	r0, r3, #4
 801133a:	6961      	ldr	r1, [r4, #20]
 801133c:	6028      	str	r0, [r5, #0]
 801133e:	0635      	lsls	r5, r6, #24
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	d501      	bpl.n	8011348 <_printf_i+0x1cc>
 8011344:	6019      	str	r1, [r3, #0]
 8011346:	e002      	b.n	801134e <_printf_i+0x1d2>
 8011348:	0670      	lsls	r0, r6, #25
 801134a:	d5fb      	bpl.n	8011344 <_printf_i+0x1c8>
 801134c:	8019      	strh	r1, [r3, #0]
 801134e:	2300      	movs	r3, #0
 8011350:	4615      	mov	r5, r2
 8011352:	6123      	str	r3, [r4, #16]
 8011354:	e7ba      	b.n	80112cc <_printf_i+0x150>
 8011356:	682b      	ldr	r3, [r5, #0]
 8011358:	2100      	movs	r1, #0
 801135a:	1d1a      	adds	r2, r3, #4
 801135c:	602a      	str	r2, [r5, #0]
 801135e:	681d      	ldr	r5, [r3, #0]
 8011360:	6862      	ldr	r2, [r4, #4]
 8011362:	4628      	mov	r0, r5
 8011364:	f002 fb68 	bl	8013a38 <memchr>
 8011368:	b108      	cbz	r0, 801136e <_printf_i+0x1f2>
 801136a:	1b40      	subs	r0, r0, r5
 801136c:	6060      	str	r0, [r4, #4]
 801136e:	6863      	ldr	r3, [r4, #4]
 8011370:	6123      	str	r3, [r4, #16]
 8011372:	2300      	movs	r3, #0
 8011374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011378:	e7a8      	b.n	80112cc <_printf_i+0x150>
 801137a:	6923      	ldr	r3, [r4, #16]
 801137c:	462a      	mov	r2, r5
 801137e:	4649      	mov	r1, r9
 8011380:	4640      	mov	r0, r8
 8011382:	47d0      	blx	sl
 8011384:	3001      	adds	r0, #1
 8011386:	d0ab      	beq.n	80112e0 <_printf_i+0x164>
 8011388:	6823      	ldr	r3, [r4, #0]
 801138a:	079b      	lsls	r3, r3, #30
 801138c:	d413      	bmi.n	80113b6 <_printf_i+0x23a>
 801138e:	68e0      	ldr	r0, [r4, #12]
 8011390:	9b03      	ldr	r3, [sp, #12]
 8011392:	4298      	cmp	r0, r3
 8011394:	bfb8      	it	lt
 8011396:	4618      	movlt	r0, r3
 8011398:	e7a4      	b.n	80112e4 <_printf_i+0x168>
 801139a:	2301      	movs	r3, #1
 801139c:	4632      	mov	r2, r6
 801139e:	4649      	mov	r1, r9
 80113a0:	4640      	mov	r0, r8
 80113a2:	47d0      	blx	sl
 80113a4:	3001      	adds	r0, #1
 80113a6:	d09b      	beq.n	80112e0 <_printf_i+0x164>
 80113a8:	3501      	adds	r5, #1
 80113aa:	68e3      	ldr	r3, [r4, #12]
 80113ac:	9903      	ldr	r1, [sp, #12]
 80113ae:	1a5b      	subs	r3, r3, r1
 80113b0:	42ab      	cmp	r3, r5
 80113b2:	dcf2      	bgt.n	801139a <_printf_i+0x21e>
 80113b4:	e7eb      	b.n	801138e <_printf_i+0x212>
 80113b6:	2500      	movs	r5, #0
 80113b8:	f104 0619 	add.w	r6, r4, #25
 80113bc:	e7f5      	b.n	80113aa <_printf_i+0x22e>
 80113be:	bf00      	nop
 80113c0:	08015346 	.word	0x08015346
 80113c4:	08015357 	.word	0x08015357

080113c8 <_scanf_float>:
 80113c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113cc:	b087      	sub	sp, #28
 80113ce:	4617      	mov	r7, r2
 80113d0:	468b      	mov	fp, r1
 80113d2:	4680      	mov	r8, r0
 80113d4:	9303      	str	r3, [sp, #12]
 80113d6:	460c      	mov	r4, r1
 80113d8:	688b      	ldr	r3, [r1, #8]
 80113da:	1e5a      	subs	r2, r3, #1
 80113dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80113e0:	bf8b      	itete	hi
 80113e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80113e6:	2300      	movls	r3, #0
 80113e8:	195b      	addhi	r3, r3, r5
 80113ea:	9302      	strls	r3, [sp, #8]
 80113ec:	f04f 0500 	mov.w	r5, #0
 80113f0:	bf84      	itt	hi
 80113f2:	9302      	strhi	r3, [sp, #8]
 80113f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80113f8:	46aa      	mov	sl, r5
 80113fa:	46a9      	mov	r9, r5
 80113fc:	bf88      	it	hi
 80113fe:	608b      	strhi	r3, [r1, #8]
 8011400:	680b      	ldr	r3, [r1, #0]
 8011402:	9501      	str	r5, [sp, #4]
 8011404:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011408:	f84b 3b1c 	str.w	r3, [fp], #28
 801140c:	465e      	mov	r6, fp
 801140e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011412:	68a2      	ldr	r2, [r4, #8]
 8011414:	b152      	cbz	r2, 801142c <_scanf_float+0x64>
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	2b4e      	cmp	r3, #78	; 0x4e
 801141c:	d864      	bhi.n	80114e8 <_scanf_float+0x120>
 801141e:	2b40      	cmp	r3, #64	; 0x40
 8011420:	d83c      	bhi.n	801149c <_scanf_float+0xd4>
 8011422:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011426:	b2c8      	uxtb	r0, r1
 8011428:	280e      	cmp	r0, #14
 801142a:	d93a      	bls.n	80114a2 <_scanf_float+0xda>
 801142c:	f1b9 0f00 	cmp.w	r9, #0
 8011430:	d003      	beq.n	801143a <_scanf_float+0x72>
 8011432:	6823      	ldr	r3, [r4, #0]
 8011434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011438:	6023      	str	r3, [r4, #0]
 801143a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801143e:	f1ba 0f01 	cmp.w	sl, #1
 8011442:	f200 8113 	bhi.w	801166c <_scanf_float+0x2a4>
 8011446:	455e      	cmp	r6, fp
 8011448:	f200 8105 	bhi.w	8011656 <_scanf_float+0x28e>
 801144c:	2501      	movs	r5, #1
 801144e:	4628      	mov	r0, r5
 8011450:	b007      	add	sp, #28
 8011452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011456:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801145a:	2a0d      	cmp	r2, #13
 801145c:	d8e6      	bhi.n	801142c <_scanf_float+0x64>
 801145e:	a101      	add	r1, pc, #4	; (adr r1, 8011464 <_scanf_float+0x9c>)
 8011460:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011464:	080115a3 	.word	0x080115a3
 8011468:	0801142d 	.word	0x0801142d
 801146c:	0801142d 	.word	0x0801142d
 8011470:	0801142d 	.word	0x0801142d
 8011474:	08011603 	.word	0x08011603
 8011478:	080115db 	.word	0x080115db
 801147c:	0801142d 	.word	0x0801142d
 8011480:	0801142d 	.word	0x0801142d
 8011484:	080115b1 	.word	0x080115b1
 8011488:	0801142d 	.word	0x0801142d
 801148c:	0801142d 	.word	0x0801142d
 8011490:	0801142d 	.word	0x0801142d
 8011494:	0801142d 	.word	0x0801142d
 8011498:	08011569 	.word	0x08011569
 801149c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80114a0:	e7db      	b.n	801145a <_scanf_float+0x92>
 80114a2:	290e      	cmp	r1, #14
 80114a4:	d8c2      	bhi.n	801142c <_scanf_float+0x64>
 80114a6:	a001      	add	r0, pc, #4	; (adr r0, 80114ac <_scanf_float+0xe4>)
 80114a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80114ac:	0801155b 	.word	0x0801155b
 80114b0:	0801142d 	.word	0x0801142d
 80114b4:	0801155b 	.word	0x0801155b
 80114b8:	080115ef 	.word	0x080115ef
 80114bc:	0801142d 	.word	0x0801142d
 80114c0:	08011509 	.word	0x08011509
 80114c4:	08011545 	.word	0x08011545
 80114c8:	08011545 	.word	0x08011545
 80114cc:	08011545 	.word	0x08011545
 80114d0:	08011545 	.word	0x08011545
 80114d4:	08011545 	.word	0x08011545
 80114d8:	08011545 	.word	0x08011545
 80114dc:	08011545 	.word	0x08011545
 80114e0:	08011545 	.word	0x08011545
 80114e4:	08011545 	.word	0x08011545
 80114e8:	2b6e      	cmp	r3, #110	; 0x6e
 80114ea:	d809      	bhi.n	8011500 <_scanf_float+0x138>
 80114ec:	2b60      	cmp	r3, #96	; 0x60
 80114ee:	d8b2      	bhi.n	8011456 <_scanf_float+0x8e>
 80114f0:	2b54      	cmp	r3, #84	; 0x54
 80114f2:	d077      	beq.n	80115e4 <_scanf_float+0x21c>
 80114f4:	2b59      	cmp	r3, #89	; 0x59
 80114f6:	d199      	bne.n	801142c <_scanf_float+0x64>
 80114f8:	2d07      	cmp	r5, #7
 80114fa:	d197      	bne.n	801142c <_scanf_float+0x64>
 80114fc:	2508      	movs	r5, #8
 80114fe:	e029      	b.n	8011554 <_scanf_float+0x18c>
 8011500:	2b74      	cmp	r3, #116	; 0x74
 8011502:	d06f      	beq.n	80115e4 <_scanf_float+0x21c>
 8011504:	2b79      	cmp	r3, #121	; 0x79
 8011506:	e7f6      	b.n	80114f6 <_scanf_float+0x12e>
 8011508:	6821      	ldr	r1, [r4, #0]
 801150a:	05c8      	lsls	r0, r1, #23
 801150c:	d51a      	bpl.n	8011544 <_scanf_float+0x17c>
 801150e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011512:	9b02      	ldr	r3, [sp, #8]
 8011514:	f109 0901 	add.w	r9, r9, #1
 8011518:	6021      	str	r1, [r4, #0]
 801151a:	b11b      	cbz	r3, 8011524 <_scanf_float+0x15c>
 801151c:	3b01      	subs	r3, #1
 801151e:	3201      	adds	r2, #1
 8011520:	9302      	str	r3, [sp, #8]
 8011522:	60a2      	str	r2, [r4, #8]
 8011524:	68a3      	ldr	r3, [r4, #8]
 8011526:	3b01      	subs	r3, #1
 8011528:	60a3      	str	r3, [r4, #8]
 801152a:	6923      	ldr	r3, [r4, #16]
 801152c:	3301      	adds	r3, #1
 801152e:	6123      	str	r3, [r4, #16]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	3b01      	subs	r3, #1
 8011534:	2b00      	cmp	r3, #0
 8011536:	607b      	str	r3, [r7, #4]
 8011538:	f340 8084 	ble.w	8011644 <_scanf_float+0x27c>
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	3301      	adds	r3, #1
 8011540:	603b      	str	r3, [r7, #0]
 8011542:	e766      	b.n	8011412 <_scanf_float+0x4a>
 8011544:	eb1a 0f05 	cmn.w	sl, r5
 8011548:	f47f af70 	bne.w	801142c <_scanf_float+0x64>
 801154c:	6822      	ldr	r2, [r4, #0]
 801154e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011552:	6022      	str	r2, [r4, #0]
 8011554:	f806 3b01 	strb.w	r3, [r6], #1
 8011558:	e7e4      	b.n	8011524 <_scanf_float+0x15c>
 801155a:	6822      	ldr	r2, [r4, #0]
 801155c:	0610      	lsls	r0, r2, #24
 801155e:	f57f af65 	bpl.w	801142c <_scanf_float+0x64>
 8011562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011566:	e7f4      	b.n	8011552 <_scanf_float+0x18a>
 8011568:	f1ba 0f00 	cmp.w	sl, #0
 801156c:	d10e      	bne.n	801158c <_scanf_float+0x1c4>
 801156e:	f1b9 0f00 	cmp.w	r9, #0
 8011572:	d10e      	bne.n	8011592 <_scanf_float+0x1ca>
 8011574:	6822      	ldr	r2, [r4, #0]
 8011576:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801157a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801157e:	d108      	bne.n	8011592 <_scanf_float+0x1ca>
 8011580:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011584:	f04f 0a01 	mov.w	sl, #1
 8011588:	6022      	str	r2, [r4, #0]
 801158a:	e7e3      	b.n	8011554 <_scanf_float+0x18c>
 801158c:	f1ba 0f02 	cmp.w	sl, #2
 8011590:	d055      	beq.n	801163e <_scanf_float+0x276>
 8011592:	2d01      	cmp	r5, #1
 8011594:	d002      	beq.n	801159c <_scanf_float+0x1d4>
 8011596:	2d04      	cmp	r5, #4
 8011598:	f47f af48 	bne.w	801142c <_scanf_float+0x64>
 801159c:	3501      	adds	r5, #1
 801159e:	b2ed      	uxtb	r5, r5
 80115a0:	e7d8      	b.n	8011554 <_scanf_float+0x18c>
 80115a2:	f1ba 0f01 	cmp.w	sl, #1
 80115a6:	f47f af41 	bne.w	801142c <_scanf_float+0x64>
 80115aa:	f04f 0a02 	mov.w	sl, #2
 80115ae:	e7d1      	b.n	8011554 <_scanf_float+0x18c>
 80115b0:	b97d      	cbnz	r5, 80115d2 <_scanf_float+0x20a>
 80115b2:	f1b9 0f00 	cmp.w	r9, #0
 80115b6:	f47f af3c 	bne.w	8011432 <_scanf_float+0x6a>
 80115ba:	6822      	ldr	r2, [r4, #0]
 80115bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80115c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80115c4:	f47f af39 	bne.w	801143a <_scanf_float+0x72>
 80115c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80115cc:	2501      	movs	r5, #1
 80115ce:	6022      	str	r2, [r4, #0]
 80115d0:	e7c0      	b.n	8011554 <_scanf_float+0x18c>
 80115d2:	2d03      	cmp	r5, #3
 80115d4:	d0e2      	beq.n	801159c <_scanf_float+0x1d4>
 80115d6:	2d05      	cmp	r5, #5
 80115d8:	e7de      	b.n	8011598 <_scanf_float+0x1d0>
 80115da:	2d02      	cmp	r5, #2
 80115dc:	f47f af26 	bne.w	801142c <_scanf_float+0x64>
 80115e0:	2503      	movs	r5, #3
 80115e2:	e7b7      	b.n	8011554 <_scanf_float+0x18c>
 80115e4:	2d06      	cmp	r5, #6
 80115e6:	f47f af21 	bne.w	801142c <_scanf_float+0x64>
 80115ea:	2507      	movs	r5, #7
 80115ec:	e7b2      	b.n	8011554 <_scanf_float+0x18c>
 80115ee:	6822      	ldr	r2, [r4, #0]
 80115f0:	0591      	lsls	r1, r2, #22
 80115f2:	f57f af1b 	bpl.w	801142c <_scanf_float+0x64>
 80115f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80115fa:	f8cd 9004 	str.w	r9, [sp, #4]
 80115fe:	6022      	str	r2, [r4, #0]
 8011600:	e7a8      	b.n	8011554 <_scanf_float+0x18c>
 8011602:	6822      	ldr	r2, [r4, #0]
 8011604:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011608:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801160c:	d006      	beq.n	801161c <_scanf_float+0x254>
 801160e:	0550      	lsls	r0, r2, #21
 8011610:	f57f af0c 	bpl.w	801142c <_scanf_float+0x64>
 8011614:	f1b9 0f00 	cmp.w	r9, #0
 8011618:	f43f af0f 	beq.w	801143a <_scanf_float+0x72>
 801161c:	0591      	lsls	r1, r2, #22
 801161e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011622:	bf58      	it	pl
 8011624:	9901      	ldrpl	r1, [sp, #4]
 8011626:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801162a:	bf58      	it	pl
 801162c:	eba9 0101 	subpl.w	r1, r9, r1
 8011630:	6022      	str	r2, [r4, #0]
 8011632:	f04f 0900 	mov.w	r9, #0
 8011636:	bf58      	it	pl
 8011638:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801163c:	e78a      	b.n	8011554 <_scanf_float+0x18c>
 801163e:	f04f 0a03 	mov.w	sl, #3
 8011642:	e787      	b.n	8011554 <_scanf_float+0x18c>
 8011644:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011648:	4639      	mov	r1, r7
 801164a:	4640      	mov	r0, r8
 801164c:	4798      	blx	r3
 801164e:	2800      	cmp	r0, #0
 8011650:	f43f aedf 	beq.w	8011412 <_scanf_float+0x4a>
 8011654:	e6ea      	b.n	801142c <_scanf_float+0x64>
 8011656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801165a:	463a      	mov	r2, r7
 801165c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011660:	4640      	mov	r0, r8
 8011662:	4798      	blx	r3
 8011664:	6923      	ldr	r3, [r4, #16]
 8011666:	3b01      	subs	r3, #1
 8011668:	6123      	str	r3, [r4, #16]
 801166a:	e6ec      	b.n	8011446 <_scanf_float+0x7e>
 801166c:	1e6b      	subs	r3, r5, #1
 801166e:	2b06      	cmp	r3, #6
 8011670:	d825      	bhi.n	80116be <_scanf_float+0x2f6>
 8011672:	2d02      	cmp	r5, #2
 8011674:	d836      	bhi.n	80116e4 <_scanf_float+0x31c>
 8011676:	455e      	cmp	r6, fp
 8011678:	f67f aee8 	bls.w	801144c <_scanf_float+0x84>
 801167c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011680:	463a      	mov	r2, r7
 8011682:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011686:	4640      	mov	r0, r8
 8011688:	4798      	blx	r3
 801168a:	6923      	ldr	r3, [r4, #16]
 801168c:	3b01      	subs	r3, #1
 801168e:	6123      	str	r3, [r4, #16]
 8011690:	e7f1      	b.n	8011676 <_scanf_float+0x2ae>
 8011692:	9802      	ldr	r0, [sp, #8]
 8011694:	463a      	mov	r2, r7
 8011696:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801169a:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801169e:	9002      	str	r0, [sp, #8]
 80116a0:	4640      	mov	r0, r8
 80116a2:	4798      	blx	r3
 80116a4:	6923      	ldr	r3, [r4, #16]
 80116a6:	3b01      	subs	r3, #1
 80116a8:	6123      	str	r3, [r4, #16]
 80116aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80116ae:	fa5f fa8a 	uxtb.w	sl, sl
 80116b2:	f1ba 0f02 	cmp.w	sl, #2
 80116b6:	d1ec      	bne.n	8011692 <_scanf_float+0x2ca>
 80116b8:	3d03      	subs	r5, #3
 80116ba:	b2ed      	uxtb	r5, r5
 80116bc:	1b76      	subs	r6, r6, r5
 80116be:	6823      	ldr	r3, [r4, #0]
 80116c0:	05da      	lsls	r2, r3, #23
 80116c2:	d52e      	bpl.n	8011722 <_scanf_float+0x35a>
 80116c4:	055b      	lsls	r3, r3, #21
 80116c6:	d510      	bpl.n	80116ea <_scanf_float+0x322>
 80116c8:	455e      	cmp	r6, fp
 80116ca:	f67f aebf 	bls.w	801144c <_scanf_float+0x84>
 80116ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116d2:	463a      	mov	r2, r7
 80116d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80116d8:	4640      	mov	r0, r8
 80116da:	4798      	blx	r3
 80116dc:	6923      	ldr	r3, [r4, #16]
 80116de:	3b01      	subs	r3, #1
 80116e0:	6123      	str	r3, [r4, #16]
 80116e2:	e7f1      	b.n	80116c8 <_scanf_float+0x300>
 80116e4:	46aa      	mov	sl, r5
 80116e6:	9602      	str	r6, [sp, #8]
 80116e8:	e7df      	b.n	80116aa <_scanf_float+0x2e2>
 80116ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80116ee:	1e75      	subs	r5, r6, #1
 80116f0:	6923      	ldr	r3, [r4, #16]
 80116f2:	2965      	cmp	r1, #101	; 0x65
 80116f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80116f8:	6123      	str	r3, [r4, #16]
 80116fa:	d00c      	beq.n	8011716 <_scanf_float+0x34e>
 80116fc:	2945      	cmp	r1, #69	; 0x45
 80116fe:	d00a      	beq.n	8011716 <_scanf_float+0x34e>
 8011700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011704:	463a      	mov	r2, r7
 8011706:	4640      	mov	r0, r8
 8011708:	1eb5      	subs	r5, r6, #2
 801170a:	4798      	blx	r3
 801170c:	6923      	ldr	r3, [r4, #16]
 801170e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011712:	3b01      	subs	r3, #1
 8011714:	6123      	str	r3, [r4, #16]
 8011716:	462e      	mov	r6, r5
 8011718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801171c:	463a      	mov	r2, r7
 801171e:	4640      	mov	r0, r8
 8011720:	4798      	blx	r3
 8011722:	6825      	ldr	r5, [r4, #0]
 8011724:	f015 0510 	ands.w	r5, r5, #16
 8011728:	d159      	bne.n	80117de <_scanf_float+0x416>
 801172a:	7035      	strb	r5, [r6, #0]
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011736:	d11b      	bne.n	8011770 <_scanf_float+0x3a8>
 8011738:	9b01      	ldr	r3, [sp, #4]
 801173a:	454b      	cmp	r3, r9
 801173c:	eba3 0209 	sub.w	r2, r3, r9
 8011740:	d123      	bne.n	801178a <_scanf_float+0x3c2>
 8011742:	2200      	movs	r2, #0
 8011744:	4659      	mov	r1, fp
 8011746:	4640      	mov	r0, r8
 8011748:	f000 fee8 	bl	801251c <_strtod_r>
 801174c:	6822      	ldr	r2, [r4, #0]
 801174e:	9b03      	ldr	r3, [sp, #12]
 8011750:	f012 0f02 	tst.w	r2, #2
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	ec57 6b10 	vmov	r6, r7, d0
 801175a:	d021      	beq.n	80117a0 <_scanf_float+0x3d8>
 801175c:	1d1a      	adds	r2, r3, #4
 801175e:	9903      	ldr	r1, [sp, #12]
 8011760:	600a      	str	r2, [r1, #0]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	e9c3 6700 	strd	r6, r7, [r3]
 8011768:	68e3      	ldr	r3, [r4, #12]
 801176a:	3301      	adds	r3, #1
 801176c:	60e3      	str	r3, [r4, #12]
 801176e:	e66e      	b.n	801144e <_scanf_float+0x86>
 8011770:	9b04      	ldr	r3, [sp, #16]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d0e5      	beq.n	8011742 <_scanf_float+0x37a>
 8011776:	9905      	ldr	r1, [sp, #20]
 8011778:	230a      	movs	r3, #10
 801177a:	462a      	mov	r2, r5
 801177c:	4640      	mov	r0, r8
 801177e:	3101      	adds	r1, #1
 8011780:	f000 ff54 	bl	801262c <_strtol_r>
 8011784:	9b04      	ldr	r3, [sp, #16]
 8011786:	9e05      	ldr	r6, [sp, #20]
 8011788:	1ac2      	subs	r2, r0, r3
 801178a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801178e:	4915      	ldr	r1, [pc, #84]	; (80117e4 <_scanf_float+0x41c>)
 8011790:	429e      	cmp	r6, r3
 8011792:	bf28      	it	cs
 8011794:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011798:	4630      	mov	r0, r6
 801179a:	f000 f881 	bl	80118a0 <siprintf>
 801179e:	e7d0      	b.n	8011742 <_scanf_float+0x37a>
 80117a0:	9903      	ldr	r1, [sp, #12]
 80117a2:	f012 0f04 	tst.w	r2, #4
 80117a6:	f103 0204 	add.w	r2, r3, #4
 80117aa:	600a      	str	r2, [r1, #0]
 80117ac:	d1d9      	bne.n	8011762 <_scanf_float+0x39a>
 80117ae:	f8d3 8000 	ldr.w	r8, [r3]
 80117b2:	ee10 2a10 	vmov	r2, s0
 80117b6:	463b      	mov	r3, r7
 80117b8:	ee10 0a10 	vmov	r0, s0
 80117bc:	4639      	mov	r1, r7
 80117be:	f7ef f999 	bl	8000af4 <__aeabi_dcmpun>
 80117c2:	b128      	cbz	r0, 80117d0 <_scanf_float+0x408>
 80117c4:	4808      	ldr	r0, [pc, #32]	; (80117e8 <_scanf_float+0x420>)
 80117c6:	f000 f821 	bl	801180c <nanf>
 80117ca:	ed88 0a00 	vstr	s0, [r8]
 80117ce:	e7cb      	b.n	8011768 <_scanf_float+0x3a0>
 80117d0:	4630      	mov	r0, r6
 80117d2:	4639      	mov	r1, r7
 80117d4:	f7ef f9ec 	bl	8000bb0 <__aeabi_d2f>
 80117d8:	f8c8 0000 	str.w	r0, [r8]
 80117dc:	e7c4      	b.n	8011768 <_scanf_float+0x3a0>
 80117de:	2500      	movs	r5, #0
 80117e0:	e635      	b.n	801144e <_scanf_float+0x86>
 80117e2:	bf00      	nop
 80117e4:	08015368 	.word	0x08015368
 80117e8:	08015770 	.word	0x08015770

080117ec <_sbrk_r>:
 80117ec:	b538      	push	{r3, r4, r5, lr}
 80117ee:	2300      	movs	r3, #0
 80117f0:	4d05      	ldr	r5, [pc, #20]	; (8011808 <_sbrk_r+0x1c>)
 80117f2:	4604      	mov	r4, r0
 80117f4:	4608      	mov	r0, r1
 80117f6:	602b      	str	r3, [r5, #0]
 80117f8:	f7f1 fbd4 	bl	8002fa4 <_sbrk>
 80117fc:	1c43      	adds	r3, r0, #1
 80117fe:	d102      	bne.n	8011806 <_sbrk_r+0x1a>
 8011800:	682b      	ldr	r3, [r5, #0]
 8011802:	b103      	cbz	r3, 8011806 <_sbrk_r+0x1a>
 8011804:	6023      	str	r3, [r4, #0]
 8011806:	bd38      	pop	{r3, r4, r5, pc}
 8011808:	20002178 	.word	0x20002178

0801180c <nanf>:
 801180c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011814 <nanf+0x8>
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop
 8011814:	7fc00000 	.word	0x7fc00000

08011818 <_raise_r>:
 8011818:	291f      	cmp	r1, #31
 801181a:	b538      	push	{r3, r4, r5, lr}
 801181c:	4604      	mov	r4, r0
 801181e:	460d      	mov	r5, r1
 8011820:	d904      	bls.n	801182c <_raise_r+0x14>
 8011822:	2316      	movs	r3, #22
 8011824:	6003      	str	r3, [r0, #0]
 8011826:	f04f 30ff 	mov.w	r0, #4294967295
 801182a:	bd38      	pop	{r3, r4, r5, pc}
 801182c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801182e:	b112      	cbz	r2, 8011836 <_raise_r+0x1e>
 8011830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011834:	b94b      	cbnz	r3, 801184a <_raise_r+0x32>
 8011836:	4620      	mov	r0, r4
 8011838:	f000 f830 	bl	801189c <_getpid_r>
 801183c:	462a      	mov	r2, r5
 801183e:	4601      	mov	r1, r0
 8011840:	4620      	mov	r0, r4
 8011842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011846:	f000 b817 	b.w	8011878 <_kill_r>
 801184a:	2b01      	cmp	r3, #1
 801184c:	d00a      	beq.n	8011864 <_raise_r+0x4c>
 801184e:	1c59      	adds	r1, r3, #1
 8011850:	d103      	bne.n	801185a <_raise_r+0x42>
 8011852:	2316      	movs	r3, #22
 8011854:	6003      	str	r3, [r0, #0]
 8011856:	2001      	movs	r0, #1
 8011858:	e7e7      	b.n	801182a <_raise_r+0x12>
 801185a:	2400      	movs	r4, #0
 801185c:	4628      	mov	r0, r5
 801185e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011862:	4798      	blx	r3
 8011864:	2000      	movs	r0, #0
 8011866:	e7e0      	b.n	801182a <_raise_r+0x12>

08011868 <raise>:
 8011868:	4b02      	ldr	r3, [pc, #8]	; (8011874 <raise+0xc>)
 801186a:	4601      	mov	r1, r0
 801186c:	6818      	ldr	r0, [r3, #0]
 801186e:	f7ff bfd3 	b.w	8011818 <_raise_r>
 8011872:	bf00      	nop
 8011874:	20000100 	.word	0x20000100

08011878 <_kill_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	2300      	movs	r3, #0
 801187c:	4d06      	ldr	r5, [pc, #24]	; (8011898 <_kill_r+0x20>)
 801187e:	4604      	mov	r4, r0
 8011880:	4608      	mov	r0, r1
 8011882:	4611      	mov	r1, r2
 8011884:	602b      	str	r3, [r5, #0]
 8011886:	f7f1 fb05 	bl	8002e94 <_kill>
 801188a:	1c43      	adds	r3, r0, #1
 801188c:	d102      	bne.n	8011894 <_kill_r+0x1c>
 801188e:	682b      	ldr	r3, [r5, #0]
 8011890:	b103      	cbz	r3, 8011894 <_kill_r+0x1c>
 8011892:	6023      	str	r3, [r4, #0]
 8011894:	bd38      	pop	{r3, r4, r5, pc}
 8011896:	bf00      	nop
 8011898:	20002178 	.word	0x20002178

0801189c <_getpid_r>:
 801189c:	f7f1 baf2 	b.w	8002e84 <_getpid>

080118a0 <siprintf>:
 80118a0:	b40e      	push	{r1, r2, r3}
 80118a2:	b500      	push	{lr}
 80118a4:	b09c      	sub	sp, #112	; 0x70
 80118a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80118aa:	ab1d      	add	r3, sp, #116	; 0x74
 80118ac:	9002      	str	r0, [sp, #8]
 80118ae:	9006      	str	r0, [sp, #24]
 80118b0:	9107      	str	r1, [sp, #28]
 80118b2:	9104      	str	r1, [sp, #16]
 80118b4:	4808      	ldr	r0, [pc, #32]	; (80118d8 <siprintf+0x38>)
 80118b6:	4909      	ldr	r1, [pc, #36]	; (80118dc <siprintf+0x3c>)
 80118b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80118bc:	9105      	str	r1, [sp, #20]
 80118be:	a902      	add	r1, sp, #8
 80118c0:	6800      	ldr	r0, [r0, #0]
 80118c2:	9301      	str	r3, [sp, #4]
 80118c4:	f002 fe16 	bl	80144f4 <_svfiprintf_r>
 80118c8:	9b02      	ldr	r3, [sp, #8]
 80118ca:	2200      	movs	r2, #0
 80118cc:	701a      	strb	r2, [r3, #0]
 80118ce:	b01c      	add	sp, #112	; 0x70
 80118d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80118d4:	b003      	add	sp, #12
 80118d6:	4770      	bx	lr
 80118d8:	20000100 	.word	0x20000100
 80118dc:	ffff0208 	.word	0xffff0208

080118e0 <sulp>:
 80118e0:	b570      	push	{r4, r5, r6, lr}
 80118e2:	4604      	mov	r4, r0
 80118e4:	460d      	mov	r5, r1
 80118e6:	4616      	mov	r6, r2
 80118e8:	ec45 4b10 	vmov	d0, r4, r5
 80118ec:	f002 fc44 	bl	8014178 <__ulp>
 80118f0:	ec51 0b10 	vmov	r0, r1, d0
 80118f4:	b17e      	cbz	r6, 8011916 <sulp+0x36>
 80118f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80118fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80118fe:	2b00      	cmp	r3, #0
 8011900:	dd09      	ble.n	8011916 <sulp+0x36>
 8011902:	051b      	lsls	r3, r3, #20
 8011904:	2400      	movs	r4, #0
 8011906:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801190a:	4622      	mov	r2, r4
 801190c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011910:	462b      	mov	r3, r5
 8011912:	f7ee fe55 	bl	80005c0 <__aeabi_dmul>
 8011916:	bd70      	pop	{r4, r5, r6, pc}

08011918 <_strtod_l>:
 8011918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191c:	461f      	mov	r7, r3
 801191e:	2300      	movs	r3, #0
 8011920:	4604      	mov	r4, r0
 8011922:	4688      	mov	r8, r1
 8011924:	f04f 0a00 	mov.w	sl, #0
 8011928:	f04f 0b00 	mov.w	fp, #0
 801192c:	ed2d 8b02 	vpush	{d8}
 8011930:	b09d      	sub	sp, #116	; 0x74
 8011932:	9318      	str	r3, [sp, #96]	; 0x60
 8011934:	4b9f      	ldr	r3, [pc, #636]	; (8011bb4 <_strtod_l+0x29c>)
 8011936:	9213      	str	r2, [sp, #76]	; 0x4c
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	4618      	mov	r0, r3
 801193c:	9305      	str	r3, [sp, #20]
 801193e:	f7ee fc7b 	bl	8000238 <strlen>
 8011942:	4605      	mov	r5, r0
 8011944:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801194a:	781a      	ldrb	r2, [r3, #0]
 801194c:	2a2b      	cmp	r2, #43	; 0x2b
 801194e:	d04e      	beq.n	80119ee <_strtod_l+0xd6>
 8011950:	d83b      	bhi.n	80119ca <_strtod_l+0xb2>
 8011952:	2a0d      	cmp	r2, #13
 8011954:	d834      	bhi.n	80119c0 <_strtod_l+0xa8>
 8011956:	2a08      	cmp	r2, #8
 8011958:	d834      	bhi.n	80119c4 <_strtod_l+0xac>
 801195a:	2a00      	cmp	r2, #0
 801195c:	d03e      	beq.n	80119dc <_strtod_l+0xc4>
 801195e:	2300      	movs	r3, #0
 8011960:	930a      	str	r3, [sp, #40]	; 0x28
 8011962:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011964:	7833      	ldrb	r3, [r6, #0]
 8011966:	2b30      	cmp	r3, #48	; 0x30
 8011968:	f040 80b0 	bne.w	8011acc <_strtod_l+0x1b4>
 801196c:	7873      	ldrb	r3, [r6, #1]
 801196e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011972:	2b58      	cmp	r3, #88	; 0x58
 8011974:	d168      	bne.n	8011a48 <_strtod_l+0x130>
 8011976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011978:	a917      	add	r1, sp, #92	; 0x5c
 801197a:	9702      	str	r7, [sp, #8]
 801197c:	4620      	mov	r0, r4
 801197e:	9301      	str	r3, [sp, #4]
 8011980:	ab18      	add	r3, sp, #96	; 0x60
 8011982:	4a8d      	ldr	r2, [pc, #564]	; (8011bb8 <_strtod_l+0x2a0>)
 8011984:	9300      	str	r3, [sp, #0]
 8011986:	ab19      	add	r3, sp, #100	; 0x64
 8011988:	f001 fd38 	bl	80133fc <__gethex>
 801198c:	f010 0707 	ands.w	r7, r0, #7
 8011990:	4605      	mov	r5, r0
 8011992:	d005      	beq.n	80119a0 <_strtod_l+0x88>
 8011994:	2f06      	cmp	r7, #6
 8011996:	d12c      	bne.n	80119f2 <_strtod_l+0xda>
 8011998:	3601      	adds	r6, #1
 801199a:	2300      	movs	r3, #0
 801199c:	9617      	str	r6, [sp, #92]	; 0x5c
 801199e:	930a      	str	r3, [sp, #40]	; 0x28
 80119a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f040 858e 	bne.w	80124c4 <_strtod_l+0xbac>
 80119a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119aa:	b1eb      	cbz	r3, 80119e8 <_strtod_l+0xd0>
 80119ac:	4652      	mov	r2, sl
 80119ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80119b2:	ec43 2b10 	vmov	d0, r2, r3
 80119b6:	b01d      	add	sp, #116	; 0x74
 80119b8:	ecbd 8b02 	vpop	{d8}
 80119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c0:	2a20      	cmp	r2, #32
 80119c2:	d1cc      	bne.n	801195e <_strtod_l+0x46>
 80119c4:	3301      	adds	r3, #1
 80119c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80119c8:	e7be      	b.n	8011948 <_strtod_l+0x30>
 80119ca:	2a2d      	cmp	r2, #45	; 0x2d
 80119cc:	d1c7      	bne.n	801195e <_strtod_l+0x46>
 80119ce:	2201      	movs	r2, #1
 80119d0:	920a      	str	r2, [sp, #40]	; 0x28
 80119d2:	1c5a      	adds	r2, r3, #1
 80119d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80119d6:	785b      	ldrb	r3, [r3, #1]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d1c2      	bne.n	8011962 <_strtod_l+0x4a>
 80119dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f040 856c 	bne.w	80124c0 <_strtod_l+0xba8>
 80119e8:	4652      	mov	r2, sl
 80119ea:	465b      	mov	r3, fp
 80119ec:	e7e1      	b.n	80119b2 <_strtod_l+0x9a>
 80119ee:	2200      	movs	r2, #0
 80119f0:	e7ee      	b.n	80119d0 <_strtod_l+0xb8>
 80119f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80119f4:	b13a      	cbz	r2, 8011a06 <_strtod_l+0xee>
 80119f6:	2135      	movs	r1, #53	; 0x35
 80119f8:	a81a      	add	r0, sp, #104	; 0x68
 80119fa:	f002 fcc6 	bl	801438a <__copybits>
 80119fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011a00:	4620      	mov	r0, r4
 8011a02:	f002 f881 	bl	8013b08 <_Bfree>
 8011a06:	3f01      	subs	r7, #1
 8011a08:	2f04      	cmp	r7, #4
 8011a0a:	d806      	bhi.n	8011a1a <_strtod_l+0x102>
 8011a0c:	e8df f007 	tbb	[pc, r7]
 8011a10:	1714030a 	.word	0x1714030a
 8011a14:	0a          	.byte	0x0a
 8011a15:	00          	.byte	0x00
 8011a16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011a1a:	0728      	lsls	r0, r5, #28
 8011a1c:	d5c0      	bpl.n	80119a0 <_strtod_l+0x88>
 8011a1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011a22:	e7bd      	b.n	80119a0 <_strtod_l+0x88>
 8011a24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011a28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011a2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011a2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011a32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a36:	e7f0      	b.n	8011a1a <_strtod_l+0x102>
 8011a38:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011bbc <_strtod_l+0x2a4>
 8011a3c:	e7ed      	b.n	8011a1a <_strtod_l+0x102>
 8011a3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011a42:	f04f 3aff 	mov.w	sl, #4294967295
 8011a46:	e7e8      	b.n	8011a1a <_strtod_l+0x102>
 8011a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a4a:	1c5a      	adds	r2, r3, #1
 8011a4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011a4e:	785b      	ldrb	r3, [r3, #1]
 8011a50:	2b30      	cmp	r3, #48	; 0x30
 8011a52:	d0f9      	beq.n	8011a48 <_strtod_l+0x130>
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d0a3      	beq.n	80119a0 <_strtod_l+0x88>
 8011a58:	2301      	movs	r3, #1
 8011a5a:	f04f 0900 	mov.w	r9, #0
 8011a5e:	9304      	str	r3, [sp, #16]
 8011a60:	220a      	movs	r2, #10
 8011a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a64:	464f      	mov	r7, r9
 8011a66:	f8cd 901c 	str.w	r9, [sp, #28]
 8011a6a:	9308      	str	r3, [sp, #32]
 8011a6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011a6e:	7806      	ldrb	r6, [r0, #0]
 8011a70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011a74:	b2d9      	uxtb	r1, r3
 8011a76:	2909      	cmp	r1, #9
 8011a78:	d92a      	bls.n	8011ad0 <_strtod_l+0x1b8>
 8011a7a:	462a      	mov	r2, r5
 8011a7c:	9905      	ldr	r1, [sp, #20]
 8011a7e:	f002 fe39 	bl	80146f4 <strncmp>
 8011a82:	b3a0      	cbz	r0, 8011aee <_strtod_l+0x1d6>
 8011a84:	2000      	movs	r0, #0
 8011a86:	4632      	mov	r2, r6
 8011a88:	463d      	mov	r5, r7
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	9005      	str	r0, [sp, #20]
 8011a8e:	2a65      	cmp	r2, #101	; 0x65
 8011a90:	d001      	beq.n	8011a96 <_strtod_l+0x17e>
 8011a92:	2a45      	cmp	r2, #69	; 0x45
 8011a94:	d118      	bne.n	8011ac8 <_strtod_l+0x1b0>
 8011a96:	b91d      	cbnz	r5, 8011aa0 <_strtod_l+0x188>
 8011a98:	9a04      	ldr	r2, [sp, #16]
 8011a9a:	4302      	orrs	r2, r0
 8011a9c:	d09e      	beq.n	80119dc <_strtod_l+0xc4>
 8011a9e:	2500      	movs	r5, #0
 8011aa0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011aa4:	f108 0201 	add.w	r2, r8, #1
 8011aa8:	9217      	str	r2, [sp, #92]	; 0x5c
 8011aaa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011aae:	2a2b      	cmp	r2, #43	; 0x2b
 8011ab0:	d075      	beq.n	8011b9e <_strtod_l+0x286>
 8011ab2:	2a2d      	cmp	r2, #45	; 0x2d
 8011ab4:	d07b      	beq.n	8011bae <_strtod_l+0x296>
 8011ab6:	f04f 0c00 	mov.w	ip, #0
 8011aba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011abe:	2909      	cmp	r1, #9
 8011ac0:	f240 8082 	bls.w	8011bc8 <_strtod_l+0x2b0>
 8011ac4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011ac8:	2600      	movs	r6, #0
 8011aca:	e09d      	b.n	8011c08 <_strtod_l+0x2f0>
 8011acc:	2300      	movs	r3, #0
 8011ace:	e7c4      	b.n	8011a5a <_strtod_l+0x142>
 8011ad0:	2f08      	cmp	r7, #8
 8011ad2:	f100 0001 	add.w	r0, r0, #1
 8011ad6:	f107 0701 	add.w	r7, r7, #1
 8011ada:	bfd4      	ite	le
 8011adc:	9907      	ldrle	r1, [sp, #28]
 8011ade:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011ae2:	9017      	str	r0, [sp, #92]	; 0x5c
 8011ae4:	bfdc      	itt	le
 8011ae6:	fb02 3301 	mlale	r3, r2, r1, r3
 8011aea:	9307      	strle	r3, [sp, #28]
 8011aec:	e7be      	b.n	8011a6c <_strtod_l+0x154>
 8011aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011af0:	195a      	adds	r2, r3, r5
 8011af2:	9217      	str	r2, [sp, #92]	; 0x5c
 8011af4:	5d5a      	ldrb	r2, [r3, r5]
 8011af6:	2f00      	cmp	r7, #0
 8011af8:	d036      	beq.n	8011b68 <_strtod_l+0x250>
 8011afa:	463d      	mov	r5, r7
 8011afc:	9005      	str	r0, [sp, #20]
 8011afe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011b02:	2b09      	cmp	r3, #9
 8011b04:	d912      	bls.n	8011b2c <_strtod_l+0x214>
 8011b06:	2301      	movs	r3, #1
 8011b08:	e7c1      	b.n	8011a8e <_strtod_l+0x176>
 8011b0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b0c:	3001      	adds	r0, #1
 8011b0e:	1c5a      	adds	r2, r3, #1
 8011b10:	9217      	str	r2, [sp, #92]	; 0x5c
 8011b12:	785a      	ldrb	r2, [r3, #1]
 8011b14:	2a30      	cmp	r2, #48	; 0x30
 8011b16:	d0f8      	beq.n	8011b0a <_strtod_l+0x1f2>
 8011b18:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011b1c:	2b08      	cmp	r3, #8
 8011b1e:	f200 84d6 	bhi.w	80124ce <_strtod_l+0xbb6>
 8011b22:	9005      	str	r0, [sp, #20]
 8011b24:	2000      	movs	r0, #0
 8011b26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b28:	4605      	mov	r5, r0
 8011b2a:	9308      	str	r3, [sp, #32]
 8011b2c:	3a30      	subs	r2, #48	; 0x30
 8011b2e:	f100 0301 	add.w	r3, r0, #1
 8011b32:	d013      	beq.n	8011b5c <_strtod_l+0x244>
 8011b34:	9905      	ldr	r1, [sp, #20]
 8011b36:	eb00 0e05 	add.w	lr, r0, r5
 8011b3a:	4419      	add	r1, r3
 8011b3c:	462b      	mov	r3, r5
 8011b3e:	9105      	str	r1, [sp, #20]
 8011b40:	210a      	movs	r1, #10
 8011b42:	4573      	cmp	r3, lr
 8011b44:	d112      	bne.n	8011b6c <_strtod_l+0x254>
 8011b46:	182b      	adds	r3, r5, r0
 8011b48:	3501      	adds	r5, #1
 8011b4a:	2b08      	cmp	r3, #8
 8011b4c:	4405      	add	r5, r0
 8011b4e:	dc1c      	bgt.n	8011b8a <_strtod_l+0x272>
 8011b50:	9907      	ldr	r1, [sp, #28]
 8011b52:	230a      	movs	r3, #10
 8011b54:	fb03 2301 	mla	r3, r3, r1, r2
 8011b58:	9307      	str	r3, [sp, #28]
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b5e:	4618      	mov	r0, r3
 8011b60:	1c51      	adds	r1, r2, #1
 8011b62:	9117      	str	r1, [sp, #92]	; 0x5c
 8011b64:	7852      	ldrb	r2, [r2, #1]
 8011b66:	e7ca      	b.n	8011afe <_strtod_l+0x1e6>
 8011b68:	4638      	mov	r0, r7
 8011b6a:	e7d3      	b.n	8011b14 <_strtod_l+0x1fc>
 8011b6c:	2b08      	cmp	r3, #8
 8011b6e:	dc04      	bgt.n	8011b7a <_strtod_l+0x262>
 8011b70:	9e07      	ldr	r6, [sp, #28]
 8011b72:	434e      	muls	r6, r1
 8011b74:	9607      	str	r6, [sp, #28]
 8011b76:	3301      	adds	r3, #1
 8011b78:	e7e3      	b.n	8011b42 <_strtod_l+0x22a>
 8011b7a:	f103 0c01 	add.w	ip, r3, #1
 8011b7e:	f1bc 0f10 	cmp.w	ip, #16
 8011b82:	bfd8      	it	le
 8011b84:	fb01 f909 	mulle.w	r9, r1, r9
 8011b88:	e7f5      	b.n	8011b76 <_strtod_l+0x25e>
 8011b8a:	2d10      	cmp	r5, #16
 8011b8c:	bfdc      	itt	le
 8011b8e:	230a      	movle	r3, #10
 8011b90:	fb03 2909 	mlale	r9, r3, r9, r2
 8011b94:	e7e1      	b.n	8011b5a <_strtod_l+0x242>
 8011b96:	2300      	movs	r3, #0
 8011b98:	9305      	str	r3, [sp, #20]
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e77c      	b.n	8011a98 <_strtod_l+0x180>
 8011b9e:	f04f 0c00 	mov.w	ip, #0
 8011ba2:	f108 0202 	add.w	r2, r8, #2
 8011ba6:	9217      	str	r2, [sp, #92]	; 0x5c
 8011ba8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011bac:	e785      	b.n	8011aba <_strtod_l+0x1a2>
 8011bae:	f04f 0c01 	mov.w	ip, #1
 8011bb2:	e7f6      	b.n	8011ba2 <_strtod_l+0x28a>
 8011bb4:	080155b8 	.word	0x080155b8
 8011bb8:	08015370 	.word	0x08015370
 8011bbc:	7ff00000 	.word	0x7ff00000
 8011bc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011bc2:	1c51      	adds	r1, r2, #1
 8011bc4:	9117      	str	r1, [sp, #92]	; 0x5c
 8011bc6:	7852      	ldrb	r2, [r2, #1]
 8011bc8:	2a30      	cmp	r2, #48	; 0x30
 8011bca:	d0f9      	beq.n	8011bc0 <_strtod_l+0x2a8>
 8011bcc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011bd0:	2908      	cmp	r1, #8
 8011bd2:	f63f af79 	bhi.w	8011ac8 <_strtod_l+0x1b0>
 8011bd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011bda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011bdc:	9206      	str	r2, [sp, #24]
 8011bde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011be0:	1c51      	adds	r1, r2, #1
 8011be2:	9117      	str	r1, [sp, #92]	; 0x5c
 8011be4:	7852      	ldrb	r2, [r2, #1]
 8011be6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8011bea:	2e09      	cmp	r6, #9
 8011bec:	d937      	bls.n	8011c5e <_strtod_l+0x346>
 8011bee:	9e06      	ldr	r6, [sp, #24]
 8011bf0:	1b89      	subs	r1, r1, r6
 8011bf2:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011bf6:	2908      	cmp	r1, #8
 8011bf8:	dc02      	bgt.n	8011c00 <_strtod_l+0x2e8>
 8011bfa:	4576      	cmp	r6, lr
 8011bfc:	bfa8      	it	ge
 8011bfe:	4676      	movge	r6, lr
 8011c00:	f1bc 0f00 	cmp.w	ip, #0
 8011c04:	d000      	beq.n	8011c08 <_strtod_l+0x2f0>
 8011c06:	4276      	negs	r6, r6
 8011c08:	2d00      	cmp	r5, #0
 8011c0a:	d14d      	bne.n	8011ca8 <_strtod_l+0x390>
 8011c0c:	9904      	ldr	r1, [sp, #16]
 8011c0e:	4301      	orrs	r1, r0
 8011c10:	f47f aec6 	bne.w	80119a0 <_strtod_l+0x88>
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f47f aee1 	bne.w	80119dc <_strtod_l+0xc4>
 8011c1a:	2a69      	cmp	r2, #105	; 0x69
 8011c1c:	d027      	beq.n	8011c6e <_strtod_l+0x356>
 8011c1e:	dc24      	bgt.n	8011c6a <_strtod_l+0x352>
 8011c20:	2a49      	cmp	r2, #73	; 0x49
 8011c22:	d024      	beq.n	8011c6e <_strtod_l+0x356>
 8011c24:	2a4e      	cmp	r2, #78	; 0x4e
 8011c26:	f47f aed9 	bne.w	80119dc <_strtod_l+0xc4>
 8011c2a:	499f      	ldr	r1, [pc, #636]	; (8011ea8 <_strtod_l+0x590>)
 8011c2c:	a817      	add	r0, sp, #92	; 0x5c
 8011c2e:	f001 fe3d 	bl	80138ac <__match>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	f43f aed2 	beq.w	80119dc <_strtod_l+0xc4>
 8011c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	2b28      	cmp	r3, #40	; 0x28
 8011c3e:	d12d      	bne.n	8011c9c <_strtod_l+0x384>
 8011c40:	aa1a      	add	r2, sp, #104	; 0x68
 8011c42:	499a      	ldr	r1, [pc, #616]	; (8011eac <_strtod_l+0x594>)
 8011c44:	a817      	add	r0, sp, #92	; 0x5c
 8011c46:	f001 fe45 	bl	80138d4 <__hexnan>
 8011c4a:	2805      	cmp	r0, #5
 8011c4c:	d126      	bne.n	8011c9c <_strtod_l+0x384>
 8011c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011c54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011c58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011c5c:	e6a0      	b.n	80119a0 <_strtod_l+0x88>
 8011c5e:	210a      	movs	r1, #10
 8011c60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011c64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011c68:	e7b9      	b.n	8011bde <_strtod_l+0x2c6>
 8011c6a:	2a6e      	cmp	r2, #110	; 0x6e
 8011c6c:	e7db      	b.n	8011c26 <_strtod_l+0x30e>
 8011c6e:	4990      	ldr	r1, [pc, #576]	; (8011eb0 <_strtod_l+0x598>)
 8011c70:	a817      	add	r0, sp, #92	; 0x5c
 8011c72:	f001 fe1b 	bl	80138ac <__match>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	f43f aeb0 	beq.w	80119dc <_strtod_l+0xc4>
 8011c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c7e:	a817      	add	r0, sp, #92	; 0x5c
 8011c80:	498c      	ldr	r1, [pc, #560]	; (8011eb4 <_strtod_l+0x59c>)
 8011c82:	3b01      	subs	r3, #1
 8011c84:	9317      	str	r3, [sp, #92]	; 0x5c
 8011c86:	f001 fe11 	bl	80138ac <__match>
 8011c8a:	b910      	cbnz	r0, 8011c92 <_strtod_l+0x37a>
 8011c8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c8e:	3301      	adds	r3, #1
 8011c90:	9317      	str	r3, [sp, #92]	; 0x5c
 8011c92:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011ec4 <_strtod_l+0x5ac>
 8011c96:	f04f 0a00 	mov.w	sl, #0
 8011c9a:	e681      	b.n	80119a0 <_strtod_l+0x88>
 8011c9c:	4886      	ldr	r0, [pc, #536]	; (8011eb8 <_strtod_l+0x5a0>)
 8011c9e:	f7fe fd77 	bl	8010790 <nan>
 8011ca2:	ec5b ab10 	vmov	sl, fp, d0
 8011ca6:	e67b      	b.n	80119a0 <_strtod_l+0x88>
 8011ca8:	9b05      	ldr	r3, [sp, #20]
 8011caa:	2f00      	cmp	r7, #0
 8011cac:	bf08      	it	eq
 8011cae:	462f      	moveq	r7, r5
 8011cb0:	2d10      	cmp	r5, #16
 8011cb2:	9807      	ldr	r0, [sp, #28]
 8011cb4:	eba6 0303 	sub.w	r3, r6, r3
 8011cb8:	46a8      	mov	r8, r5
 8011cba:	bfa8      	it	ge
 8011cbc:	f04f 0810 	movge.w	r8, #16
 8011cc0:	9306      	str	r3, [sp, #24]
 8011cc2:	f7ee fc03 	bl	80004cc <__aeabi_ui2d>
 8011cc6:	2d09      	cmp	r5, #9
 8011cc8:	4682      	mov	sl, r0
 8011cca:	468b      	mov	fp, r1
 8011ccc:	dd13      	ble.n	8011cf6 <_strtod_l+0x3de>
 8011cce:	4b7b      	ldr	r3, [pc, #492]	; (8011ebc <_strtod_l+0x5a4>)
 8011cd0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011cd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011cd8:	f7ee fc72 	bl	80005c0 <__aeabi_dmul>
 8011cdc:	4682      	mov	sl, r0
 8011cde:	468b      	mov	fp, r1
 8011ce0:	4648      	mov	r0, r9
 8011ce2:	f7ee fbf3 	bl	80004cc <__aeabi_ui2d>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4650      	mov	r0, sl
 8011cec:	4659      	mov	r1, fp
 8011cee:	f7ee fab1 	bl	8000254 <__adddf3>
 8011cf2:	4682      	mov	sl, r0
 8011cf4:	468b      	mov	fp, r1
 8011cf6:	2d0f      	cmp	r5, #15
 8011cf8:	dc38      	bgt.n	8011d6c <_strtod_l+0x454>
 8011cfa:	9b06      	ldr	r3, [sp, #24]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	f43f ae4f 	beq.w	80119a0 <_strtod_l+0x88>
 8011d02:	dd24      	ble.n	8011d4e <_strtod_l+0x436>
 8011d04:	2b16      	cmp	r3, #22
 8011d06:	dc0b      	bgt.n	8011d20 <_strtod_l+0x408>
 8011d08:	496c      	ldr	r1, [pc, #432]	; (8011ebc <_strtod_l+0x5a4>)
 8011d0a:	4652      	mov	r2, sl
 8011d0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d10:	465b      	mov	r3, fp
 8011d12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d16:	f7ee fc53 	bl	80005c0 <__aeabi_dmul>
 8011d1a:	4682      	mov	sl, r0
 8011d1c:	468b      	mov	fp, r1
 8011d1e:	e63f      	b.n	80119a0 <_strtod_l+0x88>
 8011d20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011d24:	9a06      	ldr	r2, [sp, #24]
 8011d26:	4293      	cmp	r3, r2
 8011d28:	db20      	blt.n	8011d6c <_strtod_l+0x454>
 8011d2a:	f1c5 050f 	rsb	r5, r5, #15
 8011d2e:	4c63      	ldr	r4, [pc, #396]	; (8011ebc <_strtod_l+0x5a4>)
 8011d30:	4652      	mov	r2, sl
 8011d32:	465b      	mov	r3, fp
 8011d34:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d3c:	f7ee fc40 	bl	80005c0 <__aeabi_dmul>
 8011d40:	9b06      	ldr	r3, [sp, #24]
 8011d42:	1b5d      	subs	r5, r3, r5
 8011d44:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011d48:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d4c:	e7e3      	b.n	8011d16 <_strtod_l+0x3fe>
 8011d4e:	9b06      	ldr	r3, [sp, #24]
 8011d50:	3316      	adds	r3, #22
 8011d52:	db0b      	blt.n	8011d6c <_strtod_l+0x454>
 8011d54:	9b05      	ldr	r3, [sp, #20]
 8011d56:	4650      	mov	r0, sl
 8011d58:	4659      	mov	r1, fp
 8011d5a:	1b9e      	subs	r6, r3, r6
 8011d5c:	4b57      	ldr	r3, [pc, #348]	; (8011ebc <_strtod_l+0x5a4>)
 8011d5e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011d62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d66:	f7ee fd55 	bl	8000814 <__aeabi_ddiv>
 8011d6a:	e7d6      	b.n	8011d1a <_strtod_l+0x402>
 8011d6c:	eba5 0808 	sub.w	r8, r5, r8
 8011d70:	9b06      	ldr	r3, [sp, #24]
 8011d72:	4498      	add	r8, r3
 8011d74:	f1b8 0f00 	cmp.w	r8, #0
 8011d78:	dd74      	ble.n	8011e64 <_strtod_l+0x54c>
 8011d7a:	f018 030f 	ands.w	r3, r8, #15
 8011d7e:	d00a      	beq.n	8011d96 <_strtod_l+0x47e>
 8011d80:	494e      	ldr	r1, [pc, #312]	; (8011ebc <_strtod_l+0x5a4>)
 8011d82:	4652      	mov	r2, sl
 8011d84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d88:	465b      	mov	r3, fp
 8011d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d8e:	f7ee fc17 	bl	80005c0 <__aeabi_dmul>
 8011d92:	4682      	mov	sl, r0
 8011d94:	468b      	mov	fp, r1
 8011d96:	f038 080f 	bics.w	r8, r8, #15
 8011d9a:	d04f      	beq.n	8011e3c <_strtod_l+0x524>
 8011d9c:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011da0:	dd22      	ble.n	8011de8 <_strtod_l+0x4d0>
 8011da2:	2500      	movs	r5, #0
 8011da4:	462e      	mov	r6, r5
 8011da6:	9507      	str	r5, [sp, #28]
 8011da8:	9505      	str	r5, [sp, #20]
 8011daa:	2322      	movs	r3, #34	; 0x22
 8011dac:	f8df b114 	ldr.w	fp, [pc, #276]	; 8011ec4 <_strtod_l+0x5ac>
 8011db0:	f04f 0a00 	mov.w	sl, #0
 8011db4:	6023      	str	r3, [r4, #0]
 8011db6:	9b07      	ldr	r3, [sp, #28]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	f43f adf1 	beq.w	80119a0 <_strtod_l+0x88>
 8011dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f001 fea1 	bl	8013b08 <_Bfree>
 8011dc6:	9905      	ldr	r1, [sp, #20]
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f001 fe9d 	bl	8013b08 <_Bfree>
 8011dce:	4631      	mov	r1, r6
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f001 fe99 	bl	8013b08 <_Bfree>
 8011dd6:	9907      	ldr	r1, [sp, #28]
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f001 fe95 	bl	8013b08 <_Bfree>
 8011dde:	4629      	mov	r1, r5
 8011de0:	4620      	mov	r0, r4
 8011de2:	f001 fe91 	bl	8013b08 <_Bfree>
 8011de6:	e5db      	b.n	80119a0 <_strtod_l+0x88>
 8011de8:	4b35      	ldr	r3, [pc, #212]	; (8011ec0 <_strtod_l+0x5a8>)
 8011dea:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011dee:	4650      	mov	r0, sl
 8011df0:	4659      	mov	r1, fp
 8011df2:	9304      	str	r3, [sp, #16]
 8011df4:	2300      	movs	r3, #0
 8011df6:	4699      	mov	r9, r3
 8011df8:	f1b8 0f01 	cmp.w	r8, #1
 8011dfc:	dc21      	bgt.n	8011e42 <_strtod_l+0x52a>
 8011dfe:	b10b      	cbz	r3, 8011e04 <_strtod_l+0x4ec>
 8011e00:	4682      	mov	sl, r0
 8011e02:	468b      	mov	fp, r1
 8011e04:	4b2e      	ldr	r3, [pc, #184]	; (8011ec0 <_strtod_l+0x5a8>)
 8011e06:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011e0a:	4652      	mov	r2, sl
 8011e0c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011e10:	465b      	mov	r3, fp
 8011e12:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011e16:	f7ee fbd3 	bl	80005c0 <__aeabi_dmul>
 8011e1a:	4b2a      	ldr	r3, [pc, #168]	; (8011ec4 <_strtod_l+0x5ac>)
 8011e1c:	460a      	mov	r2, r1
 8011e1e:	4682      	mov	sl, r0
 8011e20:	400b      	ands	r3, r1
 8011e22:	4929      	ldr	r1, [pc, #164]	; (8011ec8 <_strtod_l+0x5b0>)
 8011e24:	428b      	cmp	r3, r1
 8011e26:	d8bc      	bhi.n	8011da2 <_strtod_l+0x48a>
 8011e28:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011e2c:	428b      	cmp	r3, r1
 8011e2e:	bf86      	itte	hi
 8011e30:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011ecc <_strtod_l+0x5b4>
 8011e34:	f04f 3aff 	movhi.w	sl, #4294967295
 8011e38:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	9304      	str	r3, [sp, #16]
 8011e40:	e083      	b.n	8011f4a <_strtod_l+0x632>
 8011e42:	f018 0f01 	tst.w	r8, #1
 8011e46:	d005      	beq.n	8011e54 <_strtod_l+0x53c>
 8011e48:	9b04      	ldr	r3, [sp, #16]
 8011e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4e:	f7ee fbb7 	bl	80005c0 <__aeabi_dmul>
 8011e52:	2301      	movs	r3, #1
 8011e54:	9a04      	ldr	r2, [sp, #16]
 8011e56:	f109 0901 	add.w	r9, r9, #1
 8011e5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011e5e:	3208      	adds	r2, #8
 8011e60:	9204      	str	r2, [sp, #16]
 8011e62:	e7c9      	b.n	8011df8 <_strtod_l+0x4e0>
 8011e64:	d0ea      	beq.n	8011e3c <_strtod_l+0x524>
 8011e66:	f1c8 0800 	rsb	r8, r8, #0
 8011e6a:	f018 020f 	ands.w	r2, r8, #15
 8011e6e:	d00a      	beq.n	8011e86 <_strtod_l+0x56e>
 8011e70:	4b12      	ldr	r3, [pc, #72]	; (8011ebc <_strtod_l+0x5a4>)
 8011e72:	4650      	mov	r0, sl
 8011e74:	4659      	mov	r1, fp
 8011e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7e:	f7ee fcc9 	bl	8000814 <__aeabi_ddiv>
 8011e82:	4682      	mov	sl, r0
 8011e84:	468b      	mov	fp, r1
 8011e86:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011e8a:	d0d7      	beq.n	8011e3c <_strtod_l+0x524>
 8011e8c:	f1b8 0f1f 	cmp.w	r8, #31
 8011e90:	dd1e      	ble.n	8011ed0 <_strtod_l+0x5b8>
 8011e92:	2500      	movs	r5, #0
 8011e94:	462e      	mov	r6, r5
 8011e96:	9507      	str	r5, [sp, #28]
 8011e98:	9505      	str	r5, [sp, #20]
 8011e9a:	2322      	movs	r3, #34	; 0x22
 8011e9c:	f04f 0a00 	mov.w	sl, #0
 8011ea0:	f04f 0b00 	mov.w	fp, #0
 8011ea4:	6023      	str	r3, [r4, #0]
 8011ea6:	e786      	b.n	8011db6 <_strtod_l+0x49e>
 8011ea8:	08015341 	.word	0x08015341
 8011eac:	08015384 	.word	0x08015384
 8011eb0:	08015339 	.word	0x08015339
 8011eb4:	080154c4 	.word	0x080154c4
 8011eb8:	08015770 	.word	0x08015770
 8011ebc:	08015650 	.word	0x08015650
 8011ec0:	08015628 	.word	0x08015628
 8011ec4:	7ff00000 	.word	0x7ff00000
 8011ec8:	7ca00000 	.word	0x7ca00000
 8011ecc:	7fefffff 	.word	0x7fefffff
 8011ed0:	f018 0310 	ands.w	r3, r8, #16
 8011ed4:	4650      	mov	r0, sl
 8011ed6:	4659      	mov	r1, fp
 8011ed8:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8012284 <_strtod_l+0x96c>
 8011edc:	bf18      	it	ne
 8011ede:	236a      	movne	r3, #106	; 0x6a
 8011ee0:	9304      	str	r3, [sp, #16]
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f018 0f01 	tst.w	r8, #1
 8011ee8:	d004      	beq.n	8011ef4 <_strtod_l+0x5dc>
 8011eea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011eee:	f7ee fb67 	bl	80005c0 <__aeabi_dmul>
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011ef8:	f109 0908 	add.w	r9, r9, #8
 8011efc:	d1f2      	bne.n	8011ee4 <_strtod_l+0x5cc>
 8011efe:	b10b      	cbz	r3, 8011f04 <_strtod_l+0x5ec>
 8011f00:	4682      	mov	sl, r0
 8011f02:	468b      	mov	fp, r1
 8011f04:	9b04      	ldr	r3, [sp, #16]
 8011f06:	b1c3      	cbz	r3, 8011f3a <_strtod_l+0x622>
 8011f08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011f0c:	4659      	mov	r1, fp
 8011f0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	dd11      	ble.n	8011f3a <_strtod_l+0x622>
 8011f16:	2b1f      	cmp	r3, #31
 8011f18:	f340 8121 	ble.w	801215e <_strtod_l+0x846>
 8011f1c:	2b34      	cmp	r3, #52	; 0x34
 8011f1e:	f04f 0a00 	mov.w	sl, #0
 8011f22:	bfdb      	ittet	le
 8011f24:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011f28:	f04f 33ff 	movle.w	r3, #4294967295
 8011f2c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011f30:	fa03 f202 	lslle.w	r2, r3, r2
 8011f34:	bfd8      	it	le
 8011f36:	ea02 0b01 	andle.w	fp, r2, r1
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	4650      	mov	r0, sl
 8011f40:	4659      	mov	r1, fp
 8011f42:	f7ee fda5 	bl	8000a90 <__aeabi_dcmpeq>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d1a3      	bne.n	8011e92 <_strtod_l+0x57a>
 8011f4a:	9b07      	ldr	r3, [sp, #28]
 8011f4c:	463a      	mov	r2, r7
 8011f4e:	9908      	ldr	r1, [sp, #32]
 8011f50:	4620      	mov	r0, r4
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	462b      	mov	r3, r5
 8011f56:	f001 fe41 	bl	8013bdc <__s2b>
 8011f5a:	9007      	str	r0, [sp, #28]
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	f43f af20 	beq.w	8011da2 <_strtod_l+0x48a>
 8011f62:	9b05      	ldr	r3, [sp, #20]
 8011f64:	2500      	movs	r5, #0
 8011f66:	1b9e      	subs	r6, r3, r6
 8011f68:	9b06      	ldr	r3, [sp, #24]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	bfb4      	ite	lt
 8011f6e:	4633      	movlt	r3, r6
 8011f70:	2300      	movge	r3, #0
 8011f72:	462e      	mov	r6, r5
 8011f74:	930c      	str	r3, [sp, #48]	; 0x30
 8011f76:	9b06      	ldr	r3, [sp, #24]
 8011f78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011f7c:	9312      	str	r3, [sp, #72]	; 0x48
 8011f7e:	9b07      	ldr	r3, [sp, #28]
 8011f80:	4620      	mov	r0, r4
 8011f82:	6859      	ldr	r1, [r3, #4]
 8011f84:	f001 fd80 	bl	8013a88 <_Balloc>
 8011f88:	9005      	str	r0, [sp, #20]
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	f43f af0d 	beq.w	8011daa <_strtod_l+0x492>
 8011f90:	9b07      	ldr	r3, [sp, #28]
 8011f92:	300c      	adds	r0, #12
 8011f94:	691a      	ldr	r2, [r3, #16]
 8011f96:	f103 010c 	add.w	r1, r3, #12
 8011f9a:	3202      	adds	r2, #2
 8011f9c:	0092      	lsls	r2, r2, #2
 8011f9e:	f001 fd59 	bl	8013a54 <memcpy>
 8011fa2:	aa1a      	add	r2, sp, #104	; 0x68
 8011fa4:	a919      	add	r1, sp, #100	; 0x64
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	ec4b ab10 	vmov	d0, sl, fp
 8011fac:	f002 f95e 	bl	801426c <__d2b>
 8011fb0:	9018      	str	r0, [sp, #96]	; 0x60
 8011fb2:	ec4b ab18 	vmov	d8, sl, fp
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	f43f aef7 	beq.w	8011daa <_strtod_l+0x492>
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f001 fea6 	bl	8013d10 <__i2b>
 8011fc4:	4606      	mov	r6, r0
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	f43f aeef 	beq.w	8011daa <_strtod_l+0x492>
 8011fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011fce:	9904      	ldr	r1, [sp, #16]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	eba3 0801 	sub.w	r8, r3, r1
 8011fd6:	bfa9      	itett	ge
 8011fd8:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011fda:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011fdc:	eb03 0902 	addge.w	r9, r3, r2
 8011fe0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011fe2:	bfb8      	it	lt
 8011fe4:	1ad7      	sublt	r7, r2, r3
 8011fe6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011fe8:	4ba1      	ldr	r3, [pc, #644]	; (8012270 <_strtod_l+0x958>)
 8011fea:	4490      	add	r8, r2
 8011fec:	bfb8      	it	lt
 8011fee:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011ff2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011ff6:	f108 38ff 	add.w	r8, r8, #4294967295
 8011ffa:	4598      	cmp	r8, r3
 8011ffc:	f280 80c3 	bge.w	8012186 <_strtod_l+0x86e>
 8012000:	eba3 0308 	sub.w	r3, r3, r8
 8012004:	2101      	movs	r1, #1
 8012006:	2b1f      	cmp	r3, #31
 8012008:	eba2 0203 	sub.w	r2, r2, r3
 801200c:	f300 80ae 	bgt.w	801216c <_strtod_l+0x854>
 8012010:	fa01 f303 	lsl.w	r3, r1, r3
 8012014:	930d      	str	r3, [sp, #52]	; 0x34
 8012016:	2300      	movs	r3, #0
 8012018:	9308      	str	r3, [sp, #32]
 801201a:	eb09 0802 	add.w	r8, r9, r2
 801201e:	9b04      	ldr	r3, [sp, #16]
 8012020:	4417      	add	r7, r2
 8012022:	45c1      	cmp	r9, r8
 8012024:	441f      	add	r7, r3
 8012026:	464b      	mov	r3, r9
 8012028:	bfa8      	it	ge
 801202a:	4643      	movge	r3, r8
 801202c:	42bb      	cmp	r3, r7
 801202e:	bfa8      	it	ge
 8012030:	463b      	movge	r3, r7
 8012032:	2b00      	cmp	r3, #0
 8012034:	bfc2      	ittt	gt
 8012036:	eba8 0803 	subgt.w	r8, r8, r3
 801203a:	1aff      	subgt	r7, r7, r3
 801203c:	eba9 0903 	subgt.w	r9, r9, r3
 8012040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012042:	2b00      	cmp	r3, #0
 8012044:	dd17      	ble.n	8012076 <_strtod_l+0x75e>
 8012046:	4631      	mov	r1, r6
 8012048:	461a      	mov	r2, r3
 801204a:	4620      	mov	r0, r4
 801204c:	f001 ff1e 	bl	8013e8c <__pow5mult>
 8012050:	4606      	mov	r6, r0
 8012052:	2800      	cmp	r0, #0
 8012054:	f43f aea9 	beq.w	8011daa <_strtod_l+0x492>
 8012058:	4601      	mov	r1, r0
 801205a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801205c:	4620      	mov	r0, r4
 801205e:	f001 fe6d 	bl	8013d3c <__multiply>
 8012062:	900b      	str	r0, [sp, #44]	; 0x2c
 8012064:	2800      	cmp	r0, #0
 8012066:	f43f aea0 	beq.w	8011daa <_strtod_l+0x492>
 801206a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801206c:	4620      	mov	r0, r4
 801206e:	f001 fd4b 	bl	8013b08 <_Bfree>
 8012072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012074:	9318      	str	r3, [sp, #96]	; 0x60
 8012076:	f1b8 0f00 	cmp.w	r8, #0
 801207a:	f300 8089 	bgt.w	8012190 <_strtod_l+0x878>
 801207e:	9b06      	ldr	r3, [sp, #24]
 8012080:	2b00      	cmp	r3, #0
 8012082:	dd08      	ble.n	8012096 <_strtod_l+0x77e>
 8012084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012086:	4620      	mov	r0, r4
 8012088:	9905      	ldr	r1, [sp, #20]
 801208a:	f001 feff 	bl	8013e8c <__pow5mult>
 801208e:	9005      	str	r0, [sp, #20]
 8012090:	2800      	cmp	r0, #0
 8012092:	f43f ae8a 	beq.w	8011daa <_strtod_l+0x492>
 8012096:	2f00      	cmp	r7, #0
 8012098:	dd08      	ble.n	80120ac <_strtod_l+0x794>
 801209a:	463a      	mov	r2, r7
 801209c:	9905      	ldr	r1, [sp, #20]
 801209e:	4620      	mov	r0, r4
 80120a0:	f001 ff4e 	bl	8013f40 <__lshift>
 80120a4:	9005      	str	r0, [sp, #20]
 80120a6:	2800      	cmp	r0, #0
 80120a8:	f43f ae7f 	beq.w	8011daa <_strtod_l+0x492>
 80120ac:	f1b9 0f00 	cmp.w	r9, #0
 80120b0:	dd08      	ble.n	80120c4 <_strtod_l+0x7ac>
 80120b2:	4631      	mov	r1, r6
 80120b4:	464a      	mov	r2, r9
 80120b6:	4620      	mov	r0, r4
 80120b8:	f001 ff42 	bl	8013f40 <__lshift>
 80120bc:	4606      	mov	r6, r0
 80120be:	2800      	cmp	r0, #0
 80120c0:	f43f ae73 	beq.w	8011daa <_strtod_l+0x492>
 80120c4:	9a05      	ldr	r2, [sp, #20]
 80120c6:	4620      	mov	r0, r4
 80120c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80120ca:	f001 ffc5 	bl	8014058 <__mdiff>
 80120ce:	4605      	mov	r5, r0
 80120d0:	2800      	cmp	r0, #0
 80120d2:	f43f ae6a 	beq.w	8011daa <_strtod_l+0x492>
 80120d6:	68c3      	ldr	r3, [r0, #12]
 80120d8:	4631      	mov	r1, r6
 80120da:	930b      	str	r3, [sp, #44]	; 0x2c
 80120dc:	2300      	movs	r3, #0
 80120de:	60c3      	str	r3, [r0, #12]
 80120e0:	f001 ff9e 	bl	8014020 <__mcmp>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	da5d      	bge.n	80121a4 <_strtod_l+0x88c>
 80120e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120ea:	ea53 030a 	orrs.w	r3, r3, sl
 80120ee:	d17f      	bne.n	80121f0 <_strtod_l+0x8d8>
 80120f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d17b      	bne.n	80121f0 <_strtod_l+0x8d8>
 80120f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80120fc:	0d1b      	lsrs	r3, r3, #20
 80120fe:	051b      	lsls	r3, r3, #20
 8012100:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012104:	d974      	bls.n	80121f0 <_strtod_l+0x8d8>
 8012106:	696b      	ldr	r3, [r5, #20]
 8012108:	b913      	cbnz	r3, 8012110 <_strtod_l+0x7f8>
 801210a:	692b      	ldr	r3, [r5, #16]
 801210c:	2b01      	cmp	r3, #1
 801210e:	dd6f      	ble.n	80121f0 <_strtod_l+0x8d8>
 8012110:	4629      	mov	r1, r5
 8012112:	2201      	movs	r2, #1
 8012114:	4620      	mov	r0, r4
 8012116:	f001 ff13 	bl	8013f40 <__lshift>
 801211a:	4631      	mov	r1, r6
 801211c:	4605      	mov	r5, r0
 801211e:	f001 ff7f 	bl	8014020 <__mcmp>
 8012122:	2800      	cmp	r0, #0
 8012124:	dd64      	ble.n	80121f0 <_strtod_l+0x8d8>
 8012126:	9904      	ldr	r1, [sp, #16]
 8012128:	465b      	mov	r3, fp
 801212a:	4a52      	ldr	r2, [pc, #328]	; (8012274 <_strtod_l+0x95c>)
 801212c:	2900      	cmp	r1, #0
 801212e:	d07f      	beq.n	8012230 <_strtod_l+0x918>
 8012130:	ea02 010b 	and.w	r1, r2, fp
 8012134:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012138:	dc7a      	bgt.n	8012230 <_strtod_l+0x918>
 801213a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801213e:	f77f aeac 	ble.w	8011e9a <_strtod_l+0x582>
 8012142:	4b4d      	ldr	r3, [pc, #308]	; (8012278 <_strtod_l+0x960>)
 8012144:	4650      	mov	r0, sl
 8012146:	4659      	mov	r1, fp
 8012148:	2200      	movs	r2, #0
 801214a:	f7ee fa39 	bl	80005c0 <__aeabi_dmul>
 801214e:	460b      	mov	r3, r1
 8012150:	4682      	mov	sl, r0
 8012152:	468b      	mov	fp, r1
 8012154:	4303      	orrs	r3, r0
 8012156:	bf04      	itt	eq
 8012158:	2322      	moveq	r3, #34	; 0x22
 801215a:	6023      	streq	r3, [r4, #0]
 801215c:	e62f      	b.n	8011dbe <_strtod_l+0x4a6>
 801215e:	f04f 32ff 	mov.w	r2, #4294967295
 8012162:	fa02 f303 	lsl.w	r3, r2, r3
 8012166:	ea03 0a0a 	and.w	sl, r3, sl
 801216a:	e6e6      	b.n	8011f3a <_strtod_l+0x622>
 801216c:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012170:	910d      	str	r1, [sp, #52]	; 0x34
 8012172:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012176:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801217a:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801217e:	fa01 f308 	lsl.w	r3, r1, r8
 8012182:	9308      	str	r3, [sp, #32]
 8012184:	e749      	b.n	801201a <_strtod_l+0x702>
 8012186:	2300      	movs	r3, #0
 8012188:	9308      	str	r3, [sp, #32]
 801218a:	2301      	movs	r3, #1
 801218c:	930d      	str	r3, [sp, #52]	; 0x34
 801218e:	e744      	b.n	801201a <_strtod_l+0x702>
 8012190:	4642      	mov	r2, r8
 8012192:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012194:	4620      	mov	r0, r4
 8012196:	f001 fed3 	bl	8013f40 <__lshift>
 801219a:	9018      	str	r0, [sp, #96]	; 0x60
 801219c:	2800      	cmp	r0, #0
 801219e:	f47f af6e 	bne.w	801207e <_strtod_l+0x766>
 80121a2:	e602      	b.n	8011daa <_strtod_l+0x492>
 80121a4:	465f      	mov	r7, fp
 80121a6:	d16f      	bne.n	8012288 <_strtod_l+0x970>
 80121a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121ae:	b342      	cbz	r2, 8012202 <_strtod_l+0x8ea>
 80121b0:	4a32      	ldr	r2, [pc, #200]	; (801227c <_strtod_l+0x964>)
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d128      	bne.n	8012208 <_strtod_l+0x8f0>
 80121b6:	9b04      	ldr	r3, [sp, #16]
 80121b8:	4651      	mov	r1, sl
 80121ba:	b1eb      	cbz	r3, 80121f8 <_strtod_l+0x8e0>
 80121bc:	4b2d      	ldr	r3, [pc, #180]	; (8012274 <_strtod_l+0x95c>)
 80121be:	f04f 32ff 	mov.w	r2, #4294967295
 80121c2:	403b      	ands	r3, r7
 80121c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80121c8:	d819      	bhi.n	80121fe <_strtod_l+0x8e6>
 80121ca:	0d1b      	lsrs	r3, r3, #20
 80121cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80121d0:	fa02 f303 	lsl.w	r3, r2, r3
 80121d4:	4299      	cmp	r1, r3
 80121d6:	d117      	bne.n	8012208 <_strtod_l+0x8f0>
 80121d8:	4b29      	ldr	r3, [pc, #164]	; (8012280 <_strtod_l+0x968>)
 80121da:	429f      	cmp	r7, r3
 80121dc:	d102      	bne.n	80121e4 <_strtod_l+0x8cc>
 80121de:	3101      	adds	r1, #1
 80121e0:	f43f ade3 	beq.w	8011daa <_strtod_l+0x492>
 80121e4:	4b23      	ldr	r3, [pc, #140]	; (8012274 <_strtod_l+0x95c>)
 80121e6:	f04f 0a00 	mov.w	sl, #0
 80121ea:	403b      	ands	r3, r7
 80121ec:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80121f0:	9b04      	ldr	r3, [sp, #16]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d1a5      	bne.n	8012142 <_strtod_l+0x82a>
 80121f6:	e5e2      	b.n	8011dbe <_strtod_l+0x4a6>
 80121f8:	f04f 33ff 	mov.w	r3, #4294967295
 80121fc:	e7ea      	b.n	80121d4 <_strtod_l+0x8bc>
 80121fe:	4613      	mov	r3, r2
 8012200:	e7e8      	b.n	80121d4 <_strtod_l+0x8bc>
 8012202:	ea53 030a 	orrs.w	r3, r3, sl
 8012206:	d08e      	beq.n	8012126 <_strtod_l+0x80e>
 8012208:	9b08      	ldr	r3, [sp, #32]
 801220a:	b1db      	cbz	r3, 8012244 <_strtod_l+0x92c>
 801220c:	423b      	tst	r3, r7
 801220e:	d0ef      	beq.n	80121f0 <_strtod_l+0x8d8>
 8012210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012212:	4650      	mov	r0, sl
 8012214:	9a04      	ldr	r2, [sp, #16]
 8012216:	4659      	mov	r1, fp
 8012218:	b1c3      	cbz	r3, 801224c <_strtod_l+0x934>
 801221a:	f7ff fb61 	bl	80118e0 <sulp>
 801221e:	4602      	mov	r2, r0
 8012220:	460b      	mov	r3, r1
 8012222:	ec51 0b18 	vmov	r0, r1, d8
 8012226:	f7ee f815 	bl	8000254 <__adddf3>
 801222a:	4682      	mov	sl, r0
 801222c:	468b      	mov	fp, r1
 801222e:	e7df      	b.n	80121f0 <_strtod_l+0x8d8>
 8012230:	4013      	ands	r3, r2
 8012232:	f04f 3aff 	mov.w	sl, #4294967295
 8012236:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801223a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801223e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012242:	e7d5      	b.n	80121f0 <_strtod_l+0x8d8>
 8012244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012246:	ea13 0f0a 	tst.w	r3, sl
 801224a:	e7e0      	b.n	801220e <_strtod_l+0x8f6>
 801224c:	f7ff fb48 	bl	80118e0 <sulp>
 8012250:	4602      	mov	r2, r0
 8012252:	460b      	mov	r3, r1
 8012254:	ec51 0b18 	vmov	r0, r1, d8
 8012258:	f7ed fffa 	bl	8000250 <__aeabi_dsub>
 801225c:	2200      	movs	r2, #0
 801225e:	2300      	movs	r3, #0
 8012260:	4682      	mov	sl, r0
 8012262:	468b      	mov	fp, r1
 8012264:	f7ee fc14 	bl	8000a90 <__aeabi_dcmpeq>
 8012268:	2800      	cmp	r0, #0
 801226a:	d0c1      	beq.n	80121f0 <_strtod_l+0x8d8>
 801226c:	e615      	b.n	8011e9a <_strtod_l+0x582>
 801226e:	bf00      	nop
 8012270:	fffffc02 	.word	0xfffffc02
 8012274:	7ff00000 	.word	0x7ff00000
 8012278:	39500000 	.word	0x39500000
 801227c:	000fffff 	.word	0x000fffff
 8012280:	7fefffff 	.word	0x7fefffff
 8012284:	08015398 	.word	0x08015398
 8012288:	4631      	mov	r1, r6
 801228a:	4628      	mov	r0, r5
 801228c:	f002 f84a 	bl	8014324 <__ratio>
 8012290:	2200      	movs	r2, #0
 8012292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012296:	ee10 0a10 	vmov	r0, s0
 801229a:	ec59 8b10 	vmov	r8, r9, d0
 801229e:	4649      	mov	r1, r9
 80122a0:	f7ee fc0a 	bl	8000ab8 <__aeabi_dcmple>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d07a      	beq.n	801239e <_strtod_l+0xa86>
 80122a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d04a      	beq.n	8012344 <_strtod_l+0xa2c>
 80122ae:	2200      	movs	r2, #0
 80122b0:	4b93      	ldr	r3, [pc, #588]	; (8012500 <_strtod_l+0xbe8>)
 80122b2:	f04f 0800 	mov.w	r8, #0
 80122b6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8012500 <_strtod_l+0xbe8>
 80122ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80122be:	4b91      	ldr	r3, [pc, #580]	; (8012504 <_strtod_l+0xbec>)
 80122c0:	403b      	ands	r3, r7
 80122c2:	930d      	str	r3, [sp, #52]	; 0x34
 80122c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122c6:	4b90      	ldr	r3, [pc, #576]	; (8012508 <_strtod_l+0xbf0>)
 80122c8:	429a      	cmp	r2, r3
 80122ca:	f040 80b0 	bne.w	801242e <_strtod_l+0xb16>
 80122ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80122d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80122d6:	ec4b ab10 	vmov	d0, sl, fp
 80122da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80122de:	f001 ff4b 	bl	8014178 <__ulp>
 80122e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80122e6:	ec53 2b10 	vmov	r2, r3, d0
 80122ea:	f7ee f969 	bl	80005c0 <__aeabi_dmul>
 80122ee:	4652      	mov	r2, sl
 80122f0:	465b      	mov	r3, fp
 80122f2:	f7ed ffaf 	bl	8000254 <__adddf3>
 80122f6:	460b      	mov	r3, r1
 80122f8:	4982      	ldr	r1, [pc, #520]	; (8012504 <_strtod_l+0xbec>)
 80122fa:	4682      	mov	sl, r0
 80122fc:	4a83      	ldr	r2, [pc, #524]	; (801250c <_strtod_l+0xbf4>)
 80122fe:	4019      	ands	r1, r3
 8012300:	4291      	cmp	r1, r2
 8012302:	d960      	bls.n	80123c6 <_strtod_l+0xaae>
 8012304:	ee18 3a90 	vmov	r3, s17
 8012308:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801230c:	4293      	cmp	r3, r2
 801230e:	d104      	bne.n	801231a <_strtod_l+0xa02>
 8012310:	ee18 3a10 	vmov	r3, s16
 8012314:	3301      	adds	r3, #1
 8012316:	f43f ad48 	beq.w	8011daa <_strtod_l+0x492>
 801231a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012518 <_strtod_l+0xc00>
 801231e:	f04f 3aff 	mov.w	sl, #4294967295
 8012322:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012324:	4620      	mov	r0, r4
 8012326:	f001 fbef 	bl	8013b08 <_Bfree>
 801232a:	9905      	ldr	r1, [sp, #20]
 801232c:	4620      	mov	r0, r4
 801232e:	f001 fbeb 	bl	8013b08 <_Bfree>
 8012332:	4631      	mov	r1, r6
 8012334:	4620      	mov	r0, r4
 8012336:	f001 fbe7 	bl	8013b08 <_Bfree>
 801233a:	4629      	mov	r1, r5
 801233c:	4620      	mov	r0, r4
 801233e:	f001 fbe3 	bl	8013b08 <_Bfree>
 8012342:	e61c      	b.n	8011f7e <_strtod_l+0x666>
 8012344:	f1ba 0f00 	cmp.w	sl, #0
 8012348:	d11b      	bne.n	8012382 <_strtod_l+0xa6a>
 801234a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801234e:	b9f3      	cbnz	r3, 801238e <_strtod_l+0xa76>
 8012350:	2200      	movs	r2, #0
 8012352:	4b6b      	ldr	r3, [pc, #428]	; (8012500 <_strtod_l+0xbe8>)
 8012354:	4640      	mov	r0, r8
 8012356:	4649      	mov	r1, r9
 8012358:	f7ee fba4 	bl	8000aa4 <__aeabi_dcmplt>
 801235c:	b9d0      	cbnz	r0, 8012394 <_strtod_l+0xa7c>
 801235e:	4640      	mov	r0, r8
 8012360:	4649      	mov	r1, r9
 8012362:	2200      	movs	r2, #0
 8012364:	4b6a      	ldr	r3, [pc, #424]	; (8012510 <_strtod_l+0xbf8>)
 8012366:	f7ee f92b 	bl	80005c0 <__aeabi_dmul>
 801236a:	4680      	mov	r8, r0
 801236c:	4689      	mov	r9, r1
 801236e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012372:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8012376:	9315      	str	r3, [sp, #84]	; 0x54
 8012378:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801237c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012380:	e79d      	b.n	80122be <_strtod_l+0x9a6>
 8012382:	f1ba 0f01 	cmp.w	sl, #1
 8012386:	d102      	bne.n	801238e <_strtod_l+0xa76>
 8012388:	2f00      	cmp	r7, #0
 801238a:	f43f ad86 	beq.w	8011e9a <_strtod_l+0x582>
 801238e:	2200      	movs	r2, #0
 8012390:	4b60      	ldr	r3, [pc, #384]	; (8012514 <_strtod_l+0xbfc>)
 8012392:	e78e      	b.n	80122b2 <_strtod_l+0x99a>
 8012394:	f04f 0800 	mov.w	r8, #0
 8012398:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8012510 <_strtod_l+0xbf8>
 801239c:	e7e7      	b.n	801236e <_strtod_l+0xa56>
 801239e:	4b5c      	ldr	r3, [pc, #368]	; (8012510 <_strtod_l+0xbf8>)
 80123a0:	4640      	mov	r0, r8
 80123a2:	4649      	mov	r1, r9
 80123a4:	2200      	movs	r2, #0
 80123a6:	f7ee f90b 	bl	80005c0 <__aeabi_dmul>
 80123aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123ac:	4680      	mov	r8, r0
 80123ae:	4689      	mov	r9, r1
 80123b0:	b933      	cbnz	r3, 80123c0 <_strtod_l+0xaa8>
 80123b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123b6:	900e      	str	r0, [sp, #56]	; 0x38
 80123b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80123ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80123be:	e7dd      	b.n	801237c <_strtod_l+0xa64>
 80123c0:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80123c4:	e7f9      	b.n	80123ba <_strtod_l+0xaa2>
 80123c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80123ca:	9b04      	ldr	r3, [sp, #16]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d1a8      	bne.n	8012322 <_strtod_l+0xa0a>
 80123d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80123d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123d6:	0d1b      	lsrs	r3, r3, #20
 80123d8:	051b      	lsls	r3, r3, #20
 80123da:	429a      	cmp	r2, r3
 80123dc:	d1a1      	bne.n	8012322 <_strtod_l+0xa0a>
 80123de:	4640      	mov	r0, r8
 80123e0:	4649      	mov	r1, r9
 80123e2:	f7ee fc4d 	bl	8000c80 <__aeabi_d2lz>
 80123e6:	f7ee f8bd 	bl	8000564 <__aeabi_l2d>
 80123ea:	4602      	mov	r2, r0
 80123ec:	460b      	mov	r3, r1
 80123ee:	4640      	mov	r0, r8
 80123f0:	4649      	mov	r1, r9
 80123f2:	f7ed ff2d 	bl	8000250 <__aeabi_dsub>
 80123f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80123fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80123fc:	4680      	mov	r8, r0
 80123fe:	ea43 030a 	orr.w	r3, r3, sl
 8012402:	4689      	mov	r9, r1
 8012404:	4313      	orrs	r3, r2
 8012406:	d055      	beq.n	80124b4 <_strtod_l+0xb9c>
 8012408:	a335      	add	r3, pc, #212	; (adr r3, 80124e0 <_strtod_l+0xbc8>)
 801240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240e:	f7ee fb49 	bl	8000aa4 <__aeabi_dcmplt>
 8012412:	2800      	cmp	r0, #0
 8012414:	f47f acd3 	bne.w	8011dbe <_strtod_l+0x4a6>
 8012418:	4640      	mov	r0, r8
 801241a:	4649      	mov	r1, r9
 801241c:	a332      	add	r3, pc, #200	; (adr r3, 80124e8 <_strtod_l+0xbd0>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	f7ee fb5d 	bl	8000ae0 <__aeabi_dcmpgt>
 8012426:	2800      	cmp	r0, #0
 8012428:	f43f af7b 	beq.w	8012322 <_strtod_l+0xa0a>
 801242c:	e4c7      	b.n	8011dbe <_strtod_l+0x4a6>
 801242e:	9b04      	ldr	r3, [sp, #16]
 8012430:	b333      	cbz	r3, 8012480 <_strtod_l+0xb68>
 8012432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012434:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012438:	d822      	bhi.n	8012480 <_strtod_l+0xb68>
 801243a:	4640      	mov	r0, r8
 801243c:	4649      	mov	r1, r9
 801243e:	a32c      	add	r3, pc, #176	; (adr r3, 80124f0 <_strtod_l+0xbd8>)
 8012440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012444:	f7ee fb38 	bl	8000ab8 <__aeabi_dcmple>
 8012448:	b1a0      	cbz	r0, 8012474 <_strtod_l+0xb5c>
 801244a:	4649      	mov	r1, r9
 801244c:	4640      	mov	r0, r8
 801244e:	f7ee fb8f 	bl	8000b70 <__aeabi_d2uiz>
 8012452:	2801      	cmp	r0, #1
 8012454:	bf38      	it	cc
 8012456:	2001      	movcc	r0, #1
 8012458:	f7ee f838 	bl	80004cc <__aeabi_ui2d>
 801245c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801245e:	4680      	mov	r8, r0
 8012460:	4689      	mov	r9, r1
 8012462:	bb23      	cbnz	r3, 80124ae <_strtod_l+0xb96>
 8012464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012468:	9010      	str	r0, [sp, #64]	; 0x40
 801246a:	9311      	str	r3, [sp, #68]	; 0x44
 801246c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012470:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012478:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801247c:	1a9b      	subs	r3, r3, r2
 801247e:	9309      	str	r3, [sp, #36]	; 0x24
 8012480:	eeb0 0a48 	vmov.f32	s0, s16
 8012484:	eef0 0a68 	vmov.f32	s1, s17
 8012488:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801248c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012490:	f001 fe72 	bl	8014178 <__ulp>
 8012494:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012498:	ec53 2b10 	vmov	r2, r3, d0
 801249c:	f7ee f890 	bl	80005c0 <__aeabi_dmul>
 80124a0:	ec53 2b18 	vmov	r2, r3, d8
 80124a4:	f7ed fed6 	bl	8000254 <__adddf3>
 80124a8:	4682      	mov	sl, r0
 80124aa:	468b      	mov	fp, r1
 80124ac:	e78d      	b.n	80123ca <_strtod_l+0xab2>
 80124ae:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80124b2:	e7db      	b.n	801246c <_strtod_l+0xb54>
 80124b4:	a310      	add	r3, pc, #64	; (adr r3, 80124f8 <_strtod_l+0xbe0>)
 80124b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ba:	f7ee faf3 	bl	8000aa4 <__aeabi_dcmplt>
 80124be:	e7b2      	b.n	8012426 <_strtod_l+0xb0e>
 80124c0:	2300      	movs	r3, #0
 80124c2:	930a      	str	r3, [sp, #40]	; 0x28
 80124c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80124c8:	6013      	str	r3, [r2, #0]
 80124ca:	f7ff ba6d 	b.w	80119a8 <_strtod_l+0x90>
 80124ce:	2a65      	cmp	r2, #101	; 0x65
 80124d0:	f43f ab61 	beq.w	8011b96 <_strtod_l+0x27e>
 80124d4:	2a45      	cmp	r2, #69	; 0x45
 80124d6:	f43f ab5e 	beq.w	8011b96 <_strtod_l+0x27e>
 80124da:	2301      	movs	r3, #1
 80124dc:	f7ff bb96 	b.w	8011c0c <_strtod_l+0x2f4>
 80124e0:	94a03595 	.word	0x94a03595
 80124e4:	3fdfffff 	.word	0x3fdfffff
 80124e8:	35afe535 	.word	0x35afe535
 80124ec:	3fe00000 	.word	0x3fe00000
 80124f0:	ffc00000 	.word	0xffc00000
 80124f4:	41dfffff 	.word	0x41dfffff
 80124f8:	94a03595 	.word	0x94a03595
 80124fc:	3fcfffff 	.word	0x3fcfffff
 8012500:	3ff00000 	.word	0x3ff00000
 8012504:	7ff00000 	.word	0x7ff00000
 8012508:	7fe00000 	.word	0x7fe00000
 801250c:	7c9fffff 	.word	0x7c9fffff
 8012510:	3fe00000 	.word	0x3fe00000
 8012514:	bff00000 	.word	0xbff00000
 8012518:	7fefffff 	.word	0x7fefffff

0801251c <_strtod_r>:
 801251c:	4b01      	ldr	r3, [pc, #4]	; (8012524 <_strtod_r+0x8>)
 801251e:	f7ff b9fb 	b.w	8011918 <_strtod_l>
 8012522:	bf00      	nop
 8012524:	20000168 	.word	0x20000168

08012528 <_strtol_l.constprop.0>:
 8012528:	2b01      	cmp	r3, #1
 801252a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801252e:	d001      	beq.n	8012534 <_strtol_l.constprop.0+0xc>
 8012530:	2b24      	cmp	r3, #36	; 0x24
 8012532:	d906      	bls.n	8012542 <_strtol_l.constprop.0+0x1a>
 8012534:	f7fe f9c2 	bl	80108bc <__errno>
 8012538:	2316      	movs	r3, #22
 801253a:	6003      	str	r3, [r0, #0]
 801253c:	2000      	movs	r0, #0
 801253e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012542:	460d      	mov	r5, r1
 8012544:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8012628 <_strtol_l.constprop.0+0x100>
 8012548:	462e      	mov	r6, r5
 801254a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801254e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012552:	f017 0708 	ands.w	r7, r7, #8
 8012556:	d1f7      	bne.n	8012548 <_strtol_l.constprop.0+0x20>
 8012558:	2c2d      	cmp	r4, #45	; 0x2d
 801255a:	d132      	bne.n	80125c2 <_strtol_l.constprop.0+0x9a>
 801255c:	782c      	ldrb	r4, [r5, #0]
 801255e:	2701      	movs	r7, #1
 8012560:	1cb5      	adds	r5, r6, #2
 8012562:	2b00      	cmp	r3, #0
 8012564:	d05b      	beq.n	801261e <_strtol_l.constprop.0+0xf6>
 8012566:	2b10      	cmp	r3, #16
 8012568:	d109      	bne.n	801257e <_strtol_l.constprop.0+0x56>
 801256a:	2c30      	cmp	r4, #48	; 0x30
 801256c:	d107      	bne.n	801257e <_strtol_l.constprop.0+0x56>
 801256e:	782c      	ldrb	r4, [r5, #0]
 8012570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012574:	2c58      	cmp	r4, #88	; 0x58
 8012576:	d14d      	bne.n	8012614 <_strtol_l.constprop.0+0xec>
 8012578:	786c      	ldrb	r4, [r5, #1]
 801257a:	2310      	movs	r3, #16
 801257c:	3502      	adds	r5, #2
 801257e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012582:	f04f 0c00 	mov.w	ip, #0
 8012586:	f108 38ff 	add.w	r8, r8, #4294967295
 801258a:	4666      	mov	r6, ip
 801258c:	fbb8 f9f3 	udiv	r9, r8, r3
 8012590:	fb03 8a19 	mls	sl, r3, r9, r8
 8012594:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012598:	f1be 0f09 	cmp.w	lr, #9
 801259c:	d816      	bhi.n	80125cc <_strtol_l.constprop.0+0xa4>
 801259e:	4674      	mov	r4, lr
 80125a0:	42a3      	cmp	r3, r4
 80125a2:	dd24      	ble.n	80125ee <_strtol_l.constprop.0+0xc6>
 80125a4:	f1bc 0f00 	cmp.w	ip, #0
 80125a8:	db1e      	blt.n	80125e8 <_strtol_l.constprop.0+0xc0>
 80125aa:	45b1      	cmp	r9, r6
 80125ac:	d31c      	bcc.n	80125e8 <_strtol_l.constprop.0+0xc0>
 80125ae:	d101      	bne.n	80125b4 <_strtol_l.constprop.0+0x8c>
 80125b0:	45a2      	cmp	sl, r4
 80125b2:	db19      	blt.n	80125e8 <_strtol_l.constprop.0+0xc0>
 80125b4:	fb06 4603 	mla	r6, r6, r3, r4
 80125b8:	f04f 0c01 	mov.w	ip, #1
 80125bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125c0:	e7e8      	b.n	8012594 <_strtol_l.constprop.0+0x6c>
 80125c2:	2c2b      	cmp	r4, #43	; 0x2b
 80125c4:	bf04      	itt	eq
 80125c6:	782c      	ldrbeq	r4, [r5, #0]
 80125c8:	1cb5      	addeq	r5, r6, #2
 80125ca:	e7ca      	b.n	8012562 <_strtol_l.constprop.0+0x3a>
 80125cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80125d0:	f1be 0f19 	cmp.w	lr, #25
 80125d4:	d801      	bhi.n	80125da <_strtol_l.constprop.0+0xb2>
 80125d6:	3c37      	subs	r4, #55	; 0x37
 80125d8:	e7e2      	b.n	80125a0 <_strtol_l.constprop.0+0x78>
 80125da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80125de:	f1be 0f19 	cmp.w	lr, #25
 80125e2:	d804      	bhi.n	80125ee <_strtol_l.constprop.0+0xc6>
 80125e4:	3c57      	subs	r4, #87	; 0x57
 80125e6:	e7db      	b.n	80125a0 <_strtol_l.constprop.0+0x78>
 80125e8:	f04f 3cff 	mov.w	ip, #4294967295
 80125ec:	e7e6      	b.n	80125bc <_strtol_l.constprop.0+0x94>
 80125ee:	f1bc 0f00 	cmp.w	ip, #0
 80125f2:	da05      	bge.n	8012600 <_strtol_l.constprop.0+0xd8>
 80125f4:	2322      	movs	r3, #34	; 0x22
 80125f6:	4646      	mov	r6, r8
 80125f8:	6003      	str	r3, [r0, #0]
 80125fa:	b942      	cbnz	r2, 801260e <_strtol_l.constprop.0+0xe6>
 80125fc:	4630      	mov	r0, r6
 80125fe:	e79e      	b.n	801253e <_strtol_l.constprop.0+0x16>
 8012600:	b107      	cbz	r7, 8012604 <_strtol_l.constprop.0+0xdc>
 8012602:	4276      	negs	r6, r6
 8012604:	2a00      	cmp	r2, #0
 8012606:	d0f9      	beq.n	80125fc <_strtol_l.constprop.0+0xd4>
 8012608:	f1bc 0f00 	cmp.w	ip, #0
 801260c:	d000      	beq.n	8012610 <_strtol_l.constprop.0+0xe8>
 801260e:	1e69      	subs	r1, r5, #1
 8012610:	6011      	str	r1, [r2, #0]
 8012612:	e7f3      	b.n	80125fc <_strtol_l.constprop.0+0xd4>
 8012614:	2430      	movs	r4, #48	; 0x30
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1b1      	bne.n	801257e <_strtol_l.constprop.0+0x56>
 801261a:	2308      	movs	r3, #8
 801261c:	e7af      	b.n	801257e <_strtol_l.constprop.0+0x56>
 801261e:	2c30      	cmp	r4, #48	; 0x30
 8012620:	d0a5      	beq.n	801256e <_strtol_l.constprop.0+0x46>
 8012622:	230a      	movs	r3, #10
 8012624:	e7ab      	b.n	801257e <_strtol_l.constprop.0+0x56>
 8012626:	bf00      	nop
 8012628:	080153c1 	.word	0x080153c1

0801262c <_strtol_r>:
 801262c:	f7ff bf7c 	b.w	8012528 <_strtol_l.constprop.0>

08012630 <quorem>:
 8012630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012634:	6903      	ldr	r3, [r0, #16]
 8012636:	4607      	mov	r7, r0
 8012638:	690c      	ldr	r4, [r1, #16]
 801263a:	42a3      	cmp	r3, r4
 801263c:	f2c0 8087 	blt.w	801274e <quorem+0x11e>
 8012640:	3c01      	subs	r4, #1
 8012642:	f100 0514 	add.w	r5, r0, #20
 8012646:	f101 0814 	add.w	r8, r1, #20
 801264a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801264e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012652:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012656:	9301      	str	r3, [sp, #4]
 8012658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801265c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012660:	3301      	adds	r3, #1
 8012662:	429a      	cmp	r2, r3
 8012664:	fbb2 f6f3 	udiv	r6, r2, r3
 8012668:	d335      	bcc.n	80126d6 <quorem+0xa6>
 801266a:	f04f 0e00 	mov.w	lr, #0
 801266e:	4640      	mov	r0, r8
 8012670:	46ac      	mov	ip, r5
 8012672:	46f2      	mov	sl, lr
 8012674:	f850 2b04 	ldr.w	r2, [r0], #4
 8012678:	b293      	uxth	r3, r2
 801267a:	4581      	cmp	r9, r0
 801267c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8012680:	fb06 e303 	mla	r3, r6, r3, lr
 8012684:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012688:	b29b      	uxth	r3, r3
 801268a:	fb06 e202 	mla	r2, r6, r2, lr
 801268e:	ebaa 0303 	sub.w	r3, sl, r3
 8012692:	f8dc a000 	ldr.w	sl, [ip]
 8012696:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801269a:	fa1f fa8a 	uxth.w	sl, sl
 801269e:	b292      	uxth	r2, r2
 80126a0:	4453      	add	r3, sl
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	f8dc 3000 	ldr.w	r3, [ip]
 80126a8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 80126ac:	9b00      	ldr	r3, [sp, #0]
 80126ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80126b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80126be:	f84c 3b04 	str.w	r3, [ip], #4
 80126c2:	d2d7      	bcs.n	8012674 <quorem+0x44>
 80126c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80126c8:	b92b      	cbnz	r3, 80126d6 <quorem+0xa6>
 80126ca:	9b01      	ldr	r3, [sp, #4]
 80126cc:	3b04      	subs	r3, #4
 80126ce:	429d      	cmp	r5, r3
 80126d0:	461a      	mov	r2, r3
 80126d2:	d330      	bcc.n	8012736 <quorem+0x106>
 80126d4:	613c      	str	r4, [r7, #16]
 80126d6:	4638      	mov	r0, r7
 80126d8:	f001 fca2 	bl	8014020 <__mcmp>
 80126dc:	2800      	cmp	r0, #0
 80126de:	db26      	blt.n	801272e <quorem+0xfe>
 80126e0:	3601      	adds	r6, #1
 80126e2:	4628      	mov	r0, r5
 80126e4:	f04f 0c00 	mov.w	ip, #0
 80126e8:	f858 1b04 	ldr.w	r1, [r8], #4
 80126ec:	f8d0 e000 	ldr.w	lr, [r0]
 80126f0:	b28b      	uxth	r3, r1
 80126f2:	45c1      	cmp	r9, r8
 80126f4:	fa1f f28e 	uxth.w	r2, lr
 80126f8:	ebac 0303 	sub.w	r3, ip, r3
 80126fc:	4413      	add	r3, r2
 80126fe:	ea4f 4211 	mov.w	r2, r1, lsr #16
 8012702:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801270a:	b29b      	uxth	r3, r3
 801270c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012714:	f840 3b04 	str.w	r3, [r0], #4
 8012718:	d2e6      	bcs.n	80126e8 <quorem+0xb8>
 801271a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801271e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012722:	b922      	cbnz	r2, 801272e <quorem+0xfe>
 8012724:	3b04      	subs	r3, #4
 8012726:	429d      	cmp	r5, r3
 8012728:	461a      	mov	r2, r3
 801272a:	d30a      	bcc.n	8012742 <quorem+0x112>
 801272c:	613c      	str	r4, [r7, #16]
 801272e:	4630      	mov	r0, r6
 8012730:	b003      	add	sp, #12
 8012732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012736:	6812      	ldr	r2, [r2, #0]
 8012738:	3b04      	subs	r3, #4
 801273a:	2a00      	cmp	r2, #0
 801273c:	d1ca      	bne.n	80126d4 <quorem+0xa4>
 801273e:	3c01      	subs	r4, #1
 8012740:	e7c5      	b.n	80126ce <quorem+0x9e>
 8012742:	6812      	ldr	r2, [r2, #0]
 8012744:	3b04      	subs	r3, #4
 8012746:	2a00      	cmp	r2, #0
 8012748:	d1f0      	bne.n	801272c <quorem+0xfc>
 801274a:	3c01      	subs	r4, #1
 801274c:	e7eb      	b.n	8012726 <quorem+0xf6>
 801274e:	2000      	movs	r0, #0
 8012750:	e7ee      	b.n	8012730 <quorem+0x100>
 8012752:	0000      	movs	r0, r0
 8012754:	0000      	movs	r0, r0
	...

08012758 <_dtoa_r>:
 8012758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801275e:	4604      	mov	r4, r0
 8012760:	ee10 aa10 	vmov	sl, s0
 8012764:	ed2d 8b04 	vpush	{d8-d9}
 8012768:	b093      	sub	sp, #76	; 0x4c
 801276a:	ec57 6b10 	vmov	r6, r7, d0
 801276e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012772:	46bb      	mov	fp, r7
 8012774:	9106      	str	r1, [sp, #24]
 8012776:	9209      	str	r2, [sp, #36]	; 0x24
 8012778:	930c      	str	r3, [sp, #48]	; 0x30
 801277a:	b975      	cbnz	r5, 801279a <_dtoa_r+0x42>
 801277c:	2010      	movs	r0, #16
 801277e:	f7fe f8c7 	bl	8010910 <malloc>
 8012782:	4602      	mov	r2, r0
 8012784:	6260      	str	r0, [r4, #36]	; 0x24
 8012786:	b920      	cbnz	r0, 8012792 <_dtoa_r+0x3a>
 8012788:	4ba7      	ldr	r3, [pc, #668]	; (8012a28 <_dtoa_r+0x2d0>)
 801278a:	21ea      	movs	r1, #234	; 0xea
 801278c:	48a7      	ldr	r0, [pc, #668]	; (8012a2c <_dtoa_r+0x2d4>)
 801278e:	f001 ffd3 	bl	8014738 <__assert_func>
 8012792:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012796:	6005      	str	r5, [r0, #0]
 8012798:	60c5      	str	r5, [r0, #12]
 801279a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801279c:	6819      	ldr	r1, [r3, #0]
 801279e:	b151      	cbz	r1, 80127b6 <_dtoa_r+0x5e>
 80127a0:	685a      	ldr	r2, [r3, #4]
 80127a2:	2301      	movs	r3, #1
 80127a4:	4620      	mov	r0, r4
 80127a6:	4093      	lsls	r3, r2
 80127a8:	604a      	str	r2, [r1, #4]
 80127aa:	608b      	str	r3, [r1, #8]
 80127ac:	f001 f9ac 	bl	8013b08 <_Bfree>
 80127b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127b2:	2200      	movs	r2, #0
 80127b4:	601a      	str	r2, [r3, #0]
 80127b6:	1e3b      	subs	r3, r7, #0
 80127b8:	bfad      	iteet	ge
 80127ba:	2300      	movge	r3, #0
 80127bc:	2201      	movlt	r2, #1
 80127be:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80127c2:	f8c8 3000 	strge.w	r3, [r8]
 80127c6:	4b9a      	ldr	r3, [pc, #616]	; (8012a30 <_dtoa_r+0x2d8>)
 80127c8:	bfb8      	it	lt
 80127ca:	f8c8 2000 	strlt.w	r2, [r8]
 80127ce:	ea33 030b 	bics.w	r3, r3, fp
 80127d2:	d11b      	bne.n	801280c <_dtoa_r+0xb4>
 80127d4:	f242 730f 	movw	r3, #9999	; 0x270f
 80127d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127da:	6013      	str	r3, [r2, #0]
 80127dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80127e0:	4333      	orrs	r3, r6
 80127e2:	f000 858f 	beq.w	8013304 <_dtoa_r+0xbac>
 80127e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127e8:	b963      	cbnz	r3, 8012804 <_dtoa_r+0xac>
 80127ea:	4b92      	ldr	r3, [pc, #584]	; (8012a34 <_dtoa_r+0x2dc>)
 80127ec:	e022      	b.n	8012834 <_dtoa_r+0xdc>
 80127ee:	4b92      	ldr	r3, [pc, #584]	; (8012a38 <_dtoa_r+0x2e0>)
 80127f0:	9301      	str	r3, [sp, #4]
 80127f2:	3308      	adds	r3, #8
 80127f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80127f6:	6013      	str	r3, [r2, #0]
 80127f8:	9801      	ldr	r0, [sp, #4]
 80127fa:	b013      	add	sp, #76	; 0x4c
 80127fc:	ecbd 8b04 	vpop	{d8-d9}
 8012800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012804:	4b8b      	ldr	r3, [pc, #556]	; (8012a34 <_dtoa_r+0x2dc>)
 8012806:	9301      	str	r3, [sp, #4]
 8012808:	3303      	adds	r3, #3
 801280a:	e7f3      	b.n	80127f4 <_dtoa_r+0x9c>
 801280c:	2200      	movs	r2, #0
 801280e:	2300      	movs	r3, #0
 8012810:	4650      	mov	r0, sl
 8012812:	4659      	mov	r1, fp
 8012814:	f7ee f93c 	bl	8000a90 <__aeabi_dcmpeq>
 8012818:	4680      	mov	r8, r0
 801281a:	ec4b ab19 	vmov	d9, sl, fp
 801281e:	b158      	cbz	r0, 8012838 <_dtoa_r+0xe0>
 8012820:	2301      	movs	r3, #1
 8012822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012824:	6013      	str	r3, [r2, #0]
 8012826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012828:	2b00      	cmp	r3, #0
 801282a:	f000 8568 	beq.w	80132fe <_dtoa_r+0xba6>
 801282e:	4883      	ldr	r0, [pc, #524]	; (8012a3c <_dtoa_r+0x2e4>)
 8012830:	6018      	str	r0, [r3, #0]
 8012832:	1e43      	subs	r3, r0, #1
 8012834:	9301      	str	r3, [sp, #4]
 8012836:	e7df      	b.n	80127f8 <_dtoa_r+0xa0>
 8012838:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801283c:	aa10      	add	r2, sp, #64	; 0x40
 801283e:	a911      	add	r1, sp, #68	; 0x44
 8012840:	4620      	mov	r0, r4
 8012842:	ec4b ab10 	vmov	d0, sl, fp
 8012846:	f001 fd11 	bl	801426c <__d2b>
 801284a:	ee08 0a10 	vmov	s16, r0
 801284e:	2d00      	cmp	r5, #0
 8012850:	f000 8082 	beq.w	8012958 <_dtoa_r+0x200>
 8012854:	ee19 3a90 	vmov	r3, s19
 8012858:	4656      	mov	r6, sl
 801285a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801285e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012866:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801286a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801286e:	2200      	movs	r2, #0
 8012870:	4b73      	ldr	r3, [pc, #460]	; (8012a40 <_dtoa_r+0x2e8>)
 8012872:	4630      	mov	r0, r6
 8012874:	4639      	mov	r1, r7
 8012876:	f7ed fceb 	bl	8000250 <__aeabi_dsub>
 801287a:	a365      	add	r3, pc, #404	; (adr r3, 8012a10 <_dtoa_r+0x2b8>)
 801287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012880:	f7ed fe9e 	bl	80005c0 <__aeabi_dmul>
 8012884:	a364      	add	r3, pc, #400	; (adr r3, 8012a18 <_dtoa_r+0x2c0>)
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	f7ed fce3 	bl	8000254 <__adddf3>
 801288e:	4606      	mov	r6, r0
 8012890:	460f      	mov	r7, r1
 8012892:	4628      	mov	r0, r5
 8012894:	f7ed fe2a 	bl	80004ec <__aeabi_i2d>
 8012898:	a361      	add	r3, pc, #388	; (adr r3, 8012a20 <_dtoa_r+0x2c8>)
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	f7ed fe8f 	bl	80005c0 <__aeabi_dmul>
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	4630      	mov	r0, r6
 80128a8:	4639      	mov	r1, r7
 80128aa:	f7ed fcd3 	bl	8000254 <__adddf3>
 80128ae:	4606      	mov	r6, r0
 80128b0:	460f      	mov	r7, r1
 80128b2:	f7ee f935 	bl	8000b20 <__aeabi_d2iz>
 80128b6:	2200      	movs	r2, #0
 80128b8:	9000      	str	r0, [sp, #0]
 80128ba:	2300      	movs	r3, #0
 80128bc:	4630      	mov	r0, r6
 80128be:	4639      	mov	r1, r7
 80128c0:	f7ee f8f0 	bl	8000aa4 <__aeabi_dcmplt>
 80128c4:	b150      	cbz	r0, 80128dc <_dtoa_r+0x184>
 80128c6:	9800      	ldr	r0, [sp, #0]
 80128c8:	f7ed fe10 	bl	80004ec <__aeabi_i2d>
 80128cc:	4632      	mov	r2, r6
 80128ce:	463b      	mov	r3, r7
 80128d0:	f7ee f8de 	bl	8000a90 <__aeabi_dcmpeq>
 80128d4:	b910      	cbnz	r0, 80128dc <_dtoa_r+0x184>
 80128d6:	9b00      	ldr	r3, [sp, #0]
 80128d8:	3b01      	subs	r3, #1
 80128da:	9300      	str	r3, [sp, #0]
 80128dc:	9b00      	ldr	r3, [sp, #0]
 80128de:	2b16      	cmp	r3, #22
 80128e0:	d859      	bhi.n	8012996 <_dtoa_r+0x23e>
 80128e2:	9a00      	ldr	r2, [sp, #0]
 80128e4:	4b57      	ldr	r3, [pc, #348]	; (8012a44 <_dtoa_r+0x2ec>)
 80128e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128ea:	ec51 0b19 	vmov	r0, r1, d9
 80128ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f2:	f7ee f8d7 	bl	8000aa4 <__aeabi_dcmplt>
 80128f6:	2800      	cmp	r0, #0
 80128f8:	d04f      	beq.n	801299a <_dtoa_r+0x242>
 80128fa:	9b00      	ldr	r3, [sp, #0]
 80128fc:	3b01      	subs	r3, #1
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	2300      	movs	r3, #0
 8012902:	930b      	str	r3, [sp, #44]	; 0x2c
 8012904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012906:	1b5d      	subs	r5, r3, r5
 8012908:	1e6b      	subs	r3, r5, #1
 801290a:	9305      	str	r3, [sp, #20]
 801290c:	bf49      	itett	mi
 801290e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012912:	2300      	movpl	r3, #0
 8012914:	9304      	strmi	r3, [sp, #16]
 8012916:	2300      	movmi	r3, #0
 8012918:	bf54      	ite	pl
 801291a:	9304      	strpl	r3, [sp, #16]
 801291c:	9305      	strmi	r3, [sp, #20]
 801291e:	9b00      	ldr	r3, [sp, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	db3c      	blt.n	801299e <_dtoa_r+0x246>
 8012924:	9b05      	ldr	r3, [sp, #20]
 8012926:	9a00      	ldr	r2, [sp, #0]
 8012928:	4413      	add	r3, r2
 801292a:	920a      	str	r2, [sp, #40]	; 0x28
 801292c:	9305      	str	r3, [sp, #20]
 801292e:	2300      	movs	r3, #0
 8012930:	9307      	str	r3, [sp, #28]
 8012932:	9b06      	ldr	r3, [sp, #24]
 8012934:	2b09      	cmp	r3, #9
 8012936:	f200 8089 	bhi.w	8012a4c <_dtoa_r+0x2f4>
 801293a:	2b05      	cmp	r3, #5
 801293c:	bfc5      	ittet	gt
 801293e:	3b04      	subgt	r3, #4
 8012940:	2500      	movgt	r5, #0
 8012942:	2501      	movle	r5, #1
 8012944:	9306      	strgt	r3, [sp, #24]
 8012946:	9b06      	ldr	r3, [sp, #24]
 8012948:	3b02      	subs	r3, #2
 801294a:	2b03      	cmp	r3, #3
 801294c:	f200 8089 	bhi.w	8012a62 <_dtoa_r+0x30a>
 8012950:	e8df f003 	tbb	[pc, r3]
 8012954:	5a393b2e 	.word	0x5a393b2e
 8012958:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801295c:	441d      	add	r5, r3
 801295e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012962:	2b20      	cmp	r3, #32
 8012964:	bfc6      	itte	gt
 8012966:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801296a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801296e:	f1c3 0320 	rsble	r3, r3, #32
 8012972:	f105 35ff 	add.w	r5, r5, #4294967295
 8012976:	bfc5      	ittet	gt
 8012978:	fa0b f303 	lslgt.w	r3, fp, r3
 801297c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012980:	fa06 f003 	lslle.w	r0, r6, r3
 8012984:	4318      	orrgt	r0, r3
 8012986:	f7ed fda1 	bl	80004cc <__aeabi_ui2d>
 801298a:	2301      	movs	r3, #1
 801298c:	4606      	mov	r6, r0
 801298e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012992:	930e      	str	r3, [sp, #56]	; 0x38
 8012994:	e76b      	b.n	801286e <_dtoa_r+0x116>
 8012996:	2301      	movs	r3, #1
 8012998:	e7b3      	b.n	8012902 <_dtoa_r+0x1aa>
 801299a:	900b      	str	r0, [sp, #44]	; 0x2c
 801299c:	e7b2      	b.n	8012904 <_dtoa_r+0x1ac>
 801299e:	9b04      	ldr	r3, [sp, #16]
 80129a0:	9a00      	ldr	r2, [sp, #0]
 80129a2:	1a9b      	subs	r3, r3, r2
 80129a4:	9304      	str	r3, [sp, #16]
 80129a6:	4253      	negs	r3, r2
 80129a8:	9307      	str	r3, [sp, #28]
 80129aa:	2300      	movs	r3, #0
 80129ac:	930a      	str	r3, [sp, #40]	; 0x28
 80129ae:	e7c0      	b.n	8012932 <_dtoa_r+0x1da>
 80129b0:	2300      	movs	r3, #0
 80129b2:	9308      	str	r3, [sp, #32]
 80129b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	dc56      	bgt.n	8012a68 <_dtoa_r+0x310>
 80129ba:	2301      	movs	r3, #1
 80129bc:	461a      	mov	r2, r3
 80129be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80129c2:	9209      	str	r2, [sp, #36]	; 0x24
 80129c4:	e00c      	b.n	80129e0 <_dtoa_r+0x288>
 80129c6:	2301      	movs	r3, #1
 80129c8:	e7f3      	b.n	80129b2 <_dtoa_r+0x25a>
 80129ca:	2300      	movs	r3, #0
 80129cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129ce:	9308      	str	r3, [sp, #32]
 80129d0:	9b00      	ldr	r3, [sp, #0]
 80129d2:	4413      	add	r3, r2
 80129d4:	9302      	str	r3, [sp, #8]
 80129d6:	3301      	adds	r3, #1
 80129d8:	2b01      	cmp	r3, #1
 80129da:	9303      	str	r3, [sp, #12]
 80129dc:	bfb8      	it	lt
 80129de:	2301      	movlt	r3, #1
 80129e0:	2200      	movs	r2, #0
 80129e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80129e4:	6042      	str	r2, [r0, #4]
 80129e6:	2204      	movs	r2, #4
 80129e8:	f102 0614 	add.w	r6, r2, #20
 80129ec:	6841      	ldr	r1, [r0, #4]
 80129ee:	429e      	cmp	r6, r3
 80129f0:	d93e      	bls.n	8012a70 <_dtoa_r+0x318>
 80129f2:	4620      	mov	r0, r4
 80129f4:	f001 f848 	bl	8013a88 <_Balloc>
 80129f8:	9001      	str	r0, [sp, #4]
 80129fa:	2800      	cmp	r0, #0
 80129fc:	d13c      	bne.n	8012a78 <_dtoa_r+0x320>
 80129fe:	4b12      	ldr	r3, [pc, #72]	; (8012a48 <_dtoa_r+0x2f0>)
 8012a00:	4602      	mov	r2, r0
 8012a02:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012a06:	e6c1      	b.n	801278c <_dtoa_r+0x34>
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e7df      	b.n	80129cc <_dtoa_r+0x274>
 8012a0c:	f3af 8000 	nop.w
 8012a10:	636f4361 	.word	0x636f4361
 8012a14:	3fd287a7 	.word	0x3fd287a7
 8012a18:	8b60c8b3 	.word	0x8b60c8b3
 8012a1c:	3fc68a28 	.word	0x3fc68a28
 8012a20:	509f79fb 	.word	0x509f79fb
 8012a24:	3fd34413 	.word	0x3fd34413
 8012a28:	080154ce 	.word	0x080154ce
 8012a2c:	080154e5 	.word	0x080154e5
 8012a30:	7ff00000 	.word	0x7ff00000
 8012a34:	080154ca 	.word	0x080154ca
 8012a38:	080154c1 	.word	0x080154c1
 8012a3c:	08015345 	.word	0x08015345
 8012a40:	3ff80000 	.word	0x3ff80000
 8012a44:	08015650 	.word	0x08015650
 8012a48:	08015540 	.word	0x08015540
 8012a4c:	2501      	movs	r5, #1
 8012a4e:	2300      	movs	r3, #0
 8012a50:	9508      	str	r5, [sp, #32]
 8012a52:	9306      	str	r3, [sp, #24]
 8012a54:	f04f 33ff 	mov.w	r3, #4294967295
 8012a58:	2200      	movs	r2, #0
 8012a5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a5e:	2312      	movs	r3, #18
 8012a60:	e7af      	b.n	80129c2 <_dtoa_r+0x26a>
 8012a62:	2301      	movs	r3, #1
 8012a64:	9308      	str	r3, [sp, #32]
 8012a66:	e7f5      	b.n	8012a54 <_dtoa_r+0x2fc>
 8012a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a6e:	e7b7      	b.n	80129e0 <_dtoa_r+0x288>
 8012a70:	3101      	adds	r1, #1
 8012a72:	0052      	lsls	r2, r2, #1
 8012a74:	6041      	str	r1, [r0, #4]
 8012a76:	e7b7      	b.n	80129e8 <_dtoa_r+0x290>
 8012a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a7a:	9a01      	ldr	r2, [sp, #4]
 8012a7c:	601a      	str	r2, [r3, #0]
 8012a7e:	9b03      	ldr	r3, [sp, #12]
 8012a80:	2b0e      	cmp	r3, #14
 8012a82:	f200 809d 	bhi.w	8012bc0 <_dtoa_r+0x468>
 8012a86:	2d00      	cmp	r5, #0
 8012a88:	f000 809a 	beq.w	8012bc0 <_dtoa_r+0x468>
 8012a8c:	9b00      	ldr	r3, [sp, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	dd32      	ble.n	8012af8 <_dtoa_r+0x3a0>
 8012a92:	f003 030f 	and.w	r3, r3, #15
 8012a96:	4ab6      	ldr	r2, [pc, #728]	; (8012d70 <_dtoa_r+0x618>)
 8012a98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012aa0:	9b00      	ldr	r3, [sp, #0]
 8012aa2:	05d8      	lsls	r0, r3, #23
 8012aa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012aa8:	d516      	bpl.n	8012ad8 <_dtoa_r+0x380>
 8012aaa:	4bb2      	ldr	r3, [pc, #712]	; (8012d74 <_dtoa_r+0x61c>)
 8012aac:	f007 070f 	and.w	r7, r7, #15
 8012ab0:	2503      	movs	r5, #3
 8012ab2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ab6:	ec51 0b19 	vmov	r0, r1, d9
 8012aba:	f7ed feab 	bl	8000814 <__aeabi_ddiv>
 8012abe:	4682      	mov	sl, r0
 8012ac0:	468b      	mov	fp, r1
 8012ac2:	4eac      	ldr	r6, [pc, #688]	; (8012d74 <_dtoa_r+0x61c>)
 8012ac4:	b957      	cbnz	r7, 8012adc <_dtoa_r+0x384>
 8012ac6:	4642      	mov	r2, r8
 8012ac8:	464b      	mov	r3, r9
 8012aca:	4650      	mov	r0, sl
 8012acc:	4659      	mov	r1, fp
 8012ace:	f7ed fea1 	bl	8000814 <__aeabi_ddiv>
 8012ad2:	4682      	mov	sl, r0
 8012ad4:	468b      	mov	fp, r1
 8012ad6:	e028      	b.n	8012b2a <_dtoa_r+0x3d2>
 8012ad8:	2502      	movs	r5, #2
 8012ada:	e7f2      	b.n	8012ac2 <_dtoa_r+0x36a>
 8012adc:	07f9      	lsls	r1, r7, #31
 8012ade:	d508      	bpl.n	8012af2 <_dtoa_r+0x39a>
 8012ae0:	4640      	mov	r0, r8
 8012ae2:	4649      	mov	r1, r9
 8012ae4:	3501      	adds	r5, #1
 8012ae6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012aea:	f7ed fd69 	bl	80005c0 <__aeabi_dmul>
 8012aee:	4680      	mov	r8, r0
 8012af0:	4689      	mov	r9, r1
 8012af2:	107f      	asrs	r7, r7, #1
 8012af4:	3608      	adds	r6, #8
 8012af6:	e7e5      	b.n	8012ac4 <_dtoa_r+0x36c>
 8012af8:	f000 809b 	beq.w	8012c32 <_dtoa_r+0x4da>
 8012afc:	9b00      	ldr	r3, [sp, #0]
 8012afe:	2502      	movs	r5, #2
 8012b00:	4f9c      	ldr	r7, [pc, #624]	; (8012d74 <_dtoa_r+0x61c>)
 8012b02:	425e      	negs	r6, r3
 8012b04:	4b9a      	ldr	r3, [pc, #616]	; (8012d70 <_dtoa_r+0x618>)
 8012b06:	f006 020f 	and.w	r2, r6, #15
 8012b0a:	1136      	asrs	r6, r6, #4
 8012b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b10:	ec51 0b19 	vmov	r0, r1, d9
 8012b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b18:	f7ed fd52 	bl	80005c0 <__aeabi_dmul>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	4682      	mov	sl, r0
 8012b20:	468b      	mov	fp, r1
 8012b22:	2e00      	cmp	r6, #0
 8012b24:	d17a      	bne.n	8012c1c <_dtoa_r+0x4c4>
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1d3      	bne.n	8012ad2 <_dtoa_r+0x37a>
 8012b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 8082 	beq.w	8012c36 <_dtoa_r+0x4de>
 8012b32:	2200      	movs	r2, #0
 8012b34:	4b90      	ldr	r3, [pc, #576]	; (8012d78 <_dtoa_r+0x620>)
 8012b36:	4650      	mov	r0, sl
 8012b38:	4659      	mov	r1, fp
 8012b3a:	f7ed ffb3 	bl	8000aa4 <__aeabi_dcmplt>
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	d079      	beq.n	8012c36 <_dtoa_r+0x4de>
 8012b42:	9b03      	ldr	r3, [sp, #12]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d076      	beq.n	8012c36 <_dtoa_r+0x4de>
 8012b48:	9b02      	ldr	r3, [sp, #8]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	dd36      	ble.n	8012bbc <_dtoa_r+0x464>
 8012b4e:	9b00      	ldr	r3, [sp, #0]
 8012b50:	4650      	mov	r0, sl
 8012b52:	4659      	mov	r1, fp
 8012b54:	2200      	movs	r2, #0
 8012b56:	1e5f      	subs	r7, r3, #1
 8012b58:	4b88      	ldr	r3, [pc, #544]	; (8012d7c <_dtoa_r+0x624>)
 8012b5a:	f7ed fd31 	bl	80005c0 <__aeabi_dmul>
 8012b5e:	3501      	adds	r5, #1
 8012b60:	4682      	mov	sl, r0
 8012b62:	468b      	mov	fp, r1
 8012b64:	9e02      	ldr	r6, [sp, #8]
 8012b66:	4628      	mov	r0, r5
 8012b68:	46d0      	mov	r8, sl
 8012b6a:	f7ed fcbf 	bl	80004ec <__aeabi_i2d>
 8012b6e:	4652      	mov	r2, sl
 8012b70:	465b      	mov	r3, fp
 8012b72:	46d9      	mov	r9, fp
 8012b74:	f7ed fd24 	bl	80005c0 <__aeabi_dmul>
 8012b78:	2200      	movs	r2, #0
 8012b7a:	4b81      	ldr	r3, [pc, #516]	; (8012d80 <_dtoa_r+0x628>)
 8012b7c:	f7ed fb6a 	bl	8000254 <__adddf3>
 8012b80:	4682      	mov	sl, r0
 8012b82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012b86:	2e00      	cmp	r6, #0
 8012b88:	d158      	bne.n	8012c3c <_dtoa_r+0x4e4>
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	4b7d      	ldr	r3, [pc, #500]	; (8012d84 <_dtoa_r+0x62c>)
 8012b8e:	4640      	mov	r0, r8
 8012b90:	4649      	mov	r1, r9
 8012b92:	f7ed fb5d 	bl	8000250 <__aeabi_dsub>
 8012b96:	4652      	mov	r2, sl
 8012b98:	465b      	mov	r3, fp
 8012b9a:	4680      	mov	r8, r0
 8012b9c:	4689      	mov	r9, r1
 8012b9e:	f7ed ff9f 	bl	8000ae0 <__aeabi_dcmpgt>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	f040 8293 	bne.w	80130ce <_dtoa_r+0x976>
 8012ba8:	4652      	mov	r2, sl
 8012baa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012bae:	4640      	mov	r0, r8
 8012bb0:	4649      	mov	r1, r9
 8012bb2:	f7ed ff77 	bl	8000aa4 <__aeabi_dcmplt>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	f040 8287 	bne.w	80130ca <_dtoa_r+0x972>
 8012bbc:	ec5b ab19 	vmov	sl, fp, d9
 8012bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	f2c0 8148 	blt.w	8012e58 <_dtoa_r+0x700>
 8012bc8:	9a00      	ldr	r2, [sp, #0]
 8012bca:	2a0e      	cmp	r2, #14
 8012bcc:	f300 8144 	bgt.w	8012e58 <_dtoa_r+0x700>
 8012bd0:	4b67      	ldr	r3, [pc, #412]	; (8012d70 <_dtoa_r+0x618>)
 8012bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	f280 80d5 	bge.w	8012d8c <_dtoa_r+0x634>
 8012be2:	9b03      	ldr	r3, [sp, #12]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	f300 80d1 	bgt.w	8012d8c <_dtoa_r+0x634>
 8012bea:	f040 826d 	bne.w	80130c8 <_dtoa_r+0x970>
 8012bee:	2200      	movs	r2, #0
 8012bf0:	4b64      	ldr	r3, [pc, #400]	; (8012d84 <_dtoa_r+0x62c>)
 8012bf2:	4640      	mov	r0, r8
 8012bf4:	4649      	mov	r1, r9
 8012bf6:	f7ed fce3 	bl	80005c0 <__aeabi_dmul>
 8012bfa:	4652      	mov	r2, sl
 8012bfc:	465b      	mov	r3, fp
 8012bfe:	f7ed ff65 	bl	8000acc <__aeabi_dcmpge>
 8012c02:	9e03      	ldr	r6, [sp, #12]
 8012c04:	4637      	mov	r7, r6
 8012c06:	2800      	cmp	r0, #0
 8012c08:	f040 8243 	bne.w	8013092 <_dtoa_r+0x93a>
 8012c0c:	2331      	movs	r3, #49	; 0x31
 8012c0e:	9d01      	ldr	r5, [sp, #4]
 8012c10:	f805 3b01 	strb.w	r3, [r5], #1
 8012c14:	9b00      	ldr	r3, [sp, #0]
 8012c16:	3301      	adds	r3, #1
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	e23e      	b.n	801309a <_dtoa_r+0x942>
 8012c1c:	07f2      	lsls	r2, r6, #31
 8012c1e:	d505      	bpl.n	8012c2c <_dtoa_r+0x4d4>
 8012c20:	3501      	adds	r5, #1
 8012c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c26:	f7ed fccb 	bl	80005c0 <__aeabi_dmul>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	1076      	asrs	r6, r6, #1
 8012c2e:	3708      	adds	r7, #8
 8012c30:	e777      	b.n	8012b22 <_dtoa_r+0x3ca>
 8012c32:	2502      	movs	r5, #2
 8012c34:	e779      	b.n	8012b2a <_dtoa_r+0x3d2>
 8012c36:	9f00      	ldr	r7, [sp, #0]
 8012c38:	9e03      	ldr	r6, [sp, #12]
 8012c3a:	e794      	b.n	8012b66 <_dtoa_r+0x40e>
 8012c3c:	9901      	ldr	r1, [sp, #4]
 8012c3e:	4b4c      	ldr	r3, [pc, #304]	; (8012d70 <_dtoa_r+0x618>)
 8012c40:	4431      	add	r1, r6
 8012c42:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012c46:	910d      	str	r1, [sp, #52]	; 0x34
 8012c48:	9908      	ldr	r1, [sp, #32]
 8012c4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c4e:	2900      	cmp	r1, #0
 8012c50:	d043      	beq.n	8012cda <_dtoa_r+0x582>
 8012c52:	2000      	movs	r0, #0
 8012c54:	494c      	ldr	r1, [pc, #304]	; (8012d88 <_dtoa_r+0x630>)
 8012c56:	f7ed fddd 	bl	8000814 <__aeabi_ddiv>
 8012c5a:	4652      	mov	r2, sl
 8012c5c:	465b      	mov	r3, fp
 8012c5e:	f7ed faf7 	bl	8000250 <__aeabi_dsub>
 8012c62:	9d01      	ldr	r5, [sp, #4]
 8012c64:	4682      	mov	sl, r0
 8012c66:	468b      	mov	fp, r1
 8012c68:	4649      	mov	r1, r9
 8012c6a:	4640      	mov	r0, r8
 8012c6c:	f7ed ff58 	bl	8000b20 <__aeabi_d2iz>
 8012c70:	4606      	mov	r6, r0
 8012c72:	f7ed fc3b 	bl	80004ec <__aeabi_i2d>
 8012c76:	4602      	mov	r2, r0
 8012c78:	3630      	adds	r6, #48	; 0x30
 8012c7a:	460b      	mov	r3, r1
 8012c7c:	4640      	mov	r0, r8
 8012c7e:	4649      	mov	r1, r9
 8012c80:	f7ed fae6 	bl	8000250 <__aeabi_dsub>
 8012c84:	4652      	mov	r2, sl
 8012c86:	465b      	mov	r3, fp
 8012c88:	f805 6b01 	strb.w	r6, [r5], #1
 8012c8c:	4680      	mov	r8, r0
 8012c8e:	4689      	mov	r9, r1
 8012c90:	f7ed ff08 	bl	8000aa4 <__aeabi_dcmplt>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d163      	bne.n	8012d60 <_dtoa_r+0x608>
 8012c98:	4642      	mov	r2, r8
 8012c9a:	464b      	mov	r3, r9
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	4936      	ldr	r1, [pc, #216]	; (8012d78 <_dtoa_r+0x620>)
 8012ca0:	f7ed fad6 	bl	8000250 <__aeabi_dsub>
 8012ca4:	4652      	mov	r2, sl
 8012ca6:	465b      	mov	r3, fp
 8012ca8:	f7ed fefc 	bl	8000aa4 <__aeabi_dcmplt>
 8012cac:	2800      	cmp	r0, #0
 8012cae:	f040 80b5 	bne.w	8012e1c <_dtoa_r+0x6c4>
 8012cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cb4:	429d      	cmp	r5, r3
 8012cb6:	d081      	beq.n	8012bbc <_dtoa_r+0x464>
 8012cb8:	2200      	movs	r2, #0
 8012cba:	4b30      	ldr	r3, [pc, #192]	; (8012d7c <_dtoa_r+0x624>)
 8012cbc:	4650      	mov	r0, sl
 8012cbe:	4659      	mov	r1, fp
 8012cc0:	f7ed fc7e 	bl	80005c0 <__aeabi_dmul>
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	4682      	mov	sl, r0
 8012cc8:	468b      	mov	fp, r1
 8012cca:	4640      	mov	r0, r8
 8012ccc:	4649      	mov	r1, r9
 8012cce:	4b2b      	ldr	r3, [pc, #172]	; (8012d7c <_dtoa_r+0x624>)
 8012cd0:	f7ed fc76 	bl	80005c0 <__aeabi_dmul>
 8012cd4:	4680      	mov	r8, r0
 8012cd6:	4689      	mov	r9, r1
 8012cd8:	e7c6      	b.n	8012c68 <_dtoa_r+0x510>
 8012cda:	4650      	mov	r0, sl
 8012cdc:	4659      	mov	r1, fp
 8012cde:	f7ed fc6f 	bl	80005c0 <__aeabi_dmul>
 8012ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ce4:	4682      	mov	sl, r0
 8012ce6:	468b      	mov	fp, r1
 8012ce8:	9d01      	ldr	r5, [sp, #4]
 8012cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8012cec:	4649      	mov	r1, r9
 8012cee:	4640      	mov	r0, r8
 8012cf0:	f7ed ff16 	bl	8000b20 <__aeabi_d2iz>
 8012cf4:	4606      	mov	r6, r0
 8012cf6:	f7ed fbf9 	bl	80004ec <__aeabi_i2d>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	4640      	mov	r0, r8
 8012d00:	4649      	mov	r1, r9
 8012d02:	3630      	adds	r6, #48	; 0x30
 8012d04:	f7ed faa4 	bl	8000250 <__aeabi_dsub>
 8012d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d0a:	f805 6b01 	strb.w	r6, [r5], #1
 8012d0e:	4680      	mov	r8, r0
 8012d10:	429d      	cmp	r5, r3
 8012d12:	4689      	mov	r9, r1
 8012d14:	f04f 0200 	mov.w	r2, #0
 8012d18:	d124      	bne.n	8012d64 <_dtoa_r+0x60c>
 8012d1a:	4b1b      	ldr	r3, [pc, #108]	; (8012d88 <_dtoa_r+0x630>)
 8012d1c:	4650      	mov	r0, sl
 8012d1e:	4659      	mov	r1, fp
 8012d20:	f7ed fa98 	bl	8000254 <__adddf3>
 8012d24:	4602      	mov	r2, r0
 8012d26:	460b      	mov	r3, r1
 8012d28:	4640      	mov	r0, r8
 8012d2a:	4649      	mov	r1, r9
 8012d2c:	f7ed fed8 	bl	8000ae0 <__aeabi_dcmpgt>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d173      	bne.n	8012e1c <_dtoa_r+0x6c4>
 8012d34:	4652      	mov	r2, sl
 8012d36:	465b      	mov	r3, fp
 8012d38:	2000      	movs	r0, #0
 8012d3a:	4913      	ldr	r1, [pc, #76]	; (8012d88 <_dtoa_r+0x630>)
 8012d3c:	f7ed fa88 	bl	8000250 <__aeabi_dsub>
 8012d40:	4602      	mov	r2, r0
 8012d42:	460b      	mov	r3, r1
 8012d44:	4640      	mov	r0, r8
 8012d46:	4649      	mov	r1, r9
 8012d48:	f7ed feac 	bl	8000aa4 <__aeabi_dcmplt>
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	f43f af35 	beq.w	8012bbc <_dtoa_r+0x464>
 8012d52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012d54:	1e6b      	subs	r3, r5, #1
 8012d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d5c:	2b30      	cmp	r3, #48	; 0x30
 8012d5e:	d0f8      	beq.n	8012d52 <_dtoa_r+0x5fa>
 8012d60:	9700      	str	r7, [sp, #0]
 8012d62:	e049      	b.n	8012df8 <_dtoa_r+0x6a0>
 8012d64:	4b05      	ldr	r3, [pc, #20]	; (8012d7c <_dtoa_r+0x624>)
 8012d66:	f7ed fc2b 	bl	80005c0 <__aeabi_dmul>
 8012d6a:	4680      	mov	r8, r0
 8012d6c:	4689      	mov	r9, r1
 8012d6e:	e7bd      	b.n	8012cec <_dtoa_r+0x594>
 8012d70:	08015650 	.word	0x08015650
 8012d74:	08015628 	.word	0x08015628
 8012d78:	3ff00000 	.word	0x3ff00000
 8012d7c:	40240000 	.word	0x40240000
 8012d80:	401c0000 	.word	0x401c0000
 8012d84:	40140000 	.word	0x40140000
 8012d88:	3fe00000 	.word	0x3fe00000
 8012d8c:	4656      	mov	r6, sl
 8012d8e:	465f      	mov	r7, fp
 8012d90:	9d01      	ldr	r5, [sp, #4]
 8012d92:	4642      	mov	r2, r8
 8012d94:	464b      	mov	r3, r9
 8012d96:	4630      	mov	r0, r6
 8012d98:	4639      	mov	r1, r7
 8012d9a:	f7ed fd3b 	bl	8000814 <__aeabi_ddiv>
 8012d9e:	f7ed febf 	bl	8000b20 <__aeabi_d2iz>
 8012da2:	4682      	mov	sl, r0
 8012da4:	f7ed fba2 	bl	80004ec <__aeabi_i2d>
 8012da8:	4642      	mov	r2, r8
 8012daa:	464b      	mov	r3, r9
 8012dac:	f7ed fc08 	bl	80005c0 <__aeabi_dmul>
 8012db0:	4602      	mov	r2, r0
 8012db2:	4630      	mov	r0, r6
 8012db4:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012db8:	460b      	mov	r3, r1
 8012dba:	4639      	mov	r1, r7
 8012dbc:	f7ed fa48 	bl	8000250 <__aeabi_dsub>
 8012dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8012dc4:	9e01      	ldr	r6, [sp, #4]
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	9f03      	ldr	r7, [sp, #12]
 8012dca:	460b      	mov	r3, r1
 8012dcc:	1bae      	subs	r6, r5, r6
 8012dce:	42b7      	cmp	r7, r6
 8012dd0:	d135      	bne.n	8012e3e <_dtoa_r+0x6e6>
 8012dd2:	f7ed fa3f 	bl	8000254 <__adddf3>
 8012dd6:	4642      	mov	r2, r8
 8012dd8:	464b      	mov	r3, r9
 8012dda:	4606      	mov	r6, r0
 8012ddc:	460f      	mov	r7, r1
 8012dde:	f7ed fe7f 	bl	8000ae0 <__aeabi_dcmpgt>
 8012de2:	b9d0      	cbnz	r0, 8012e1a <_dtoa_r+0x6c2>
 8012de4:	4642      	mov	r2, r8
 8012de6:	464b      	mov	r3, r9
 8012de8:	4630      	mov	r0, r6
 8012dea:	4639      	mov	r1, r7
 8012dec:	f7ed fe50 	bl	8000a90 <__aeabi_dcmpeq>
 8012df0:	b110      	cbz	r0, 8012df8 <_dtoa_r+0x6a0>
 8012df2:	f01a 0f01 	tst.w	sl, #1
 8012df6:	d110      	bne.n	8012e1a <_dtoa_r+0x6c2>
 8012df8:	4620      	mov	r0, r4
 8012dfa:	ee18 1a10 	vmov	r1, s16
 8012dfe:	f000 fe83 	bl	8013b08 <_Bfree>
 8012e02:	2300      	movs	r3, #0
 8012e04:	9800      	ldr	r0, [sp, #0]
 8012e06:	702b      	strb	r3, [r5, #0]
 8012e08:	3001      	adds	r0, #1
 8012e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e0c:	6018      	str	r0, [r3, #0]
 8012e0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f43f acf1 	beq.w	80127f8 <_dtoa_r+0xa0>
 8012e16:	601d      	str	r5, [r3, #0]
 8012e18:	e4ee      	b.n	80127f8 <_dtoa_r+0xa0>
 8012e1a:	9f00      	ldr	r7, [sp, #0]
 8012e1c:	462b      	mov	r3, r5
 8012e1e:	461d      	mov	r5, r3
 8012e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e24:	2a39      	cmp	r2, #57	; 0x39
 8012e26:	d106      	bne.n	8012e36 <_dtoa_r+0x6de>
 8012e28:	9a01      	ldr	r2, [sp, #4]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d1f7      	bne.n	8012e1e <_dtoa_r+0x6c6>
 8012e2e:	2230      	movs	r2, #48	; 0x30
 8012e30:	9901      	ldr	r1, [sp, #4]
 8012e32:	3701      	adds	r7, #1
 8012e34:	700a      	strb	r2, [r1, #0]
 8012e36:	781a      	ldrb	r2, [r3, #0]
 8012e38:	3201      	adds	r2, #1
 8012e3a:	701a      	strb	r2, [r3, #0]
 8012e3c:	e790      	b.n	8012d60 <_dtoa_r+0x608>
 8012e3e:	2200      	movs	r2, #0
 8012e40:	4ba4      	ldr	r3, [pc, #656]	; (80130d4 <_dtoa_r+0x97c>)
 8012e42:	f7ed fbbd 	bl	80005c0 <__aeabi_dmul>
 8012e46:	2200      	movs	r2, #0
 8012e48:	2300      	movs	r3, #0
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	460f      	mov	r7, r1
 8012e4e:	f7ed fe1f 	bl	8000a90 <__aeabi_dcmpeq>
 8012e52:	2800      	cmp	r0, #0
 8012e54:	d09d      	beq.n	8012d92 <_dtoa_r+0x63a>
 8012e56:	e7cf      	b.n	8012df8 <_dtoa_r+0x6a0>
 8012e58:	9a08      	ldr	r2, [sp, #32]
 8012e5a:	2a00      	cmp	r2, #0
 8012e5c:	f000 80d5 	beq.w	801300a <_dtoa_r+0x8b2>
 8012e60:	9a06      	ldr	r2, [sp, #24]
 8012e62:	2a01      	cmp	r2, #1
 8012e64:	f300 80b9 	bgt.w	8012fda <_dtoa_r+0x882>
 8012e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e6a:	2a00      	cmp	r2, #0
 8012e6c:	f000 80b1 	beq.w	8012fd2 <_dtoa_r+0x87a>
 8012e70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012e74:	9e07      	ldr	r6, [sp, #28]
 8012e76:	9d04      	ldr	r5, [sp, #16]
 8012e78:	9a04      	ldr	r2, [sp, #16]
 8012e7a:	2101      	movs	r1, #1
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	441a      	add	r2, r3
 8012e80:	9204      	str	r2, [sp, #16]
 8012e82:	9a05      	ldr	r2, [sp, #20]
 8012e84:	441a      	add	r2, r3
 8012e86:	9205      	str	r2, [sp, #20]
 8012e88:	f000 ff42 	bl	8013d10 <__i2b>
 8012e8c:	4607      	mov	r7, r0
 8012e8e:	2d00      	cmp	r5, #0
 8012e90:	dd0c      	ble.n	8012eac <_dtoa_r+0x754>
 8012e92:	9b05      	ldr	r3, [sp, #20]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	dd09      	ble.n	8012eac <_dtoa_r+0x754>
 8012e98:	42ab      	cmp	r3, r5
 8012e9a:	9a04      	ldr	r2, [sp, #16]
 8012e9c:	bfa8      	it	ge
 8012e9e:	462b      	movge	r3, r5
 8012ea0:	1ad2      	subs	r2, r2, r3
 8012ea2:	1aed      	subs	r5, r5, r3
 8012ea4:	9204      	str	r2, [sp, #16]
 8012ea6:	9a05      	ldr	r2, [sp, #20]
 8012ea8:	1ad3      	subs	r3, r2, r3
 8012eaa:	9305      	str	r3, [sp, #20]
 8012eac:	9b07      	ldr	r3, [sp, #28]
 8012eae:	b31b      	cbz	r3, 8012ef8 <_dtoa_r+0x7a0>
 8012eb0:	9b08      	ldr	r3, [sp, #32]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	f000 80ad 	beq.w	8013012 <_dtoa_r+0x8ba>
 8012eb8:	2e00      	cmp	r6, #0
 8012eba:	dd13      	ble.n	8012ee4 <_dtoa_r+0x78c>
 8012ebc:	4639      	mov	r1, r7
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f000 ffe3 	bl	8013e8c <__pow5mult>
 8012ec6:	ee18 2a10 	vmov	r2, s16
 8012eca:	4601      	mov	r1, r0
 8012ecc:	4607      	mov	r7, r0
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f000 ff34 	bl	8013d3c <__multiply>
 8012ed4:	4680      	mov	r8, r0
 8012ed6:	ee18 1a10 	vmov	r1, s16
 8012eda:	4620      	mov	r0, r4
 8012edc:	ee08 8a10 	vmov	s16, r8
 8012ee0:	f000 fe12 	bl	8013b08 <_Bfree>
 8012ee4:	9b07      	ldr	r3, [sp, #28]
 8012ee6:	1b9a      	subs	r2, r3, r6
 8012ee8:	d006      	beq.n	8012ef8 <_dtoa_r+0x7a0>
 8012eea:	ee18 1a10 	vmov	r1, s16
 8012eee:	4620      	mov	r0, r4
 8012ef0:	f000 ffcc 	bl	8013e8c <__pow5mult>
 8012ef4:	ee08 0a10 	vmov	s16, r0
 8012ef8:	2101      	movs	r1, #1
 8012efa:	4620      	mov	r0, r4
 8012efc:	f000 ff08 	bl	8013d10 <__i2b>
 8012f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f02:	4606      	mov	r6, r0
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f340 8086 	ble.w	8013016 <_dtoa_r+0x8be>
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	4601      	mov	r1, r0
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f000 ffbc 	bl	8013e8c <__pow5mult>
 8012f14:	9b06      	ldr	r3, [sp, #24]
 8012f16:	4606      	mov	r6, r0
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	dd7f      	ble.n	801301c <_dtoa_r+0x8c4>
 8012f1c:	f04f 0800 	mov.w	r8, #0
 8012f20:	6933      	ldr	r3, [r6, #16]
 8012f22:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012f26:	6918      	ldr	r0, [r3, #16]
 8012f28:	f000 fea2 	bl	8013c70 <__hi0bits>
 8012f2c:	f1c0 0020 	rsb	r0, r0, #32
 8012f30:	9b05      	ldr	r3, [sp, #20]
 8012f32:	4418      	add	r0, r3
 8012f34:	f010 001f 	ands.w	r0, r0, #31
 8012f38:	f000 8091 	beq.w	801305e <_dtoa_r+0x906>
 8012f3c:	f1c0 0320 	rsb	r3, r0, #32
 8012f40:	2b04      	cmp	r3, #4
 8012f42:	f340 8089 	ble.w	8013058 <_dtoa_r+0x900>
 8012f46:	f1c0 001c 	rsb	r0, r0, #28
 8012f4a:	9b04      	ldr	r3, [sp, #16]
 8012f4c:	4405      	add	r5, r0
 8012f4e:	4403      	add	r3, r0
 8012f50:	9304      	str	r3, [sp, #16]
 8012f52:	9b05      	ldr	r3, [sp, #20]
 8012f54:	4403      	add	r3, r0
 8012f56:	9305      	str	r3, [sp, #20]
 8012f58:	9b04      	ldr	r3, [sp, #16]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	dd07      	ble.n	8012f6e <_dtoa_r+0x816>
 8012f5e:	ee18 1a10 	vmov	r1, s16
 8012f62:	461a      	mov	r2, r3
 8012f64:	4620      	mov	r0, r4
 8012f66:	f000 ffeb 	bl	8013f40 <__lshift>
 8012f6a:	ee08 0a10 	vmov	s16, r0
 8012f6e:	9b05      	ldr	r3, [sp, #20]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	dd05      	ble.n	8012f80 <_dtoa_r+0x828>
 8012f74:	4631      	mov	r1, r6
 8012f76:	461a      	mov	r2, r3
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f000 ffe1 	bl	8013f40 <__lshift>
 8012f7e:	4606      	mov	r6, r0
 8012f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d06d      	beq.n	8013062 <_dtoa_r+0x90a>
 8012f86:	4631      	mov	r1, r6
 8012f88:	ee18 0a10 	vmov	r0, s16
 8012f8c:	f001 f848 	bl	8014020 <__mcmp>
 8012f90:	2800      	cmp	r0, #0
 8012f92:	da66      	bge.n	8013062 <_dtoa_r+0x90a>
 8012f94:	9b00      	ldr	r3, [sp, #0]
 8012f96:	ee18 1a10 	vmov	r1, s16
 8012f9a:	220a      	movs	r2, #10
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	3b01      	subs	r3, #1
 8012fa0:	9300      	str	r3, [sp, #0]
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	f000 fdd2 	bl	8013b4c <__multadd>
 8012fa8:	9b08      	ldr	r3, [sp, #32]
 8012faa:	ee08 0a10 	vmov	s16, r0
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	f000 81af 	beq.w	8013312 <_dtoa_r+0xbba>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	4639      	mov	r1, r7
 8012fb8:	220a      	movs	r2, #10
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f000 fdc6 	bl	8013b4c <__multadd>
 8012fc0:	9b02      	ldr	r3, [sp, #8]
 8012fc2:	4607      	mov	r7, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	f300 808d 	bgt.w	80130e4 <_dtoa_r+0x98c>
 8012fca:	9b06      	ldr	r3, [sp, #24]
 8012fcc:	2b02      	cmp	r3, #2
 8012fce:	dc50      	bgt.n	8013072 <_dtoa_r+0x91a>
 8012fd0:	e088      	b.n	80130e4 <_dtoa_r+0x98c>
 8012fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012fd4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012fd8:	e74c      	b.n	8012e74 <_dtoa_r+0x71c>
 8012fda:	9b03      	ldr	r3, [sp, #12]
 8012fdc:	1e5e      	subs	r6, r3, #1
 8012fde:	9b07      	ldr	r3, [sp, #28]
 8012fe0:	42b3      	cmp	r3, r6
 8012fe2:	bfb7      	itett	lt
 8012fe4:	9b07      	ldrlt	r3, [sp, #28]
 8012fe6:	1b9e      	subge	r6, r3, r6
 8012fe8:	9607      	strlt	r6, [sp, #28]
 8012fea:	1af2      	sublt	r2, r6, r3
 8012fec:	bfbf      	itttt	lt
 8012fee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012ff0:	2600      	movlt	r6, #0
 8012ff2:	189b      	addlt	r3, r3, r2
 8012ff4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012ff6:	9b03      	ldr	r3, [sp, #12]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	bfb7      	itett	lt
 8012ffc:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013000:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013004:	1a9d      	sublt	r5, r3, r2
 8013006:	2300      	movlt	r3, #0
 8013008:	e736      	b.n	8012e78 <_dtoa_r+0x720>
 801300a:	9e07      	ldr	r6, [sp, #28]
 801300c:	9d04      	ldr	r5, [sp, #16]
 801300e:	9f08      	ldr	r7, [sp, #32]
 8013010:	e73d      	b.n	8012e8e <_dtoa_r+0x736>
 8013012:	9a07      	ldr	r2, [sp, #28]
 8013014:	e769      	b.n	8012eea <_dtoa_r+0x792>
 8013016:	9b06      	ldr	r3, [sp, #24]
 8013018:	2b01      	cmp	r3, #1
 801301a:	dc18      	bgt.n	801304e <_dtoa_r+0x8f6>
 801301c:	f1ba 0f00 	cmp.w	sl, #0
 8013020:	d115      	bne.n	801304e <_dtoa_r+0x8f6>
 8013022:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013026:	b993      	cbnz	r3, 801304e <_dtoa_r+0x8f6>
 8013028:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801302c:	0d1b      	lsrs	r3, r3, #20
 801302e:	051b      	lsls	r3, r3, #20
 8013030:	b183      	cbz	r3, 8013054 <_dtoa_r+0x8fc>
 8013032:	9b04      	ldr	r3, [sp, #16]
 8013034:	f04f 0801 	mov.w	r8, #1
 8013038:	3301      	adds	r3, #1
 801303a:	9304      	str	r3, [sp, #16]
 801303c:	9b05      	ldr	r3, [sp, #20]
 801303e:	3301      	adds	r3, #1
 8013040:	9305      	str	r3, [sp, #20]
 8013042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013044:	2b00      	cmp	r3, #0
 8013046:	f47f af6b 	bne.w	8012f20 <_dtoa_r+0x7c8>
 801304a:	2001      	movs	r0, #1
 801304c:	e770      	b.n	8012f30 <_dtoa_r+0x7d8>
 801304e:	f04f 0800 	mov.w	r8, #0
 8013052:	e7f6      	b.n	8013042 <_dtoa_r+0x8ea>
 8013054:	4698      	mov	r8, r3
 8013056:	e7f4      	b.n	8013042 <_dtoa_r+0x8ea>
 8013058:	f43f af7e 	beq.w	8012f58 <_dtoa_r+0x800>
 801305c:	4618      	mov	r0, r3
 801305e:	301c      	adds	r0, #28
 8013060:	e773      	b.n	8012f4a <_dtoa_r+0x7f2>
 8013062:	9b03      	ldr	r3, [sp, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	dc37      	bgt.n	80130d8 <_dtoa_r+0x980>
 8013068:	9b06      	ldr	r3, [sp, #24]
 801306a:	2b02      	cmp	r3, #2
 801306c:	dd34      	ble.n	80130d8 <_dtoa_r+0x980>
 801306e:	9b03      	ldr	r3, [sp, #12]
 8013070:	9302      	str	r3, [sp, #8]
 8013072:	9b02      	ldr	r3, [sp, #8]
 8013074:	b96b      	cbnz	r3, 8013092 <_dtoa_r+0x93a>
 8013076:	4631      	mov	r1, r6
 8013078:	2205      	movs	r2, #5
 801307a:	4620      	mov	r0, r4
 801307c:	f000 fd66 	bl	8013b4c <__multadd>
 8013080:	4601      	mov	r1, r0
 8013082:	4606      	mov	r6, r0
 8013084:	ee18 0a10 	vmov	r0, s16
 8013088:	f000 ffca 	bl	8014020 <__mcmp>
 801308c:	2800      	cmp	r0, #0
 801308e:	f73f adbd 	bgt.w	8012c0c <_dtoa_r+0x4b4>
 8013092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013094:	9d01      	ldr	r5, [sp, #4]
 8013096:	43db      	mvns	r3, r3
 8013098:	9300      	str	r3, [sp, #0]
 801309a:	f04f 0800 	mov.w	r8, #0
 801309e:	4631      	mov	r1, r6
 80130a0:	4620      	mov	r0, r4
 80130a2:	f000 fd31 	bl	8013b08 <_Bfree>
 80130a6:	2f00      	cmp	r7, #0
 80130a8:	f43f aea6 	beq.w	8012df8 <_dtoa_r+0x6a0>
 80130ac:	f1b8 0f00 	cmp.w	r8, #0
 80130b0:	d005      	beq.n	80130be <_dtoa_r+0x966>
 80130b2:	45b8      	cmp	r8, r7
 80130b4:	d003      	beq.n	80130be <_dtoa_r+0x966>
 80130b6:	4641      	mov	r1, r8
 80130b8:	4620      	mov	r0, r4
 80130ba:	f000 fd25 	bl	8013b08 <_Bfree>
 80130be:	4639      	mov	r1, r7
 80130c0:	4620      	mov	r0, r4
 80130c2:	f000 fd21 	bl	8013b08 <_Bfree>
 80130c6:	e697      	b.n	8012df8 <_dtoa_r+0x6a0>
 80130c8:	2600      	movs	r6, #0
 80130ca:	4637      	mov	r7, r6
 80130cc:	e7e1      	b.n	8013092 <_dtoa_r+0x93a>
 80130ce:	9700      	str	r7, [sp, #0]
 80130d0:	4637      	mov	r7, r6
 80130d2:	e59b      	b.n	8012c0c <_dtoa_r+0x4b4>
 80130d4:	40240000 	.word	0x40240000
 80130d8:	9b08      	ldr	r3, [sp, #32]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	f000 80ca 	beq.w	8013274 <_dtoa_r+0xb1c>
 80130e0:	9b03      	ldr	r3, [sp, #12]
 80130e2:	9302      	str	r3, [sp, #8]
 80130e4:	2d00      	cmp	r5, #0
 80130e6:	dd05      	ble.n	80130f4 <_dtoa_r+0x99c>
 80130e8:	4639      	mov	r1, r7
 80130ea:	462a      	mov	r2, r5
 80130ec:	4620      	mov	r0, r4
 80130ee:	f000 ff27 	bl	8013f40 <__lshift>
 80130f2:	4607      	mov	r7, r0
 80130f4:	f1b8 0f00 	cmp.w	r8, #0
 80130f8:	d05b      	beq.n	80131b2 <_dtoa_r+0xa5a>
 80130fa:	6879      	ldr	r1, [r7, #4]
 80130fc:	4620      	mov	r0, r4
 80130fe:	f000 fcc3 	bl	8013a88 <_Balloc>
 8013102:	4605      	mov	r5, r0
 8013104:	b928      	cbnz	r0, 8013112 <_dtoa_r+0x9ba>
 8013106:	4b87      	ldr	r3, [pc, #540]	; (8013324 <_dtoa_r+0xbcc>)
 8013108:	4602      	mov	r2, r0
 801310a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801310e:	f7ff bb3d 	b.w	801278c <_dtoa_r+0x34>
 8013112:	693a      	ldr	r2, [r7, #16]
 8013114:	f107 010c 	add.w	r1, r7, #12
 8013118:	300c      	adds	r0, #12
 801311a:	3202      	adds	r2, #2
 801311c:	0092      	lsls	r2, r2, #2
 801311e:	f000 fc99 	bl	8013a54 <memcpy>
 8013122:	2201      	movs	r2, #1
 8013124:	4629      	mov	r1, r5
 8013126:	4620      	mov	r0, r4
 8013128:	f000 ff0a 	bl	8013f40 <__lshift>
 801312c:	9b01      	ldr	r3, [sp, #4]
 801312e:	46b8      	mov	r8, r7
 8013130:	4607      	mov	r7, r0
 8013132:	f103 0901 	add.w	r9, r3, #1
 8013136:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801313a:	4413      	add	r3, r2
 801313c:	9305      	str	r3, [sp, #20]
 801313e:	f00a 0301 	and.w	r3, sl, #1
 8013142:	9304      	str	r3, [sp, #16]
 8013144:	4631      	mov	r1, r6
 8013146:	ee18 0a10 	vmov	r0, s16
 801314a:	f7ff fa71 	bl	8012630 <quorem>
 801314e:	4641      	mov	r1, r8
 8013150:	9002      	str	r0, [sp, #8]
 8013152:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013156:	ee18 0a10 	vmov	r0, s16
 801315a:	f109 3bff 	add.w	fp, r9, #4294967295
 801315e:	f000 ff5f 	bl	8014020 <__mcmp>
 8013162:	463a      	mov	r2, r7
 8013164:	9003      	str	r0, [sp, #12]
 8013166:	4631      	mov	r1, r6
 8013168:	4620      	mov	r0, r4
 801316a:	f000 ff75 	bl	8014058 <__mdiff>
 801316e:	68c2      	ldr	r2, [r0, #12]
 8013170:	4605      	mov	r5, r0
 8013172:	bb02      	cbnz	r2, 80131b6 <_dtoa_r+0xa5e>
 8013174:	4601      	mov	r1, r0
 8013176:	ee18 0a10 	vmov	r0, s16
 801317a:	f000 ff51 	bl	8014020 <__mcmp>
 801317e:	4602      	mov	r2, r0
 8013180:	4629      	mov	r1, r5
 8013182:	4620      	mov	r0, r4
 8013184:	9207      	str	r2, [sp, #28]
 8013186:	f000 fcbf 	bl	8013b08 <_Bfree>
 801318a:	464d      	mov	r5, r9
 801318c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013190:	ea43 0102 	orr.w	r1, r3, r2
 8013194:	9b04      	ldr	r3, [sp, #16]
 8013196:	430b      	orrs	r3, r1
 8013198:	d10f      	bne.n	80131ba <_dtoa_r+0xa62>
 801319a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801319e:	d02a      	beq.n	80131f6 <_dtoa_r+0xa9e>
 80131a0:	9b03      	ldr	r3, [sp, #12]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	dd02      	ble.n	80131ac <_dtoa_r+0xa54>
 80131a6:	9b02      	ldr	r3, [sp, #8]
 80131a8:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80131ac:	f88b a000 	strb.w	sl, [fp]
 80131b0:	e775      	b.n	801309e <_dtoa_r+0x946>
 80131b2:	4638      	mov	r0, r7
 80131b4:	e7ba      	b.n	801312c <_dtoa_r+0x9d4>
 80131b6:	2201      	movs	r2, #1
 80131b8:	e7e2      	b.n	8013180 <_dtoa_r+0xa28>
 80131ba:	9b03      	ldr	r3, [sp, #12]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	db04      	blt.n	80131ca <_dtoa_r+0xa72>
 80131c0:	9906      	ldr	r1, [sp, #24]
 80131c2:	430b      	orrs	r3, r1
 80131c4:	9904      	ldr	r1, [sp, #16]
 80131c6:	430b      	orrs	r3, r1
 80131c8:	d122      	bne.n	8013210 <_dtoa_r+0xab8>
 80131ca:	2a00      	cmp	r2, #0
 80131cc:	ddee      	ble.n	80131ac <_dtoa_r+0xa54>
 80131ce:	ee18 1a10 	vmov	r1, s16
 80131d2:	2201      	movs	r2, #1
 80131d4:	4620      	mov	r0, r4
 80131d6:	f000 feb3 	bl	8013f40 <__lshift>
 80131da:	4631      	mov	r1, r6
 80131dc:	ee08 0a10 	vmov	s16, r0
 80131e0:	f000 ff1e 	bl	8014020 <__mcmp>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	dc03      	bgt.n	80131f0 <_dtoa_r+0xa98>
 80131e8:	d1e0      	bne.n	80131ac <_dtoa_r+0xa54>
 80131ea:	f01a 0f01 	tst.w	sl, #1
 80131ee:	d0dd      	beq.n	80131ac <_dtoa_r+0xa54>
 80131f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80131f4:	d1d7      	bne.n	80131a6 <_dtoa_r+0xa4e>
 80131f6:	2339      	movs	r3, #57	; 0x39
 80131f8:	f88b 3000 	strb.w	r3, [fp]
 80131fc:	462b      	mov	r3, r5
 80131fe:	461d      	mov	r5, r3
 8013200:	3b01      	subs	r3, #1
 8013202:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013206:	2a39      	cmp	r2, #57	; 0x39
 8013208:	d070      	beq.n	80132ec <_dtoa_r+0xb94>
 801320a:	3201      	adds	r2, #1
 801320c:	701a      	strb	r2, [r3, #0]
 801320e:	e746      	b.n	801309e <_dtoa_r+0x946>
 8013210:	2a00      	cmp	r2, #0
 8013212:	dd07      	ble.n	8013224 <_dtoa_r+0xacc>
 8013214:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013218:	d0ed      	beq.n	80131f6 <_dtoa_r+0xa9e>
 801321a:	f10a 0301 	add.w	r3, sl, #1
 801321e:	f88b 3000 	strb.w	r3, [fp]
 8013222:	e73c      	b.n	801309e <_dtoa_r+0x946>
 8013224:	9b05      	ldr	r3, [sp, #20]
 8013226:	f809 ac01 	strb.w	sl, [r9, #-1]
 801322a:	4599      	cmp	r9, r3
 801322c:	d046      	beq.n	80132bc <_dtoa_r+0xb64>
 801322e:	ee18 1a10 	vmov	r1, s16
 8013232:	2300      	movs	r3, #0
 8013234:	220a      	movs	r2, #10
 8013236:	4620      	mov	r0, r4
 8013238:	f000 fc88 	bl	8013b4c <__multadd>
 801323c:	45b8      	cmp	r8, r7
 801323e:	ee08 0a10 	vmov	s16, r0
 8013242:	f04f 0300 	mov.w	r3, #0
 8013246:	f04f 020a 	mov.w	r2, #10
 801324a:	4641      	mov	r1, r8
 801324c:	4620      	mov	r0, r4
 801324e:	d106      	bne.n	801325e <_dtoa_r+0xb06>
 8013250:	f000 fc7c 	bl	8013b4c <__multadd>
 8013254:	4680      	mov	r8, r0
 8013256:	4607      	mov	r7, r0
 8013258:	f109 0901 	add.w	r9, r9, #1
 801325c:	e772      	b.n	8013144 <_dtoa_r+0x9ec>
 801325e:	f000 fc75 	bl	8013b4c <__multadd>
 8013262:	4639      	mov	r1, r7
 8013264:	4680      	mov	r8, r0
 8013266:	2300      	movs	r3, #0
 8013268:	220a      	movs	r2, #10
 801326a:	4620      	mov	r0, r4
 801326c:	f000 fc6e 	bl	8013b4c <__multadd>
 8013270:	4607      	mov	r7, r0
 8013272:	e7f1      	b.n	8013258 <_dtoa_r+0xb00>
 8013274:	9b03      	ldr	r3, [sp, #12]
 8013276:	9302      	str	r3, [sp, #8]
 8013278:	9d01      	ldr	r5, [sp, #4]
 801327a:	4631      	mov	r1, r6
 801327c:	ee18 0a10 	vmov	r0, s16
 8013280:	f7ff f9d6 	bl	8012630 <quorem>
 8013284:	9b01      	ldr	r3, [sp, #4]
 8013286:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801328a:	f805 ab01 	strb.w	sl, [r5], #1
 801328e:	1aea      	subs	r2, r5, r3
 8013290:	9b02      	ldr	r3, [sp, #8]
 8013292:	4293      	cmp	r3, r2
 8013294:	dd09      	ble.n	80132aa <_dtoa_r+0xb52>
 8013296:	ee18 1a10 	vmov	r1, s16
 801329a:	2300      	movs	r3, #0
 801329c:	220a      	movs	r2, #10
 801329e:	4620      	mov	r0, r4
 80132a0:	f000 fc54 	bl	8013b4c <__multadd>
 80132a4:	ee08 0a10 	vmov	s16, r0
 80132a8:	e7e7      	b.n	801327a <_dtoa_r+0xb22>
 80132aa:	9b02      	ldr	r3, [sp, #8]
 80132ac:	f04f 0800 	mov.w	r8, #0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	bfcc      	ite	gt
 80132b4:	461d      	movgt	r5, r3
 80132b6:	2501      	movle	r5, #1
 80132b8:	9b01      	ldr	r3, [sp, #4]
 80132ba:	441d      	add	r5, r3
 80132bc:	ee18 1a10 	vmov	r1, s16
 80132c0:	2201      	movs	r2, #1
 80132c2:	4620      	mov	r0, r4
 80132c4:	f000 fe3c 	bl	8013f40 <__lshift>
 80132c8:	4631      	mov	r1, r6
 80132ca:	ee08 0a10 	vmov	s16, r0
 80132ce:	f000 fea7 	bl	8014020 <__mcmp>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	dc92      	bgt.n	80131fc <_dtoa_r+0xaa4>
 80132d6:	d102      	bne.n	80132de <_dtoa_r+0xb86>
 80132d8:	f01a 0f01 	tst.w	sl, #1
 80132dc:	d18e      	bne.n	80131fc <_dtoa_r+0xaa4>
 80132de:	462b      	mov	r3, r5
 80132e0:	461d      	mov	r5, r3
 80132e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132e6:	2a30      	cmp	r2, #48	; 0x30
 80132e8:	d0fa      	beq.n	80132e0 <_dtoa_r+0xb88>
 80132ea:	e6d8      	b.n	801309e <_dtoa_r+0x946>
 80132ec:	9a01      	ldr	r2, [sp, #4]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d185      	bne.n	80131fe <_dtoa_r+0xaa6>
 80132f2:	9b00      	ldr	r3, [sp, #0]
 80132f4:	3301      	adds	r3, #1
 80132f6:	9300      	str	r3, [sp, #0]
 80132f8:	2331      	movs	r3, #49	; 0x31
 80132fa:	7013      	strb	r3, [r2, #0]
 80132fc:	e6cf      	b.n	801309e <_dtoa_r+0x946>
 80132fe:	4b0a      	ldr	r3, [pc, #40]	; (8013328 <_dtoa_r+0xbd0>)
 8013300:	f7ff ba98 	b.w	8012834 <_dtoa_r+0xdc>
 8013304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013306:	2b00      	cmp	r3, #0
 8013308:	f47f aa71 	bne.w	80127ee <_dtoa_r+0x96>
 801330c:	4b07      	ldr	r3, [pc, #28]	; (801332c <_dtoa_r+0xbd4>)
 801330e:	f7ff ba91 	b.w	8012834 <_dtoa_r+0xdc>
 8013312:	9b02      	ldr	r3, [sp, #8]
 8013314:	2b00      	cmp	r3, #0
 8013316:	dcaf      	bgt.n	8013278 <_dtoa_r+0xb20>
 8013318:	9b06      	ldr	r3, [sp, #24]
 801331a:	2b02      	cmp	r3, #2
 801331c:	f73f aea9 	bgt.w	8013072 <_dtoa_r+0x91a>
 8013320:	e7aa      	b.n	8013278 <_dtoa_r+0xb20>
 8013322:	bf00      	nop
 8013324:	08015540 	.word	0x08015540
 8013328:	08015344 	.word	0x08015344
 801332c:	080154c1 	.word	0x080154c1

08013330 <rshift>:
 8013330:	6903      	ldr	r3, [r0, #16]
 8013332:	114a      	asrs	r2, r1, #5
 8013334:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801333c:	f100 0414 	add.w	r4, r0, #20
 8013340:	dd45      	ble.n	80133ce <rshift+0x9e>
 8013342:	f011 011f 	ands.w	r1, r1, #31
 8013346:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801334a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801334e:	d10c      	bne.n	801336a <rshift+0x3a>
 8013350:	f100 0710 	add.w	r7, r0, #16
 8013354:	4629      	mov	r1, r5
 8013356:	42b1      	cmp	r1, r6
 8013358:	d334      	bcc.n	80133c4 <rshift+0x94>
 801335a:	1a9b      	subs	r3, r3, r2
 801335c:	1eea      	subs	r2, r5, #3
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	4296      	cmp	r6, r2
 8013362:	bf38      	it	cc
 8013364:	2300      	movcc	r3, #0
 8013366:	4423      	add	r3, r4
 8013368:	e015      	b.n	8013396 <rshift+0x66>
 801336a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801336e:	f1c1 0820 	rsb	r8, r1, #32
 8013372:	f105 0e04 	add.w	lr, r5, #4
 8013376:	46a1      	mov	r9, r4
 8013378:	40cf      	lsrs	r7, r1
 801337a:	4576      	cmp	r6, lr
 801337c:	46f4      	mov	ip, lr
 801337e:	d815      	bhi.n	80133ac <rshift+0x7c>
 8013380:	1a9a      	subs	r2, r3, r2
 8013382:	3501      	adds	r5, #1
 8013384:	0092      	lsls	r2, r2, #2
 8013386:	3a04      	subs	r2, #4
 8013388:	42ae      	cmp	r6, r5
 801338a:	bf38      	it	cc
 801338c:	2200      	movcc	r2, #0
 801338e:	18a3      	adds	r3, r4, r2
 8013390:	50a7      	str	r7, [r4, r2]
 8013392:	b107      	cbz	r7, 8013396 <rshift+0x66>
 8013394:	3304      	adds	r3, #4
 8013396:	1b1a      	subs	r2, r3, r4
 8013398:	42a3      	cmp	r3, r4
 801339a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801339e:	bf08      	it	eq
 80133a0:	2300      	moveq	r3, #0
 80133a2:	6102      	str	r2, [r0, #16]
 80133a4:	bf08      	it	eq
 80133a6:	6143      	streq	r3, [r0, #20]
 80133a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ac:	f8dc c000 	ldr.w	ip, [ip]
 80133b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80133b4:	ea4c 0707 	orr.w	r7, ip, r7
 80133b8:	f849 7b04 	str.w	r7, [r9], #4
 80133bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80133c0:	40cf      	lsrs	r7, r1
 80133c2:	e7da      	b.n	801337a <rshift+0x4a>
 80133c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80133c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80133cc:	e7c3      	b.n	8013356 <rshift+0x26>
 80133ce:	4623      	mov	r3, r4
 80133d0:	e7e1      	b.n	8013396 <rshift+0x66>

080133d2 <__hexdig_fun>:
 80133d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80133d6:	2b09      	cmp	r3, #9
 80133d8:	d802      	bhi.n	80133e0 <__hexdig_fun+0xe>
 80133da:	3820      	subs	r0, #32
 80133dc:	b2c0      	uxtb	r0, r0
 80133de:	4770      	bx	lr
 80133e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80133e4:	2b05      	cmp	r3, #5
 80133e6:	d801      	bhi.n	80133ec <__hexdig_fun+0x1a>
 80133e8:	3847      	subs	r0, #71	; 0x47
 80133ea:	e7f7      	b.n	80133dc <__hexdig_fun+0xa>
 80133ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80133f0:	2b05      	cmp	r3, #5
 80133f2:	d801      	bhi.n	80133f8 <__hexdig_fun+0x26>
 80133f4:	3827      	subs	r0, #39	; 0x27
 80133f6:	e7f1      	b.n	80133dc <__hexdig_fun+0xa>
 80133f8:	2000      	movs	r0, #0
 80133fa:	4770      	bx	lr

080133fc <__gethex>:
 80133fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013400:	ed2d 8b02 	vpush	{d8}
 8013404:	b089      	sub	sp, #36	; 0x24
 8013406:	ee08 0a10 	vmov	s16, r0
 801340a:	468b      	mov	fp, r1
 801340c:	4690      	mov	r8, r2
 801340e:	9304      	str	r3, [sp, #16]
 8013410:	4bb2      	ldr	r3, [pc, #712]	; (80136dc <__gethex+0x2e0>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4618      	mov	r0, r3
 8013416:	9301      	str	r3, [sp, #4]
 8013418:	f7ec ff0e 	bl	8000238 <strlen>
 801341c:	9b01      	ldr	r3, [sp, #4]
 801341e:	f8db 2000 	ldr.w	r2, [fp]
 8013422:	4682      	mov	sl, r0
 8013424:	4403      	add	r3, r0
 8013426:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801342a:	9305      	str	r3, [sp, #20]
 801342c:	1c93      	adds	r3, r2, #2
 801342e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013432:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013436:	32fe      	adds	r2, #254	; 0xfe
 8013438:	18d1      	adds	r1, r2, r3
 801343a:	461f      	mov	r7, r3
 801343c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013440:	9100      	str	r1, [sp, #0]
 8013442:	2830      	cmp	r0, #48	; 0x30
 8013444:	d0f8      	beq.n	8013438 <__gethex+0x3c>
 8013446:	f7ff ffc4 	bl	80133d2 <__hexdig_fun>
 801344a:	4604      	mov	r4, r0
 801344c:	2800      	cmp	r0, #0
 801344e:	d139      	bne.n	80134c4 <__gethex+0xc8>
 8013450:	4652      	mov	r2, sl
 8013452:	9901      	ldr	r1, [sp, #4]
 8013454:	4638      	mov	r0, r7
 8013456:	f001 f94d 	bl	80146f4 <strncmp>
 801345a:	4605      	mov	r5, r0
 801345c:	2800      	cmp	r0, #0
 801345e:	d167      	bne.n	8013530 <__gethex+0x134>
 8013460:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013464:	eb07 060a 	add.w	r6, r7, sl
 8013468:	f7ff ffb3 	bl	80133d2 <__hexdig_fun>
 801346c:	2800      	cmp	r0, #0
 801346e:	d061      	beq.n	8013534 <__gethex+0x138>
 8013470:	4633      	mov	r3, r6
 8013472:	7818      	ldrb	r0, [r3, #0]
 8013474:	461f      	mov	r7, r3
 8013476:	3301      	adds	r3, #1
 8013478:	2830      	cmp	r0, #48	; 0x30
 801347a:	d0fa      	beq.n	8013472 <__gethex+0x76>
 801347c:	f7ff ffa9 	bl	80133d2 <__hexdig_fun>
 8013480:	fab0 f480 	clz	r4, r0
 8013484:	2301      	movs	r3, #1
 8013486:	4635      	mov	r5, r6
 8013488:	0964      	lsrs	r4, r4, #5
 801348a:	9300      	str	r3, [sp, #0]
 801348c:	463a      	mov	r2, r7
 801348e:	4616      	mov	r6, r2
 8013490:	3201      	adds	r2, #1
 8013492:	7830      	ldrb	r0, [r6, #0]
 8013494:	f7ff ff9d 	bl	80133d2 <__hexdig_fun>
 8013498:	2800      	cmp	r0, #0
 801349a:	d1f8      	bne.n	801348e <__gethex+0x92>
 801349c:	4652      	mov	r2, sl
 801349e:	9901      	ldr	r1, [sp, #4]
 80134a0:	4630      	mov	r0, r6
 80134a2:	f001 f927 	bl	80146f4 <strncmp>
 80134a6:	b980      	cbnz	r0, 80134ca <__gethex+0xce>
 80134a8:	b94d      	cbnz	r5, 80134be <__gethex+0xc2>
 80134aa:	eb06 050a 	add.w	r5, r6, sl
 80134ae:	462a      	mov	r2, r5
 80134b0:	4616      	mov	r6, r2
 80134b2:	3201      	adds	r2, #1
 80134b4:	7830      	ldrb	r0, [r6, #0]
 80134b6:	f7ff ff8c 	bl	80133d2 <__hexdig_fun>
 80134ba:	2800      	cmp	r0, #0
 80134bc:	d1f8      	bne.n	80134b0 <__gethex+0xb4>
 80134be:	1bad      	subs	r5, r5, r6
 80134c0:	00ad      	lsls	r5, r5, #2
 80134c2:	e004      	b.n	80134ce <__gethex+0xd2>
 80134c4:	2400      	movs	r4, #0
 80134c6:	4625      	mov	r5, r4
 80134c8:	e7e0      	b.n	801348c <__gethex+0x90>
 80134ca:	2d00      	cmp	r5, #0
 80134cc:	d1f7      	bne.n	80134be <__gethex+0xc2>
 80134ce:	7833      	ldrb	r3, [r6, #0]
 80134d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80134d4:	2b50      	cmp	r3, #80	; 0x50
 80134d6:	d13b      	bne.n	8013550 <__gethex+0x154>
 80134d8:	7873      	ldrb	r3, [r6, #1]
 80134da:	2b2b      	cmp	r3, #43	; 0x2b
 80134dc:	d02c      	beq.n	8013538 <__gethex+0x13c>
 80134de:	2b2d      	cmp	r3, #45	; 0x2d
 80134e0:	d02e      	beq.n	8013540 <__gethex+0x144>
 80134e2:	1c71      	adds	r1, r6, #1
 80134e4:	f04f 0900 	mov.w	r9, #0
 80134e8:	7808      	ldrb	r0, [r1, #0]
 80134ea:	f7ff ff72 	bl	80133d2 <__hexdig_fun>
 80134ee:	1e43      	subs	r3, r0, #1
 80134f0:	b2db      	uxtb	r3, r3
 80134f2:	2b18      	cmp	r3, #24
 80134f4:	d82c      	bhi.n	8013550 <__gethex+0x154>
 80134f6:	f1a0 0210 	sub.w	r2, r0, #16
 80134fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80134fe:	f7ff ff68 	bl	80133d2 <__hexdig_fun>
 8013502:	1e43      	subs	r3, r0, #1
 8013504:	b2db      	uxtb	r3, r3
 8013506:	2b18      	cmp	r3, #24
 8013508:	d91d      	bls.n	8013546 <__gethex+0x14a>
 801350a:	f1b9 0f00 	cmp.w	r9, #0
 801350e:	d000      	beq.n	8013512 <__gethex+0x116>
 8013510:	4252      	negs	r2, r2
 8013512:	4415      	add	r5, r2
 8013514:	f8cb 1000 	str.w	r1, [fp]
 8013518:	b1e4      	cbz	r4, 8013554 <__gethex+0x158>
 801351a:	9b00      	ldr	r3, [sp, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	bf14      	ite	ne
 8013520:	2700      	movne	r7, #0
 8013522:	2706      	moveq	r7, #6
 8013524:	4638      	mov	r0, r7
 8013526:	b009      	add	sp, #36	; 0x24
 8013528:	ecbd 8b02 	vpop	{d8}
 801352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013530:	463e      	mov	r6, r7
 8013532:	4625      	mov	r5, r4
 8013534:	2401      	movs	r4, #1
 8013536:	e7ca      	b.n	80134ce <__gethex+0xd2>
 8013538:	f04f 0900 	mov.w	r9, #0
 801353c:	1cb1      	adds	r1, r6, #2
 801353e:	e7d3      	b.n	80134e8 <__gethex+0xec>
 8013540:	f04f 0901 	mov.w	r9, #1
 8013544:	e7fa      	b.n	801353c <__gethex+0x140>
 8013546:	230a      	movs	r3, #10
 8013548:	fb03 0202 	mla	r2, r3, r2, r0
 801354c:	3a10      	subs	r2, #16
 801354e:	e7d4      	b.n	80134fa <__gethex+0xfe>
 8013550:	4631      	mov	r1, r6
 8013552:	e7df      	b.n	8013514 <__gethex+0x118>
 8013554:	1bf3      	subs	r3, r6, r7
 8013556:	4621      	mov	r1, r4
 8013558:	3b01      	subs	r3, #1
 801355a:	2b07      	cmp	r3, #7
 801355c:	dc0b      	bgt.n	8013576 <__gethex+0x17a>
 801355e:	ee18 0a10 	vmov	r0, s16
 8013562:	f000 fa91 	bl	8013a88 <_Balloc>
 8013566:	4604      	mov	r4, r0
 8013568:	b940      	cbnz	r0, 801357c <__gethex+0x180>
 801356a:	4b5d      	ldr	r3, [pc, #372]	; (80136e0 <__gethex+0x2e4>)
 801356c:	4602      	mov	r2, r0
 801356e:	21de      	movs	r1, #222	; 0xde
 8013570:	485c      	ldr	r0, [pc, #368]	; (80136e4 <__gethex+0x2e8>)
 8013572:	f001 f8e1 	bl	8014738 <__assert_func>
 8013576:	3101      	adds	r1, #1
 8013578:	105b      	asrs	r3, r3, #1
 801357a:	e7ee      	b.n	801355a <__gethex+0x15e>
 801357c:	f100 0914 	add.w	r9, r0, #20
 8013580:	f04f 0b00 	mov.w	fp, #0
 8013584:	f1ca 0301 	rsb	r3, sl, #1
 8013588:	f8cd 9008 	str.w	r9, [sp, #8]
 801358c:	f8cd b000 	str.w	fp, [sp]
 8013590:	9306      	str	r3, [sp, #24]
 8013592:	42b7      	cmp	r7, r6
 8013594:	d340      	bcc.n	8013618 <__gethex+0x21c>
 8013596:	9802      	ldr	r0, [sp, #8]
 8013598:	9b00      	ldr	r3, [sp, #0]
 801359a:	f840 3b04 	str.w	r3, [r0], #4
 801359e:	eba0 0009 	sub.w	r0, r0, r9
 80135a2:	1080      	asrs	r0, r0, #2
 80135a4:	0146      	lsls	r6, r0, #5
 80135a6:	6120      	str	r0, [r4, #16]
 80135a8:	4618      	mov	r0, r3
 80135aa:	f000 fb61 	bl	8013c70 <__hi0bits>
 80135ae:	1a30      	subs	r0, r6, r0
 80135b0:	f8d8 6000 	ldr.w	r6, [r8]
 80135b4:	42b0      	cmp	r0, r6
 80135b6:	dd63      	ble.n	8013680 <__gethex+0x284>
 80135b8:	1b87      	subs	r7, r0, r6
 80135ba:	4620      	mov	r0, r4
 80135bc:	4639      	mov	r1, r7
 80135be:	f000 ff07 	bl	80143d0 <__any_on>
 80135c2:	4682      	mov	sl, r0
 80135c4:	b1a8      	cbz	r0, 80135f2 <__gethex+0x1f6>
 80135c6:	1e7b      	subs	r3, r7, #1
 80135c8:	f04f 0a01 	mov.w	sl, #1
 80135cc:	1159      	asrs	r1, r3, #5
 80135ce:	f003 021f 	and.w	r2, r3, #31
 80135d2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80135d6:	fa0a f202 	lsl.w	r2, sl, r2
 80135da:	420a      	tst	r2, r1
 80135dc:	d009      	beq.n	80135f2 <__gethex+0x1f6>
 80135de:	4553      	cmp	r3, sl
 80135e0:	dd05      	ble.n	80135ee <__gethex+0x1f2>
 80135e2:	1eb9      	subs	r1, r7, #2
 80135e4:	4620      	mov	r0, r4
 80135e6:	f000 fef3 	bl	80143d0 <__any_on>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d145      	bne.n	801367a <__gethex+0x27e>
 80135ee:	f04f 0a02 	mov.w	sl, #2
 80135f2:	443d      	add	r5, r7
 80135f4:	4639      	mov	r1, r7
 80135f6:	4620      	mov	r0, r4
 80135f8:	f7ff fe9a 	bl	8013330 <rshift>
 80135fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013600:	42ab      	cmp	r3, r5
 8013602:	da4c      	bge.n	801369e <__gethex+0x2a2>
 8013604:	4621      	mov	r1, r4
 8013606:	ee18 0a10 	vmov	r0, s16
 801360a:	f000 fa7d 	bl	8013b08 <_Bfree>
 801360e:	2300      	movs	r3, #0
 8013610:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013612:	27a3      	movs	r7, #163	; 0xa3
 8013614:	6013      	str	r3, [r2, #0]
 8013616:	e785      	b.n	8013524 <__gethex+0x128>
 8013618:	1e73      	subs	r3, r6, #1
 801361a:	9a05      	ldr	r2, [sp, #20]
 801361c:	9303      	str	r3, [sp, #12]
 801361e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013622:	4293      	cmp	r3, r2
 8013624:	d019      	beq.n	801365a <__gethex+0x25e>
 8013626:	f1bb 0f20 	cmp.w	fp, #32
 801362a:	d107      	bne.n	801363c <__gethex+0x240>
 801362c:	9b02      	ldr	r3, [sp, #8]
 801362e:	9a00      	ldr	r2, [sp, #0]
 8013630:	f843 2b04 	str.w	r2, [r3], #4
 8013634:	9302      	str	r3, [sp, #8]
 8013636:	2300      	movs	r3, #0
 8013638:	469b      	mov	fp, r3
 801363a:	9300      	str	r3, [sp, #0]
 801363c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013640:	f7ff fec7 	bl	80133d2 <__hexdig_fun>
 8013644:	f000 000f 	and.w	r0, r0, #15
 8013648:	9b00      	ldr	r3, [sp, #0]
 801364a:	fa00 f00b 	lsl.w	r0, r0, fp
 801364e:	f10b 0b04 	add.w	fp, fp, #4
 8013652:	4303      	orrs	r3, r0
 8013654:	9300      	str	r3, [sp, #0]
 8013656:	9b03      	ldr	r3, [sp, #12]
 8013658:	e00d      	b.n	8013676 <__gethex+0x27a>
 801365a:	9b03      	ldr	r3, [sp, #12]
 801365c:	9a06      	ldr	r2, [sp, #24]
 801365e:	4413      	add	r3, r2
 8013660:	42bb      	cmp	r3, r7
 8013662:	d3e0      	bcc.n	8013626 <__gethex+0x22a>
 8013664:	4618      	mov	r0, r3
 8013666:	4652      	mov	r2, sl
 8013668:	9901      	ldr	r1, [sp, #4]
 801366a:	9307      	str	r3, [sp, #28]
 801366c:	f001 f842 	bl	80146f4 <strncmp>
 8013670:	9b07      	ldr	r3, [sp, #28]
 8013672:	2800      	cmp	r0, #0
 8013674:	d1d7      	bne.n	8013626 <__gethex+0x22a>
 8013676:	461e      	mov	r6, r3
 8013678:	e78b      	b.n	8013592 <__gethex+0x196>
 801367a:	f04f 0a03 	mov.w	sl, #3
 801367e:	e7b8      	b.n	80135f2 <__gethex+0x1f6>
 8013680:	da0a      	bge.n	8013698 <__gethex+0x29c>
 8013682:	1a37      	subs	r7, r6, r0
 8013684:	4621      	mov	r1, r4
 8013686:	ee18 0a10 	vmov	r0, s16
 801368a:	463a      	mov	r2, r7
 801368c:	1bed      	subs	r5, r5, r7
 801368e:	f000 fc57 	bl	8013f40 <__lshift>
 8013692:	4604      	mov	r4, r0
 8013694:	f100 0914 	add.w	r9, r0, #20
 8013698:	f04f 0a00 	mov.w	sl, #0
 801369c:	e7ae      	b.n	80135fc <__gethex+0x200>
 801369e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80136a2:	42a8      	cmp	r0, r5
 80136a4:	dd72      	ble.n	801378c <__gethex+0x390>
 80136a6:	1b45      	subs	r5, r0, r5
 80136a8:	42ae      	cmp	r6, r5
 80136aa:	dc35      	bgt.n	8013718 <__gethex+0x31c>
 80136ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80136b0:	2b02      	cmp	r3, #2
 80136b2:	d029      	beq.n	8013708 <__gethex+0x30c>
 80136b4:	2b03      	cmp	r3, #3
 80136b6:	d02b      	beq.n	8013710 <__gethex+0x314>
 80136b8:	2b01      	cmp	r3, #1
 80136ba:	d11b      	bne.n	80136f4 <__gethex+0x2f8>
 80136bc:	42ae      	cmp	r6, r5
 80136be:	d119      	bne.n	80136f4 <__gethex+0x2f8>
 80136c0:	2e01      	cmp	r6, #1
 80136c2:	d111      	bne.n	80136e8 <__gethex+0x2ec>
 80136c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136c8:	2762      	movs	r7, #98	; 0x62
 80136ca:	9a04      	ldr	r2, [sp, #16]
 80136cc:	6013      	str	r3, [r2, #0]
 80136ce:	2301      	movs	r3, #1
 80136d0:	6123      	str	r3, [r4, #16]
 80136d2:	f8c9 3000 	str.w	r3, [r9]
 80136d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80136d8:	601c      	str	r4, [r3, #0]
 80136da:	e723      	b.n	8013524 <__gethex+0x128>
 80136dc:	080155b8 	.word	0x080155b8
 80136e0:	08015540 	.word	0x08015540
 80136e4:	08015551 	.word	0x08015551
 80136e8:	1e71      	subs	r1, r6, #1
 80136ea:	4620      	mov	r0, r4
 80136ec:	f000 fe70 	bl	80143d0 <__any_on>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	d1e7      	bne.n	80136c4 <__gethex+0x2c8>
 80136f4:	4621      	mov	r1, r4
 80136f6:	ee18 0a10 	vmov	r0, s16
 80136fa:	f000 fa05 	bl	8013b08 <_Bfree>
 80136fe:	2300      	movs	r3, #0
 8013700:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013702:	2750      	movs	r7, #80	; 0x50
 8013704:	6013      	str	r3, [r2, #0]
 8013706:	e70d      	b.n	8013524 <__gethex+0x128>
 8013708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1f2      	bne.n	80136f4 <__gethex+0x2f8>
 801370e:	e7d9      	b.n	80136c4 <__gethex+0x2c8>
 8013710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013712:	2b00      	cmp	r3, #0
 8013714:	d1d6      	bne.n	80136c4 <__gethex+0x2c8>
 8013716:	e7ed      	b.n	80136f4 <__gethex+0x2f8>
 8013718:	1e6f      	subs	r7, r5, #1
 801371a:	f1ba 0f00 	cmp.w	sl, #0
 801371e:	d132      	bne.n	8013786 <__gethex+0x38a>
 8013720:	b127      	cbz	r7, 801372c <__gethex+0x330>
 8013722:	4639      	mov	r1, r7
 8013724:	4620      	mov	r0, r4
 8013726:	f000 fe53 	bl	80143d0 <__any_on>
 801372a:	4682      	mov	sl, r0
 801372c:	117b      	asrs	r3, r7, #5
 801372e:	2101      	movs	r1, #1
 8013730:	f007 071f 	and.w	r7, r7, #31
 8013734:	4620      	mov	r0, r4
 8013736:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801373a:	1b76      	subs	r6, r6, r5
 801373c:	fa01 f707 	lsl.w	r7, r1, r7
 8013740:	4629      	mov	r1, r5
 8013742:	421f      	tst	r7, r3
 8013744:	f04f 0702 	mov.w	r7, #2
 8013748:	bf18      	it	ne
 801374a:	f04a 0a02 	orrne.w	sl, sl, #2
 801374e:	f7ff fdef 	bl	8013330 <rshift>
 8013752:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013756:	f1ba 0f00 	cmp.w	sl, #0
 801375a:	d048      	beq.n	80137ee <__gethex+0x3f2>
 801375c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013760:	2b02      	cmp	r3, #2
 8013762:	d015      	beq.n	8013790 <__gethex+0x394>
 8013764:	2b03      	cmp	r3, #3
 8013766:	d017      	beq.n	8013798 <__gethex+0x39c>
 8013768:	2b01      	cmp	r3, #1
 801376a:	d109      	bne.n	8013780 <__gethex+0x384>
 801376c:	f01a 0f02 	tst.w	sl, #2
 8013770:	d006      	beq.n	8013780 <__gethex+0x384>
 8013772:	f8d9 0000 	ldr.w	r0, [r9]
 8013776:	ea4a 0a00 	orr.w	sl, sl, r0
 801377a:	f01a 0f01 	tst.w	sl, #1
 801377e:	d10e      	bne.n	801379e <__gethex+0x3a2>
 8013780:	f047 0710 	orr.w	r7, r7, #16
 8013784:	e033      	b.n	80137ee <__gethex+0x3f2>
 8013786:	f04f 0a01 	mov.w	sl, #1
 801378a:	e7cf      	b.n	801372c <__gethex+0x330>
 801378c:	2701      	movs	r7, #1
 801378e:	e7e2      	b.n	8013756 <__gethex+0x35a>
 8013790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013792:	f1c3 0301 	rsb	r3, r3, #1
 8013796:	9315      	str	r3, [sp, #84]	; 0x54
 8013798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801379a:	2b00      	cmp	r3, #0
 801379c:	d0f0      	beq.n	8013780 <__gethex+0x384>
 801379e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80137a2:	f104 0314 	add.w	r3, r4, #20
 80137a6:	f04f 0c00 	mov.w	ip, #0
 80137aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80137ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80137b2:	4618      	mov	r0, r3
 80137b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80137b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80137bc:	d01c      	beq.n	80137f8 <__gethex+0x3fc>
 80137be:	3201      	adds	r2, #1
 80137c0:	6002      	str	r2, [r0, #0]
 80137c2:	2f02      	cmp	r7, #2
 80137c4:	f104 0314 	add.w	r3, r4, #20
 80137c8:	d13f      	bne.n	801384a <__gethex+0x44e>
 80137ca:	f8d8 2000 	ldr.w	r2, [r8]
 80137ce:	3a01      	subs	r2, #1
 80137d0:	42b2      	cmp	r2, r6
 80137d2:	d10a      	bne.n	80137ea <__gethex+0x3ee>
 80137d4:	1171      	asrs	r1, r6, #5
 80137d6:	2201      	movs	r2, #1
 80137d8:	f006 061f 	and.w	r6, r6, #31
 80137dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137e0:	fa02 f606 	lsl.w	r6, r2, r6
 80137e4:	421e      	tst	r6, r3
 80137e6:	bf18      	it	ne
 80137e8:	4617      	movne	r7, r2
 80137ea:	f047 0720 	orr.w	r7, r7, #32
 80137ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80137f0:	601c      	str	r4, [r3, #0]
 80137f2:	9b04      	ldr	r3, [sp, #16]
 80137f4:	601d      	str	r5, [r3, #0]
 80137f6:	e695      	b.n	8013524 <__gethex+0x128>
 80137f8:	4299      	cmp	r1, r3
 80137fa:	f843 cc04 	str.w	ip, [r3, #-4]
 80137fe:	d8d8      	bhi.n	80137b2 <__gethex+0x3b6>
 8013800:	68a3      	ldr	r3, [r4, #8]
 8013802:	459b      	cmp	fp, r3
 8013804:	db19      	blt.n	801383a <__gethex+0x43e>
 8013806:	6861      	ldr	r1, [r4, #4]
 8013808:	ee18 0a10 	vmov	r0, s16
 801380c:	3101      	adds	r1, #1
 801380e:	f000 f93b 	bl	8013a88 <_Balloc>
 8013812:	4681      	mov	r9, r0
 8013814:	b918      	cbnz	r0, 801381e <__gethex+0x422>
 8013816:	4b1b      	ldr	r3, [pc, #108]	; (8013884 <__gethex+0x488>)
 8013818:	4602      	mov	r2, r0
 801381a:	2184      	movs	r1, #132	; 0x84
 801381c:	e6a8      	b.n	8013570 <__gethex+0x174>
 801381e:	6922      	ldr	r2, [r4, #16]
 8013820:	f104 010c 	add.w	r1, r4, #12
 8013824:	300c      	adds	r0, #12
 8013826:	3202      	adds	r2, #2
 8013828:	0092      	lsls	r2, r2, #2
 801382a:	f000 f913 	bl	8013a54 <memcpy>
 801382e:	4621      	mov	r1, r4
 8013830:	464c      	mov	r4, r9
 8013832:	ee18 0a10 	vmov	r0, s16
 8013836:	f000 f967 	bl	8013b08 <_Bfree>
 801383a:	6923      	ldr	r3, [r4, #16]
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013842:	6122      	str	r2, [r4, #16]
 8013844:	2201      	movs	r2, #1
 8013846:	615a      	str	r2, [r3, #20]
 8013848:	e7bb      	b.n	80137c2 <__gethex+0x3c6>
 801384a:	6922      	ldr	r2, [r4, #16]
 801384c:	455a      	cmp	r2, fp
 801384e:	dd0b      	ble.n	8013868 <__gethex+0x46c>
 8013850:	2101      	movs	r1, #1
 8013852:	4620      	mov	r0, r4
 8013854:	f7ff fd6c 	bl	8013330 <rshift>
 8013858:	3501      	adds	r5, #1
 801385a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801385e:	42ab      	cmp	r3, r5
 8013860:	f6ff aed0 	blt.w	8013604 <__gethex+0x208>
 8013864:	2701      	movs	r7, #1
 8013866:	e7c0      	b.n	80137ea <__gethex+0x3ee>
 8013868:	f016 061f 	ands.w	r6, r6, #31
 801386c:	d0fa      	beq.n	8013864 <__gethex+0x468>
 801386e:	4453      	add	r3, sl
 8013870:	f1c6 0620 	rsb	r6, r6, #32
 8013874:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013878:	f000 f9fa 	bl	8013c70 <__hi0bits>
 801387c:	42b0      	cmp	r0, r6
 801387e:	dbe7      	blt.n	8013850 <__gethex+0x454>
 8013880:	e7f0      	b.n	8013864 <__gethex+0x468>
 8013882:	bf00      	nop
 8013884:	08015540 	.word	0x08015540

08013888 <L_shift>:
 8013888:	f1c2 0208 	rsb	r2, r2, #8
 801388c:	0092      	lsls	r2, r2, #2
 801388e:	b570      	push	{r4, r5, r6, lr}
 8013890:	f1c2 0620 	rsb	r6, r2, #32
 8013894:	6843      	ldr	r3, [r0, #4]
 8013896:	6804      	ldr	r4, [r0, #0]
 8013898:	fa03 f506 	lsl.w	r5, r3, r6
 801389c:	40d3      	lsrs	r3, r2
 801389e:	432c      	orrs	r4, r5
 80138a0:	6004      	str	r4, [r0, #0]
 80138a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80138a6:	4288      	cmp	r0, r1
 80138a8:	d3f4      	bcc.n	8013894 <L_shift+0xc>
 80138aa:	bd70      	pop	{r4, r5, r6, pc}

080138ac <__match>:
 80138ac:	6803      	ldr	r3, [r0, #0]
 80138ae:	3301      	adds	r3, #1
 80138b0:	b530      	push	{r4, r5, lr}
 80138b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138b6:	b914      	cbnz	r4, 80138be <__match+0x12>
 80138b8:	6003      	str	r3, [r0, #0]
 80138ba:	2001      	movs	r0, #1
 80138bc:	bd30      	pop	{r4, r5, pc}
 80138be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80138c6:	2d19      	cmp	r5, #25
 80138c8:	bf98      	it	ls
 80138ca:	3220      	addls	r2, #32
 80138cc:	42a2      	cmp	r2, r4
 80138ce:	d0f0      	beq.n	80138b2 <__match+0x6>
 80138d0:	2000      	movs	r0, #0
 80138d2:	e7f3      	b.n	80138bc <__match+0x10>

080138d4 <__hexnan>:
 80138d4:	680b      	ldr	r3, [r1, #0]
 80138d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138da:	115e      	asrs	r6, r3, #5
 80138dc:	f013 031f 	ands.w	r3, r3, #31
 80138e0:	f04f 0500 	mov.w	r5, #0
 80138e4:	b087      	sub	sp, #28
 80138e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80138ea:	4690      	mov	r8, r2
 80138ec:	4682      	mov	sl, r0
 80138ee:	6802      	ldr	r2, [r0, #0]
 80138f0:	bf18      	it	ne
 80138f2:	3604      	addne	r6, #4
 80138f4:	46ab      	mov	fp, r5
 80138f6:	9301      	str	r3, [sp, #4]
 80138f8:	1f37      	subs	r7, r6, #4
 80138fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80138fe:	9502      	str	r5, [sp, #8]
 8013900:	46b9      	mov	r9, r7
 8013902:	463c      	mov	r4, r7
 8013904:	1c53      	adds	r3, r2, #1
 8013906:	7851      	ldrb	r1, [r2, #1]
 8013908:	9303      	str	r3, [sp, #12]
 801390a:	b341      	cbz	r1, 801395e <__hexnan+0x8a>
 801390c:	4608      	mov	r0, r1
 801390e:	9205      	str	r2, [sp, #20]
 8013910:	9104      	str	r1, [sp, #16]
 8013912:	f7ff fd5e 	bl	80133d2 <__hexdig_fun>
 8013916:	2800      	cmp	r0, #0
 8013918:	d14f      	bne.n	80139ba <__hexnan+0xe6>
 801391a:	9904      	ldr	r1, [sp, #16]
 801391c:	9a05      	ldr	r2, [sp, #20]
 801391e:	2920      	cmp	r1, #32
 8013920:	d818      	bhi.n	8013954 <__hexnan+0x80>
 8013922:	9b02      	ldr	r3, [sp, #8]
 8013924:	459b      	cmp	fp, r3
 8013926:	dd13      	ble.n	8013950 <__hexnan+0x7c>
 8013928:	454c      	cmp	r4, r9
 801392a:	d206      	bcs.n	801393a <__hexnan+0x66>
 801392c:	2d07      	cmp	r5, #7
 801392e:	dc04      	bgt.n	801393a <__hexnan+0x66>
 8013930:	462a      	mov	r2, r5
 8013932:	4649      	mov	r1, r9
 8013934:	4620      	mov	r0, r4
 8013936:	f7ff ffa7 	bl	8013888 <L_shift>
 801393a:	4544      	cmp	r4, r8
 801393c:	d94f      	bls.n	80139de <__hexnan+0x10a>
 801393e:	2300      	movs	r3, #0
 8013940:	f1a4 0904 	sub.w	r9, r4, #4
 8013944:	f8cd b008 	str.w	fp, [sp, #8]
 8013948:	f844 3c04 	str.w	r3, [r4, #-4]
 801394c:	461d      	mov	r5, r3
 801394e:	464c      	mov	r4, r9
 8013950:	9a03      	ldr	r2, [sp, #12]
 8013952:	e7d7      	b.n	8013904 <__hexnan+0x30>
 8013954:	2929      	cmp	r1, #41	; 0x29
 8013956:	d155      	bne.n	8013a04 <__hexnan+0x130>
 8013958:	3202      	adds	r2, #2
 801395a:	f8ca 2000 	str.w	r2, [sl]
 801395e:	f1bb 0f00 	cmp.w	fp, #0
 8013962:	d04f      	beq.n	8013a04 <__hexnan+0x130>
 8013964:	454c      	cmp	r4, r9
 8013966:	d206      	bcs.n	8013976 <__hexnan+0xa2>
 8013968:	2d07      	cmp	r5, #7
 801396a:	dc04      	bgt.n	8013976 <__hexnan+0xa2>
 801396c:	462a      	mov	r2, r5
 801396e:	4649      	mov	r1, r9
 8013970:	4620      	mov	r0, r4
 8013972:	f7ff ff89 	bl	8013888 <L_shift>
 8013976:	4544      	cmp	r4, r8
 8013978:	d933      	bls.n	80139e2 <__hexnan+0x10e>
 801397a:	f1a8 0204 	sub.w	r2, r8, #4
 801397e:	4623      	mov	r3, r4
 8013980:	f853 1b04 	ldr.w	r1, [r3], #4
 8013984:	429f      	cmp	r7, r3
 8013986:	f842 1f04 	str.w	r1, [r2, #4]!
 801398a:	d2f9      	bcs.n	8013980 <__hexnan+0xac>
 801398c:	1b3b      	subs	r3, r7, r4
 801398e:	3e03      	subs	r6, #3
 8013990:	3401      	adds	r4, #1
 8013992:	2200      	movs	r2, #0
 8013994:	f023 0303 	bic.w	r3, r3, #3
 8013998:	3304      	adds	r3, #4
 801399a:	42b4      	cmp	r4, r6
 801399c:	bf88      	it	hi
 801399e:	2304      	movhi	r3, #4
 80139a0:	4443      	add	r3, r8
 80139a2:	f843 2b04 	str.w	r2, [r3], #4
 80139a6:	429f      	cmp	r7, r3
 80139a8:	d2fb      	bcs.n	80139a2 <__hexnan+0xce>
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	b91b      	cbnz	r3, 80139b6 <__hexnan+0xe2>
 80139ae:	4547      	cmp	r7, r8
 80139b0:	d126      	bne.n	8013a00 <__hexnan+0x12c>
 80139b2:	2301      	movs	r3, #1
 80139b4:	603b      	str	r3, [r7, #0]
 80139b6:	2005      	movs	r0, #5
 80139b8:	e025      	b.n	8013a06 <__hexnan+0x132>
 80139ba:	3501      	adds	r5, #1
 80139bc:	f10b 0b01 	add.w	fp, fp, #1
 80139c0:	2d08      	cmp	r5, #8
 80139c2:	dd05      	ble.n	80139d0 <__hexnan+0xfc>
 80139c4:	4544      	cmp	r4, r8
 80139c6:	d9c3      	bls.n	8013950 <__hexnan+0x7c>
 80139c8:	2300      	movs	r3, #0
 80139ca:	3c04      	subs	r4, #4
 80139cc:	2501      	movs	r5, #1
 80139ce:	6023      	str	r3, [r4, #0]
 80139d0:	6822      	ldr	r2, [r4, #0]
 80139d2:	f000 000f 	and.w	r0, r0, #15
 80139d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80139da:	6022      	str	r2, [r4, #0]
 80139dc:	e7b8      	b.n	8013950 <__hexnan+0x7c>
 80139de:	2508      	movs	r5, #8
 80139e0:	e7b6      	b.n	8013950 <__hexnan+0x7c>
 80139e2:	9b01      	ldr	r3, [sp, #4]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d0e0      	beq.n	80139aa <__hexnan+0xd6>
 80139e8:	f04f 32ff 	mov.w	r2, #4294967295
 80139ec:	f1c3 0320 	rsb	r3, r3, #32
 80139f0:	fa22 f303 	lsr.w	r3, r2, r3
 80139f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80139f8:	401a      	ands	r2, r3
 80139fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80139fe:	e7d4      	b.n	80139aa <__hexnan+0xd6>
 8013a00:	3f04      	subs	r7, #4
 8013a02:	e7d2      	b.n	80139aa <__hexnan+0xd6>
 8013a04:	2004      	movs	r0, #4
 8013a06:	b007      	add	sp, #28
 8013a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a0c <_localeconv_r>:
 8013a0c:	4800      	ldr	r0, [pc, #0]	; (8013a10 <_localeconv_r+0x4>)
 8013a0e:	4770      	bx	lr
 8013a10:	20000258 	.word	0x20000258

08013a14 <__ascii_mbtowc>:
 8013a14:	b082      	sub	sp, #8
 8013a16:	b901      	cbnz	r1, 8013a1a <__ascii_mbtowc+0x6>
 8013a18:	a901      	add	r1, sp, #4
 8013a1a:	b142      	cbz	r2, 8013a2e <__ascii_mbtowc+0x1a>
 8013a1c:	b14b      	cbz	r3, 8013a32 <__ascii_mbtowc+0x1e>
 8013a1e:	7813      	ldrb	r3, [r2, #0]
 8013a20:	600b      	str	r3, [r1, #0]
 8013a22:	7812      	ldrb	r2, [r2, #0]
 8013a24:	1e10      	subs	r0, r2, #0
 8013a26:	bf18      	it	ne
 8013a28:	2001      	movne	r0, #1
 8013a2a:	b002      	add	sp, #8
 8013a2c:	4770      	bx	lr
 8013a2e:	4610      	mov	r0, r2
 8013a30:	e7fb      	b.n	8013a2a <__ascii_mbtowc+0x16>
 8013a32:	f06f 0001 	mvn.w	r0, #1
 8013a36:	e7f8      	b.n	8013a2a <__ascii_mbtowc+0x16>

08013a38 <memchr>:
 8013a38:	b2c9      	uxtb	r1, r1
 8013a3a:	4402      	add	r2, r0
 8013a3c:	b510      	push	{r4, lr}
 8013a3e:	4290      	cmp	r0, r2
 8013a40:	4603      	mov	r3, r0
 8013a42:	d101      	bne.n	8013a48 <memchr+0x10>
 8013a44:	2300      	movs	r3, #0
 8013a46:	e003      	b.n	8013a50 <memchr+0x18>
 8013a48:	781c      	ldrb	r4, [r3, #0]
 8013a4a:	3001      	adds	r0, #1
 8013a4c:	428c      	cmp	r4, r1
 8013a4e:	d1f6      	bne.n	8013a3e <memchr+0x6>
 8013a50:	4618      	mov	r0, r3
 8013a52:	bd10      	pop	{r4, pc}

08013a54 <memcpy>:
 8013a54:	440a      	add	r2, r1
 8013a56:	1e43      	subs	r3, r0, #1
 8013a58:	4291      	cmp	r1, r2
 8013a5a:	d100      	bne.n	8013a5e <memcpy+0xa>
 8013a5c:	4770      	bx	lr
 8013a5e:	b510      	push	{r4, lr}
 8013a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a64:	4291      	cmp	r1, r2
 8013a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a6a:	d1f9      	bne.n	8013a60 <memcpy+0xc>
 8013a6c:	bd10      	pop	{r4, pc}
	...

08013a70 <__malloc_lock>:
 8013a70:	4801      	ldr	r0, [pc, #4]	; (8013a78 <__malloc_lock+0x8>)
 8013a72:	f000 be92 	b.w	801479a <__retarget_lock_acquire_recursive>
 8013a76:	bf00      	nop
 8013a78:	2000217c 	.word	0x2000217c

08013a7c <__malloc_unlock>:
 8013a7c:	4801      	ldr	r0, [pc, #4]	; (8013a84 <__malloc_unlock+0x8>)
 8013a7e:	f000 be8d 	b.w	801479c <__retarget_lock_release_recursive>
 8013a82:	bf00      	nop
 8013a84:	2000217c 	.word	0x2000217c

08013a88 <_Balloc>:
 8013a88:	b570      	push	{r4, r5, r6, lr}
 8013a8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	460d      	mov	r5, r1
 8013a90:	b976      	cbnz	r6, 8013ab0 <_Balloc+0x28>
 8013a92:	2010      	movs	r0, #16
 8013a94:	f7fc ff3c 	bl	8010910 <malloc>
 8013a98:	4602      	mov	r2, r0
 8013a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8013a9c:	b920      	cbnz	r0, 8013aa8 <_Balloc+0x20>
 8013a9e:	4b18      	ldr	r3, [pc, #96]	; (8013b00 <_Balloc+0x78>)
 8013aa0:	2166      	movs	r1, #102	; 0x66
 8013aa2:	4818      	ldr	r0, [pc, #96]	; (8013b04 <_Balloc+0x7c>)
 8013aa4:	f000 fe48 	bl	8014738 <__assert_func>
 8013aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013aac:	6006      	str	r6, [r0, #0]
 8013aae:	60c6      	str	r6, [r0, #12]
 8013ab0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013ab2:	68f3      	ldr	r3, [r6, #12]
 8013ab4:	b183      	cbz	r3, 8013ad8 <_Balloc+0x50>
 8013ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ab8:	68db      	ldr	r3, [r3, #12]
 8013aba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013abe:	b9b8      	cbnz	r0, 8013af0 <_Balloc+0x68>
 8013ac0:	2101      	movs	r1, #1
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	fa01 f605 	lsl.w	r6, r1, r5
 8013ac8:	1d72      	adds	r2, r6, #5
 8013aca:	0092      	lsls	r2, r2, #2
 8013acc:	f000 fca1 	bl	8014412 <_calloc_r>
 8013ad0:	b160      	cbz	r0, 8013aec <_Balloc+0x64>
 8013ad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013ad6:	e00e      	b.n	8013af6 <_Balloc+0x6e>
 8013ad8:	2221      	movs	r2, #33	; 0x21
 8013ada:	2104      	movs	r1, #4
 8013adc:	4620      	mov	r0, r4
 8013ade:	f000 fc98 	bl	8014412 <_calloc_r>
 8013ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ae4:	60f0      	str	r0, [r6, #12]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d1e4      	bne.n	8013ab6 <_Balloc+0x2e>
 8013aec:	2000      	movs	r0, #0
 8013aee:	bd70      	pop	{r4, r5, r6, pc}
 8013af0:	6802      	ldr	r2, [r0, #0]
 8013af2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013af6:	2300      	movs	r3, #0
 8013af8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013afc:	e7f7      	b.n	8013aee <_Balloc+0x66>
 8013afe:	bf00      	nop
 8013b00:	080154ce 	.word	0x080154ce
 8013b04:	080155cc 	.word	0x080155cc

08013b08 <_Bfree>:
 8013b08:	b570      	push	{r4, r5, r6, lr}
 8013b0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	460c      	mov	r4, r1
 8013b10:	b976      	cbnz	r6, 8013b30 <_Bfree+0x28>
 8013b12:	2010      	movs	r0, #16
 8013b14:	f7fc fefc 	bl	8010910 <malloc>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	6268      	str	r0, [r5, #36]	; 0x24
 8013b1c:	b920      	cbnz	r0, 8013b28 <_Bfree+0x20>
 8013b1e:	4b09      	ldr	r3, [pc, #36]	; (8013b44 <_Bfree+0x3c>)
 8013b20:	218a      	movs	r1, #138	; 0x8a
 8013b22:	4809      	ldr	r0, [pc, #36]	; (8013b48 <_Bfree+0x40>)
 8013b24:	f000 fe08 	bl	8014738 <__assert_func>
 8013b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b2c:	6006      	str	r6, [r0, #0]
 8013b2e:	60c6      	str	r6, [r0, #12]
 8013b30:	b13c      	cbz	r4, 8013b42 <_Bfree+0x3a>
 8013b32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013b34:	6862      	ldr	r2, [r4, #4]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b3c:	6021      	str	r1, [r4, #0]
 8013b3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b42:	bd70      	pop	{r4, r5, r6, pc}
 8013b44:	080154ce 	.word	0x080154ce
 8013b48:	080155cc 	.word	0x080155cc

08013b4c <__multadd>:
 8013b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	f101 0c14 	add.w	ip, r1, #20
 8013b54:	4607      	mov	r7, r0
 8013b56:	460c      	mov	r4, r1
 8013b58:	461e      	mov	r6, r3
 8013b5a:	690d      	ldr	r5, [r1, #16]
 8013b5c:	2000      	movs	r0, #0
 8013b5e:	f8dc 3000 	ldr.w	r3, [ip]
 8013b62:	3001      	adds	r0, #1
 8013b64:	b299      	uxth	r1, r3
 8013b66:	4285      	cmp	r5, r0
 8013b68:	fb02 6101 	mla	r1, r2, r1, r6
 8013b6c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013b70:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8013b74:	b289      	uxth	r1, r1
 8013b76:	fb02 3306 	mla	r3, r2, r6, r3
 8013b7a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013b7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013b82:	f84c 1b04 	str.w	r1, [ip], #4
 8013b86:	dcea      	bgt.n	8013b5e <__multadd+0x12>
 8013b88:	b30e      	cbz	r6, 8013bce <__multadd+0x82>
 8013b8a:	68a3      	ldr	r3, [r4, #8]
 8013b8c:	42ab      	cmp	r3, r5
 8013b8e:	dc19      	bgt.n	8013bc4 <__multadd+0x78>
 8013b90:	6861      	ldr	r1, [r4, #4]
 8013b92:	4638      	mov	r0, r7
 8013b94:	3101      	adds	r1, #1
 8013b96:	f7ff ff77 	bl	8013a88 <_Balloc>
 8013b9a:	4680      	mov	r8, r0
 8013b9c:	b928      	cbnz	r0, 8013baa <__multadd+0x5e>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	4b0c      	ldr	r3, [pc, #48]	; (8013bd4 <__multadd+0x88>)
 8013ba2:	21b5      	movs	r1, #181	; 0xb5
 8013ba4:	480c      	ldr	r0, [pc, #48]	; (8013bd8 <__multadd+0x8c>)
 8013ba6:	f000 fdc7 	bl	8014738 <__assert_func>
 8013baa:	6922      	ldr	r2, [r4, #16]
 8013bac:	f104 010c 	add.w	r1, r4, #12
 8013bb0:	300c      	adds	r0, #12
 8013bb2:	3202      	adds	r2, #2
 8013bb4:	0092      	lsls	r2, r2, #2
 8013bb6:	f7ff ff4d 	bl	8013a54 <memcpy>
 8013bba:	4621      	mov	r1, r4
 8013bbc:	4644      	mov	r4, r8
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	f7ff ffa2 	bl	8013b08 <_Bfree>
 8013bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013bc8:	3501      	adds	r5, #1
 8013bca:	615e      	str	r6, [r3, #20]
 8013bcc:	6125      	str	r5, [r4, #16]
 8013bce:	4620      	mov	r0, r4
 8013bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd4:	08015540 	.word	0x08015540
 8013bd8:	080155cc 	.word	0x080155cc

08013bdc <__s2b>:
 8013bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013be0:	4615      	mov	r5, r2
 8013be2:	461f      	mov	r7, r3
 8013be4:	2209      	movs	r2, #9
 8013be6:	3308      	adds	r3, #8
 8013be8:	460c      	mov	r4, r1
 8013bea:	4606      	mov	r6, r0
 8013bec:	2100      	movs	r1, #0
 8013bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	db09      	blt.n	8013c0c <__s2b+0x30>
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f7ff ff45 	bl	8013a88 <_Balloc>
 8013bfe:	b940      	cbnz	r0, 8013c12 <__s2b+0x36>
 8013c00:	4602      	mov	r2, r0
 8013c02:	4b19      	ldr	r3, [pc, #100]	; (8013c68 <__s2b+0x8c>)
 8013c04:	21ce      	movs	r1, #206	; 0xce
 8013c06:	4819      	ldr	r0, [pc, #100]	; (8013c6c <__s2b+0x90>)
 8013c08:	f000 fd96 	bl	8014738 <__assert_func>
 8013c0c:	0052      	lsls	r2, r2, #1
 8013c0e:	3101      	adds	r1, #1
 8013c10:	e7f0      	b.n	8013bf4 <__s2b+0x18>
 8013c12:	9b08      	ldr	r3, [sp, #32]
 8013c14:	2d09      	cmp	r5, #9
 8013c16:	6143      	str	r3, [r0, #20]
 8013c18:	f04f 0301 	mov.w	r3, #1
 8013c1c:	6103      	str	r3, [r0, #16]
 8013c1e:	dd16      	ble.n	8013c4e <__s2b+0x72>
 8013c20:	f104 0909 	add.w	r9, r4, #9
 8013c24:	442c      	add	r4, r5
 8013c26:	46c8      	mov	r8, r9
 8013c28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013c2c:	4601      	mov	r1, r0
 8013c2e:	220a      	movs	r2, #10
 8013c30:	4630      	mov	r0, r6
 8013c32:	3b30      	subs	r3, #48	; 0x30
 8013c34:	f7ff ff8a 	bl	8013b4c <__multadd>
 8013c38:	45a0      	cmp	r8, r4
 8013c3a:	d1f5      	bne.n	8013c28 <__s2b+0x4c>
 8013c3c:	f1a5 0408 	sub.w	r4, r5, #8
 8013c40:	444c      	add	r4, r9
 8013c42:	1b2d      	subs	r5, r5, r4
 8013c44:	1963      	adds	r3, r4, r5
 8013c46:	42bb      	cmp	r3, r7
 8013c48:	db04      	blt.n	8013c54 <__s2b+0x78>
 8013c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c4e:	340a      	adds	r4, #10
 8013c50:	2509      	movs	r5, #9
 8013c52:	e7f6      	b.n	8013c42 <__s2b+0x66>
 8013c54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013c58:	4601      	mov	r1, r0
 8013c5a:	220a      	movs	r2, #10
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	3b30      	subs	r3, #48	; 0x30
 8013c60:	f7ff ff74 	bl	8013b4c <__multadd>
 8013c64:	e7ee      	b.n	8013c44 <__s2b+0x68>
 8013c66:	bf00      	nop
 8013c68:	08015540 	.word	0x08015540
 8013c6c:	080155cc 	.word	0x080155cc

08013c70 <__hi0bits>:
 8013c70:	0c03      	lsrs	r3, r0, #16
 8013c72:	041b      	lsls	r3, r3, #16
 8013c74:	b9d3      	cbnz	r3, 8013cac <__hi0bits+0x3c>
 8013c76:	0400      	lsls	r0, r0, #16
 8013c78:	2310      	movs	r3, #16
 8013c7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013c7e:	bf04      	itt	eq
 8013c80:	0200      	lsleq	r0, r0, #8
 8013c82:	3308      	addeq	r3, #8
 8013c84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013c88:	bf04      	itt	eq
 8013c8a:	0100      	lsleq	r0, r0, #4
 8013c8c:	3304      	addeq	r3, #4
 8013c8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013c92:	bf04      	itt	eq
 8013c94:	0080      	lsleq	r0, r0, #2
 8013c96:	3302      	addeq	r3, #2
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	db05      	blt.n	8013ca8 <__hi0bits+0x38>
 8013c9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013ca0:	f103 0301 	add.w	r3, r3, #1
 8013ca4:	bf08      	it	eq
 8013ca6:	2320      	moveq	r3, #32
 8013ca8:	4618      	mov	r0, r3
 8013caa:	4770      	bx	lr
 8013cac:	2300      	movs	r3, #0
 8013cae:	e7e4      	b.n	8013c7a <__hi0bits+0xa>

08013cb0 <__lo0bits>:
 8013cb0:	6803      	ldr	r3, [r0, #0]
 8013cb2:	4601      	mov	r1, r0
 8013cb4:	f013 0207 	ands.w	r2, r3, #7
 8013cb8:	d00b      	beq.n	8013cd2 <__lo0bits+0x22>
 8013cba:	07da      	lsls	r2, r3, #31
 8013cbc:	d423      	bmi.n	8013d06 <__lo0bits+0x56>
 8013cbe:	0798      	lsls	r0, r3, #30
 8013cc0:	bf47      	ittee	mi
 8013cc2:	085b      	lsrmi	r3, r3, #1
 8013cc4:	2001      	movmi	r0, #1
 8013cc6:	089b      	lsrpl	r3, r3, #2
 8013cc8:	2002      	movpl	r0, #2
 8013cca:	bf4c      	ite	mi
 8013ccc:	600b      	strmi	r3, [r1, #0]
 8013cce:	600b      	strpl	r3, [r1, #0]
 8013cd0:	4770      	bx	lr
 8013cd2:	b298      	uxth	r0, r3
 8013cd4:	b9a8      	cbnz	r0, 8013d02 <__lo0bits+0x52>
 8013cd6:	0c1b      	lsrs	r3, r3, #16
 8013cd8:	2010      	movs	r0, #16
 8013cda:	b2da      	uxtb	r2, r3
 8013cdc:	b90a      	cbnz	r2, 8013ce2 <__lo0bits+0x32>
 8013cde:	3008      	adds	r0, #8
 8013ce0:	0a1b      	lsrs	r3, r3, #8
 8013ce2:	071a      	lsls	r2, r3, #28
 8013ce4:	bf04      	itt	eq
 8013ce6:	091b      	lsreq	r3, r3, #4
 8013ce8:	3004      	addeq	r0, #4
 8013cea:	079a      	lsls	r2, r3, #30
 8013cec:	bf04      	itt	eq
 8013cee:	089b      	lsreq	r3, r3, #2
 8013cf0:	3002      	addeq	r0, #2
 8013cf2:	07da      	lsls	r2, r3, #31
 8013cf4:	d403      	bmi.n	8013cfe <__lo0bits+0x4e>
 8013cf6:	085b      	lsrs	r3, r3, #1
 8013cf8:	f100 0001 	add.w	r0, r0, #1
 8013cfc:	d005      	beq.n	8013d0a <__lo0bits+0x5a>
 8013cfe:	600b      	str	r3, [r1, #0]
 8013d00:	4770      	bx	lr
 8013d02:	4610      	mov	r0, r2
 8013d04:	e7e9      	b.n	8013cda <__lo0bits+0x2a>
 8013d06:	2000      	movs	r0, #0
 8013d08:	4770      	bx	lr
 8013d0a:	2020      	movs	r0, #32
 8013d0c:	4770      	bx	lr
	...

08013d10 <__i2b>:
 8013d10:	b510      	push	{r4, lr}
 8013d12:	460c      	mov	r4, r1
 8013d14:	2101      	movs	r1, #1
 8013d16:	f7ff feb7 	bl	8013a88 <_Balloc>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	b928      	cbnz	r0, 8013d2a <__i2b+0x1a>
 8013d1e:	4b05      	ldr	r3, [pc, #20]	; (8013d34 <__i2b+0x24>)
 8013d20:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013d24:	4804      	ldr	r0, [pc, #16]	; (8013d38 <__i2b+0x28>)
 8013d26:	f000 fd07 	bl	8014738 <__assert_func>
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	6144      	str	r4, [r0, #20]
 8013d2e:	6103      	str	r3, [r0, #16]
 8013d30:	bd10      	pop	{r4, pc}
 8013d32:	bf00      	nop
 8013d34:	08015540 	.word	0x08015540
 8013d38:	080155cc 	.word	0x080155cc

08013d3c <__multiply>:
 8013d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d40:	4691      	mov	r9, r2
 8013d42:	690a      	ldr	r2, [r1, #16]
 8013d44:	460c      	mov	r4, r1
 8013d46:	b085      	sub	sp, #20
 8013d48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	bfbe      	ittt	lt
 8013d50:	460b      	movlt	r3, r1
 8013d52:	464c      	movlt	r4, r9
 8013d54:	4699      	movlt	r9, r3
 8013d56:	6927      	ldr	r7, [r4, #16]
 8013d58:	68a3      	ldr	r3, [r4, #8]
 8013d5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013d5e:	6861      	ldr	r1, [r4, #4]
 8013d60:	eb07 060a 	add.w	r6, r7, sl
 8013d64:	42b3      	cmp	r3, r6
 8013d66:	bfb8      	it	lt
 8013d68:	3101      	addlt	r1, #1
 8013d6a:	f7ff fe8d 	bl	8013a88 <_Balloc>
 8013d6e:	b930      	cbnz	r0, 8013d7e <__multiply+0x42>
 8013d70:	4602      	mov	r2, r0
 8013d72:	4b44      	ldr	r3, [pc, #272]	; (8013e84 <__multiply+0x148>)
 8013d74:	f240 115d 	movw	r1, #349	; 0x15d
 8013d78:	4843      	ldr	r0, [pc, #268]	; (8013e88 <__multiply+0x14c>)
 8013d7a:	f000 fcdd 	bl	8014738 <__assert_func>
 8013d7e:	f100 0514 	add.w	r5, r0, #20
 8013d82:	2200      	movs	r2, #0
 8013d84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d88:	462b      	mov	r3, r5
 8013d8a:	4543      	cmp	r3, r8
 8013d8c:	d321      	bcc.n	8013dd2 <__multiply+0x96>
 8013d8e:	f104 0314 	add.w	r3, r4, #20
 8013d92:	f104 0115 	add.w	r1, r4, #21
 8013d96:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013d9a:	f109 0314 	add.w	r3, r9, #20
 8013d9e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013da2:	9202      	str	r2, [sp, #8]
 8013da4:	1b3a      	subs	r2, r7, r4
 8013da6:	3a15      	subs	r2, #21
 8013da8:	f022 0203 	bic.w	r2, r2, #3
 8013dac:	3204      	adds	r2, #4
 8013dae:	428f      	cmp	r7, r1
 8013db0:	bf38      	it	cc
 8013db2:	2204      	movcc	r2, #4
 8013db4:	9201      	str	r2, [sp, #4]
 8013db6:	9a02      	ldr	r2, [sp, #8]
 8013db8:	9303      	str	r3, [sp, #12]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d80c      	bhi.n	8013dd8 <__multiply+0x9c>
 8013dbe:	2e00      	cmp	r6, #0
 8013dc0:	dd03      	ble.n	8013dca <__multiply+0x8e>
 8013dc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d05a      	beq.n	8013e80 <__multiply+0x144>
 8013dca:	6106      	str	r6, [r0, #16]
 8013dcc:	b005      	add	sp, #20
 8013dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd2:	f843 2b04 	str.w	r2, [r3], #4
 8013dd6:	e7d8      	b.n	8013d8a <__multiply+0x4e>
 8013dd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8013ddc:	f1ba 0f00 	cmp.w	sl, #0
 8013de0:	d024      	beq.n	8013e2c <__multiply+0xf0>
 8013de2:	f104 0e14 	add.w	lr, r4, #20
 8013de6:	46a9      	mov	r9, r5
 8013de8:	f04f 0c00 	mov.w	ip, #0
 8013dec:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013df0:	f8d9 1000 	ldr.w	r1, [r9]
 8013df4:	fa1f fb82 	uxth.w	fp, r2
 8013df8:	4577      	cmp	r7, lr
 8013dfa:	b289      	uxth	r1, r1
 8013dfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8013e00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013e04:	f8d9 2000 	ldr.w	r2, [r9]
 8013e08:	4461      	add	r1, ip
 8013e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013e16:	b289      	uxth	r1, r1
 8013e18:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013e20:	f849 1b04 	str.w	r1, [r9], #4
 8013e24:	d8e2      	bhi.n	8013dec <__multiply+0xb0>
 8013e26:	9a01      	ldr	r2, [sp, #4]
 8013e28:	f845 c002 	str.w	ip, [r5, r2]
 8013e2c:	9a03      	ldr	r2, [sp, #12]
 8013e2e:	3304      	adds	r3, #4
 8013e30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013e34:	f1b9 0f00 	cmp.w	r9, #0
 8013e38:	d020      	beq.n	8013e7c <__multiply+0x140>
 8013e3a:	6829      	ldr	r1, [r5, #0]
 8013e3c:	f104 0c14 	add.w	ip, r4, #20
 8013e40:	46ae      	mov	lr, r5
 8013e42:	f04f 0a00 	mov.w	sl, #0
 8013e46:	f8bc b000 	ldrh.w	fp, [ip]
 8013e4a:	b289      	uxth	r1, r1
 8013e4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013e50:	fb09 220b 	mla	r2, r9, fp, r2
 8013e54:	4492      	add	sl, r2
 8013e56:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013e5a:	f84e 1b04 	str.w	r1, [lr], #4
 8013e5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013e62:	f8be 1000 	ldrh.w	r1, [lr]
 8013e66:	0c12      	lsrs	r2, r2, #16
 8013e68:	4567      	cmp	r7, ip
 8013e6a:	fb09 1102 	mla	r1, r9, r2, r1
 8013e6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013e72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013e76:	d8e6      	bhi.n	8013e46 <__multiply+0x10a>
 8013e78:	9a01      	ldr	r2, [sp, #4]
 8013e7a:	50a9      	str	r1, [r5, r2]
 8013e7c:	3504      	adds	r5, #4
 8013e7e:	e79a      	b.n	8013db6 <__multiply+0x7a>
 8013e80:	3e01      	subs	r6, #1
 8013e82:	e79c      	b.n	8013dbe <__multiply+0x82>
 8013e84:	08015540 	.word	0x08015540
 8013e88:	080155cc 	.word	0x080155cc

08013e8c <__pow5mult>:
 8013e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e90:	4615      	mov	r5, r2
 8013e92:	f012 0203 	ands.w	r2, r2, #3
 8013e96:	4606      	mov	r6, r0
 8013e98:	460f      	mov	r7, r1
 8013e9a:	d007      	beq.n	8013eac <__pow5mult+0x20>
 8013e9c:	3a01      	subs	r2, #1
 8013e9e:	4c25      	ldr	r4, [pc, #148]	; (8013f34 <__pow5mult+0xa8>)
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013ea6:	f7ff fe51 	bl	8013b4c <__multadd>
 8013eaa:	4607      	mov	r7, r0
 8013eac:	10ad      	asrs	r5, r5, #2
 8013eae:	d03d      	beq.n	8013f2c <__pow5mult+0xa0>
 8013eb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013eb2:	b97c      	cbnz	r4, 8013ed4 <__pow5mult+0x48>
 8013eb4:	2010      	movs	r0, #16
 8013eb6:	f7fc fd2b 	bl	8010910 <malloc>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	6270      	str	r0, [r6, #36]	; 0x24
 8013ebe:	b928      	cbnz	r0, 8013ecc <__pow5mult+0x40>
 8013ec0:	4b1d      	ldr	r3, [pc, #116]	; (8013f38 <__pow5mult+0xac>)
 8013ec2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013ec6:	481d      	ldr	r0, [pc, #116]	; (8013f3c <__pow5mult+0xb0>)
 8013ec8:	f000 fc36 	bl	8014738 <__assert_func>
 8013ecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ed0:	6004      	str	r4, [r0, #0]
 8013ed2:	60c4      	str	r4, [r0, #12]
 8013ed4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013ed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013edc:	b94c      	cbnz	r4, 8013ef2 <__pow5mult+0x66>
 8013ede:	f240 2171 	movw	r1, #625	; 0x271
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f7ff ff14 	bl	8013d10 <__i2b>
 8013ee8:	2300      	movs	r3, #0
 8013eea:	4604      	mov	r4, r0
 8013eec:	f8c8 0008 	str.w	r0, [r8, #8]
 8013ef0:	6003      	str	r3, [r0, #0]
 8013ef2:	f04f 0900 	mov.w	r9, #0
 8013ef6:	07eb      	lsls	r3, r5, #31
 8013ef8:	d50a      	bpl.n	8013f10 <__pow5mult+0x84>
 8013efa:	4639      	mov	r1, r7
 8013efc:	4622      	mov	r2, r4
 8013efe:	4630      	mov	r0, r6
 8013f00:	f7ff ff1c 	bl	8013d3c <__multiply>
 8013f04:	4680      	mov	r8, r0
 8013f06:	4639      	mov	r1, r7
 8013f08:	4630      	mov	r0, r6
 8013f0a:	4647      	mov	r7, r8
 8013f0c:	f7ff fdfc 	bl	8013b08 <_Bfree>
 8013f10:	106d      	asrs	r5, r5, #1
 8013f12:	d00b      	beq.n	8013f2c <__pow5mult+0xa0>
 8013f14:	6820      	ldr	r0, [r4, #0]
 8013f16:	b938      	cbnz	r0, 8013f28 <__pow5mult+0x9c>
 8013f18:	4622      	mov	r2, r4
 8013f1a:	4621      	mov	r1, r4
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f7ff ff0d 	bl	8013d3c <__multiply>
 8013f22:	6020      	str	r0, [r4, #0]
 8013f24:	f8c0 9000 	str.w	r9, [r0]
 8013f28:	4604      	mov	r4, r0
 8013f2a:	e7e4      	b.n	8013ef6 <__pow5mult+0x6a>
 8013f2c:	4638      	mov	r0, r7
 8013f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f32:	bf00      	nop
 8013f34:	08015718 	.word	0x08015718
 8013f38:	080154ce 	.word	0x080154ce
 8013f3c:	080155cc 	.word	0x080155cc

08013f40 <__lshift>:
 8013f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f44:	460c      	mov	r4, r1
 8013f46:	4607      	mov	r7, r0
 8013f48:	4691      	mov	r9, r2
 8013f4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f4e:	6923      	ldr	r3, [r4, #16]
 8013f50:	6849      	ldr	r1, [r1, #4]
 8013f52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f56:	68a3      	ldr	r3, [r4, #8]
 8013f58:	f108 0601 	add.w	r6, r8, #1
 8013f5c:	42b3      	cmp	r3, r6
 8013f5e:	db0b      	blt.n	8013f78 <__lshift+0x38>
 8013f60:	4638      	mov	r0, r7
 8013f62:	f7ff fd91 	bl	8013a88 <_Balloc>
 8013f66:	4605      	mov	r5, r0
 8013f68:	b948      	cbnz	r0, 8013f7e <__lshift+0x3e>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	4b2a      	ldr	r3, [pc, #168]	; (8014018 <__lshift+0xd8>)
 8013f6e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013f72:	482a      	ldr	r0, [pc, #168]	; (801401c <__lshift+0xdc>)
 8013f74:	f000 fbe0 	bl	8014738 <__assert_func>
 8013f78:	3101      	adds	r1, #1
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	e7ee      	b.n	8013f5c <__lshift+0x1c>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	f100 0114 	add.w	r1, r0, #20
 8013f84:	f100 0210 	add.w	r2, r0, #16
 8013f88:	4618      	mov	r0, r3
 8013f8a:	4553      	cmp	r3, sl
 8013f8c:	db37      	blt.n	8013ffe <__lshift+0xbe>
 8013f8e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f92:	f104 0314 	add.w	r3, r4, #20
 8013f96:	6920      	ldr	r0, [r4, #16]
 8013f98:	f019 091f 	ands.w	r9, r9, #31
 8013f9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013fa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013fa4:	d02f      	beq.n	8014006 <__lshift+0xc6>
 8013fa6:	f1c9 0e20 	rsb	lr, r9, #32
 8013faa:	468a      	mov	sl, r1
 8013fac:	f04f 0c00 	mov.w	ip, #0
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	fa02 f209 	lsl.w	r2, r2, r9
 8013fb6:	ea42 020c 	orr.w	r2, r2, ip
 8013fba:	f84a 2b04 	str.w	r2, [sl], #4
 8013fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fc2:	4298      	cmp	r0, r3
 8013fc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013fc8:	d8f2      	bhi.n	8013fb0 <__lshift+0x70>
 8013fca:	1b03      	subs	r3, r0, r4
 8013fcc:	f104 0215 	add.w	r2, r4, #21
 8013fd0:	3b15      	subs	r3, #21
 8013fd2:	f023 0303 	bic.w	r3, r3, #3
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	4290      	cmp	r0, r2
 8013fda:	bf38      	it	cc
 8013fdc:	2304      	movcc	r3, #4
 8013fde:	f841 c003 	str.w	ip, [r1, r3]
 8013fe2:	f1bc 0f00 	cmp.w	ip, #0
 8013fe6:	d001      	beq.n	8013fec <__lshift+0xac>
 8013fe8:	f108 0602 	add.w	r6, r8, #2
 8013fec:	3e01      	subs	r6, #1
 8013fee:	4638      	mov	r0, r7
 8013ff0:	4621      	mov	r1, r4
 8013ff2:	612e      	str	r6, [r5, #16]
 8013ff4:	f7ff fd88 	bl	8013b08 <_Bfree>
 8013ff8:	4628      	mov	r0, r5
 8013ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ffe:	3301      	adds	r3, #1
 8014000:	f842 0f04 	str.w	r0, [r2, #4]!
 8014004:	e7c1      	b.n	8013f8a <__lshift+0x4a>
 8014006:	3904      	subs	r1, #4
 8014008:	f853 2b04 	ldr.w	r2, [r3], #4
 801400c:	4298      	cmp	r0, r3
 801400e:	f841 2f04 	str.w	r2, [r1, #4]!
 8014012:	d8f9      	bhi.n	8014008 <__lshift+0xc8>
 8014014:	e7ea      	b.n	8013fec <__lshift+0xac>
 8014016:	bf00      	nop
 8014018:	08015540 	.word	0x08015540
 801401c:	080155cc 	.word	0x080155cc

08014020 <__mcmp>:
 8014020:	6902      	ldr	r2, [r0, #16]
 8014022:	b530      	push	{r4, r5, lr}
 8014024:	690c      	ldr	r4, [r1, #16]
 8014026:	1b12      	subs	r2, r2, r4
 8014028:	d10e      	bne.n	8014048 <__mcmp+0x28>
 801402a:	f100 0314 	add.w	r3, r0, #20
 801402e:	3114      	adds	r1, #20
 8014030:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014034:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014038:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801403c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014040:	42a5      	cmp	r5, r4
 8014042:	d003      	beq.n	801404c <__mcmp+0x2c>
 8014044:	d305      	bcc.n	8014052 <__mcmp+0x32>
 8014046:	2201      	movs	r2, #1
 8014048:	4610      	mov	r0, r2
 801404a:	bd30      	pop	{r4, r5, pc}
 801404c:	4283      	cmp	r3, r0
 801404e:	d3f3      	bcc.n	8014038 <__mcmp+0x18>
 8014050:	e7fa      	b.n	8014048 <__mcmp+0x28>
 8014052:	f04f 32ff 	mov.w	r2, #4294967295
 8014056:	e7f7      	b.n	8014048 <__mcmp+0x28>

08014058 <__mdiff>:
 8014058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405c:	460c      	mov	r4, r1
 801405e:	4606      	mov	r6, r0
 8014060:	4611      	mov	r1, r2
 8014062:	4692      	mov	sl, r2
 8014064:	4620      	mov	r0, r4
 8014066:	f7ff ffdb 	bl	8014020 <__mcmp>
 801406a:	1e05      	subs	r5, r0, #0
 801406c:	d110      	bne.n	8014090 <__mdiff+0x38>
 801406e:	4629      	mov	r1, r5
 8014070:	4630      	mov	r0, r6
 8014072:	f7ff fd09 	bl	8013a88 <_Balloc>
 8014076:	b930      	cbnz	r0, 8014086 <__mdiff+0x2e>
 8014078:	4b3d      	ldr	r3, [pc, #244]	; (8014170 <__mdiff+0x118>)
 801407a:	4602      	mov	r2, r0
 801407c:	f240 2132 	movw	r1, #562	; 0x232
 8014080:	483c      	ldr	r0, [pc, #240]	; (8014174 <__mdiff+0x11c>)
 8014082:	f000 fb59 	bl	8014738 <__assert_func>
 8014086:	2301      	movs	r3, #1
 8014088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801408c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014090:	bfa4      	itt	ge
 8014092:	4653      	movge	r3, sl
 8014094:	46a2      	movge	sl, r4
 8014096:	4630      	mov	r0, r6
 8014098:	bfa8      	it	ge
 801409a:	2500      	movge	r5, #0
 801409c:	f8da 1004 	ldr.w	r1, [sl, #4]
 80140a0:	bfac      	ite	ge
 80140a2:	461c      	movge	r4, r3
 80140a4:	2501      	movlt	r5, #1
 80140a6:	f7ff fcef 	bl	8013a88 <_Balloc>
 80140aa:	b920      	cbnz	r0, 80140b6 <__mdiff+0x5e>
 80140ac:	4b30      	ldr	r3, [pc, #192]	; (8014170 <__mdiff+0x118>)
 80140ae:	4602      	mov	r2, r0
 80140b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80140b4:	e7e4      	b.n	8014080 <__mdiff+0x28>
 80140b6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80140ba:	f104 0914 	add.w	r9, r4, #20
 80140be:	6926      	ldr	r6, [r4, #16]
 80140c0:	f100 0814 	add.w	r8, r0, #20
 80140c4:	60c5      	str	r5, [r0, #12]
 80140c6:	f10a 0514 	add.w	r5, sl, #20
 80140ca:	f10a 0210 	add.w	r2, sl, #16
 80140ce:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80140d2:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80140d6:	46c2      	mov	sl, r8
 80140d8:	f04f 0c00 	mov.w	ip, #0
 80140dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80140e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80140e4:	fa1f f18b 	uxth.w	r1, fp
 80140e8:	454e      	cmp	r6, r9
 80140ea:	448c      	add	ip, r1
 80140ec:	b299      	uxth	r1, r3
 80140ee:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80140f2:	ebac 0101 	sub.w	r1, ip, r1
 80140f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80140fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80140fe:	b289      	uxth	r1, r1
 8014100:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014104:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014108:	f84a 3b04 	str.w	r3, [sl], #4
 801410c:	d8e6      	bhi.n	80140dc <__mdiff+0x84>
 801410e:	1b33      	subs	r3, r6, r4
 8014110:	3415      	adds	r4, #21
 8014112:	3b15      	subs	r3, #21
 8014114:	f023 0303 	bic.w	r3, r3, #3
 8014118:	3304      	adds	r3, #4
 801411a:	42a6      	cmp	r6, r4
 801411c:	bf38      	it	cc
 801411e:	2304      	movcc	r3, #4
 8014120:	441d      	add	r5, r3
 8014122:	4443      	add	r3, r8
 8014124:	462c      	mov	r4, r5
 8014126:	461e      	mov	r6, r3
 8014128:	4574      	cmp	r4, lr
 801412a:	d30e      	bcc.n	801414a <__mdiff+0xf2>
 801412c:	f10e 0203 	add.w	r2, lr, #3
 8014130:	1b52      	subs	r2, r2, r5
 8014132:	3d03      	subs	r5, #3
 8014134:	f022 0203 	bic.w	r2, r2, #3
 8014138:	45ae      	cmp	lr, r5
 801413a:	bf38      	it	cc
 801413c:	2200      	movcc	r2, #0
 801413e:	441a      	add	r2, r3
 8014140:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014144:	b18b      	cbz	r3, 801416a <__mdiff+0x112>
 8014146:	6107      	str	r7, [r0, #16]
 8014148:	e7a0      	b.n	801408c <__mdiff+0x34>
 801414a:	f854 8b04 	ldr.w	r8, [r4], #4
 801414e:	fa1f f288 	uxth.w	r2, r8
 8014152:	4462      	add	r2, ip
 8014154:	1411      	asrs	r1, r2, #16
 8014156:	b292      	uxth	r2, r2
 8014158:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 801415c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014160:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8014164:	f846 2b04 	str.w	r2, [r6], #4
 8014168:	e7de      	b.n	8014128 <__mdiff+0xd0>
 801416a:	3f01      	subs	r7, #1
 801416c:	e7e8      	b.n	8014140 <__mdiff+0xe8>
 801416e:	bf00      	nop
 8014170:	08015540 	.word	0x08015540
 8014174:	080155cc 	.word	0x080155cc

08014178 <__ulp>:
 8014178:	b082      	sub	sp, #8
 801417a:	4913      	ldr	r1, [pc, #76]	; (80141c8 <__ulp+0x50>)
 801417c:	ed8d 0b00 	vstr	d0, [sp]
 8014180:	9b01      	ldr	r3, [sp, #4]
 8014182:	4019      	ands	r1, r3
 8014184:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014188:	2900      	cmp	r1, #0
 801418a:	dd05      	ble.n	8014198 <__ulp+0x20>
 801418c:	2200      	movs	r2, #0
 801418e:	460b      	mov	r3, r1
 8014190:	ec43 2b10 	vmov	d0, r2, r3
 8014194:	b002      	add	sp, #8
 8014196:	4770      	bx	lr
 8014198:	4249      	negs	r1, r1
 801419a:	2200      	movs	r2, #0
 801419c:	2300      	movs	r3, #0
 801419e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80141a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80141a6:	da04      	bge.n	80141b2 <__ulp+0x3a>
 80141a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80141ac:	fa41 f300 	asr.w	r3, r1, r0
 80141b0:	e7ee      	b.n	8014190 <__ulp+0x18>
 80141b2:	f1a0 0114 	sub.w	r1, r0, #20
 80141b6:	291e      	cmp	r1, #30
 80141b8:	bfd6      	itet	le
 80141ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80141be:	2101      	movgt	r1, #1
 80141c0:	fa20 f101 	lsrle.w	r1, r0, r1
 80141c4:	460a      	mov	r2, r1
 80141c6:	e7e3      	b.n	8014190 <__ulp+0x18>
 80141c8:	7ff00000 	.word	0x7ff00000

080141cc <__b2d>:
 80141cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ce:	6905      	ldr	r5, [r0, #16]
 80141d0:	f100 0714 	add.w	r7, r0, #20
 80141d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80141d8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80141dc:	1f2e      	subs	r6, r5, #4
 80141de:	4620      	mov	r0, r4
 80141e0:	f7ff fd46 	bl	8013c70 <__hi0bits>
 80141e4:	f1c0 0320 	rsb	r3, r0, #32
 80141e8:	280a      	cmp	r0, #10
 80141ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014268 <__b2d+0x9c>
 80141ee:	600b      	str	r3, [r1, #0]
 80141f0:	dc15      	bgt.n	801421e <__b2d+0x52>
 80141f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80141f6:	42b7      	cmp	r7, r6
 80141f8:	f100 0015 	add.w	r0, r0, #21
 80141fc:	fa24 f10e 	lsr.w	r1, r4, lr
 8014200:	fa04 f000 	lsl.w	r0, r4, r0
 8014204:	ea41 030c 	orr.w	r3, r1, ip
 8014208:	bf34      	ite	cc
 801420a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801420e:	2100      	movcs	r1, #0
 8014210:	fa21 f10e 	lsr.w	r1, r1, lr
 8014214:	ea40 0201 	orr.w	r2, r0, r1
 8014218:	ec43 2b10 	vmov	d0, r2, r3
 801421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801421e:	42b7      	cmp	r7, r6
 8014220:	bf3a      	itte	cc
 8014222:	f1a5 0608 	subcc.w	r6, r5, #8
 8014226:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801422a:	2100      	movcs	r1, #0
 801422c:	380b      	subs	r0, #11
 801422e:	d017      	beq.n	8014260 <__b2d+0x94>
 8014230:	f1c0 0c20 	rsb	ip, r0, #32
 8014234:	fa04 f500 	lsl.w	r5, r4, r0
 8014238:	42be      	cmp	r6, r7
 801423a:	fa01 f000 	lsl.w	r0, r1, r0
 801423e:	fa21 f40c 	lsr.w	r4, r1, ip
 8014242:	ea45 0504 	orr.w	r5, r5, r4
 8014246:	bf8c      	ite	hi
 8014248:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801424c:	2400      	movls	r4, #0
 801424e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014252:	fa24 f40c 	lsr.w	r4, r4, ip
 8014256:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801425a:	ea40 0204 	orr.w	r2, r0, r4
 801425e:	e7db      	b.n	8014218 <__b2d+0x4c>
 8014260:	ea44 030c 	orr.w	r3, r4, ip
 8014264:	460a      	mov	r2, r1
 8014266:	e7d7      	b.n	8014218 <__b2d+0x4c>
 8014268:	3ff00000 	.word	0x3ff00000

0801426c <__d2b>:
 801426c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014270:	4689      	mov	r9, r1
 8014272:	2101      	movs	r1, #1
 8014274:	4690      	mov	r8, r2
 8014276:	ec57 6b10 	vmov	r6, r7, d0
 801427a:	f7ff fc05 	bl	8013a88 <_Balloc>
 801427e:	4604      	mov	r4, r0
 8014280:	b930      	cbnz	r0, 8014290 <__d2b+0x24>
 8014282:	4602      	mov	r2, r0
 8014284:	4b25      	ldr	r3, [pc, #148]	; (801431c <__d2b+0xb0>)
 8014286:	f240 310a 	movw	r1, #778	; 0x30a
 801428a:	4825      	ldr	r0, [pc, #148]	; (8014320 <__d2b+0xb4>)
 801428c:	f000 fa54 	bl	8014738 <__assert_func>
 8014290:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014294:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014298:	bb35      	cbnz	r5, 80142e8 <__d2b+0x7c>
 801429a:	2e00      	cmp	r6, #0
 801429c:	9301      	str	r3, [sp, #4]
 801429e:	d028      	beq.n	80142f2 <__d2b+0x86>
 80142a0:	4668      	mov	r0, sp
 80142a2:	9600      	str	r6, [sp, #0]
 80142a4:	f7ff fd04 	bl	8013cb0 <__lo0bits>
 80142a8:	9900      	ldr	r1, [sp, #0]
 80142aa:	b300      	cbz	r0, 80142ee <__d2b+0x82>
 80142ac:	9a01      	ldr	r2, [sp, #4]
 80142ae:	f1c0 0320 	rsb	r3, r0, #32
 80142b2:	fa02 f303 	lsl.w	r3, r2, r3
 80142b6:	40c2      	lsrs	r2, r0
 80142b8:	430b      	orrs	r3, r1
 80142ba:	9201      	str	r2, [sp, #4]
 80142bc:	6163      	str	r3, [r4, #20]
 80142be:	9b01      	ldr	r3, [sp, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	61a3      	str	r3, [r4, #24]
 80142c4:	bf14      	ite	ne
 80142c6:	2202      	movne	r2, #2
 80142c8:	2201      	moveq	r2, #1
 80142ca:	6122      	str	r2, [r4, #16]
 80142cc:	b1d5      	cbz	r5, 8014304 <__d2b+0x98>
 80142ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80142d2:	4405      	add	r5, r0
 80142d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80142d8:	f8c9 5000 	str.w	r5, [r9]
 80142dc:	f8c8 0000 	str.w	r0, [r8]
 80142e0:	4620      	mov	r0, r4
 80142e2:	b003      	add	sp, #12
 80142e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80142ec:	e7d5      	b.n	801429a <__d2b+0x2e>
 80142ee:	6161      	str	r1, [r4, #20]
 80142f0:	e7e5      	b.n	80142be <__d2b+0x52>
 80142f2:	a801      	add	r0, sp, #4
 80142f4:	f7ff fcdc 	bl	8013cb0 <__lo0bits>
 80142f8:	9b01      	ldr	r3, [sp, #4]
 80142fa:	2201      	movs	r2, #1
 80142fc:	3020      	adds	r0, #32
 80142fe:	6163      	str	r3, [r4, #20]
 8014300:	6122      	str	r2, [r4, #16]
 8014302:	e7e3      	b.n	80142cc <__d2b+0x60>
 8014304:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014308:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801430c:	f8c9 0000 	str.w	r0, [r9]
 8014310:	6918      	ldr	r0, [r3, #16]
 8014312:	f7ff fcad 	bl	8013c70 <__hi0bits>
 8014316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801431a:	e7df      	b.n	80142dc <__d2b+0x70>
 801431c:	08015540 	.word	0x08015540
 8014320:	080155cc 	.word	0x080155cc

08014324 <__ratio>:
 8014324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014328:	4688      	mov	r8, r1
 801432a:	4681      	mov	r9, r0
 801432c:	4669      	mov	r1, sp
 801432e:	f7ff ff4d 	bl	80141cc <__b2d>
 8014332:	a901      	add	r1, sp, #4
 8014334:	4640      	mov	r0, r8
 8014336:	ec55 4b10 	vmov	r4, r5, d0
 801433a:	f7ff ff47 	bl	80141cc <__b2d>
 801433e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014342:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014346:	462f      	mov	r7, r5
 8014348:	eba3 0c02 	sub.w	ip, r3, r2
 801434c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014350:	ec51 0b10 	vmov	r0, r1, d0
 8014354:	1a9b      	subs	r3, r3, r2
 8014356:	468b      	mov	fp, r1
 8014358:	4620      	mov	r0, r4
 801435a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801435e:	2b00      	cmp	r3, #0
 8014360:	bfd5      	itete	le
 8014362:	460a      	movle	r2, r1
 8014364:	462a      	movgt	r2, r5
 8014366:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801436a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801436e:	bfd8      	it	le
 8014370:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014374:	ee10 2a10 	vmov	r2, s0
 8014378:	4639      	mov	r1, r7
 801437a:	465b      	mov	r3, fp
 801437c:	f7ec fa4a 	bl	8000814 <__aeabi_ddiv>
 8014380:	ec41 0b10 	vmov	d0, r0, r1
 8014384:	b003      	add	sp, #12
 8014386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801438a <__copybits>:
 801438a:	3901      	subs	r1, #1
 801438c:	f102 0314 	add.w	r3, r2, #20
 8014390:	1149      	asrs	r1, r1, #5
 8014392:	b570      	push	{r4, r5, r6, lr}
 8014394:	3101      	adds	r1, #1
 8014396:	6914      	ldr	r4, [r2, #16]
 8014398:	1f05      	subs	r5, r0, #4
 801439a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801439e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80143a2:	42a3      	cmp	r3, r4
 80143a4:	d30c      	bcc.n	80143c0 <__copybits+0x36>
 80143a6:	1aa3      	subs	r3, r4, r2
 80143a8:	3211      	adds	r2, #17
 80143aa:	3b11      	subs	r3, #17
 80143ac:	f023 0303 	bic.w	r3, r3, #3
 80143b0:	42a2      	cmp	r2, r4
 80143b2:	bf88      	it	hi
 80143b4:	2300      	movhi	r3, #0
 80143b6:	4418      	add	r0, r3
 80143b8:	2300      	movs	r3, #0
 80143ba:	4288      	cmp	r0, r1
 80143bc:	d305      	bcc.n	80143ca <__copybits+0x40>
 80143be:	bd70      	pop	{r4, r5, r6, pc}
 80143c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80143c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80143c8:	e7eb      	b.n	80143a2 <__copybits+0x18>
 80143ca:	f840 3b04 	str.w	r3, [r0], #4
 80143ce:	e7f4      	b.n	80143ba <__copybits+0x30>

080143d0 <__any_on>:
 80143d0:	f100 0214 	add.w	r2, r0, #20
 80143d4:	114b      	asrs	r3, r1, #5
 80143d6:	6900      	ldr	r0, [r0, #16]
 80143d8:	4298      	cmp	r0, r3
 80143da:	b510      	push	{r4, lr}
 80143dc:	db11      	blt.n	8014402 <__any_on+0x32>
 80143de:	dd0a      	ble.n	80143f6 <__any_on+0x26>
 80143e0:	f011 011f 	ands.w	r1, r1, #31
 80143e4:	d007      	beq.n	80143f6 <__any_on+0x26>
 80143e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80143ea:	fa24 f001 	lsr.w	r0, r4, r1
 80143ee:	fa00 f101 	lsl.w	r1, r0, r1
 80143f2:	428c      	cmp	r4, r1
 80143f4:	d10b      	bne.n	801440e <__any_on+0x3e>
 80143f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80143fa:	4293      	cmp	r3, r2
 80143fc:	d803      	bhi.n	8014406 <__any_on+0x36>
 80143fe:	2000      	movs	r0, #0
 8014400:	bd10      	pop	{r4, pc}
 8014402:	4603      	mov	r3, r0
 8014404:	e7f7      	b.n	80143f6 <__any_on+0x26>
 8014406:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801440a:	2900      	cmp	r1, #0
 801440c:	d0f5      	beq.n	80143fa <__any_on+0x2a>
 801440e:	2001      	movs	r0, #1
 8014410:	e7f6      	b.n	8014400 <__any_on+0x30>

08014412 <_calloc_r>:
 8014412:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014414:	fba1 2402 	umull	r2, r4, r1, r2
 8014418:	b94c      	cbnz	r4, 801442e <_calloc_r+0x1c>
 801441a:	4611      	mov	r1, r2
 801441c:	9201      	str	r2, [sp, #4]
 801441e:	f7fc faf3 	bl	8010a08 <_malloc_r>
 8014422:	9a01      	ldr	r2, [sp, #4]
 8014424:	4605      	mov	r5, r0
 8014426:	b930      	cbnz	r0, 8014436 <_calloc_r+0x24>
 8014428:	4628      	mov	r0, r5
 801442a:	b003      	add	sp, #12
 801442c:	bd30      	pop	{r4, r5, pc}
 801442e:	220c      	movs	r2, #12
 8014430:	2500      	movs	r5, #0
 8014432:	6002      	str	r2, [r0, #0]
 8014434:	e7f8      	b.n	8014428 <_calloc_r+0x16>
 8014436:	4621      	mov	r1, r4
 8014438:	f7fc fa72 	bl	8010920 <memset>
 801443c:	e7f4      	b.n	8014428 <_calloc_r+0x16>

0801443e <__ssputs_r>:
 801443e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014442:	688e      	ldr	r6, [r1, #8]
 8014444:	4682      	mov	sl, r0
 8014446:	460c      	mov	r4, r1
 8014448:	4690      	mov	r8, r2
 801444a:	429e      	cmp	r6, r3
 801444c:	461f      	mov	r7, r3
 801444e:	d838      	bhi.n	80144c2 <__ssputs_r+0x84>
 8014450:	898a      	ldrh	r2, [r1, #12]
 8014452:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014456:	d032      	beq.n	80144be <__ssputs_r+0x80>
 8014458:	6825      	ldr	r5, [r4, #0]
 801445a:	3301      	adds	r3, #1
 801445c:	6909      	ldr	r1, [r1, #16]
 801445e:	eba5 0901 	sub.w	r9, r5, r1
 8014462:	6965      	ldr	r5, [r4, #20]
 8014464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014468:	444b      	add	r3, r9
 801446a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801446e:	106d      	asrs	r5, r5, #1
 8014470:	429d      	cmp	r5, r3
 8014472:	bf38      	it	cc
 8014474:	461d      	movcc	r5, r3
 8014476:	0553      	lsls	r3, r2, #21
 8014478:	d531      	bpl.n	80144de <__ssputs_r+0xa0>
 801447a:	4629      	mov	r1, r5
 801447c:	f7fc fac4 	bl	8010a08 <_malloc_r>
 8014480:	4606      	mov	r6, r0
 8014482:	b950      	cbnz	r0, 801449a <__ssputs_r+0x5c>
 8014484:	230c      	movs	r3, #12
 8014486:	f04f 30ff 	mov.w	r0, #4294967295
 801448a:	f8ca 3000 	str.w	r3, [sl]
 801448e:	89a3      	ldrh	r3, [r4, #12]
 8014490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014494:	81a3      	strh	r3, [r4, #12]
 8014496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801449a:	464a      	mov	r2, r9
 801449c:	6921      	ldr	r1, [r4, #16]
 801449e:	f7ff fad9 	bl	8013a54 <memcpy>
 80144a2:	89a3      	ldrh	r3, [r4, #12]
 80144a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80144a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144ac:	81a3      	strh	r3, [r4, #12]
 80144ae:	6126      	str	r6, [r4, #16]
 80144b0:	444e      	add	r6, r9
 80144b2:	6165      	str	r5, [r4, #20]
 80144b4:	eba5 0509 	sub.w	r5, r5, r9
 80144b8:	6026      	str	r6, [r4, #0]
 80144ba:	463e      	mov	r6, r7
 80144bc:	60a5      	str	r5, [r4, #8]
 80144be:	42be      	cmp	r6, r7
 80144c0:	d900      	bls.n	80144c4 <__ssputs_r+0x86>
 80144c2:	463e      	mov	r6, r7
 80144c4:	4632      	mov	r2, r6
 80144c6:	4641      	mov	r1, r8
 80144c8:	6820      	ldr	r0, [r4, #0]
 80144ca:	f000 f968 	bl	801479e <memmove>
 80144ce:	68a3      	ldr	r3, [r4, #8]
 80144d0:	2000      	movs	r0, #0
 80144d2:	1b9b      	subs	r3, r3, r6
 80144d4:	60a3      	str	r3, [r4, #8]
 80144d6:	6823      	ldr	r3, [r4, #0]
 80144d8:	4433      	add	r3, r6
 80144da:	6023      	str	r3, [r4, #0]
 80144dc:	e7db      	b.n	8014496 <__ssputs_r+0x58>
 80144de:	462a      	mov	r2, r5
 80144e0:	f000 f977 	bl	80147d2 <_realloc_r>
 80144e4:	4606      	mov	r6, r0
 80144e6:	2800      	cmp	r0, #0
 80144e8:	d1e1      	bne.n	80144ae <__ssputs_r+0x70>
 80144ea:	6921      	ldr	r1, [r4, #16]
 80144ec:	4650      	mov	r0, sl
 80144ee:	f7fc fa1f 	bl	8010930 <_free_r>
 80144f2:	e7c7      	b.n	8014484 <__ssputs_r+0x46>

080144f4 <_svfiprintf_r>:
 80144f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f8:	4698      	mov	r8, r3
 80144fa:	898b      	ldrh	r3, [r1, #12]
 80144fc:	b09d      	sub	sp, #116	; 0x74
 80144fe:	4607      	mov	r7, r0
 8014500:	061b      	lsls	r3, r3, #24
 8014502:	460d      	mov	r5, r1
 8014504:	4614      	mov	r4, r2
 8014506:	d50e      	bpl.n	8014526 <_svfiprintf_r+0x32>
 8014508:	690b      	ldr	r3, [r1, #16]
 801450a:	b963      	cbnz	r3, 8014526 <_svfiprintf_r+0x32>
 801450c:	2140      	movs	r1, #64	; 0x40
 801450e:	f7fc fa7b 	bl	8010a08 <_malloc_r>
 8014512:	6028      	str	r0, [r5, #0]
 8014514:	6128      	str	r0, [r5, #16]
 8014516:	b920      	cbnz	r0, 8014522 <_svfiprintf_r+0x2e>
 8014518:	230c      	movs	r3, #12
 801451a:	603b      	str	r3, [r7, #0]
 801451c:	f04f 30ff 	mov.w	r0, #4294967295
 8014520:	e0d1      	b.n	80146c6 <_svfiprintf_r+0x1d2>
 8014522:	2340      	movs	r3, #64	; 0x40
 8014524:	616b      	str	r3, [r5, #20]
 8014526:	2300      	movs	r3, #0
 8014528:	f8cd 800c 	str.w	r8, [sp, #12]
 801452c:	f04f 0901 	mov.w	r9, #1
 8014530:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80146e0 <_svfiprintf_r+0x1ec>
 8014534:	9309      	str	r3, [sp, #36]	; 0x24
 8014536:	2320      	movs	r3, #32
 8014538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801453c:	2330      	movs	r3, #48	; 0x30
 801453e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014542:	4623      	mov	r3, r4
 8014544:	469a      	mov	sl, r3
 8014546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801454a:	b10a      	cbz	r2, 8014550 <_svfiprintf_r+0x5c>
 801454c:	2a25      	cmp	r2, #37	; 0x25
 801454e:	d1f9      	bne.n	8014544 <_svfiprintf_r+0x50>
 8014550:	ebba 0b04 	subs.w	fp, sl, r4
 8014554:	d00b      	beq.n	801456e <_svfiprintf_r+0x7a>
 8014556:	465b      	mov	r3, fp
 8014558:	4622      	mov	r2, r4
 801455a:	4629      	mov	r1, r5
 801455c:	4638      	mov	r0, r7
 801455e:	f7ff ff6e 	bl	801443e <__ssputs_r>
 8014562:	3001      	adds	r0, #1
 8014564:	f000 80aa 	beq.w	80146bc <_svfiprintf_r+0x1c8>
 8014568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801456a:	445a      	add	r2, fp
 801456c:	9209      	str	r2, [sp, #36]	; 0x24
 801456e:	f89a 3000 	ldrb.w	r3, [sl]
 8014572:	2b00      	cmp	r3, #0
 8014574:	f000 80a2 	beq.w	80146bc <_svfiprintf_r+0x1c8>
 8014578:	2300      	movs	r3, #0
 801457a:	f04f 32ff 	mov.w	r2, #4294967295
 801457e:	f10a 0a01 	add.w	sl, sl, #1
 8014582:	9304      	str	r3, [sp, #16]
 8014584:	9307      	str	r3, [sp, #28]
 8014586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801458a:	931a      	str	r3, [sp, #104]	; 0x68
 801458c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014590:	4654      	mov	r4, sl
 8014592:	2205      	movs	r2, #5
 8014594:	4852      	ldr	r0, [pc, #328]	; (80146e0 <_svfiprintf_r+0x1ec>)
 8014596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801459a:	f7ff fa4d 	bl	8013a38 <memchr>
 801459e:	9a04      	ldr	r2, [sp, #16]
 80145a0:	b9d8      	cbnz	r0, 80145da <_svfiprintf_r+0xe6>
 80145a2:	06d0      	lsls	r0, r2, #27
 80145a4:	bf44      	itt	mi
 80145a6:	2320      	movmi	r3, #32
 80145a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145ac:	0711      	lsls	r1, r2, #28
 80145ae:	bf44      	itt	mi
 80145b0:	232b      	movmi	r3, #43	; 0x2b
 80145b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145b6:	f89a 3000 	ldrb.w	r3, [sl]
 80145ba:	2b2a      	cmp	r3, #42	; 0x2a
 80145bc:	d015      	beq.n	80145ea <_svfiprintf_r+0xf6>
 80145be:	9a07      	ldr	r2, [sp, #28]
 80145c0:	4654      	mov	r4, sl
 80145c2:	2000      	movs	r0, #0
 80145c4:	f04f 0c0a 	mov.w	ip, #10
 80145c8:	4621      	mov	r1, r4
 80145ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145ce:	3b30      	subs	r3, #48	; 0x30
 80145d0:	2b09      	cmp	r3, #9
 80145d2:	d94e      	bls.n	8014672 <_svfiprintf_r+0x17e>
 80145d4:	b1b0      	cbz	r0, 8014604 <_svfiprintf_r+0x110>
 80145d6:	9207      	str	r2, [sp, #28]
 80145d8:	e014      	b.n	8014604 <_svfiprintf_r+0x110>
 80145da:	eba0 0308 	sub.w	r3, r0, r8
 80145de:	46a2      	mov	sl, r4
 80145e0:	fa09 f303 	lsl.w	r3, r9, r3
 80145e4:	4313      	orrs	r3, r2
 80145e6:	9304      	str	r3, [sp, #16]
 80145e8:	e7d2      	b.n	8014590 <_svfiprintf_r+0x9c>
 80145ea:	9b03      	ldr	r3, [sp, #12]
 80145ec:	1d19      	adds	r1, r3, #4
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	9103      	str	r1, [sp, #12]
 80145f4:	bfbb      	ittet	lt
 80145f6:	425b      	neglt	r3, r3
 80145f8:	f042 0202 	orrlt.w	r2, r2, #2
 80145fc:	9307      	strge	r3, [sp, #28]
 80145fe:	9307      	strlt	r3, [sp, #28]
 8014600:	bfb8      	it	lt
 8014602:	9204      	strlt	r2, [sp, #16]
 8014604:	7823      	ldrb	r3, [r4, #0]
 8014606:	2b2e      	cmp	r3, #46	; 0x2e
 8014608:	d10c      	bne.n	8014624 <_svfiprintf_r+0x130>
 801460a:	7863      	ldrb	r3, [r4, #1]
 801460c:	2b2a      	cmp	r3, #42	; 0x2a
 801460e:	d135      	bne.n	801467c <_svfiprintf_r+0x188>
 8014610:	9b03      	ldr	r3, [sp, #12]
 8014612:	3402      	adds	r4, #2
 8014614:	1d1a      	adds	r2, r3, #4
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2b00      	cmp	r3, #0
 801461a:	9203      	str	r2, [sp, #12]
 801461c:	bfb8      	it	lt
 801461e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014622:	9305      	str	r3, [sp, #20]
 8014624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80146f0 <_svfiprintf_r+0x1fc>
 8014628:	2203      	movs	r2, #3
 801462a:	7821      	ldrb	r1, [r4, #0]
 801462c:	4650      	mov	r0, sl
 801462e:	f7ff fa03 	bl	8013a38 <memchr>
 8014632:	b140      	cbz	r0, 8014646 <_svfiprintf_r+0x152>
 8014634:	2340      	movs	r3, #64	; 0x40
 8014636:	eba0 000a 	sub.w	r0, r0, sl
 801463a:	3401      	adds	r4, #1
 801463c:	fa03 f000 	lsl.w	r0, r3, r0
 8014640:	9b04      	ldr	r3, [sp, #16]
 8014642:	4303      	orrs	r3, r0
 8014644:	9304      	str	r3, [sp, #16]
 8014646:	f814 1b01 	ldrb.w	r1, [r4], #1
 801464a:	2206      	movs	r2, #6
 801464c:	4825      	ldr	r0, [pc, #148]	; (80146e4 <_svfiprintf_r+0x1f0>)
 801464e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014652:	f7ff f9f1 	bl	8013a38 <memchr>
 8014656:	2800      	cmp	r0, #0
 8014658:	d038      	beq.n	80146cc <_svfiprintf_r+0x1d8>
 801465a:	4b23      	ldr	r3, [pc, #140]	; (80146e8 <_svfiprintf_r+0x1f4>)
 801465c:	bb1b      	cbnz	r3, 80146a6 <_svfiprintf_r+0x1b2>
 801465e:	9b03      	ldr	r3, [sp, #12]
 8014660:	3307      	adds	r3, #7
 8014662:	f023 0307 	bic.w	r3, r3, #7
 8014666:	3308      	adds	r3, #8
 8014668:	9303      	str	r3, [sp, #12]
 801466a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801466c:	4433      	add	r3, r6
 801466e:	9309      	str	r3, [sp, #36]	; 0x24
 8014670:	e767      	b.n	8014542 <_svfiprintf_r+0x4e>
 8014672:	fb0c 3202 	mla	r2, ip, r2, r3
 8014676:	460c      	mov	r4, r1
 8014678:	2001      	movs	r0, #1
 801467a:	e7a5      	b.n	80145c8 <_svfiprintf_r+0xd4>
 801467c:	2300      	movs	r3, #0
 801467e:	3401      	adds	r4, #1
 8014680:	f04f 0c0a 	mov.w	ip, #10
 8014684:	4619      	mov	r1, r3
 8014686:	9305      	str	r3, [sp, #20]
 8014688:	4620      	mov	r0, r4
 801468a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801468e:	3a30      	subs	r2, #48	; 0x30
 8014690:	2a09      	cmp	r2, #9
 8014692:	d903      	bls.n	801469c <_svfiprintf_r+0x1a8>
 8014694:	2b00      	cmp	r3, #0
 8014696:	d0c5      	beq.n	8014624 <_svfiprintf_r+0x130>
 8014698:	9105      	str	r1, [sp, #20]
 801469a:	e7c3      	b.n	8014624 <_svfiprintf_r+0x130>
 801469c:	fb0c 2101 	mla	r1, ip, r1, r2
 80146a0:	4604      	mov	r4, r0
 80146a2:	2301      	movs	r3, #1
 80146a4:	e7f0      	b.n	8014688 <_svfiprintf_r+0x194>
 80146a6:	ab03      	add	r3, sp, #12
 80146a8:	462a      	mov	r2, r5
 80146aa:	a904      	add	r1, sp, #16
 80146ac:	4638      	mov	r0, r7
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	4b0e      	ldr	r3, [pc, #56]	; (80146ec <_svfiprintf_r+0x1f8>)
 80146b2:	f7fc fabd 	bl	8010c30 <_printf_float>
 80146b6:	1c42      	adds	r2, r0, #1
 80146b8:	4606      	mov	r6, r0
 80146ba:	d1d6      	bne.n	801466a <_svfiprintf_r+0x176>
 80146bc:	89ab      	ldrh	r3, [r5, #12]
 80146be:	065b      	lsls	r3, r3, #25
 80146c0:	f53f af2c 	bmi.w	801451c <_svfiprintf_r+0x28>
 80146c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146c6:	b01d      	add	sp, #116	; 0x74
 80146c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146cc:	ab03      	add	r3, sp, #12
 80146ce:	462a      	mov	r2, r5
 80146d0:	a904      	add	r1, sp, #16
 80146d2:	4638      	mov	r0, r7
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	4b05      	ldr	r3, [pc, #20]	; (80146ec <_svfiprintf_r+0x1f8>)
 80146d8:	f7fc fd50 	bl	801117c <_printf_i>
 80146dc:	e7eb      	b.n	80146b6 <_svfiprintf_r+0x1c2>
 80146de:	bf00      	nop
 80146e0:	08015724 	.word	0x08015724
 80146e4:	0801572e 	.word	0x0801572e
 80146e8:	08010c31 	.word	0x08010c31
 80146ec:	0801443f 	.word	0x0801443f
 80146f0:	0801572a 	.word	0x0801572a

080146f4 <strncmp>:
 80146f4:	b510      	push	{r4, lr}
 80146f6:	b17a      	cbz	r2, 8014718 <strncmp+0x24>
 80146f8:	4603      	mov	r3, r0
 80146fa:	3901      	subs	r1, #1
 80146fc:	1884      	adds	r4, r0, r2
 80146fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014702:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014706:	4290      	cmp	r0, r2
 8014708:	d101      	bne.n	801470e <strncmp+0x1a>
 801470a:	42a3      	cmp	r3, r4
 801470c:	d101      	bne.n	8014712 <strncmp+0x1e>
 801470e:	1a80      	subs	r0, r0, r2
 8014710:	bd10      	pop	{r4, pc}
 8014712:	2800      	cmp	r0, #0
 8014714:	d1f3      	bne.n	80146fe <strncmp+0xa>
 8014716:	e7fa      	b.n	801470e <strncmp+0x1a>
 8014718:	4610      	mov	r0, r2
 801471a:	e7f9      	b.n	8014710 <strncmp+0x1c>

0801471c <__ascii_wctomb>:
 801471c:	b149      	cbz	r1, 8014732 <__ascii_wctomb+0x16>
 801471e:	2aff      	cmp	r2, #255	; 0xff
 8014720:	bf8d      	iteet	hi
 8014722:	238a      	movhi	r3, #138	; 0x8a
 8014724:	2001      	movls	r0, #1
 8014726:	700a      	strbls	r2, [r1, #0]
 8014728:	6003      	strhi	r3, [r0, #0]
 801472a:	bf88      	it	hi
 801472c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014730:	4770      	bx	lr
 8014732:	4608      	mov	r0, r1
 8014734:	4770      	bx	lr
	...

08014738 <__assert_func>:
 8014738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801473a:	4614      	mov	r4, r2
 801473c:	461a      	mov	r2, r3
 801473e:	4b09      	ldr	r3, [pc, #36]	; (8014764 <__assert_func+0x2c>)
 8014740:	4605      	mov	r5, r0
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	68d8      	ldr	r0, [r3, #12]
 8014746:	b14c      	cbz	r4, 801475c <__assert_func+0x24>
 8014748:	4b07      	ldr	r3, [pc, #28]	; (8014768 <__assert_func+0x30>)
 801474a:	9100      	str	r1, [sp, #0]
 801474c:	4907      	ldr	r1, [pc, #28]	; (801476c <__assert_func+0x34>)
 801474e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014752:	462b      	mov	r3, r5
 8014754:	f000 f80e 	bl	8014774 <fiprintf>
 8014758:	f7fc f8a8 	bl	80108ac <abort>
 801475c:	4b04      	ldr	r3, [pc, #16]	; (8014770 <__assert_func+0x38>)
 801475e:	461c      	mov	r4, r3
 8014760:	e7f3      	b.n	801474a <__assert_func+0x12>
 8014762:	bf00      	nop
 8014764:	20000100 	.word	0x20000100
 8014768:	08015735 	.word	0x08015735
 801476c:	08015742 	.word	0x08015742
 8014770:	08015770 	.word	0x08015770

08014774 <fiprintf>:
 8014774:	b40e      	push	{r1, r2, r3}
 8014776:	b503      	push	{r0, r1, lr}
 8014778:	ab03      	add	r3, sp, #12
 801477a:	4601      	mov	r1, r0
 801477c:	4805      	ldr	r0, [pc, #20]	; (8014794 <fiprintf+0x20>)
 801477e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014782:	6800      	ldr	r0, [r0, #0]
 8014784:	9301      	str	r3, [sp, #4]
 8014786:	f000 f87d 	bl	8014884 <_vfiprintf_r>
 801478a:	b002      	add	sp, #8
 801478c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014790:	b003      	add	sp, #12
 8014792:	4770      	bx	lr
 8014794:	20000100 	.word	0x20000100

08014798 <__retarget_lock_init_recursive>:
 8014798:	4770      	bx	lr

0801479a <__retarget_lock_acquire_recursive>:
 801479a:	4770      	bx	lr

0801479c <__retarget_lock_release_recursive>:
 801479c:	4770      	bx	lr

0801479e <memmove>:
 801479e:	4288      	cmp	r0, r1
 80147a0:	b510      	push	{r4, lr}
 80147a2:	eb01 0402 	add.w	r4, r1, r2
 80147a6:	d902      	bls.n	80147ae <memmove+0x10>
 80147a8:	4284      	cmp	r4, r0
 80147aa:	4623      	mov	r3, r4
 80147ac:	d807      	bhi.n	80147be <memmove+0x20>
 80147ae:	1e43      	subs	r3, r0, #1
 80147b0:	42a1      	cmp	r1, r4
 80147b2:	d008      	beq.n	80147c6 <memmove+0x28>
 80147b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147bc:	e7f8      	b.n	80147b0 <memmove+0x12>
 80147be:	4402      	add	r2, r0
 80147c0:	4601      	mov	r1, r0
 80147c2:	428a      	cmp	r2, r1
 80147c4:	d100      	bne.n	80147c8 <memmove+0x2a>
 80147c6:	bd10      	pop	{r4, pc}
 80147c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147d0:	e7f7      	b.n	80147c2 <memmove+0x24>

080147d2 <_realloc_r>:
 80147d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d6:	4680      	mov	r8, r0
 80147d8:	4614      	mov	r4, r2
 80147da:	460e      	mov	r6, r1
 80147dc:	b921      	cbnz	r1, 80147e8 <_realloc_r+0x16>
 80147de:	4611      	mov	r1, r2
 80147e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147e4:	f7fc b910 	b.w	8010a08 <_malloc_r>
 80147e8:	b92a      	cbnz	r2, 80147f6 <_realloc_r+0x24>
 80147ea:	4625      	mov	r5, r4
 80147ec:	f7fc f8a0 	bl	8010930 <_free_r>
 80147f0:	4628      	mov	r0, r5
 80147f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147f6:	f000 fc4f 	bl	8015098 <_malloc_usable_size_r>
 80147fa:	4284      	cmp	r4, r0
 80147fc:	4607      	mov	r7, r0
 80147fe:	d802      	bhi.n	8014806 <_realloc_r+0x34>
 8014800:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014804:	d812      	bhi.n	801482c <_realloc_r+0x5a>
 8014806:	4621      	mov	r1, r4
 8014808:	4640      	mov	r0, r8
 801480a:	f7fc f8fd 	bl	8010a08 <_malloc_r>
 801480e:	4605      	mov	r5, r0
 8014810:	2800      	cmp	r0, #0
 8014812:	d0ed      	beq.n	80147f0 <_realloc_r+0x1e>
 8014814:	42bc      	cmp	r4, r7
 8014816:	4622      	mov	r2, r4
 8014818:	4631      	mov	r1, r6
 801481a:	bf28      	it	cs
 801481c:	463a      	movcs	r2, r7
 801481e:	f7ff f919 	bl	8013a54 <memcpy>
 8014822:	4631      	mov	r1, r6
 8014824:	4640      	mov	r0, r8
 8014826:	f7fc f883 	bl	8010930 <_free_r>
 801482a:	e7e1      	b.n	80147f0 <_realloc_r+0x1e>
 801482c:	4635      	mov	r5, r6
 801482e:	e7df      	b.n	80147f0 <_realloc_r+0x1e>

08014830 <__sfputc_r>:
 8014830:	6893      	ldr	r3, [r2, #8]
 8014832:	3b01      	subs	r3, #1
 8014834:	2b00      	cmp	r3, #0
 8014836:	6093      	str	r3, [r2, #8]
 8014838:	b410      	push	{r4}
 801483a:	da08      	bge.n	801484e <__sfputc_r+0x1e>
 801483c:	6994      	ldr	r4, [r2, #24]
 801483e:	42a3      	cmp	r3, r4
 8014840:	db01      	blt.n	8014846 <__sfputc_r+0x16>
 8014842:	290a      	cmp	r1, #10
 8014844:	d103      	bne.n	801484e <__sfputc_r+0x1e>
 8014846:	f85d 4b04 	ldr.w	r4, [sp], #4
 801484a:	f000 b94b 	b.w	8014ae4 <__swbuf_r>
 801484e:	6813      	ldr	r3, [r2, #0]
 8014850:	1c58      	adds	r0, r3, #1
 8014852:	6010      	str	r0, [r2, #0]
 8014854:	4608      	mov	r0, r1
 8014856:	7019      	strb	r1, [r3, #0]
 8014858:	f85d 4b04 	ldr.w	r4, [sp], #4
 801485c:	4770      	bx	lr

0801485e <__sfputs_r>:
 801485e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014860:	4606      	mov	r6, r0
 8014862:	460f      	mov	r7, r1
 8014864:	4614      	mov	r4, r2
 8014866:	18d5      	adds	r5, r2, r3
 8014868:	42ac      	cmp	r4, r5
 801486a:	d101      	bne.n	8014870 <__sfputs_r+0x12>
 801486c:	2000      	movs	r0, #0
 801486e:	e007      	b.n	8014880 <__sfputs_r+0x22>
 8014870:	463a      	mov	r2, r7
 8014872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014876:	4630      	mov	r0, r6
 8014878:	f7ff ffda 	bl	8014830 <__sfputc_r>
 801487c:	1c43      	adds	r3, r0, #1
 801487e:	d1f3      	bne.n	8014868 <__sfputs_r+0xa>
 8014880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014884 <_vfiprintf_r>:
 8014884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014888:	460d      	mov	r5, r1
 801488a:	b09d      	sub	sp, #116	; 0x74
 801488c:	4614      	mov	r4, r2
 801488e:	4698      	mov	r8, r3
 8014890:	4606      	mov	r6, r0
 8014892:	b118      	cbz	r0, 801489c <_vfiprintf_r+0x18>
 8014894:	6983      	ldr	r3, [r0, #24]
 8014896:	b90b      	cbnz	r3, 801489c <_vfiprintf_r+0x18>
 8014898:	f000 fafc 	bl	8014e94 <__sinit>
 801489c:	4b89      	ldr	r3, [pc, #548]	; (8014ac4 <_vfiprintf_r+0x240>)
 801489e:	429d      	cmp	r5, r3
 80148a0:	d11b      	bne.n	80148da <_vfiprintf_r+0x56>
 80148a2:	6875      	ldr	r5, [r6, #4]
 80148a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148a6:	07d9      	lsls	r1, r3, #31
 80148a8:	d405      	bmi.n	80148b6 <_vfiprintf_r+0x32>
 80148aa:	89ab      	ldrh	r3, [r5, #12]
 80148ac:	059a      	lsls	r2, r3, #22
 80148ae:	d402      	bmi.n	80148b6 <_vfiprintf_r+0x32>
 80148b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148b2:	f7ff ff72 	bl	801479a <__retarget_lock_acquire_recursive>
 80148b6:	89ab      	ldrh	r3, [r5, #12]
 80148b8:	071b      	lsls	r3, r3, #28
 80148ba:	d501      	bpl.n	80148c0 <_vfiprintf_r+0x3c>
 80148bc:	692b      	ldr	r3, [r5, #16]
 80148be:	b9eb      	cbnz	r3, 80148fc <_vfiprintf_r+0x78>
 80148c0:	4629      	mov	r1, r5
 80148c2:	4630      	mov	r0, r6
 80148c4:	f000 f960 	bl	8014b88 <__swsetup_r>
 80148c8:	b1c0      	cbz	r0, 80148fc <_vfiprintf_r+0x78>
 80148ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148cc:	07dc      	lsls	r4, r3, #31
 80148ce:	d50e      	bpl.n	80148ee <_vfiprintf_r+0x6a>
 80148d0:	f04f 30ff 	mov.w	r0, #4294967295
 80148d4:	b01d      	add	sp, #116	; 0x74
 80148d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148da:	4b7b      	ldr	r3, [pc, #492]	; (8014ac8 <_vfiprintf_r+0x244>)
 80148dc:	429d      	cmp	r5, r3
 80148de:	d101      	bne.n	80148e4 <_vfiprintf_r+0x60>
 80148e0:	68b5      	ldr	r5, [r6, #8]
 80148e2:	e7df      	b.n	80148a4 <_vfiprintf_r+0x20>
 80148e4:	4b79      	ldr	r3, [pc, #484]	; (8014acc <_vfiprintf_r+0x248>)
 80148e6:	429d      	cmp	r5, r3
 80148e8:	bf08      	it	eq
 80148ea:	68f5      	ldreq	r5, [r6, #12]
 80148ec:	e7da      	b.n	80148a4 <_vfiprintf_r+0x20>
 80148ee:	89ab      	ldrh	r3, [r5, #12]
 80148f0:	0598      	lsls	r0, r3, #22
 80148f2:	d4ed      	bmi.n	80148d0 <_vfiprintf_r+0x4c>
 80148f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148f6:	f7ff ff51 	bl	801479c <__retarget_lock_release_recursive>
 80148fa:	e7e9      	b.n	80148d0 <_vfiprintf_r+0x4c>
 80148fc:	2300      	movs	r3, #0
 80148fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014902:	f04f 0901 	mov.w	r9, #1
 8014906:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8014ad0 <_vfiprintf_r+0x24c>
 801490a:	9309      	str	r3, [sp, #36]	; 0x24
 801490c:	2320      	movs	r3, #32
 801490e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014912:	2330      	movs	r3, #48	; 0x30
 8014914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014918:	4623      	mov	r3, r4
 801491a:	469a      	mov	sl, r3
 801491c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014920:	b10a      	cbz	r2, 8014926 <_vfiprintf_r+0xa2>
 8014922:	2a25      	cmp	r2, #37	; 0x25
 8014924:	d1f9      	bne.n	801491a <_vfiprintf_r+0x96>
 8014926:	ebba 0b04 	subs.w	fp, sl, r4
 801492a:	d00b      	beq.n	8014944 <_vfiprintf_r+0xc0>
 801492c:	465b      	mov	r3, fp
 801492e:	4622      	mov	r2, r4
 8014930:	4629      	mov	r1, r5
 8014932:	4630      	mov	r0, r6
 8014934:	f7ff ff93 	bl	801485e <__sfputs_r>
 8014938:	3001      	adds	r0, #1
 801493a:	f000 80aa 	beq.w	8014a92 <_vfiprintf_r+0x20e>
 801493e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014940:	445a      	add	r2, fp
 8014942:	9209      	str	r2, [sp, #36]	; 0x24
 8014944:	f89a 3000 	ldrb.w	r3, [sl]
 8014948:	2b00      	cmp	r3, #0
 801494a:	f000 80a2 	beq.w	8014a92 <_vfiprintf_r+0x20e>
 801494e:	2300      	movs	r3, #0
 8014950:	f04f 32ff 	mov.w	r2, #4294967295
 8014954:	f10a 0a01 	add.w	sl, sl, #1
 8014958:	9304      	str	r3, [sp, #16]
 801495a:	9307      	str	r3, [sp, #28]
 801495c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014960:	931a      	str	r3, [sp, #104]	; 0x68
 8014962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014966:	4654      	mov	r4, sl
 8014968:	2205      	movs	r2, #5
 801496a:	4859      	ldr	r0, [pc, #356]	; (8014ad0 <_vfiprintf_r+0x24c>)
 801496c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014970:	f7ff f862 	bl	8013a38 <memchr>
 8014974:	9a04      	ldr	r2, [sp, #16]
 8014976:	b9d8      	cbnz	r0, 80149b0 <_vfiprintf_r+0x12c>
 8014978:	06d1      	lsls	r1, r2, #27
 801497a:	bf44      	itt	mi
 801497c:	2320      	movmi	r3, #32
 801497e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014982:	0713      	lsls	r3, r2, #28
 8014984:	bf44      	itt	mi
 8014986:	232b      	movmi	r3, #43	; 0x2b
 8014988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801498c:	f89a 3000 	ldrb.w	r3, [sl]
 8014990:	2b2a      	cmp	r3, #42	; 0x2a
 8014992:	d015      	beq.n	80149c0 <_vfiprintf_r+0x13c>
 8014994:	9a07      	ldr	r2, [sp, #28]
 8014996:	4654      	mov	r4, sl
 8014998:	2000      	movs	r0, #0
 801499a:	f04f 0c0a 	mov.w	ip, #10
 801499e:	4621      	mov	r1, r4
 80149a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149a4:	3b30      	subs	r3, #48	; 0x30
 80149a6:	2b09      	cmp	r3, #9
 80149a8:	d94e      	bls.n	8014a48 <_vfiprintf_r+0x1c4>
 80149aa:	b1b0      	cbz	r0, 80149da <_vfiprintf_r+0x156>
 80149ac:	9207      	str	r2, [sp, #28]
 80149ae:	e014      	b.n	80149da <_vfiprintf_r+0x156>
 80149b0:	eba0 0308 	sub.w	r3, r0, r8
 80149b4:	46a2      	mov	sl, r4
 80149b6:	fa09 f303 	lsl.w	r3, r9, r3
 80149ba:	4313      	orrs	r3, r2
 80149bc:	9304      	str	r3, [sp, #16]
 80149be:	e7d2      	b.n	8014966 <_vfiprintf_r+0xe2>
 80149c0:	9b03      	ldr	r3, [sp, #12]
 80149c2:	1d19      	adds	r1, r3, #4
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	9103      	str	r1, [sp, #12]
 80149ca:	bfbb      	ittet	lt
 80149cc:	425b      	neglt	r3, r3
 80149ce:	f042 0202 	orrlt.w	r2, r2, #2
 80149d2:	9307      	strge	r3, [sp, #28]
 80149d4:	9307      	strlt	r3, [sp, #28]
 80149d6:	bfb8      	it	lt
 80149d8:	9204      	strlt	r2, [sp, #16]
 80149da:	7823      	ldrb	r3, [r4, #0]
 80149dc:	2b2e      	cmp	r3, #46	; 0x2e
 80149de:	d10c      	bne.n	80149fa <_vfiprintf_r+0x176>
 80149e0:	7863      	ldrb	r3, [r4, #1]
 80149e2:	2b2a      	cmp	r3, #42	; 0x2a
 80149e4:	d135      	bne.n	8014a52 <_vfiprintf_r+0x1ce>
 80149e6:	9b03      	ldr	r3, [sp, #12]
 80149e8:	3402      	adds	r4, #2
 80149ea:	1d1a      	adds	r2, r3, #4
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	9203      	str	r2, [sp, #12]
 80149f2:	bfb8      	it	lt
 80149f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80149f8:	9305      	str	r3, [sp, #20]
 80149fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ae0 <_vfiprintf_r+0x25c>
 80149fe:	2203      	movs	r2, #3
 8014a00:	7821      	ldrb	r1, [r4, #0]
 8014a02:	4650      	mov	r0, sl
 8014a04:	f7ff f818 	bl	8013a38 <memchr>
 8014a08:	b140      	cbz	r0, 8014a1c <_vfiprintf_r+0x198>
 8014a0a:	2340      	movs	r3, #64	; 0x40
 8014a0c:	eba0 000a 	sub.w	r0, r0, sl
 8014a10:	3401      	adds	r4, #1
 8014a12:	fa03 f000 	lsl.w	r0, r3, r0
 8014a16:	9b04      	ldr	r3, [sp, #16]
 8014a18:	4303      	orrs	r3, r0
 8014a1a:	9304      	str	r3, [sp, #16]
 8014a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a20:	2206      	movs	r2, #6
 8014a22:	482c      	ldr	r0, [pc, #176]	; (8014ad4 <_vfiprintf_r+0x250>)
 8014a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a28:	f7ff f806 	bl	8013a38 <memchr>
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	d03f      	beq.n	8014ab0 <_vfiprintf_r+0x22c>
 8014a30:	4b29      	ldr	r3, [pc, #164]	; (8014ad8 <_vfiprintf_r+0x254>)
 8014a32:	bb1b      	cbnz	r3, 8014a7c <_vfiprintf_r+0x1f8>
 8014a34:	9b03      	ldr	r3, [sp, #12]
 8014a36:	3307      	adds	r3, #7
 8014a38:	f023 0307 	bic.w	r3, r3, #7
 8014a3c:	3308      	adds	r3, #8
 8014a3e:	9303      	str	r3, [sp, #12]
 8014a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a42:	443b      	add	r3, r7
 8014a44:	9309      	str	r3, [sp, #36]	; 0x24
 8014a46:	e767      	b.n	8014918 <_vfiprintf_r+0x94>
 8014a48:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a4c:	460c      	mov	r4, r1
 8014a4e:	2001      	movs	r0, #1
 8014a50:	e7a5      	b.n	801499e <_vfiprintf_r+0x11a>
 8014a52:	2300      	movs	r3, #0
 8014a54:	3401      	adds	r4, #1
 8014a56:	f04f 0c0a 	mov.w	ip, #10
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	9305      	str	r3, [sp, #20]
 8014a5e:	4620      	mov	r0, r4
 8014a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a64:	3a30      	subs	r2, #48	; 0x30
 8014a66:	2a09      	cmp	r2, #9
 8014a68:	d903      	bls.n	8014a72 <_vfiprintf_r+0x1ee>
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d0c5      	beq.n	80149fa <_vfiprintf_r+0x176>
 8014a6e:	9105      	str	r1, [sp, #20]
 8014a70:	e7c3      	b.n	80149fa <_vfiprintf_r+0x176>
 8014a72:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a76:	4604      	mov	r4, r0
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e7f0      	b.n	8014a5e <_vfiprintf_r+0x1da>
 8014a7c:	ab03      	add	r3, sp, #12
 8014a7e:	462a      	mov	r2, r5
 8014a80:	a904      	add	r1, sp, #16
 8014a82:	4630      	mov	r0, r6
 8014a84:	9300      	str	r3, [sp, #0]
 8014a86:	4b15      	ldr	r3, [pc, #84]	; (8014adc <_vfiprintf_r+0x258>)
 8014a88:	f7fc f8d2 	bl	8010c30 <_printf_float>
 8014a8c:	4607      	mov	r7, r0
 8014a8e:	1c78      	adds	r0, r7, #1
 8014a90:	d1d6      	bne.n	8014a40 <_vfiprintf_r+0x1bc>
 8014a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a94:	07d9      	lsls	r1, r3, #31
 8014a96:	d405      	bmi.n	8014aa4 <_vfiprintf_r+0x220>
 8014a98:	89ab      	ldrh	r3, [r5, #12]
 8014a9a:	059a      	lsls	r2, r3, #22
 8014a9c:	d402      	bmi.n	8014aa4 <_vfiprintf_r+0x220>
 8014a9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014aa0:	f7ff fe7c 	bl	801479c <__retarget_lock_release_recursive>
 8014aa4:	89ab      	ldrh	r3, [r5, #12]
 8014aa6:	065b      	lsls	r3, r3, #25
 8014aa8:	f53f af12 	bmi.w	80148d0 <_vfiprintf_r+0x4c>
 8014aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014aae:	e711      	b.n	80148d4 <_vfiprintf_r+0x50>
 8014ab0:	ab03      	add	r3, sp, #12
 8014ab2:	462a      	mov	r2, r5
 8014ab4:	a904      	add	r1, sp, #16
 8014ab6:	4630      	mov	r0, r6
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	4b08      	ldr	r3, [pc, #32]	; (8014adc <_vfiprintf_r+0x258>)
 8014abc:	f7fc fb5e 	bl	801117c <_printf_i>
 8014ac0:	e7e4      	b.n	8014a8c <_vfiprintf_r+0x208>
 8014ac2:	bf00      	nop
 8014ac4:	08015794 	.word	0x08015794
 8014ac8:	080157b4 	.word	0x080157b4
 8014acc:	08015774 	.word	0x08015774
 8014ad0:	08015724 	.word	0x08015724
 8014ad4:	0801572e 	.word	0x0801572e
 8014ad8:	08010c31 	.word	0x08010c31
 8014adc:	0801485f 	.word	0x0801485f
 8014ae0:	0801572a 	.word	0x0801572a

08014ae4 <__swbuf_r>:
 8014ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ae6:	460e      	mov	r6, r1
 8014ae8:	4614      	mov	r4, r2
 8014aea:	4605      	mov	r5, r0
 8014aec:	b118      	cbz	r0, 8014af6 <__swbuf_r+0x12>
 8014aee:	6983      	ldr	r3, [r0, #24]
 8014af0:	b90b      	cbnz	r3, 8014af6 <__swbuf_r+0x12>
 8014af2:	f000 f9cf 	bl	8014e94 <__sinit>
 8014af6:	4b21      	ldr	r3, [pc, #132]	; (8014b7c <__swbuf_r+0x98>)
 8014af8:	429c      	cmp	r4, r3
 8014afa:	d12b      	bne.n	8014b54 <__swbuf_r+0x70>
 8014afc:	686c      	ldr	r4, [r5, #4]
 8014afe:	69a3      	ldr	r3, [r4, #24]
 8014b00:	60a3      	str	r3, [r4, #8]
 8014b02:	89a3      	ldrh	r3, [r4, #12]
 8014b04:	071a      	lsls	r2, r3, #28
 8014b06:	d52f      	bpl.n	8014b68 <__swbuf_r+0x84>
 8014b08:	6923      	ldr	r3, [r4, #16]
 8014b0a:	b36b      	cbz	r3, 8014b68 <__swbuf_r+0x84>
 8014b0c:	6923      	ldr	r3, [r4, #16]
 8014b0e:	b2f6      	uxtb	r6, r6
 8014b10:	6820      	ldr	r0, [r4, #0]
 8014b12:	4637      	mov	r7, r6
 8014b14:	1ac0      	subs	r0, r0, r3
 8014b16:	6963      	ldr	r3, [r4, #20]
 8014b18:	4283      	cmp	r3, r0
 8014b1a:	dc04      	bgt.n	8014b26 <__swbuf_r+0x42>
 8014b1c:	4621      	mov	r1, r4
 8014b1e:	4628      	mov	r0, r5
 8014b20:	f000 f924 	bl	8014d6c <_fflush_r>
 8014b24:	bb30      	cbnz	r0, 8014b74 <__swbuf_r+0x90>
 8014b26:	68a3      	ldr	r3, [r4, #8]
 8014b28:	3001      	adds	r0, #1
 8014b2a:	3b01      	subs	r3, #1
 8014b2c:	60a3      	str	r3, [r4, #8]
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	1c5a      	adds	r2, r3, #1
 8014b32:	6022      	str	r2, [r4, #0]
 8014b34:	701e      	strb	r6, [r3, #0]
 8014b36:	6963      	ldr	r3, [r4, #20]
 8014b38:	4283      	cmp	r3, r0
 8014b3a:	d004      	beq.n	8014b46 <__swbuf_r+0x62>
 8014b3c:	89a3      	ldrh	r3, [r4, #12]
 8014b3e:	07db      	lsls	r3, r3, #31
 8014b40:	d506      	bpl.n	8014b50 <__swbuf_r+0x6c>
 8014b42:	2e0a      	cmp	r6, #10
 8014b44:	d104      	bne.n	8014b50 <__swbuf_r+0x6c>
 8014b46:	4621      	mov	r1, r4
 8014b48:	4628      	mov	r0, r5
 8014b4a:	f000 f90f 	bl	8014d6c <_fflush_r>
 8014b4e:	b988      	cbnz	r0, 8014b74 <__swbuf_r+0x90>
 8014b50:	4638      	mov	r0, r7
 8014b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b54:	4b0a      	ldr	r3, [pc, #40]	; (8014b80 <__swbuf_r+0x9c>)
 8014b56:	429c      	cmp	r4, r3
 8014b58:	d101      	bne.n	8014b5e <__swbuf_r+0x7a>
 8014b5a:	68ac      	ldr	r4, [r5, #8]
 8014b5c:	e7cf      	b.n	8014afe <__swbuf_r+0x1a>
 8014b5e:	4b09      	ldr	r3, [pc, #36]	; (8014b84 <__swbuf_r+0xa0>)
 8014b60:	429c      	cmp	r4, r3
 8014b62:	bf08      	it	eq
 8014b64:	68ec      	ldreq	r4, [r5, #12]
 8014b66:	e7ca      	b.n	8014afe <__swbuf_r+0x1a>
 8014b68:	4621      	mov	r1, r4
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	f000 f80c 	bl	8014b88 <__swsetup_r>
 8014b70:	2800      	cmp	r0, #0
 8014b72:	d0cb      	beq.n	8014b0c <__swbuf_r+0x28>
 8014b74:	f04f 37ff 	mov.w	r7, #4294967295
 8014b78:	e7ea      	b.n	8014b50 <__swbuf_r+0x6c>
 8014b7a:	bf00      	nop
 8014b7c:	08015794 	.word	0x08015794
 8014b80:	080157b4 	.word	0x080157b4
 8014b84:	08015774 	.word	0x08015774

08014b88 <__swsetup_r>:
 8014b88:	4b32      	ldr	r3, [pc, #200]	; (8014c54 <__swsetup_r+0xcc>)
 8014b8a:	b570      	push	{r4, r5, r6, lr}
 8014b8c:	681d      	ldr	r5, [r3, #0]
 8014b8e:	4606      	mov	r6, r0
 8014b90:	460c      	mov	r4, r1
 8014b92:	b125      	cbz	r5, 8014b9e <__swsetup_r+0x16>
 8014b94:	69ab      	ldr	r3, [r5, #24]
 8014b96:	b913      	cbnz	r3, 8014b9e <__swsetup_r+0x16>
 8014b98:	4628      	mov	r0, r5
 8014b9a:	f000 f97b 	bl	8014e94 <__sinit>
 8014b9e:	4b2e      	ldr	r3, [pc, #184]	; (8014c58 <__swsetup_r+0xd0>)
 8014ba0:	429c      	cmp	r4, r3
 8014ba2:	d10f      	bne.n	8014bc4 <__swsetup_r+0x3c>
 8014ba4:	686c      	ldr	r4, [r5, #4]
 8014ba6:	89a3      	ldrh	r3, [r4, #12]
 8014ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bac:	0719      	lsls	r1, r3, #28
 8014bae:	d42c      	bmi.n	8014c0a <__swsetup_r+0x82>
 8014bb0:	06dd      	lsls	r5, r3, #27
 8014bb2:	d411      	bmi.n	8014bd8 <__swsetup_r+0x50>
 8014bb4:	2309      	movs	r3, #9
 8014bb6:	6033      	str	r3, [r6, #0]
 8014bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc0:	81a3      	strh	r3, [r4, #12]
 8014bc2:	e03e      	b.n	8014c42 <__swsetup_r+0xba>
 8014bc4:	4b25      	ldr	r3, [pc, #148]	; (8014c5c <__swsetup_r+0xd4>)
 8014bc6:	429c      	cmp	r4, r3
 8014bc8:	d101      	bne.n	8014bce <__swsetup_r+0x46>
 8014bca:	68ac      	ldr	r4, [r5, #8]
 8014bcc:	e7eb      	b.n	8014ba6 <__swsetup_r+0x1e>
 8014bce:	4b24      	ldr	r3, [pc, #144]	; (8014c60 <__swsetup_r+0xd8>)
 8014bd0:	429c      	cmp	r4, r3
 8014bd2:	bf08      	it	eq
 8014bd4:	68ec      	ldreq	r4, [r5, #12]
 8014bd6:	e7e6      	b.n	8014ba6 <__swsetup_r+0x1e>
 8014bd8:	0758      	lsls	r0, r3, #29
 8014bda:	d512      	bpl.n	8014c02 <__swsetup_r+0x7a>
 8014bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bde:	b141      	cbz	r1, 8014bf2 <__swsetup_r+0x6a>
 8014be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014be4:	4299      	cmp	r1, r3
 8014be6:	d002      	beq.n	8014bee <__swsetup_r+0x66>
 8014be8:	4630      	mov	r0, r6
 8014bea:	f7fb fea1 	bl	8010930 <_free_r>
 8014bee:	2300      	movs	r3, #0
 8014bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8014bf2:	89a3      	ldrh	r3, [r4, #12]
 8014bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014bf8:	81a3      	strh	r3, [r4, #12]
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	6063      	str	r3, [r4, #4]
 8014bfe:	6923      	ldr	r3, [r4, #16]
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	89a3      	ldrh	r3, [r4, #12]
 8014c04:	f043 0308 	orr.w	r3, r3, #8
 8014c08:	81a3      	strh	r3, [r4, #12]
 8014c0a:	6923      	ldr	r3, [r4, #16]
 8014c0c:	b94b      	cbnz	r3, 8014c22 <__swsetup_r+0x9a>
 8014c0e:	89a3      	ldrh	r3, [r4, #12]
 8014c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c18:	d003      	beq.n	8014c22 <__swsetup_r+0x9a>
 8014c1a:	4621      	mov	r1, r4
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	f000 f9fb 	bl	8015018 <__smakebuf_r>
 8014c22:	89a0      	ldrh	r0, [r4, #12]
 8014c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c28:	f010 0301 	ands.w	r3, r0, #1
 8014c2c:	d00a      	beq.n	8014c44 <__swsetup_r+0xbc>
 8014c2e:	2300      	movs	r3, #0
 8014c30:	60a3      	str	r3, [r4, #8]
 8014c32:	6963      	ldr	r3, [r4, #20]
 8014c34:	425b      	negs	r3, r3
 8014c36:	61a3      	str	r3, [r4, #24]
 8014c38:	6923      	ldr	r3, [r4, #16]
 8014c3a:	b943      	cbnz	r3, 8014c4e <__swsetup_r+0xc6>
 8014c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c40:	d1ba      	bne.n	8014bb8 <__swsetup_r+0x30>
 8014c42:	bd70      	pop	{r4, r5, r6, pc}
 8014c44:	0781      	lsls	r1, r0, #30
 8014c46:	bf58      	it	pl
 8014c48:	6963      	ldrpl	r3, [r4, #20]
 8014c4a:	60a3      	str	r3, [r4, #8]
 8014c4c:	e7f4      	b.n	8014c38 <__swsetup_r+0xb0>
 8014c4e:	2000      	movs	r0, #0
 8014c50:	e7f7      	b.n	8014c42 <__swsetup_r+0xba>
 8014c52:	bf00      	nop
 8014c54:	20000100 	.word	0x20000100
 8014c58:	08015794 	.word	0x08015794
 8014c5c:	080157b4 	.word	0x080157b4
 8014c60:	08015774 	.word	0x08015774

08014c64 <__sflush_r>:
 8014c64:	898a      	ldrh	r2, [r1, #12]
 8014c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c6a:	4605      	mov	r5, r0
 8014c6c:	0710      	lsls	r0, r2, #28
 8014c6e:	460c      	mov	r4, r1
 8014c70:	d458      	bmi.n	8014d24 <__sflush_r+0xc0>
 8014c72:	684b      	ldr	r3, [r1, #4]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dc05      	bgt.n	8014c84 <__sflush_r+0x20>
 8014c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	dc02      	bgt.n	8014c84 <__sflush_r+0x20>
 8014c7e:	2000      	movs	r0, #0
 8014c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c86:	2e00      	cmp	r6, #0
 8014c88:	d0f9      	beq.n	8014c7e <__sflush_r+0x1a>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c90:	682f      	ldr	r7, [r5, #0]
 8014c92:	602b      	str	r3, [r5, #0]
 8014c94:	d032      	beq.n	8014cfc <__sflush_r+0x98>
 8014c96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c98:	89a3      	ldrh	r3, [r4, #12]
 8014c9a:	075a      	lsls	r2, r3, #29
 8014c9c:	d505      	bpl.n	8014caa <__sflush_r+0x46>
 8014c9e:	6863      	ldr	r3, [r4, #4]
 8014ca0:	1ac0      	subs	r0, r0, r3
 8014ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ca4:	b10b      	cbz	r3, 8014caa <__sflush_r+0x46>
 8014ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ca8:	1ac0      	subs	r0, r0, r3
 8014caa:	2300      	movs	r3, #0
 8014cac:	4602      	mov	r2, r0
 8014cae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	6a21      	ldr	r1, [r4, #32]
 8014cb4:	47b0      	blx	r6
 8014cb6:	1c43      	adds	r3, r0, #1
 8014cb8:	89a3      	ldrh	r3, [r4, #12]
 8014cba:	d106      	bne.n	8014cca <__sflush_r+0x66>
 8014cbc:	6829      	ldr	r1, [r5, #0]
 8014cbe:	291d      	cmp	r1, #29
 8014cc0:	d82c      	bhi.n	8014d1c <__sflush_r+0xb8>
 8014cc2:	4a29      	ldr	r2, [pc, #164]	; (8014d68 <__sflush_r+0x104>)
 8014cc4:	40ca      	lsrs	r2, r1
 8014cc6:	07d6      	lsls	r6, r2, #31
 8014cc8:	d528      	bpl.n	8014d1c <__sflush_r+0xb8>
 8014cca:	2200      	movs	r2, #0
 8014ccc:	04d9      	lsls	r1, r3, #19
 8014cce:	6062      	str	r2, [r4, #4]
 8014cd0:	6922      	ldr	r2, [r4, #16]
 8014cd2:	6022      	str	r2, [r4, #0]
 8014cd4:	d504      	bpl.n	8014ce0 <__sflush_r+0x7c>
 8014cd6:	1c42      	adds	r2, r0, #1
 8014cd8:	d101      	bne.n	8014cde <__sflush_r+0x7a>
 8014cda:	682b      	ldr	r3, [r5, #0]
 8014cdc:	b903      	cbnz	r3, 8014ce0 <__sflush_r+0x7c>
 8014cde:	6560      	str	r0, [r4, #84]	; 0x54
 8014ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ce2:	602f      	str	r7, [r5, #0]
 8014ce4:	2900      	cmp	r1, #0
 8014ce6:	d0ca      	beq.n	8014c7e <__sflush_r+0x1a>
 8014ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cec:	4299      	cmp	r1, r3
 8014cee:	d002      	beq.n	8014cf6 <__sflush_r+0x92>
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	f7fb fe1d 	bl	8010930 <_free_r>
 8014cf6:	2000      	movs	r0, #0
 8014cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8014cfa:	e7c1      	b.n	8014c80 <__sflush_r+0x1c>
 8014cfc:	6a21      	ldr	r1, [r4, #32]
 8014cfe:	2301      	movs	r3, #1
 8014d00:	4628      	mov	r0, r5
 8014d02:	47b0      	blx	r6
 8014d04:	1c41      	adds	r1, r0, #1
 8014d06:	d1c7      	bne.n	8014c98 <__sflush_r+0x34>
 8014d08:	682b      	ldr	r3, [r5, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d0c4      	beq.n	8014c98 <__sflush_r+0x34>
 8014d0e:	2b1d      	cmp	r3, #29
 8014d10:	d001      	beq.n	8014d16 <__sflush_r+0xb2>
 8014d12:	2b16      	cmp	r3, #22
 8014d14:	d101      	bne.n	8014d1a <__sflush_r+0xb6>
 8014d16:	602f      	str	r7, [r5, #0]
 8014d18:	e7b1      	b.n	8014c7e <__sflush_r+0x1a>
 8014d1a:	89a3      	ldrh	r3, [r4, #12]
 8014d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d20:	81a3      	strh	r3, [r4, #12]
 8014d22:	e7ad      	b.n	8014c80 <__sflush_r+0x1c>
 8014d24:	690f      	ldr	r7, [r1, #16]
 8014d26:	2f00      	cmp	r7, #0
 8014d28:	d0a9      	beq.n	8014c7e <__sflush_r+0x1a>
 8014d2a:	0793      	lsls	r3, r2, #30
 8014d2c:	680e      	ldr	r6, [r1, #0]
 8014d2e:	600f      	str	r7, [r1, #0]
 8014d30:	bf0c      	ite	eq
 8014d32:	694b      	ldreq	r3, [r1, #20]
 8014d34:	2300      	movne	r3, #0
 8014d36:	eba6 0807 	sub.w	r8, r6, r7
 8014d3a:	608b      	str	r3, [r1, #8]
 8014d3c:	f1b8 0f00 	cmp.w	r8, #0
 8014d40:	dd9d      	ble.n	8014c7e <__sflush_r+0x1a>
 8014d42:	4643      	mov	r3, r8
 8014d44:	463a      	mov	r2, r7
 8014d46:	6a21      	ldr	r1, [r4, #32]
 8014d48:	4628      	mov	r0, r5
 8014d4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d4c:	47b0      	blx	r6
 8014d4e:	2800      	cmp	r0, #0
 8014d50:	dc06      	bgt.n	8014d60 <__sflush_r+0xfc>
 8014d52:	89a3      	ldrh	r3, [r4, #12]
 8014d54:	f04f 30ff 	mov.w	r0, #4294967295
 8014d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d5c:	81a3      	strh	r3, [r4, #12]
 8014d5e:	e78f      	b.n	8014c80 <__sflush_r+0x1c>
 8014d60:	4407      	add	r7, r0
 8014d62:	eba8 0800 	sub.w	r8, r8, r0
 8014d66:	e7e9      	b.n	8014d3c <__sflush_r+0xd8>
 8014d68:	20400001 	.word	0x20400001

08014d6c <_fflush_r>:
 8014d6c:	b538      	push	{r3, r4, r5, lr}
 8014d6e:	690b      	ldr	r3, [r1, #16]
 8014d70:	4605      	mov	r5, r0
 8014d72:	460c      	mov	r4, r1
 8014d74:	b913      	cbnz	r3, 8014d7c <_fflush_r+0x10>
 8014d76:	2500      	movs	r5, #0
 8014d78:	4628      	mov	r0, r5
 8014d7a:	bd38      	pop	{r3, r4, r5, pc}
 8014d7c:	b118      	cbz	r0, 8014d86 <_fflush_r+0x1a>
 8014d7e:	6983      	ldr	r3, [r0, #24]
 8014d80:	b90b      	cbnz	r3, 8014d86 <_fflush_r+0x1a>
 8014d82:	f000 f887 	bl	8014e94 <__sinit>
 8014d86:	4b14      	ldr	r3, [pc, #80]	; (8014dd8 <_fflush_r+0x6c>)
 8014d88:	429c      	cmp	r4, r3
 8014d8a:	d11b      	bne.n	8014dc4 <_fflush_r+0x58>
 8014d8c:	686c      	ldr	r4, [r5, #4]
 8014d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d0ef      	beq.n	8014d76 <_fflush_r+0xa>
 8014d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d98:	07d0      	lsls	r0, r2, #31
 8014d9a:	d404      	bmi.n	8014da6 <_fflush_r+0x3a>
 8014d9c:	0599      	lsls	r1, r3, #22
 8014d9e:	d402      	bmi.n	8014da6 <_fflush_r+0x3a>
 8014da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014da2:	f7ff fcfa 	bl	801479a <__retarget_lock_acquire_recursive>
 8014da6:	4628      	mov	r0, r5
 8014da8:	4621      	mov	r1, r4
 8014daa:	f7ff ff5b 	bl	8014c64 <__sflush_r>
 8014dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014db0:	4605      	mov	r5, r0
 8014db2:	07da      	lsls	r2, r3, #31
 8014db4:	d4e0      	bmi.n	8014d78 <_fflush_r+0xc>
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	059b      	lsls	r3, r3, #22
 8014dba:	d4dd      	bmi.n	8014d78 <_fflush_r+0xc>
 8014dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dbe:	f7ff fced 	bl	801479c <__retarget_lock_release_recursive>
 8014dc2:	e7d9      	b.n	8014d78 <_fflush_r+0xc>
 8014dc4:	4b05      	ldr	r3, [pc, #20]	; (8014ddc <_fflush_r+0x70>)
 8014dc6:	429c      	cmp	r4, r3
 8014dc8:	d101      	bne.n	8014dce <_fflush_r+0x62>
 8014dca:	68ac      	ldr	r4, [r5, #8]
 8014dcc:	e7df      	b.n	8014d8e <_fflush_r+0x22>
 8014dce:	4b04      	ldr	r3, [pc, #16]	; (8014de0 <_fflush_r+0x74>)
 8014dd0:	429c      	cmp	r4, r3
 8014dd2:	bf08      	it	eq
 8014dd4:	68ec      	ldreq	r4, [r5, #12]
 8014dd6:	e7da      	b.n	8014d8e <_fflush_r+0x22>
 8014dd8:	08015794 	.word	0x08015794
 8014ddc:	080157b4 	.word	0x080157b4
 8014de0:	08015774 	.word	0x08015774

08014de4 <std>:
 8014de4:	2300      	movs	r3, #0
 8014de6:	b510      	push	{r4, lr}
 8014de8:	4604      	mov	r4, r0
 8014dea:	6083      	str	r3, [r0, #8]
 8014dec:	8181      	strh	r1, [r0, #12]
 8014dee:	4619      	mov	r1, r3
 8014df0:	6643      	str	r3, [r0, #100]	; 0x64
 8014df2:	81c2      	strh	r2, [r0, #14]
 8014df4:	2208      	movs	r2, #8
 8014df6:	6183      	str	r3, [r0, #24]
 8014df8:	e9c0 3300 	strd	r3, r3, [r0]
 8014dfc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e00:	305c      	adds	r0, #92	; 0x5c
 8014e02:	f7fb fd8d 	bl	8010920 <memset>
 8014e06:	4b05      	ldr	r3, [pc, #20]	; (8014e1c <std+0x38>)
 8014e08:	6224      	str	r4, [r4, #32]
 8014e0a:	6263      	str	r3, [r4, #36]	; 0x24
 8014e0c:	4b04      	ldr	r3, [pc, #16]	; (8014e20 <std+0x3c>)
 8014e0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e10:	4b04      	ldr	r3, [pc, #16]	; (8014e24 <std+0x40>)
 8014e12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e14:	4b04      	ldr	r3, [pc, #16]	; (8014e28 <std+0x44>)
 8014e16:	6323      	str	r3, [r4, #48]	; 0x30
 8014e18:	bd10      	pop	{r4, pc}
 8014e1a:	bf00      	nop
 8014e1c:	080150a9 	.word	0x080150a9
 8014e20:	080150cb 	.word	0x080150cb
 8014e24:	08015103 	.word	0x08015103
 8014e28:	08015127 	.word	0x08015127

08014e2c <_cleanup_r>:
 8014e2c:	4901      	ldr	r1, [pc, #4]	; (8014e34 <_cleanup_r+0x8>)
 8014e2e:	f000 b8af 	b.w	8014f90 <_fwalk_reent>
 8014e32:	bf00      	nop
 8014e34:	08014d6d 	.word	0x08014d6d

08014e38 <__sfmoreglue>:
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	2268      	movs	r2, #104	; 0x68
 8014e3c:	1e4d      	subs	r5, r1, #1
 8014e3e:	460e      	mov	r6, r1
 8014e40:	4355      	muls	r5, r2
 8014e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e46:	f7fb fddf 	bl	8010a08 <_malloc_r>
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	b140      	cbz	r0, 8014e60 <__sfmoreglue+0x28>
 8014e4e:	2100      	movs	r1, #0
 8014e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e54:	e9c0 1600 	strd	r1, r6, [r0]
 8014e58:	300c      	adds	r0, #12
 8014e5a:	60a0      	str	r0, [r4, #8]
 8014e5c:	f7fb fd60 	bl	8010920 <memset>
 8014e60:	4620      	mov	r0, r4
 8014e62:	bd70      	pop	{r4, r5, r6, pc}

08014e64 <__sfp_lock_acquire>:
 8014e64:	4801      	ldr	r0, [pc, #4]	; (8014e6c <__sfp_lock_acquire+0x8>)
 8014e66:	f7ff bc98 	b.w	801479a <__retarget_lock_acquire_recursive>
 8014e6a:	bf00      	nop
 8014e6c:	2000217d 	.word	0x2000217d

08014e70 <__sfp_lock_release>:
 8014e70:	4801      	ldr	r0, [pc, #4]	; (8014e78 <__sfp_lock_release+0x8>)
 8014e72:	f7ff bc93 	b.w	801479c <__retarget_lock_release_recursive>
 8014e76:	bf00      	nop
 8014e78:	2000217d 	.word	0x2000217d

08014e7c <__sinit_lock_acquire>:
 8014e7c:	4801      	ldr	r0, [pc, #4]	; (8014e84 <__sinit_lock_acquire+0x8>)
 8014e7e:	f7ff bc8c 	b.w	801479a <__retarget_lock_acquire_recursive>
 8014e82:	bf00      	nop
 8014e84:	2000217e 	.word	0x2000217e

08014e88 <__sinit_lock_release>:
 8014e88:	4801      	ldr	r0, [pc, #4]	; (8014e90 <__sinit_lock_release+0x8>)
 8014e8a:	f7ff bc87 	b.w	801479c <__retarget_lock_release_recursive>
 8014e8e:	bf00      	nop
 8014e90:	2000217e 	.word	0x2000217e

08014e94 <__sinit>:
 8014e94:	b510      	push	{r4, lr}
 8014e96:	4604      	mov	r4, r0
 8014e98:	f7ff fff0 	bl	8014e7c <__sinit_lock_acquire>
 8014e9c:	69a3      	ldr	r3, [r4, #24]
 8014e9e:	b11b      	cbz	r3, 8014ea8 <__sinit+0x14>
 8014ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ea4:	f7ff bff0 	b.w	8014e88 <__sinit_lock_release>
 8014ea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014eac:	6523      	str	r3, [r4, #80]	; 0x50
 8014eae:	4620      	mov	r0, r4
 8014eb0:	4b12      	ldr	r3, [pc, #72]	; (8014efc <__sinit+0x68>)
 8014eb2:	4a13      	ldr	r2, [pc, #76]	; (8014f00 <__sinit+0x6c>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	62a2      	str	r2, [r4, #40]	; 0x28
 8014eb8:	42a3      	cmp	r3, r4
 8014eba:	bf04      	itt	eq
 8014ebc:	2301      	moveq	r3, #1
 8014ebe:	61a3      	streq	r3, [r4, #24]
 8014ec0:	f000 f820 	bl	8014f04 <__sfp>
 8014ec4:	6060      	str	r0, [r4, #4]
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f000 f81c 	bl	8014f04 <__sfp>
 8014ecc:	60a0      	str	r0, [r4, #8]
 8014ece:	4620      	mov	r0, r4
 8014ed0:	f000 f818 	bl	8014f04 <__sfp>
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	2104      	movs	r1, #4
 8014ed8:	60e0      	str	r0, [r4, #12]
 8014eda:	6860      	ldr	r0, [r4, #4]
 8014edc:	f7ff ff82 	bl	8014de4 <std>
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	2109      	movs	r1, #9
 8014ee4:	68a0      	ldr	r0, [r4, #8]
 8014ee6:	f7ff ff7d 	bl	8014de4 <std>
 8014eea:	2202      	movs	r2, #2
 8014eec:	2112      	movs	r1, #18
 8014eee:	68e0      	ldr	r0, [r4, #12]
 8014ef0:	f7ff ff78 	bl	8014de4 <std>
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	61a3      	str	r3, [r4, #24]
 8014ef8:	e7d2      	b.n	8014ea0 <__sinit+0xc>
 8014efa:	bf00      	nop
 8014efc:	08015330 	.word	0x08015330
 8014f00:	08014e2d 	.word	0x08014e2d

08014f04 <__sfp>:
 8014f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f06:	4607      	mov	r7, r0
 8014f08:	f7ff ffac 	bl	8014e64 <__sfp_lock_acquire>
 8014f0c:	4b1e      	ldr	r3, [pc, #120]	; (8014f88 <__sfp+0x84>)
 8014f0e:	681e      	ldr	r6, [r3, #0]
 8014f10:	69b3      	ldr	r3, [r6, #24]
 8014f12:	b913      	cbnz	r3, 8014f1a <__sfp+0x16>
 8014f14:	4630      	mov	r0, r6
 8014f16:	f7ff ffbd 	bl	8014e94 <__sinit>
 8014f1a:	3648      	adds	r6, #72	; 0x48
 8014f1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f20:	3b01      	subs	r3, #1
 8014f22:	d503      	bpl.n	8014f2c <__sfp+0x28>
 8014f24:	6833      	ldr	r3, [r6, #0]
 8014f26:	b30b      	cbz	r3, 8014f6c <__sfp+0x68>
 8014f28:	6836      	ldr	r6, [r6, #0]
 8014f2a:	e7f7      	b.n	8014f1c <__sfp+0x18>
 8014f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f30:	b9d5      	cbnz	r5, 8014f68 <__sfp+0x64>
 8014f32:	4b16      	ldr	r3, [pc, #88]	; (8014f8c <__sfp+0x88>)
 8014f34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f38:	6665      	str	r5, [r4, #100]	; 0x64
 8014f3a:	60e3      	str	r3, [r4, #12]
 8014f3c:	f7ff fc2c 	bl	8014798 <__retarget_lock_init_recursive>
 8014f40:	f7ff ff96 	bl	8014e70 <__sfp_lock_release>
 8014f44:	2208      	movs	r2, #8
 8014f46:	4629      	mov	r1, r5
 8014f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f4c:	6025      	str	r5, [r4, #0]
 8014f4e:	61a5      	str	r5, [r4, #24]
 8014f50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f58:	f7fb fce2 	bl	8010920 <memset>
 8014f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f64:	4620      	mov	r0, r4
 8014f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f68:	3468      	adds	r4, #104	; 0x68
 8014f6a:	e7d9      	b.n	8014f20 <__sfp+0x1c>
 8014f6c:	2104      	movs	r1, #4
 8014f6e:	4638      	mov	r0, r7
 8014f70:	f7ff ff62 	bl	8014e38 <__sfmoreglue>
 8014f74:	4604      	mov	r4, r0
 8014f76:	6030      	str	r0, [r6, #0]
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d1d5      	bne.n	8014f28 <__sfp+0x24>
 8014f7c:	f7ff ff78 	bl	8014e70 <__sfp_lock_release>
 8014f80:	230c      	movs	r3, #12
 8014f82:	603b      	str	r3, [r7, #0]
 8014f84:	e7ee      	b.n	8014f64 <__sfp+0x60>
 8014f86:	bf00      	nop
 8014f88:	08015330 	.word	0x08015330
 8014f8c:	ffff0001 	.word	0xffff0001

08014f90 <_fwalk_reent>:
 8014f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f94:	4606      	mov	r6, r0
 8014f96:	4688      	mov	r8, r1
 8014f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f9c:	2700      	movs	r7, #0
 8014f9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fa2:	f1b9 0901 	subs.w	r9, r9, #1
 8014fa6:	d505      	bpl.n	8014fb4 <_fwalk_reent+0x24>
 8014fa8:	6824      	ldr	r4, [r4, #0]
 8014faa:	2c00      	cmp	r4, #0
 8014fac:	d1f7      	bne.n	8014f9e <_fwalk_reent+0xe>
 8014fae:	4638      	mov	r0, r7
 8014fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fb4:	89ab      	ldrh	r3, [r5, #12]
 8014fb6:	2b01      	cmp	r3, #1
 8014fb8:	d907      	bls.n	8014fca <_fwalk_reent+0x3a>
 8014fba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	d003      	beq.n	8014fca <_fwalk_reent+0x3a>
 8014fc2:	4629      	mov	r1, r5
 8014fc4:	4630      	mov	r0, r6
 8014fc6:	47c0      	blx	r8
 8014fc8:	4307      	orrs	r7, r0
 8014fca:	3568      	adds	r5, #104	; 0x68
 8014fcc:	e7e9      	b.n	8014fa2 <_fwalk_reent+0x12>

08014fce <__swhatbuf_r>:
 8014fce:	b570      	push	{r4, r5, r6, lr}
 8014fd0:	460e      	mov	r6, r1
 8014fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd6:	b096      	sub	sp, #88	; 0x58
 8014fd8:	4614      	mov	r4, r2
 8014fda:	2900      	cmp	r1, #0
 8014fdc:	461d      	mov	r5, r3
 8014fde:	da08      	bge.n	8014ff2 <__swhatbuf_r+0x24>
 8014fe0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	602a      	str	r2, [r5, #0]
 8014fe8:	061a      	lsls	r2, r3, #24
 8014fea:	d410      	bmi.n	801500e <__swhatbuf_r+0x40>
 8014fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ff0:	e00e      	b.n	8015010 <__swhatbuf_r+0x42>
 8014ff2:	466a      	mov	r2, sp
 8014ff4:	f000 f8be 	bl	8015174 <_fstat_r>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	dbf1      	blt.n	8014fe0 <__swhatbuf_r+0x12>
 8014ffc:	9a01      	ldr	r2, [sp, #4]
 8014ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015006:	425a      	negs	r2, r3
 8015008:	415a      	adcs	r2, r3
 801500a:	602a      	str	r2, [r5, #0]
 801500c:	e7ee      	b.n	8014fec <__swhatbuf_r+0x1e>
 801500e:	2340      	movs	r3, #64	; 0x40
 8015010:	2000      	movs	r0, #0
 8015012:	6023      	str	r3, [r4, #0]
 8015014:	b016      	add	sp, #88	; 0x58
 8015016:	bd70      	pop	{r4, r5, r6, pc}

08015018 <__smakebuf_r>:
 8015018:	898b      	ldrh	r3, [r1, #12]
 801501a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801501c:	079d      	lsls	r5, r3, #30
 801501e:	4606      	mov	r6, r0
 8015020:	460c      	mov	r4, r1
 8015022:	d507      	bpl.n	8015034 <__smakebuf_r+0x1c>
 8015024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	6123      	str	r3, [r4, #16]
 801502c:	2301      	movs	r3, #1
 801502e:	6163      	str	r3, [r4, #20]
 8015030:	b002      	add	sp, #8
 8015032:	bd70      	pop	{r4, r5, r6, pc}
 8015034:	ab01      	add	r3, sp, #4
 8015036:	466a      	mov	r2, sp
 8015038:	f7ff ffc9 	bl	8014fce <__swhatbuf_r>
 801503c:	9900      	ldr	r1, [sp, #0]
 801503e:	4605      	mov	r5, r0
 8015040:	4630      	mov	r0, r6
 8015042:	f7fb fce1 	bl	8010a08 <_malloc_r>
 8015046:	b948      	cbnz	r0, 801505c <__smakebuf_r+0x44>
 8015048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801504c:	059a      	lsls	r2, r3, #22
 801504e:	d4ef      	bmi.n	8015030 <__smakebuf_r+0x18>
 8015050:	f023 0303 	bic.w	r3, r3, #3
 8015054:	f043 0302 	orr.w	r3, r3, #2
 8015058:	81a3      	strh	r3, [r4, #12]
 801505a:	e7e3      	b.n	8015024 <__smakebuf_r+0xc>
 801505c:	4b0d      	ldr	r3, [pc, #52]	; (8015094 <__smakebuf_r+0x7c>)
 801505e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015060:	89a3      	ldrh	r3, [r4, #12]
 8015062:	6020      	str	r0, [r4, #0]
 8015064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015068:	6120      	str	r0, [r4, #16]
 801506a:	81a3      	strh	r3, [r4, #12]
 801506c:	9b00      	ldr	r3, [sp, #0]
 801506e:	6163      	str	r3, [r4, #20]
 8015070:	9b01      	ldr	r3, [sp, #4]
 8015072:	b15b      	cbz	r3, 801508c <__smakebuf_r+0x74>
 8015074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015078:	4630      	mov	r0, r6
 801507a:	f000 f88d 	bl	8015198 <_isatty_r>
 801507e:	b128      	cbz	r0, 801508c <__smakebuf_r+0x74>
 8015080:	89a3      	ldrh	r3, [r4, #12]
 8015082:	f023 0303 	bic.w	r3, r3, #3
 8015086:	f043 0301 	orr.w	r3, r3, #1
 801508a:	81a3      	strh	r3, [r4, #12]
 801508c:	89a0      	ldrh	r0, [r4, #12]
 801508e:	4305      	orrs	r5, r0
 8015090:	81a5      	strh	r5, [r4, #12]
 8015092:	e7cd      	b.n	8015030 <__smakebuf_r+0x18>
 8015094:	08014e2d 	.word	0x08014e2d

08015098 <_malloc_usable_size_r>:
 8015098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801509c:	1f18      	subs	r0, r3, #4
 801509e:	2b00      	cmp	r3, #0
 80150a0:	bfbc      	itt	lt
 80150a2:	580b      	ldrlt	r3, [r1, r0]
 80150a4:	18c0      	addlt	r0, r0, r3
 80150a6:	4770      	bx	lr

080150a8 <__sread>:
 80150a8:	b510      	push	{r4, lr}
 80150aa:	460c      	mov	r4, r1
 80150ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150b0:	f000 f894 	bl	80151dc <_read_r>
 80150b4:	2800      	cmp	r0, #0
 80150b6:	bfab      	itete	ge
 80150b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80150ba:	89a3      	ldrhlt	r3, [r4, #12]
 80150bc:	181b      	addge	r3, r3, r0
 80150be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150c2:	bfac      	ite	ge
 80150c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80150c6:	81a3      	strhlt	r3, [r4, #12]
 80150c8:	bd10      	pop	{r4, pc}

080150ca <__swrite>:
 80150ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ce:	461f      	mov	r7, r3
 80150d0:	898b      	ldrh	r3, [r1, #12]
 80150d2:	4605      	mov	r5, r0
 80150d4:	460c      	mov	r4, r1
 80150d6:	05db      	lsls	r3, r3, #23
 80150d8:	4616      	mov	r6, r2
 80150da:	d505      	bpl.n	80150e8 <__swrite+0x1e>
 80150dc:	2302      	movs	r3, #2
 80150de:	2200      	movs	r2, #0
 80150e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150e4:	f000 f868 	bl	80151b8 <_lseek_r>
 80150e8:	89a3      	ldrh	r3, [r4, #12]
 80150ea:	4632      	mov	r2, r6
 80150ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150f0:	4628      	mov	r0, r5
 80150f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150f6:	81a3      	strh	r3, [r4, #12]
 80150f8:	463b      	mov	r3, r7
 80150fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150fe:	f000 b817 	b.w	8015130 <_write_r>

08015102 <__sseek>:
 8015102:	b510      	push	{r4, lr}
 8015104:	460c      	mov	r4, r1
 8015106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801510a:	f000 f855 	bl	80151b8 <_lseek_r>
 801510e:	1c43      	adds	r3, r0, #1
 8015110:	89a3      	ldrh	r3, [r4, #12]
 8015112:	bf15      	itete	ne
 8015114:	6560      	strne	r0, [r4, #84]	; 0x54
 8015116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801511a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801511e:	81a3      	strheq	r3, [r4, #12]
 8015120:	bf18      	it	ne
 8015122:	81a3      	strhne	r3, [r4, #12]
 8015124:	bd10      	pop	{r4, pc}

08015126 <__sclose>:
 8015126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801512a:	f000 b813 	b.w	8015154 <_close_r>
	...

08015130 <_write_r>:
 8015130:	b538      	push	{r3, r4, r5, lr}
 8015132:	4604      	mov	r4, r0
 8015134:	4d06      	ldr	r5, [pc, #24]	; (8015150 <_write_r+0x20>)
 8015136:	4608      	mov	r0, r1
 8015138:	4611      	mov	r1, r2
 801513a:	2200      	movs	r2, #0
 801513c:	602a      	str	r2, [r5, #0]
 801513e:	461a      	mov	r2, r3
 8015140:	f7ed fedf 	bl	8002f02 <_write>
 8015144:	1c43      	adds	r3, r0, #1
 8015146:	d102      	bne.n	801514e <_write_r+0x1e>
 8015148:	682b      	ldr	r3, [r5, #0]
 801514a:	b103      	cbz	r3, 801514e <_write_r+0x1e>
 801514c:	6023      	str	r3, [r4, #0]
 801514e:	bd38      	pop	{r3, r4, r5, pc}
 8015150:	20002178 	.word	0x20002178

08015154 <_close_r>:
 8015154:	b538      	push	{r3, r4, r5, lr}
 8015156:	2300      	movs	r3, #0
 8015158:	4d05      	ldr	r5, [pc, #20]	; (8015170 <_close_r+0x1c>)
 801515a:	4604      	mov	r4, r0
 801515c:	4608      	mov	r0, r1
 801515e:	602b      	str	r3, [r5, #0]
 8015160:	f7ed feeb 	bl	8002f3a <_close>
 8015164:	1c43      	adds	r3, r0, #1
 8015166:	d102      	bne.n	801516e <_close_r+0x1a>
 8015168:	682b      	ldr	r3, [r5, #0]
 801516a:	b103      	cbz	r3, 801516e <_close_r+0x1a>
 801516c:	6023      	str	r3, [r4, #0]
 801516e:	bd38      	pop	{r3, r4, r5, pc}
 8015170:	20002178 	.word	0x20002178

08015174 <_fstat_r>:
 8015174:	b538      	push	{r3, r4, r5, lr}
 8015176:	2300      	movs	r3, #0
 8015178:	4d06      	ldr	r5, [pc, #24]	; (8015194 <_fstat_r+0x20>)
 801517a:	4604      	mov	r4, r0
 801517c:	4608      	mov	r0, r1
 801517e:	4611      	mov	r1, r2
 8015180:	602b      	str	r3, [r5, #0]
 8015182:	f7ed fee6 	bl	8002f52 <_fstat>
 8015186:	1c43      	adds	r3, r0, #1
 8015188:	d102      	bne.n	8015190 <_fstat_r+0x1c>
 801518a:	682b      	ldr	r3, [r5, #0]
 801518c:	b103      	cbz	r3, 8015190 <_fstat_r+0x1c>
 801518e:	6023      	str	r3, [r4, #0]
 8015190:	bd38      	pop	{r3, r4, r5, pc}
 8015192:	bf00      	nop
 8015194:	20002178 	.word	0x20002178

08015198 <_isatty_r>:
 8015198:	b538      	push	{r3, r4, r5, lr}
 801519a:	2300      	movs	r3, #0
 801519c:	4d05      	ldr	r5, [pc, #20]	; (80151b4 <_isatty_r+0x1c>)
 801519e:	4604      	mov	r4, r0
 80151a0:	4608      	mov	r0, r1
 80151a2:	602b      	str	r3, [r5, #0]
 80151a4:	f7ed fee5 	bl	8002f72 <_isatty>
 80151a8:	1c43      	adds	r3, r0, #1
 80151aa:	d102      	bne.n	80151b2 <_isatty_r+0x1a>
 80151ac:	682b      	ldr	r3, [r5, #0]
 80151ae:	b103      	cbz	r3, 80151b2 <_isatty_r+0x1a>
 80151b0:	6023      	str	r3, [r4, #0]
 80151b2:	bd38      	pop	{r3, r4, r5, pc}
 80151b4:	20002178 	.word	0x20002178

080151b8 <_lseek_r>:
 80151b8:	b538      	push	{r3, r4, r5, lr}
 80151ba:	4604      	mov	r4, r0
 80151bc:	4d06      	ldr	r5, [pc, #24]	; (80151d8 <_lseek_r+0x20>)
 80151be:	4608      	mov	r0, r1
 80151c0:	4611      	mov	r1, r2
 80151c2:	2200      	movs	r2, #0
 80151c4:	602a      	str	r2, [r5, #0]
 80151c6:	461a      	mov	r2, r3
 80151c8:	f7ed fede 	bl	8002f88 <_lseek>
 80151cc:	1c43      	adds	r3, r0, #1
 80151ce:	d102      	bne.n	80151d6 <_lseek_r+0x1e>
 80151d0:	682b      	ldr	r3, [r5, #0]
 80151d2:	b103      	cbz	r3, 80151d6 <_lseek_r+0x1e>
 80151d4:	6023      	str	r3, [r4, #0]
 80151d6:	bd38      	pop	{r3, r4, r5, pc}
 80151d8:	20002178 	.word	0x20002178

080151dc <_read_r>:
 80151dc:	b538      	push	{r3, r4, r5, lr}
 80151de:	4604      	mov	r4, r0
 80151e0:	4d06      	ldr	r5, [pc, #24]	; (80151fc <_read_r+0x20>)
 80151e2:	4608      	mov	r0, r1
 80151e4:	4611      	mov	r1, r2
 80151e6:	2200      	movs	r2, #0
 80151e8:	602a      	str	r2, [r5, #0]
 80151ea:	461a      	mov	r2, r3
 80151ec:	f7ed fe6c 	bl	8002ec8 <_read>
 80151f0:	1c43      	adds	r3, r0, #1
 80151f2:	d102      	bne.n	80151fa <_read_r+0x1e>
 80151f4:	682b      	ldr	r3, [r5, #0]
 80151f6:	b103      	cbz	r3, 80151fa <_read_r+0x1e>
 80151f8:	6023      	str	r3, [r4, #0]
 80151fa:	bd38      	pop	{r3, r4, r5, pc}
 80151fc:	20002178 	.word	0x20002178

08015200 <_init>:
 8015200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015202:	bf00      	nop
 8015204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015206:	bc08      	pop	{r3}
 8015208:	469e      	mov	lr, r3
 801520a:	4770      	bx	lr

0801520c <_fini>:
 801520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801520e:	bf00      	nop
 8015210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015212:	bc08      	pop	{r3}
 8015214:	469e      	mov	lr, r3
 8015216:	4770      	bx	lr
